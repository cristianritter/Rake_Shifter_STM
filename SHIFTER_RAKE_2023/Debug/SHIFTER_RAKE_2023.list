
SHIFTER_RAKE_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800b200  0800b200  0001b200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4cc  0800b4cc  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4cc  0800b4cc  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4cc  0800b4cc  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4cc  0800b4cc  0001b4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4d0  0800b4d0  0001b4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800b4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  200001d0  0800b6a4  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b94  0800b6a4  00020b94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012634  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c5  00000000  00000000  0003282d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00035cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00036dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b84b  00000000  00000000  00037d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ae5  00000000  00000000  0005356b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3a1  00000000  00000000  00068050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f73f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd8  00000000  00000000  000f7444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b1e8 	.word	0x0800b1e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	0800b1e8 	.word	0x0800b1e8

0800014c <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000154:	2300      	movs	r3, #0
 8000156:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000158:	68bb      	ldr	r3, [r7, #8]
 800015a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800015e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800016c:	d020      	beq.n	80001b0 <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 800016e:	68f9      	ldr	r1, [r7, #12]
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	4413      	add	r3, r2
 8000176:	b2ca      	uxtb	r2, r1
 8000178:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	0a19      	lsrs	r1, r3, #8
 800017e:	68bb      	ldr	r3, [r7, #8]
 8000180:	3301      	adds	r3, #1
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	b2ca      	uxtb	r2, r1
 8000188:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	0c19      	lsrs	r1, r3, #16
 800018e:	68bb      	ldr	r3, [r7, #8]
 8000190:	3302      	adds	r3, #2
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	b2ca      	uxtb	r2, r1
 8000198:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	0e19      	lsrs	r1, r3, #24
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	3303      	adds	r3, #3
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	4413      	add	r3, r2
 80001a6:	b2ca      	uxtb	r2, r1
 80001a8:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	3304      	adds	r3, #4
 80001ae:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001b6:	d1cf      	bne.n	8000158 <read_flash+0xc>
}
 80001b8:	bf00      	nop
 80001ba:	bf00      	nop
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr

080001c4 <LerADCS>:
uint16_t ADCValue[3] = {0, 0, 0};
int8_t buffer2[6];
uint8_t rx_buffer[3];
uint8_t spi_select;

void LerADCS(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
  ADCValue[0] = HAL_ADC_GetValue(&hadc1); // axis x cambio
 80001c8:	4825      	ldr	r0, [pc, #148]	; (8000260 <LerADCS+0x9c>)
 80001ca:	f001 fa49 	bl	8001660 <HAL_ADC_GetValue>
 80001ce:	4603      	mov	r3, r0
 80001d0:	b29a      	uxth	r2, r3
 80001d2:	4b24      	ldr	r3, [pc, #144]	; (8000264 <LerADCS+0xa0>)
 80001d4:	801a      	strh	r2, [r3, #0]
  ADCValue[1] = HAL_ADC_GetValue(&hadc1); // axis y cambio
 80001d6:	4822      	ldr	r0, [pc, #136]	; (8000260 <LerADCS+0x9c>)
 80001d8:	f001 fa42 	bl	8001660 <HAL_ADC_GetValue>
 80001dc:	4603      	mov	r3, r0
 80001de:	b29a      	uxth	r2, r3
 80001e0:	4b20      	ldr	r3, [pc, #128]	; (8000264 <LerADCS+0xa0>)
 80001e2:	805a      	strh	r2, [r3, #2]
  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 80001e4:	2301      	movs	r3, #1
 80001e6:	2203      	movs	r2, #3
 80001e8:	491f      	ldr	r1, [pc, #124]	; (8000268 <LerADCS+0xa4>)
 80001ea:	4820      	ldr	r0, [pc, #128]	; (800026c <LerADCS+0xa8>)
 80001ec:	f004 fb22 	bl	8004834 <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 80001f0:	2301      	movs	r3, #1
 80001f2:	2203      	movs	r2, #3
 80001f4:	491c      	ldr	r1, [pc, #112]	; (8000268 <LerADCS+0xa4>)
 80001f6:	481d      	ldr	r0, [pc, #116]	; (800026c <LerADCS+0xa8>)
 80001f8:	f004 fb1c 	bl	8004834 <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 80001fc:	2301      	movs	r3, #1
 80001fe:	2203      	movs	r2, #3
 8000200:	4919      	ldr	r1, [pc, #100]	; (8000268 <LerADCS+0xa4>)
 8000202:	481a      	ldr	r0, [pc, #104]	; (800026c <LerADCS+0xa8>)
 8000204:	f004 fb16 	bl	8004834 <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 8000208:	2301      	movs	r3, #1
 800020a:	2203      	movs	r2, #3
 800020c:	4916      	ldr	r1, [pc, #88]	; (8000268 <LerADCS+0xa4>)
 800020e:	4817      	ldr	r0, [pc, #92]	; (800026c <LerADCS+0xa8>)
 8000210:	f004 fb10 	bl	8004834 <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 8000214:	2301      	movs	r3, #1
 8000216:	2203      	movs	r2, #3
 8000218:	4913      	ldr	r1, [pc, #76]	; (8000268 <LerADCS+0xa4>)
 800021a:	4814      	ldr	r0, [pc, #80]	; (800026c <LerADCS+0xa8>)
 800021c:	f004 fb0a 	bl	8004834 <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi2, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 8000220:	2301      	movs	r3, #1
 8000222:	2203      	movs	r2, #3
 8000224:	4910      	ldr	r1, [pc, #64]	; (8000268 <LerADCS+0xa4>)
 8000226:	4812      	ldr	r0, [pc, #72]	; (8000270 <LerADCS+0xac>)
 8000228:	f004 fb04 	bl	8004834 <HAL_SPI_Receive>
  ADCValue[2] = HAL_ADC_GetValue(&hadc1); // sck pin 9 reading -> ~0=desconectado, ~4096=g25, ~2048=g27
 800022c:	480c      	ldr	r0, [pc, #48]	; (8000260 <LerADCS+0x9c>)
 800022e:	f001 fa17 	bl	8001660 <HAL_ADC_GetValue>
 8000232:	4603      	mov	r3, r0
 8000234:	b29a      	uxth	r2, r3
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <LerADCS+0xa0>)
 8000238:	809a      	strh	r2, [r3, #4]
//  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[0]), 100);
//  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[1]), 100);
//  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[2]), 100);
  if (ADCValue[2] > 3850){
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <LerADCS+0xa0>)
 800023c:	889b      	ldrh	r3, [r3, #4]
 800023e:	f640 720a 	movw	r2, #3850	; 0xf0a
 8000242:	4293      	cmp	r3, r2
 8000244:	d903      	bls.n	800024e <LerADCS+0x8a>
	  spi_select = 1;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <LerADCS+0xb0>)
 8000248:	2201      	movs	r2, #1
 800024a:	701a      	strb	r2, [r3, #0]
 800024c:	e002      	b.n	8000254 <LerADCS+0x90>
  }
  else
  {
	  spi_select = 2;
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <LerADCS+0xb0>)
 8000250:	2202      	movs	r2, #2
 8000252:	701a      	strb	r2, [r3, #0]
  }
//  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", spi_select), 100);
//  HAL_UART_Transmit(&huart1, "      ", 6, 100);
//  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  HAL_Delay(1);
 8000254:	2001      	movs	r0, #1
 8000256:	f001 f829 	bl	80012ac <HAL_Delay>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	200001ec 	.word	0x200001ec
 8000264:	2000035c 	.word	0x2000035c
 8000268:	2000036c 	.word	0x2000036c
 800026c:	20000260 	.word	0x20000260
 8000270:	200002b8 	.word	0x200002b8
 8000274:	2000036f 	.word	0x2000036f

08000278 <LerSPI>:

void LerSPI(int select){
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_SET);
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000286:	4830      	ldr	r0, [pc, #192]	; (8000348 <LerSPI+0xd0>)
 8000288:	f002 f8a3 	bl	80023d2 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800028c:	2001      	movs	r0, #1
 800028e:	f001 f80d 	bl	80012ac <HAL_Delay>
  select = 1; // for working with g27
 8000292:	2301      	movs	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
  if (select == 1){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d105      	bne.n	80002a8 <LerSPI+0x30>
    HAL_SPI_Receive(&hspi1, rx_buffer, 3, 50);
 800029c:	2332      	movs	r3, #50	; 0x32
 800029e:	2203      	movs	r2, #3
 80002a0:	492a      	ldr	r1, [pc, #168]	; (800034c <LerSPI+0xd4>)
 80002a2:	482b      	ldr	r0, [pc, #172]	; (8000350 <LerSPI+0xd8>)
 80002a4:	f004 fac6 	bl	8004834 <HAL_SPI_Receive>
  }
  if (select == 2){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d105      	bne.n	80002ba <LerSPI+0x42>
    HAL_SPI_Receive(&hspi2, rx_buffer, 3, 50);
 80002ae:	2332      	movs	r3, #50	; 0x32
 80002b0:	2203      	movs	r2, #3
 80002b2:	4926      	ldr	r1, [pc, #152]	; (800034c <LerSPI+0xd4>)
 80002b4:	4827      	ldr	r0, [pc, #156]	; (8000354 <LerSPI+0xdc>)
 80002b6:	f004 fabd 	bl	8004834 <HAL_SPI_Receive>
  }
  HAL_Delay(1);
 80002ba:	2001      	movs	r0, #1
 80002bc:	f000 fff6 	bl	80012ac <HAL_Delay>
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002c6:	4820      	ldr	r0, [pc, #128]	; (8000348 <LerSPI+0xd0>)
 80002c8:	f002 f883 	bl	80023d2 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f000 ffed 	bl	80012ac <HAL_Delay>

  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[0]), 100);
 80002d2:	4b1e      	ldr	r3, [pc, #120]	; (800034c <LerSPI+0xd4>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	461a      	mov	r2, r3
 80002d8:	491f      	ldr	r1, [pc, #124]	; (8000358 <LerSPI+0xe0>)
 80002da:	4820      	ldr	r0, [pc, #128]	; (800035c <LerSPI+0xe4>)
 80002dc:	f009 fcc6 	bl	8009c6c <siprintf>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	491d      	ldr	r1, [pc, #116]	; (800035c <LerSPI+0xe4>)
 80002e8:	481d      	ldr	r0, [pc, #116]	; (8000360 <LerSPI+0xe8>)
 80002ea:	f004 fe9c 	bl	8005026 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[1]), 100);
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <LerSPI+0xd4>)
 80002f0:	785b      	ldrb	r3, [r3, #1]
 80002f2:	461a      	mov	r2, r3
 80002f4:	4918      	ldr	r1, [pc, #96]	; (8000358 <LerSPI+0xe0>)
 80002f6:	4819      	ldr	r0, [pc, #100]	; (800035c <LerSPI+0xe4>)
 80002f8:	f009 fcb8 	bl	8009c6c <siprintf>
 80002fc:	4603      	mov	r3, r0
 80002fe:	b29a      	uxth	r2, r3
 8000300:	2364      	movs	r3, #100	; 0x64
 8000302:	4916      	ldr	r1, [pc, #88]	; (800035c <LerSPI+0xe4>)
 8000304:	4816      	ldr	r0, [pc, #88]	; (8000360 <LerSPI+0xe8>)
 8000306:	f004 fe8e 	bl	8005026 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[2]), 100);
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <LerSPI+0xd4>)
 800030c:	789b      	ldrb	r3, [r3, #2]
 800030e:	461a      	mov	r2, r3
 8000310:	4911      	ldr	r1, [pc, #68]	; (8000358 <LerSPI+0xe0>)
 8000312:	4812      	ldr	r0, [pc, #72]	; (800035c <LerSPI+0xe4>)
 8000314:	f009 fcaa 	bl	8009c6c <siprintf>
 8000318:	4603      	mov	r3, r0
 800031a:	b29a      	uxth	r2, r3
 800031c:	2364      	movs	r3, #100	; 0x64
 800031e:	490f      	ldr	r1, [pc, #60]	; (800035c <LerSPI+0xe4>)
 8000320:	480f      	ldr	r0, [pc, #60]	; (8000360 <LerSPI+0xe8>)
 8000322:	f004 fe80 	bl	8005026 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "      ", 6, 100);
 8000326:	2364      	movs	r3, #100	; 0x64
 8000328:	2206      	movs	r2, #6
 800032a:	490e      	ldr	r1, [pc, #56]	; (8000364 <LerSPI+0xec>)
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <LerSPI+0xe8>)
 800032e:	f004 fe7a 	bl	8005026 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	2202      	movs	r2, #2
 8000336:	490c      	ldr	r1, [pc, #48]	; (8000368 <LerSPI+0xf0>)
 8000338:	4809      	ldr	r0, [pc, #36]	; (8000360 <LerSPI+0xe8>)
 800033a:	f004 fe74 	bl	8005026 <HAL_UART_Transmit>
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40010c00 	.word	0x40010c00
 800034c:	2000036c 	.word	0x2000036c
 8000350:	20000260 	.word	0x20000260
 8000354:	200002b8 	.word	0x200002b8
 8000358:	0800b200 	.word	0x0800b200
 800035c:	20000364 	.word	0x20000364
 8000360:	20000310 	.word	0x20000310
 8000364:	0800b204 	.word	0x0800b204
 8000368:	0800b20c 	.word	0x0800b20c

0800036c <Calibrar>:

void Calibrar(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){			// se botão de calibração pressionado
 8000372:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000376:	483e      	ldr	r0, [pc, #248]	; (8000470 <Calibrar+0x104>)
 8000378:	f002 f814 	bl	80023a4 <HAL_GPIO_ReadPin>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d072      	beq.n	8000468 <Calibrar+0xfc>
		HAL_Delay(500);
 8000382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000386:	f000 ff91 	bl	80012ac <HAL_Delay>
		uint16_t axis_x_min_max[2] = {9999, 0};
 800038a:	f242 730f 	movw	r3, #9999	; 0x270f
 800038e:	813b      	strh	r3, [r7, #8]
 8000390:	2300      	movs	r3, #0
 8000392:	817b      	strh	r3, [r7, #10]
		uint16_t axis_y_min_max[2] = {9999, 0};
 8000394:	f242 730f 	movw	r3, #9999	; 0x270f
 8000398:	80bb      	strh	r3, [r7, #4]
 800039a:	2300      	movs	r3, #0
 800039c:	80fb      	strh	r3, [r7, #6]
		while (HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 800039e:	e029      	b.n	80003f4 <Calibrar+0x88>
			HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 80003a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a4:	4833      	ldr	r0, [pc, #204]	; (8000474 <Calibrar+0x108>)
 80003a6:	f002 f82c 	bl	8002402 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 80003aa:	2032      	movs	r0, #50	; 0x32
 80003ac:	f000 ff7e 	bl	80012ac <HAL_Delay>
			LerADCS();  									//le posicao dos eixos
 80003b0:	f7ff ff08 	bl	80001c4 <LerADCS>
			if (ADCValue[0] < axis_x_min_max[0]){			// define o menor valor detectado no eixo x
 80003b4:	4b30      	ldr	r3, [pc, #192]	; (8000478 <Calibrar+0x10c>)
 80003b6:	881a      	ldrh	r2, [r3, #0]
 80003b8:	893b      	ldrh	r3, [r7, #8]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d202      	bcs.n	80003c4 <Calibrar+0x58>
				axis_x_min_max[0] = ADCValue[0];
 80003be:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <Calibrar+0x10c>)
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	813b      	strh	r3, [r7, #8]
			}
			if (ADCValue[0] > axis_x_min_max[1]){			// define o maior valor detectado no eixo x
 80003c4:	4b2c      	ldr	r3, [pc, #176]	; (8000478 <Calibrar+0x10c>)
 80003c6:	881a      	ldrh	r2, [r3, #0]
 80003c8:	897b      	ldrh	r3, [r7, #10]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d902      	bls.n	80003d4 <Calibrar+0x68>
				axis_x_min_max[1] = ADCValue[0];
 80003ce:	4b2a      	ldr	r3, [pc, #168]	; (8000478 <Calibrar+0x10c>)
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	817b      	strh	r3, [r7, #10]
			}
			if (ADCValue[1] < axis_y_min_max[0]){			// define o menor valor detectado no eixo y
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <Calibrar+0x10c>)
 80003d6:	885a      	ldrh	r2, [r3, #2]
 80003d8:	88bb      	ldrh	r3, [r7, #4]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d202      	bcs.n	80003e4 <Calibrar+0x78>
				axis_y_min_max[0] = ADCValue[1];
 80003de:	4b26      	ldr	r3, [pc, #152]	; (8000478 <Calibrar+0x10c>)
 80003e0:	885b      	ldrh	r3, [r3, #2]
 80003e2:	80bb      	strh	r3, [r7, #4]
			}
			if (ADCValue[1] > axis_y_min_max[1]){			// define o maior valor detectado no eixo y
 80003e4:	4b24      	ldr	r3, [pc, #144]	; (8000478 <Calibrar+0x10c>)
 80003e6:	885a      	ldrh	r2, [r3, #2]
 80003e8:	88fb      	ldrh	r3, [r7, #6]
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d902      	bls.n	80003f4 <Calibrar+0x88>
				axis_y_min_max[1] = ADCValue[1];
 80003ee:	4b22      	ldr	r3, [pc, #136]	; (8000478 <Calibrar+0x10c>)
 80003f0:	885b      	ldrh	r3, [r3, #2]
 80003f2:	80fb      	strh	r3, [r7, #6]
		while (HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 80003f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003f8:	481d      	ldr	r0, [pc, #116]	; (8000470 <Calibrar+0x104>)
 80003fa:	f001 ffd3 	bl	80023a4 <HAL_GPIO_ReadPin>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1cd      	bne.n	80003a0 <Calibrar+0x34>
			}
		}
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800040a:	481a      	ldr	r0, [pc, #104]	; (8000474 <Calibrar+0x108>)
 800040c:	f001 ffe1 	bl	80023d2 <HAL_GPIO_WritePin>

		uint16_t space_x = (axis_x_min_max[1]-axis_x_min_max[0])/3;
 8000410:	897b      	ldrh	r3, [r7, #10]
 8000412:	461a      	mov	r2, r3
 8000414:	893b      	ldrh	r3, [r7, #8]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	4a18      	ldr	r2, [pc, #96]	; (800047c <Calibrar+0x110>)
 800041a:	fb82 1203 	smull	r1, r2, r2, r3
 800041e:	17db      	asrs	r3, r3, #31
 8000420:	1ad3      	subs	r3, r2, r3
 8000422:	81fb      	strh	r3, [r7, #14]
		speed_div_x[0] = axis_x_min_max[0] + space_x; 					//calcula as linhas de calibracao do eixo x
 8000424:	893a      	ldrh	r2, [r7, #8]
 8000426:	89fb      	ldrh	r3, [r7, #14]
 8000428:	4413      	add	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <Calibrar+0x114>)
 800042e:	801a      	strh	r2, [r3, #0]
		//HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", speed_div_x[0]), 100);

		speed_div_x[1] = axis_x_min_max[1] - space_x;
 8000430:	897a      	ldrh	r2, [r7, #10]
 8000432:	89fb      	ldrh	r3, [r7, #14]
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	b29a      	uxth	r2, r3
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <Calibrar+0x114>)
 800043a:	805a      	strh	r2, [r3, #2]
		//HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", speed_div_x[1]), 100);

		uint16_t space_y = (axis_y_min_max[1]-axis_y_min_max[0])/3;
 800043c:	88fb      	ldrh	r3, [r7, #6]
 800043e:	461a      	mov	r2, r3
 8000440:	88bb      	ldrh	r3, [r7, #4]
 8000442:	1ad3      	subs	r3, r2, r3
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <Calibrar+0x110>)
 8000446:	fb82 1203 	smull	r1, r2, r2, r3
 800044a:	17db      	asrs	r3, r3, #31
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	81bb      	strh	r3, [r7, #12]
		speed_div_y[0] = axis_y_min_max[0] + space_y; 					//calcula as linhas de calibracao do eixo y
 8000450:	88ba      	ldrh	r2, [r7, #4]
 8000452:	89bb      	ldrh	r3, [r7, #12]
 8000454:	4413      	add	r3, r2
 8000456:	b29a      	uxth	r2, r3
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <Calibrar+0x118>)
 800045a:	801a      	strh	r2, [r3, #0]
		//HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", speed_div_y[0]), 100);

		speed_div_y[1] = axis_y_min_max[1] - space_y;
 800045c:	88fa      	ldrh	r2, [r7, #6]
 800045e:	89bb      	ldrh	r3, [r7, #12]
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <Calibrar+0x118>)
 8000466:	805a      	strh	r2, [r3, #2]
		//HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", speed_div_y[1]), 100);
		//HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
	}
}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40011000 	.word	0x40011000
 8000474:	40010c00 	.word	0x40010c00
 8000478:	2000035c 	.word	0x2000035c
 800047c:	55555556 	.word	0x55555556
 8000480:	20000000 	.word	0x20000000
 8000484:	20000004 	.word	0x20000004

08000488 <update_data_from_flash>:

void update_data_from_flash(uint16_t (* speed_div_x), uint16_t (* speed_div_y)){
 8000488:	b580      	push	{r7, lr}
 800048a:	b0b4      	sub	sp, #208	; 0xd0
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
	char data[0xC0];
	read_flash((uint8_t *)data);
 8000492:	f107 030c 	add.w	r3, r7, #12
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff fe58 	bl	800014c <read_flash>
    char * token = strtok(data,",");				//first strtok go to variable directly
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	490b      	ldr	r1, [pc, #44]	; (80004d0 <update_data_from_flash+0x48>)
 80004a2:	4618      	mov	r0, r3
 80004a4:	f009 fc02 	bl	8009cac <strtok>
 80004a8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_x[0] = atoi(token)*10;
 80004ac:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80004b0:	f009 fba6 	bl	8009c00 <atoi>
 80004b4:	4603      	mov	r3, r0
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	0092      	lsls	r2, r2, #2
 80004bc:	4413      	add	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	801a      	strh	r2, [r3, #0]
}
 80004c6:	bf00      	nop
 80004c8:	37d0      	adds	r7, #208	; 0xd0
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	0800b210 	.word	0x0800b210

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fe85 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 fa19 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 fb89 	bl	8000bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e6:	f000 fb69 	bl	8000bbc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80004ea:	f008 ffa5 	bl	8009438 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004ee:	f000 fa6f 	bl	80009d0 <MX_ADC1_Init>
  MX_SPI1_Init();
 80004f2:	f000 fac9 	bl	8000a88 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004f6:	f000 faff 	bl	8000af8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80004fa:	f000 fb35 	bl	8000b68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 80004fe:	2203      	movs	r2, #3
 8000500:	4992      	ldr	r1, [pc, #584]	; (800074c <main+0x278>)
 8000502:	4893      	ldr	r0, [pc, #588]	; (8000750 <main+0x27c>)
 8000504:	f000 ffce 	bl	80014a4 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0); //liga led
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050e:	4891      	ldr	r0, [pc, #580]	; (8000754 <main+0x280>)
 8000510:	f001 ff5f 	bl	80023d2 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (read_flash_flag){
 8000514:	4b90      	ldr	r3, [pc, #576]	; (8000758 <main+0x284>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d006      	beq.n	800052a <main+0x56>
		  read_flash_flag = 0;
 800051c:	4b8e      	ldr	r3, [pc, #568]	; (8000758 <main+0x284>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
		  update_data_from_flash(speed_div_x, speed_div_y);				//atualiza valores com os dados da memoria flash
 8000522:	498e      	ldr	r1, [pc, #568]	; (800075c <main+0x288>)
 8000524:	488e      	ldr	r0, [pc, #568]	; (8000760 <main+0x28c>)
 8000526:	f7ff ffaf 	bl	8000488 <update_data_from_flash>
	  }
	  Calibrar();
 800052a:	f7ff ff1f 	bl	800036c <Calibrar>
	  LerADCS();
 800052e:	f7ff fe49 	bl	80001c4 <LerADCS>
	  LerSPI(spi_select);
 8000532:	4b8c      	ldr	r3, [pc, #560]	; (8000764 <main+0x290>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe9e 	bl	8000278 <LerSPI>

	  uint16_t cambio_x_axis = (uint16_t) ADCValue[0];  //manopla x
 800053c:	4b83      	ldr	r3, [pc, #524]	; (800074c <main+0x278>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	80fb      	strh	r3, [r7, #6]
	  uint16_t cambio_y_axis = (uint16_t) ADCValue[1];  //manopla y
 8000542:	4b82      	ldr	r3, [pc, #520]	; (800074c <main+0x278>)
 8000544:	885b      	ldrh	r3, [r3, #2]
 8000546:	80bb      	strh	r3, [r7, #4]

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis > speed_div_y[1]){  //speed 1
 8000548:	4b85      	ldr	r3, [pc, #532]	; (8000760 <main+0x28c>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	88fa      	ldrh	r2, [r7, #6]
 800054e:	429a      	cmp	r2, r3
 8000550:	d20c      	bcs.n	800056c <main+0x98>
 8000552:	4b82      	ldr	r3, [pc, #520]	; (800075c <main+0x288>)
 8000554:	885b      	ldrh	r3, [r3, #2]
 8000556:	88ba      	ldrh	r2, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	d907      	bls.n	800056c <main+0x98>
		  joystickhid.botoes0 |= (uint8_t)(1<<0);	// SETA BOTAO 1
 800055c:	4b82      	ldr	r3, [pc, #520]	; (8000768 <main+0x294>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b80      	ldr	r3, [pc, #512]	; (8000768 <main+0x294>)
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	e006      	b.n	800057a <main+0xa6>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<0);	// RESETA BOTAO 1
 800056c:	4b7e      	ldr	r3, [pc, #504]	; (8000768 <main+0x294>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f023 0301 	bic.w	r3, r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b7c      	ldr	r3, [pc, #496]	; (8000768 <main+0x294>)
 8000578:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis < speed_div_y[0]){  //speed2
 800057a:	4b79      	ldr	r3, [pc, #484]	; (8000760 <main+0x28c>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	429a      	cmp	r2, r3
 8000582:	d20c      	bcs.n	800059e <main+0xca>
 8000584:	4b75      	ldr	r3, [pc, #468]	; (800075c <main+0x288>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	88ba      	ldrh	r2, [r7, #4]
 800058a:	429a      	cmp	r2, r3
 800058c:	d207      	bcs.n	800059e <main+0xca>
		  joystickhid.botoes0 |= (uint8_t)(1<<1);	// SETA BOTAO 2
 800058e:	4b76      	ldr	r3, [pc, #472]	; (8000768 <main+0x294>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	f043 0302 	orr.w	r3, r3, #2
 8000596:	b2da      	uxtb	r2, r3
 8000598:	4b73      	ldr	r3, [pc, #460]	; (8000768 <main+0x294>)
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	e006      	b.n	80005ac <main+0xd8>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<1);	// RESETA BOTAO 2
 800059e:	4b72      	ldr	r3, [pc, #456]	; (8000768 <main+0x294>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	f023 0302 	bic.w	r3, r3, #2
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b6f      	ldr	r3, [pc, #444]	; (8000768 <main+0x294>)
 80005aa:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis > speed_div_y[1]){  //speed 3
 80005ac:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <main+0x28c>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	88fa      	ldrh	r2, [r7, #6]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d911      	bls.n	80005da <main+0x106>
 80005b6:	4b6a      	ldr	r3, [pc, #424]	; (8000760 <main+0x28c>)
 80005b8:	885b      	ldrh	r3, [r3, #2]
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d20c      	bcs.n	80005da <main+0x106>
 80005c0:	4b66      	ldr	r3, [pc, #408]	; (800075c <main+0x288>)
 80005c2:	885b      	ldrh	r3, [r3, #2]
 80005c4:	88ba      	ldrh	r2, [r7, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d907      	bls.n	80005da <main+0x106>
		  joystickhid.botoes0 |= (uint8_t)(1<<2);	// SETA BOTAO 3
 80005ca:	4b67      	ldr	r3, [pc, #412]	; (8000768 <main+0x294>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b64      	ldr	r3, [pc, #400]	; (8000768 <main+0x294>)
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	e006      	b.n	80005e8 <main+0x114>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<2);	// RESETA BOTAO 3
 80005da:	4b63      	ldr	r3, [pc, #396]	; (8000768 <main+0x294>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	f023 0304 	bic.w	r3, r3, #4
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b60      	ldr	r3, [pc, #384]	; (8000768 <main+0x294>)
 80005e6:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis < speed_div_y[0]){  //speed 4
 80005e8:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <main+0x28c>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	88fa      	ldrh	r2, [r7, #6]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d911      	bls.n	8000616 <main+0x142>
 80005f2:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <main+0x28c>)
 80005f4:	885b      	ldrh	r3, [r3, #2]
 80005f6:	88fa      	ldrh	r2, [r7, #6]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d20c      	bcs.n	8000616 <main+0x142>
 80005fc:	4b57      	ldr	r3, [pc, #348]	; (800075c <main+0x288>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	88ba      	ldrh	r2, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	d207      	bcs.n	8000616 <main+0x142>
		  joystickhid.botoes0 |= (uint8_t)(1<<3);	// SETA BOTAO 4
 8000606:	4b58      	ldr	r3, [pc, #352]	; (8000768 <main+0x294>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b55      	ldr	r3, [pc, #340]	; (8000768 <main+0x294>)
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	e006      	b.n	8000624 <main+0x150>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<3);	// RESETA BOTAO 4
 8000616:	4b54      	ldr	r3, [pc, #336]	; (8000768 <main+0x294>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	f023 0308 	bic.w	r3, r3, #8
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b51      	ldr	r3, [pc, #324]	; (8000768 <main+0x294>)
 8000622:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis > speed_div_y[1]){    //speed5
 8000624:	4b4e      	ldr	r3, [pc, #312]	; (8000760 <main+0x28c>)
 8000626:	885b      	ldrh	r3, [r3, #2]
 8000628:	88fa      	ldrh	r2, [r7, #6]
 800062a:	429a      	cmp	r2, r3
 800062c:	d90c      	bls.n	8000648 <main+0x174>
 800062e:	4b4b      	ldr	r3, [pc, #300]	; (800075c <main+0x288>)
 8000630:	885b      	ldrh	r3, [r3, #2]
 8000632:	88ba      	ldrh	r2, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	d907      	bls.n	8000648 <main+0x174>
		  joystickhid.botoes0 |= (uint8_t)(1<<4);	// SETA BOTAO 5
 8000638:	4b4b      	ldr	r3, [pc, #300]	; (8000768 <main+0x294>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	f043 0310 	orr.w	r3, r3, #16
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b49      	ldr	r3, [pc, #292]	; (8000768 <main+0x294>)
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	e006      	b.n	8000656 <main+0x182>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<4);	// RESETA BOTAO 5
 8000648:	4b47      	ldr	r3, [pc, #284]	; (8000768 <main+0x294>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f023 0310 	bic.w	r3, r3, #16
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b45      	ldr	r3, [pc, #276]	; (8000768 <main+0x294>)
 8000654:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0]){    // speed 6
 8000656:	4b42      	ldr	r3, [pc, #264]	; (8000760 <main+0x28c>)
 8000658:	885b      	ldrh	r3, [r3, #2]
 800065a:	88fa      	ldrh	r2, [r7, #6]
 800065c:	429a      	cmp	r2, r3
 800065e:	d90c      	bls.n	800067a <main+0x1a6>
 8000660:	4b3e      	ldr	r3, [pc, #248]	; (800075c <main+0x288>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	88ba      	ldrh	r2, [r7, #4]
 8000666:	429a      	cmp	r2, r3
 8000668:	d207      	bcs.n	800067a <main+0x1a6>
		  joystickhid.botoes0 |= (uint8_t)(1<<5);	// SETA BOTAO 6
 800066a:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <main+0x294>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	f043 0320 	orr.w	r3, r3, #32
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <main+0x294>)
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	e006      	b.n	8000688 <main+0x1b4>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5);	// RESETA BOTAO 6
 800067a:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <main+0x294>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	f023 0320 	bic.w	r3, r3, #32
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b38      	ldr	r3, [pc, #224]	; (8000768 <main+0x294>)
 8000686:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<0))  {
 8000688:	4b38      	ldr	r3, [pc, #224]	; (800076c <main+0x298>)
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	2b00      	cmp	r3, #0
 8000692:	d007      	beq.n	80006a4 <main+0x1d0>
		  joystickhid.botoes0 |= (uint16_t) (1<<6);  // SETA BOTAO 7
 8000694:	4b34      	ldr	r3, [pc, #208]	; (8000768 <main+0x294>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b32      	ldr	r3, [pc, #200]	; (8000768 <main+0x294>)
 80006a0:	701a      	strb	r2, [r3, #0]
 80006a2:	e006      	b.n	80006b2 <main+0x1de>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 7
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <main+0x294>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <main+0x294>)
 80006b0:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<1))  {
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <main+0x298>)
 80006b4:	789b      	ldrb	r3, [r3, #2]
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d007      	beq.n	80006ce <main+0x1fa>
		  joystickhid.botoes0 |= (uint16_t)(1<<7);	// SETA BOTAO 8
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <main+0x294>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <main+0x294>)
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e006      	b.n	80006dc <main+0x208>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 8
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <main+0x294>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <main+0x294>)
 80006da:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<2))  {
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <main+0x298>)
 80006de:	789b      	ldrb	r3, [r3, #2]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d007      	beq.n	80006f8 <main+0x224>
		  joystickhid.botoes1 |= (uint16_t)(1<<0);	// SETA BOTAO 9
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <main+0x294>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <main+0x294>)
 80006f4:	705a      	strb	r2, [r3, #1]
 80006f6:	e006      	b.n	8000706 <main+0x232>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 9
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <main+0x294>)
 80006fa:	785b      	ldrb	r3, [r3, #1]
 80006fc:	f023 0301 	bic.w	r3, r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <main+0x294>)
 8000704:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<3))  {
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <main+0x298>)
 8000708:	789b      	ldrb	r3, [r3, #2]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <main+0x24e>
		  joystickhid.botoes1 |= (uint16_t)(1<<1);	// SETA BOTAO 10
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <main+0x294>)
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <main+0x294>)
 800071e:	705a      	strb	r2, [r3, #1]
 8000720:	e006      	b.n	8000730 <main+0x25c>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 10
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <main+0x294>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	f023 0302 	bic.w	r3, r3, #2
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <main+0x294>)
 800072e:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<4))  {
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <main+0x298>)
 8000732:	789b      	ldrb	r3, [r3, #2]
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	2b00      	cmp	r3, #0
 800073a:	d019      	beq.n	8000770 <main+0x29c>
		  joystickhid.botoes1 |= (uint16_t)(1<<2);	// SETA BOTAO 11
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <main+0x294>)
 800073e:	785b      	ldrb	r3, [r3, #1]
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <main+0x294>)
 8000748:	705a      	strb	r2, [r3, #1]
 800074a:	e018      	b.n	800077e <main+0x2aa>
 800074c:	2000035c 	.word	0x2000035c
 8000750:	200001ec 	.word	0x200001ec
 8000754:	40010c00 	.word	0x40010c00
 8000758:	20000008 	.word	0x20000008
 800075c:	20000004 	.word	0x20000004
 8000760:	20000000 	.word	0x20000000
 8000764:	2000036f 	.word	0x2000036f
 8000768:	20000354 	.word	0x20000354
 800076c:	2000036c 	.word	0x2000036c
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<2);	// RESETA BOTAO 11
 8000770:	4b63      	ldr	r3, [pc, #396]	; (8000900 <main+0x42c>)
 8000772:	785b      	ldrb	r3, [r3, #1]
 8000774:	f023 0304 	bic.w	r3, r3, #4
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b61      	ldr	r3, [pc, #388]	; (8000900 <main+0x42c>)
 800077c:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<5))  {
 800077e:	4b61      	ldr	r3, [pc, #388]	; (8000904 <main+0x430>)
 8000780:	789b      	ldrb	r3, [r3, #2]
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	2b00      	cmp	r3, #0
 8000788:	d007      	beq.n	800079a <main+0x2c6>
		  joystickhid.botoes1 |= (uint16_t)(1<<3);	// SETA BOTAO 12
 800078a:	4b5d      	ldr	r3, [pc, #372]	; (8000900 <main+0x42c>)
 800078c:	785b      	ldrb	r3, [r3, #1]
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b5a      	ldr	r3, [pc, #360]	; (8000900 <main+0x42c>)
 8000796:	705a      	strb	r2, [r3, #1]
 8000798:	e006      	b.n	80007a8 <main+0x2d4>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<3);	// RESETA BOTAO 12
 800079a:	4b59      	ldr	r3, [pc, #356]	; (8000900 <main+0x42c>)
 800079c:	785b      	ldrb	r3, [r3, #1]
 800079e:	f023 0308 	bic.w	r3, r3, #8
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b56      	ldr	r3, [pc, #344]	; (8000900 <main+0x42c>)
 80007a6:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<6))  {
 80007a8:	4b56      	ldr	r3, [pc, #344]	; (8000904 <main+0x430>)
 80007aa:	789b      	ldrb	r3, [r3, #2]
 80007ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d007      	beq.n	80007c4 <main+0x2f0>
		  joystickhid.botoes1 |= (uint16_t)(1<<4);	// SETA BOTAO 13
 80007b4:	4b52      	ldr	r3, [pc, #328]	; (8000900 <main+0x42c>)
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b50      	ldr	r3, [pc, #320]	; (8000900 <main+0x42c>)
 80007c0:	705a      	strb	r2, [r3, #1]
 80007c2:	e006      	b.n	80007d2 <main+0x2fe>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<4);	// RESETA BOTAO 13
 80007c4:	4b4e      	ldr	r3, [pc, #312]	; (8000900 <main+0x42c>)
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	f023 0310 	bic.w	r3, r3, #16
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b4c      	ldr	r3, [pc, #304]	; (8000900 <main+0x42c>)
 80007d0:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<7))  {
 80007d2:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <main+0x430>)
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	da07      	bge.n	80007ec <main+0x318>
		  joystickhid.botoes1 |= (uint16_t)(1<<5);	// SETA BOTAO 14
 80007dc:	4b48      	ldr	r3, [pc, #288]	; (8000900 <main+0x42c>)
 80007de:	785b      	ldrb	r3, [r3, #1]
 80007e0:	f043 0320 	orr.w	r3, r3, #32
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b46      	ldr	r3, [pc, #280]	; (8000900 <main+0x42c>)
 80007e8:	705a      	strb	r2, [r3, #1]
 80007ea:	e006      	b.n	80007fa <main+0x326>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<5);	// RESETA BOTAO 14
 80007ec:	4b44      	ldr	r3, [pc, #272]	; (8000900 <main+0x42c>)
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	f023 0320 	bic.w	r3, r3, #32
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b42      	ldr	r3, [pc, #264]	; (8000900 <main+0x42c>)
 80007f8:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<0))  {
 80007fa:	4b42      	ldr	r3, [pc, #264]	; (8000904 <main+0x430>)
 80007fc:	785b      	ldrb	r3, [r3, #1]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d007      	beq.n	8000816 <main+0x342>
		  joystickhid.botoes1 |= (uint16_t)(1<<6);	// SETA BOTAO 15
 8000806:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <main+0x42c>)
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <main+0x42c>)
 8000812:	705a      	strb	r2, [r3, #1]
 8000814:	e006      	b.n	8000824 <main+0x350>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 15
 8000816:	4b3a      	ldr	r3, [pc, #232]	; (8000900 <main+0x42c>)
 8000818:	785b      	ldrb	r3, [r3, #1]
 800081a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b37      	ldr	r3, [pc, #220]	; (8000900 <main+0x42c>)
 8000822:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<1))  {
 8000824:	4b37      	ldr	r3, [pc, #220]	; (8000904 <main+0x430>)
 8000826:	785b      	ldrb	r3, [r3, #1]
 8000828:	f003 0302 	and.w	r3, r3, #2
 800082c:	2b00      	cmp	r3, #0
 800082e:	d007      	beq.n	8000840 <main+0x36c>
		  joystickhid.botoes1 |= (uint32_t)(1<<7);	// SETA BOTAO 16
 8000830:	4b33      	ldr	r3, [pc, #204]	; (8000900 <main+0x42c>)
 8000832:	785b      	ldrb	r3, [r3, #1]
 8000834:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <main+0x42c>)
 800083c:	705a      	strb	r2, [r3, #1]
 800083e:	e006      	b.n	800084e <main+0x37a>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 16
 8000840:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <main+0x42c>)
 8000842:	785b      	ldrb	r3, [r3, #1]
 8000844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <main+0x42c>)
 800084c:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<2))  {
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <main+0x430>)
 8000850:	785b      	ldrb	r3, [r3, #1]
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	2b00      	cmp	r3, #0
 8000858:	d007      	beq.n	800086a <main+0x396>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<0);	// SETA BOTAO 17
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <main+0x42c>)
 800085c:	789b      	ldrb	r3, [r3, #2]
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b26      	ldr	r3, [pc, #152]	; (8000900 <main+0x42c>)
 8000866:	709a      	strb	r2, [r3, #2]
 8000868:	e006      	b.n	8000878 <main+0x3a4>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 17
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <main+0x42c>)
 800086c:	789b      	ldrb	r3, [r3, #2]
 800086e:	f023 0301 	bic.w	r3, r3, #1
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <main+0x42c>)
 8000876:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<3))  {
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <main+0x430>)
 800087a:	785b      	ldrb	r3, [r3, #1]
 800087c:	f003 0308 	and.w	r3, r3, #8
 8000880:	2b00      	cmp	r3, #0
 8000882:	d007      	beq.n	8000894 <main+0x3c0>
		  joystickhid.botoes_freio0 |= (uint32_t)(1<<1);	// SETA BOTAO 18
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <main+0x42c>)
 8000886:	789b      	ldrb	r3, [r3, #2]
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <main+0x42c>)
 8000890:	709a      	strb	r2, [r3, #2]
 8000892:	e006      	b.n	80008a2 <main+0x3ce>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 18
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <main+0x42c>)
 8000896:	789b      	ldrb	r3, [r3, #2]
 8000898:	f023 0302 	bic.w	r3, r3, #2
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <main+0x42c>)
 80008a0:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<6) && cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0])  {
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <main+0x430>)
 80008a4:	785b      	ldrb	r3, [r3, #1]
 80008a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d018      	beq.n	80008e0 <main+0x40c>
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <main+0x434>)
 80008b0:	885b      	ldrh	r3, [r3, #2]
 80008b2:	88fa      	ldrh	r2, [r7, #6]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d913      	bls.n	80008e0 <main+0x40c>
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <main+0x438>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	88ba      	ldrh	r2, [r7, #4]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d20e      	bcs.n	80008e0 <main+0x40c>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<2);	// SETA BOTAO 19 SPEED REVERSA
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <main+0x42c>)
 80008c4:	789b      	ldrb	r3, [r3, #2]
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <main+0x42c>)
 80008ce:	709a      	strb	r2, [r3, #2]
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5); 			// RESETA BOTAO SPEED 6 QUANDO ATIVA A REVERSA
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <main+0x42c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	f023 0320 	bic.w	r3, r3, #32
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <main+0x42c>)
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	e006      	b.n	80008ee <main+0x41a>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint32_t)(1<<2);	// RESETA BOTAO 19 SPEED REVERSA
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <main+0x42c>)
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	f023 0304 	bic.w	r3, r3, #4
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <main+0x42c>)
 80008ec:	709a      	strb	r2, [r3, #2]
	  //joystickhid.botoes0 = 0xff;
	  //	  joystickhid.botoes1 = 0;
	  	//  joystickhid.botoes_freio0 &= 0b11110000;
	 // }

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80008ee:	2208      	movs	r2, #8
 80008f0:	4903      	ldr	r1, [pc, #12]	; (8000900 <main+0x42c>)
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <main+0x43c>)
 80008f4:	f007 fc3e 	bl	8008174 <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 fcd7 	bl	80012ac <HAL_Delay>
  {
 80008fe:	e609      	b.n	8000514 <main+0x40>
 8000900:	20000354 	.word	0x20000354
 8000904:	2000036c 	.word	0x2000036c
 8000908:	20000000 	.word	0x20000000
 800090c:	20000004 	.word	0x20000004
 8000910:	2000037c 	.word	0x2000037c

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800091e:	2228      	movs	r2, #40	; 0x28
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f009 f99a 	bl	8009c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000944:	2301      	movs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000952:	2301      	movs	r3, #1
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000956:	2302      	movs	r3, #2
 8000958:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000960:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000964:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fa0e 	bl	8003d8c <HAL_RCC_OscConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000976:	f000 f9ad 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	230f      	movs	r3, #15
 800097c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2101      	movs	r1, #1
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fc7a 	bl	8004290 <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009a2:	f000 f997 	bl	8000cd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80009a6:	2312      	movs	r3, #18
 80009a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80009aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80009b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009b4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 fe01 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009c4:	f000 f986 	bl	8000cd4 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3750      	adds	r7, #80	; 0x50
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_ADC1_Init+0xb0>)
 80009e2:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <MX_ADC1_Init+0xb4>)
 80009e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_ADC1_Init+0xb0>)
 80009e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_ADC1_Init+0xb0>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_ADC1_Init+0xb0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_ADC1_Init+0xb0>)
 80009fc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_ADC1_Init+0xb0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_ADC1_Init+0xb0>)
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <MX_ADC1_Init+0xb0>)
 8000a10:	f000 fc70 	bl	80012f4 <HAL_ADC_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000a1a:	f000 f95b 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a26:	2307      	movs	r3, #7
 8000a28:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <MX_ADC1_Init+0xb0>)
 8000a30:	f000 fe3e 	bl	80016b0 <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 f94b 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_ADC1_Init+0xb0>)
 8000a4c:	f000 fe30 	bl	80016b0 <HAL_ADC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a56:	f000 f93d 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_ADC1_Init+0xb0>)
 8000a68:	f000 fe22 	bl	80016b0 <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000a72:	f000 f92f 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001ec 	.word	0x200001ec
 8000a84:	40012400 	.word	0x40012400

08000a88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000a8e:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <MX_SPI1_Init+0x6c>)
 8000a90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000a94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000a9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000abe:	2208      	movs	r2, #8
 8000ac0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000ad6:	220a      	movs	r2, #10
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_SPI1_Init+0x68>)
 8000adc:	f003 fe26 	bl	800472c <HAL_SPI_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000ae6:	f000 f8f5 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000260 	.word	0x20000260
 8000af4:	40013000 	.word	0x40013000

08000af8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000afe:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <MX_SPI2_Init+0x6c>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b10:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b2a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b46:	220a      	movs	r2, #10
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b4c:	f003 fdee 	bl	800472c <HAL_SPI_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000b56:	f000 f8bd 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200002b8 	.word	0x200002b8
 8000b64:	40003800 	.word	0x40003800

08000b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <MX_USART1_UART_Init+0x50>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	f004 f9f4 	bl	8004f8c <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000baa:	f000 f893 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000310 	.word	0x20000310
 8000bb8:	40013800 	.word	0x40013800

08000bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_DMA_Init+0x38>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <MX_DMA_Init+0x38>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_DMA_Init+0x38>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	200b      	movs	r0, #11
 8000be0:	f001 f837 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000be4:	200b      	movs	r0, #11
 8000be6:	f001 f850 	bl	8001c8a <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a2d      	ldr	r2, [pc, #180]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0310 	and.w	r3, r3, #16
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0320 	and.w	r3, r3, #32
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_GPIO_Init+0xd0>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c72:	4816      	ldr	r0, [pc, #88]	; (8000ccc <MX_GPIO_Init+0xd4>)
 8000c74:	f001 fbad 	bl	80023d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFTER_CS_Pin|LED_PIN_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000c7e:	4814      	ldr	r0, [pc, #80]	; (8000cd0 <MX_GPIO_Init+0xd8>)
 8000c80:	f001 fba7 	bl	80023d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CALIB_BUTTON_Pin */
  GPIO_InitStruct.Pin = CALIB_BUTTON_Pin;
 8000c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CALIB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <MX_GPIO_Init+0xd4>)
 8000c9e:	f001 f9fd 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : SHIFTER_CS_Pin LED_PIN_Pin */
  GPIO_InitStruct.Pin = SHIFTER_CS_Pin|LED_PIN_Pin;
 8000ca2:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_GPIO_Init+0xd8>)
 8000cbc:	f001 f9ee 	bl	800209c <HAL_GPIO_Init>

}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40011000 	.word	0x40011000
 8000cd0:	40010c00 	.word	0x40010c00

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_MspInit+0x40>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_MspInit+0x40>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_MspInit+0x40>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_MspInit+0x40>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_MspInit+0x40>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_MspInit+0x40>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <HAL_ADC_MspInit+0xbc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d149      	bne.n	8000dd8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <HAL_ADC_MspInit+0xc0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a26      	ldr	r2, [pc, #152]	; (8000de4 <HAL_ADC_MspInit+0xc0>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <HAL_ADC_MspInit+0xc0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <HAL_ADC_MspInit+0xc0>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <HAL_ADC_MspInit+0xc0>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_ADC_MspInit+0xc0>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000d74:	2307      	movs	r3, #7
 8000d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4619      	mov	r1, r3
 8000d82:	4819      	ldr	r0, [pc, #100]	; (8000de8 <HAL_ADC_MspInit+0xc4>)
 8000d84:	f001 f98a 	bl	800209c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000d8a:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_ADC_MspInit+0xcc>)
 8000d8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000db2:	2220      	movs	r2, #32
 8000db4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dbc:	480b      	ldr	r0, [pc, #44]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000dbe:	f000 ff7f 	bl	8001cc0 <HAL_DMA_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000dc8:	f7ff ff84 	bl	8000cd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000dd0:	621a      	str	r2, [r3, #32]
 8000dd2:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_ADC_MspInit+0xc8>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40012400 	.word	0x40012400
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800
 8000dec:	2000021c 	.word	0x2000021c
 8000df0:	40020008 	.word	0x40020008

08000df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a37      	ldr	r2, [pc, #220]	; (8000eec <HAL_SPI_MspInit+0xf8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d130      	bne.n	8000e76 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e14:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a35      	ldr	r2, [pc, #212]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a2f      	ldr	r2, [pc, #188]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e44:	2320      	movs	r3, #32
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4827      	ldr	r0, [pc, #156]	; (8000ef4 <HAL_SPI_MspInit+0x100>)
 8000e58:	f001 f920 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e5c:	2340      	movs	r3, #64	; 0x40
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4821      	ldr	r0, [pc, #132]	; (8000ef4 <HAL_SPI_MspInit+0x100>)
 8000e70:	f001 f914 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e74:	e036      	b.n	8000ee4 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ef8 <HAL_SPI_MspInit+0x104>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d131      	bne.n	8000ee4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8a:	61d3      	str	r3, [r2, #28]
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_SPI_MspInit+0xfc>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <HAL_SPI_MspInit+0x108>)
 8000ec6:	f001 f8e9 	bl	800209c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000eca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <HAL_SPI_MspInit+0x108>)
 8000ee0:	f001 f8dc 	bl	800209c <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013000 	.word	0x40013000
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800
 8000ef8:	40003800 	.word	0x40003800
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <HAL_UART_MspInit+0x8c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d131      	bne.n	8000f84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4619      	mov	r1, r3
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <HAL_UART_MspInit+0x94>)
 8000f66:	f001 f899 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <HAL_UART_MspInit+0x94>)
 8000f80:	f001 f88c 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010800 	.word	0x40010800

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fde:	f000 f949 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <DMA1_Channel1_IRQHandler+0x10>)
 8000fee:	f000 ff21 	bl	8001e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000021c 	.word	0x2000021c

08000ffc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001002:	f001 fb48 	bl	8002696 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000840 	.word	0x20000840

08001010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
	return 1;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <_kill>:

int _kill(int pid, int sig)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001028:	f008 fdee 	bl	8009c08 <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	2216      	movs	r2, #22
 8001030:	601a      	str	r2, [r3, #0]
	return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_exit>:

void _exit (int status)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001046:	f04f 31ff 	mov.w	r1, #4294967295
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffe7 	bl	800101e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001050:	e7fe      	b.n	8001050 <_exit+0x12>

08001052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e00a      	b.n	800107a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001064:	f3af 8000 	nop.w
 8001068:	4601      	mov	r1, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	60ba      	str	r2, [r7, #8]
 8001070:	b2ca      	uxtb	r2, r1
 8001072:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbf0      	blt.n	8001064 <_read+0x12>
	}

return len;
 8001082:	687b      	ldr	r3, [r7, #4]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e009      	b.n	80010b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	60ba      	str	r2, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbf1      	blt.n	800109e <_write+0x12>
	}
	return len;
 80010ba:	687b      	ldr	r3, [r7, #4]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_close>:

int _close(int file)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	return -1;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ea:	605a      	str	r2, [r3, #4]
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <_isatty>:

int _isatty(int file)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f008 fd58 	bl	8009c08 <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20005000 	.word	0x20005000
 8001184:	00000400 	.word	0x00000400
 8001188:	20000370 	.word	0x20000370
 800118c:	20000b98 	.word	0x20000b98

08001190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c2:	f7ff ffe5 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f008 fd25 	bl	8009c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7ff f983 	bl	80004d4 <main>
  bx lr
 80011ce:	4770      	bx	lr
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80011d8:	0800b4d4 	.word	0x0800b4d4
  ldr r2, =_sbss
 80011dc:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80011e0:	20000b94 	.word	0x20000b94

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 fd1f 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fd6c 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fd37 	bl	8001ca6 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 fcff 	bl	8001c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000000c 	.word	0x2000000c
 800126c:	20000014 	.word	0x20000014
 8001270:	20000010 	.word	0x20000010

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x1c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x20>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_IncTick+0x20>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000014 	.word	0x20000014
 8001294:	20000374 	.word	0x20000374

08001298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <HAL_GetTick+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000374 	.word	0x20000374

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff fff0 	bl	8001298 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffe0 	bl	8001298 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000014 	.word	0x20000014

080012f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0be      	b.n	8001494 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	2b00      	cmp	r3, #0
 8001322:	d109      	bne.n	8001338 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fcf6 	bl	8000d24 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 fb0b 	bl	8001954 <ADC_ConversionStop_Disable>
 800133e:	4603      	mov	r3, r0
 8001340:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b00      	cmp	r3, #0
 800134c:	f040 8099 	bne.w	8001482 <HAL_ADC_Init+0x18e>
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 8095 	bne.w	8001482 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001360:	f023 0302 	bic.w	r3, r3, #2
 8001364:	f043 0202 	orr.w	r2, r3, #2
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001374:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7b1b      	ldrb	r3, [r3, #12]
 800137a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800137c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	4313      	orrs	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800138c:	d003      	beq.n	8001396 <HAL_ADC_Init+0xa2>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <HAL_ADC_Init+0xa8>
 8001396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139a:	e000      	b.n	800139e <HAL_ADC_Init+0xaa>
 800139c:	2300      	movs	r3, #0
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7d1b      	ldrb	r3, [r3, #20]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d119      	bne.n	80013e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7b1b      	ldrb	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d109      	bne.n	80013c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	035a      	lsls	r2, r3, #13
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	e00b      	b.n	80013e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	f043 0220 	orr.w	r2, r3, #32
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	4b28      	ldr	r3, [pc, #160]	; (800149c <HAL_ADC_Init+0x1a8>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	430b      	orrs	r3, r1
 8001406:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001410:	d003      	beq.n	800141a <HAL_ADC_Init+0x126>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d104      	bne.n	8001424 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	3b01      	subs	r3, #1
 8001420:	051b      	lsls	r3, r3, #20
 8001422:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	430a      	orrs	r2, r1
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_ADC_Init+0x1ac>)
 8001440:	4013      	ands	r3, r2
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	429a      	cmp	r2, r3
 8001446:	d10b      	bne.n	8001460 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	f023 0303 	bic.w	r3, r3, #3
 8001456:	f043 0201 	orr.w	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800145e:	e018      	b.n	8001492 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	f023 0312 	bic.w	r3, r3, #18
 8001468:	f043 0210 	orr.w	r2, r3, #16
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001480:	e007      	b.n	8001492 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	f043 0210 	orr.w	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001492:	7dfb      	ldrb	r3, [r7, #23]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	ffe1f7fd 	.word	0xffe1f7fd
 80014a0:	ff1f0efe 	.word	0xff1f0efe

080014a4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a64      	ldr	r2, [pc, #400]	; (800164c <HAL_ADC_Start_DMA+0x1a8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d004      	beq.n	80014c8 <HAL_ADC_Start_DMA+0x24>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a63      	ldr	r2, [pc, #396]	; (8001650 <HAL_ADC_Start_DMA+0x1ac>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d106      	bne.n	80014d6 <HAL_ADC_Start_DMA+0x32>
 80014c8:	4b60      	ldr	r3, [pc, #384]	; (800164c <HAL_ADC_Start_DMA+0x1a8>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f040 80b3 	bne.w	800163c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_ADC_Start_DMA+0x40>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e0ae      	b.n	8001642 <HAL_ADC_Start_DMA+0x19e>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 f9d7 	bl	80018a0 <ADC_Enable>
 80014f2:	4603      	mov	r3, r0
 80014f4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 809a 	bne.w	8001632 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a4e      	ldr	r2, [pc, #312]	; (8001650 <HAL_ADC_Start_DMA+0x1ac>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d105      	bne.n	8001528 <HAL_ADC_Start_DMA+0x84>
 800151c:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_ADC_Start_DMA+0x1a8>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d115      	bne.n	8001554 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153e:	2b00      	cmp	r3, #0
 8001540:	d026      	beq.n	8001590 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800154a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001552:	e01d      	b.n	8001590 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a39      	ldr	r2, [pc, #228]	; (800164c <HAL_ADC_Start_DMA+0x1a8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d004      	beq.n	8001574 <HAL_ADC_Start_DMA+0xd0>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a38      	ldr	r2, [pc, #224]	; (8001650 <HAL_ADC_Start_DMA+0x1ac>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d10d      	bne.n	8001590 <HAL_ADC_Start_DMA+0xec>
 8001574:	4b35      	ldr	r3, [pc, #212]	; (800164c <HAL_ADC_Start_DMA+0x1a8>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001588:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	f023 0206 	bic.w	r2, r3, #6
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4a25      	ldr	r2, [pc, #148]	; (8001654 <HAL_ADC_Start_DMA+0x1b0>)
 80015be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a24      	ldr	r2, [pc, #144]	; (8001658 <HAL_ADC_Start_DMA+0x1b4>)
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a23      	ldr	r2, [pc, #140]	; (800165c <HAL_ADC_Start_DMA+0x1b8>)
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f06f 0202 	mvn.w	r2, #2
 80015d8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015e8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a18      	ldr	r0, [r3, #32]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	334c      	adds	r3, #76	; 0x4c
 80015f4:	4619      	mov	r1, r3
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f000 fbbb 	bl	8001d74 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001608:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800160c:	d108      	bne.n	8001620 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800161c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800161e:	e00f      	b.n	8001640 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800162e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001630:	e006      	b.n	8001640 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800163a:	e001      	b.n	8001640 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001640:	7dfb      	ldrb	r3, [r7, #23]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40012400 	.word	0x40012400
 8001650:	40012800 	.word	0x40012800
 8001654:	080019d7 	.word	0x080019d7
 8001658:	08001a53 	.word	0x08001a53
 800165c:	08001a6f 	.word	0x08001a6f

08001660 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x20>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e0dc      	b.n	800188a <HAL_ADC_ConfigChannel+0x1da>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b06      	cmp	r3, #6
 80016de:	d81c      	bhi.n	800171a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3b05      	subs	r3, #5
 80016f2:	221f      	movs	r2, #31
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4019      	ands	r1, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b05      	subs	r3, #5
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
 8001718:	e03c      	b.n	8001794 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d81c      	bhi.n	800175c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	3b23      	subs	r3, #35	; 0x23
 8001734:	221f      	movs	r2, #31
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	4019      	ands	r1, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	3b23      	subs	r3, #35	; 0x23
 800174e:	fa00 f203 	lsl.w	r2, r0, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
 800175a:	e01b      	b.n	8001794 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	3b41      	subs	r3, #65	; 0x41
 800176e:	221f      	movs	r2, #31
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b41      	subs	r3, #65	; 0x41
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b09      	cmp	r3, #9
 800179a:	d91c      	bls.n	80017d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68d9      	ldr	r1, [r3, #12]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	3b1e      	subs	r3, #30
 80017ae:	2207      	movs	r2, #7
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4019      	ands	r1, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6898      	ldr	r0, [r3, #8]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	3b1e      	subs	r3, #30
 80017c8:	fa00 f203 	lsl.w	r2, r0, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	e019      	b.n	800180a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6919      	ldr	r1, [r3, #16]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	2207      	movs	r2, #7
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4019      	ands	r1, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6898      	ldr	r0, [r3, #8]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d003      	beq.n	800181a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001816:	2b11      	cmp	r3, #17
 8001818:	d132      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_ADC_ConfigChannel+0x1e4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d125      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d126      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001840:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b10      	cmp	r3, #16
 8001848:	d11a      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_ADC_ConfigChannel+0x1e8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <HAL_ADC_ConfigChannel+0x1ec>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	0c9a      	lsrs	r2, r3, #18
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001860:	e002      	b.n	8001868 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	3b01      	subs	r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f9      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x1b2>
 800186e:	e007      	b.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	f043 0220 	orr.w	r2, r3, #32
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40012400 	.word	0x40012400
 8001898:	2000000c 	.word	0x2000000c
 800189c:	431bde83 	.word	0x431bde83

080018a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d040      	beq.n	8001940 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <ADC_Enable+0xac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <ADC_Enable+0xb0>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	0c9b      	lsrs	r3, r3, #18
 80018da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018dc:	e002      	b.n	80018e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018ea:	f7ff fcd5 	bl	8001298 <HAL_GetTick>
 80018ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018f0:	e01f      	b.n	8001932 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018f2:	f7ff fcd1 	bl	8001298 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d918      	bls.n	8001932 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d011      	beq.n	8001932 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	f043 0210 	orr.w	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f043 0201 	orr.w	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e007      	b.n	8001942 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d1d8      	bne.n	80018f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000000c 	.word	0x2000000c
 8001950:	431bde83 	.word	0x431bde83

08001954 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b01      	cmp	r3, #1
 800196c:	d12e      	bne.n	80019cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800197e:	f7ff fc8b 	bl	8001298 <HAL_GetTick>
 8001982:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001984:	e01b      	b.n	80019be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001986:	f7ff fc87 	bl	8001298 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d914      	bls.n	80019be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d10d      	bne.n	80019be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	f043 0210 	orr.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e007      	b.n	80019ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d0dc      	beq.n	8001986 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d127      	bne.n	8001a40 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a0a:	d115      	bne.n	8001a38 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d111      	bne.n	8001a38 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff fe1d 	bl	8001678 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a3e:	e004      	b.n	8001a4a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff fe12 	bl	800168a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	f043 0204 	orr.w	r2, r3, #4
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff fe01 	bl	800169c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4906      	ldr	r1, [pc, #24]	; (8001b3c <__NVIC_EnableIRQ+0x34>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	; (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	0112      	lsls	r2, r2, #4
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	; (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf28      	it	cs
 8001bb2:	2304      	movcs	r3, #4
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b03      	subs	r3, #3
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
         );
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff90 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff2d 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff42 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff90 	bl	8001b94 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5f 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff35 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffa2 	bl	8001bf8 <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e043      	b.n	8001d5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_DMA_Init+0xa8>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a22      	ldr	r2, [pc, #136]	; (8001d6c <HAL_DMA_Init+0xac>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	009a      	lsls	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_DMA_Init+0xb0>)
 8001cf2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	bffdfff8 	.word	0xbffdfff8
 8001d6c:	cccccccd 	.word	0xcccccccd
 8001d70:	40020000 	.word	0x40020000

08001d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_DMA_Start_IT+0x20>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e04a      	b.n	8001e2a <HAL_DMA_Start_IT+0xb6>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d13a      	bne.n	8001e1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f938 	bl	8002040 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 020e 	orr.w	r2, r2, #14
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e00f      	b.n	8001e0a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0204 	bic.w	r2, r2, #4
 8001df8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 020a 	orr.w	r2, r2, #10
 8001e08:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e005      	b.n	8001e28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
 8001e26:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	2204      	movs	r2, #4
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d04f      	beq.n	8001efc <HAL_DMA_IRQHandler+0xc8>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d04a      	beq.n	8001efc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d107      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0204 	bic.w	r2, r2, #4
 8001e82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a66      	ldr	r2, [pc, #408]	; (8002024 <HAL_DMA_IRQHandler+0x1f0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d029      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0xae>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a65      	ldr	r2, [pc, #404]	; (8002028 <HAL_DMA_IRQHandler+0x1f4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d022      	beq.n	8001ede <HAL_DMA_IRQHandler+0xaa>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a63      	ldr	r2, [pc, #396]	; (800202c <HAL_DMA_IRQHandler+0x1f8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01a      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0xa4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a62      	ldr	r2, [pc, #392]	; (8002030 <HAL_DMA_IRQHandler+0x1fc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d012      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x9e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a60      	ldr	r2, [pc, #384]	; (8002034 <HAL_DMA_IRQHandler+0x200>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00a      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x98>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5f      	ldr	r2, [pc, #380]	; (8002038 <HAL_DMA_IRQHandler+0x204>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d102      	bne.n	8001ec6 <HAL_DMA_IRQHandler+0x92>
 8001ec0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec4:	e00e      	b.n	8001ee4 <HAL_DMA_IRQHandler+0xb0>
 8001ec6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001eca:	e00b      	b.n	8001ee4 <HAL_DMA_IRQHandler+0xb0>
 8001ecc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ed0:	e008      	b.n	8001ee4 <HAL_DMA_IRQHandler+0xb0>
 8001ed2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ed6:	e005      	b.n	8001ee4 <HAL_DMA_IRQHandler+0xb0>
 8001ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001edc:	e002      	b.n	8001ee4 <HAL_DMA_IRQHandler+0xb0>
 8001ede:	2340      	movs	r3, #64	; 0x40
 8001ee0:	e000      	b.n	8001ee4 <HAL_DMA_IRQHandler+0xb0>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	4a55      	ldr	r2, [pc, #340]	; (800203c <HAL_DMA_IRQHandler+0x208>)
 8001ee6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 8094 	beq.w	800201a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001efa:	e08e      	b.n	800201a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	2202      	movs	r2, #2
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d056      	beq.n	8001fba <HAL_DMA_IRQHandler+0x186>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d051      	beq.n	8001fba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10b      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 020a 	bic.w	r2, r2, #10
 8001f32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a38      	ldr	r2, [pc, #224]	; (8002024 <HAL_DMA_IRQHandler+0x1f0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d029      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x166>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a37      	ldr	r2, [pc, #220]	; (8002028 <HAL_DMA_IRQHandler+0x1f4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d022      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x162>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a35      	ldr	r2, [pc, #212]	; (800202c <HAL_DMA_IRQHandler+0x1f8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01a      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x15c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a34      	ldr	r2, [pc, #208]	; (8002030 <HAL_DMA_IRQHandler+0x1fc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d012      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x156>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a32      	ldr	r2, [pc, #200]	; (8002034 <HAL_DMA_IRQHandler+0x200>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00a      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x150>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a31      	ldr	r2, [pc, #196]	; (8002038 <HAL_DMA_IRQHandler+0x204>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d102      	bne.n	8001f7e <HAL_DMA_IRQHandler+0x14a>
 8001f78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f7c:	e00e      	b.n	8001f9c <HAL_DMA_IRQHandler+0x168>
 8001f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f82:	e00b      	b.n	8001f9c <HAL_DMA_IRQHandler+0x168>
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	e008      	b.n	8001f9c <HAL_DMA_IRQHandler+0x168>
 8001f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8e:	e005      	b.n	8001f9c <HAL_DMA_IRQHandler+0x168>
 8001f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f94:	e002      	b.n	8001f9c <HAL_DMA_IRQHandler+0x168>
 8001f96:	2320      	movs	r3, #32
 8001f98:	e000      	b.n	8001f9c <HAL_DMA_IRQHandler+0x168>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <HAL_DMA_IRQHandler+0x208>)
 8001f9e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d034      	beq.n	800201a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001fb8:	e02f      	b.n	800201a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	2208      	movs	r2, #8
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d028      	beq.n	800201c <HAL_DMA_IRQHandler+0x1e8>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d023      	beq.n	800201c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020e 	bic.w	r2, r2, #14
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4798      	blx	r3
    }
  }
  return;
 800201a:	bf00      	nop
 800201c:	bf00      	nop
}
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40020008 	.word	0x40020008
 8002028:	4002001c 	.word	0x4002001c
 800202c:	40020030 	.word	0x40020030
 8002030:	40020044 	.word	0x40020044
 8002034:	40020058 	.word	0x40020058
 8002038:	4002006c 	.word	0x4002006c
 800203c:	40020000 	.word	0x40020000

08002040 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f202 	lsl.w	r2, r1, r2
 800205c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b10      	cmp	r3, #16
 800206c:	d108      	bne.n	8002080 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800207e:	e007      	b.n	8002090 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
	...

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b08b      	sub	sp, #44	; 0x2c
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ae:	e169      	b.n	8002384 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020b0:	2201      	movs	r2, #1
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f040 8158 	bne.w	800237e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a9a      	ldr	r2, [pc, #616]	; (800233c <HAL_GPIO_Init+0x2a0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d05e      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
 80020d8:	4a98      	ldr	r2, [pc, #608]	; (800233c <HAL_GPIO_Init+0x2a0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d875      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 80020de:	4a98      	ldr	r2, [pc, #608]	; (8002340 <HAL_GPIO_Init+0x2a4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d058      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
 80020e4:	4a96      	ldr	r2, [pc, #600]	; (8002340 <HAL_GPIO_Init+0x2a4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d86f      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 80020ea:	4a96      	ldr	r2, [pc, #600]	; (8002344 <HAL_GPIO_Init+0x2a8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d052      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
 80020f0:	4a94      	ldr	r2, [pc, #592]	; (8002344 <HAL_GPIO_Init+0x2a8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d869      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 80020f6:	4a94      	ldr	r2, [pc, #592]	; (8002348 <HAL_GPIO_Init+0x2ac>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d04c      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
 80020fc:	4a92      	ldr	r2, [pc, #584]	; (8002348 <HAL_GPIO_Init+0x2ac>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d863      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 8002102:	4a92      	ldr	r2, [pc, #584]	; (800234c <HAL_GPIO_Init+0x2b0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d046      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
 8002108:	4a90      	ldr	r2, [pc, #576]	; (800234c <HAL_GPIO_Init+0x2b0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d85d      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 800210e:	2b12      	cmp	r3, #18
 8002110:	d82a      	bhi.n	8002168 <HAL_GPIO_Init+0xcc>
 8002112:	2b12      	cmp	r3, #18
 8002114:	d859      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 8002116:	a201      	add	r2, pc, #4	; (adr r2, 800211c <HAL_GPIO_Init+0x80>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	08002197 	.word	0x08002197
 8002120:	08002171 	.word	0x08002171
 8002124:	08002183 	.word	0x08002183
 8002128:	080021c5 	.word	0x080021c5
 800212c:	080021cb 	.word	0x080021cb
 8002130:	080021cb 	.word	0x080021cb
 8002134:	080021cb 	.word	0x080021cb
 8002138:	080021cb 	.word	0x080021cb
 800213c:	080021cb 	.word	0x080021cb
 8002140:	080021cb 	.word	0x080021cb
 8002144:	080021cb 	.word	0x080021cb
 8002148:	080021cb 	.word	0x080021cb
 800214c:	080021cb 	.word	0x080021cb
 8002150:	080021cb 	.word	0x080021cb
 8002154:	080021cb 	.word	0x080021cb
 8002158:	080021cb 	.word	0x080021cb
 800215c:	080021cb 	.word	0x080021cb
 8002160:	08002179 	.word	0x08002179
 8002164:	0800218d 	.word	0x0800218d
 8002168:	4a79      	ldr	r2, [pc, #484]	; (8002350 <HAL_GPIO_Init+0x2b4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800216e:	e02c      	b.n	80021ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	623b      	str	r3, [r7, #32]
          break;
 8002176:	e029      	b.n	80021cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	3304      	adds	r3, #4
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	e024      	b.n	80021cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	3308      	adds	r3, #8
 8002188:	623b      	str	r3, [r7, #32]
          break;
 800218a:	e01f      	b.n	80021cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	330c      	adds	r3, #12
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e01a      	b.n	80021cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800219e:	2304      	movs	r3, #4
 80021a0:	623b      	str	r3, [r7, #32]
          break;
 80021a2:	e013      	b.n	80021cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d105      	bne.n	80021b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021ac:	2308      	movs	r3, #8
 80021ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	611a      	str	r2, [r3, #16]
          break;
 80021b6:	e009      	b.n	80021cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b8:	2308      	movs	r3, #8
 80021ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	615a      	str	r2, [r3, #20]
          break;
 80021c2:	e003      	b.n	80021cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
          break;
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x130>
          break;
 80021ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2bff      	cmp	r3, #255	; 0xff
 80021d0:	d801      	bhi.n	80021d6 <HAL_GPIO_Init+0x13a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	e001      	b.n	80021da <HAL_GPIO_Init+0x13e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3304      	adds	r3, #4
 80021da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2bff      	cmp	r3, #255	; 0xff
 80021e0:	d802      	bhi.n	80021e8 <HAL_GPIO_Init+0x14c>
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x152>
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3b08      	subs	r3, #8
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	210f      	movs	r1, #15
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	401a      	ands	r2, r3
 8002200:	6a39      	ldr	r1, [r7, #32]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	431a      	orrs	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80b1 	beq.w	800237e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800221c:	4b4d      	ldr	r3, [pc, #308]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a4c      	ldr	r2, [pc, #304]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b4a      	ldr	r3, [pc, #296]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002234:	4a48      	ldr	r2, [pc, #288]	; (8002358 <HAL_GPIO_Init+0x2bc>)
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a40      	ldr	r2, [pc, #256]	; (800235c <HAL_GPIO_Init+0x2c0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d013      	beq.n	8002288 <HAL_GPIO_Init+0x1ec>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3f      	ldr	r2, [pc, #252]	; (8002360 <HAL_GPIO_Init+0x2c4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d00d      	beq.n	8002284 <HAL_GPIO_Init+0x1e8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3e      	ldr	r2, [pc, #248]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d007      	beq.n	8002280 <HAL_GPIO_Init+0x1e4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3d      	ldr	r2, [pc, #244]	; (8002368 <HAL_GPIO_Init+0x2cc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d101      	bne.n	800227c <HAL_GPIO_Init+0x1e0>
 8002278:	2303      	movs	r3, #3
 800227a:	e006      	b.n	800228a <HAL_GPIO_Init+0x1ee>
 800227c:	2304      	movs	r3, #4
 800227e:	e004      	b.n	800228a <HAL_GPIO_Init+0x1ee>
 8002280:	2302      	movs	r3, #2
 8002282:	e002      	b.n	800228a <HAL_GPIO_Init+0x1ee>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <HAL_GPIO_Init+0x1ee>
 8002288:	2300      	movs	r3, #0
 800228a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228c:	f002 0203 	and.w	r2, r2, #3
 8002290:	0092      	lsls	r2, r2, #2
 8002292:	4093      	lsls	r3, r2
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800229a:	492f      	ldr	r1, [pc, #188]	; (8002358 <HAL_GPIO_Init+0x2bc>)
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3302      	adds	r3, #2
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_GPIO_Init+0x2d0>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	492c      	ldr	r1, [pc, #176]	; (800236c <HAL_GPIO_Init+0x2d0>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_GPIO_Init+0x2d0>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	4928      	ldr	r1, [pc, #160]	; (800236c <HAL_GPIO_Init+0x2d0>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d006      	beq.n	80022ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <HAL_GPIO_Init+0x2d0>)
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4922      	ldr	r1, [pc, #136]	; (800236c <HAL_GPIO_Init+0x2d0>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_GPIO_Init+0x2d0>)
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	491e      	ldr	r1, [pc, #120]	; (800236c <HAL_GPIO_Init+0x2d0>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_GPIO_Init+0x2d0>)
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	4918      	ldr	r1, [pc, #96]	; (800236c <HAL_GPIO_Init+0x2d0>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	608b      	str	r3, [r1, #8]
 8002310:	e006      	b.n	8002320 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_GPIO_Init+0x2d0>)
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	43db      	mvns	r3, r3
 800231a:	4914      	ldr	r1, [pc, #80]	; (800236c <HAL_GPIO_Init+0x2d0>)
 800231c:	4013      	ands	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d021      	beq.n	8002370 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_GPIO_Init+0x2d0>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	490e      	ldr	r1, [pc, #56]	; (800236c <HAL_GPIO_Init+0x2d0>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	60cb      	str	r3, [r1, #12]
 8002338:	e021      	b.n	800237e <HAL_GPIO_Init+0x2e2>
 800233a:	bf00      	nop
 800233c:	10320000 	.word	0x10320000
 8002340:	10310000 	.word	0x10310000
 8002344:	10220000 	.word	0x10220000
 8002348:	10210000 	.word	0x10210000
 800234c:	10120000 	.word	0x10120000
 8002350:	10110000 	.word	0x10110000
 8002354:	40021000 	.word	0x40021000
 8002358:	40010000 	.word	0x40010000
 800235c:	40010800 	.word	0x40010800
 8002360:	40010c00 	.word	0x40010c00
 8002364:	40011000 	.word	0x40011000
 8002368:	40011400 	.word	0x40011400
 800236c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_GPIO_Init+0x304>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	43db      	mvns	r3, r3
 8002378:	4909      	ldr	r1, [pc, #36]	; (80023a0 <HAL_GPIO_Init+0x304>)
 800237a:	4013      	ands	r3, r2
 800237c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	3301      	adds	r3, #1
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	f47f ae8e 	bne.w	80020b0 <HAL_GPIO_Init+0x14>
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	372c      	adds	r7, #44	; 0x2c
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	40010400 	.word	0x40010400

080023a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e001      	b.n	80023c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	807b      	strh	r3, [r7, #2]
 80023de:	4613      	mov	r3, r2
 80023e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e2:	787b      	ldrb	r3, [r7, #1]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e8:	887a      	ldrh	r2, [r7, #2]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ee:	e003      	b.n	80023f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	041a      	lsls	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	611a      	str	r2, [r3, #16]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002414:	887a      	ldrh	r2, [r7, #2]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4013      	ands	r3, r2
 800241a:	041a      	lsls	r2, r3, #16
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43d9      	mvns	r1, r3
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	400b      	ands	r3, r1
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	611a      	str	r2, [r3, #16]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002436:	b08b      	sub	sp, #44	; 0x2c
 8002438:	af06      	add	r7, sp, #24
 800243a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0fd      	b.n	8002642 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f007 f942 	bl	80096e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2203      	movs	r2, #3
 8002464:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f002 ff6b 	bl	8005348 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	687e      	ldr	r6, [r7, #4]
 800247a:	466d      	mov	r5, sp
 800247c:	f106 0410 	add.w	r4, r6, #16
 8002480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	602b      	str	r3, [r5, #0]
 8002488:	1d33      	adds	r3, r6, #4
 800248a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	f002 ff35 	bl	80052fc <USB_CoreInit>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0ce      	b.n	8002642 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 ff66 	bl	800537c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	e04c      	b.n	8002550 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	3301      	adds	r3, #1
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	b298      	uxth	r0, r3
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	3336      	adds	r3, #54	; 0x36
 80024f4:	4602      	mov	r2, r0
 80024f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	440b      	add	r3, r1
 8002508:	3303      	adds	r3, #3
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	3338      	adds	r3, #56	; 0x38
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	440b      	add	r3, r1
 8002530:	333c      	adds	r3, #60	; 0x3c
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	3340      	adds	r3, #64	; 0x40
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	3301      	adds	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	429a      	cmp	r2, r3
 8002558:	d3ad      	bcc.n	80024b6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e044      	b.n	80025ea <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	440b      	add	r3, r1
 800256e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	440b      	add	r3, r1
 80025c6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	3301      	adds	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d3b5      	bcc.n	8002560 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	687e      	ldr	r6, [r7, #4]
 80025fc:	466d      	mov	r5, sp
 80025fe:	f106 0410 	add.w	r4, r6, #16
 8002602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	602b      	str	r3, [r5, #0]
 800260a:	1d33      	adds	r3, r6, #4
 800260c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f002 fec0 	bl	8005394 <USB_DevInit>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e00d      	b.n	8002642 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fb72 	bl	8007d24 <USB_DevDisconnect>

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800264a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_PCD_Start+0x16>
 800265c:	2302      	movs	r3, #2
 800265e:	e016      	b.n	800268e <HAL_PCD_Start+0x44>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fe55 	bl	800531c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002672:	2101      	movs	r1, #1
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f007 fa8c 	bl	8009b92 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f005 fb46 	bl	8007d10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b088      	sub	sp, #32
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f005 fb48 	bl	8007d38 <USB_ReadInterrupts>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b2:	d102      	bne.n	80026ba <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fb48 	bl	8002d4a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f005 fb3a 	bl	8007d38 <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d112      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e2:	b292      	uxth	r2, r2
 80026e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f007 f876 	bl	80097da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026ee:	2100      	movs	r1, #0
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f923 	bl	800293c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f005 fb1c 	bl	8007d38 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800270a:	d10b      	bne.n	8002724 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002714:	b29a      	uxth	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800271e:	b292      	uxth	r2, r2
 8002720:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f005 fb05 	bl	8007d38 <USB_ReadInterrupts>
 800272e:	4603      	mov	r3, r0
 8002730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002738:	d10b      	bne.n	8002752 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002742:	b29a      	uxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800274c:	b292      	uxth	r2, r2
 800274e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f005 faee 	bl	8007d38 <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002766:	d126      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002770:	b29a      	uxth	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0204 	bic.w	r2, r2, #4
 800277a:	b292      	uxth	r2, r2
 800277c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0208 	bic.w	r2, r2, #8
 8002792:	b292      	uxth	r2, r2
 8002794:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f007 f857 	bl	800984c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027b0:	b292      	uxth	r2, r2
 80027b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f005 fabc 	bl	8007d38 <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ca:	f040 8082 	bne.w	80028d2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	77fb      	strb	r3, [r7, #31]
 80027d2:	e010      	b.n	80027f6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	7ffb      	ldrb	r3, [r7, #31]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	441a      	add	r2, r3
 80027e0:	7ffb      	ldrb	r3, [r7, #31]
 80027e2:	8812      	ldrh	r2, [r2, #0]
 80027e4:	b292      	uxth	r2, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	3320      	adds	r3, #32
 80027ea:	443b      	add	r3, r7
 80027ec:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80027f0:	7ffb      	ldrb	r3, [r7, #31]
 80027f2:	3301      	adds	r3, #1
 80027f4:	77fb      	strb	r3, [r7, #31]
 80027f6:	7ffb      	ldrb	r3, [r7, #31]
 80027f8:	2b07      	cmp	r3, #7
 80027fa:	d9eb      	bls.n	80027d4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002804:	b29a      	uxth	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	b292      	uxth	r2, r2
 8002810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	b292      	uxth	r2, r2
 8002828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800282c:	bf00      	nop
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002836:	b29b      	uxth	r3, r3
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f6      	beq.n	800282e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002848:	b29a      	uxth	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002852:	b292      	uxth	r2, r2
 8002854:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002858:	2300      	movs	r3, #0
 800285a:	77fb      	strb	r3, [r7, #31]
 800285c:	e00f      	b.n	800287e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800285e:	7ffb      	ldrb	r3, [r7, #31]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	4611      	mov	r1, r2
 8002866:	7ffa      	ldrb	r2, [r7, #31]
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	440a      	add	r2, r1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	3320      	adds	r3, #32
 8002870:	443b      	add	r3, r7
 8002872:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002876:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002878:	7ffb      	ldrb	r3, [r7, #31]
 800287a:	3301      	adds	r3, #1
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	7ffb      	ldrb	r3, [r7, #31]
 8002880:	2b07      	cmp	r3, #7
 8002882:	d9ec      	bls.n	800285e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800288c:	b29a      	uxth	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0208 	orr.w	r2, r2, #8
 8002896:	b292      	uxth	r2, r2
 8002898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ae:	b292      	uxth	r2, r2
 80028b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028bc:	b29a      	uxth	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0204 	orr.w	r2, r2, #4
 80028c6:	b292      	uxth	r2, r2
 80028c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f006 ffa3 	bl	8009818 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f005 fa2e 	bl	8007d38 <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e6:	d10e      	bne.n	8002906 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028fa:	b292      	uxth	r2, r2
 80028fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f006 ff5c 	bl	80097be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f005 fa14 	bl	8007d38 <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291a:	d10b      	bne.n	8002934 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002924:	b29a      	uxth	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800292e:	b292      	uxth	r2, r2
 8002930:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002934:	bf00      	nop
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_PCD_SetAddress+0x1a>
 8002952:	2302      	movs	r3, #2
 8002954:	e013      	b.n	800297e <HAL_PCD_SetAddress+0x42>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f005 f9bb 	bl	8007cea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	4608      	mov	r0, r1
 8002990:	4611      	mov	r1, r2
 8002992:	461a      	mov	r2, r3
 8002994:	4603      	mov	r3, r0
 8002996:	70fb      	strb	r3, [r7, #3]
 8002998:	460b      	mov	r3, r1
 800299a:	803b      	strh	r3, [r7, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da0e      	bge.n	80029ca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	705a      	strb	r2, [r3, #1]
 80029c8:	e00e      	b.n	80029e8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 0207 	and.w	r2, r3, #7
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029f4:	883a      	ldrh	r2, [r7, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	78ba      	ldrb	r2, [r7, #2]
 80029fe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a12:	78bb      	ldrb	r3, [r7, #2]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d102      	bne.n	8002a1e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_PCD_EP_Open+0xa6>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e00e      	b.n	8002a4a <HAL_PCD_EP_Open+0xc4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68f9      	ldr	r1, [r7, #12]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fcca 	bl	80053d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002a48:	7afb      	ldrb	r3, [r7, #11]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	da0e      	bge.n	8002a84 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	705a      	strb	r2, [r3, #1]
 8002a82:	e00e      	b.n	8002aa2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	f003 0207 	and.w	r2, r3, #7
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_PCD_EP_Close+0x6a>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e00e      	b.n	8002ada <HAL_PCD_EP_Close+0x88>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68f9      	ldr	r1, [r7, #12]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f002 ffec 	bl	8005aa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	460b      	mov	r3, r1
 8002af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002af2:	7afb      	ldrb	r3, [r7, #11]
 8002af4:	f003 0207 	and.w	r2, r3, #7
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b2e:	7afb      	ldrb	r3, [r7, #11]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6979      	ldr	r1, [r7, #20]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 f99e 	bl	8005e80 <USB_EPStartXfer>
 8002b44:	e005      	b.n	8002b52 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6979      	ldr	r1, [r7, #20]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 f997 	bl	8005e80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6979      	ldr	r1, [r7, #20]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 f95b 	bl	8005e80 <USB_EPStartXfer>
 8002bca:	e005      	b.n	8002bd8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6979      	ldr	r1, [r7, #20]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 f954 	bl	8005e80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 0207 	and.w	r2, r3, #7
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d901      	bls.n	8002c00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e04c      	b.n	8002c9a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da0e      	bge.n	8002c26 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	705a      	strb	r2, [r3, #1]
 8002c24:	e00c      	b.n	8002c40 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_PCD_EP_SetStall+0x7e>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e01c      	b.n	8002c9a <HAL_PCD_EP_SetStall+0xb8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 ff3e 	bl	8007af0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d108      	bne.n	8002c90 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f005 f863 	bl	8007d56 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d901      	bls.n	8002cc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e040      	b.n	8002d42 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	da0e      	bge.n	8002ce6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4413      	add	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	705a      	strb	r2, [r3, #1]
 8002ce4:	e00e      	b.n	8002d04 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 0207 	and.w	r2, r3, #7
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_PCD_EP_ClrStall+0x82>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e00e      	b.n	8002d42 <HAL_PCD_EP_ClrStall+0xa0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68f9      	ldr	r1, [r7, #12]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 ff2c 	bl	8007b90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08e      	sub	sp, #56	; 0x38
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d52:	e2ec      	b.n	800332e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d5c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002d6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 8161 	bne.w	8003036 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d152      	bne.n	8002e24 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	81fb      	strh	r3, [r7, #14]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	89fb      	ldrh	r3, [r7, #14]
 8002d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3328      	adds	r3, #40	; 0x28
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	441a      	add	r2, r3
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002de2:	2100      	movs	r1, #0
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f006 fcd0 	bl	800978a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 829b 	beq.w	800332e <PCD_EP_ISR_Handler+0x5e4>
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 8296 	bne.w	800332e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b292      	uxth	r2, r2
 8002e16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e22:	e284      	b.n	800332e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d034      	beq.n	8002ea8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	3306      	adds	r3, #6
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f004 ffba 	bl	8007df6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e8e:	4013      	ands	r3, r2
 8002e90:	823b      	strh	r3, [r7, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	8a3a      	ldrh	r2, [r7, #16]
 8002e98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f006 fc45 	bl	8009730 <HAL_PCD_SetupStageCallback>
 8002ea6:	e242      	b.n	800332e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ea8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f280 823e 	bge.w	800332e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	83bb      	strh	r3, [r7, #28]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	8bba      	ldrh	r2, [r7, #28]
 8002ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ecc:	b292      	uxth	r2, r2
 8002ece:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3306      	adds	r3, #6
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d019      	beq.n	8002f38 <PCD_EP_ISR_Handler+0x1ee>
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	6959      	ldr	r1, [r3, #20]
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f004 ff6a 	bl	8007df6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	441a      	add	r2, r3
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f30:	2100      	movs	r1, #0
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f006 fc0e 	bl	8009754 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f040 81f2 	bne.w	800332e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	4413      	add	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d112      	bne.n	8002f98 <PCD_EP_ISR_Handler+0x24e>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	801a      	strh	r2, [r3, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	801a      	strh	r2, [r3, #0]
 8002f96:	e02f      	b.n	8002ff8 <PCD_EP_ISR_Handler+0x2ae>
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8002f9e:	d813      	bhi.n	8002fc8 <PCD_EP_ISR_Handler+0x27e>
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <PCD_EP_ISR_Handler+0x270>
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	029b      	lsls	r3, r3, #10
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	801a      	strh	r2, [r3, #0]
 8002fc6:	e017      	b.n	8002ff8 <PCD_EP_ISR_Handler+0x2ae>
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <PCD_EP_ISR_Handler+0x298>
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	029b      	lsls	r3, r3, #10
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003008:	827b      	strh	r3, [r7, #18]
 800300a:	8a7b      	ldrh	r3, [r7, #18]
 800300c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003010:	827b      	strh	r3, [r7, #18]
 8003012:	8a7b      	ldrh	r3, [r7, #18]
 8003014:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003018:	827b      	strh	r3, [r7, #18]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	8a7b      	ldrh	r3, [r7, #18]
 8003020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003030:	b29b      	uxth	r3, r3
 8003032:	8013      	strh	r3, [r2, #0]
 8003034:	e17b      	b.n	800332e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003048:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800304c:	2b00      	cmp	r3, #0
 800304e:	f280 80ea 	bge.w	8003226 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29a      	uxth	r2, r3
 8003064:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003068:	4013      	ands	r3, r2
 800306a:	853b      	strh	r3, [r7, #40]	; 0x28
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800307c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003080:	b292      	uxth	r2, r2
 8003082:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003084:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4413      	add	r3, r2
 8003098:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	7b1b      	ldrb	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d122      	bne.n	80030e8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	3306      	adds	r3, #6
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ca:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80030cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8087 	beq.w	80031e2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	6959      	ldr	r1, [r3, #20]
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	88da      	ldrh	r2, [r3, #6]
 80030e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030e2:	f004 fe88 	bl	8007df6 <USB_ReadPMA>
 80030e6:	e07c      	b.n	80031e2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	78db      	ldrb	r3, [r3, #3]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d108      	bne.n	8003102 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80030f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030f2:	461a      	mov	r2, r3
 80030f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f927 	bl	800334a <HAL_PCD_EP_DB_Receive>
 80030fc:	4603      	mov	r3, r0
 80030fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003100:	e06f      	b.n	80031e2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311c:	847b      	strh	r3, [r7, #34]	; 0x22
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	441a      	add	r2, r3
 800312c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800312e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800313a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800313e:	b29b      	uxth	r3, r3
 8003140:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d021      	beq.n	80031a0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003164:	b29b      	uxth	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	3302      	adds	r3, #2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003184:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003186:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003188:	2b00      	cmp	r3, #0
 800318a:	d02a      	beq.n	80031e2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	6959      	ldr	r1, [r3, #20]
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	891a      	ldrh	r2, [r3, #8]
 8003198:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800319a:	f004 fe2c 	bl	8007df6 <USB_ReadPMA>
 800319e:	e020      	b.n	80031e2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	3306      	adds	r3, #6
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80031ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	6959      	ldr	r1, [r3, #20]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	895a      	ldrh	r2, [r3, #10]
 80031dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031de:	f004 fe0a 	bl	8007df6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031e8:	441a      	add	r2, r3
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031f4:	441a      	add	r2, r3
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d004      	beq.n	800320c <PCD_EP_ISR_Handler+0x4c2>
 8003202:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	429a      	cmp	r2, r3
 800320a:	d206      	bcs.n	800321a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4619      	mov	r1, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f006 fa9e 	bl	8009754 <HAL_PCD_DataOutStageCallback>
 8003218:	e005      	b.n	8003226 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003220:	4618      	mov	r0, r3
 8003222:	f002 fe2d 	bl	8005e80 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322c:	2b00      	cmp	r3, #0
 800322e:	d07e      	beq.n	800332e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003230:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	843b      	strh	r3, [r7, #32]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	8c3b      	ldrh	r3, [r7, #32]
 8003270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003278:	b29b      	uxth	r3, r3
 800327a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	78db      	ldrb	r3, [r3, #3]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d00c      	beq.n	800329e <PCD_EP_ISR_Handler+0x554>
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	78db      	ldrb	r3, [r3, #3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003290:	2b02      	cmp	r3, #2
 8003292:	d146      	bne.n	8003322 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003294:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d141      	bne.n	8003322 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	3302      	adds	r3, #2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	8bfb      	ldrh	r3, [r7, #30]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d906      	bls.n	80032e0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	8bfb      	ldrh	r3, [r7, #30]
 80032d8:	1ad2      	subs	r2, r2, r3
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	619a      	str	r2, [r3, #24]
 80032de:	e002      	b.n	80032e6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	2200      	movs	r2, #0
 80032e4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	4619      	mov	r1, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f006 fa48 	bl	800978a <HAL_PCD_DataInStageCallback>
 80032fa:	e018      	b.n	800332e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	8bfb      	ldrh	r3, [r7, #30]
 8003302:	441a      	add	r2, r3
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	8bfb      	ldrh	r3, [r7, #30]
 800330e:	441a      	add	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800331a:	4618      	mov	r0, r3
 800331c:	f002 fdb0 	bl	8005e80 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003320:	e005      	b.n	800332e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003322:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003324:	461a      	mov	r2, r3
 8003326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f91b 	bl	8003564 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003336:	b29b      	uxth	r3, r3
 8003338:	b21b      	sxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	f6ff ad0a 	blt.w	8002d54 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3738      	adds	r7, #56	; 0x38
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b088      	sub	sp, #32
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d07e      	beq.n	8003460 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336a:	b29b      	uxth	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	3302      	adds	r3, #2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800338a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	699a      	ldr	r2, [r3, #24]
 8003390:	8b7b      	ldrh	r3, [r7, #26]
 8003392:	429a      	cmp	r2, r3
 8003394:	d306      	bcc.n	80033a4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	8b7b      	ldrh	r3, [r7, #26]
 800339c:	1ad2      	subs	r2, r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	619a      	str	r2, [r3, #24]
 80033a2:	e002      	b.n	80033aa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2200      	movs	r2, #0
 80033a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d123      	bne.n	80033fa <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033cc:	833b      	strh	r3, [r7, #24]
 80033ce:	8b3b      	ldrh	r3, [r7, #24]
 80033d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033d4:	833b      	strh	r3, [r7, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	441a      	add	r2, r3
 80033e4:	8b3b      	ldrh	r3, [r7, #24]
 80033e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01f      	beq.n	8003444 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341e:	82fb      	strh	r3, [r7, #22]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	8afb      	ldrh	r3, [r7, #22]
 8003430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800343c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003440:	b29b      	uxth	r3, r3
 8003442:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003444:	8b7b      	ldrh	r3, [r7, #26]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8087 	beq.w	800355a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	6959      	ldr	r1, [r3, #20]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	891a      	ldrh	r2, [r3, #8]
 8003458:	8b7b      	ldrh	r3, [r7, #26]
 800345a:	f004 fccc 	bl	8007df6 <USB_ReadPMA>
 800345e:	e07c      	b.n	800355a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003468:	b29b      	uxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	3306      	adds	r3, #6
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003488:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	8b7b      	ldrh	r3, [r7, #26]
 8003490:	429a      	cmp	r2, r3
 8003492:	d306      	bcc.n	80034a2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	8b7b      	ldrh	r3, [r7, #26]
 800349a:	1ad2      	subs	r2, r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	619a      	str	r2, [r3, #24]
 80034a0:	e002      	b.n	80034a8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2200      	movs	r2, #0
 80034a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d123      	bne.n	80034f8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	83fb      	strh	r3, [r7, #30]
 80034cc:	8bfb      	ldrh	r3, [r7, #30]
 80034ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034d2:	83fb      	strh	r3, [r7, #30]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	8bfb      	ldrh	r3, [r7, #30]
 80034e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11f      	bne.n	8003542 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351c:	83bb      	strh	r3, [r7, #28]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	441a      	add	r2, r3
 800352c:	8bbb      	ldrh	r3, [r7, #28]
 800352e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800353e:	b29b      	uxth	r3, r3
 8003540:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003542:	8b7b      	ldrh	r3, [r7, #26]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6959      	ldr	r1, [r3, #20]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	895a      	ldrh	r2, [r3, #10]
 8003554:	8b7b      	ldrh	r3, [r7, #26]
 8003556:	f004 fc4e 	bl	8007df6 <USB_ReadPMA>
    }
  }

  return count;
 800355a:	8b7b      	ldrh	r3, [r7, #26]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b0a2      	sub	sp, #136	; 0x88
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 81c7 	beq.w	800390c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003586:	b29b      	uxth	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	3302      	adds	r3, #2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d907      	bls.n	80035c6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035be:	1ad2      	subs	r2, r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	619a      	str	r2, [r3, #24]
 80035c4:	e002      	b.n	80035cc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 80b9 	bne.w	8003748 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	785b      	ldrb	r3, [r3, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d126      	bne.n	800362c <HAL_PCD_EP_DB_Transmit+0xc8>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	4413      	add	r3, r2
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	011a      	lsls	r2, r3, #4
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	4413      	add	r3, r2
 8003600:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003610:	b29a      	uxth	r2, r3
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	801a      	strh	r2, [r3, #0]
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003624:	b29a      	uxth	r2, r3
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	e01a      	b.n	8003662 <HAL_PCD_EP_DB_Transmit+0xfe>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	785b      	ldrb	r3, [r3, #1]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d116      	bne.n	8003662 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003642:	b29b      	uxth	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	4413      	add	r3, r2
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	011a      	lsls	r2, r3, #4
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	4413      	add	r3, r2
 8003656:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d126      	bne.n	80036be <HAL_PCD_EP_DB_Transmit+0x15a>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367e:	b29b      	uxth	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4413      	add	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	011a      	lsls	r2, r3, #4
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	4413      	add	r3, r2
 8003692:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	e017      	b.n	80036ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	785b      	ldrb	r3, [r3, #1]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d113      	bne.n	80036ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	4413      	add	r3, r2
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	011a      	lsls	r2, r3, #4
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	4413      	add	r3, r2
 80036e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2200      	movs	r2, #0
 80036ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	4619      	mov	r1, r3
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f006 f848 	bl	800978a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 82d4 	beq.w	8003cae <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003720:	827b      	strh	r3, [r7, #18]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	441a      	add	r2, r3
 8003730:	8a7b      	ldrh	r3, [r7, #18]
 8003732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800373e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003742:	b29b      	uxth	r3, r3
 8003744:	8013      	strh	r3, [r2, #0]
 8003746:	e2b2      	b.n	8003cae <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d021      	beq.n	8003796 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800378a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800378e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003792:	b29b      	uxth	r3, r3
 8003794:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800379c:	2b01      	cmp	r3, #1
 800379e:	f040 8286 	bne.w	8003cae <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037aa:	441a      	add	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037b8:	441a      	add	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d309      	bcc.n	80037de <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6a1a      	ldr	r2, [r3, #32]
 80037d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d6:	1ad2      	subs	r2, r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	621a      	str	r2, [r3, #32]
 80037dc:	e015      	b.n	800380a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d107      	bne.n	80037f6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80037e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037f4:	e009      	b.n	800380a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d155      	bne.n	80038be <HAL_PCD_EP_DB_Transmit+0x35a>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	63bb      	str	r3, [r7, #56]	; 0x38
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003820:	b29b      	uxth	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	4413      	add	r3, r2
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	011a      	lsls	r2, r3, #4
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	4413      	add	r3, r2
 8003834:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
 800383a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383c:	2b00      	cmp	r3, #0
 800383e:	d112      	bne.n	8003866 <HAL_PCD_EP_DB_Transmit+0x302>
 8003840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800384a:	b29a      	uxth	r2, r3
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800385a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800385e:	b29a      	uxth	r2, r3
 8003860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003862:	801a      	strh	r2, [r3, #0]
 8003864:	e047      	b.n	80038f6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003868:	2b3e      	cmp	r3, #62	; 0x3e
 800386a:	d811      	bhi.n	8003890 <HAL_PCD_EP_DB_Transmit+0x32c>
 800386c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	64bb      	str	r3, [r7, #72]	; 0x48
 8003872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_PCD_EP_DB_Transmit+0x31e>
 800387c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387e:	3301      	adds	r3, #1
 8003880:	64bb      	str	r3, [r7, #72]	; 0x48
 8003882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003884:	b29b      	uxth	r3, r3
 8003886:	029b      	lsls	r3, r3, #10
 8003888:	b29a      	uxth	r2, r3
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	e032      	b.n	80038f6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	64bb      	str	r3, [r7, #72]	; 0x48
 8003896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <HAL_PCD_EP_DB_Transmit+0x342>
 80038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a2:	3b01      	subs	r3, #1
 80038a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	029b      	lsls	r3, r3, #10
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ba:	801a      	strh	r2, [r3, #0]
 80038bc:	e01b      	b.n	80038f6 <HAL_PCD_EP_DB_Transmit+0x392>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d117      	bne.n	80038f6 <HAL_PCD_EP_DB_Transmit+0x392>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038da:	4413      	add	r3, r2
 80038dc:	643b      	str	r3, [r7, #64]	; 0x40
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	011a      	lsls	r2, r3, #4
 80038e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e6:	4413      	add	r3, r2
 80038e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6959      	ldr	r1, [r3, #20]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	891a      	ldrh	r2, [r3, #8]
 8003902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	f004 fa31 	bl	8007d6c <USB_WritePMA>
 800390a:	e1d0      	b.n	8003cae <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003914:	b29b      	uxth	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	3306      	adds	r3, #6
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003934:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003940:	429a      	cmp	r2, r3
 8003942:	d307      	bcc.n	8003954 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800394c:	1ad2      	subs	r2, r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	619a      	str	r2, [r3, #24]
 8003952:	e002      	b.n	800395a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 80c4 	bne.w	8003aec <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d126      	bne.n	80039ba <HAL_PCD_EP_DB_Transmit+0x456>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800397a:	b29b      	uxth	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003980:	4413      	add	r3, r2
 8003982:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	011a      	lsls	r2, r3, #4
 800398a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398c:	4413      	add	r3, r2
 800398e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003992:	66bb      	str	r3, [r7, #104]	; 0x68
 8003994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800399e:	b29a      	uxth	r2, r3
 80039a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a2:	801a      	strh	r2, [r3, #0]
 80039a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b6:	801a      	strh	r2, [r3, #0]
 80039b8:	e01a      	b.n	80039f0 <HAL_PCD_EP_DB_Transmit+0x48c>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d116      	bne.n	80039f0 <HAL_PCD_EP_DB_Transmit+0x48c>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	677b      	str	r3, [r7, #116]	; 0x74
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d6:	4413      	add	r3, r2
 80039d8:	677b      	str	r3, [r7, #116]	; 0x74
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	011a      	lsls	r2, r3, #4
 80039e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e2:	4413      	add	r3, r2
 80039e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039e8:	673b      	str	r3, [r7, #112]	; 0x70
 80039ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ec:	2200      	movs	r2, #0
 80039ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d12f      	bne.n	8003a5e <HAL_PCD_EP_DB_Transmit+0x4fa>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a16:	4413      	add	r3, r2
 8003a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	011a      	lsls	r2, r3, #4
 8003a22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a26:	4413      	add	r3, r2
 8003a28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a42:	801a      	strh	r2, [r3, #0]
 8003a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	e017      	b.n	8003a8e <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d113      	bne.n	8003a8e <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a74:	4413      	add	r3, r2
 8003a76:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	011a      	lsls	r2, r3, #4
 8003a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a80:	4413      	add	r3, r2
 8003a82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	4619      	mov	r1, r3
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f005 fe78 	bl	800978a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f040 8104 	bne.w	8003cae <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	441a      	add	r2, r3
 8003ad2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	8013      	strh	r3, [r2, #0]
 8003aea:	e0e0      	b.n	8003cae <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d121      	bne.n	8003b3a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b10:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	f040 80b4 	bne.w	8003cae <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b4e:	441a      	add	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d309      	bcc.n	8003b82 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7a:	1ad2      	subs	r2, r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	621a      	str	r2, [r3, #32]
 8003b80:	e015      	b.n	8003bae <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003b8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b8e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b98:	e009      	b.n	8003bae <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	667b      	str	r3, [r7, #100]	; 0x64
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d155      	bne.n	8003c68 <HAL_PCD_EP_DB_Transmit+0x704>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd0:	4413      	add	r3, r2
 8003bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	011a      	lsls	r2, r3, #4
 8003bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bdc:	4413      	add	r3, r2
 8003bde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003be2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d112      	bne.n	8003c10 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	e044      	b.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x736>
 8003c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c12:	2b3e      	cmp	r3, #62	; 0x3e
 8003c14:	d811      	bhi.n	8003c3a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	3301      	adds	r3, #1
 8003c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	029b      	lsls	r3, r3, #10
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c36:	801a      	strh	r2, [r3, #0]
 8003c38:	e02f      	b.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x736>
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	029b      	lsls	r3, r3, #10
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	e018      	b.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x736>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	785b      	ldrb	r3, [r3, #1]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d114      	bne.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x736>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c7e:	4413      	add	r3, r2
 8003c80:	667b      	str	r3, [r7, #100]	; 0x64
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	011a      	lsls	r2, r3, #4
 8003c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c90:	663b      	str	r3, [r7, #96]	; 0x60
 8003c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c98:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6959      	ldr	r1, [r3, #20]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	895a      	ldrh	r2, [r3, #10]
 8003ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f004 f85f 	bl	8007d6c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc8:	823b      	strh	r3, [r7, #16]
 8003cca:	8a3b      	ldrh	r3, [r7, #16]
 8003ccc:	f083 0310 	eor.w	r3, r3, #16
 8003cd0:	823b      	strh	r3, [r7, #16]
 8003cd2:	8a3b      	ldrh	r3, [r7, #16]
 8003cd4:	f083 0320 	eor.w	r3, r3, #32
 8003cd8:	823b      	strh	r3, [r7, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	441a      	add	r2, r3
 8003ce8:	8a3b      	ldrh	r3, [r7, #16]
 8003cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3788      	adds	r7, #136	; 0x88
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	607b      	str	r3, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	817b      	strh	r3, [r7, #10]
 8003d16:	4613      	mov	r3, r2
 8003d18:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d1a:	897b      	ldrh	r3, [r7, #10]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d26:	897b      	ldrh	r3, [r7, #10]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e009      	b.n	8003d52 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d3e:	897a      	ldrh	r2, [r7, #10]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d52:	893b      	ldrh	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d107      	bne.n	8003d68 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	80da      	strh	r2, [r3, #6]
 8003d66:	e00b      	b.n	8003d80 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e272      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8087 	beq.w	8003eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dac:	4b92      	ldr	r3, [pc, #584]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 030c 	and.w	r3, r3, #12
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d00c      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003db8:	4b8f      	ldr	r3, [pc, #572]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d112      	bne.n	8003dea <HAL_RCC_OscConfig+0x5e>
 8003dc4:	4b8c      	ldr	r3, [pc, #560]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd0:	d10b      	bne.n	8003dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd2:	4b89      	ldr	r3, [pc, #548]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d06c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x12c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d168      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e24c      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_OscConfig+0x76>
 8003df4:	4b80      	ldr	r3, [pc, #512]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a7f      	ldr	r2, [pc, #508]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e02e      	b.n	8003e60 <HAL_RCC_OscConfig+0xd4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x98>
 8003e0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7a      	ldr	r2, [pc, #488]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b78      	ldr	r3, [pc, #480]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a77      	ldr	r2, [pc, #476]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e01d      	b.n	8003e60 <HAL_RCC_OscConfig+0xd4>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0xbc>
 8003e2e:	4b72      	ldr	r3, [pc, #456]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a71      	ldr	r2, [pc, #452]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6e      	ldr	r2, [pc, #440]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0xd4>
 8003e48:	4b6b      	ldr	r3, [pc, #428]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6a      	ldr	r2, [pc, #424]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b68      	ldr	r3, [pc, #416]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a67      	ldr	r2, [pc, #412]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fd fa16 	bl	8001298 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fd fa12 	bl	8001298 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e200      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xe4>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fd fa02 	bl	8001298 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fd f9fe 	bl	8001298 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1ec      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x10c>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec6:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ed2:	4b49      	ldr	r3, [pc, #292]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x18c>
 8003ede:	4b46      	ldr	r3, [pc, #280]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x176>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1c0      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4939      	ldr	r1, [pc, #228]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e03a      	b.n	8003f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b36      	ldr	r3, [pc, #216]	; (8003ffc <HAL_RCC_OscConfig+0x270>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f26:	f7fd f9b7 	bl	8001298 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fd f9b3 	bl	8001298 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e1a1      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4927      	ldr	r1, [pc, #156]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
 8003f60:	e015      	b.n	8003f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f62:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <HAL_RCC_OscConfig+0x270>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fd f996 	bl	8001298 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fd f992 	bl	8001298 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e180      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d03a      	beq.n	8004010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d019      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa2:	4b17      	ldr	r3, [pc, #92]	; (8004000 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa8:	f7fd f976 	bl	8001298 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fd f972 	bl	8001298 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e160      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fce:	2001      	movs	r0, #1
 8003fd0:	f000 fad8 	bl	8004584 <RCC_Delay>
 8003fd4:	e01c      	b.n	8004010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fdc:	f7fd f95c 	bl	8001298 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe2:	e00f      	b.n	8004004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fd f958 	bl	8001298 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d908      	bls.n	8004004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e146      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	42420000 	.word	0x42420000
 8004000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	4b92      	ldr	r3, [pc, #584]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e9      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a6 	beq.w	800416a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004022:	4b8b      	ldr	r3, [pc, #556]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	4b88      	ldr	r3, [pc, #544]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	4a87      	ldr	r2, [pc, #540]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	61d3      	str	r3, [r2, #28]
 800403a:	4b85      	ldr	r3, [pc, #532]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b82      	ldr	r3, [pc, #520]	; (8004254 <HAL_RCC_OscConfig+0x4c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b7f      	ldr	r3, [pc, #508]	; (8004254 <HAL_RCC_OscConfig+0x4c8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a7e      	ldr	r2, [pc, #504]	; (8004254 <HAL_RCC_OscConfig+0x4c8>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fd f919 	bl	8001298 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406a:	f7fd f915 	bl	8001298 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b64      	cmp	r3, #100	; 0x64
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e103      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	4b75      	ldr	r3, [pc, #468]	; (8004254 <HAL_RCC_OscConfig+0x4c8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x312>
 8004090:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4a6e      	ldr	r2, [pc, #440]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6213      	str	r3, [r2, #32]
 800409c:	e02d      	b.n	80040fa <HAL_RCC_OscConfig+0x36e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x334>
 80040a6:	4b6a      	ldr	r3, [pc, #424]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4a69      	ldr	r2, [pc, #420]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	6213      	str	r3, [r2, #32]
 80040b2:	4b67      	ldr	r3, [pc, #412]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	4a66      	ldr	r2, [pc, #408]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040b8:	f023 0304 	bic.w	r3, r3, #4
 80040bc:	6213      	str	r3, [r2, #32]
 80040be:	e01c      	b.n	80040fa <HAL_RCC_OscConfig+0x36e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x356>
 80040c8:	4b61      	ldr	r3, [pc, #388]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	4a60      	ldr	r2, [pc, #384]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	6213      	str	r3, [r2, #32]
 80040d4:	4b5e      	ldr	r3, [pc, #376]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	4a5d      	ldr	r2, [pc, #372]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6213      	str	r3, [r2, #32]
 80040e0:	e00b      	b.n	80040fa <HAL_RCC_OscConfig+0x36e>
 80040e2:	4b5b      	ldr	r3, [pc, #364]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4a5a      	ldr	r2, [pc, #360]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6213      	str	r3, [r2, #32]
 80040ee:	4b58      	ldr	r3, [pc, #352]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	4a57      	ldr	r2, [pc, #348]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d015      	beq.n	800412e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004102:	f7fd f8c9 	bl	8001298 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fd f8c5 	bl	8001298 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0b1      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCC_OscConfig+0x37e>
 800412c:	e014      	b.n	8004158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fd f8b3 	bl	8001298 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd f8af 	bl	8001298 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e09b      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	4b40      	ldr	r3, [pc, #256]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4b3c      	ldr	r3, [pc, #240]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	4a3b      	ldr	r2, [pc, #236]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8087 	beq.w	8004282 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004174:	4b36      	ldr	r3, [pc, #216]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d061      	beq.n	8004244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d146      	bne.n	8004216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004188:	4b33      	ldr	r3, [pc, #204]	; (8004258 <HAL_RCC_OscConfig+0x4cc>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fd f883 	bl	8001298 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004196:	f7fd f87f 	bl	8001298 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e06d      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a8:	4b29      	ldr	r3, [pc, #164]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041bc:	d108      	bne.n	80041d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	4921      	ldr	r1, [pc, #132]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d0:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a19      	ldr	r1, [r3, #32]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	430b      	orrs	r3, r1
 80041e2:	491b      	ldr	r1, [pc, #108]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_RCC_OscConfig+0x4cc>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ee:	f7fd f853 	bl	8001298 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f6:	f7fd f84f 	bl	8001298 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e03d      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x46a>
 8004214:	e035      	b.n	8004282 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_RCC_OscConfig+0x4cc>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fd f83c 	bl	8001298 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004224:	f7fd f838 	bl	8001298 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e026      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x498>
 8004242:	e01e      	b.n	8004282 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e019      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
 8004250:	40021000 	.word	0x40021000
 8004254:	40007000 	.word	0x40007000
 8004258:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_OscConfig+0x500>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	429a      	cmp	r2, r3
 800426e:	d106      	bne.n	800427e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d001      	beq.n	8004282 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000

08004290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0d0      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b6a      	ldr	r3, [pc, #424]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d910      	bls.n	80042d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b67      	ldr	r3, [pc, #412]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 0207 	bic.w	r2, r3, #7
 80042ba:	4965      	ldr	r1, [pc, #404]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b63      	ldr	r3, [pc, #396]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0b8      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d020      	beq.n	8004322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a58      	ldr	r2, [pc, #352]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004304:	4b53      	ldr	r3, [pc, #332]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a52      	ldr	r2, [pc, #328]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800430e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	494d      	ldr	r1, [pc, #308]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d040      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d115      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e07f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e073      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435e:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e06b      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436e:	4b39      	ldr	r3, [pc, #228]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f023 0203 	bic.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4936      	ldr	r1, [pc, #216]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004380:	f7fc ff8a 	bl	8001298 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	e00a      	b.n	800439e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004388:	f7fc ff86 	bl	8001298 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	; 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e053      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 020c 	and.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1eb      	bne.n	8004388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043b0:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d210      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 0207 	bic.w	r2, r3, #7
 80043c6:	4922      	ldr	r1, [pc, #136]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e032      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4916      	ldr	r1, [pc, #88]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	490e      	ldr	r1, [pc, #56]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800441e:	f000 f821 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004422:	4602      	mov	r2, r0
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	490a      	ldr	r1, [pc, #40]	; (8004458 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	5ccb      	ldrb	r3, [r1, r3]
 8004432:	fa22 f303 	lsr.w	r3, r2, r3
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <HAL_RCC_ClockConfig+0x1cc>)
 8004438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_RCC_ClockConfig+0x1d0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fee8 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40022000 	.word	0x40022000
 8004454:	40021000 	.word	0x40021000
 8004458:	0800b26c 	.word	0x0800b26c
 800445c:	2000000c 	.word	0x2000000c
 8004460:	20000010 	.word	0x20000010

08004464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b490      	push	{r4, r7}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800446a:	4b29      	ldr	r3, [pc, #164]	; (8004510 <HAL_RCC_GetSysClockFreq+0xac>)
 800446c:	1d3c      	adds	r4, r7, #4
 800446e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004474:	f240 2301 	movw	r3, #513	; 0x201
 8004478:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	2300      	movs	r3, #0
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800448e:	4b21      	ldr	r3, [pc, #132]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d002      	beq.n	80044a4 <HAL_RCC_GetSysClockFreq+0x40>
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d003      	beq.n	80044aa <HAL_RCC_GetSysClockFreq+0x46>
 80044a2:	e02b      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044a4:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044a6:	623b      	str	r3, [r7, #32]
      break;
 80044a8:	e02b      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	0c9b      	lsrs	r3, r3, #18
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	3328      	adds	r3, #40	; 0x28
 80044b4:	443b      	add	r3, r7
 80044b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d012      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044c6:	4b13      	ldr	r3, [pc, #76]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	0c5b      	lsrs	r3, r3, #17
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	3328      	adds	r3, #40	; 0x28
 80044d2:	443b      	add	r3, r7
 80044d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044de:	fb03 f202 	mul.w	r2, r3, r2
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ea:	e004      	b.n	80044f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	4a0b      	ldr	r2, [pc, #44]	; (800451c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f0:	fb02 f303 	mul.w	r3, r2, r3
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	623b      	str	r3, [r7, #32]
      break;
 80044fa:	e002      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044fe:	623b      	str	r3, [r7, #32]
      break;
 8004500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004502:	6a3b      	ldr	r3, [r7, #32]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3728      	adds	r7, #40	; 0x28
 8004508:	46bd      	mov	sp, r7
 800450a:	bc90      	pop	{r4, r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	0800b214 	.word	0x0800b214
 8004514:	40021000 	.word	0x40021000
 8004518:	007a1200 	.word	0x007a1200
 800451c:	003d0900 	.word	0x003d0900

08004520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004524:	4b02      	ldr	r3, [pc, #8]	; (8004530 <HAL_RCC_GetHCLKFreq+0x10>)
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	2000000c 	.word	0x2000000c

08004534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004538:	f7ff fff2 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4903      	ldr	r1, [pc, #12]	; (8004558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	0800b27c 	.word	0x0800b27c

0800455c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004560:	f7ff ffde 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	0adb      	lsrs	r3, r3, #11
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4903      	ldr	r1, [pc, #12]	; (8004580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	0800b27c 	.word	0x0800b27c

08004584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <RCC_Delay+0x34>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <RCC_Delay+0x38>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	0a5b      	lsrs	r3, r3, #9
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045a0:	bf00      	nop
  }
  while (Delay --);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1e5a      	subs	r2, r3, #1
 80045a6:	60fa      	str	r2, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f9      	bne.n	80045a0 <RCC_Delay+0x1c>
}
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr
 80045b8:	2000000c 	.word	0x2000000c
 80045bc:	10624dd3 	.word	0x10624dd3

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d07d      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80045dc:	2300      	movs	r3, #0
 80045de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e0:	4b4f      	ldr	r3, [pc, #316]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10d      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ec:	4b4c      	ldr	r3, [pc, #304]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	4a4b      	ldr	r2, [pc, #300]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f6:	61d3      	str	r3, [r2, #28]
 80045f8:	4b49      	ldr	r3, [pc, #292]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004604:	2301      	movs	r3, #1
 8004606:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004608:	4b46      	ldr	r3, [pc, #280]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d118      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004614:	4b43      	ldr	r3, [pc, #268]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a42      	ldr	r2, [pc, #264]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800461a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004620:	f7fc fe3a 	bl	8001298 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	e008      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004628:	f7fc fe36 	bl	8001298 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b64      	cmp	r3, #100	; 0x64
 8004634:	d901      	bls.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e06d      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b3a      	ldr	r3, [pc, #232]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004646:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d02e      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	429a      	cmp	r2, r3
 8004662:	d027      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004664:	4b2e      	ldr	r3, [pc, #184]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800466e:	4b2e      	ldr	r3, [pc, #184]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004674:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800467a:	4a29      	ldr	r2, [pc, #164]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d014      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468a:	f7fc fe05 	bl	8001298 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004690:	e00a      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fc fe01 	bl	8001298 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e036      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a8:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ee      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4917      	ldr	r1, [pc, #92]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d105      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046cc:	4b14      	ldr	r3, [pc, #80]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	490b      	ldr	r1, [pc, #44]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	4904      	ldr	r1, [pc, #16]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
 8004724:	40007000 	.word	0x40007000
 8004728:	42420440 	.word	0x42420440

0800472c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e076      	b.n	800482c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474e:	d009      	beq.n	8004764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]
 8004756:	e005      	b.n	8004764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc fb38 	bl	8000df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	ea42 0103 	orr.w	r1, r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	0c1a      	lsrs	r2, r3, #16
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f002 0204 	and.w	r2, r2, #4
 800480a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800481a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004850:	d112      	bne.n	8004878 <HAL_SPI_Receive+0x44>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10e      	bne.n	8004878 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2204      	movs	r2, #4
 800485e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f8f1 	bl	8004a56 <HAL_SPI_TransmitReceive>
 8004874:	4603      	mov	r3, r0
 8004876:	e0ea      	b.n	8004a4e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_SPI_Receive+0x52>
 8004882:	2302      	movs	r3, #2
 8004884:	e0e3      	b.n	8004a4e <HAL_SPI_Receive+0x21a>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800488e:	f7fc fd03 	bl	8001298 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d002      	beq.n	80048a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
 80048a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048a4:	e0ca      	b.n	8004a3c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_SPI_Receive+0x7e>
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048b6:	e0c1      	b.n	8004a3c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2204      	movs	r2, #4
 80048bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fe:	d10f      	bne.n	8004920 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800491e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d007      	beq.n	800493e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800493c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d162      	bne.n	8004a0c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004946:	e02e      	b.n	80049a6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d115      	bne.n	8004982 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f103 020c 	add.w	r2, r3, #12
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004980:	e011      	b.n	80049a6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004982:	f7fc fc89 	bl	8001298 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d803      	bhi.n	800499a <HAL_SPI_Receive+0x166>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d102      	bne.n	80049a0 <HAL_SPI_Receive+0x16c>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049a4:	e04a      	b.n	8004a3c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1cb      	bne.n	8004948 <HAL_SPI_Receive+0x114>
 80049b0:	e031      	b.n	8004a16 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d113      	bne.n	80049e8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	b292      	uxth	r2, r2
 80049cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	1c9a      	adds	r2, r3, #2
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049e6:	e011      	b.n	8004a0c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e8:	f7fc fc56 	bl	8001298 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d803      	bhi.n	8004a00 <HAL_SPI_Receive+0x1cc>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d102      	bne.n	8004a06 <HAL_SPI_Receive+0x1d2>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a0a:	e017      	b.n	8004a3c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1cd      	bne.n	80049b2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	6839      	ldr	r1, [r7, #0]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fa46 	bl	8004eac <SPI_EndRxTransaction>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	75fb      	strb	r3, [r7, #23]
 8004a38:	e000      	b.n	8004a3c <HAL_SPI_Receive+0x208>
  }

error :
 8004a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b08c      	sub	sp, #48	; 0x30
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a64:	2301      	movs	r3, #1
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x26>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e18a      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x33c>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a84:	f7fc fc08 	bl	8001298 <HAL_GetTick>
 8004a88:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a9a:	887b      	ldrh	r3, [r7, #2]
 8004a9c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d00f      	beq.n	8004ac6 <HAL_SPI_TransmitReceive+0x70>
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aac:	d107      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x68>
 8004ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d003      	beq.n	8004ac6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ac4:	e15b      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_SPI_TransmitReceive+0x82>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_SPI_TransmitReceive+0x82>
 8004ad2:	887b      	ldrh	r3, [r7, #2]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d103      	bne.n	8004ae0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ade:	e14e      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d003      	beq.n	8004af4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2205      	movs	r2, #5
 8004af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	887a      	ldrh	r2, [r7, #2]
 8004b04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	887a      	ldrh	r2, [r7, #2]
 8004b0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	887a      	ldrh	r2, [r7, #2]
 8004b16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d007      	beq.n	8004b48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b50:	d178      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_SPI_TransmitReceive+0x10a>
 8004b5a:	8b7b      	ldrh	r3, [r7, #26]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d166      	bne.n	8004c2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	1c9a      	adds	r2, r3, #2
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b84:	e053      	b.n	8004c2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d11b      	bne.n	8004bcc <HAL_SPI_TransmitReceive+0x176>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d016      	beq.n	8004bcc <HAL_SPI_TransmitReceive+0x176>
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d113      	bne.n	8004bcc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	881a      	ldrh	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	1c9a      	adds	r2, r3, #2
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d119      	bne.n	8004c0e <HAL_SPI_TransmitReceive+0x1b8>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d014      	beq.n	8004c0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	1c9a      	adds	r2, r3, #2
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c0e:	f7fc fb43 	bl	8001298 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d807      	bhi.n	8004c2e <HAL_SPI_TransmitReceive+0x1d8>
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d003      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c2c:	e0a7      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1a6      	bne.n	8004b86 <HAL_SPI_TransmitReceive+0x130>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1a1      	bne.n	8004b86 <HAL_SPI_TransmitReceive+0x130>
 8004c42:	e07c      	b.n	8004d3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_SPI_TransmitReceive+0x1fc>
 8004c4c:	8b7b      	ldrh	r3, [r7, #26]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d16b      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c78:	e057      	b.n	8004d2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d11c      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x26c>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d017      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x26c>
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d114      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	330c      	adds	r3, #12
 8004ca2:	7812      	ldrb	r2, [r2, #0]
 8004ca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d119      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x2ae>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d014      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d00:	2301      	movs	r3, #1
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d04:	f7fc fac8 	bl	8001298 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d803      	bhi.n	8004d1c <HAL_SPI_TransmitReceive+0x2c6>
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d102      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x2cc>
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d28:	e029      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1a2      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x224>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d19d      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f904 	bl	8004f50 <SPI_EndRxTxTransaction>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d006      	beq.n	8004d5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d5a:	e010      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	e000      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3730      	adds	r7, #48	; 0x30
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dac:	f7fc fa74 	bl	8001298 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	4413      	add	r3, r2
 8004dba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dbc:	f7fc fa6c 	bl	8001298 <HAL_GetTick>
 8004dc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dc2:	4b39      	ldr	r3, [pc, #228]	; (8004ea8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	015b      	lsls	r3, r3, #5
 8004dc8:	0d1b      	lsrs	r3, r3, #20
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	fb02 f303 	mul.w	r3, r2, r3
 8004dd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dd2:	e054      	b.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d050      	beq.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ddc:	f7fc fa5c 	bl	8001298 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d902      	bls.n	8004df2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d13d      	bne.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0a:	d111      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e14:	d004      	beq.n	8004e20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1e:	d107      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e38:	d10f      	bne.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e017      	b.n	8004e9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4013      	ands	r3, r2
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d19b      	bne.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000000c 	.word	0x2000000c

08004eac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ec0:	d111      	bne.n	8004ee6 <SPI_EndRxTransaction+0x3a>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eca:	d004      	beq.n	8004ed6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed4:	d107      	bne.n	8004ee6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eee:	d117      	bne.n	8004f20 <SPI_EndRxTransaction+0x74>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef8:	d112      	bne.n	8004f20 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2101      	movs	r1, #1
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff ff49 	bl	8004d9c <SPI_WaitFlagStateUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01a      	beq.n	8004f46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	f043 0220 	orr.w	r2, r3, #32
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e013      	b.n	8004f48 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2200      	movs	r2, #0
 8004f28:	2180      	movs	r1, #128	; 0x80
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7ff ff36 	bl	8004d9c <SPI_WaitFlagStateUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	f043 0220 	orr.w	r2, r3, #32
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e000      	b.n	8004f48 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2200      	movs	r2, #0
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff ff18 	bl	8004d9c <SPI_WaitFlagStateUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e000      	b.n	8004f84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e03f      	b.n	800501e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fb ffa4 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2224      	movs	r2, #36	; 0x24
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f905 	bl	80051e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b08a      	sub	sp, #40	; 0x28
 800502a:	af02      	add	r7, sp, #8
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	4613      	mov	r3, r2
 8005034:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b20      	cmp	r3, #32
 8005044:	d17c      	bne.n	8005140 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_UART_Transmit+0x2c>
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e075      	b.n	8005142 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_UART_Transmit+0x3e>
 8005060:	2302      	movs	r3, #2
 8005062:	e06e      	b.n	8005142 <HAL_UART_Transmit+0x11c>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2221      	movs	r2, #33	; 0x21
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800507a:	f7fc f90d 	bl	8001298 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	88fa      	ldrh	r2, [r7, #6]
 800508a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005094:	d108      	bne.n	80050a8 <HAL_UART_Transmit+0x82>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	e003      	b.n	80050b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050b8:	e02a      	b.n	8005110 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f840 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e036      	b.n	8005142 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	3302      	adds	r3, #2
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e007      	b.n	8005102 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3301      	adds	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1cf      	bne.n	80050ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2200      	movs	r2, #0
 8005122:	2140      	movs	r1, #64	; 0x40
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f810 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e006      	b.n	8005142 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e000      	b.n	8005142 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
  }
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515a:	e02c      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d028      	beq.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <UART_WaitOnFlagUntilTimeout+0x30>
 800516a:	f7fc f895 	bl	8001298 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	429a      	cmp	r2, r3
 8005178:	d21d      	bcs.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005188:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0201 	bic.w	r2, r2, #1
 8005198:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e00f      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4013      	ands	r3, r2
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	bf0c      	ite	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	2300      	movne	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d0c3      	beq.n	800515c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800521a:	f023 030c 	bic.w	r3, r3, #12
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	430b      	orrs	r3, r1
 8005226:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <UART_SetConfig+0x114>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d103      	bne.n	8005250 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005248:	f7ff f988 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	e002      	b.n	8005256 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005250:	f7ff f970 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
 8005254:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009a      	lsls	r2, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <UART_SetConfig+0x118>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	0119      	lsls	r1, r3, #4
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	009a      	lsls	r2, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	fbb2 f2f3 	udiv	r2, r2, r3
 800528c:	4b1a      	ldr	r3, [pc, #104]	; (80052f8 <UART_SetConfig+0x118>)
 800528e:	fba3 0302 	umull	r0, r3, r3, r2
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2064      	movs	r0, #100	; 0x64
 8005296:	fb00 f303 	mul.w	r3, r0, r3
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	3332      	adds	r3, #50	; 0x32
 80052a0:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <UART_SetConfig+0x118>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ac:	4419      	add	r1, r3
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009a      	lsls	r2, r3, #2
 80052b8:	441a      	add	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <UART_SetConfig+0x118>)
 80052c6:	fba3 0302 	umull	r0, r3, r3, r2
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	2064      	movs	r0, #100	; 0x64
 80052ce:	fb00 f303 	mul.w	r3, r0, r3
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	3332      	adds	r3, #50	; 0x32
 80052d8:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <UART_SetConfig+0x118>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	f003 020f 	and.w	r2, r3, #15
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	440a      	add	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40013800 	.word	0x40013800
 80052f8:	51eb851f 	.word	0x51eb851f

080052fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052fc:	b084      	sub	sp, #16
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	f107 0014 	add.w	r0, r7, #20
 800530a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	b004      	add	sp, #16
 800531a:	4770      	bx	lr

0800531c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800532c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005330:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr

08005348 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005350:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005354:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	b29b      	uxth	r3, r3
 8005362:	43db      	mvns	r3, r3
 8005364:	b29b      	uxth	r3, r3
 8005366:	4013      	ands	r3, r2
 8005368:	b29a      	uxth	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr

08005394 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005394:	b084      	sub	sp, #16
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	f107 0014 	add.w	r0, r7, #20
 80053a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	b004      	add	sp, #16
 80053d2:	4770      	bx	lr

080053d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b09b      	sub	sp, #108	; 0x6c
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	78db      	ldrb	r3, [r3, #3]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d81f      	bhi.n	8005446 <USB_ActivateEndpoint+0x72>
 8005406:	a201      	add	r2, pc, #4	; (adr r2, 800540c <USB_ActivateEndpoint+0x38>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	0800541d 	.word	0x0800541d
 8005410:	08005439 	.word	0x08005439
 8005414:	0800544f 	.word	0x0800544f
 8005418:	0800542b 	.word	0x0800542b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800541c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005424:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005428:	e012      	b.n	8005450 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800542a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800542e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005432:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005436:	e00b      	b.n	8005450 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005438:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800543c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005440:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005444:	e004      	b.n	8005450 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800544c:	e000      	b.n	8005450 <USB_ActivateEndpoint+0x7c>
      break;
 800544e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	441a      	add	r2, r3
 800545a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005488:	b29a      	uxth	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	4313      	orrs	r3, r2
 8005492:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	441a      	add	r2, r3
 80054a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80054a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	7b1b      	ldrb	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f040 8149 	bne.w	8005754 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 8084 	beq.w	80055d4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	4413      	add	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	011a      	lsls	r2, r3, #4
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	88db      	ldrh	r3, [r3, #6]
 80054f4:	085b      	lsrs	r3, r3, #1
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	81fb      	strh	r3, [r7, #14]
 800550e:	89fb      	ldrh	r3, [r7, #14]
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <USB_ActivateEndpoint+0x17c>
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	81bb      	strh	r3, [r7, #12]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	89bb      	ldrh	r3, [r7, #12]
 800553c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005548:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	78db      	ldrb	r3, [r3, #3]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d020      	beq.n	800559a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800556e:	813b      	strh	r3, [r7, #8]
 8005570:	893b      	ldrh	r3, [r7, #8]
 8005572:	f083 0320 	eor.w	r3, r3, #32
 8005576:	813b      	strh	r3, [r7, #8]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	893b      	ldrh	r3, [r7, #8]
 8005584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005594:	b29b      	uxth	r3, r3
 8005596:	8013      	strh	r3, [r2, #0]
 8005598:	e27f      	b.n	8005a9a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b0:	817b      	strh	r3, [r7, #10]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	441a      	add	r2, r3
 80055bc:	897b      	ldrh	r3, [r7, #10]
 80055be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	8013      	strh	r3, [r2, #0]
 80055d2:	e262      	b.n	8005a9a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	4413      	add	r3, r2
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	011a      	lsls	r2, r3, #4
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	88db      	ldrh	r3, [r3, #6]
 80055fc:	085b      	lsrs	r3, r3, #1
 80055fe:	b29b      	uxth	r3, r3
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005612:	b29b      	uxth	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	4413      	add	r3, r2
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	011a      	lsls	r2, r3, #4
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	4413      	add	r3, r2
 8005626:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800562a:	623b      	str	r3, [r7, #32]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d112      	bne.n	800565a <USB_ActivateEndpoint+0x286>
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800563e:	b29a      	uxth	r2, r3
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005652:	b29a      	uxth	r2, r3
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	e02f      	b.n	80056ba <USB_ActivateEndpoint+0x2e6>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b3e      	cmp	r3, #62	; 0x3e
 8005660:	d813      	bhi.n	800568a <USB_ActivateEndpoint+0x2b6>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	663b      	str	r3, [r7, #96]	; 0x60
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <USB_ActivateEndpoint+0x2a8>
 8005676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005678:	3301      	adds	r3, #1
 800567a:	663b      	str	r3, [r7, #96]	; 0x60
 800567c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800567e:	b29b      	uxth	r3, r3
 8005680:	029b      	lsls	r3, r3, #10
 8005682:	b29a      	uxth	r2, r3
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	e017      	b.n	80056ba <USB_ActivateEndpoint+0x2e6>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	663b      	str	r3, [r7, #96]	; 0x60
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <USB_ActivateEndpoint+0x2d0>
 800569e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a0:	3b01      	subs	r3, #1
 80056a2:	663b      	str	r3, [r7, #96]	; 0x60
 80056a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	029b      	lsls	r3, r3, #10
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	83fb      	strh	r3, [r7, #30]
 80056c8:	8bfb      	ldrh	r3, [r7, #30]
 80056ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01b      	beq.n	800570a <USB_ActivateEndpoint+0x336>
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e8:	83bb      	strh	r3, [r7, #28]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	441a      	add	r2, r3
 80056f4:	8bbb      	ldrh	r3, [r7, #28]
 80056f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005706:	b29b      	uxth	r3, r3
 8005708:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800571c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005720:	837b      	strh	r3, [r7, #26]
 8005722:	8b7b      	ldrh	r3, [r7, #26]
 8005724:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005728:	837b      	strh	r3, [r7, #26]
 800572a:	8b7b      	ldrh	r3, [r7, #26]
 800572c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005730:	837b      	strh	r3, [r7, #26]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	441a      	add	r2, r3
 800573c:	8b7b      	ldrh	r3, [r7, #26]
 800573e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574e:	b29b      	uxth	r3, r3
 8005750:	8013      	strh	r3, [r2, #0]
 8005752:	e1a2      	b.n	8005a9a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	441a      	add	r2, r3
 8005778:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005784:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	65bb      	str	r3, [r7, #88]	; 0x58
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057a0:	4413      	add	r3, r2
 80057a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057b2:	657b      	str	r3, [r7, #84]	; 0x54
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	891b      	ldrh	r3, [r3, #8]
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057c2:	801a      	strh	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	653b      	str	r3, [r7, #80]	; 0x50
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d4:	4413      	add	r3, r2
 80057d6:	653b      	str	r3, [r7, #80]	; 0x50
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	011a      	lsls	r2, r3, #4
 80057de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80057e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	895b      	ldrh	r3, [r3, #10]
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	785b      	ldrb	r3, [r3, #1]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f040 8091 	bne.w	8005924 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005810:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01b      	beq.n	8005852 <USB_ActivateEndpoint+0x47e>
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005830:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	441a      	add	r2, r3
 800583c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800583e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800584a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584e:	b29b      	uxth	r3, r3
 8005850:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005860:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d01b      	beq.n	80058a2 <USB_ActivateEndpoint+0x4ce>
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005880:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	441a      	add	r2, r3
 800588c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800588e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800589e:	b29b      	uxth	r3, r3
 80058a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005900:	867b      	strh	r3, [r7, #50]	; 0x32
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	441a      	add	r2, r3
 800590c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800590e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591e:	b29b      	uxth	r3, r3
 8005920:	8013      	strh	r3, [r2, #0]
 8005922:	e0ba      	b.n	8005a9a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005934:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01d      	beq.n	800597c <USB_ActivateEndpoint+0x5a8>
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	441a      	add	r2, r3
 8005964:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005978:	b29b      	uxth	r3, r3
 800597a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800598c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01d      	beq.n	80059d4 <USB_ActivateEndpoint+0x600>
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	441a      	add	r2, r3
 80059bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	78db      	ldrb	r3, [r3, #3]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d024      	beq.n	8005a26 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80059f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059fa:	f083 0320 	eor.w	r3, r3, #32
 80059fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	441a      	add	r2, r3
 8005a0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	8013      	strh	r3, [r2, #0]
 8005a24:	e01d      	b.n	8005a62 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	441a      	add	r2, r3
 8005a4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a78:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	441a      	add	r2, r3
 8005a84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005a9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	376c      	adds	r7, #108	; 0x6c
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr

08005aa8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b08d      	sub	sp, #52	; 0x34
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	7b1b      	ldrb	r3, [r3, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 808e 	bne.w	8005bd8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d044      	beq.n	8005b4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	81bb      	strh	r3, [r7, #12]
 8005ad2:	89bb      	ldrh	r3, [r7, #12]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01b      	beq.n	8005b14 <USB_DeactivateEndpoint+0x6c>
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	817b      	strh	r3, [r7, #10]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	897b      	ldrh	r3, [r7, #10]
 8005b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2a:	813b      	strh	r3, [r7, #8]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	893b      	ldrh	r3, [r7, #8]
 8005b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	8013      	strh	r3, [r2, #0]
 8005b4c:	e192      	b.n	8005e74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	827b      	strh	r3, [r7, #18]
 8005b5c:	8a7b      	ldrh	r3, [r7, #18]
 8005b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01b      	beq.n	8005b9e <USB_DeactivateEndpoint+0xf6>
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7c:	823b      	strh	r3, [r7, #16]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	441a      	add	r2, r3
 8005b88:	8a3b      	ldrh	r3, [r7, #16]
 8005b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb4:	81fb      	strh	r3, [r7, #14]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	441a      	add	r2, r3
 8005bc0:	89fb      	ldrh	r3, [r7, #14]
 8005bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	8013      	strh	r3, [r2, #0]
 8005bd6:	e14d      	b.n	8005e74 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f040 80a5 	bne.w	8005d2c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	843b      	strh	r3, [r7, #32]
 8005bf0:	8c3b      	ldrh	r3, [r7, #32]
 8005bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01b      	beq.n	8005c32 <USB_DeactivateEndpoint+0x18a>
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c10:	83fb      	strh	r3, [r7, #30]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	441a      	add	r2, r3
 8005c1c:	8bfb      	ldrh	r3, [r7, #30]
 8005c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	83bb      	strh	r3, [r7, #28]
 8005c40:	8bbb      	ldrh	r3, [r7, #28]
 8005c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01b      	beq.n	8005c82 <USB_DeactivateEndpoint+0x1da>
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c60:	837b      	strh	r3, [r7, #26]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	441a      	add	r2, r3
 8005c6c:	8b7b      	ldrh	r3, [r7, #26]
 8005c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c98:	833b      	strh	r3, [r7, #24]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	8b3b      	ldrh	r3, [r7, #24]
 8005ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd0:	82fb      	strh	r3, [r7, #22]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	441a      	add	r2, r3
 8005cdc:	8afb      	ldrh	r3, [r7, #22]
 8005cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d08:	82bb      	strh	r3, [r7, #20]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	8abb      	ldrh	r3, [r7, #20]
 8005d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	8013      	strh	r3, [r2, #0]
 8005d2a:	e0a3      	b.n	8005e74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <USB_DeactivateEndpoint+0x2d4>
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	441a      	add	r2, r3
 8005d66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005d8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01b      	beq.n	8005dcc <USB_DeactivateEndpoint+0x324>
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	853b      	strh	r3, [r7, #40]	; 0x28
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	441a      	add	r2, r3
 8005db6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	441a      	add	r2, r3
 8005e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3734      	adds	r7, #52	; 0x34
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b0cc      	sub	sp, #304	; 0x130
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e8e:	6018      	str	r0, [r3, #0]
 8005e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e98:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	f041 817d 	bne.w	80071a6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699a      	ldr	r2, [r3, #24]
 8005eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d908      	bls.n	8005eda <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005ed8:	e007      	b.n	8005eea <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	7b1b      	ldrb	r3, [r3, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d152      	bne.n	8005fa0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6959      	ldr	r1, [r3, #20]
 8005f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	88da      	ldrh	r2, [r3, #6]
 8005f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f1c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f20:	6800      	ldr	r0, [r0, #0]
 8005f22:	f001 ff23 	bl	8007d6c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005f2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f32:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f50:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005f54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f58:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	440a      	add	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	011a      	lsls	r2, r3, #4
 8005f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	f001 b8b5 	b.w	800710a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	78db      	ldrb	r3, [r3, #3]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	f040 84c6 	bne.w	800693e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a1a      	ldr	r2, [r3, #32]
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	f240 8443 	bls.w	8006856 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	441a      	add	r2, r3
 8006014:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006020:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006028:	b29b      	uxth	r3, r3
 800602a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800602c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6a1a      	ldr	r2, [r3, #32]
 8006038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603c:	1ad2      	subs	r2, r2, r3
 800603e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800604a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 823e 	beq.w	80064ee <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006076:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800607a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800607e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 809a 	bne.w	80061cc <USB_EPStartXfer+0x34c>
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	4619      	mov	r1, r3
 80060be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060ca:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	440a      	add	r2, r1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	011a      	lsls	r2, r3, #4
 80060e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4413      	add	r3, r2
 80060ee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d122      	bne.n	800614a <USB_EPStartXfer+0x2ca>
 8006104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006108:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006116:	b29a      	uxth	r2, r3
 8006118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006128:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613a:	b29a      	uxth	r2, r3
 800613c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006140:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	e079      	b.n	800623e <USB_EPStartXfer+0x3be>
 800614a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614e:	2b3e      	cmp	r3, #62	; 0x3e
 8006150:	d81b      	bhi.n	800618a <USB_EPStartXfer+0x30a>
 8006152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800615c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <USB_EPStartXfer+0x2f2>
 8006168:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800616c:	3301      	adds	r3, #1
 800616e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006176:	b29b      	uxth	r3, r3
 8006178:	029b      	lsls	r3, r3, #10
 800617a:	b29a      	uxth	r2, r3
 800617c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006180:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	e059      	b.n	800623e <USB_EPStartXfer+0x3be>
 800618a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <USB_EPStartXfer+0x32a>
 80061a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061a4:	3b01      	subs	r3, #1
 80061a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	029b      	lsls	r3, r3, #10
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	801a      	strh	r2, [r3, #0]
 80061ca:	e038      	b.n	800623e <USB_EPStartXfer+0x3be>
 80061cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d130      	bne.n	800623e <USB_EPStartXfer+0x3be>
 80061dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	4619      	mov	r1, r3
 80061ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80061f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061fa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80061fe:	6812      	ldr	r2, [r2, #0]
 8006200:	440a      	add	r2, r1
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	011a      	lsls	r2, r3, #4
 8006212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006216:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4413      	add	r3, r2
 800621e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006230:	b29a      	uxth	r2, r3
 8006232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800623e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	895b      	ldrh	r3, [r3, #10]
 800624a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800624e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6959      	ldr	r1, [r3, #20]
 800625a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625e:	b29b      	uxth	r3, r3
 8006260:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006264:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006268:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800626c:	6800      	ldr	r0, [r0, #0]
 800626e:	f001 fd7d 	bl	8007d6c <USB_WritePMA>
            ep->xfer_buff += len;
 8006272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695a      	ldr	r2, [r3, #20]
 800627e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006282:	441a      	add	r2, r3
 8006284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d90f      	bls.n	80062cc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80062ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062bc:	1ad2      	subs	r2, r2, r3
 80062be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	621a      	str	r2, [r3, #32]
 80062ca:	e00e      	b.n	80062ea <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80062cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80062dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f040 809a 	bne.w	8006430 <USB_EPStartXfer+0x5b0>
 80062fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006300:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006304:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006308:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006314:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800631e:	b29b      	uxth	r3, r3
 8006320:	4619      	mov	r1, r3
 8006322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006326:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800632a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800632e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	440a      	add	r2, r1
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	011a      	lsls	r2, r3, #4
 8006346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4413      	add	r3, r2
 8006352:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d122      	bne.n	80063ae <USB_EPStartXfer+0x52e>
 8006368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800637a:	b29a      	uxth	r2, r3
 800637c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006380:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	801a      	strh	r2, [r3, #0]
 80063ac:	e083      	b.n	80064b6 <USB_EPStartXfer+0x636>
 80063ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b2:	2b3e      	cmp	r3, #62	; 0x3e
 80063b4:	d81b      	bhi.n	80063ee <USB_EPStartXfer+0x56e>
 80063b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80063c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d004      	beq.n	80063d6 <USB_EPStartXfer+0x556>
 80063cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80063d0:	3301      	adds	r3, #1
 80063d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80063d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80063da:	b29b      	uxth	r3, r3
 80063dc:	029b      	lsls	r3, r3, #10
 80063de:	b29a      	uxth	r2, r3
 80063e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e063      	b.n	80064b6 <USB_EPStartXfer+0x636>
 80063ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80063f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <USB_EPStartXfer+0x58e>
 8006404:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006408:	3b01      	subs	r3, #1
 800640a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800640e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006412:	b29b      	uxth	r3, r3
 8006414:	029b      	lsls	r3, r3, #10
 8006416:	b29b      	uxth	r3, r3
 8006418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006420:	b29a      	uxth	r2, r3
 8006422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006426:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	e042      	b.n	80064b6 <USB_EPStartXfer+0x636>
 8006430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d13a      	bne.n	80064b6 <USB_EPStartXfer+0x636>
 8006440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006444:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006448:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800644c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006450:	6812      	ldr	r2, [r2, #0]
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006462:	b29b      	uxth	r3, r3
 8006464:	4619      	mov	r1, r3
 8006466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800646e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006472:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	440a      	add	r2, r1
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	011a      	lsls	r2, r3, #4
 800648a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4413      	add	r3, r2
 8006496:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800649a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	891b      	ldrh	r3, [r3, #8]
 80064c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6959      	ldr	r1, [r3, #20]
 80064d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064e4:	6800      	ldr	r0, [r0, #0]
 80064e6:	f001 fc41 	bl	8007d6c <USB_WritePMA>
 80064ea:	f000 be0e 	b.w	800710a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d16d      	bne.n	80065da <USB_EPStartXfer+0x75a>
 80064fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	64bb      	str	r3, [r7, #72]	; 0x48
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006518:	b29b      	uxth	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800651e:	4413      	add	r3, r2
 8006520:	64bb      	str	r3, [r7, #72]	; 0x48
 8006522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	011a      	lsls	r2, r3, #4
 8006530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006532:	4413      	add	r3, r2
 8006534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006538:	647b      	str	r3, [r7, #68]	; 0x44
 800653a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653e:	2b00      	cmp	r3, #0
 8006540:	d112      	bne.n	8006568 <USB_EPStartXfer+0x6e8>
 8006542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800654c:	b29a      	uxth	r2, r3
 800654e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29b      	uxth	r3, r3
 8006558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006560:	b29a      	uxth	r2, r3
 8006562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	e063      	b.n	8006630 <USB_EPStartXfer+0x7b0>
 8006568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656c:	2b3e      	cmp	r3, #62	; 0x3e
 800656e:	d817      	bhi.n	80065a0 <USB_EPStartXfer+0x720>
 8006570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800657a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <USB_EPStartXfer+0x710>
 8006586:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800658a:	3301      	adds	r3, #1
 800658c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006590:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006594:	b29b      	uxth	r3, r3
 8006596:	029b      	lsls	r3, r3, #10
 8006598:	b29a      	uxth	r2, r3
 800659a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	e047      	b.n	8006630 <USB_EPStartXfer+0x7b0>
 80065a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80065aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ae:	f003 031f 	and.w	r3, r3, #31
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d104      	bne.n	80065c0 <USB_EPStartXfer+0x740>
 80065b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80065ba:	3b01      	subs	r3, #1
 80065bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80065c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	029b      	lsls	r3, r3, #10
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	e02a      	b.n	8006630 <USB_EPStartXfer+0x7b0>
 80065da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d122      	bne.n	8006630 <USB_EPStartXfer+0x7b0>
 80065ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	653b      	str	r3, [r7, #80]	; 0x50
 80065f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006604:	b29b      	uxth	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800660a:	4413      	add	r3, r2
 800660c:	653b      	str	r3, [r7, #80]	; 0x50
 800660e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	011a      	lsls	r2, r3, #4
 800661c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800661e:	4413      	add	r3, r2
 8006620:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662a:	b29a      	uxth	r2, r3
 800662c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	891b      	ldrh	r3, [r3, #8]
 800663c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6959      	ldr	r1, [r3, #20]
 800664c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006650:	b29b      	uxth	r3, r3
 8006652:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006656:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800665a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800665e:	6800      	ldr	r0, [r0, #0]
 8006660:	f001 fb84 	bl	8007d6c <USB_WritePMA>
            ep->xfer_buff += len;
 8006664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006674:	441a      	add	r2, r3
 8006676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6a1a      	ldr	r2, [r3, #32]
 800668e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	429a      	cmp	r2, r3
 800669c:	d90f      	bls.n	80066be <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800669e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	621a      	str	r2, [r3, #32]
 80066bc:	e00e      	b.n	80066dc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80066ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2200      	movs	r2, #0
 80066da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	643b      	str	r3, [r7, #64]	; 0x40
 80066e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	785b      	ldrb	r3, [r3, #1]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d16d      	bne.n	80067d4 <USB_EPStartXfer+0x954>
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	63bb      	str	r3, [r7, #56]	; 0x38
 8006704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006712:	b29b      	uxth	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	4413      	add	r3, r2
 800671a:	63bb      	str	r3, [r7, #56]	; 0x38
 800671c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	011a      	lsls	r2, r3, #4
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	4413      	add	r3, r2
 800672e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006732:	637b      	str	r3, [r7, #52]	; 0x34
 8006734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d112      	bne.n	8006762 <USB_EPStartXfer+0x8e2>
 800673c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006746:	b29a      	uxth	r2, r3
 8006748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674a:	801a      	strh	r2, [r3, #0]
 800674c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675a:	b29a      	uxth	r2, r3
 800675c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675e:	801a      	strh	r2, [r3, #0]
 8006760:	e05d      	b.n	800681e <USB_EPStartXfer+0x99e>
 8006762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006766:	2b3e      	cmp	r3, #62	; 0x3e
 8006768:	d817      	bhi.n	800679a <USB_EPStartXfer+0x91a>
 800676a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <USB_EPStartXfer+0x90a>
 8006780:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006784:	3301      	adds	r3, #1
 8006786:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800678a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800678e:	b29b      	uxth	r3, r3
 8006790:	029b      	lsls	r3, r3, #10
 8006792:	b29a      	uxth	r2, r3
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	e041      	b.n	800681e <USB_EPStartXfer+0x99e>
 800679a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d104      	bne.n	80067ba <USB_EPStartXfer+0x93a>
 80067b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067b4:	3b01      	subs	r3, #1
 80067b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067be:	b29b      	uxth	r3, r3
 80067c0:	029b      	lsls	r3, r3, #10
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	e024      	b.n	800681e <USB_EPStartXfer+0x99e>
 80067d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d11c      	bne.n	800681e <USB_EPStartXfer+0x99e>
 80067e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f8:	4413      	add	r3, r2
 80067fa:	643b      	str	r3, [r7, #64]	; 0x40
 80067fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	011a      	lsls	r2, r3, #4
 800680a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680c:	4413      	add	r3, r2
 800680e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006818:	b29a      	uxth	r2, r3
 800681a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800681e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	895b      	ldrh	r3, [r3, #10]
 800682a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800682e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6959      	ldr	r1, [r3, #20]
 800683a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683e:	b29b      	uxth	r3, r3
 8006840:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006844:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006848:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800684c:	6800      	ldr	r0, [r0, #0]
 800684e:	f001 fa8d 	bl	8007d6c <USB_WritePMA>
 8006852:	f000 bc5a 	b.w	800710a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80068ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068be:	b29b      	uxth	r3, r3
 80068c0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068dc:	b29b      	uxth	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e2:	4413      	add	r3, r2
 80068e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	011a      	lsls	r2, r3, #4
 80068f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f6:	4413      	add	r3, r2
 80068f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80068fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006902:	b29a      	uxth	r2, r3
 8006904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006906:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	891b      	ldrh	r3, [r3, #8]
 8006914:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6959      	ldr	r1, [r3, #20]
 8006924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006928:	b29b      	uxth	r3, r3
 800692a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800692e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006932:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006936:	6800      	ldr	r0, [r0, #0]
 8006938:	f001 fa18 	bl	8007d6c <USB_WritePMA>
 800693c:	e3e5      	b.n	800710a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006996:	b29b      	uxth	r3, r3
 8006998:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800699a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6a1a      	ldr	r2, [r3, #32]
 80069a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 81bc 	beq.w	8006d58 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d16d      	bne.n	8006ada <USB_EPStartXfer+0xc5a>
 80069fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a1e:	4413      	add	r3, r2
 8006a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	011a      	lsls	r2, r3, #4
 8006a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a32:	4413      	add	r3, r2
 8006a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a38:	677b      	str	r3, [r7, #116]	; 0x74
 8006a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d112      	bne.n	8006a68 <USB_EPStartXfer+0xbe8>
 8006a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a64:	801a      	strh	r2, [r3, #0]
 8006a66:	e060      	b.n	8006b2a <USB_EPStartXfer+0xcaa>
 8006a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a6e:	d817      	bhi.n	8006aa0 <USB_EPStartXfer+0xc20>
 8006a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d004      	beq.n	8006a90 <USB_EPStartXfer+0xc10>
 8006a86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	029b      	lsls	r3, r3, #10
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	e044      	b.n	8006b2a <USB_EPStartXfer+0xcaa>
 8006aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aae:	f003 031f 	and.w	r3, r3, #31
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <USB_EPStartXfer+0xc40>
 8006ab6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006aba:	3b01      	subs	r3, #1
 8006abc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ac0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	029b      	lsls	r3, r3, #10
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e027      	b.n	8006b2a <USB_EPStartXfer+0xcaa>
 8006ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d11f      	bne.n	8006b2a <USB_EPStartXfer+0xcaa>
 8006aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b00:	4413      	add	r3, r2
 8006b02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	011a      	lsls	r2, r3, #4
 8006b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b18:	4413      	add	r3, r2
 8006b1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	895b      	ldrh	r3, [r3, #10]
 8006b36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6959      	ldr	r1, [r3, #20]
 8006b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b50:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b54:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b58:	6800      	ldr	r0, [r0, #0]
 8006b5a:	f001 f907 	bl	8007d6c <USB_WritePMA>
          ep->xfer_buff += len;
 8006b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6e:	441a      	add	r2, r3
 8006b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d90f      	bls.n	8006bb8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6a1a      	ldr	r2, [r3, #32]
 8006ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba8:	1ad2      	subs	r2, r2, r3
 8006baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	621a      	str	r2, [r3, #32]
 8006bb6:	e00e      	b.n	8006bd6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 8295 	beq.w	800710a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d16d      	bne.n	8006ccc <USB_EPStartXfer+0xe4c>
 8006bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c10:	4413      	add	r3, r2
 8006c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	011a      	lsls	r2, r3, #4
 8006c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c24:	4413      	add	r3, r2
 8006c26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c2a:	667b      	str	r3, [r7, #100]	; 0x64
 8006c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d112      	bne.n	8006c5a <USB_EPStartXfer+0xdda>
 8006c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c42:	801a      	strh	r2, [r3, #0]
 8006c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	e063      	b.n	8006d22 <USB_EPStartXfer+0xea2>
 8006c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c60:	d817      	bhi.n	8006c92 <USB_EPStartXfer+0xe12>
 8006c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d004      	beq.n	8006c82 <USB_EPStartXfer+0xe02>
 8006c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	029b      	lsls	r3, r3, #10
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	e047      	b.n	8006d22 <USB_EPStartXfer+0xea2>
 8006c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d104      	bne.n	8006cb2 <USB_EPStartXfer+0xe32>
 8006ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cac:	3b01      	subs	r3, #1
 8006cae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	029b      	lsls	r3, r3, #10
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cc8:	801a      	strh	r2, [r3, #0]
 8006cca:	e02a      	b.n	8006d22 <USB_EPStartXfer+0xea2>
 8006ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d122      	bne.n	8006d22 <USB_EPStartXfer+0xea2>
 8006cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cfc:	4413      	add	r3, r2
 8006cfe:	673b      	str	r3, [r7, #112]	; 0x70
 8006d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	011a      	lsls	r2, r3, #4
 8006d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d10:	4413      	add	r3, r2
 8006d12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	891b      	ldrh	r3, [r3, #8]
 8006d2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6959      	ldr	r1, [r3, #20]
 8006d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d48:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d4c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d50:	6800      	ldr	r0, [r0, #0]
 8006d52:	f001 f80b 	bl	8007d6c <USB_WritePMA>
 8006d56:	e1d8      	b.n	800710a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d178      	bne.n	8006e5a <USB_EPStartXfer+0xfda>
 8006d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	011a      	lsls	r2, r3, #4
 8006da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006da4:	4413      	add	r3, r2
 8006da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006daa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d116      	bne.n	8006de4 <USB_EPStartXfer+0xf64>
 8006db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006de0:	801a      	strh	r2, [r3, #0]
 8006de2:	e06b      	b.n	8006ebc <USB_EPStartXfer+0x103c>
 8006de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de8:	2b3e      	cmp	r3, #62	; 0x3e
 8006dea:	d818      	bhi.n	8006e1e <USB_EPStartXfer+0xf9e>
 8006dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <USB_EPStartXfer+0xf8c>
 8006e02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e06:	3301      	adds	r3, #1
 8006e08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	029b      	lsls	r3, r3, #10
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e1a:	801a      	strh	r2, [r3, #0]
 8006e1c:	e04e      	b.n	8006ebc <USB_EPStartXfer+0x103c>
 8006e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <USB_EPStartXfer+0xfbe>
 8006e34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e56:	801a      	strh	r2, [r3, #0]
 8006e58:	e030      	b.n	8006ebc <USB_EPStartXfer+0x103c>
 8006e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	785b      	ldrb	r3, [r3, #1]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d128      	bne.n	8006ebc <USB_EPStartXfer+0x103c>
 8006e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e8e:	4413      	add	r3, r2
 8006e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	011a      	lsls	r2, r3, #4
 8006ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	891b      	ldrh	r3, [r3, #8]
 8006ec8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6959      	ldr	r1, [r3, #20]
 8006ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ee2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ee6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006eea:	6800      	ldr	r0, [r0, #0]
 8006eec:	f000 ff3e 	bl	8007d6c <USB_WritePMA>
          ep->xfer_buff += len;
 8006ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	695a      	ldr	r2, [r3, #20]
 8006efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f00:	441a      	add	r2, r3
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6a1a      	ldr	r2, [r3, #32]
 8006f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d90f      	bls.n	8006f4a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	621a      	str	r2, [r3, #32]
 8006f48:	e00e      	b.n	8006f68 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2200      	movs	r2, #0
 8006f66:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80cc 	beq.w	800710a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d178      	bne.n	8007082 <USB_EPStartXfer+0x1202>
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	011a      	lsls	r2, r3, #4
 8006fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fcc:	4413      	add	r3, r2
 8006fce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d116      	bne.n	800700c <USB_EPStartXfer+0x118c>
 8006fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	e064      	b.n	80070d6 <USB_EPStartXfer+0x1256>
 800700c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007010:	2b3e      	cmp	r3, #62	; 0x3e
 8007012:	d818      	bhi.n	8007046 <USB_EPStartXfer+0x11c6>
 8007014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800701e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <USB_EPStartXfer+0x11b4>
 800702a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800702e:	3301      	adds	r3, #1
 8007030:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007038:	b29b      	uxth	r3, r3
 800703a:	029b      	lsls	r3, r3, #10
 800703c:	b29a      	uxth	r2, r3
 800703e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007042:	801a      	strh	r2, [r3, #0]
 8007044:	e047      	b.n	80070d6 <USB_EPStartXfer+0x1256>
 8007046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <USB_EPStartXfer+0x11e6>
 800705c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007060:	3b01      	subs	r3, #1
 8007062:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800706a:	b29b      	uxth	r3, r3
 800706c:	029b      	lsls	r3, r3, #10
 800706e:	b29b      	uxth	r3, r3
 8007070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007078:	b29a      	uxth	r2, r3
 800707a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800707e:	801a      	strh	r2, [r3, #0]
 8007080:	e029      	b.n	80070d6 <USB_EPStartXfer+0x1256>
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d121      	bne.n	80070d6 <USB_EPStartXfer+0x1256>
 8007092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070a8:	4413      	add	r3, r2
 80070aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	011a      	lsls	r2, r3, #4
 80070bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070c0:	4413      	add	r3, r2
 80070c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80070ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	895b      	ldrh	r3, [r3, #10]
 80070e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6959      	ldr	r1, [r3, #20]
 80070f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007100:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007104:	6800      	ldr	r0, [r0, #0]
 8007106:	f000 fe31 	bl	8007d6c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800710a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800712c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007138:	8013      	strh	r3, [r2, #0]
 800713a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007142:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007146:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800714a:	8812      	ldrh	r2, [r2, #0]
 800714c:	f082 0210 	eor.w	r2, r2, #16
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007156:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800715a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800715e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007162:	8812      	ldrh	r2, [r2, #0]
 8007164:	f082 0220 	eor.w	r2, r2, #32
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	441a      	add	r2, r3
 8007184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007188:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800719a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719e:	b29b      	uxth	r3, r3
 80071a0:	8013      	strh	r3, [r2, #0]
 80071a2:	f000 bc9f 	b.w	8007ae4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80071a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	7b1b      	ldrb	r3, [r3, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f040 80ae 	bne.w	8007314 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80071b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	699a      	ldr	r2, [r3, #24]
 80071c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d917      	bls.n	8007204 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80071d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80071e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f4:	1ad2      	subs	r2, r2, r3
 80071f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	619a      	str	r2, [r3, #24]
 8007202:	e00e      	b.n	8007222 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2200      	movs	r2, #0
 8007220:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007246:	4413      	add	r3, r2
 8007248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800724c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	011a      	lsls	r2, r3, #4
 800725a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800725e:	4413      	add	r3, r2
 8007260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d116      	bne.n	800729e <USB_EPStartXfer+0x141e>
 8007270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800727c:	b29a      	uxth	r2, r3
 800727e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007282:	801a      	strh	r2, [r3, #0]
 8007284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	e3e8      	b.n	8007a70 <USB_EPStartXfer+0x1bf0>
 800729e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a2:	2b3e      	cmp	r3, #62	; 0x3e
 80072a4:	d818      	bhi.n	80072d8 <USB_EPStartXfer+0x1458>
 80072a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072aa:	085b      	lsrs	r3, r3, #1
 80072ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80072b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <USB_EPStartXfer+0x1446>
 80072bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072c0:	3301      	adds	r3, #1
 80072c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80072c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	029b      	lsls	r3, r3, #10
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072d4:	801a      	strh	r2, [r3, #0]
 80072d6:	e3cb      	b.n	8007a70 <USB_EPStartXfer+0x1bf0>
 80072d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80072e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d104      	bne.n	80072f8 <USB_EPStartXfer+0x1478>
 80072ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072f2:	3b01      	subs	r3, #1
 80072f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80072f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	029b      	lsls	r3, r3, #10
 8007300:	b29b      	uxth	r3, r3
 8007302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e3ad      	b.n	8007a70 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007318:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	78db      	ldrb	r3, [r3, #3]
 8007320:	2b02      	cmp	r3, #2
 8007322:	f040 8200 	bne.w	8007726 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f040 8091 	bne.w	800745a <USB_EPStartXfer+0x15da>
 8007338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007354:	b29b      	uxth	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800735c:	4413      	add	r3, r2
 800735e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	011a      	lsls	r2, r3, #4
 8007370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007374:	4413      	add	r3, r2
 8007376:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800737a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800737e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d116      	bne.n	80073bc <USB_EPStartXfer+0x153c>
 800738e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800739a:	b29a      	uxth	r2, r3
 800739c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073a0:	801a      	strh	r2, [r3, #0]
 80073a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	e083      	b.n	80074c4 <USB_EPStartXfer+0x1644>
 80073bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b3e      	cmp	r3, #62	; 0x3e
 80073ca:	d820      	bhi.n	800740e <USB_EPStartXfer+0x158e>
 80073cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	085b      	lsrs	r3, r3, #1
 80073da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80073de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d004      	beq.n	80073fc <USB_EPStartXfer+0x157c>
 80073f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f6:	3301      	adds	r3, #1
 80073f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007400:	b29b      	uxth	r3, r3
 8007402:	029b      	lsls	r3, r3, #10
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	e05a      	b.n	80074c4 <USB_EPStartXfer+0x1644>
 800740e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	095b      	lsrs	r3, r3, #5
 800741c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f003 031f 	and.w	r3, r3, #31
 8007430:	2b00      	cmp	r3, #0
 8007432:	d104      	bne.n	800743e <USB_EPStartXfer+0x15be>
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007438:	3b01      	subs	r3, #1
 800743a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007442:	b29b      	uxth	r3, r3
 8007444:	029b      	lsls	r3, r3, #10
 8007446:	b29b      	uxth	r3, r3
 8007448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007450:	b29a      	uxth	r2, r3
 8007452:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	e034      	b.n	80074c4 <USB_EPStartXfer+0x1644>
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d12c      	bne.n	80074c4 <USB_EPStartXfer+0x1644>
 800746a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007486:	b29b      	uxth	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800748e:	4413      	add	r3, r2
 8007490:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	011a      	lsls	r2, r3, #4
 80074a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074a6:	4413      	add	r3, r2
 80074a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	b29a      	uxth	r2, r3
 80074be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80074c2:	801a      	strh	r2, [r3, #0]
 80074c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f040 8091 	bne.w	8007606 <USB_EPStartXfer+0x1786>
 80074e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007500:	b29b      	uxth	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007508:	4413      	add	r3, r2
 800750a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800750e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	011a      	lsls	r2, r3, #4
 800751c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007520:	4413      	add	r3, r2
 8007522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800752a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d116      	bne.n	8007568 <USB_EPStartXfer+0x16e8>
 800753a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007546:	b29a      	uxth	r2, r3
 8007548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755e:	b29a      	uxth	r2, r3
 8007560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007564:	801a      	strh	r2, [r3, #0]
 8007566:	e07c      	b.n	8007662 <USB_EPStartXfer+0x17e2>
 8007568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	2b3e      	cmp	r3, #62	; 0x3e
 8007576:	d820      	bhi.n	80075ba <USB_EPStartXfer+0x173a>
 8007578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800758a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <USB_EPStartXfer+0x1728>
 800759e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075a2:	3301      	adds	r3, #1
 80075a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	029b      	lsls	r3, r3, #10
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	e053      	b.n	8007662 <USB_EPStartXfer+0x17e2>
 80075ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f003 031f 	and.w	r3, r3, #31
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <USB_EPStartXfer+0x176a>
 80075e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075e4:	3b01      	subs	r3, #1
 80075e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	029b      	lsls	r3, r3, #10
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007602:	801a      	strh	r2, [r3, #0]
 8007604:	e02d      	b.n	8007662 <USB_EPStartXfer+0x17e2>
 8007606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	785b      	ldrb	r3, [r3, #1]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d125      	bne.n	8007662 <USB_EPStartXfer+0x17e2>
 8007616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007624:	b29b      	uxth	r3, r3
 8007626:	461a      	mov	r2, r3
 8007628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800762c:	4413      	add	r3, r2
 800762e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	011a      	lsls	r2, r3, #4
 8007640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007644:	4413      	add	r3, r2
 8007646:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800764a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800764e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	b29a      	uxth	r2, r3
 800765c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007660:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 81fe 	beq.w	8007a70 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007678:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007694:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <USB_EPStartXfer+0x182c>
 80076a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10d      	bne.n	80076c8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80076b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f040 81db 	bne.w	8007a70 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f040 81d4 	bne.w	8007a70 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80076c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ee:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80076f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	441a      	add	r2, r3
 800770c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007720:	b29b      	uxth	r3, r3
 8007722:	8013      	strh	r3, [r2, #0]
 8007724:	e1a4      	b.n	8007a70 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	78db      	ldrb	r3, [r3, #3]
 8007732:	2b01      	cmp	r3, #1
 8007734:	f040 819a 	bne.w	8007a6c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699a      	ldr	r2, [r3, #24]
 8007744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	429a      	cmp	r2, r3
 8007752:	d917      	bls.n	8007784 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007774:	1ad2      	subs	r2, r2, r3
 8007776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	619a      	str	r2, [r3, #24]
 8007782:	e00e      	b.n	80077a2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2200      	movs	r2, #0
 80077a0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d178      	bne.n	80078a4 <USB_EPStartXfer+0x1a24>
 80077b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077d6:	4413      	add	r3, r2
 80077d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	011a      	lsls	r2, r3, #4
 80077ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077ee:	4413      	add	r3, r2
 80077f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d116      	bne.n	800782e <USB_EPStartXfer+0x19ae>
 8007800:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800780c:	b29a      	uxth	r2, r3
 800780e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007812:	801a      	strh	r2, [r3, #0]
 8007814:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007824:	b29a      	uxth	r2, r3
 8007826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800782a:	801a      	strh	r2, [r3, #0]
 800782c:	e06b      	b.n	8007906 <USB_EPStartXfer+0x1a86>
 800782e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007832:	2b3e      	cmp	r3, #62	; 0x3e
 8007834:	d818      	bhi.n	8007868 <USB_EPStartXfer+0x19e8>
 8007836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783a:	085b      	lsrs	r3, r3, #1
 800783c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d004      	beq.n	8007856 <USB_EPStartXfer+0x19d6>
 800784c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007850:	3301      	adds	r3, #1
 8007852:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800785a:	b29b      	uxth	r3, r3
 800785c:	029b      	lsls	r3, r3, #10
 800785e:	b29a      	uxth	r2, r3
 8007860:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	e04e      	b.n	8007906 <USB_EPStartXfer+0x1a86>
 8007868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007876:	f003 031f 	and.w	r3, r3, #31
 800787a:	2b00      	cmp	r3, #0
 800787c:	d104      	bne.n	8007888 <USB_EPStartXfer+0x1a08>
 800787e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007882:	3b01      	subs	r3, #1
 8007884:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800788c:	b29b      	uxth	r3, r3
 800788e:	029b      	lsls	r3, r3, #10
 8007890:	b29b      	uxth	r3, r3
 8007892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789a:	b29a      	uxth	r2, r3
 800789c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	e030      	b.n	8007906 <USB_EPStartXfer+0x1a86>
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d128      	bne.n	8007906 <USB_EPStartXfer+0x1a86>
 80078b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	461a      	mov	r2, r3
 80078d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d8:	4413      	add	r3, r2
 80078da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	011a      	lsls	r2, r3, #4
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f0:	4413      	add	r3, r2
 80078f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fe:	b29a      	uxth	r2, r3
 8007900:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d178      	bne.n	8007a16 <USB_EPStartXfer+0x1b96>
 8007924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007928:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007940:	b29b      	uxth	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007948:	4413      	add	r3, r2
 800794a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800794e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	011a      	lsls	r2, r3, #4
 800795c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007960:	4413      	add	r3, r2
 8007962:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800796a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d116      	bne.n	80079a0 <USB_EPStartXfer+0x1b20>
 8007972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800797e:	b29a      	uxth	r2, r3
 8007980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007996:	b29a      	uxth	r2, r3
 8007998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	e067      	b.n	8007a70 <USB_EPStartXfer+0x1bf0>
 80079a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a4:	2b3e      	cmp	r3, #62	; 0x3e
 80079a6:	d818      	bhi.n	80079da <USB_EPStartXfer+0x1b5a>
 80079a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ac:	085b      	lsrs	r3, r3, #1
 80079ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <USB_EPStartXfer+0x1b48>
 80079be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079c2:	3301      	adds	r3, #1
 80079c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	029b      	lsls	r3, r3, #10
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079d6:	801a      	strh	r2, [r3, #0]
 80079d8:	e04a      	b.n	8007a70 <USB_EPStartXfer+0x1bf0>
 80079da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <USB_EPStartXfer+0x1b7a>
 80079f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079f4:	3b01      	subs	r3, #1
 80079f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	029b      	lsls	r3, r3, #10
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e02c      	b.n	8007a70 <USB_EPStartXfer+0x1bf0>
 8007a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d124      	bne.n	8007a70 <USB_EPStartXfer+0x1bf0>
 8007a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	011a      	lsls	r2, r3, #4
 8007a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a54:	4413      	add	r3, r2
 8007a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	e001      	b.n	8007a70 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e03a      	b.n	8007ae6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a96:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007a9a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007a9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007aa2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007aa6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007aaa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007aae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	441a      	add	r2, r3
 8007acc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	785b      	ldrb	r3, [r3, #1]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d020      	beq.n	8007b44 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b18:	81bb      	strh	r3, [r7, #12]
 8007b1a:	89bb      	ldrh	r3, [r7, #12]
 8007b1c:	f083 0310 	eor.w	r3, r3, #16
 8007b20:	81bb      	strh	r3, [r7, #12]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	441a      	add	r2, r3
 8007b2c:	89bb      	ldrh	r3, [r7, #12]
 8007b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	8013      	strh	r3, [r2, #0]
 8007b42:	e01f      	b.n	8007b84 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	81fb      	strh	r3, [r7, #14]
 8007b5c:	89fb      	ldrh	r3, [r7, #14]
 8007b5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b62:	81fb      	strh	r3, [r7, #14]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	441a      	add	r2, r3
 8007b6e:	89fb      	ldrh	r3, [r7, #14]
 8007b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr

08007b90 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	7b1b      	ldrb	r3, [r3, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f040 809d 	bne.w	8007cde <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d04c      	beq.n	8007c46 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	823b      	strh	r3, [r7, #16]
 8007bba:	8a3b      	ldrh	r3, [r7, #16]
 8007bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01b      	beq.n	8007bfc <USB_EPClearStall+0x6c>
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bda:	81fb      	strh	r3, [r7, #14]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	89fb      	ldrh	r3, [r7, #14]
 8007be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	78db      	ldrb	r3, [r3, #3]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d06c      	beq.n	8007cde <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1a:	81bb      	strh	r3, [r7, #12]
 8007c1c:	89bb      	ldrh	r3, [r7, #12]
 8007c1e:	f083 0320 	eor.w	r3, r3, #32
 8007c22:	81bb      	strh	r3, [r7, #12]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	441a      	add	r2, r3
 8007c2e:	89bb      	ldrh	r3, [r7, #12]
 8007c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	8013      	strh	r3, [r2, #0]
 8007c44:	e04b      	b.n	8007cde <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	82fb      	strh	r3, [r7, #22]
 8007c54:	8afb      	ldrh	r3, [r7, #22]
 8007c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01b      	beq.n	8007c96 <USB_EPClearStall+0x106>
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c74:	82bb      	strh	r3, [r7, #20]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	441a      	add	r2, r3
 8007c80:	8abb      	ldrh	r3, [r7, #20]
 8007c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cac:	827b      	strh	r3, [r7, #18]
 8007cae:	8a7b      	ldrh	r3, [r7, #18]
 8007cb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cb4:	827b      	strh	r3, [r7, #18]
 8007cb6:	8a7b      	ldrh	r3, [r7, #18]
 8007cb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007cbc:	827b      	strh	r3, [r7, #18]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	441a      	add	r2, r3
 8007cc8:	8a7b      	ldrh	r3, [r7, #18]
 8007cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d103      	bne.n	8007d04 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2280      	movs	r2, #128	; 0x80
 8007d00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr

08007d10 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr

08007d24 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bc80      	pop	{r7}
 8007d36:	4770      	bx	lr

08007d38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc80      	pop	{r7}
 8007d54:	4770      	bx	lr

08007d56 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc80      	pop	{r7}
 8007d6a:	4770      	bx	lr

08007d6c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b08d      	sub	sp, #52	; 0x34
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	4611      	mov	r1, r2
 8007d78:	461a      	mov	r2, r3
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	80fb      	strh	r3, [r7, #6]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d82:	88bb      	ldrh	r3, [r7, #4]
 8007d84:	3301      	adds	r3, #1
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	005a      	lsls	r2, r3, #1
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d9e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007da4:	e01e      	b.n	8007de4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	3301      	adds	r3, #1
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dce:	3302      	adds	r3, #2
 8007dd0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	3302      	adds	r3, #2
 8007dd6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	3301      	adds	r3, #1
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de0:	3b01      	subs	r3, #1
 8007de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1dd      	bne.n	8007da6 <USB_WritePMA+0x3a>
  }
}
 8007dea:	bf00      	nop
 8007dec:	bf00      	nop
 8007dee:	3734      	adds	r7, #52	; 0x34
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr

08007df6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b08b      	sub	sp, #44	; 0x2c
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	4611      	mov	r1, r2
 8007e02:	461a      	mov	r2, r3
 8007e04:	460b      	mov	r3, r1
 8007e06:	80fb      	strh	r3, [r7, #6]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e0c:	88bb      	ldrh	r3, [r7, #4]
 8007e0e:	085b      	lsrs	r3, r3, #1
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e1c:	88fb      	ldrh	r3, [r7, #6]
 8007e1e:	005a      	lsls	r2, r3, #1
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e28:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e2e:	e01b      	b.n	8007e68 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	3302      	adds	r3, #2
 8007e3c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	0a1b      	lsrs	r3, r3, #8
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	3302      	adds	r3, #2
 8007e60:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	3b01      	subs	r3, #1
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e0      	bne.n	8007e30 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007e6e:	88bb      	ldrh	r3, [r7, #4]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d007      	beq.n	8007e8a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	701a      	strb	r2, [r3, #0]
  }
}
 8007e8a:	bf00      	nop
 8007e8c:	372c      	adds	r7, #44	; 0x2c
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bc80      	pop	{r7}
 8007e92:	4770      	bx	lr

08007e94 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007ea4:	2340      	movs	r3, #64	; 0x40
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	2181      	movs	r1, #129	; 0x81
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 fd47 	bl	800993e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007eb6:	2340      	movs	r3, #64	; 0x40
 8007eb8:	2203      	movs	r2, #3
 8007eba:	2101      	movs	r1, #1
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 fd3e 	bl	800993e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007eca:	2054      	movs	r0, #84	; 0x54
 8007ecc:	f001 fe4c 	bl	8009b68 <USBD_static_malloc>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	73fb      	strb	r3, [r7, #15]
 8007ee6:	e012      	b.n	8007f0e <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eee:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	2340      	movs	r3, #64	; 0x40
 8007f06:	2101      	movs	r1, #1
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 fe09 	bl	8009b20 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007f24:	2181      	movs	r1, #129	; 0x81
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fd2f 	bl	800998a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007f32:	2101      	movs	r1, #1
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fd28 	bl	800998a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00e      	beq.n	8007f6a <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f001 fe0f 	bl	8009b80 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f84:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d051      	beq.n	8008046 <USBD_CUSTOM_HID_Setup+0xd2>
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	f040 80d8 	bne.w	8008158 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	3b02      	subs	r3, #2
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d841      	bhi.n	8008036 <USBD_CUSTOM_HID_Setup+0xc2>
 8007fb2:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <USBD_CUSTOM_HID_Setup+0x44>)
 8007fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb8:	08008011 	.word	0x08008011
 8007fbc:	08007fef 	.word	0x08007fef
 8007fc0:	08008037 	.word	0x08008037
 8007fc4:	08008037 	.word	0x08008037
 8007fc8:	08008037 	.word	0x08008037
 8007fcc:	08008037 	.word	0x08008037
 8007fd0:	08008037 	.word	0x08008037
 8007fd4:	08008021 	.word	0x08008021
 8007fd8:	08007fff 	.word	0x08007fff
 8007fdc:	08007fe1 	.word	0x08007fe1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	885b      	ldrh	r3, [r3, #2]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8007fec:	e02a      	b.n	8008044 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	3340      	adds	r3, #64	; 0x40
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 f999 	bl	800932e <USBD_CtlSendData>
          break;
 8007ffc:	e022      	b.n	8008044 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	885b      	ldrh	r3, [r3, #2]
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	b29b      	uxth	r3, r3
 8008006:	b2db      	uxtb	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800800e:	e019      	b.n	8008044 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	3344      	adds	r3, #68	; 0x44
 8008014:	2201      	movs	r2, #1
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 f988 	bl	800932e <USBD_CtlSendData>
          break;
 800801e:	e011      	b.n	8008044 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2201      	movs	r2, #1
 8008024:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008026:	6939      	ldr	r1, [r7, #16]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	88db      	ldrh	r3, [r3, #6]
 800802c:	461a      	mov	r2, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 f9ab 	bl	800938a <USBD_CtlPrepareRx>
          break;
 8008034:	e006      	b.n	8008044 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 f90e 	bl	800925a <USBD_CtlError>
          ret = USBD_FAIL;
 800803e:	2302      	movs	r3, #2
 8008040:	75fb      	strb	r3, [r7, #23]
          break;
 8008042:	bf00      	nop
      }
      break;
 8008044:	e08f      	b.n	8008166 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	785b      	ldrb	r3, [r3, #1]
 800804a:	2b0b      	cmp	r3, #11
 800804c:	d87c      	bhi.n	8008148 <USBD_CUSTOM_HID_Setup+0x1d4>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008085 	.word	0x08008085
 8008058:	08008149 	.word	0x08008149
 800805c:	08008149 	.word	0x08008149
 8008060:	08008149 	.word	0x08008149
 8008064:	08008149 	.word	0x08008149
 8008068:	08008149 	.word	0x08008149
 800806c:	080080ad 	.word	0x080080ad
 8008070:	08008149 	.word	0x08008149
 8008074:	08008149 	.word	0x08008149
 8008078:	08008149 	.word	0x08008149
 800807c:	080080fb 	.word	0x080080fb
 8008080:	08008123 	.word	0x08008123
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	2b03      	cmp	r3, #3
 800808c:	d107      	bne.n	800809e <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800808e:	f107 030e 	add.w	r3, r7, #14
 8008092:	2202      	movs	r2, #2
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 f949 	bl	800932e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800809c:	e05b      	b.n	8008156 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 f8da 	bl	800925a <USBD_CtlError>
            ret = USBD_FAIL;
 80080a6:	2302      	movs	r3, #2
 80080a8:	75fb      	strb	r3, [r7, #23]
          break;
 80080aa:	e054      	b.n	8008156 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	885b      	ldrh	r3, [r3, #2]
 80080b0:	0a1b      	lsrs	r3, r3, #8
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2b22      	cmp	r3, #34	; 0x22
 80080b6:	d10b      	bne.n	80080d0 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	88db      	ldrh	r3, [r3, #6]
 80080bc:	2b1d      	cmp	r3, #29
 80080be:	bf28      	it	cs
 80080c0:	231d      	movcs	r3, #29
 80080c2:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	61bb      	str	r3, [r7, #24]
 80080ce:	e00d      	b.n	80080ec <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	885b      	ldrh	r3, [r3, #2]
 80080d4:	0a1b      	lsrs	r3, r3, #8
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b21      	cmp	r3, #33	; 0x21
 80080da:	d107      	bne.n	80080ec <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80080dc:	4b24      	ldr	r3, [pc, #144]	; (8008170 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80080de:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	88db      	ldrh	r3, [r3, #6]
 80080e4:	2b09      	cmp	r3, #9
 80080e6:	bf28      	it	cs
 80080e8:	2309      	movcs	r3, #9
 80080ea:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80080ec:	8bfb      	ldrh	r3, [r7, #30]
 80080ee:	461a      	mov	r2, r3
 80080f0:	69b9      	ldr	r1, [r7, #24]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 f91b 	bl	800932e <USBD_CtlSendData>
          break;
 80080f8:	e02d      	b.n	8008156 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008100:	2b03      	cmp	r3, #3
 8008102:	d107      	bne.n	8008114 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	3348      	adds	r3, #72	; 0x48
 8008108:	2201      	movs	r2, #1
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 f90e 	bl	800932e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008112:	e020      	b.n	8008156 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 f89f 	bl	800925a <USBD_CtlError>
            ret = USBD_FAIL;
 800811c:	2302      	movs	r3, #2
 800811e:	75fb      	strb	r3, [r7, #23]
          break;
 8008120:	e019      	b.n	8008156 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008128:	2b03      	cmp	r3, #3
 800812a:	d106      	bne.n	800813a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	885b      	ldrh	r3, [r3, #2]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	461a      	mov	r2, r3
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008138:	e00d      	b.n	8008156 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 f88c 	bl	800925a <USBD_CtlError>
            ret = USBD_FAIL;
 8008142:	2302      	movs	r3, #2
 8008144:	75fb      	strb	r3, [r7, #23]
          break;
 8008146:	e006      	b.n	8008156 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f001 f885 	bl	800925a <USBD_CtlError>
          ret = USBD_FAIL;
 8008150:	2302      	movs	r3, #2
 8008152:	75fb      	strb	r3, [r7, #23]
          break;
 8008154:	bf00      	nop
      }
      break;
 8008156:	e006      	b.n	8008166 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 f87d 	bl	800925a <USBD_CtlError>
      ret = USBD_FAIL;
 8008160:	2302      	movs	r3, #2
 8008162:	75fb      	strb	r3, [r7, #23]
      break;
 8008164:	bf00      	nop
  }
  return ret;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3720      	adds	r7, #32
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	200000d4 	.word	0x200000d4

08008174 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008188:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008190:	2b03      	cmp	r3, #3
 8008192:	d111      	bne.n	80081b8 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80081a6:	88fb      	ldrh	r3, [r7, #6]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	2181      	movs	r1, #129	; 0x81
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f001 fc94 	bl	8009ada <USBD_LL_Transmit>
 80081b2:	e001      	b.n	80081b8 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2229      	movs	r2, #41	; 0x29
 80081d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80081d2:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20000050 	.word	0x20000050

080081e4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2229      	movs	r2, #41	; 0x29
 80081f0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80081f2:	4b03      	ldr	r3, [pc, #12]	; (8008200 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bc80      	pop	{r7}
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	2000007c 	.word	0x2000007c

08008204 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2229      	movs	r2, #41	; 0x29
 8008210:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008212:	4b03      	ldr	r3, [pc, #12]	; (8008220 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	200000a8 	.word	0x200000a8

08008224 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr

08008248 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825a:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4610      	mov	r0, r2
 8008268:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	2340      	movs	r3, #64	; 0x40
 800826e:	2101      	movs	r1, #1
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 fc55 	bl	8009b20 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828e:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d109      	bne.n	80082ac <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4610      	mov	r0, r2
 80082a4:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	220a      	movs	r2, #10
 80082c4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80082c6:	4b03      	ldr	r3, [pc, #12]	; (80082d4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	200000e0 	.word	0x200000e0

080082d8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80082e2:	2302      	movs	r3, #2
 80082e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	bc80      	pop	{r7}
 8008302:	4770      	bx	lr

08008304 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008318:	2302      	movs	r3, #2
 800831a:	e01a      	b.n	8008352 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	79fa      	ldrb	r2, [r7, #7]
 8008348:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f001 fa8c 	bl	8009868 <USBD_LL_Init>

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800835a:	b480      	push	{r7}
 800835c:	b085      	sub	sp, #20
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d006      	beq.n	800837c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
 800837a:	e001      	b.n	8008380 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800837c:	2302      	movs	r3, #2
 800837e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	bc80      	pop	{r7}
 800838a:	4770      	bx	lr

0800838c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 fab7 	bl	8009908 <USBD_LL_Start>

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bc80      	pop	{r7}
 80083b6:	4770      	bx	lr

080083b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083c4:	2302      	movs	r3, #2
 80083c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00c      	beq.n	80083ec <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	4611      	mov	r1, r2
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	4798      	blx	r3
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	4611      	mov	r1, r2
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3

  return USBD_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fed7 	bl	80091e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008450:	f003 031f 	and.w	r3, r3, #31
 8008454:	2b02      	cmp	r3, #2
 8008456:	d016      	beq.n	8008486 <USBD_LL_SetupStage+0x6a>
 8008458:	2b02      	cmp	r3, #2
 800845a:	d81c      	bhi.n	8008496 <USBD_LL_SetupStage+0x7a>
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <USBD_LL_SetupStage+0x4a>
 8008460:	2b01      	cmp	r3, #1
 8008462:	d008      	beq.n	8008476 <USBD_LL_SetupStage+0x5a>
 8008464:	e017      	b.n	8008496 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f9ca 	bl	8008808 <USBD_StdDevReq>
      break;
 8008474:	e01a      	b.n	80084ac <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa2c 	bl	80088dc <USBD_StdItfReq>
      break;
 8008484:	e012      	b.n	80084ac <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa6c 	bl	800896c <USBD_StdEPReq>
      break;
 8008494:	e00a      	b.n	80084ac <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800849c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 fa8f 	bl	80099c8 <USBD_LL_StallEP>
      break;
 80084aa:	bf00      	nop
  }

  return USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b086      	sub	sp, #24
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	460b      	mov	r3, r1
 80084c0:	607a      	str	r2, [r7, #4]
 80084c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d14b      	bne.n	8008562 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d134      	bne.n	8008546 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	68da      	ldr	r2, [r3, #12]
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d919      	bls.n	800851c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	1ad2      	subs	r2, r2, r3
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80084fe:	429a      	cmp	r2, r3
 8008500:	d203      	bcs.n	800850a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008506:	b29b      	uxth	r3, r3
 8008508:	e002      	b.n	8008510 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800850e:	b29b      	uxth	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 ff56 	bl	80093c6 <USBD_CtlContinueRx>
 800851a:	e038      	b.n	800858e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800852e:	2b03      	cmp	r3, #3
 8008530:	d105      	bne.n	800853e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 ff53 	bl	80093ea <USBD_CtlSendStatus>
 8008544:	e023      	b.n	800858e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800854c:	2b05      	cmp	r3, #5
 800854e:	d11e      	bne.n	800858e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008558:	2100      	movs	r1, #0
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f001 fa34 	bl	80099c8 <USBD_LL_StallEP>
 8008560:	e015      	b.n	800858e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00d      	beq.n	800858a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008574:	2b03      	cmp	r3, #3
 8008576:	d108      	bne.n	800858a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	7afa      	ldrb	r2, [r7, #11]
 8008582:	4611      	mov	r1, r2
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	4798      	blx	r3
 8008588:	e001      	b.n	800858e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800858a:	2302      	movs	r3, #2
 800858c:	e000      	b.n	8008590 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3718      	adds	r7, #24
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	460b      	mov	r3, r1
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085a6:	7afb      	ldrb	r3, [r7, #11]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d17f      	bne.n	80086ac <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3314      	adds	r3, #20
 80085b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d15c      	bne.n	8008676 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d915      	bls.n	80085f4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	1ad2      	subs	r2, r2, r3
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	461a      	mov	r2, r3
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 fec0 	bl	8009366 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085e6:	2300      	movs	r3, #0
 80085e8:	2200      	movs	r2, #0
 80085ea:	2100      	movs	r1, #0
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f001 fa97 	bl	8009b20 <USBD_LL_PrepareReceive>
 80085f2:	e04e      	b.n	8008692 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	6912      	ldr	r2, [r2, #16]
 80085fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008600:	fb01 f202 	mul.w	r2, r1, r2
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d11c      	bne.n	8008644 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008612:	429a      	cmp	r2, r3
 8008614:	d316      	bcc.n	8008644 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008620:	429a      	cmp	r2, r3
 8008622:	d20f      	bcs.n	8008644 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008624:	2200      	movs	r2, #0
 8008626:	2100      	movs	r1, #0
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fe9c 	bl	8009366 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008636:	2300      	movs	r3, #0
 8008638:	2200      	movs	r2, #0
 800863a:	2100      	movs	r1, #0
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f001 fa6f 	bl	8009b20 <USBD_LL_PrepareReceive>
 8008642:	e026      	b.n	8008692 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008656:	2b03      	cmp	r3, #3
 8008658:	d105      	bne.n	8008666 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f001 f9ad 	bl	80099c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 fece 	bl	8009410 <USBD_CtlReceiveStatus>
 8008674:	e00d      	b.n	8008692 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800867c:	2b04      	cmp	r3, #4
 800867e:	d004      	beq.n	800868a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008686:	2b00      	cmp	r3, #0
 8008688:	d103      	bne.n	8008692 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800868a:	2180      	movs	r1, #128	; 0x80
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f001 f99b 	bl	80099c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008698:	2b01      	cmp	r3, #1
 800869a:	d11d      	bne.n	80086d8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff fe81 	bl	80083a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086aa:	e015      	b.n	80086d8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00d      	beq.n	80086d4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d108      	bne.n	80086d4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	7afa      	ldrb	r2, [r7, #11]
 80086cc:	4611      	mov	r1, r2
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	4798      	blx	r3
 80086d2:	e001      	b.n	80086d8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086d4:	2302      	movs	r3, #2
 80086d6:	e000      	b.n	80086da <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086ea:	2340      	movs	r3, #64	; 0x40
 80086ec:	2200      	movs	r2, #0
 80086ee:	2100      	movs	r1, #0
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f924 	bl	800993e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2240      	movs	r2, #64	; 0x40
 8008702:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008706:	2340      	movs	r3, #64	; 0x40
 8008708:	2200      	movs	r2, #0
 800870a:	2180      	movs	r1, #128	; 0x80
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 f916 	bl	800993e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2240      	movs	r2, #64	; 0x40
 800871c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008742:	2b00      	cmp	r3, #0
 8008744:	d009      	beq.n	800875a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6852      	ldr	r2, [r2, #4]
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	4611      	mov	r1, r2
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
  }

  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	78fa      	ldrb	r2, [r7, #3]
 8008774:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr

08008782 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2204      	movs	r2, #4
 800879a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc80      	pop	{r7}
 80087a8:	4770      	bx	lr

080087aa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d105      	bne.n	80087c8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d10b      	bne.n	80087fe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d005      	beq.n	80087fe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800881e:	2b40      	cmp	r3, #64	; 0x40
 8008820:	d005      	beq.n	800882e <USBD_StdDevReq+0x26>
 8008822:	2b40      	cmp	r3, #64	; 0x40
 8008824:	d84f      	bhi.n	80088c6 <USBD_StdDevReq+0xbe>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d009      	beq.n	800883e <USBD_StdDevReq+0x36>
 800882a:	2b20      	cmp	r3, #32
 800882c:	d14b      	bne.n	80088c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3
      break;
 800883c:	e048      	b.n	80088d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	785b      	ldrb	r3, [r3, #1]
 8008842:	2b09      	cmp	r3, #9
 8008844:	d839      	bhi.n	80088ba <USBD_StdDevReq+0xb2>
 8008846:	a201      	add	r2, pc, #4	; (adr r2, 800884c <USBD_StdDevReq+0x44>)
 8008848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884c:	0800889d 	.word	0x0800889d
 8008850:	080088b1 	.word	0x080088b1
 8008854:	080088bb 	.word	0x080088bb
 8008858:	080088a7 	.word	0x080088a7
 800885c:	080088bb 	.word	0x080088bb
 8008860:	0800887f 	.word	0x0800887f
 8008864:	08008875 	.word	0x08008875
 8008868:	080088bb 	.word	0x080088bb
 800886c:	08008893 	.word	0x08008893
 8008870:	08008889 	.word	0x08008889
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f9dc 	bl	8008c34 <USBD_GetDescriptor>
          break;
 800887c:	e022      	b.n	80088c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fb3f 	bl	8008f04 <USBD_SetAddress>
          break;
 8008886:	e01d      	b.n	80088c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fb7e 	bl	8008f8c <USBD_SetConfig>
          break;
 8008890:	e018      	b.n	80088c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fc07 	bl	80090a8 <USBD_GetConfig>
          break;
 800889a:	e013      	b.n	80088c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fc37 	bl	8009112 <USBD_GetStatus>
          break;
 80088a4:	e00e      	b.n	80088c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fc65 	bl	8009178 <USBD_SetFeature>
          break;
 80088ae:	e009      	b.n	80088c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fc74 	bl	80091a0 <USBD_ClrFeature>
          break;
 80088b8:	e004      	b.n	80088c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fccc 	bl	800925a <USBD_CtlError>
          break;
 80088c2:	bf00      	nop
      }
      break;
 80088c4:	e004      	b.n	80088d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fcc6 	bl	800925a <USBD_CtlError>
      break;
 80088ce:	bf00      	nop
  }

  return ret;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop

080088dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088f2:	2b40      	cmp	r3, #64	; 0x40
 80088f4:	d005      	beq.n	8008902 <USBD_StdItfReq+0x26>
 80088f6:	2b40      	cmp	r3, #64	; 0x40
 80088f8:	d82e      	bhi.n	8008958 <USBD_StdItfReq+0x7c>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <USBD_StdItfReq+0x26>
 80088fe:	2b20      	cmp	r3, #32
 8008900:	d12a      	bne.n	8008958 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008908:	3b01      	subs	r3, #1
 800890a:	2b02      	cmp	r3, #2
 800890c:	d81d      	bhi.n	800894a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	889b      	ldrh	r3, [r3, #4]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	d813      	bhi.n	8008940 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	4798      	blx	r3
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	88db      	ldrh	r3, [r3, #6]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d110      	bne.n	8008954 <USBD_StdItfReq+0x78>
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10d      	bne.n	8008954 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fd56 	bl	80093ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800893e:	e009      	b.n	8008954 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fc89 	bl	800925a <USBD_CtlError>
          break;
 8008948:	e004      	b.n	8008954 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fc84 	bl	800925a <USBD_CtlError>
          break;
 8008952:	e000      	b.n	8008956 <USBD_StdItfReq+0x7a>
          break;
 8008954:	bf00      	nop
      }
      break;
 8008956:	e004      	b.n	8008962 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fc7d 	bl	800925a <USBD_CtlError>
      break;
 8008960:	bf00      	nop
  }

  return USBD_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	889b      	ldrh	r3, [r3, #4]
 800897e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008988:	2b40      	cmp	r3, #64	; 0x40
 800898a:	d007      	beq.n	800899c <USBD_StdEPReq+0x30>
 800898c:	2b40      	cmp	r3, #64	; 0x40
 800898e:	f200 8146 	bhi.w	8008c1e <USBD_StdEPReq+0x2b2>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <USBD_StdEPReq+0x40>
 8008996:	2b20      	cmp	r3, #32
 8008998:	f040 8141 	bne.w	8008c1e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
      break;
 80089aa:	e13d      	b.n	8008c28 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089b4:	2b20      	cmp	r3, #32
 80089b6:	d10a      	bne.n	80089ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
 80089c6:	4603      	mov	r3, r0
 80089c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	e12d      	b.n	8008c2a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	d007      	beq.n	80089e6 <USBD_StdEPReq+0x7a>
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	f300 811b 	bgt.w	8008c12 <USBD_StdEPReq+0x2a6>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d072      	beq.n	8008ac6 <USBD_StdEPReq+0x15a>
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d03a      	beq.n	8008a5a <USBD_StdEPReq+0xee>
 80089e4:	e115      	b.n	8008c12 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d002      	beq.n	80089f6 <USBD_StdEPReq+0x8a>
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d015      	beq.n	8008a20 <USBD_StdEPReq+0xb4>
 80089f4:	e02b      	b.n	8008a4e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00c      	beq.n	8008a16 <USBD_StdEPReq+0xaa>
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	2b80      	cmp	r3, #128	; 0x80
 8008a00:	d009      	beq.n	8008a16 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 ffde 	bl	80099c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a0c:	2180      	movs	r1, #128	; 0x80
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 ffda 	bl	80099c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a14:	e020      	b.n	8008a58 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fc1e 	bl	800925a <USBD_CtlError>
              break;
 8008a1e:	e01b      	b.n	8008a58 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	885b      	ldrh	r3, [r3, #2]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10e      	bne.n	8008a46 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00b      	beq.n	8008a46 <USBD_StdEPReq+0xda>
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	2b80      	cmp	r3, #128	; 0x80
 8008a32:	d008      	beq.n	8008a46 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	88db      	ldrh	r3, [r3, #6]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d104      	bne.n	8008a46 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 ffc1 	bl	80099c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fccf 	bl	80093ea <USBD_CtlSendStatus>

              break;
 8008a4c:	e004      	b.n	8008a58 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fc02 	bl	800925a <USBD_CtlError>
              break;
 8008a56:	bf00      	nop
          }
          break;
 8008a58:	e0e0      	b.n	8008c1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d002      	beq.n	8008a6a <USBD_StdEPReq+0xfe>
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d015      	beq.n	8008a94 <USBD_StdEPReq+0x128>
 8008a68:	e026      	b.n	8008ab8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00c      	beq.n	8008a8a <USBD_StdEPReq+0x11e>
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	2b80      	cmp	r3, #128	; 0x80
 8008a74:	d009      	beq.n	8008a8a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 ffa4 	bl	80099c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a80:	2180      	movs	r1, #128	; 0x80
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 ffa0 	bl	80099c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a88:	e01c      	b.n	8008ac4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fbe4 	bl	800925a <USBD_CtlError>
              break;
 8008a92:	e017      	b.n	8008ac4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	885b      	ldrh	r3, [r3, #2]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d112      	bne.n	8008ac2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 ffab 	bl	8009a06 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fc9a 	bl	80093ea <USBD_CtlSendStatus>
              }
              break;
 8008ab6:	e004      	b.n	8008ac2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fbcd 	bl	800925a <USBD_CtlError>
              break;
 8008ac0:	e000      	b.n	8008ac4 <USBD_StdEPReq+0x158>
              break;
 8008ac2:	bf00      	nop
          }
          break;
 8008ac4:	e0aa      	b.n	8008c1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d002      	beq.n	8008ad6 <USBD_StdEPReq+0x16a>
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d032      	beq.n	8008b3a <USBD_StdEPReq+0x1ce>
 8008ad4:	e097      	b.n	8008c06 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <USBD_StdEPReq+0x180>
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	2b80      	cmp	r3, #128	; 0x80
 8008ae0:	d004      	beq.n	8008aec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fbb8 	bl	800925a <USBD_CtlError>
                break;
 8008aea:	e091      	b.n	8008c10 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	da0b      	bge.n	8008b0c <USBD_StdEPReq+0x1a0>
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008afa:	4613      	mov	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	3310      	adds	r3, #16
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	4413      	add	r3, r2
 8008b08:	3304      	adds	r3, #4
 8008b0a:	e00b      	b.n	8008b24 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	4413      	add	r3, r2
 8008b22:	3304      	adds	r3, #4
 8008b24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fbfb 	bl	800932e <USBD_CtlSendData>
              break;
 8008b38:	e06a      	b.n	8008c10 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	da11      	bge.n	8008b66 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	f003 020f 	and.w	r2, r3, #15
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	440b      	add	r3, r1
 8008b54:	3318      	adds	r3, #24
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d117      	bne.n	8008b8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fb7b 	bl	800925a <USBD_CtlError>
                  break;
 8008b64:	e054      	b.n	8008c10 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	f003 020f 	and.w	r2, r3, #15
 8008b6c:	6879      	ldr	r1, [r7, #4]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	440b      	add	r3, r1
 8008b78:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d104      	bne.n	8008b8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fb68 	bl	800925a <USBD_CtlError>
                  break;
 8008b8a:	e041      	b.n	8008c10 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	da0b      	bge.n	8008bac <USBD_StdEPReq+0x240>
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	3310      	adds	r3, #16
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	3304      	adds	r3, #4
 8008baa:	e00b      	b.n	8008bc4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <USBD_StdEPReq+0x266>
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	2b80      	cmp	r3, #128	; 0x80
 8008bd0:	d103      	bne.n	8008bda <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	e00e      	b.n	8008bf8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 ff30 	bl	8009a44 <USBD_LL_IsStallEP>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2201      	movs	r2, #1
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	e002      	b.n	8008bf8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fb95 	bl	800932e <USBD_CtlSendData>
              break;
 8008c04:	e004      	b.n	8008c10 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fb26 	bl	800925a <USBD_CtlError>
              break;
 8008c0e:	bf00      	nop
          }
          break;
 8008c10:	e004      	b.n	8008c1c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fb20 	bl	800925a <USBD_CtlError>
          break;
 8008c1a:	bf00      	nop
      }
      break;
 8008c1c:	e004      	b.n	8008c28 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fb1a 	bl	800925a <USBD_CtlError>
      break;
 8008c26:	bf00      	nop
  }

  return ret;
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	2b06      	cmp	r3, #6
 8008c56:	f200 8128 	bhi.w	8008eaa <USBD_GetDescriptor+0x276>
 8008c5a:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <USBD_GetDescriptor+0x2c>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008c7d 	.word	0x08008c7d
 8008c64:	08008c95 	.word	0x08008c95
 8008c68:	08008cd5 	.word	0x08008cd5
 8008c6c:	08008eab 	.word	0x08008eab
 8008c70:	08008eab 	.word	0x08008eab
 8008c74:	08008e4b 	.word	0x08008e4b
 8008c78:	08008e77 	.word	0x08008e77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	7c12      	ldrb	r2, [r2, #16]
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
 8008c90:	60f8      	str	r0, [r7, #12]
      break;
 8008c92:	e112      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7c1b      	ldrb	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10d      	bne.n	8008cb8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	f107 0208 	add.w	r2, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cb6:	e100      	b.n	8008eba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	f107 0208 	add.w	r2, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	2202      	movs	r2, #2
 8008cd0:	701a      	strb	r2, [r3, #0]
      break;
 8008cd2:	e0f2      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	885b      	ldrh	r3, [r3, #2]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b05      	cmp	r3, #5
 8008cdc:	f200 80ac 	bhi.w	8008e38 <USBD_GetDescriptor+0x204>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <USBD_GetDescriptor+0xb4>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d35 	.word	0x08008d35
 8008cf0:	08008d69 	.word	0x08008d69
 8008cf4:	08008d9d 	.word	0x08008d9d
 8008cf8:	08008dd1 	.word	0x08008dd1
 8008cfc:	08008e05 	.word	0x08008e05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7c12      	ldrb	r2, [r2, #16]
 8008d18:	f107 0108 	add.w	r1, r7, #8
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d22:	e091      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fa97 	bl	800925a <USBD_CtlError>
            err++;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	72fb      	strb	r3, [r7, #11]
          break;
 8008d32:	e089      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7c12      	ldrb	r2, [r2, #16]
 8008d4c:	f107 0108 	add.w	r1, r7, #8
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d56:	e077      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fa7d 	bl	800925a <USBD_CtlError>
            err++;
 8008d60:	7afb      	ldrb	r3, [r7, #11]
 8008d62:	3301      	adds	r3, #1
 8008d64:	72fb      	strb	r3, [r7, #11]
          break;
 8008d66:	e06f      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7c12      	ldrb	r2, [r2, #16]
 8008d80:	f107 0108 	add.w	r1, r7, #8
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d8a:	e05d      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa63 	bl	800925a <USBD_CtlError>
            err++;
 8008d94:	7afb      	ldrb	r3, [r7, #11]
 8008d96:	3301      	adds	r3, #1
 8008d98:	72fb      	strb	r3, [r7, #11]
          break;
 8008d9a:	e055      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7c12      	ldrb	r2, [r2, #16]
 8008db4:	f107 0108 	add.w	r1, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dbe:	e043      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa49 	bl	800925a <USBD_CtlError>
            err++;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dce:	e03b      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7c12      	ldrb	r2, [r2, #16]
 8008de8:	f107 0108 	add.w	r1, r7, #8
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008df2:	e029      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa2f 	bl	800925a <USBD_CtlError>
            err++;
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	72fb      	strb	r3, [r7, #11]
          break;
 8008e02:	e021      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7c12      	ldrb	r2, [r2, #16]
 8008e1c:	f107 0108 	add.w	r1, r7, #8
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e26:	e00f      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fa15 	bl	800925a <USBD_CtlError>
            err++;
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	3301      	adds	r3, #1
 8008e34:	72fb      	strb	r3, [r7, #11]
          break;
 8008e36:	e007      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa0d 	bl	800925a <USBD_CtlError>
          err++;
 8008e40:	7afb      	ldrb	r3, [r7, #11]
 8008e42:	3301      	adds	r3, #1
 8008e44:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008e46:	e038      	b.n	8008eba <USBD_GetDescriptor+0x286>
 8008e48:	e037      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	7c1b      	ldrb	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d109      	bne.n	8008e66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5a:	f107 0208 	add.w	r2, r7, #8
 8008e5e:	4610      	mov	r0, r2
 8008e60:	4798      	blx	r3
 8008e62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e64:	e029      	b.n	8008eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f9f6 	bl	800925a <USBD_CtlError>
        err++;
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	3301      	adds	r3, #1
 8008e72:	72fb      	strb	r3, [r7, #11]
      break;
 8008e74:	e021      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	7c1b      	ldrb	r3, [r3, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10d      	bne.n	8008e9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	f107 0208 	add.w	r2, r7, #8
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4798      	blx	r3
 8008e8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	2207      	movs	r2, #7
 8008e96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e98:	e00f      	b.n	8008eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f9dc 	bl	800925a <USBD_CtlError>
        err++;
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ea8:	e007      	b.n	8008eba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f9d4 	bl	800925a <USBD_CtlError>
      err++;
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8008eb8:	bf00      	nop
  }

  if (err != 0U)
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d11c      	bne.n	8008efa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ec0:	893b      	ldrh	r3, [r7, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d011      	beq.n	8008eea <USBD_GetDescriptor+0x2b6>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	88db      	ldrh	r3, [r3, #6]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00d      	beq.n	8008eea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	88da      	ldrh	r2, [r3, #6]
 8008ed2:	893b      	ldrh	r3, [r7, #8]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	bf28      	it	cs
 8008ed8:	4613      	movcs	r3, r2
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ede:	893b      	ldrh	r3, [r7, #8]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fa22 	bl	800932e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	88db      	ldrh	r3, [r3, #6]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d104      	bne.n	8008efc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fa79 	bl	80093ea <USBD_CtlSendStatus>
 8008ef8:	e000      	b.n	8008efc <USBD_GetDescriptor+0x2c8>
    return;
 8008efa:	bf00      	nop
    }
  }
}
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop

08008f04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	889b      	ldrh	r3, [r3, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d130      	bne.n	8008f78 <USBD_SetAddress+0x74>
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	88db      	ldrh	r3, [r3, #6]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d12c      	bne.n	8008f78 <USBD_SetAddress+0x74>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	885b      	ldrh	r3, [r3, #2]
 8008f22:	2b7f      	cmp	r3, #127	; 0x7f
 8008f24:	d828      	bhi.n	8008f78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	885b      	ldrh	r3, [r3, #2]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d104      	bne.n	8008f46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f98b 	bl	800925a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f44:	e01d      	b.n	8008f82 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	7bfa      	ldrb	r2, [r7, #15]
 8008f4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fda2 	bl	8009a9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fa46 	bl	80093ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d004      	beq.n	8008f6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f6c:	e009      	b.n	8008f82 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f76:	e004      	b.n	8008f82 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f96d 	bl	800925a <USBD_CtlError>
  }
}
 8008f80:	bf00      	nop
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
	...

08008f8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	885b      	ldrh	r3, [r3, #2]
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	4b41      	ldr	r3, [pc, #260]	; (80090a4 <USBD_SetConfig+0x118>)
 8008f9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fa0:	4b40      	ldr	r3, [pc, #256]	; (80090a4 <USBD_SetConfig+0x118>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d904      	bls.n	8008fb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f955 	bl	800925a <USBD_CtlError>
 8008fb0:	e075      	b.n	800909e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d002      	beq.n	8008fc2 <USBD_SetConfig+0x36>
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d023      	beq.n	8009008 <USBD_SetConfig+0x7c>
 8008fc0:	e062      	b.n	8009088 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008fc2:	4b38      	ldr	r3, [pc, #224]	; (80090a4 <USBD_SetConfig+0x118>)
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d01a      	beq.n	8009000 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008fca:	4b36      	ldr	r3, [pc, #216]	; (80090a4 <USBD_SetConfig+0x118>)
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2203      	movs	r2, #3
 8008fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008fdc:	4b31      	ldr	r3, [pc, #196]	; (80090a4 <USBD_SetConfig+0x118>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff f9e8 	bl	80083b8 <USBD_SetClassConfig>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d104      	bne.n	8008ff8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f932 	bl	800925a <USBD_CtlError>
            return;
 8008ff6:	e052      	b.n	800909e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f9f6 	bl	80093ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ffe:	e04e      	b.n	800909e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f9f2 	bl	80093ea <USBD_CtlSendStatus>
        break;
 8009006:	e04a      	b.n	800909e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009008:	4b26      	ldr	r3, [pc, #152]	; (80090a4 <USBD_SetConfig+0x118>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d112      	bne.n	8009036 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009018:	4b22      	ldr	r3, [pc, #136]	; (80090a4 <USBD_SetConfig+0x118>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009022:	4b20      	ldr	r3, [pc, #128]	; (80090a4 <USBD_SetConfig+0x118>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff f9e4 	bl	80083f6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f9db 	bl	80093ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009034:	e033      	b.n	800909e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009036:	4b1b      	ldr	r3, [pc, #108]	; (80090a4 <USBD_SetConfig+0x118>)
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d01d      	beq.n	8009080 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	b2db      	uxtb	r3, r3
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff f9d2 	bl	80083f6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009052:	4b14      	ldr	r3, [pc, #80]	; (80090a4 <USBD_SetConfig+0x118>)
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800905c:	4b11      	ldr	r3, [pc, #68]	; (80090a4 <USBD_SetConfig+0x118>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff f9a8 	bl	80083b8 <USBD_SetClassConfig>
 8009068:	4603      	mov	r3, r0
 800906a:	2b02      	cmp	r3, #2
 800906c:	d104      	bne.n	8009078 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f8f2 	bl	800925a <USBD_CtlError>
            return;
 8009076:	e012      	b.n	800909e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f9b6 	bl	80093ea <USBD_CtlSendStatus>
        break;
 800907e:	e00e      	b.n	800909e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f9b2 	bl	80093ea <USBD_CtlSendStatus>
        break;
 8009086:	e00a      	b.n	800909e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f8e5 	bl	800925a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009090:	4b04      	ldr	r3, [pc, #16]	; (80090a4 <USBD_SetConfig+0x118>)
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff f9ad 	bl	80083f6 <USBD_ClrClassConfig>
        break;
 800909c:	bf00      	nop
    }
  }
}
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20000378 	.word	0x20000378

080090a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	88db      	ldrh	r3, [r3, #6]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d004      	beq.n	80090c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f8cc 	bl	800925a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090c2:	e022      	b.n	800910a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	dc02      	bgt.n	80090d4 <USBD_GetConfig+0x2c>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dc03      	bgt.n	80090da <USBD_GetConfig+0x32>
 80090d2:	e015      	b.n	8009100 <USBD_GetConfig+0x58>
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d00b      	beq.n	80090f0 <USBD_GetConfig+0x48>
 80090d8:	e012      	b.n	8009100 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3308      	adds	r3, #8
 80090e4:	2201      	movs	r2, #1
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f920 	bl	800932e <USBD_CtlSendData>
        break;
 80090ee:	e00c      	b.n	800910a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	2201      	movs	r2, #1
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f918 	bl	800932e <USBD_CtlSendData>
        break;
 80090fe:	e004      	b.n	800910a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f8a9 	bl	800925a <USBD_CtlError>
        break;
 8009108:	bf00      	nop
}
 800910a:	bf00      	nop
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009122:	3b01      	subs	r3, #1
 8009124:	2b02      	cmp	r3, #2
 8009126:	d81e      	bhi.n	8009166 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	88db      	ldrh	r3, [r3, #6]
 800912c:	2b02      	cmp	r3, #2
 800912e:	d004      	beq.n	800913a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f891 	bl	800925a <USBD_CtlError>
        break;
 8009138:	e01a      	b.n	8009170 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009146:	2b00      	cmp	r3, #0
 8009148:	d005      	beq.n	8009156 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f043 0202 	orr.w	r2, r3, #2
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	330c      	adds	r3, #12
 800915a:	2202      	movs	r2, #2
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f8e5 	bl	800932e <USBD_CtlSendData>
      break;
 8009164:	e004      	b.n	8009170 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f876 	bl	800925a <USBD_CtlError>
      break;
 800916e:	bf00      	nop
  }
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	885b      	ldrh	r3, [r3, #2]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d106      	bne.n	8009198 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f929 	bl	80093ea <USBD_CtlSendStatus>
  }
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b0:	3b01      	subs	r3, #1
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d80b      	bhi.n	80091ce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	885b      	ldrh	r3, [r3, #2]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d10c      	bne.n	80091d8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f90f 	bl	80093ea <USBD_CtlSendStatus>
      }
      break;
 80091cc:	e004      	b.n	80091d8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f842 	bl	800925a <USBD_CtlError>
      break;
 80091d6:	e000      	b.n	80091da <USBD_ClrFeature+0x3a>
      break;
 80091d8:	bf00      	nop
  }
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781a      	ldrb	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	785a      	ldrb	r2, [r3, #1]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	3302      	adds	r3, #2
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	b29a      	uxth	r2, r3
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	3303      	adds	r3, #3
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	021b      	lsls	r3, r3, #8
 800920e:	b29b      	uxth	r3, r3
 8009210:	4413      	add	r3, r2
 8009212:	b29a      	uxth	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	3304      	adds	r3, #4
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	b29a      	uxth	r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	3305      	adds	r3, #5
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	b29b      	uxth	r3, r3
 800922c:	4413      	add	r3, r2
 800922e:	b29a      	uxth	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	3306      	adds	r3, #6
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	b29a      	uxth	r2, r3
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	3307      	adds	r3, #7
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	b29b      	uxth	r3, r3
 8009244:	021b      	lsls	r3, r3, #8
 8009246:	b29b      	uxth	r3, r3
 8009248:	4413      	add	r3, r2
 800924a:	b29a      	uxth	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	80da      	strh	r2, [r3, #6]

}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	bc80      	pop	{r7}
 8009258:	4770      	bx	lr

0800925a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009264:	2180      	movs	r1, #128	; 0x80
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fbae 	bl	80099c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800926c:	2100      	movs	r1, #0
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fbaa 	bl	80099c8 <USBD_LL_StallEP>
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d032      	beq.n	80092f8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 f834 	bl	8009300 <USBD_GetLen>
 8009298:	4603      	mov	r3, r0
 800929a:	3301      	adds	r3, #1
 800929c:	b29b      	uxth	r3, r3
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	75fa      	strb	r2, [r7, #23]
 80092ac:	461a      	mov	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	4413      	add	r3, r2
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	7812      	ldrb	r2, [r2, #0]
 80092b6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	1c5a      	adds	r2, r3, #1
 80092bc:	75fa      	strb	r2, [r7, #23]
 80092be:	461a      	mov	r2, r3
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	4413      	add	r3, r2
 80092c4:	2203      	movs	r2, #3
 80092c6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80092c8:	e012      	b.n	80092f0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	60fa      	str	r2, [r7, #12]
 80092d0:	7dfa      	ldrb	r2, [r7, #23]
 80092d2:	1c51      	adds	r1, r2, #1
 80092d4:	75f9      	strb	r1, [r7, #23]
 80092d6:	4611      	mov	r1, r2
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	440a      	add	r2, r1
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80092e0:	7dfb      	ldrb	r3, [r7, #23]
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	75fa      	strb	r2, [r7, #23]
 80092e6:	461a      	mov	r2, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	4413      	add	r3, r2
 80092ec:	2200      	movs	r2, #0
 80092ee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e8      	bne.n	80092ca <USBD_GetString+0x4e>
    }
  }
}
 80092f8:	bf00      	nop
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800930c:	e005      	b.n	800931a <USBD_GetLen+0x1a>
  {
    len++;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	3301      	adds	r3, #1
 8009312:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	3301      	adds	r3, #1
 8009318:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f5      	bne.n	800930e <USBD_GetLen+0xe>
  }

  return len;
 8009322:	7bfb      	ldrb	r3, [r7, #15]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	bc80      	pop	{r7}
 800932c:	4770      	bx	lr

0800932e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	4613      	mov	r3, r2
 800933a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2202      	movs	r2, #2
 8009340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009344:	88fa      	ldrh	r2, [r7, #6]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800934a:	88fa      	ldrh	r2, [r7, #6]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009350:	88fb      	ldrh	r3, [r7, #6]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	2100      	movs	r1, #0
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 fbbf 	bl	8009ada <USBD_LL_Transmit>

  return USBD_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	4613      	mov	r3, r2
 8009372:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009374:	88fb      	ldrh	r3, [r7, #6]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	2100      	movs	r1, #0
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 fbad 	bl	8009ada <USBD_LL_Transmit>

  return USBD_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	4613      	mov	r3, r2
 8009396:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2203      	movs	r2, #3
 800939c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80093a0:	88fa      	ldrh	r2, [r7, #6]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80093a8:	88fa      	ldrh	r2, [r7, #6]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093b0:	88fb      	ldrh	r3, [r7, #6]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	2100      	movs	r1, #0
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 fbb2 	bl	8009b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b084      	sub	sp, #16
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	4613      	mov	r3, r2
 80093d2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093d4:	88fb      	ldrh	r3, [r7, #6]
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	2100      	movs	r1, #0
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 fba0 	bl	8009b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2204      	movs	r2, #4
 80093f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093fa:	2300      	movs	r3, #0
 80093fc:	2200      	movs	r2, #0
 80093fe:	2100      	movs	r1, #0
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fb6a 	bl	8009ada <USBD_LL_Transmit>

  return USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2205      	movs	r2, #5
 800941c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009420:	2300      	movs	r3, #0
 8009422:	2200      	movs	r2, #0
 8009424:	2100      	movs	r1, #0
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fb7a 	bl	8009b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800943c:	2200      	movs	r2, #0
 800943e:	4912      	ldr	r1, [pc, #72]	; (8009488 <MX_USB_DEVICE_Init+0x50>)
 8009440:	4812      	ldr	r0, [pc, #72]	; (800948c <MX_USB_DEVICE_Init+0x54>)
 8009442:	f7fe ff5f 	bl	8008304 <USBD_Init>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800944c:	f7f7 fc42 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009450:	490f      	ldr	r1, [pc, #60]	; (8009490 <MX_USB_DEVICE_Init+0x58>)
 8009452:	480e      	ldr	r0, [pc, #56]	; (800948c <MX_USB_DEVICE_Init+0x54>)
 8009454:	f7fe ff81 	bl	800835a <USBD_RegisterClass>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800945e:	f7f7 fc39 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009462:	490c      	ldr	r1, [pc, #48]	; (8009494 <MX_USB_DEVICE_Init+0x5c>)
 8009464:	4809      	ldr	r0, [pc, #36]	; (800948c <MX_USB_DEVICE_Init+0x54>)
 8009466:	f7fe ff37 	bl	80082d8 <USBD_CUSTOM_HID_RegisterInterface>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009470:	f7f7 fc30 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009474:	4805      	ldr	r0, [pc, #20]	; (800948c <MX_USB_DEVICE_Init+0x54>)
 8009476:	f7fe ff89 	bl	800838c <USBD_Start>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009480:	f7f7 fc28 	bl	8000cd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009484:	bf00      	nop
 8009486:	bd80      	pop	{r7, pc}
 8009488:	2000011c 	.word	0x2000011c
 800948c:	2000037c 	.word	0x2000037c
 8009490:	20000018 	.word	0x20000018
 8009494:	2000010c 	.word	0x2000010c

08009498 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009498:	b480      	push	{r7}
 800949a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800949c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800949e:	4618      	mov	r0, r3
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bc80      	pop	{r7}
 80094a4:	4770      	bx	lr

080094a6 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80094a6:	b480      	push	{r7}
 80094a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80094aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bc80      	pop	{r7}
 80094b2:	4770      	bx	lr

080094b4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80094bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094be:	4618      	mov	r0, r3
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bc80      	pop	{r7}
 80094c6:	4770      	bx	lr

080094c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	6039      	str	r1, [r7, #0]
 80094d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2212      	movs	r2, #18
 80094d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094da:	4b03      	ldr	r3, [pc, #12]	; (80094e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bc80      	pop	{r7}
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	20000138 	.word	0x20000138

080094ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2204      	movs	r2, #4
 80094fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094fe:	4b03      	ldr	r3, [pc, #12]	; (800950c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	2000014c 	.word	0x2000014c

08009510 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d105      	bne.n	800952e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	4907      	ldr	r1, [pc, #28]	; (8009544 <USBD_FS_ProductStrDescriptor+0x34>)
 8009526:	4808      	ldr	r0, [pc, #32]	; (8009548 <USBD_FS_ProductStrDescriptor+0x38>)
 8009528:	f7ff fea8 	bl	800927c <USBD_GetString>
 800952c:	e004      	b.n	8009538 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	4904      	ldr	r1, [pc, #16]	; (8009544 <USBD_FS_ProductStrDescriptor+0x34>)
 8009532:	4805      	ldr	r0, [pc, #20]	; (8009548 <USBD_FS_ProductStrDescriptor+0x38>)
 8009534:	f7ff fea2 	bl	800927c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009538:	4b02      	ldr	r3, [pc, #8]	; (8009544 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000640 	.word	0x20000640
 8009548:	0800b224 	.word	0x0800b224

0800954c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	4904      	ldr	r1, [pc, #16]	; (800956c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800955c:	4804      	ldr	r0, [pc, #16]	; (8009570 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800955e:	f7ff fe8d 	bl	800927c <USBD_GetString>
  return USBD_StrDesc;
 8009562:	4b02      	ldr	r3, [pc, #8]	; (800956c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009564:	4618      	mov	r0, r3
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20000640 	.word	0x20000640
 8009570:	0800b234 	.word	0x0800b234

08009574 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	6039      	str	r1, [r7, #0]
 800957e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	221a      	movs	r2, #26
 8009584:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009586:	f000 f843 	bl	8009610 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800958a:	4b02      	ldr	r3, [pc, #8]	; (8009594 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000150 	.word	0x20000150

08009598 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d105      	bne.n	80095b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4907      	ldr	r1, [pc, #28]	; (80095cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ae:	4808      	ldr	r0, [pc, #32]	; (80095d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095b0:	f7ff fe64 	bl	800927c <USBD_GetString>
 80095b4:	e004      	b.n	80095c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	4904      	ldr	r1, [pc, #16]	; (80095cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ba:	4805      	ldr	r0, [pc, #20]	; (80095d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095bc:	f7ff fe5e 	bl	800927c <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c0:	4b02      	ldr	r3, [pc, #8]	; (80095cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20000640 	.word	0x20000640
 80095d0:	0800b240 	.word	0x0800b240

080095d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	6039      	str	r1, [r7, #0]
 80095de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d105      	bne.n	80095f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	4907      	ldr	r1, [pc, #28]	; (8009608 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ea:	4808      	ldr	r0, [pc, #32]	; (800960c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095ec:	f7ff fe46 	bl	800927c <USBD_GetString>
 80095f0:	e004      	b.n	80095fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	4904      	ldr	r1, [pc, #16]	; (8009608 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095f6:	4805      	ldr	r0, [pc, #20]	; (800960c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095f8:	f7ff fe40 	bl	800927c <USBD_GetString>
  }
  return USBD_StrDesc;
 80095fc:	4b02      	ldr	r3, [pc, #8]	; (8009608 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20000640 	.word	0x20000640
 800960c:	0800b254 	.word	0x0800b254

08009610 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009616:	4b0f      	ldr	r3, [pc, #60]	; (8009654 <Get_SerialNum+0x44>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800961c:	4b0e      	ldr	r3, [pc, #56]	; (8009658 <Get_SerialNum+0x48>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009622:	4b0e      	ldr	r3, [pc, #56]	; (800965c <Get_SerialNum+0x4c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d009      	beq.n	800964a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009636:	2208      	movs	r2, #8
 8009638:	4909      	ldr	r1, [pc, #36]	; (8009660 <Get_SerialNum+0x50>)
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 f814 	bl	8009668 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009640:	2204      	movs	r2, #4
 8009642:	4908      	ldr	r1, [pc, #32]	; (8009664 <Get_SerialNum+0x54>)
 8009644:	68b8      	ldr	r0, [r7, #8]
 8009646:	f000 f80f 	bl	8009668 <IntToUnicode>
  }
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	1ffff7e8 	.word	0x1ffff7e8
 8009658:	1ffff7ec 	.word	0x1ffff7ec
 800965c:	1ffff7f0 	.word	0x1ffff7f0
 8009660:	20000152 	.word	0x20000152
 8009664:	20000162 	.word	0x20000162

08009668 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009668:	b480      	push	{r7}
 800966a:	b087      	sub	sp, #28
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	4613      	mov	r3, r2
 8009674:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800967a:	2300      	movs	r3, #0
 800967c:	75fb      	strb	r3, [r7, #23]
 800967e:	e027      	b.n	80096d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	0f1b      	lsrs	r3, r3, #28
 8009684:	2b09      	cmp	r3, #9
 8009686:	d80b      	bhi.n	80096a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	0f1b      	lsrs	r3, r3, #28
 800968c:	b2da      	uxtb	r2, r3
 800968e:	7dfb      	ldrb	r3, [r7, #23]
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	4619      	mov	r1, r3
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	440b      	add	r3, r1
 8009698:	3230      	adds	r2, #48	; 0x30
 800969a:	b2d2      	uxtb	r2, r2
 800969c:	701a      	strb	r2, [r3, #0]
 800969e:	e00a      	b.n	80096b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	0f1b      	lsrs	r3, r3, #28
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	005b      	lsls	r3, r3, #1
 80096aa:	4619      	mov	r1, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	440b      	add	r3, r1
 80096b0:	3237      	adds	r2, #55	; 0x37
 80096b2:	b2d2      	uxtb	r2, r2
 80096b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	3301      	adds	r3, #1
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	4413      	add	r3, r2
 80096c6:	2200      	movs	r2, #0
 80096c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	3301      	adds	r3, #1
 80096ce:	75fb      	strb	r3, [r7, #23]
 80096d0:	7dfa      	ldrb	r2, [r7, #23]
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d3d3      	bcc.n	8009680 <IntToUnicode+0x18>
  }
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	bc80      	pop	{r7}
 80096e2:	4770      	bx	lr

080096e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a0d      	ldr	r2, [pc, #52]	; (8009728 <HAL_PCD_MspInit+0x44>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d113      	bne.n	800971e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096f6:	4b0d      	ldr	r3, [pc, #52]	; (800972c <HAL_PCD_MspInit+0x48>)
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	4a0c      	ldr	r2, [pc, #48]	; (800972c <HAL_PCD_MspInit+0x48>)
 80096fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009700:	61d3      	str	r3, [r2, #28]
 8009702:	4b0a      	ldr	r3, [pc, #40]	; (800972c <HAL_PCD_MspInit+0x48>)
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	2014      	movs	r0, #20
 8009714:	f7f8 fa9d 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009718:	2014      	movs	r0, #20
 800971a:	f7f8 fab6 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	40005c00 	.word	0x40005c00
 800972c:	40021000 	.word	0x40021000

08009730 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009744:	4619      	mov	r1, r3
 8009746:	4610      	mov	r0, r2
 8009748:	f7fe fe68 	bl	800841c <USBD_LL_SetupStage>
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009766:	78fa      	ldrb	r2, [r7, #3]
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	00db      	lsls	r3, r3, #3
 8009772:	440b      	add	r3, r1
 8009774:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	78fb      	ldrb	r3, [r7, #3]
 800977c:	4619      	mov	r1, r3
 800977e:	f7fe fe9a 	bl	80084b6 <USBD_LL_DataOutStage>
}
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	460b      	mov	r3, r1
 8009794:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800979c:	78fa      	ldrb	r2, [r7, #3]
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	4613      	mov	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	440b      	add	r3, r1
 80097aa:	333c      	adds	r3, #60	; 0x3c
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	4619      	mov	r1, r3
 80097b2:	f7fe fef1 	bl	8008598 <USBD_LL_DataInStage>
}
 80097b6:	bf00      	nop
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff f801 	bl	80087d4 <USBD_LL_SOF>
}
 80097d2:	bf00      	nop
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097e2:	2301      	movs	r3, #1
 80097e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d001      	beq.n	80097f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097ee:	f7f7 fa71 	bl	8000cd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80097f8:	7bfa      	ldrb	r2, [r7, #15]
 80097fa:	4611      	mov	r1, r2
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe ffb1 	bl	8008764 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009808:	4618      	mov	r0, r3
 800980a:	f7fe ff6a 	bl	80086e2 <USBD_LL_Reset>
}
 800980e:	bf00      	nop
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
	...

08009818 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009826:	4618      	mov	r0, r3
 8009828:	f7fe ffab 	bl	8008782 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009834:	4b04      	ldr	r3, [pc, #16]	; (8009848 <HAL_PCD_SuspendCallback+0x30>)
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	4a03      	ldr	r2, [pc, #12]	; (8009848 <HAL_PCD_SuspendCallback+0x30>)
 800983a:	f043 0306 	orr.w	r3, r3, #6
 800983e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	e000ed00 	.word	0xe000ed00

0800984c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe ffa5 	bl	80087aa <USBD_LL_Resume>
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009870:	4a23      	ldr	r2, [pc, #140]	; (8009900 <USBD_LL_Init+0x98>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a21      	ldr	r2, [pc, #132]	; (8009900 <USBD_LL_Init+0x98>)
 800987c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009880:	4b1f      	ldr	r3, [pc, #124]	; (8009900 <USBD_LL_Init+0x98>)
 8009882:	4a20      	ldr	r2, [pc, #128]	; (8009904 <USBD_LL_Init+0x9c>)
 8009884:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009886:	4b1e      	ldr	r3, [pc, #120]	; (8009900 <USBD_LL_Init+0x98>)
 8009888:	2208      	movs	r2, #8
 800988a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800988c:	4b1c      	ldr	r3, [pc, #112]	; (8009900 <USBD_LL_Init+0x98>)
 800988e:	2202      	movs	r2, #2
 8009890:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009892:	4b1b      	ldr	r3, [pc, #108]	; (8009900 <USBD_LL_Init+0x98>)
 8009894:	2200      	movs	r2, #0
 8009896:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009898:	4b19      	ldr	r3, [pc, #100]	; (8009900 <USBD_LL_Init+0x98>)
 800989a:	2200      	movs	r2, #0
 800989c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800989e:	4b18      	ldr	r3, [pc, #96]	; (8009900 <USBD_LL_Init+0x98>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098a4:	4816      	ldr	r0, [pc, #88]	; (8009900 <USBD_LL_Init+0x98>)
 80098a6:	f7f8 fdc5 	bl	8002434 <HAL_PCD_Init>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80098b0:	f7f7 fa10 	bl	8000cd4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098ba:	2318      	movs	r3, #24
 80098bc:	2200      	movs	r2, #0
 80098be:	2100      	movs	r1, #0
 80098c0:	f7fa fa22 	bl	8003d08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098ca:	2358      	movs	r3, #88	; 0x58
 80098cc:	2200      	movs	r2, #0
 80098ce:	2180      	movs	r1, #128	; 0x80
 80098d0:	f7fa fa1a 	bl	8003d08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098da:	2398      	movs	r3, #152	; 0x98
 80098dc:	2200      	movs	r2, #0
 80098de:	2181      	movs	r1, #129	; 0x81
 80098e0:	f7fa fa12 	bl	8003d08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098ea:	23d8      	movs	r3, #216	; 0xd8
 80098ec:	2200      	movs	r2, #0
 80098ee:	2101      	movs	r1, #1
 80098f0:	f7fa fa0a 	bl	8003d08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000840 	.word	0x20000840
 8009904:	40005c00 	.word	0x40005c00

08009908 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800991e:	4618      	mov	r0, r3
 8009920:	f7f8 fe93 	bl	800264a <HAL_PCD_Start>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	4618      	mov	r0, r3
 800992c:	f000 f93c 	bl	8009ba8 <USBD_Get_USB_Status>
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009934:	7bbb      	ldrb	r3, [r7, #14]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	4608      	mov	r0, r1
 8009948:	4611      	mov	r1, r2
 800994a:	461a      	mov	r2, r3
 800994c:	4603      	mov	r3, r0
 800994e:	70fb      	strb	r3, [r7, #3]
 8009950:	460b      	mov	r3, r1
 8009952:	70bb      	strb	r3, [r7, #2]
 8009954:	4613      	mov	r3, r2
 8009956:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009966:	78bb      	ldrb	r3, [r7, #2]
 8009968:	883a      	ldrh	r2, [r7, #0]
 800996a:	78f9      	ldrb	r1, [r7, #3]
 800996c:	f7f9 f80b 	bl	8002986 <HAL_PCD_EP_Open>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	4618      	mov	r0, r3
 8009978:	f000 f916 	bl	8009ba8 <USBD_Get_USB_Status>
 800997c:	4603      	mov	r3, r0
 800997e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009980:	7bbb      	ldrb	r3, [r7, #14]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099a4:	78fa      	ldrb	r2, [r7, #3]
 80099a6:	4611      	mov	r1, r2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f9 f852 	bl	8002a52 <HAL_PCD_EP_Close>
 80099ae:	4603      	mov	r3, r0
 80099b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f8f7 	bl	8009ba8 <USBD_Get_USB_Status>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099be:	7bbb      	ldrb	r3, [r7, #14]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099e2:	78fa      	ldrb	r2, [r7, #3]
 80099e4:	4611      	mov	r1, r2
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7f9 f8fb 	bl	8002be2 <HAL_PCD_EP_SetStall>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 f8d8 	bl	8009ba8 <USBD_Get_USB_Status>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a20:	78fa      	ldrb	r2, [r7, #3]
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7f9 f93c 	bl	8002ca2 <HAL_PCD_EP_ClrStall>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 f8b9 	bl	8009ba8 <USBD_Get_USB_Status>
 8009a36:	4603      	mov	r3, r0
 8009a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	da0c      	bge.n	8009a7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a66:	68f9      	ldr	r1, [r7, #12]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	440b      	add	r3, r1
 8009a74:	3302      	adds	r3, #2
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	e00b      	b.n	8009a92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a80:	68f9      	ldr	r1, [r7, #12]
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	00db      	lsls	r3, r3, #3
 8009a8a:	440b      	add	r3, r1
 8009a8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009a90:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bc80      	pop	{r7}
 8009a9a:	4770      	bx	lr

08009a9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7f8 ff3e 	bl	800293c <HAL_PCD_SetAddress>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f86e 	bl	8009ba8 <USBD_Get_USB_Status>
 8009acc:	4603      	mov	r3, r0
 8009ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b086      	sub	sp, #24
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	72fb      	strb	r3, [r7, #11]
 8009aea:	4613      	mov	r3, r2
 8009aec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009afc:	893b      	ldrh	r3, [r7, #8]
 8009afe:	7af9      	ldrb	r1, [r7, #11]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	f7f9 f82b 	bl	8002b5c <HAL_PCD_EP_Transmit>
 8009b06:	4603      	mov	r3, r0
 8009b08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 f84b 	bl	8009ba8 <USBD_Get_USB_Status>
 8009b12:	4603      	mov	r3, r0
 8009b14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b16:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	607a      	str	r2, [r7, #4]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	72fb      	strb	r3, [r7, #11]
 8009b30:	4613      	mov	r3, r2
 8009b32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b42:	893b      	ldrh	r3, [r7, #8]
 8009b44:	7af9      	ldrb	r1, [r7, #11]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	f7f8 ffcb 	bl	8002ae2 <HAL_PCD_EP_Receive>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b50:	7dfb      	ldrb	r3, [r7, #23]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 f828 	bl	8009ba8 <USBD_Get_USB_Status>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009b70:	4b02      	ldr	r3, [pc, #8]	; (8009b7c <USBD_static_malloc+0x14>)
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bc80      	pop	{r7}
 8009b7a:	4770      	bx	lr
 8009b7c:	20000b2c 	.word	0x20000b2c

08009b80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]

}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bc80      	pop	{r7}
 8009b90:	4770      	bx	lr

08009b92 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b92:	b480      	push	{r7}
 8009b94:	b083      	sub	sp, #12
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bc80      	pop	{r7}
 8009ba6:	4770      	bx	lr

08009ba8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bb6:	79fb      	ldrb	r3, [r7, #7]
 8009bb8:	2b03      	cmp	r3, #3
 8009bba:	d817      	bhi.n	8009bec <USBD_Get_USB_Status+0x44>
 8009bbc:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <USBD_Get_USB_Status+0x1c>)
 8009bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc2:	bf00      	nop
 8009bc4:	08009bd5 	.word	0x08009bd5
 8009bc8:	08009bdb 	.word	0x08009bdb
 8009bcc:	08009be1 	.word	0x08009be1
 8009bd0:	08009be7 	.word	0x08009be7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd8:	e00b      	b.n	8009bf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bda:	2302      	movs	r3, #2
 8009bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009bde:	e008      	b.n	8009bf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009be0:	2301      	movs	r3, #1
 8009be2:	73fb      	strb	r3, [r7, #15]
    break;
 8009be4:	e005      	b.n	8009bf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009be6:	2302      	movs	r3, #2
 8009be8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bea:	e002      	b.n	8009bf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bec:	2302      	movs	r3, #2
 8009bee:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf0:	bf00      	nop
  }
  return usb_status;
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bc80      	pop	{r7}
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop

08009c00 <atoi>:
 8009c00:	220a      	movs	r2, #10
 8009c02:	2100      	movs	r1, #0
 8009c04:	f000 b92a 	b.w	8009e5c <strtol>

08009c08 <__errno>:
 8009c08:	4b01      	ldr	r3, [pc, #4]	; (8009c10 <__errno+0x8>)
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	2000016c 	.word	0x2000016c

08009c14 <__libc_init_array>:
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	2600      	movs	r6, #0
 8009c18:	4d0c      	ldr	r5, [pc, #48]	; (8009c4c <__libc_init_array+0x38>)
 8009c1a:	4c0d      	ldr	r4, [pc, #52]	; (8009c50 <__libc_init_array+0x3c>)
 8009c1c:	1b64      	subs	r4, r4, r5
 8009c1e:	10a4      	asrs	r4, r4, #2
 8009c20:	42a6      	cmp	r6, r4
 8009c22:	d109      	bne.n	8009c38 <__libc_init_array+0x24>
 8009c24:	f001 fae0 	bl	800b1e8 <_init>
 8009c28:	2600      	movs	r6, #0
 8009c2a:	4d0a      	ldr	r5, [pc, #40]	; (8009c54 <__libc_init_array+0x40>)
 8009c2c:	4c0a      	ldr	r4, [pc, #40]	; (8009c58 <__libc_init_array+0x44>)
 8009c2e:	1b64      	subs	r4, r4, r5
 8009c30:	10a4      	asrs	r4, r4, #2
 8009c32:	42a6      	cmp	r6, r4
 8009c34:	d105      	bne.n	8009c42 <__libc_init_array+0x2e>
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c3c:	4798      	blx	r3
 8009c3e:	3601      	adds	r6, #1
 8009c40:	e7ee      	b.n	8009c20 <__libc_init_array+0xc>
 8009c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c46:	4798      	blx	r3
 8009c48:	3601      	adds	r6, #1
 8009c4a:	e7f2      	b.n	8009c32 <__libc_init_array+0x1e>
 8009c4c:	0800b4cc 	.word	0x0800b4cc
 8009c50:	0800b4cc 	.word	0x0800b4cc
 8009c54:	0800b4cc 	.word	0x0800b4cc
 8009c58:	0800b4d0 	.word	0x0800b4d0

08009c5c <memset>:
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	4402      	add	r2, r0
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d100      	bne.n	8009c66 <memset+0xa>
 8009c64:	4770      	bx	lr
 8009c66:	f803 1b01 	strb.w	r1, [r3], #1
 8009c6a:	e7f9      	b.n	8009c60 <memset+0x4>

08009c6c <siprintf>:
 8009c6c:	b40e      	push	{r1, r2, r3}
 8009c6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c72:	b500      	push	{lr}
 8009c74:	b09c      	sub	sp, #112	; 0x70
 8009c76:	ab1d      	add	r3, sp, #116	; 0x74
 8009c78:	9002      	str	r0, [sp, #8]
 8009c7a:	9006      	str	r0, [sp, #24]
 8009c7c:	9107      	str	r1, [sp, #28]
 8009c7e:	9104      	str	r1, [sp, #16]
 8009c80:	4808      	ldr	r0, [pc, #32]	; (8009ca4 <siprintf+0x38>)
 8009c82:	4909      	ldr	r1, [pc, #36]	; (8009ca8 <siprintf+0x3c>)
 8009c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c88:	9105      	str	r1, [sp, #20]
 8009c8a:	6800      	ldr	r0, [r0, #0]
 8009c8c:	a902      	add	r1, sp, #8
 8009c8e:	9301      	str	r3, [sp, #4]
 8009c90:	f000 fa5e 	bl	800a150 <_svfiprintf_r>
 8009c94:	2200      	movs	r2, #0
 8009c96:	9b02      	ldr	r3, [sp, #8]
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	b01c      	add	sp, #112	; 0x70
 8009c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ca0:	b003      	add	sp, #12
 8009ca2:	4770      	bx	lr
 8009ca4:	2000016c 	.word	0x2000016c
 8009ca8:	ffff0208 	.word	0xffff0208

08009cac <strtok>:
 8009cac:	4b16      	ldr	r3, [pc, #88]	; (8009d08 <strtok+0x5c>)
 8009cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb2:	681f      	ldr	r7, [r3, #0]
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009cb8:	460e      	mov	r6, r1
 8009cba:	b9ec      	cbnz	r4, 8009cf8 <strtok+0x4c>
 8009cbc:	2050      	movs	r0, #80	; 0x50
 8009cbe:	f000 f907 	bl	8009ed0 <malloc>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	65b8      	str	r0, [r7, #88]	; 0x58
 8009cc6:	b920      	cbnz	r0, 8009cd2 <strtok+0x26>
 8009cc8:	2157      	movs	r1, #87	; 0x57
 8009cca:	4b10      	ldr	r3, [pc, #64]	; (8009d0c <strtok+0x60>)
 8009ccc:	4810      	ldr	r0, [pc, #64]	; (8009d10 <strtok+0x64>)
 8009cce:	f000 f8cf 	bl	8009e70 <__assert_func>
 8009cd2:	e9c0 4400 	strd	r4, r4, [r0]
 8009cd6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009cda:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009cde:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009ce2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009ce6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009cea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009cee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009cf2:	6184      	str	r4, [r0, #24]
 8009cf4:	7704      	strb	r4, [r0, #28]
 8009cf6:	6244      	str	r4, [r0, #36]	; 0x24
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d04:	f000 b806 	b.w	8009d14 <__strtok_r>
 8009d08:	2000016c 	.word	0x2000016c
 8009d0c:	0800b288 	.word	0x0800b288
 8009d10:	0800b29f 	.word	0x0800b29f

08009d14 <__strtok_r>:
 8009d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d16:	b908      	cbnz	r0, 8009d1c <__strtok_r+0x8>
 8009d18:	6810      	ldr	r0, [r2, #0]
 8009d1a:	b188      	cbz	r0, 8009d40 <__strtok_r+0x2c>
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	460f      	mov	r7, r1
 8009d20:	4620      	mov	r0, r4
 8009d22:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009d26:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009d2a:	b91e      	cbnz	r6, 8009d34 <__strtok_r+0x20>
 8009d2c:	b965      	cbnz	r5, 8009d48 <__strtok_r+0x34>
 8009d2e:	4628      	mov	r0, r5
 8009d30:	6015      	str	r5, [r2, #0]
 8009d32:	e005      	b.n	8009d40 <__strtok_r+0x2c>
 8009d34:	42b5      	cmp	r5, r6
 8009d36:	d1f6      	bne.n	8009d26 <__strtok_r+0x12>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1f0      	bne.n	8009d1e <__strtok_r+0xa>
 8009d3c:	6014      	str	r4, [r2, #0]
 8009d3e:	7003      	strb	r3, [r0, #0]
 8009d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d42:	461c      	mov	r4, r3
 8009d44:	e00c      	b.n	8009d60 <__strtok_r+0x4c>
 8009d46:	b915      	cbnz	r5, 8009d4e <__strtok_r+0x3a>
 8009d48:	460e      	mov	r6, r1
 8009d4a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d4e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009d52:	42ab      	cmp	r3, r5
 8009d54:	d1f7      	bne.n	8009d46 <__strtok_r+0x32>
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d0f3      	beq.n	8009d42 <__strtok_r+0x2e>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009d60:	6014      	str	r4, [r2, #0]
 8009d62:	e7ed      	b.n	8009d40 <__strtok_r+0x2c>

08009d64 <_strtol_l.constprop.0>:
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d6a:	4680      	mov	r8, r0
 8009d6c:	d001      	beq.n	8009d72 <_strtol_l.constprop.0+0xe>
 8009d6e:	2b24      	cmp	r3, #36	; 0x24
 8009d70:	d906      	bls.n	8009d80 <_strtol_l.constprop.0+0x1c>
 8009d72:	f7ff ff49 	bl	8009c08 <__errno>
 8009d76:	2316      	movs	r3, #22
 8009d78:	6003      	str	r3, [r0, #0]
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d80:	460d      	mov	r5, r1
 8009d82:	4f35      	ldr	r7, [pc, #212]	; (8009e58 <_strtol_l.constprop.0+0xf4>)
 8009d84:	4628      	mov	r0, r5
 8009d86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d8a:	5de6      	ldrb	r6, [r4, r7]
 8009d8c:	f016 0608 	ands.w	r6, r6, #8
 8009d90:	d1f8      	bne.n	8009d84 <_strtol_l.constprop.0+0x20>
 8009d92:	2c2d      	cmp	r4, #45	; 0x2d
 8009d94:	d12f      	bne.n	8009df6 <_strtol_l.constprop.0+0x92>
 8009d96:	2601      	movs	r6, #1
 8009d98:	782c      	ldrb	r4, [r5, #0]
 8009d9a:	1c85      	adds	r5, r0, #2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d057      	beq.n	8009e50 <_strtol_l.constprop.0+0xec>
 8009da0:	2b10      	cmp	r3, #16
 8009da2:	d109      	bne.n	8009db8 <_strtol_l.constprop.0+0x54>
 8009da4:	2c30      	cmp	r4, #48	; 0x30
 8009da6:	d107      	bne.n	8009db8 <_strtol_l.constprop.0+0x54>
 8009da8:	7828      	ldrb	r0, [r5, #0]
 8009daa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009dae:	2858      	cmp	r0, #88	; 0x58
 8009db0:	d149      	bne.n	8009e46 <_strtol_l.constprop.0+0xe2>
 8009db2:	2310      	movs	r3, #16
 8009db4:	786c      	ldrb	r4, [r5, #1]
 8009db6:	3502      	adds	r5, #2
 8009db8:	2700      	movs	r7, #0
 8009dba:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009dbe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009dc2:	fbbe f9f3 	udiv	r9, lr, r3
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	fb03 ea19 	mls	sl, r3, r9, lr
 8009dcc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009dd0:	f1bc 0f09 	cmp.w	ip, #9
 8009dd4:	d814      	bhi.n	8009e00 <_strtol_l.constprop.0+0x9c>
 8009dd6:	4664      	mov	r4, ip
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	dd22      	ble.n	8009e22 <_strtol_l.constprop.0+0xbe>
 8009ddc:	2f00      	cmp	r7, #0
 8009dde:	db1d      	blt.n	8009e1c <_strtol_l.constprop.0+0xb8>
 8009de0:	4581      	cmp	r9, r0
 8009de2:	d31b      	bcc.n	8009e1c <_strtol_l.constprop.0+0xb8>
 8009de4:	d101      	bne.n	8009dea <_strtol_l.constprop.0+0x86>
 8009de6:	45a2      	cmp	sl, r4
 8009de8:	db18      	blt.n	8009e1c <_strtol_l.constprop.0+0xb8>
 8009dea:	2701      	movs	r7, #1
 8009dec:	fb00 4003 	mla	r0, r0, r3, r4
 8009df0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009df4:	e7ea      	b.n	8009dcc <_strtol_l.constprop.0+0x68>
 8009df6:	2c2b      	cmp	r4, #43	; 0x2b
 8009df8:	bf04      	itt	eq
 8009dfa:	782c      	ldrbeq	r4, [r5, #0]
 8009dfc:	1c85      	addeq	r5, r0, #2
 8009dfe:	e7cd      	b.n	8009d9c <_strtol_l.constprop.0+0x38>
 8009e00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009e04:	f1bc 0f19 	cmp.w	ip, #25
 8009e08:	d801      	bhi.n	8009e0e <_strtol_l.constprop.0+0xaa>
 8009e0a:	3c37      	subs	r4, #55	; 0x37
 8009e0c:	e7e4      	b.n	8009dd8 <_strtol_l.constprop.0+0x74>
 8009e0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009e12:	f1bc 0f19 	cmp.w	ip, #25
 8009e16:	d804      	bhi.n	8009e22 <_strtol_l.constprop.0+0xbe>
 8009e18:	3c57      	subs	r4, #87	; 0x57
 8009e1a:	e7dd      	b.n	8009dd8 <_strtol_l.constprop.0+0x74>
 8009e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8009e20:	e7e6      	b.n	8009df0 <_strtol_l.constprop.0+0x8c>
 8009e22:	2f00      	cmp	r7, #0
 8009e24:	da07      	bge.n	8009e36 <_strtol_l.constprop.0+0xd2>
 8009e26:	2322      	movs	r3, #34	; 0x22
 8009e28:	4670      	mov	r0, lr
 8009e2a:	f8c8 3000 	str.w	r3, [r8]
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	d0a4      	beq.n	8009d7c <_strtol_l.constprop.0+0x18>
 8009e32:	1e69      	subs	r1, r5, #1
 8009e34:	e005      	b.n	8009e42 <_strtol_l.constprop.0+0xde>
 8009e36:	b106      	cbz	r6, 8009e3a <_strtol_l.constprop.0+0xd6>
 8009e38:	4240      	negs	r0, r0
 8009e3a:	2a00      	cmp	r2, #0
 8009e3c:	d09e      	beq.n	8009d7c <_strtol_l.constprop.0+0x18>
 8009e3e:	2f00      	cmp	r7, #0
 8009e40:	d1f7      	bne.n	8009e32 <_strtol_l.constprop.0+0xce>
 8009e42:	6011      	str	r1, [r2, #0]
 8009e44:	e79a      	b.n	8009d7c <_strtol_l.constprop.0+0x18>
 8009e46:	2430      	movs	r4, #48	; 0x30
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1b5      	bne.n	8009db8 <_strtol_l.constprop.0+0x54>
 8009e4c:	2308      	movs	r3, #8
 8009e4e:	e7b3      	b.n	8009db8 <_strtol_l.constprop.0+0x54>
 8009e50:	2c30      	cmp	r4, #48	; 0x30
 8009e52:	d0a9      	beq.n	8009da8 <_strtol_l.constprop.0+0x44>
 8009e54:	230a      	movs	r3, #10
 8009e56:	e7af      	b.n	8009db8 <_strtol_l.constprop.0+0x54>
 8009e58:	0800b339 	.word	0x0800b339

08009e5c <strtol>:
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	460a      	mov	r2, r1
 8009e60:	4601      	mov	r1, r0
 8009e62:	4802      	ldr	r0, [pc, #8]	; (8009e6c <strtol+0x10>)
 8009e64:	6800      	ldr	r0, [r0, #0]
 8009e66:	f7ff bf7d 	b.w	8009d64 <_strtol_l.constprop.0>
 8009e6a:	bf00      	nop
 8009e6c:	2000016c 	.word	0x2000016c

08009e70 <__assert_func>:
 8009e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e72:	4614      	mov	r4, r2
 8009e74:	461a      	mov	r2, r3
 8009e76:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <__assert_func+0x2c>)
 8009e78:	4605      	mov	r5, r0
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68d8      	ldr	r0, [r3, #12]
 8009e7e:	b14c      	cbz	r4, 8009e94 <__assert_func+0x24>
 8009e80:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <__assert_func+0x30>)
 8009e82:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e86:	9100      	str	r1, [sp, #0]
 8009e88:	462b      	mov	r3, r5
 8009e8a:	4906      	ldr	r1, [pc, #24]	; (8009ea4 <__assert_func+0x34>)
 8009e8c:	f000 f80e 	bl	8009eac <fiprintf>
 8009e90:	f000 fe1c 	bl	800aacc <abort>
 8009e94:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <__assert_func+0x38>)
 8009e96:	461c      	mov	r4, r3
 8009e98:	e7f3      	b.n	8009e82 <__assert_func+0x12>
 8009e9a:	bf00      	nop
 8009e9c:	2000016c 	.word	0x2000016c
 8009ea0:	0800b2fc 	.word	0x0800b2fc
 8009ea4:	0800b309 	.word	0x0800b309
 8009ea8:	0800b337 	.word	0x0800b337

08009eac <fiprintf>:
 8009eac:	b40e      	push	{r1, r2, r3}
 8009eae:	b503      	push	{r0, r1, lr}
 8009eb0:	4601      	mov	r1, r0
 8009eb2:	ab03      	add	r3, sp, #12
 8009eb4:	4805      	ldr	r0, [pc, #20]	; (8009ecc <fiprintf+0x20>)
 8009eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eba:	6800      	ldr	r0, [r0, #0]
 8009ebc:	9301      	str	r3, [sp, #4]
 8009ebe:	f000 fa6f 	bl	800a3a0 <_vfiprintf_r>
 8009ec2:	b002      	add	sp, #8
 8009ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec8:	b003      	add	sp, #12
 8009eca:	4770      	bx	lr
 8009ecc:	2000016c 	.word	0x2000016c

08009ed0 <malloc>:
 8009ed0:	4b02      	ldr	r3, [pc, #8]	; (8009edc <malloc+0xc>)
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	6818      	ldr	r0, [r3, #0]
 8009ed6:	f000 b86b 	b.w	8009fb0 <_malloc_r>
 8009eda:	bf00      	nop
 8009edc:	2000016c 	.word	0x2000016c

08009ee0 <_free_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	d040      	beq.n	8009f6a <_free_r+0x8a>
 8009ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eec:	1f0c      	subs	r4, r1, #4
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	bfb8      	it	lt
 8009ef2:	18e4      	addlt	r4, r4, r3
 8009ef4:	f001 f844 	bl	800af80 <__malloc_lock>
 8009ef8:	4a1c      	ldr	r2, [pc, #112]	; (8009f6c <_free_r+0x8c>)
 8009efa:	6813      	ldr	r3, [r2, #0]
 8009efc:	b933      	cbnz	r3, 8009f0c <_free_r+0x2c>
 8009efe:	6063      	str	r3, [r4, #4]
 8009f00:	6014      	str	r4, [r2, #0]
 8009f02:	4628      	mov	r0, r5
 8009f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f08:	f001 b840 	b.w	800af8c <__malloc_unlock>
 8009f0c:	42a3      	cmp	r3, r4
 8009f0e:	d908      	bls.n	8009f22 <_free_r+0x42>
 8009f10:	6820      	ldr	r0, [r4, #0]
 8009f12:	1821      	adds	r1, r4, r0
 8009f14:	428b      	cmp	r3, r1
 8009f16:	bf01      	itttt	eq
 8009f18:	6819      	ldreq	r1, [r3, #0]
 8009f1a:	685b      	ldreq	r3, [r3, #4]
 8009f1c:	1809      	addeq	r1, r1, r0
 8009f1e:	6021      	streq	r1, [r4, #0]
 8009f20:	e7ed      	b.n	8009efe <_free_r+0x1e>
 8009f22:	461a      	mov	r2, r3
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	b10b      	cbz	r3, 8009f2c <_free_r+0x4c>
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	d9fa      	bls.n	8009f22 <_free_r+0x42>
 8009f2c:	6811      	ldr	r1, [r2, #0]
 8009f2e:	1850      	adds	r0, r2, r1
 8009f30:	42a0      	cmp	r0, r4
 8009f32:	d10b      	bne.n	8009f4c <_free_r+0x6c>
 8009f34:	6820      	ldr	r0, [r4, #0]
 8009f36:	4401      	add	r1, r0
 8009f38:	1850      	adds	r0, r2, r1
 8009f3a:	4283      	cmp	r3, r0
 8009f3c:	6011      	str	r1, [r2, #0]
 8009f3e:	d1e0      	bne.n	8009f02 <_free_r+0x22>
 8009f40:	6818      	ldr	r0, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	4401      	add	r1, r0
 8009f46:	6011      	str	r1, [r2, #0]
 8009f48:	6053      	str	r3, [r2, #4]
 8009f4a:	e7da      	b.n	8009f02 <_free_r+0x22>
 8009f4c:	d902      	bls.n	8009f54 <_free_r+0x74>
 8009f4e:	230c      	movs	r3, #12
 8009f50:	602b      	str	r3, [r5, #0]
 8009f52:	e7d6      	b.n	8009f02 <_free_r+0x22>
 8009f54:	6820      	ldr	r0, [r4, #0]
 8009f56:	1821      	adds	r1, r4, r0
 8009f58:	428b      	cmp	r3, r1
 8009f5a:	bf01      	itttt	eq
 8009f5c:	6819      	ldreq	r1, [r3, #0]
 8009f5e:	685b      	ldreq	r3, [r3, #4]
 8009f60:	1809      	addeq	r1, r1, r0
 8009f62:	6021      	streq	r1, [r4, #0]
 8009f64:	6063      	str	r3, [r4, #4]
 8009f66:	6054      	str	r4, [r2, #4]
 8009f68:	e7cb      	b.n	8009f02 <_free_r+0x22>
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	20000b84 	.word	0x20000b84

08009f70 <sbrk_aligned>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	4e0e      	ldr	r6, [pc, #56]	; (8009fac <sbrk_aligned+0x3c>)
 8009f74:	460c      	mov	r4, r1
 8009f76:	6831      	ldr	r1, [r6, #0]
 8009f78:	4605      	mov	r5, r0
 8009f7a:	b911      	cbnz	r1, 8009f82 <sbrk_aligned+0x12>
 8009f7c:	f000 fcd6 	bl	800a92c <_sbrk_r>
 8009f80:	6030      	str	r0, [r6, #0]
 8009f82:	4621      	mov	r1, r4
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 fcd1 	bl	800a92c <_sbrk_r>
 8009f8a:	1c43      	adds	r3, r0, #1
 8009f8c:	d00a      	beq.n	8009fa4 <sbrk_aligned+0x34>
 8009f8e:	1cc4      	adds	r4, r0, #3
 8009f90:	f024 0403 	bic.w	r4, r4, #3
 8009f94:	42a0      	cmp	r0, r4
 8009f96:	d007      	beq.n	8009fa8 <sbrk_aligned+0x38>
 8009f98:	1a21      	subs	r1, r4, r0
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f000 fcc6 	bl	800a92c <_sbrk_r>
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d101      	bne.n	8009fa8 <sbrk_aligned+0x38>
 8009fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8009fa8:	4620      	mov	r0, r4
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	20000b88 	.word	0x20000b88

08009fb0 <_malloc_r>:
 8009fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb4:	1ccd      	adds	r5, r1, #3
 8009fb6:	f025 0503 	bic.w	r5, r5, #3
 8009fba:	3508      	adds	r5, #8
 8009fbc:	2d0c      	cmp	r5, #12
 8009fbe:	bf38      	it	cc
 8009fc0:	250c      	movcc	r5, #12
 8009fc2:	2d00      	cmp	r5, #0
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	db01      	blt.n	8009fcc <_malloc_r+0x1c>
 8009fc8:	42a9      	cmp	r1, r5
 8009fca:	d905      	bls.n	8009fd8 <_malloc_r+0x28>
 8009fcc:	230c      	movs	r3, #12
 8009fce:	2600      	movs	r6, #0
 8009fd0:	603b      	str	r3, [r7, #0]
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd8:	4e2e      	ldr	r6, [pc, #184]	; (800a094 <_malloc_r+0xe4>)
 8009fda:	f000 ffd1 	bl	800af80 <__malloc_lock>
 8009fde:	6833      	ldr	r3, [r6, #0]
 8009fe0:	461c      	mov	r4, r3
 8009fe2:	bb34      	cbnz	r4, 800a032 <_malloc_r+0x82>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	f7ff ffc2 	bl	8009f70 <sbrk_aligned>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	4604      	mov	r4, r0
 8009ff0:	d14d      	bne.n	800a08e <_malloc_r+0xde>
 8009ff2:	6834      	ldr	r4, [r6, #0]
 8009ff4:	4626      	mov	r6, r4
 8009ff6:	2e00      	cmp	r6, #0
 8009ff8:	d140      	bne.n	800a07c <_malloc_r+0xcc>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4638      	mov	r0, r7
 800a000:	eb04 0803 	add.w	r8, r4, r3
 800a004:	f000 fc92 	bl	800a92c <_sbrk_r>
 800a008:	4580      	cmp	r8, r0
 800a00a:	d13a      	bne.n	800a082 <_malloc_r+0xd2>
 800a00c:	6821      	ldr	r1, [r4, #0]
 800a00e:	3503      	adds	r5, #3
 800a010:	1a6d      	subs	r5, r5, r1
 800a012:	f025 0503 	bic.w	r5, r5, #3
 800a016:	3508      	adds	r5, #8
 800a018:	2d0c      	cmp	r5, #12
 800a01a:	bf38      	it	cc
 800a01c:	250c      	movcc	r5, #12
 800a01e:	4638      	mov	r0, r7
 800a020:	4629      	mov	r1, r5
 800a022:	f7ff ffa5 	bl	8009f70 <sbrk_aligned>
 800a026:	3001      	adds	r0, #1
 800a028:	d02b      	beq.n	800a082 <_malloc_r+0xd2>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	442b      	add	r3, r5
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	e00e      	b.n	800a050 <_malloc_r+0xa0>
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	1b52      	subs	r2, r2, r5
 800a036:	d41e      	bmi.n	800a076 <_malloc_r+0xc6>
 800a038:	2a0b      	cmp	r2, #11
 800a03a:	d916      	bls.n	800a06a <_malloc_r+0xba>
 800a03c:	1961      	adds	r1, r4, r5
 800a03e:	42a3      	cmp	r3, r4
 800a040:	6025      	str	r5, [r4, #0]
 800a042:	bf18      	it	ne
 800a044:	6059      	strne	r1, [r3, #4]
 800a046:	6863      	ldr	r3, [r4, #4]
 800a048:	bf08      	it	eq
 800a04a:	6031      	streq	r1, [r6, #0]
 800a04c:	5162      	str	r2, [r4, r5]
 800a04e:	604b      	str	r3, [r1, #4]
 800a050:	4638      	mov	r0, r7
 800a052:	f104 060b 	add.w	r6, r4, #11
 800a056:	f000 ff99 	bl	800af8c <__malloc_unlock>
 800a05a:	f026 0607 	bic.w	r6, r6, #7
 800a05e:	1d23      	adds	r3, r4, #4
 800a060:	1af2      	subs	r2, r6, r3
 800a062:	d0b6      	beq.n	8009fd2 <_malloc_r+0x22>
 800a064:	1b9b      	subs	r3, r3, r6
 800a066:	50a3      	str	r3, [r4, r2]
 800a068:	e7b3      	b.n	8009fd2 <_malloc_r+0x22>
 800a06a:	6862      	ldr	r2, [r4, #4]
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	bf0c      	ite	eq
 800a070:	6032      	streq	r2, [r6, #0]
 800a072:	605a      	strne	r2, [r3, #4]
 800a074:	e7ec      	b.n	800a050 <_malloc_r+0xa0>
 800a076:	4623      	mov	r3, r4
 800a078:	6864      	ldr	r4, [r4, #4]
 800a07a:	e7b2      	b.n	8009fe2 <_malloc_r+0x32>
 800a07c:	4634      	mov	r4, r6
 800a07e:	6876      	ldr	r6, [r6, #4]
 800a080:	e7b9      	b.n	8009ff6 <_malloc_r+0x46>
 800a082:	230c      	movs	r3, #12
 800a084:	4638      	mov	r0, r7
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	f000 ff80 	bl	800af8c <__malloc_unlock>
 800a08c:	e7a1      	b.n	8009fd2 <_malloc_r+0x22>
 800a08e:	6025      	str	r5, [r4, #0]
 800a090:	e7de      	b.n	800a050 <_malloc_r+0xa0>
 800a092:	bf00      	nop
 800a094:	20000b84 	.word	0x20000b84

0800a098 <__ssputs_r>:
 800a098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a09c:	688e      	ldr	r6, [r1, #8]
 800a09e:	4682      	mov	sl, r0
 800a0a0:	429e      	cmp	r6, r3
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	4690      	mov	r8, r2
 800a0a6:	461f      	mov	r7, r3
 800a0a8:	d838      	bhi.n	800a11c <__ssputs_r+0x84>
 800a0aa:	898a      	ldrh	r2, [r1, #12]
 800a0ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0b0:	d032      	beq.n	800a118 <__ssputs_r+0x80>
 800a0b2:	6825      	ldr	r5, [r4, #0]
 800a0b4:	6909      	ldr	r1, [r1, #16]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	eba5 0901 	sub.w	r9, r5, r1
 800a0bc:	6965      	ldr	r5, [r4, #20]
 800a0be:	444b      	add	r3, r9
 800a0c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0c8:	106d      	asrs	r5, r5, #1
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	bf38      	it	cc
 800a0ce:	461d      	movcc	r5, r3
 800a0d0:	0553      	lsls	r3, r2, #21
 800a0d2:	d531      	bpl.n	800a138 <__ssputs_r+0xa0>
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	f7ff ff6b 	bl	8009fb0 <_malloc_r>
 800a0da:	4606      	mov	r6, r0
 800a0dc:	b950      	cbnz	r0, 800a0f4 <__ssputs_r+0x5c>
 800a0de:	230c      	movs	r3, #12
 800a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e4:	f8ca 3000 	str.w	r3, [sl]
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ee:	81a3      	strh	r3, [r4, #12]
 800a0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f4:	464a      	mov	r2, r9
 800a0f6:	6921      	ldr	r1, [r4, #16]
 800a0f8:	f000 ff1a 	bl	800af30 <memcpy>
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	6126      	str	r6, [r4, #16]
 800a10a:	444e      	add	r6, r9
 800a10c:	6026      	str	r6, [r4, #0]
 800a10e:	463e      	mov	r6, r7
 800a110:	6165      	str	r5, [r4, #20]
 800a112:	eba5 0509 	sub.w	r5, r5, r9
 800a116:	60a5      	str	r5, [r4, #8]
 800a118:	42be      	cmp	r6, r7
 800a11a:	d900      	bls.n	800a11e <__ssputs_r+0x86>
 800a11c:	463e      	mov	r6, r7
 800a11e:	4632      	mov	r2, r6
 800a120:	4641      	mov	r1, r8
 800a122:	6820      	ldr	r0, [r4, #0]
 800a124:	f000 ff12 	bl	800af4c <memmove>
 800a128:	68a3      	ldr	r3, [r4, #8]
 800a12a:	2000      	movs	r0, #0
 800a12c:	1b9b      	subs	r3, r3, r6
 800a12e:	60a3      	str	r3, [r4, #8]
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	4433      	add	r3, r6
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	e7db      	b.n	800a0f0 <__ssputs_r+0x58>
 800a138:	462a      	mov	r2, r5
 800a13a:	f000 ff2d 	bl	800af98 <_realloc_r>
 800a13e:	4606      	mov	r6, r0
 800a140:	2800      	cmp	r0, #0
 800a142:	d1e1      	bne.n	800a108 <__ssputs_r+0x70>
 800a144:	4650      	mov	r0, sl
 800a146:	6921      	ldr	r1, [r4, #16]
 800a148:	f7ff feca 	bl	8009ee0 <_free_r>
 800a14c:	e7c7      	b.n	800a0de <__ssputs_r+0x46>
	...

0800a150 <_svfiprintf_r>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	4698      	mov	r8, r3
 800a156:	898b      	ldrh	r3, [r1, #12]
 800a158:	4607      	mov	r7, r0
 800a15a:	061b      	lsls	r3, r3, #24
 800a15c:	460d      	mov	r5, r1
 800a15e:	4614      	mov	r4, r2
 800a160:	b09d      	sub	sp, #116	; 0x74
 800a162:	d50e      	bpl.n	800a182 <_svfiprintf_r+0x32>
 800a164:	690b      	ldr	r3, [r1, #16]
 800a166:	b963      	cbnz	r3, 800a182 <_svfiprintf_r+0x32>
 800a168:	2140      	movs	r1, #64	; 0x40
 800a16a:	f7ff ff21 	bl	8009fb0 <_malloc_r>
 800a16e:	6028      	str	r0, [r5, #0]
 800a170:	6128      	str	r0, [r5, #16]
 800a172:	b920      	cbnz	r0, 800a17e <_svfiprintf_r+0x2e>
 800a174:	230c      	movs	r3, #12
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	e0d1      	b.n	800a322 <_svfiprintf_r+0x1d2>
 800a17e:	2340      	movs	r3, #64	; 0x40
 800a180:	616b      	str	r3, [r5, #20]
 800a182:	2300      	movs	r3, #0
 800a184:	9309      	str	r3, [sp, #36]	; 0x24
 800a186:	2320      	movs	r3, #32
 800a188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a18c:	2330      	movs	r3, #48	; 0x30
 800a18e:	f04f 0901 	mov.w	r9, #1
 800a192:	f8cd 800c 	str.w	r8, [sp, #12]
 800a196:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a33c <_svfiprintf_r+0x1ec>
 800a19a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a19e:	4623      	mov	r3, r4
 800a1a0:	469a      	mov	sl, r3
 800a1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1a6:	b10a      	cbz	r2, 800a1ac <_svfiprintf_r+0x5c>
 800a1a8:	2a25      	cmp	r2, #37	; 0x25
 800a1aa:	d1f9      	bne.n	800a1a0 <_svfiprintf_r+0x50>
 800a1ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a1b0:	d00b      	beq.n	800a1ca <_svfiprintf_r+0x7a>
 800a1b2:	465b      	mov	r3, fp
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7ff ff6d 	bl	800a098 <__ssputs_r>
 800a1be:	3001      	adds	r0, #1
 800a1c0:	f000 80aa 	beq.w	800a318 <_svfiprintf_r+0x1c8>
 800a1c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c6:	445a      	add	r2, fp
 800a1c8:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 80a2 	beq.w	800a318 <_svfiprintf_r+0x1c8>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1de:	f10a 0a01 	add.w	sl, sl, #1
 800a1e2:	9304      	str	r3, [sp, #16]
 800a1e4:	9307      	str	r3, [sp, #28]
 800a1e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a1ec:	4654      	mov	r4, sl
 800a1ee:	2205      	movs	r2, #5
 800a1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f4:	4851      	ldr	r0, [pc, #324]	; (800a33c <_svfiprintf_r+0x1ec>)
 800a1f6:	f000 fe8d 	bl	800af14 <memchr>
 800a1fa:	9a04      	ldr	r2, [sp, #16]
 800a1fc:	b9d8      	cbnz	r0, 800a236 <_svfiprintf_r+0xe6>
 800a1fe:	06d0      	lsls	r0, r2, #27
 800a200:	bf44      	itt	mi
 800a202:	2320      	movmi	r3, #32
 800a204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a208:	0711      	lsls	r1, r2, #28
 800a20a:	bf44      	itt	mi
 800a20c:	232b      	movmi	r3, #43	; 0x2b
 800a20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a212:	f89a 3000 	ldrb.w	r3, [sl]
 800a216:	2b2a      	cmp	r3, #42	; 0x2a
 800a218:	d015      	beq.n	800a246 <_svfiprintf_r+0xf6>
 800a21a:	4654      	mov	r4, sl
 800a21c:	2000      	movs	r0, #0
 800a21e:	f04f 0c0a 	mov.w	ip, #10
 800a222:	9a07      	ldr	r2, [sp, #28]
 800a224:	4621      	mov	r1, r4
 800a226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a22a:	3b30      	subs	r3, #48	; 0x30
 800a22c:	2b09      	cmp	r3, #9
 800a22e:	d94e      	bls.n	800a2ce <_svfiprintf_r+0x17e>
 800a230:	b1b0      	cbz	r0, 800a260 <_svfiprintf_r+0x110>
 800a232:	9207      	str	r2, [sp, #28]
 800a234:	e014      	b.n	800a260 <_svfiprintf_r+0x110>
 800a236:	eba0 0308 	sub.w	r3, r0, r8
 800a23a:	fa09 f303 	lsl.w	r3, r9, r3
 800a23e:	4313      	orrs	r3, r2
 800a240:	46a2      	mov	sl, r4
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	e7d2      	b.n	800a1ec <_svfiprintf_r+0x9c>
 800a246:	9b03      	ldr	r3, [sp, #12]
 800a248:	1d19      	adds	r1, r3, #4
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	9103      	str	r1, [sp, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	bfbb      	ittet	lt
 800a252:	425b      	neglt	r3, r3
 800a254:	f042 0202 	orrlt.w	r2, r2, #2
 800a258:	9307      	strge	r3, [sp, #28]
 800a25a:	9307      	strlt	r3, [sp, #28]
 800a25c:	bfb8      	it	lt
 800a25e:	9204      	strlt	r2, [sp, #16]
 800a260:	7823      	ldrb	r3, [r4, #0]
 800a262:	2b2e      	cmp	r3, #46	; 0x2e
 800a264:	d10c      	bne.n	800a280 <_svfiprintf_r+0x130>
 800a266:	7863      	ldrb	r3, [r4, #1]
 800a268:	2b2a      	cmp	r3, #42	; 0x2a
 800a26a:	d135      	bne.n	800a2d8 <_svfiprintf_r+0x188>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	3402      	adds	r4, #2
 800a270:	1d1a      	adds	r2, r3, #4
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	9203      	str	r2, [sp, #12]
 800a276:	2b00      	cmp	r3, #0
 800a278:	bfb8      	it	lt
 800a27a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a27e:	9305      	str	r3, [sp, #20]
 800a280:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a340 <_svfiprintf_r+0x1f0>
 800a284:	2203      	movs	r2, #3
 800a286:	4650      	mov	r0, sl
 800a288:	7821      	ldrb	r1, [r4, #0]
 800a28a:	f000 fe43 	bl	800af14 <memchr>
 800a28e:	b140      	cbz	r0, 800a2a2 <_svfiprintf_r+0x152>
 800a290:	2340      	movs	r3, #64	; 0x40
 800a292:	eba0 000a 	sub.w	r0, r0, sl
 800a296:	fa03 f000 	lsl.w	r0, r3, r0
 800a29a:	9b04      	ldr	r3, [sp, #16]
 800a29c:	3401      	adds	r4, #1
 800a29e:	4303      	orrs	r3, r0
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a6:	2206      	movs	r2, #6
 800a2a8:	4826      	ldr	r0, [pc, #152]	; (800a344 <_svfiprintf_r+0x1f4>)
 800a2aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2ae:	f000 fe31 	bl	800af14 <memchr>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d038      	beq.n	800a328 <_svfiprintf_r+0x1d8>
 800a2b6:	4b24      	ldr	r3, [pc, #144]	; (800a348 <_svfiprintf_r+0x1f8>)
 800a2b8:	bb1b      	cbnz	r3, 800a302 <_svfiprintf_r+0x1b2>
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	3307      	adds	r3, #7
 800a2be:	f023 0307 	bic.w	r3, r3, #7
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	9303      	str	r3, [sp, #12]
 800a2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c8:	4433      	add	r3, r6
 800a2ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a2cc:	e767      	b.n	800a19e <_svfiprintf_r+0x4e>
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	2001      	movs	r0, #1
 800a2d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2d6:	e7a5      	b.n	800a224 <_svfiprintf_r+0xd4>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f04f 0c0a 	mov.w	ip, #10
 800a2de:	4619      	mov	r1, r3
 800a2e0:	3401      	adds	r4, #1
 800a2e2:	9305      	str	r3, [sp, #20]
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ea:	3a30      	subs	r2, #48	; 0x30
 800a2ec:	2a09      	cmp	r2, #9
 800a2ee:	d903      	bls.n	800a2f8 <_svfiprintf_r+0x1a8>
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0c5      	beq.n	800a280 <_svfiprintf_r+0x130>
 800a2f4:	9105      	str	r1, [sp, #20]
 800a2f6:	e7c3      	b.n	800a280 <_svfiprintf_r+0x130>
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a300:	e7f0      	b.n	800a2e4 <_svfiprintf_r+0x194>
 800a302:	ab03      	add	r3, sp, #12
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	462a      	mov	r2, r5
 800a308:	4638      	mov	r0, r7
 800a30a:	4b10      	ldr	r3, [pc, #64]	; (800a34c <_svfiprintf_r+0x1fc>)
 800a30c:	a904      	add	r1, sp, #16
 800a30e:	f3af 8000 	nop.w
 800a312:	1c42      	adds	r2, r0, #1
 800a314:	4606      	mov	r6, r0
 800a316:	d1d6      	bne.n	800a2c6 <_svfiprintf_r+0x176>
 800a318:	89ab      	ldrh	r3, [r5, #12]
 800a31a:	065b      	lsls	r3, r3, #25
 800a31c:	f53f af2c 	bmi.w	800a178 <_svfiprintf_r+0x28>
 800a320:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a322:	b01d      	add	sp, #116	; 0x74
 800a324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a328:	ab03      	add	r3, sp, #12
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	462a      	mov	r2, r5
 800a32e:	4638      	mov	r0, r7
 800a330:	4b06      	ldr	r3, [pc, #24]	; (800a34c <_svfiprintf_r+0x1fc>)
 800a332:	a904      	add	r1, sp, #16
 800a334:	f000 f9d4 	bl	800a6e0 <_printf_i>
 800a338:	e7eb      	b.n	800a312 <_svfiprintf_r+0x1c2>
 800a33a:	bf00      	nop
 800a33c:	0800b439 	.word	0x0800b439
 800a340:	0800b43f 	.word	0x0800b43f
 800a344:	0800b443 	.word	0x0800b443
 800a348:	00000000 	.word	0x00000000
 800a34c:	0800a099 	.word	0x0800a099

0800a350 <__sfputc_r>:
 800a350:	6893      	ldr	r3, [r2, #8]
 800a352:	b410      	push	{r4}
 800a354:	3b01      	subs	r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	6093      	str	r3, [r2, #8]
 800a35a:	da07      	bge.n	800a36c <__sfputc_r+0x1c>
 800a35c:	6994      	ldr	r4, [r2, #24]
 800a35e:	42a3      	cmp	r3, r4
 800a360:	db01      	blt.n	800a366 <__sfputc_r+0x16>
 800a362:	290a      	cmp	r1, #10
 800a364:	d102      	bne.n	800a36c <__sfputc_r+0x1c>
 800a366:	bc10      	pop	{r4}
 800a368:	f000 baf0 	b.w	800a94c <__swbuf_r>
 800a36c:	6813      	ldr	r3, [r2, #0]
 800a36e:	1c58      	adds	r0, r3, #1
 800a370:	6010      	str	r0, [r2, #0]
 800a372:	7019      	strb	r1, [r3, #0]
 800a374:	4608      	mov	r0, r1
 800a376:	bc10      	pop	{r4}
 800a378:	4770      	bx	lr

0800a37a <__sfputs_r>:
 800a37a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37c:	4606      	mov	r6, r0
 800a37e:	460f      	mov	r7, r1
 800a380:	4614      	mov	r4, r2
 800a382:	18d5      	adds	r5, r2, r3
 800a384:	42ac      	cmp	r4, r5
 800a386:	d101      	bne.n	800a38c <__sfputs_r+0x12>
 800a388:	2000      	movs	r0, #0
 800a38a:	e007      	b.n	800a39c <__sfputs_r+0x22>
 800a38c:	463a      	mov	r2, r7
 800a38e:	4630      	mov	r0, r6
 800a390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a394:	f7ff ffdc 	bl	800a350 <__sfputc_r>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d1f3      	bne.n	800a384 <__sfputs_r+0xa>
 800a39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3a0 <_vfiprintf_r>:
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	460d      	mov	r5, r1
 800a3a6:	4614      	mov	r4, r2
 800a3a8:	4698      	mov	r8, r3
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	b09d      	sub	sp, #116	; 0x74
 800a3ae:	b118      	cbz	r0, 800a3b8 <_vfiprintf_r+0x18>
 800a3b0:	6983      	ldr	r3, [r0, #24]
 800a3b2:	b90b      	cbnz	r3, 800a3b8 <_vfiprintf_r+0x18>
 800a3b4:	f000 fca8 	bl	800ad08 <__sinit>
 800a3b8:	4b89      	ldr	r3, [pc, #548]	; (800a5e0 <_vfiprintf_r+0x240>)
 800a3ba:	429d      	cmp	r5, r3
 800a3bc:	d11b      	bne.n	800a3f6 <_vfiprintf_r+0x56>
 800a3be:	6875      	ldr	r5, [r6, #4]
 800a3c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3c2:	07d9      	lsls	r1, r3, #31
 800a3c4:	d405      	bmi.n	800a3d2 <_vfiprintf_r+0x32>
 800a3c6:	89ab      	ldrh	r3, [r5, #12]
 800a3c8:	059a      	lsls	r2, r3, #22
 800a3ca:	d402      	bmi.n	800a3d2 <_vfiprintf_r+0x32>
 800a3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ce:	f000 fd39 	bl	800ae44 <__retarget_lock_acquire_recursive>
 800a3d2:	89ab      	ldrh	r3, [r5, #12]
 800a3d4:	071b      	lsls	r3, r3, #28
 800a3d6:	d501      	bpl.n	800a3dc <_vfiprintf_r+0x3c>
 800a3d8:	692b      	ldr	r3, [r5, #16]
 800a3da:	b9eb      	cbnz	r3, 800a418 <_vfiprintf_r+0x78>
 800a3dc:	4629      	mov	r1, r5
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f000 fb06 	bl	800a9f0 <__swsetup_r>
 800a3e4:	b1c0      	cbz	r0, 800a418 <_vfiprintf_r+0x78>
 800a3e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3e8:	07dc      	lsls	r4, r3, #31
 800a3ea:	d50e      	bpl.n	800a40a <_vfiprintf_r+0x6a>
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	b01d      	add	sp, #116	; 0x74
 800a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f6:	4b7b      	ldr	r3, [pc, #492]	; (800a5e4 <_vfiprintf_r+0x244>)
 800a3f8:	429d      	cmp	r5, r3
 800a3fa:	d101      	bne.n	800a400 <_vfiprintf_r+0x60>
 800a3fc:	68b5      	ldr	r5, [r6, #8]
 800a3fe:	e7df      	b.n	800a3c0 <_vfiprintf_r+0x20>
 800a400:	4b79      	ldr	r3, [pc, #484]	; (800a5e8 <_vfiprintf_r+0x248>)
 800a402:	429d      	cmp	r5, r3
 800a404:	bf08      	it	eq
 800a406:	68f5      	ldreq	r5, [r6, #12]
 800a408:	e7da      	b.n	800a3c0 <_vfiprintf_r+0x20>
 800a40a:	89ab      	ldrh	r3, [r5, #12]
 800a40c:	0598      	lsls	r0, r3, #22
 800a40e:	d4ed      	bmi.n	800a3ec <_vfiprintf_r+0x4c>
 800a410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a412:	f000 fd18 	bl	800ae46 <__retarget_lock_release_recursive>
 800a416:	e7e9      	b.n	800a3ec <_vfiprintf_r+0x4c>
 800a418:	2300      	movs	r3, #0
 800a41a:	9309      	str	r3, [sp, #36]	; 0x24
 800a41c:	2320      	movs	r3, #32
 800a41e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a422:	2330      	movs	r3, #48	; 0x30
 800a424:	f04f 0901 	mov.w	r9, #1
 800a428:	f8cd 800c 	str.w	r8, [sp, #12]
 800a42c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a5ec <_vfiprintf_r+0x24c>
 800a430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a434:	4623      	mov	r3, r4
 800a436:	469a      	mov	sl, r3
 800a438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a43c:	b10a      	cbz	r2, 800a442 <_vfiprintf_r+0xa2>
 800a43e:	2a25      	cmp	r2, #37	; 0x25
 800a440:	d1f9      	bne.n	800a436 <_vfiprintf_r+0x96>
 800a442:	ebba 0b04 	subs.w	fp, sl, r4
 800a446:	d00b      	beq.n	800a460 <_vfiprintf_r+0xc0>
 800a448:	465b      	mov	r3, fp
 800a44a:	4622      	mov	r2, r4
 800a44c:	4629      	mov	r1, r5
 800a44e:	4630      	mov	r0, r6
 800a450:	f7ff ff93 	bl	800a37a <__sfputs_r>
 800a454:	3001      	adds	r0, #1
 800a456:	f000 80aa 	beq.w	800a5ae <_vfiprintf_r+0x20e>
 800a45a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a45c:	445a      	add	r2, fp
 800a45e:	9209      	str	r2, [sp, #36]	; 0x24
 800a460:	f89a 3000 	ldrb.w	r3, [sl]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 80a2 	beq.w	800a5ae <_vfiprintf_r+0x20e>
 800a46a:	2300      	movs	r3, #0
 800a46c:	f04f 32ff 	mov.w	r2, #4294967295
 800a470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a474:	f10a 0a01 	add.w	sl, sl, #1
 800a478:	9304      	str	r3, [sp, #16]
 800a47a:	9307      	str	r3, [sp, #28]
 800a47c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a480:	931a      	str	r3, [sp, #104]	; 0x68
 800a482:	4654      	mov	r4, sl
 800a484:	2205      	movs	r2, #5
 800a486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48a:	4858      	ldr	r0, [pc, #352]	; (800a5ec <_vfiprintf_r+0x24c>)
 800a48c:	f000 fd42 	bl	800af14 <memchr>
 800a490:	9a04      	ldr	r2, [sp, #16]
 800a492:	b9d8      	cbnz	r0, 800a4cc <_vfiprintf_r+0x12c>
 800a494:	06d1      	lsls	r1, r2, #27
 800a496:	bf44      	itt	mi
 800a498:	2320      	movmi	r3, #32
 800a49a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a49e:	0713      	lsls	r3, r2, #28
 800a4a0:	bf44      	itt	mi
 800a4a2:	232b      	movmi	r3, #43	; 0x2b
 800a4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ae:	d015      	beq.n	800a4dc <_vfiprintf_r+0x13c>
 800a4b0:	4654      	mov	r4, sl
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	f04f 0c0a 	mov.w	ip, #10
 800a4b8:	9a07      	ldr	r2, [sp, #28]
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4c0:	3b30      	subs	r3, #48	; 0x30
 800a4c2:	2b09      	cmp	r3, #9
 800a4c4:	d94e      	bls.n	800a564 <_vfiprintf_r+0x1c4>
 800a4c6:	b1b0      	cbz	r0, 800a4f6 <_vfiprintf_r+0x156>
 800a4c8:	9207      	str	r2, [sp, #28]
 800a4ca:	e014      	b.n	800a4f6 <_vfiprintf_r+0x156>
 800a4cc:	eba0 0308 	sub.w	r3, r0, r8
 800a4d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	46a2      	mov	sl, r4
 800a4d8:	9304      	str	r3, [sp, #16]
 800a4da:	e7d2      	b.n	800a482 <_vfiprintf_r+0xe2>
 800a4dc:	9b03      	ldr	r3, [sp, #12]
 800a4de:	1d19      	adds	r1, r3, #4
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	9103      	str	r1, [sp, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	bfbb      	ittet	lt
 800a4e8:	425b      	neglt	r3, r3
 800a4ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ee:	9307      	strge	r3, [sp, #28]
 800a4f0:	9307      	strlt	r3, [sp, #28]
 800a4f2:	bfb8      	it	lt
 800a4f4:	9204      	strlt	r2, [sp, #16]
 800a4f6:	7823      	ldrb	r3, [r4, #0]
 800a4f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a4fa:	d10c      	bne.n	800a516 <_vfiprintf_r+0x176>
 800a4fc:	7863      	ldrb	r3, [r4, #1]
 800a4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a500:	d135      	bne.n	800a56e <_vfiprintf_r+0x1ce>
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	3402      	adds	r4, #2
 800a506:	1d1a      	adds	r2, r3, #4
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	9203      	str	r2, [sp, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	bfb8      	it	lt
 800a510:	f04f 33ff 	movlt.w	r3, #4294967295
 800a514:	9305      	str	r3, [sp, #20]
 800a516:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a5f0 <_vfiprintf_r+0x250>
 800a51a:	2203      	movs	r2, #3
 800a51c:	4650      	mov	r0, sl
 800a51e:	7821      	ldrb	r1, [r4, #0]
 800a520:	f000 fcf8 	bl	800af14 <memchr>
 800a524:	b140      	cbz	r0, 800a538 <_vfiprintf_r+0x198>
 800a526:	2340      	movs	r3, #64	; 0x40
 800a528:	eba0 000a 	sub.w	r0, r0, sl
 800a52c:	fa03 f000 	lsl.w	r0, r3, r0
 800a530:	9b04      	ldr	r3, [sp, #16]
 800a532:	3401      	adds	r4, #1
 800a534:	4303      	orrs	r3, r0
 800a536:	9304      	str	r3, [sp, #16]
 800a538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53c:	2206      	movs	r2, #6
 800a53e:	482d      	ldr	r0, [pc, #180]	; (800a5f4 <_vfiprintf_r+0x254>)
 800a540:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a544:	f000 fce6 	bl	800af14 <memchr>
 800a548:	2800      	cmp	r0, #0
 800a54a:	d03f      	beq.n	800a5cc <_vfiprintf_r+0x22c>
 800a54c:	4b2a      	ldr	r3, [pc, #168]	; (800a5f8 <_vfiprintf_r+0x258>)
 800a54e:	bb1b      	cbnz	r3, 800a598 <_vfiprintf_r+0x1f8>
 800a550:	9b03      	ldr	r3, [sp, #12]
 800a552:	3307      	adds	r3, #7
 800a554:	f023 0307 	bic.w	r3, r3, #7
 800a558:	3308      	adds	r3, #8
 800a55a:	9303      	str	r3, [sp, #12]
 800a55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a55e:	443b      	add	r3, r7
 800a560:	9309      	str	r3, [sp, #36]	; 0x24
 800a562:	e767      	b.n	800a434 <_vfiprintf_r+0x94>
 800a564:	460c      	mov	r4, r1
 800a566:	2001      	movs	r0, #1
 800a568:	fb0c 3202 	mla	r2, ip, r2, r3
 800a56c:	e7a5      	b.n	800a4ba <_vfiprintf_r+0x11a>
 800a56e:	2300      	movs	r3, #0
 800a570:	f04f 0c0a 	mov.w	ip, #10
 800a574:	4619      	mov	r1, r3
 800a576:	3401      	adds	r4, #1
 800a578:	9305      	str	r3, [sp, #20]
 800a57a:	4620      	mov	r0, r4
 800a57c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a580:	3a30      	subs	r2, #48	; 0x30
 800a582:	2a09      	cmp	r2, #9
 800a584:	d903      	bls.n	800a58e <_vfiprintf_r+0x1ee>
 800a586:	2b00      	cmp	r3, #0
 800a588:	d0c5      	beq.n	800a516 <_vfiprintf_r+0x176>
 800a58a:	9105      	str	r1, [sp, #20]
 800a58c:	e7c3      	b.n	800a516 <_vfiprintf_r+0x176>
 800a58e:	4604      	mov	r4, r0
 800a590:	2301      	movs	r3, #1
 800a592:	fb0c 2101 	mla	r1, ip, r1, r2
 800a596:	e7f0      	b.n	800a57a <_vfiprintf_r+0x1da>
 800a598:	ab03      	add	r3, sp, #12
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	462a      	mov	r2, r5
 800a59e:	4630      	mov	r0, r6
 800a5a0:	4b16      	ldr	r3, [pc, #88]	; (800a5fc <_vfiprintf_r+0x25c>)
 800a5a2:	a904      	add	r1, sp, #16
 800a5a4:	f3af 8000 	nop.w
 800a5a8:	4607      	mov	r7, r0
 800a5aa:	1c78      	adds	r0, r7, #1
 800a5ac:	d1d6      	bne.n	800a55c <_vfiprintf_r+0x1bc>
 800a5ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5b0:	07d9      	lsls	r1, r3, #31
 800a5b2:	d405      	bmi.n	800a5c0 <_vfiprintf_r+0x220>
 800a5b4:	89ab      	ldrh	r3, [r5, #12]
 800a5b6:	059a      	lsls	r2, r3, #22
 800a5b8:	d402      	bmi.n	800a5c0 <_vfiprintf_r+0x220>
 800a5ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5bc:	f000 fc43 	bl	800ae46 <__retarget_lock_release_recursive>
 800a5c0:	89ab      	ldrh	r3, [r5, #12]
 800a5c2:	065b      	lsls	r3, r3, #25
 800a5c4:	f53f af12 	bmi.w	800a3ec <_vfiprintf_r+0x4c>
 800a5c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ca:	e711      	b.n	800a3f0 <_vfiprintf_r+0x50>
 800a5cc:	ab03      	add	r3, sp, #12
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	4b09      	ldr	r3, [pc, #36]	; (800a5fc <_vfiprintf_r+0x25c>)
 800a5d6:	a904      	add	r1, sp, #16
 800a5d8:	f000 f882 	bl	800a6e0 <_printf_i>
 800a5dc:	e7e4      	b.n	800a5a8 <_vfiprintf_r+0x208>
 800a5de:	bf00      	nop
 800a5e0:	0800b48c 	.word	0x0800b48c
 800a5e4:	0800b4ac 	.word	0x0800b4ac
 800a5e8:	0800b46c 	.word	0x0800b46c
 800a5ec:	0800b439 	.word	0x0800b439
 800a5f0:	0800b43f 	.word	0x0800b43f
 800a5f4:	0800b443 	.word	0x0800b443
 800a5f8:	00000000 	.word	0x00000000
 800a5fc:	0800a37b 	.word	0x0800a37b

0800a600 <_printf_common>:
 800a600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a604:	4616      	mov	r6, r2
 800a606:	4699      	mov	r9, r3
 800a608:	688a      	ldr	r2, [r1, #8]
 800a60a:	690b      	ldr	r3, [r1, #16]
 800a60c:	4607      	mov	r7, r0
 800a60e:	4293      	cmp	r3, r2
 800a610:	bfb8      	it	lt
 800a612:	4613      	movlt	r3, r2
 800a614:	6033      	str	r3, [r6, #0]
 800a616:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a61a:	460c      	mov	r4, r1
 800a61c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a620:	b10a      	cbz	r2, 800a626 <_printf_common+0x26>
 800a622:	3301      	adds	r3, #1
 800a624:	6033      	str	r3, [r6, #0]
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	0699      	lsls	r1, r3, #26
 800a62a:	bf42      	ittt	mi
 800a62c:	6833      	ldrmi	r3, [r6, #0]
 800a62e:	3302      	addmi	r3, #2
 800a630:	6033      	strmi	r3, [r6, #0]
 800a632:	6825      	ldr	r5, [r4, #0]
 800a634:	f015 0506 	ands.w	r5, r5, #6
 800a638:	d106      	bne.n	800a648 <_printf_common+0x48>
 800a63a:	f104 0a19 	add.w	sl, r4, #25
 800a63e:	68e3      	ldr	r3, [r4, #12]
 800a640:	6832      	ldr	r2, [r6, #0]
 800a642:	1a9b      	subs	r3, r3, r2
 800a644:	42ab      	cmp	r3, r5
 800a646:	dc28      	bgt.n	800a69a <_printf_common+0x9a>
 800a648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a64c:	1e13      	subs	r3, r2, #0
 800a64e:	6822      	ldr	r2, [r4, #0]
 800a650:	bf18      	it	ne
 800a652:	2301      	movne	r3, #1
 800a654:	0692      	lsls	r2, r2, #26
 800a656:	d42d      	bmi.n	800a6b4 <_printf_common+0xb4>
 800a658:	4649      	mov	r1, r9
 800a65a:	4638      	mov	r0, r7
 800a65c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a660:	47c0      	blx	r8
 800a662:	3001      	adds	r0, #1
 800a664:	d020      	beq.n	800a6a8 <_printf_common+0xa8>
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	68e5      	ldr	r5, [r4, #12]
 800a66a:	f003 0306 	and.w	r3, r3, #6
 800a66e:	2b04      	cmp	r3, #4
 800a670:	bf18      	it	ne
 800a672:	2500      	movne	r5, #0
 800a674:	6832      	ldr	r2, [r6, #0]
 800a676:	f04f 0600 	mov.w	r6, #0
 800a67a:	68a3      	ldr	r3, [r4, #8]
 800a67c:	bf08      	it	eq
 800a67e:	1aad      	subeq	r5, r5, r2
 800a680:	6922      	ldr	r2, [r4, #16]
 800a682:	bf08      	it	eq
 800a684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a688:	4293      	cmp	r3, r2
 800a68a:	bfc4      	itt	gt
 800a68c:	1a9b      	subgt	r3, r3, r2
 800a68e:	18ed      	addgt	r5, r5, r3
 800a690:	341a      	adds	r4, #26
 800a692:	42b5      	cmp	r5, r6
 800a694:	d11a      	bne.n	800a6cc <_printf_common+0xcc>
 800a696:	2000      	movs	r0, #0
 800a698:	e008      	b.n	800a6ac <_printf_common+0xac>
 800a69a:	2301      	movs	r3, #1
 800a69c:	4652      	mov	r2, sl
 800a69e:	4649      	mov	r1, r9
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	47c0      	blx	r8
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d103      	bne.n	800a6b0 <_printf_common+0xb0>
 800a6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	e7c4      	b.n	800a63e <_printf_common+0x3e>
 800a6b4:	2030      	movs	r0, #48	; 0x30
 800a6b6:	18e1      	adds	r1, r4, r3
 800a6b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6c2:	4422      	add	r2, r4
 800a6c4:	3302      	adds	r3, #2
 800a6c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6ca:	e7c5      	b.n	800a658 <_printf_common+0x58>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	47c0      	blx	r8
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	d0e6      	beq.n	800a6a8 <_printf_common+0xa8>
 800a6da:	3601      	adds	r6, #1
 800a6dc:	e7d9      	b.n	800a692 <_printf_common+0x92>
	...

0800a6e0 <_printf_i>:
 800a6e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e4:	7e0f      	ldrb	r7, [r1, #24]
 800a6e6:	4691      	mov	r9, r2
 800a6e8:	2f78      	cmp	r7, #120	; 0x78
 800a6ea:	4680      	mov	r8, r0
 800a6ec:	460c      	mov	r4, r1
 800a6ee:	469a      	mov	sl, r3
 800a6f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6f6:	d807      	bhi.n	800a708 <_printf_i+0x28>
 800a6f8:	2f62      	cmp	r7, #98	; 0x62
 800a6fa:	d80a      	bhi.n	800a712 <_printf_i+0x32>
 800a6fc:	2f00      	cmp	r7, #0
 800a6fe:	f000 80d9 	beq.w	800a8b4 <_printf_i+0x1d4>
 800a702:	2f58      	cmp	r7, #88	; 0x58
 800a704:	f000 80a4 	beq.w	800a850 <_printf_i+0x170>
 800a708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a70c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a710:	e03a      	b.n	800a788 <_printf_i+0xa8>
 800a712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a716:	2b15      	cmp	r3, #21
 800a718:	d8f6      	bhi.n	800a708 <_printf_i+0x28>
 800a71a:	a101      	add	r1, pc, #4	; (adr r1, 800a720 <_printf_i+0x40>)
 800a71c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a720:	0800a779 	.word	0x0800a779
 800a724:	0800a78d 	.word	0x0800a78d
 800a728:	0800a709 	.word	0x0800a709
 800a72c:	0800a709 	.word	0x0800a709
 800a730:	0800a709 	.word	0x0800a709
 800a734:	0800a709 	.word	0x0800a709
 800a738:	0800a78d 	.word	0x0800a78d
 800a73c:	0800a709 	.word	0x0800a709
 800a740:	0800a709 	.word	0x0800a709
 800a744:	0800a709 	.word	0x0800a709
 800a748:	0800a709 	.word	0x0800a709
 800a74c:	0800a89b 	.word	0x0800a89b
 800a750:	0800a7bd 	.word	0x0800a7bd
 800a754:	0800a87d 	.word	0x0800a87d
 800a758:	0800a709 	.word	0x0800a709
 800a75c:	0800a709 	.word	0x0800a709
 800a760:	0800a8bd 	.word	0x0800a8bd
 800a764:	0800a709 	.word	0x0800a709
 800a768:	0800a7bd 	.word	0x0800a7bd
 800a76c:	0800a709 	.word	0x0800a709
 800a770:	0800a709 	.word	0x0800a709
 800a774:	0800a885 	.word	0x0800a885
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	1d1a      	adds	r2, r3, #4
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	602a      	str	r2, [r5, #0]
 800a780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a788:	2301      	movs	r3, #1
 800a78a:	e0a4      	b.n	800a8d6 <_printf_i+0x1f6>
 800a78c:	6820      	ldr	r0, [r4, #0]
 800a78e:	6829      	ldr	r1, [r5, #0]
 800a790:	0606      	lsls	r6, r0, #24
 800a792:	f101 0304 	add.w	r3, r1, #4
 800a796:	d50a      	bpl.n	800a7ae <_printf_i+0xce>
 800a798:	680e      	ldr	r6, [r1, #0]
 800a79a:	602b      	str	r3, [r5, #0]
 800a79c:	2e00      	cmp	r6, #0
 800a79e:	da03      	bge.n	800a7a8 <_printf_i+0xc8>
 800a7a0:	232d      	movs	r3, #45	; 0x2d
 800a7a2:	4276      	negs	r6, r6
 800a7a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7a8:	230a      	movs	r3, #10
 800a7aa:	485e      	ldr	r0, [pc, #376]	; (800a924 <_printf_i+0x244>)
 800a7ac:	e019      	b.n	800a7e2 <_printf_i+0x102>
 800a7ae:	680e      	ldr	r6, [r1, #0]
 800a7b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7b4:	602b      	str	r3, [r5, #0]
 800a7b6:	bf18      	it	ne
 800a7b8:	b236      	sxthne	r6, r6
 800a7ba:	e7ef      	b.n	800a79c <_printf_i+0xbc>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	6820      	ldr	r0, [r4, #0]
 800a7c0:	1d19      	adds	r1, r3, #4
 800a7c2:	6029      	str	r1, [r5, #0]
 800a7c4:	0601      	lsls	r1, r0, #24
 800a7c6:	d501      	bpl.n	800a7cc <_printf_i+0xec>
 800a7c8:	681e      	ldr	r6, [r3, #0]
 800a7ca:	e002      	b.n	800a7d2 <_printf_i+0xf2>
 800a7cc:	0646      	lsls	r6, r0, #25
 800a7ce:	d5fb      	bpl.n	800a7c8 <_printf_i+0xe8>
 800a7d0:	881e      	ldrh	r6, [r3, #0]
 800a7d2:	2f6f      	cmp	r7, #111	; 0x6f
 800a7d4:	bf0c      	ite	eq
 800a7d6:	2308      	moveq	r3, #8
 800a7d8:	230a      	movne	r3, #10
 800a7da:	4852      	ldr	r0, [pc, #328]	; (800a924 <_printf_i+0x244>)
 800a7dc:	2100      	movs	r1, #0
 800a7de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7e2:	6865      	ldr	r5, [r4, #4]
 800a7e4:	2d00      	cmp	r5, #0
 800a7e6:	bfa8      	it	ge
 800a7e8:	6821      	ldrge	r1, [r4, #0]
 800a7ea:	60a5      	str	r5, [r4, #8]
 800a7ec:	bfa4      	itt	ge
 800a7ee:	f021 0104 	bicge.w	r1, r1, #4
 800a7f2:	6021      	strge	r1, [r4, #0]
 800a7f4:	b90e      	cbnz	r6, 800a7fa <_printf_i+0x11a>
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	d04d      	beq.n	800a896 <_printf_i+0x1b6>
 800a7fa:	4615      	mov	r5, r2
 800a7fc:	fbb6 f1f3 	udiv	r1, r6, r3
 800a800:	fb03 6711 	mls	r7, r3, r1, r6
 800a804:	5dc7      	ldrb	r7, [r0, r7]
 800a806:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a80a:	4637      	mov	r7, r6
 800a80c:	42bb      	cmp	r3, r7
 800a80e:	460e      	mov	r6, r1
 800a810:	d9f4      	bls.n	800a7fc <_printf_i+0x11c>
 800a812:	2b08      	cmp	r3, #8
 800a814:	d10b      	bne.n	800a82e <_printf_i+0x14e>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	07de      	lsls	r6, r3, #31
 800a81a:	d508      	bpl.n	800a82e <_printf_i+0x14e>
 800a81c:	6923      	ldr	r3, [r4, #16]
 800a81e:	6861      	ldr	r1, [r4, #4]
 800a820:	4299      	cmp	r1, r3
 800a822:	bfde      	ittt	le
 800a824:	2330      	movle	r3, #48	; 0x30
 800a826:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a82a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a82e:	1b52      	subs	r2, r2, r5
 800a830:	6122      	str	r2, [r4, #16]
 800a832:	464b      	mov	r3, r9
 800a834:	4621      	mov	r1, r4
 800a836:	4640      	mov	r0, r8
 800a838:	f8cd a000 	str.w	sl, [sp]
 800a83c:	aa03      	add	r2, sp, #12
 800a83e:	f7ff fedf 	bl	800a600 <_printf_common>
 800a842:	3001      	adds	r0, #1
 800a844:	d14c      	bne.n	800a8e0 <_printf_i+0x200>
 800a846:	f04f 30ff 	mov.w	r0, #4294967295
 800a84a:	b004      	add	sp, #16
 800a84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a850:	4834      	ldr	r0, [pc, #208]	; (800a924 <_printf_i+0x244>)
 800a852:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a856:	6829      	ldr	r1, [r5, #0]
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a85e:	6029      	str	r1, [r5, #0]
 800a860:	061d      	lsls	r5, r3, #24
 800a862:	d514      	bpl.n	800a88e <_printf_i+0x1ae>
 800a864:	07df      	lsls	r7, r3, #31
 800a866:	bf44      	itt	mi
 800a868:	f043 0320 	orrmi.w	r3, r3, #32
 800a86c:	6023      	strmi	r3, [r4, #0]
 800a86e:	b91e      	cbnz	r6, 800a878 <_printf_i+0x198>
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	f023 0320 	bic.w	r3, r3, #32
 800a876:	6023      	str	r3, [r4, #0]
 800a878:	2310      	movs	r3, #16
 800a87a:	e7af      	b.n	800a7dc <_printf_i+0xfc>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	f043 0320 	orr.w	r3, r3, #32
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	2378      	movs	r3, #120	; 0x78
 800a886:	4828      	ldr	r0, [pc, #160]	; (800a928 <_printf_i+0x248>)
 800a888:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a88c:	e7e3      	b.n	800a856 <_printf_i+0x176>
 800a88e:	0659      	lsls	r1, r3, #25
 800a890:	bf48      	it	mi
 800a892:	b2b6      	uxthmi	r6, r6
 800a894:	e7e6      	b.n	800a864 <_printf_i+0x184>
 800a896:	4615      	mov	r5, r2
 800a898:	e7bb      	b.n	800a812 <_printf_i+0x132>
 800a89a:	682b      	ldr	r3, [r5, #0]
 800a89c:	6826      	ldr	r6, [r4, #0]
 800a89e:	1d18      	adds	r0, r3, #4
 800a8a0:	6961      	ldr	r1, [r4, #20]
 800a8a2:	6028      	str	r0, [r5, #0]
 800a8a4:	0635      	lsls	r5, r6, #24
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	d501      	bpl.n	800a8ae <_printf_i+0x1ce>
 800a8aa:	6019      	str	r1, [r3, #0]
 800a8ac:	e002      	b.n	800a8b4 <_printf_i+0x1d4>
 800a8ae:	0670      	lsls	r0, r6, #25
 800a8b0:	d5fb      	bpl.n	800a8aa <_printf_i+0x1ca>
 800a8b2:	8019      	strh	r1, [r3, #0]
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	4615      	mov	r5, r2
 800a8b8:	6123      	str	r3, [r4, #16]
 800a8ba:	e7ba      	b.n	800a832 <_printf_i+0x152>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	2100      	movs	r1, #0
 800a8c0:	1d1a      	adds	r2, r3, #4
 800a8c2:	602a      	str	r2, [r5, #0]
 800a8c4:	681d      	ldr	r5, [r3, #0]
 800a8c6:	6862      	ldr	r2, [r4, #4]
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f000 fb23 	bl	800af14 <memchr>
 800a8ce:	b108      	cbz	r0, 800a8d4 <_printf_i+0x1f4>
 800a8d0:	1b40      	subs	r0, r0, r5
 800a8d2:	6060      	str	r0, [r4, #4]
 800a8d4:	6863      	ldr	r3, [r4, #4]
 800a8d6:	6123      	str	r3, [r4, #16]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8de:	e7a8      	b.n	800a832 <_printf_i+0x152>
 800a8e0:	462a      	mov	r2, r5
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	6923      	ldr	r3, [r4, #16]
 800a8e8:	47d0      	blx	sl
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	d0ab      	beq.n	800a846 <_printf_i+0x166>
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	079b      	lsls	r3, r3, #30
 800a8f2:	d413      	bmi.n	800a91c <_printf_i+0x23c>
 800a8f4:	68e0      	ldr	r0, [r4, #12]
 800a8f6:	9b03      	ldr	r3, [sp, #12]
 800a8f8:	4298      	cmp	r0, r3
 800a8fa:	bfb8      	it	lt
 800a8fc:	4618      	movlt	r0, r3
 800a8fe:	e7a4      	b.n	800a84a <_printf_i+0x16a>
 800a900:	2301      	movs	r3, #1
 800a902:	4632      	mov	r2, r6
 800a904:	4649      	mov	r1, r9
 800a906:	4640      	mov	r0, r8
 800a908:	47d0      	blx	sl
 800a90a:	3001      	adds	r0, #1
 800a90c:	d09b      	beq.n	800a846 <_printf_i+0x166>
 800a90e:	3501      	adds	r5, #1
 800a910:	68e3      	ldr	r3, [r4, #12]
 800a912:	9903      	ldr	r1, [sp, #12]
 800a914:	1a5b      	subs	r3, r3, r1
 800a916:	42ab      	cmp	r3, r5
 800a918:	dcf2      	bgt.n	800a900 <_printf_i+0x220>
 800a91a:	e7eb      	b.n	800a8f4 <_printf_i+0x214>
 800a91c:	2500      	movs	r5, #0
 800a91e:	f104 0619 	add.w	r6, r4, #25
 800a922:	e7f5      	b.n	800a910 <_printf_i+0x230>
 800a924:	0800b44a 	.word	0x0800b44a
 800a928:	0800b45b 	.word	0x0800b45b

0800a92c <_sbrk_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	2300      	movs	r3, #0
 800a930:	4d05      	ldr	r5, [pc, #20]	; (800a948 <_sbrk_r+0x1c>)
 800a932:	4604      	mov	r4, r0
 800a934:	4608      	mov	r0, r1
 800a936:	602b      	str	r3, [r5, #0]
 800a938:	f7f6 fbf4 	bl	8001124 <_sbrk>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_sbrk_r+0x1a>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_sbrk_r+0x1a>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20000b90 	.word	0x20000b90

0800a94c <__swbuf_r>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	460e      	mov	r6, r1
 800a950:	4614      	mov	r4, r2
 800a952:	4605      	mov	r5, r0
 800a954:	b118      	cbz	r0, 800a95e <__swbuf_r+0x12>
 800a956:	6983      	ldr	r3, [r0, #24]
 800a958:	b90b      	cbnz	r3, 800a95e <__swbuf_r+0x12>
 800a95a:	f000 f9d5 	bl	800ad08 <__sinit>
 800a95e:	4b21      	ldr	r3, [pc, #132]	; (800a9e4 <__swbuf_r+0x98>)
 800a960:	429c      	cmp	r4, r3
 800a962:	d12b      	bne.n	800a9bc <__swbuf_r+0x70>
 800a964:	686c      	ldr	r4, [r5, #4]
 800a966:	69a3      	ldr	r3, [r4, #24]
 800a968:	60a3      	str	r3, [r4, #8]
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	071a      	lsls	r2, r3, #28
 800a96e:	d52f      	bpl.n	800a9d0 <__swbuf_r+0x84>
 800a970:	6923      	ldr	r3, [r4, #16]
 800a972:	b36b      	cbz	r3, 800a9d0 <__swbuf_r+0x84>
 800a974:	6923      	ldr	r3, [r4, #16]
 800a976:	6820      	ldr	r0, [r4, #0]
 800a978:	b2f6      	uxtb	r6, r6
 800a97a:	1ac0      	subs	r0, r0, r3
 800a97c:	6963      	ldr	r3, [r4, #20]
 800a97e:	4637      	mov	r7, r6
 800a980:	4283      	cmp	r3, r0
 800a982:	dc04      	bgt.n	800a98e <__swbuf_r+0x42>
 800a984:	4621      	mov	r1, r4
 800a986:	4628      	mov	r0, r5
 800a988:	f000 f92a 	bl	800abe0 <_fflush_r>
 800a98c:	bb30      	cbnz	r0, 800a9dc <__swbuf_r+0x90>
 800a98e:	68a3      	ldr	r3, [r4, #8]
 800a990:	3001      	adds	r0, #1
 800a992:	3b01      	subs	r3, #1
 800a994:	60a3      	str	r3, [r4, #8]
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	6022      	str	r2, [r4, #0]
 800a99c:	701e      	strb	r6, [r3, #0]
 800a99e:	6963      	ldr	r3, [r4, #20]
 800a9a0:	4283      	cmp	r3, r0
 800a9a2:	d004      	beq.n	800a9ae <__swbuf_r+0x62>
 800a9a4:	89a3      	ldrh	r3, [r4, #12]
 800a9a6:	07db      	lsls	r3, r3, #31
 800a9a8:	d506      	bpl.n	800a9b8 <__swbuf_r+0x6c>
 800a9aa:	2e0a      	cmp	r6, #10
 800a9ac:	d104      	bne.n	800a9b8 <__swbuf_r+0x6c>
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	f000 f915 	bl	800abe0 <_fflush_r>
 800a9b6:	b988      	cbnz	r0, 800a9dc <__swbuf_r+0x90>
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <__swbuf_r+0x9c>)
 800a9be:	429c      	cmp	r4, r3
 800a9c0:	d101      	bne.n	800a9c6 <__swbuf_r+0x7a>
 800a9c2:	68ac      	ldr	r4, [r5, #8]
 800a9c4:	e7cf      	b.n	800a966 <__swbuf_r+0x1a>
 800a9c6:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <__swbuf_r+0xa0>)
 800a9c8:	429c      	cmp	r4, r3
 800a9ca:	bf08      	it	eq
 800a9cc:	68ec      	ldreq	r4, [r5, #12]
 800a9ce:	e7ca      	b.n	800a966 <__swbuf_r+0x1a>
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f000 f80c 	bl	800a9f0 <__swsetup_r>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d0cb      	beq.n	800a974 <__swbuf_r+0x28>
 800a9dc:	f04f 37ff 	mov.w	r7, #4294967295
 800a9e0:	e7ea      	b.n	800a9b8 <__swbuf_r+0x6c>
 800a9e2:	bf00      	nop
 800a9e4:	0800b48c 	.word	0x0800b48c
 800a9e8:	0800b4ac 	.word	0x0800b4ac
 800a9ec:	0800b46c 	.word	0x0800b46c

0800a9f0 <__swsetup_r>:
 800a9f0:	4b32      	ldr	r3, [pc, #200]	; (800aabc <__swsetup_r+0xcc>)
 800a9f2:	b570      	push	{r4, r5, r6, lr}
 800a9f4:	681d      	ldr	r5, [r3, #0]
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	b125      	cbz	r5, 800aa06 <__swsetup_r+0x16>
 800a9fc:	69ab      	ldr	r3, [r5, #24]
 800a9fe:	b913      	cbnz	r3, 800aa06 <__swsetup_r+0x16>
 800aa00:	4628      	mov	r0, r5
 800aa02:	f000 f981 	bl	800ad08 <__sinit>
 800aa06:	4b2e      	ldr	r3, [pc, #184]	; (800aac0 <__swsetup_r+0xd0>)
 800aa08:	429c      	cmp	r4, r3
 800aa0a:	d10f      	bne.n	800aa2c <__swsetup_r+0x3c>
 800aa0c:	686c      	ldr	r4, [r5, #4]
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa14:	0719      	lsls	r1, r3, #28
 800aa16:	d42c      	bmi.n	800aa72 <__swsetup_r+0x82>
 800aa18:	06dd      	lsls	r5, r3, #27
 800aa1a:	d411      	bmi.n	800aa40 <__swsetup_r+0x50>
 800aa1c:	2309      	movs	r3, #9
 800aa1e:	6033      	str	r3, [r6, #0]
 800aa20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	e03e      	b.n	800aaaa <__swsetup_r+0xba>
 800aa2c:	4b25      	ldr	r3, [pc, #148]	; (800aac4 <__swsetup_r+0xd4>)
 800aa2e:	429c      	cmp	r4, r3
 800aa30:	d101      	bne.n	800aa36 <__swsetup_r+0x46>
 800aa32:	68ac      	ldr	r4, [r5, #8]
 800aa34:	e7eb      	b.n	800aa0e <__swsetup_r+0x1e>
 800aa36:	4b24      	ldr	r3, [pc, #144]	; (800aac8 <__swsetup_r+0xd8>)
 800aa38:	429c      	cmp	r4, r3
 800aa3a:	bf08      	it	eq
 800aa3c:	68ec      	ldreq	r4, [r5, #12]
 800aa3e:	e7e6      	b.n	800aa0e <__swsetup_r+0x1e>
 800aa40:	0758      	lsls	r0, r3, #29
 800aa42:	d512      	bpl.n	800aa6a <__swsetup_r+0x7a>
 800aa44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa46:	b141      	cbz	r1, 800aa5a <__swsetup_r+0x6a>
 800aa48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa4c:	4299      	cmp	r1, r3
 800aa4e:	d002      	beq.n	800aa56 <__swsetup_r+0x66>
 800aa50:	4630      	mov	r0, r6
 800aa52:	f7ff fa45 	bl	8009ee0 <_free_r>
 800aa56:	2300      	movs	r3, #0
 800aa58:	6363      	str	r3, [r4, #52]	; 0x34
 800aa5a:	89a3      	ldrh	r3, [r4, #12]
 800aa5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa60:	81a3      	strh	r3, [r4, #12]
 800aa62:	2300      	movs	r3, #0
 800aa64:	6063      	str	r3, [r4, #4]
 800aa66:	6923      	ldr	r3, [r4, #16]
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	f043 0308 	orr.w	r3, r3, #8
 800aa70:	81a3      	strh	r3, [r4, #12]
 800aa72:	6923      	ldr	r3, [r4, #16]
 800aa74:	b94b      	cbnz	r3, 800aa8a <__swsetup_r+0x9a>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa80:	d003      	beq.n	800aa8a <__swsetup_r+0x9a>
 800aa82:	4621      	mov	r1, r4
 800aa84:	4630      	mov	r0, r6
 800aa86:	f000 fa05 	bl	800ae94 <__smakebuf_r>
 800aa8a:	89a0      	ldrh	r0, [r4, #12]
 800aa8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa90:	f010 0301 	ands.w	r3, r0, #1
 800aa94:	d00a      	beq.n	800aaac <__swsetup_r+0xbc>
 800aa96:	2300      	movs	r3, #0
 800aa98:	60a3      	str	r3, [r4, #8]
 800aa9a:	6963      	ldr	r3, [r4, #20]
 800aa9c:	425b      	negs	r3, r3
 800aa9e:	61a3      	str	r3, [r4, #24]
 800aaa0:	6923      	ldr	r3, [r4, #16]
 800aaa2:	b943      	cbnz	r3, 800aab6 <__swsetup_r+0xc6>
 800aaa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aaa8:	d1ba      	bne.n	800aa20 <__swsetup_r+0x30>
 800aaaa:	bd70      	pop	{r4, r5, r6, pc}
 800aaac:	0781      	lsls	r1, r0, #30
 800aaae:	bf58      	it	pl
 800aab0:	6963      	ldrpl	r3, [r4, #20]
 800aab2:	60a3      	str	r3, [r4, #8]
 800aab4:	e7f4      	b.n	800aaa0 <__swsetup_r+0xb0>
 800aab6:	2000      	movs	r0, #0
 800aab8:	e7f7      	b.n	800aaaa <__swsetup_r+0xba>
 800aaba:	bf00      	nop
 800aabc:	2000016c 	.word	0x2000016c
 800aac0:	0800b48c 	.word	0x0800b48c
 800aac4:	0800b4ac 	.word	0x0800b4ac
 800aac8:	0800b46c 	.word	0x0800b46c

0800aacc <abort>:
 800aacc:	2006      	movs	r0, #6
 800aace:	b508      	push	{r3, lr}
 800aad0:	f000 faba 	bl	800b048 <raise>
 800aad4:	2001      	movs	r0, #1
 800aad6:	f7f6 fab2 	bl	800103e <_exit>
	...

0800aadc <__sflush_r>:
 800aadc:	898a      	ldrh	r2, [r1, #12]
 800aade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae0:	4605      	mov	r5, r0
 800aae2:	0710      	lsls	r0, r2, #28
 800aae4:	460c      	mov	r4, r1
 800aae6:	d457      	bmi.n	800ab98 <__sflush_r+0xbc>
 800aae8:	684b      	ldr	r3, [r1, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dc04      	bgt.n	800aaf8 <__sflush_r+0x1c>
 800aaee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	dc01      	bgt.n	800aaf8 <__sflush_r+0x1c>
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aafa:	2e00      	cmp	r6, #0
 800aafc:	d0fa      	beq.n	800aaf4 <__sflush_r+0x18>
 800aafe:	2300      	movs	r3, #0
 800ab00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab04:	682f      	ldr	r7, [r5, #0]
 800ab06:	602b      	str	r3, [r5, #0]
 800ab08:	d032      	beq.n	800ab70 <__sflush_r+0x94>
 800ab0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	075a      	lsls	r2, r3, #29
 800ab10:	d505      	bpl.n	800ab1e <__sflush_r+0x42>
 800ab12:	6863      	ldr	r3, [r4, #4]
 800ab14:	1ac0      	subs	r0, r0, r3
 800ab16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab18:	b10b      	cbz	r3, 800ab1e <__sflush_r+0x42>
 800ab1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab1c:	1ac0      	subs	r0, r0, r3
 800ab1e:	2300      	movs	r3, #0
 800ab20:	4602      	mov	r2, r0
 800ab22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab24:	4628      	mov	r0, r5
 800ab26:	6a21      	ldr	r1, [r4, #32]
 800ab28:	47b0      	blx	r6
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	d106      	bne.n	800ab3e <__sflush_r+0x62>
 800ab30:	6829      	ldr	r1, [r5, #0]
 800ab32:	291d      	cmp	r1, #29
 800ab34:	d82c      	bhi.n	800ab90 <__sflush_r+0xb4>
 800ab36:	4a29      	ldr	r2, [pc, #164]	; (800abdc <__sflush_r+0x100>)
 800ab38:	40ca      	lsrs	r2, r1
 800ab3a:	07d6      	lsls	r6, r2, #31
 800ab3c:	d528      	bpl.n	800ab90 <__sflush_r+0xb4>
 800ab3e:	2200      	movs	r2, #0
 800ab40:	6062      	str	r2, [r4, #4]
 800ab42:	6922      	ldr	r2, [r4, #16]
 800ab44:	04d9      	lsls	r1, r3, #19
 800ab46:	6022      	str	r2, [r4, #0]
 800ab48:	d504      	bpl.n	800ab54 <__sflush_r+0x78>
 800ab4a:	1c42      	adds	r2, r0, #1
 800ab4c:	d101      	bne.n	800ab52 <__sflush_r+0x76>
 800ab4e:	682b      	ldr	r3, [r5, #0]
 800ab50:	b903      	cbnz	r3, 800ab54 <__sflush_r+0x78>
 800ab52:	6560      	str	r0, [r4, #84]	; 0x54
 800ab54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab56:	602f      	str	r7, [r5, #0]
 800ab58:	2900      	cmp	r1, #0
 800ab5a:	d0cb      	beq.n	800aaf4 <__sflush_r+0x18>
 800ab5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab60:	4299      	cmp	r1, r3
 800ab62:	d002      	beq.n	800ab6a <__sflush_r+0x8e>
 800ab64:	4628      	mov	r0, r5
 800ab66:	f7ff f9bb 	bl	8009ee0 <_free_r>
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	6360      	str	r0, [r4, #52]	; 0x34
 800ab6e:	e7c2      	b.n	800aaf6 <__sflush_r+0x1a>
 800ab70:	6a21      	ldr	r1, [r4, #32]
 800ab72:	2301      	movs	r3, #1
 800ab74:	4628      	mov	r0, r5
 800ab76:	47b0      	blx	r6
 800ab78:	1c41      	adds	r1, r0, #1
 800ab7a:	d1c7      	bne.n	800ab0c <__sflush_r+0x30>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0c4      	beq.n	800ab0c <__sflush_r+0x30>
 800ab82:	2b1d      	cmp	r3, #29
 800ab84:	d001      	beq.n	800ab8a <__sflush_r+0xae>
 800ab86:	2b16      	cmp	r3, #22
 800ab88:	d101      	bne.n	800ab8e <__sflush_r+0xb2>
 800ab8a:	602f      	str	r7, [r5, #0]
 800ab8c:	e7b2      	b.n	800aaf4 <__sflush_r+0x18>
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab94:	81a3      	strh	r3, [r4, #12]
 800ab96:	e7ae      	b.n	800aaf6 <__sflush_r+0x1a>
 800ab98:	690f      	ldr	r7, [r1, #16]
 800ab9a:	2f00      	cmp	r7, #0
 800ab9c:	d0aa      	beq.n	800aaf4 <__sflush_r+0x18>
 800ab9e:	0793      	lsls	r3, r2, #30
 800aba0:	bf18      	it	ne
 800aba2:	2300      	movne	r3, #0
 800aba4:	680e      	ldr	r6, [r1, #0]
 800aba6:	bf08      	it	eq
 800aba8:	694b      	ldreq	r3, [r1, #20]
 800abaa:	1bf6      	subs	r6, r6, r7
 800abac:	600f      	str	r7, [r1, #0]
 800abae:	608b      	str	r3, [r1, #8]
 800abb0:	2e00      	cmp	r6, #0
 800abb2:	dd9f      	ble.n	800aaf4 <__sflush_r+0x18>
 800abb4:	4633      	mov	r3, r6
 800abb6:	463a      	mov	r2, r7
 800abb8:	4628      	mov	r0, r5
 800abba:	6a21      	ldr	r1, [r4, #32]
 800abbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800abc0:	47e0      	blx	ip
 800abc2:	2800      	cmp	r0, #0
 800abc4:	dc06      	bgt.n	800abd4 <__sflush_r+0xf8>
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f04f 30ff 	mov.w	r0, #4294967295
 800abcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd0:	81a3      	strh	r3, [r4, #12]
 800abd2:	e790      	b.n	800aaf6 <__sflush_r+0x1a>
 800abd4:	4407      	add	r7, r0
 800abd6:	1a36      	subs	r6, r6, r0
 800abd8:	e7ea      	b.n	800abb0 <__sflush_r+0xd4>
 800abda:	bf00      	nop
 800abdc:	20400001 	.word	0x20400001

0800abe0 <_fflush_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	690b      	ldr	r3, [r1, #16]
 800abe4:	4605      	mov	r5, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	b913      	cbnz	r3, 800abf0 <_fflush_r+0x10>
 800abea:	2500      	movs	r5, #0
 800abec:	4628      	mov	r0, r5
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	b118      	cbz	r0, 800abfa <_fflush_r+0x1a>
 800abf2:	6983      	ldr	r3, [r0, #24]
 800abf4:	b90b      	cbnz	r3, 800abfa <_fflush_r+0x1a>
 800abf6:	f000 f887 	bl	800ad08 <__sinit>
 800abfa:	4b14      	ldr	r3, [pc, #80]	; (800ac4c <_fflush_r+0x6c>)
 800abfc:	429c      	cmp	r4, r3
 800abfe:	d11b      	bne.n	800ac38 <_fflush_r+0x58>
 800ac00:	686c      	ldr	r4, [r5, #4]
 800ac02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d0ef      	beq.n	800abea <_fflush_r+0xa>
 800ac0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac0c:	07d0      	lsls	r0, r2, #31
 800ac0e:	d404      	bmi.n	800ac1a <_fflush_r+0x3a>
 800ac10:	0599      	lsls	r1, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_fflush_r+0x3a>
 800ac14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac16:	f000 f915 	bl	800ae44 <__retarget_lock_acquire_recursive>
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	f7ff ff5d 	bl	800aadc <__sflush_r>
 800ac22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac24:	4605      	mov	r5, r0
 800ac26:	07da      	lsls	r2, r3, #31
 800ac28:	d4e0      	bmi.n	800abec <_fflush_r+0xc>
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	059b      	lsls	r3, r3, #22
 800ac2e:	d4dd      	bmi.n	800abec <_fflush_r+0xc>
 800ac30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac32:	f000 f908 	bl	800ae46 <__retarget_lock_release_recursive>
 800ac36:	e7d9      	b.n	800abec <_fflush_r+0xc>
 800ac38:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <_fflush_r+0x70>)
 800ac3a:	429c      	cmp	r4, r3
 800ac3c:	d101      	bne.n	800ac42 <_fflush_r+0x62>
 800ac3e:	68ac      	ldr	r4, [r5, #8]
 800ac40:	e7df      	b.n	800ac02 <_fflush_r+0x22>
 800ac42:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <_fflush_r+0x74>)
 800ac44:	429c      	cmp	r4, r3
 800ac46:	bf08      	it	eq
 800ac48:	68ec      	ldreq	r4, [r5, #12]
 800ac4a:	e7da      	b.n	800ac02 <_fflush_r+0x22>
 800ac4c:	0800b48c 	.word	0x0800b48c
 800ac50:	0800b4ac 	.word	0x0800b4ac
 800ac54:	0800b46c 	.word	0x0800b46c

0800ac58 <std>:
 800ac58:	2300      	movs	r3, #0
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac66:	6083      	str	r3, [r0, #8]
 800ac68:	8181      	strh	r1, [r0, #12]
 800ac6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac6c:	81c2      	strh	r2, [r0, #14]
 800ac6e:	6183      	str	r3, [r0, #24]
 800ac70:	4619      	mov	r1, r3
 800ac72:	2208      	movs	r2, #8
 800ac74:	305c      	adds	r0, #92	; 0x5c
 800ac76:	f7fe fff1 	bl	8009c5c <memset>
 800ac7a:	4b05      	ldr	r3, [pc, #20]	; (800ac90 <std+0x38>)
 800ac7c:	6224      	str	r4, [r4, #32]
 800ac7e:	6263      	str	r3, [r4, #36]	; 0x24
 800ac80:	4b04      	ldr	r3, [pc, #16]	; (800ac94 <std+0x3c>)
 800ac82:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac84:	4b04      	ldr	r3, [pc, #16]	; (800ac98 <std+0x40>)
 800ac86:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac88:	4b04      	ldr	r3, [pc, #16]	; (800ac9c <std+0x44>)
 800ac8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ac8c:	bd10      	pop	{r4, pc}
 800ac8e:	bf00      	nop
 800ac90:	0800b081 	.word	0x0800b081
 800ac94:	0800b0a3 	.word	0x0800b0a3
 800ac98:	0800b0db 	.word	0x0800b0db
 800ac9c:	0800b0ff 	.word	0x0800b0ff

0800aca0 <_cleanup_r>:
 800aca0:	4901      	ldr	r1, [pc, #4]	; (800aca8 <_cleanup_r+0x8>)
 800aca2:	f000 b8af 	b.w	800ae04 <_fwalk_reent>
 800aca6:	bf00      	nop
 800aca8:	0800abe1 	.word	0x0800abe1

0800acac <__sfmoreglue>:
 800acac:	2268      	movs	r2, #104	; 0x68
 800acae:	b570      	push	{r4, r5, r6, lr}
 800acb0:	1e4d      	subs	r5, r1, #1
 800acb2:	4355      	muls	r5, r2
 800acb4:	460e      	mov	r6, r1
 800acb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acba:	f7ff f979 	bl	8009fb0 <_malloc_r>
 800acbe:	4604      	mov	r4, r0
 800acc0:	b140      	cbz	r0, 800acd4 <__sfmoreglue+0x28>
 800acc2:	2100      	movs	r1, #0
 800acc4:	e9c0 1600 	strd	r1, r6, [r0]
 800acc8:	300c      	adds	r0, #12
 800acca:	60a0      	str	r0, [r4, #8]
 800accc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acd0:	f7fe ffc4 	bl	8009c5c <memset>
 800acd4:	4620      	mov	r0, r4
 800acd6:	bd70      	pop	{r4, r5, r6, pc}

0800acd8 <__sfp_lock_acquire>:
 800acd8:	4801      	ldr	r0, [pc, #4]	; (800ace0 <__sfp_lock_acquire+0x8>)
 800acda:	f000 b8b3 	b.w	800ae44 <__retarget_lock_acquire_recursive>
 800acde:	bf00      	nop
 800ace0:	20000b8d 	.word	0x20000b8d

0800ace4 <__sfp_lock_release>:
 800ace4:	4801      	ldr	r0, [pc, #4]	; (800acec <__sfp_lock_release+0x8>)
 800ace6:	f000 b8ae 	b.w	800ae46 <__retarget_lock_release_recursive>
 800acea:	bf00      	nop
 800acec:	20000b8d 	.word	0x20000b8d

0800acf0 <__sinit_lock_acquire>:
 800acf0:	4801      	ldr	r0, [pc, #4]	; (800acf8 <__sinit_lock_acquire+0x8>)
 800acf2:	f000 b8a7 	b.w	800ae44 <__retarget_lock_acquire_recursive>
 800acf6:	bf00      	nop
 800acf8:	20000b8e 	.word	0x20000b8e

0800acfc <__sinit_lock_release>:
 800acfc:	4801      	ldr	r0, [pc, #4]	; (800ad04 <__sinit_lock_release+0x8>)
 800acfe:	f000 b8a2 	b.w	800ae46 <__retarget_lock_release_recursive>
 800ad02:	bf00      	nop
 800ad04:	20000b8e 	.word	0x20000b8e

0800ad08 <__sinit>:
 800ad08:	b510      	push	{r4, lr}
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	f7ff fff0 	bl	800acf0 <__sinit_lock_acquire>
 800ad10:	69a3      	ldr	r3, [r4, #24]
 800ad12:	b11b      	cbz	r3, 800ad1c <__sinit+0x14>
 800ad14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad18:	f7ff bff0 	b.w	800acfc <__sinit_lock_release>
 800ad1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad20:	6523      	str	r3, [r4, #80]	; 0x50
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <__sinit+0x68>)
 800ad24:	4a13      	ldr	r2, [pc, #76]	; (800ad74 <__sinit+0x6c>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad2a:	42a3      	cmp	r3, r4
 800ad2c:	bf08      	it	eq
 800ad2e:	2301      	moveq	r3, #1
 800ad30:	4620      	mov	r0, r4
 800ad32:	bf08      	it	eq
 800ad34:	61a3      	streq	r3, [r4, #24]
 800ad36:	f000 f81f 	bl	800ad78 <__sfp>
 800ad3a:	6060      	str	r0, [r4, #4]
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f000 f81b 	bl	800ad78 <__sfp>
 800ad42:	60a0      	str	r0, [r4, #8]
 800ad44:	4620      	mov	r0, r4
 800ad46:	f000 f817 	bl	800ad78 <__sfp>
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2104      	movs	r1, #4
 800ad4e:	60e0      	str	r0, [r4, #12]
 800ad50:	6860      	ldr	r0, [r4, #4]
 800ad52:	f7ff ff81 	bl	800ac58 <std>
 800ad56:	2201      	movs	r2, #1
 800ad58:	2109      	movs	r1, #9
 800ad5a:	68a0      	ldr	r0, [r4, #8]
 800ad5c:	f7ff ff7c 	bl	800ac58 <std>
 800ad60:	2202      	movs	r2, #2
 800ad62:	2112      	movs	r1, #18
 800ad64:	68e0      	ldr	r0, [r4, #12]
 800ad66:	f7ff ff77 	bl	800ac58 <std>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	61a3      	str	r3, [r4, #24]
 800ad6e:	e7d1      	b.n	800ad14 <__sinit+0xc>
 800ad70:	0800b284 	.word	0x0800b284
 800ad74:	0800aca1 	.word	0x0800aca1

0800ad78 <__sfp>:
 800ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	f7ff ffac 	bl	800acd8 <__sfp_lock_acquire>
 800ad80:	4b1e      	ldr	r3, [pc, #120]	; (800adfc <__sfp+0x84>)
 800ad82:	681e      	ldr	r6, [r3, #0]
 800ad84:	69b3      	ldr	r3, [r6, #24]
 800ad86:	b913      	cbnz	r3, 800ad8e <__sfp+0x16>
 800ad88:	4630      	mov	r0, r6
 800ad8a:	f7ff ffbd 	bl	800ad08 <__sinit>
 800ad8e:	3648      	adds	r6, #72	; 0x48
 800ad90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	d503      	bpl.n	800ada0 <__sfp+0x28>
 800ad98:	6833      	ldr	r3, [r6, #0]
 800ad9a:	b30b      	cbz	r3, 800ade0 <__sfp+0x68>
 800ad9c:	6836      	ldr	r6, [r6, #0]
 800ad9e:	e7f7      	b.n	800ad90 <__sfp+0x18>
 800ada0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ada4:	b9d5      	cbnz	r5, 800addc <__sfp+0x64>
 800ada6:	4b16      	ldr	r3, [pc, #88]	; (800ae00 <__sfp+0x88>)
 800ada8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adac:	60e3      	str	r3, [r4, #12]
 800adae:	6665      	str	r5, [r4, #100]	; 0x64
 800adb0:	f000 f847 	bl	800ae42 <__retarget_lock_init_recursive>
 800adb4:	f7ff ff96 	bl	800ace4 <__sfp_lock_release>
 800adb8:	2208      	movs	r2, #8
 800adba:	4629      	mov	r1, r5
 800adbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adc4:	6025      	str	r5, [r4, #0]
 800adc6:	61a5      	str	r5, [r4, #24]
 800adc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adcc:	f7fe ff46 	bl	8009c5c <memset>
 800add0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800add4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800add8:	4620      	mov	r0, r4
 800adda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800addc:	3468      	adds	r4, #104	; 0x68
 800adde:	e7d9      	b.n	800ad94 <__sfp+0x1c>
 800ade0:	2104      	movs	r1, #4
 800ade2:	4638      	mov	r0, r7
 800ade4:	f7ff ff62 	bl	800acac <__sfmoreglue>
 800ade8:	4604      	mov	r4, r0
 800adea:	6030      	str	r0, [r6, #0]
 800adec:	2800      	cmp	r0, #0
 800adee:	d1d5      	bne.n	800ad9c <__sfp+0x24>
 800adf0:	f7ff ff78 	bl	800ace4 <__sfp_lock_release>
 800adf4:	230c      	movs	r3, #12
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	e7ee      	b.n	800add8 <__sfp+0x60>
 800adfa:	bf00      	nop
 800adfc:	0800b284 	.word	0x0800b284
 800ae00:	ffff0001 	.word	0xffff0001

0800ae04 <_fwalk_reent>:
 800ae04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae08:	4606      	mov	r6, r0
 800ae0a:	4688      	mov	r8, r1
 800ae0c:	2700      	movs	r7, #0
 800ae0e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae16:	f1b9 0901 	subs.w	r9, r9, #1
 800ae1a:	d505      	bpl.n	800ae28 <_fwalk_reent+0x24>
 800ae1c:	6824      	ldr	r4, [r4, #0]
 800ae1e:	2c00      	cmp	r4, #0
 800ae20:	d1f7      	bne.n	800ae12 <_fwalk_reent+0xe>
 800ae22:	4638      	mov	r0, r7
 800ae24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae28:	89ab      	ldrh	r3, [r5, #12]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d907      	bls.n	800ae3e <_fwalk_reent+0x3a>
 800ae2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae32:	3301      	adds	r3, #1
 800ae34:	d003      	beq.n	800ae3e <_fwalk_reent+0x3a>
 800ae36:	4629      	mov	r1, r5
 800ae38:	4630      	mov	r0, r6
 800ae3a:	47c0      	blx	r8
 800ae3c:	4307      	orrs	r7, r0
 800ae3e:	3568      	adds	r5, #104	; 0x68
 800ae40:	e7e9      	b.n	800ae16 <_fwalk_reent+0x12>

0800ae42 <__retarget_lock_init_recursive>:
 800ae42:	4770      	bx	lr

0800ae44 <__retarget_lock_acquire_recursive>:
 800ae44:	4770      	bx	lr

0800ae46 <__retarget_lock_release_recursive>:
 800ae46:	4770      	bx	lr

0800ae48 <__swhatbuf_r>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	460e      	mov	r6, r1
 800ae4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae50:	4614      	mov	r4, r2
 800ae52:	2900      	cmp	r1, #0
 800ae54:	461d      	mov	r5, r3
 800ae56:	b096      	sub	sp, #88	; 0x58
 800ae58:	da08      	bge.n	800ae6c <__swhatbuf_r+0x24>
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae60:	602a      	str	r2, [r5, #0]
 800ae62:	061a      	lsls	r2, r3, #24
 800ae64:	d410      	bmi.n	800ae88 <__swhatbuf_r+0x40>
 800ae66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae6a:	e00e      	b.n	800ae8a <__swhatbuf_r+0x42>
 800ae6c:	466a      	mov	r2, sp
 800ae6e:	f000 f96d 	bl	800b14c <_fstat_r>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	dbf1      	blt.n	800ae5a <__swhatbuf_r+0x12>
 800ae76:	9a01      	ldr	r2, [sp, #4]
 800ae78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae80:	425a      	negs	r2, r3
 800ae82:	415a      	adcs	r2, r3
 800ae84:	602a      	str	r2, [r5, #0]
 800ae86:	e7ee      	b.n	800ae66 <__swhatbuf_r+0x1e>
 800ae88:	2340      	movs	r3, #64	; 0x40
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	b016      	add	sp, #88	; 0x58
 800ae90:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae94 <__smakebuf_r>:
 800ae94:	898b      	ldrh	r3, [r1, #12]
 800ae96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae98:	079d      	lsls	r5, r3, #30
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	d507      	bpl.n	800aeb0 <__smakebuf_r+0x1c>
 800aea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	6123      	str	r3, [r4, #16]
 800aea8:	2301      	movs	r3, #1
 800aeaa:	6163      	str	r3, [r4, #20]
 800aeac:	b002      	add	sp, #8
 800aeae:	bd70      	pop	{r4, r5, r6, pc}
 800aeb0:	466a      	mov	r2, sp
 800aeb2:	ab01      	add	r3, sp, #4
 800aeb4:	f7ff ffc8 	bl	800ae48 <__swhatbuf_r>
 800aeb8:	9900      	ldr	r1, [sp, #0]
 800aeba:	4605      	mov	r5, r0
 800aebc:	4630      	mov	r0, r6
 800aebe:	f7ff f877 	bl	8009fb0 <_malloc_r>
 800aec2:	b948      	cbnz	r0, 800aed8 <__smakebuf_r+0x44>
 800aec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec8:	059a      	lsls	r2, r3, #22
 800aeca:	d4ef      	bmi.n	800aeac <__smakebuf_r+0x18>
 800aecc:	f023 0303 	bic.w	r3, r3, #3
 800aed0:	f043 0302 	orr.w	r3, r3, #2
 800aed4:	81a3      	strh	r3, [r4, #12]
 800aed6:	e7e3      	b.n	800aea0 <__smakebuf_r+0xc>
 800aed8:	4b0d      	ldr	r3, [pc, #52]	; (800af10 <__smakebuf_r+0x7c>)
 800aeda:	62b3      	str	r3, [r6, #40]	; 0x28
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	6020      	str	r0, [r4, #0]
 800aee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee4:	81a3      	strh	r3, [r4, #12]
 800aee6:	9b00      	ldr	r3, [sp, #0]
 800aee8:	6120      	str	r0, [r4, #16]
 800aeea:	6163      	str	r3, [r4, #20]
 800aeec:	9b01      	ldr	r3, [sp, #4]
 800aeee:	b15b      	cbz	r3, 800af08 <__smakebuf_r+0x74>
 800aef0:	4630      	mov	r0, r6
 800aef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aef6:	f000 f93b 	bl	800b170 <_isatty_r>
 800aefa:	b128      	cbz	r0, 800af08 <__smakebuf_r+0x74>
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	f023 0303 	bic.w	r3, r3, #3
 800af02:	f043 0301 	orr.w	r3, r3, #1
 800af06:	81a3      	strh	r3, [r4, #12]
 800af08:	89a0      	ldrh	r0, [r4, #12]
 800af0a:	4305      	orrs	r5, r0
 800af0c:	81a5      	strh	r5, [r4, #12]
 800af0e:	e7cd      	b.n	800aeac <__smakebuf_r+0x18>
 800af10:	0800aca1 	.word	0x0800aca1

0800af14 <memchr>:
 800af14:	4603      	mov	r3, r0
 800af16:	b510      	push	{r4, lr}
 800af18:	b2c9      	uxtb	r1, r1
 800af1a:	4402      	add	r2, r0
 800af1c:	4293      	cmp	r3, r2
 800af1e:	4618      	mov	r0, r3
 800af20:	d101      	bne.n	800af26 <memchr+0x12>
 800af22:	2000      	movs	r0, #0
 800af24:	e003      	b.n	800af2e <memchr+0x1a>
 800af26:	7804      	ldrb	r4, [r0, #0]
 800af28:	3301      	adds	r3, #1
 800af2a:	428c      	cmp	r4, r1
 800af2c:	d1f6      	bne.n	800af1c <memchr+0x8>
 800af2e:	bd10      	pop	{r4, pc}

0800af30 <memcpy>:
 800af30:	440a      	add	r2, r1
 800af32:	4291      	cmp	r1, r2
 800af34:	f100 33ff 	add.w	r3, r0, #4294967295
 800af38:	d100      	bne.n	800af3c <memcpy+0xc>
 800af3a:	4770      	bx	lr
 800af3c:	b510      	push	{r4, lr}
 800af3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af42:	4291      	cmp	r1, r2
 800af44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af48:	d1f9      	bne.n	800af3e <memcpy+0xe>
 800af4a:	bd10      	pop	{r4, pc}

0800af4c <memmove>:
 800af4c:	4288      	cmp	r0, r1
 800af4e:	b510      	push	{r4, lr}
 800af50:	eb01 0402 	add.w	r4, r1, r2
 800af54:	d902      	bls.n	800af5c <memmove+0x10>
 800af56:	4284      	cmp	r4, r0
 800af58:	4623      	mov	r3, r4
 800af5a:	d807      	bhi.n	800af6c <memmove+0x20>
 800af5c:	1e43      	subs	r3, r0, #1
 800af5e:	42a1      	cmp	r1, r4
 800af60:	d008      	beq.n	800af74 <memmove+0x28>
 800af62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af6a:	e7f8      	b.n	800af5e <memmove+0x12>
 800af6c:	4601      	mov	r1, r0
 800af6e:	4402      	add	r2, r0
 800af70:	428a      	cmp	r2, r1
 800af72:	d100      	bne.n	800af76 <memmove+0x2a>
 800af74:	bd10      	pop	{r4, pc}
 800af76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af7e:	e7f7      	b.n	800af70 <memmove+0x24>

0800af80 <__malloc_lock>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__malloc_lock+0x8>)
 800af82:	f7ff bf5f 	b.w	800ae44 <__retarget_lock_acquire_recursive>
 800af86:	bf00      	nop
 800af88:	20000b8c 	.word	0x20000b8c

0800af8c <__malloc_unlock>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__malloc_unlock+0x8>)
 800af8e:	f7ff bf5a 	b.w	800ae46 <__retarget_lock_release_recursive>
 800af92:	bf00      	nop
 800af94:	20000b8c 	.word	0x20000b8c

0800af98 <_realloc_r>:
 800af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af9c:	4680      	mov	r8, r0
 800af9e:	4614      	mov	r4, r2
 800afa0:	460e      	mov	r6, r1
 800afa2:	b921      	cbnz	r1, 800afae <_realloc_r+0x16>
 800afa4:	4611      	mov	r1, r2
 800afa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afaa:	f7ff b801 	b.w	8009fb0 <_malloc_r>
 800afae:	b92a      	cbnz	r2, 800afbc <_realloc_r+0x24>
 800afb0:	f7fe ff96 	bl	8009ee0 <_free_r>
 800afb4:	4625      	mov	r5, r4
 800afb6:	4628      	mov	r0, r5
 800afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbc:	f000 f8fa 	bl	800b1b4 <_malloc_usable_size_r>
 800afc0:	4284      	cmp	r4, r0
 800afc2:	4607      	mov	r7, r0
 800afc4:	d802      	bhi.n	800afcc <_realloc_r+0x34>
 800afc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afca:	d812      	bhi.n	800aff2 <_realloc_r+0x5a>
 800afcc:	4621      	mov	r1, r4
 800afce:	4640      	mov	r0, r8
 800afd0:	f7fe ffee 	bl	8009fb0 <_malloc_r>
 800afd4:	4605      	mov	r5, r0
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d0ed      	beq.n	800afb6 <_realloc_r+0x1e>
 800afda:	42bc      	cmp	r4, r7
 800afdc:	4622      	mov	r2, r4
 800afde:	4631      	mov	r1, r6
 800afe0:	bf28      	it	cs
 800afe2:	463a      	movcs	r2, r7
 800afe4:	f7ff ffa4 	bl	800af30 <memcpy>
 800afe8:	4631      	mov	r1, r6
 800afea:	4640      	mov	r0, r8
 800afec:	f7fe ff78 	bl	8009ee0 <_free_r>
 800aff0:	e7e1      	b.n	800afb6 <_realloc_r+0x1e>
 800aff2:	4635      	mov	r5, r6
 800aff4:	e7df      	b.n	800afb6 <_realloc_r+0x1e>

0800aff6 <_raise_r>:
 800aff6:	291f      	cmp	r1, #31
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4604      	mov	r4, r0
 800affc:	460d      	mov	r5, r1
 800affe:	d904      	bls.n	800b00a <_raise_r+0x14>
 800b000:	2316      	movs	r3, #22
 800b002:	6003      	str	r3, [r0, #0]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	bd38      	pop	{r3, r4, r5, pc}
 800b00a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b00c:	b112      	cbz	r2, 800b014 <_raise_r+0x1e>
 800b00e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b012:	b94b      	cbnz	r3, 800b028 <_raise_r+0x32>
 800b014:	4620      	mov	r0, r4
 800b016:	f000 f831 	bl	800b07c <_getpid_r>
 800b01a:	462a      	mov	r2, r5
 800b01c:	4601      	mov	r1, r0
 800b01e:	4620      	mov	r0, r4
 800b020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b024:	f000 b818 	b.w	800b058 <_kill_r>
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d00a      	beq.n	800b042 <_raise_r+0x4c>
 800b02c:	1c59      	adds	r1, r3, #1
 800b02e:	d103      	bne.n	800b038 <_raise_r+0x42>
 800b030:	2316      	movs	r3, #22
 800b032:	6003      	str	r3, [r0, #0]
 800b034:	2001      	movs	r0, #1
 800b036:	e7e7      	b.n	800b008 <_raise_r+0x12>
 800b038:	2400      	movs	r4, #0
 800b03a:	4628      	mov	r0, r5
 800b03c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b040:	4798      	blx	r3
 800b042:	2000      	movs	r0, #0
 800b044:	e7e0      	b.n	800b008 <_raise_r+0x12>
	...

0800b048 <raise>:
 800b048:	4b02      	ldr	r3, [pc, #8]	; (800b054 <raise+0xc>)
 800b04a:	4601      	mov	r1, r0
 800b04c:	6818      	ldr	r0, [r3, #0]
 800b04e:	f7ff bfd2 	b.w	800aff6 <_raise_r>
 800b052:	bf00      	nop
 800b054:	2000016c 	.word	0x2000016c

0800b058 <_kill_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	2300      	movs	r3, #0
 800b05c:	4d06      	ldr	r5, [pc, #24]	; (800b078 <_kill_r+0x20>)
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	4611      	mov	r1, r2
 800b064:	602b      	str	r3, [r5, #0]
 800b066:	f7f5 ffda 	bl	800101e <_kill>
 800b06a:	1c43      	adds	r3, r0, #1
 800b06c:	d102      	bne.n	800b074 <_kill_r+0x1c>
 800b06e:	682b      	ldr	r3, [r5, #0]
 800b070:	b103      	cbz	r3, 800b074 <_kill_r+0x1c>
 800b072:	6023      	str	r3, [r4, #0]
 800b074:	bd38      	pop	{r3, r4, r5, pc}
 800b076:	bf00      	nop
 800b078:	20000b90 	.word	0x20000b90

0800b07c <_getpid_r>:
 800b07c:	f7f5 bfc8 	b.w	8001010 <_getpid>

0800b080 <__sread>:
 800b080:	b510      	push	{r4, lr}
 800b082:	460c      	mov	r4, r1
 800b084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b088:	f000 f89c 	bl	800b1c4 <_read_r>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	bfab      	itete	ge
 800b090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b092:	89a3      	ldrhlt	r3, [r4, #12]
 800b094:	181b      	addge	r3, r3, r0
 800b096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b09a:	bfac      	ite	ge
 800b09c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b09e:	81a3      	strhlt	r3, [r4, #12]
 800b0a0:	bd10      	pop	{r4, pc}

0800b0a2 <__swrite>:
 800b0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a6:	461f      	mov	r7, r3
 800b0a8:	898b      	ldrh	r3, [r1, #12]
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	05db      	lsls	r3, r3, #23
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	4616      	mov	r6, r2
 800b0b2:	d505      	bpl.n	800b0c0 <__swrite+0x1e>
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0bc:	f000 f868 	bl	800b190 <_lseek_r>
 800b0c0:	89a3      	ldrh	r3, [r4, #12]
 800b0c2:	4632      	mov	r2, r6
 800b0c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0c8:	81a3      	strh	r3, [r4, #12]
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	463b      	mov	r3, r7
 800b0ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d6:	f000 b817 	b.w	800b108 <_write_r>

0800b0da <__sseek>:
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	460c      	mov	r4, r1
 800b0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e2:	f000 f855 	bl	800b190 <_lseek_r>
 800b0e6:	1c43      	adds	r3, r0, #1
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	bf15      	itete	ne
 800b0ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b0f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b0f6:	81a3      	strheq	r3, [r4, #12]
 800b0f8:	bf18      	it	ne
 800b0fa:	81a3      	strhne	r3, [r4, #12]
 800b0fc:	bd10      	pop	{r4, pc}

0800b0fe <__sclose>:
 800b0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b102:	f000 b813 	b.w	800b12c <_close_r>
	...

0800b108 <_write_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4604      	mov	r4, r0
 800b10c:	4608      	mov	r0, r1
 800b10e:	4611      	mov	r1, r2
 800b110:	2200      	movs	r2, #0
 800b112:	4d05      	ldr	r5, [pc, #20]	; (800b128 <_write_r+0x20>)
 800b114:	602a      	str	r2, [r5, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	f7f5 ffb8 	bl	800108c <_write>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d102      	bne.n	800b126 <_write_r+0x1e>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	b103      	cbz	r3, 800b126 <_write_r+0x1e>
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	bd38      	pop	{r3, r4, r5, pc}
 800b128:	20000b90 	.word	0x20000b90

0800b12c <_close_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	2300      	movs	r3, #0
 800b130:	4d05      	ldr	r5, [pc, #20]	; (800b148 <_close_r+0x1c>)
 800b132:	4604      	mov	r4, r0
 800b134:	4608      	mov	r0, r1
 800b136:	602b      	str	r3, [r5, #0]
 800b138:	f7f5 ffc4 	bl	80010c4 <_close>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d102      	bne.n	800b146 <_close_r+0x1a>
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	b103      	cbz	r3, 800b146 <_close_r+0x1a>
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	20000b90 	.word	0x20000b90

0800b14c <_fstat_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	2300      	movs	r3, #0
 800b150:	4d06      	ldr	r5, [pc, #24]	; (800b16c <_fstat_r+0x20>)
 800b152:	4604      	mov	r4, r0
 800b154:	4608      	mov	r0, r1
 800b156:	4611      	mov	r1, r2
 800b158:	602b      	str	r3, [r5, #0]
 800b15a:	f7f5 ffbe 	bl	80010da <_fstat>
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	d102      	bne.n	800b168 <_fstat_r+0x1c>
 800b162:	682b      	ldr	r3, [r5, #0]
 800b164:	b103      	cbz	r3, 800b168 <_fstat_r+0x1c>
 800b166:	6023      	str	r3, [r4, #0]
 800b168:	bd38      	pop	{r3, r4, r5, pc}
 800b16a:	bf00      	nop
 800b16c:	20000b90 	.word	0x20000b90

0800b170 <_isatty_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	2300      	movs	r3, #0
 800b174:	4d05      	ldr	r5, [pc, #20]	; (800b18c <_isatty_r+0x1c>)
 800b176:	4604      	mov	r4, r0
 800b178:	4608      	mov	r0, r1
 800b17a:	602b      	str	r3, [r5, #0]
 800b17c:	f7f5 ffbc 	bl	80010f8 <_isatty>
 800b180:	1c43      	adds	r3, r0, #1
 800b182:	d102      	bne.n	800b18a <_isatty_r+0x1a>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	b103      	cbz	r3, 800b18a <_isatty_r+0x1a>
 800b188:	6023      	str	r3, [r4, #0]
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
 800b18c:	20000b90 	.word	0x20000b90

0800b190 <_lseek_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4604      	mov	r4, r0
 800b194:	4608      	mov	r0, r1
 800b196:	4611      	mov	r1, r2
 800b198:	2200      	movs	r2, #0
 800b19a:	4d05      	ldr	r5, [pc, #20]	; (800b1b0 <_lseek_r+0x20>)
 800b19c:	602a      	str	r2, [r5, #0]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	f7f5 ffb4 	bl	800110c <_lseek>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d102      	bne.n	800b1ae <_lseek_r+0x1e>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	b103      	cbz	r3, 800b1ae <_lseek_r+0x1e>
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	20000b90 	.word	0x20000b90

0800b1b4 <_malloc_usable_size_r>:
 800b1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1b8:	1f18      	subs	r0, r3, #4
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bfbc      	itt	lt
 800b1be:	580b      	ldrlt	r3, [r1, r0]
 800b1c0:	18c0      	addlt	r0, r0, r3
 800b1c2:	4770      	bx	lr

0800b1c4 <_read_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	4d05      	ldr	r5, [pc, #20]	; (800b1e4 <_read_r+0x20>)
 800b1d0:	602a      	str	r2, [r5, #0]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	f7f5 ff3d 	bl	8001052 <_read>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d102      	bne.n	800b1e2 <_read_r+0x1e>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	b103      	cbz	r3, 800b1e2 <_read_r+0x1e>
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	20000b90 	.word	0x20000b90

0800b1e8 <_init>:
 800b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ea:	bf00      	nop
 800b1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ee:	bc08      	pop	{r3}
 800b1f0:	469e      	mov	lr, r3
 800b1f2:	4770      	bx	lr

0800b1f4 <_fini>:
 800b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f6:	bf00      	nop
 800b1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1fa:	bc08      	pop	{r3}
 800b1fc:	469e      	mov	lr, r3
 800b1fe:	4770      	bx	lr
