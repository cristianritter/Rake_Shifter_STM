
SHIFTER_RAKE_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c140  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800c250  0800c250  0001c250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c520  0800c520  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c520  0800c520  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c520  0800c520  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c520  0800c520  0001c520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c524  0800c524  0001c524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800c528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  200001d0  0800c6f8  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  0800c6f8  00020bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137ae  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003972  00000000  00000000  000339a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00037320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00038518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc15  00000000  00000000  00039578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001613d  00000000  00000000  0005518d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f95b  00000000  00000000  0006b2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fac25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000557c  00000000  00000000  000fac78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c238 	.word	0x0800c238

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800c238 	.word	0x0800c238

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800077e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078c:	d020      	beq.n	80007d0 <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 800078e:	68f9      	ldr	r1, [r7, #12]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	b2ca      	uxtb	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	0a19      	lsrs	r1, r3, #8
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3301      	adds	r3, #1
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	0c19      	lsrs	r1, r3, #16
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3302      	adds	r3, #2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	0e19      	lsrs	r1, r3, #24
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3303      	adds	r3, #3
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	3304      	adds	r3, #4
 80007ce:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d6:	d1cf      	bne.n	8000778 <read_flash+0xc>
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <save_to_flash>:

void save_to_flash(uint8_t *data){
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e8:	b08f      	sub	sp, #60	; 0x3c
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	466b      	mov	r3, sp
 80007f0:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcac 	bl	8000150 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	089e      	lsrs	r6, r3, #2
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fca7 	bl	8000150 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	18f1      	adds	r1, r6, r3
 8000814:	460b      	mov	r3, r1
 8000816:	3b01      	subs	r3, #1
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
 800081a:	2300      	movs	r3, #0
 800081c:	4688      	mov	r8, r1
 800081e:	4699      	mov	r9, r3
 8000820:	f04f 0200 	mov.w	r2, #0
 8000824:	f04f 0300 	mov.w	r3, #0
 8000828:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800082c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000830:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000834:	2300      	movs	r3, #0
 8000836:	460c      	mov	r4, r1
 8000838:	461d      	mov	r5, r3
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	016b      	lsls	r3, r5, #5
 8000844:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000848:	0162      	lsls	r2, r4, #5
 800084a:	008b      	lsls	r3, r1, #2
 800084c:	3307      	adds	r3, #7
 800084e:	08db      	lsrs	r3, r3, #3
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	ebad 0d03 	sub.w	sp, sp, r3
 8000856:	466b      	mov	r3, sp
 8000858:	3303      	adds	r3, #3
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8000860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000862:	f7ff fc75 	bl	8000150 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800086e:	f00a fa15 	bl	800ac9c <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000876:	f00a fa39 	bl	800acec <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800087a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800087c:	f7ff fc68 	bl	8000150 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8000884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000886:	f7ff fc63 	bl	8000150 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff fc56 	bl	8000150 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 80008a8:	b29c      	uxth	r4, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fc50 	bl	8000150 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4423      	add	r3, r4
 80008c4:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80008c6:	857b      	strh	r3, [r7, #42]	; 0x2a
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80008c8:	f002 f948 	bl	8002b5c <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 80008cc:	f002 f97c 	bl	8002bc8 <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.PageAddress = FLASH_STORAGE;
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <save_to_flash+0x178>)
 80008d6:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbPages = pages;
 80008d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008da:	b29b      	uxth	r3, r3
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError;

	volatile uint32_t write_cnt=0, index=0;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]

	volatile HAL_StatusTypeDef status;
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80008e6:	f107 0214 	add.w	r2, r7, #20
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 fa47 	bl	8002d84 <HAL_FLASHEx_Erase>
 80008f6:	4603      	mov	r3, r0
 80008f8:	72fb      	strb	r3, [r7, #11]
	while(index < data_length)
 80008fa:	e020      	b.n	800093e <save_to_flash+0x15a>
	{
		if (status == HAL_OK){
 80008fc:	7afb      	ldrb	r3, [r7, #11]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11c      	bne.n	800093e <save_to_flash+0x15a>
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800090a:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000916:	2200      	movs	r2, #0
 8000918:	469a      	mov	sl, r3
 800091a:	4693      	mov	fp, r2
 800091c:	4652      	mov	r2, sl
 800091e:	465b      	mov	r3, fp
 8000920:	2002      	movs	r0, #2
 8000922:	f002 f8ab 	bl	8002a7c <HAL_FLASH_Program>
 8000926:	4603      	mov	r3, r0
 8000928:	72fb      	strb	r3, [r7, #11]
			if(status == HAL_OK){
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d105      	bne.n	800093e <save_to_flash+0x15a>
				write_cnt += 4;
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	3304      	adds	r3, #4
 8000936:	613b      	str	r3, [r7, #16]
				index++;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
	while(index < data_length)
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000942:	429a      	cmp	r2, r3
 8000944:	d3da      	bcc.n	80008fc <save_to_flash+0x118>
			}
		}
	}

	HAL_FLASH_OB_Lock();
 8000946:	f002 f95b 	bl	8002c00 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 800094a:	f002 f92d 	bl	8002ba8 <HAL_FLASH_Lock>
 800094e:	f8d7 d000 	ldr.w	sp, [r7]
}
 8000952:	bf00      	nop
 8000954:	373c      	adds	r7, #60	; 0x3c
 8000956:	46bd      	mov	sp, r7
 8000958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800095c:	08019000 	.word	0x08019000

08000960 <LerADCS>:
uint16_t speed_div_y[2] = {1117, 2824};					//  -		-		-		-		-		-		-		-  y
uint16_t ADCValue[3] = {0, 0, 0};
int8_t buffer2[6];
uint8_t rx_buffer[2];

void LerADCS(){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	//Este trecho testa somente um spi por round, evitando perca de tempo
	if (spi_detection == 1){
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <LerADCS+0x70>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d10c      	bne.n	8000986 <LerADCS+0x26>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);  //descarga para seleção do G27
 800096c:	2301      	movs	r3, #1
 800096e:	2202      	movs	r2, #2
 8000970:	4918      	ldr	r1, [pc, #96]	; (80009d4 <LerADCS+0x74>)
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <LerADCS+0x78>)
 8000974:	f004 fe7a 	bl	800566c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);
 8000978:	2301      	movs	r3, #1
 800097a:	2202      	movs	r2, #2
 800097c:	4915      	ldr	r1, [pc, #84]	; (80009d4 <LerADCS+0x74>)
 800097e:	4816      	ldr	r0, [pc, #88]	; (80009d8 <LerADCS+0x78>)
 8000980:	f004 fe74 	bl	800566c <HAL_SPI_Receive>
 8000984:	e00b      	b.n	800099e <LerADCS+0x3e>
		 }
	else {
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);  // descarga para seleção do G25
 8000986:	2301      	movs	r3, #1
 8000988:	2202      	movs	r2, #2
 800098a:	4912      	ldr	r1, [pc, #72]	; (80009d4 <LerADCS+0x74>)
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <LerADCS+0x7c>)
 800098e:	f004 fe6d 	bl	800566c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);
 8000992:	2301      	movs	r3, #1
 8000994:	2202      	movs	r2, #2
 8000996:	490f      	ldr	r1, [pc, #60]	; (80009d4 <LerADCS+0x74>)
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <LerADCS+0x7c>)
 800099a:	f004 fe67 	bl	800566c <HAL_SPI_Receive>
	 }
	//Este trecho salva o valor da tensao do capacitor em cada teste
	if (spi_detection == 1){						// se estiver conectado g25 este valor reduz, pois o jumper entre os pinos 1 [spi1] e 9 [cap] faz isso.
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <LerADCS+0x70>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d107      	bne.n	80009b6 <LerADCS+0x56>
	  spi_values[0] = ADCValue[2];
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <LerADCS+0x80>)
 80009a8:	889a      	ldrh	r2, [r3, #4]
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <LerADCS+0x84>)
 80009ac:	801a      	strh	r2, [r3, #0]
	  spi_detection = 2;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <LerADCS+0x70>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e006      	b.n	80009c4 <LerADCS+0x64>
	}
	else{											// se estiver conectado g27 este valor reduz, pois o jumper entre os pinos 7 [spi2] e 9 [cap] faz isso.
	  spi_values[1] = ADCValue[2];									// quando excitado spi2 gera reducao na tensao do cap caso esteja conectado o g25
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <LerADCS+0x80>)
 80009b8:	889a      	ldrh	r2, [r3, #4]
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <LerADCS+0x84>)
 80009bc:	805a      	strh	r2, [r3, #2]
	  spi_detection = 1;
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <LerADCS+0x70>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[0]), 100);
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[1]), 100);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", ADCValue[2]), 100);
  //HAL_UART_Transmit(&huart1, "      ", 6, 100);
  //HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  HAL_Delay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f001 f8f7 	bl	8001bb8 <HAL_Delay>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000368 	.word	0x20000368
 80009d8:	20000260 	.word	0x20000260
 80009dc:	200002b8 	.word	0x200002b8
 80009e0:	20000360 	.word	0x20000360
 80009e4:	2000035c 	.word	0x2000035c

080009e8 <LerSPI>:

void LerSPI(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	481c      	ldr	r0, [pc, #112]	; (8000a64 <LerSPI+0x7c>)
 80009f4:	f002 fc09 	bl	800320a <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f001 f8dd 	bl	8001bb8 <HAL_Delay>
//  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 50);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", spi_values[0]), 100);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", spi_values[1]), 100);

  if (spi_values[0] - spi_values[1] > -10 && spi_values[0] - spi_values[1] < 10){
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <LerSPI+0x80>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <LerSPI+0x80>)
 8000a06:	885b      	ldrh	r3, [r3, #2]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	f113 0f09 	cmn.w	r3, #9
 8000a0e:	db07      	blt.n	8000a20 <LerSPI+0x38>
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <LerSPI+0x80>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <LerSPI+0x80>)
 8000a18:	885b      	ldrh	r3, [r3, #2]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b09      	cmp	r3, #9
 8000a1e:	dd12      	ble.n	8000a46 <LerSPI+0x5e>
//	  HAL_UART_Transmit(&huart1, "DESCON", 6, 100);
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
	//  return;
  }
  else if (spi_values[0] < spi_values[1]){ 					// significa que está conectado o G27
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <LerSPI+0x80>)
 8000a22:	881a      	ldrh	r2, [r3, #0]
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <LerSPI+0x80>)
 8000a26:	885b      	ldrh	r3, [r3, #2]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d206      	bcs.n	8000a3a <LerSPI+0x52>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 50);
 8000a2c:	2332      	movs	r3, #50	; 0x32
 8000a2e:	2202      	movs	r2, #2
 8000a30:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LerSPI+0x84>)
 8000a32:	480f      	ldr	r0, [pc, #60]	; (8000a70 <LerSPI+0x88>)
 8000a34:	f004 fe1a 	bl	800566c <HAL_SPI_Receive>
 8000a38:	e005      	b.n	8000a46 <LerSPI+0x5e>
//	  HAL_UART_Transmit(&huart1, "G25   ", 6, 100);
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  }
  else{													// significa que está conectado o G25
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 50);
 8000a3a:	2332      	movs	r3, #50	; 0x32
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	490b      	ldr	r1, [pc, #44]	; (8000a6c <LerSPI+0x84>)
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <LerSPI+0x8c>)
 8000a42:	f004 fe13 	bl	800566c <HAL_SPI_Receive>
//	  HAL_UART_Transmit(&huart1, "G27   ", 6, 100);
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  }

  HAL_Delay(1);
 8000a46:	2001      	movs	r0, #1
 8000a48:	f001 f8b6 	bl	8001bb8 <HAL_Delay>
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <LerSPI+0x7c>)
 8000a54:	f002 fbd9 	bl	800320a <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f001 f8ad 	bl	8001bb8 <HAL_Delay>

//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[0]), 100);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[1]), 100);
//  HAL_UART_Transmit(&huart1, "      ", 6, 100);
//  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40010c00 	.word	0x40010c00
 8000a68:	2000035c 	.word	0x2000035c
 8000a6c:	20000368 	.word	0x20000368
 8000a70:	200002b8 	.word	0x200002b8
 8000a74:	20000260 	.word	0x20000260

08000a78 <Calibrar>:

void Calibrar(void)
{
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b092      	sub	sp, #72	; 0x48
 8000a7c:	af02      	add	r7, sp, #8
	if (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){			// se botão de calibração pressionado
 8000a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a82:	4885      	ldr	r0, [pc, #532]	; (8000c98 <Calibrar+0x220>)
 8000a84:	f002 fbaa 	bl	80031dc <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f040 80fa 	bne.w	8000c84 <Calibrar+0x20c>
		HAL_Delay(500);
 8000a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a94:	f001 f890 	bl	8001bb8 <HAL_Delay>
		char params_to_save[50];
		uint16_t axis_x_min_max[2] = {9999, 0};
 8000a98:	f242 730f 	movw	r3, #9999	; 0x270f
 8000a9c:	873b      	strh	r3, [r7, #56]	; 0x38
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	877b      	strh	r3, [r7, #58]	; 0x3a
		uint16_t axis_y_min_max[2] = {9999, 0};
 8000aa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8000aa6:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000aac:	e029      	b.n	8000b02 <Calibrar+0x8a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab2:	487a      	ldr	r0, [pc, #488]	; (8000c9c <Calibrar+0x224>)
 8000ab4:	f002 fbc1 	bl	800323a <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8000ab8:	2032      	movs	r0, #50	; 0x32
 8000aba:	f001 f87d 	bl	8001bb8 <HAL_Delay>
			LerADCS();  									//le posicao dos eixos
 8000abe:	f7ff ff4f 	bl	8000960 <LerADCS>
			if (ADCValue[0] < axis_x_min_max[0]){			// define o menor valor detectado no eixo x
 8000ac2:	4b77      	ldr	r3, [pc, #476]	; (8000ca0 <Calibrar+0x228>)
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d202      	bcs.n	8000ad2 <Calibrar+0x5a>
				axis_x_min_max[0] = ADCValue[0];
 8000acc:	4b74      	ldr	r3, [pc, #464]	; (8000ca0 <Calibrar+0x228>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	873b      	strh	r3, [r7, #56]	; 0x38
			}
			if (ADCValue[0] > axis_x_min_max[1]){			// define o maior valor detectado no eixo x
 8000ad2:	4b73      	ldr	r3, [pc, #460]	; (8000ca0 <Calibrar+0x228>)
 8000ad4:	881a      	ldrh	r2, [r3, #0]
 8000ad6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d902      	bls.n	8000ae2 <Calibrar+0x6a>
				axis_x_min_max[1] = ADCValue[0];
 8000adc:	4b70      	ldr	r3, [pc, #448]	; (8000ca0 <Calibrar+0x228>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	877b      	strh	r3, [r7, #58]	; 0x3a
			}
			if (ADCValue[1] < axis_y_min_max[0]){			// define o menor valor detectado no eixo y
 8000ae2:	4b6f      	ldr	r3, [pc, #444]	; (8000ca0 <Calibrar+0x228>)
 8000ae4:	885a      	ldrh	r2, [r3, #2]
 8000ae6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d202      	bcs.n	8000af2 <Calibrar+0x7a>
				axis_y_min_max[0] = ADCValue[1];
 8000aec:	4b6c      	ldr	r3, [pc, #432]	; (8000ca0 <Calibrar+0x228>)
 8000aee:	885b      	ldrh	r3, [r3, #2]
 8000af0:	86bb      	strh	r3, [r7, #52]	; 0x34
			}
			if (ADCValue[1] > axis_y_min_max[1]){			// define o maior valor detectado no eixo y
 8000af2:	4b6b      	ldr	r3, [pc, #428]	; (8000ca0 <Calibrar+0x228>)
 8000af4:	885a      	ldrh	r2, [r3, #2]
 8000af6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d902      	bls.n	8000b02 <Calibrar+0x8a>
				axis_y_min_max[1] = ADCValue[1];
 8000afc:	4b68      	ldr	r3, [pc, #416]	; (8000ca0 <Calibrar+0x228>)
 8000afe:	885b      	ldrh	r3, [r3, #2]
 8000b00:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b06:	4864      	ldr	r0, [pc, #400]	; (8000c98 <Calibrar+0x220>)
 8000b08:	f002 fb68 	bl	80031dc <HAL_GPIO_ReadPin>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0cd      	beq.n	8000aae <Calibrar+0x36>
			}
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	4860      	ldr	r0, [pc, #384]	; (8000c9c <Calibrar+0x224>)
 8000b1a:	f002 fb76 	bl	800320a <HAL_GPIO_WritePin>

		uint16_t space_x = (axis_x_min_max[1]-axis_x_min_max[0])/3;
 8000b1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b20:	461a      	mov	r2, r3
 8000b22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	4a5f      	ldr	r2, [pc, #380]	; (8000ca4 <Calibrar+0x22c>)
 8000b28:	fb82 1203 	smull	r1, r2, r2, r3
 8000b2c:	17db      	asrs	r3, r3, #31
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	87fb      	strh	r3, [r7, #62]	; 0x3e
		speed_div_x[0] = axis_x_min_max[0] + (space_x*0.8); 					//calcula as linhas de calibracao do eixo x
 8000b32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fd8f 	bl	8000658 <__aeabi_i2d>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	460d      	mov	r5, r1
 8000b3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd89 	bl	8000658 <__aeabi_i2d>
 8000b46:	a352      	add	r3, pc, #328	; (adr r3, 8000c90 <Calibrar+0x218>)
 8000b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4c:	f7ff fb08 	bl	8000160 <__aeabi_dmul>
 8000b50:	4602      	mov	r2, r0
 8000b52:	460b      	mov	r3, r1
 8000b54:	4620      	mov	r0, r4
 8000b56:	4629      	mov	r1, r5
 8000b58:	f7ff fc32 	bl	80003c0 <__adddf3>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4610      	mov	r0, r2
 8000b62:	4619      	mov	r1, r3
 8000b64:	f7ff fde2 	bl	800072c <__aeabi_d2uiz>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ca8 <Calibrar+0x230>)
 8000b6e:	801a      	strh	r2, [r3, #0]

		speed_div_x[1] = axis_x_min_max[1] - (space_x*0.8);
 8000b70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fd70 	bl	8000658 <__aeabi_i2d>
 8000b78:	4604      	mov	r4, r0
 8000b7a:	460d      	mov	r5, r1
 8000b7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fd6a 	bl	8000658 <__aeabi_i2d>
 8000b84:	a342      	add	r3, pc, #264	; (adr r3, 8000c90 <Calibrar+0x218>)
 8000b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8a:	f7ff fae9 	bl	8000160 <__aeabi_dmul>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	460b      	mov	r3, r1
 8000b92:	4620      	mov	r0, r4
 8000b94:	4629      	mov	r1, r5
 8000b96:	f7ff fc11 	bl	80003bc <__aeabi_dsub>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f7ff fdc3 	bl	800072c <__aeabi_d2uiz>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <Calibrar+0x230>)
 8000bac:	805a      	strh	r2, [r3, #2]

		uint16_t space_y = (axis_y_min_max[1]-axis_y_min_max[0])/3;
 8000bae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	4a3b      	ldr	r2, [pc, #236]	; (8000ca4 <Calibrar+0x22c>)
 8000bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbc:	17db      	asrs	r3, r3, #31
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
		speed_div_y[0] = axis_y_min_max[0] + (space_y*0.8); 					//calcula as linhas de calibracao do eixo y
 8000bc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd47 	bl	8000658 <__aeabi_i2d>
 8000bca:	4604      	mov	r4, r0
 8000bcc:	460d      	mov	r5, r1
 8000bce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fd41 	bl	8000658 <__aeabi_i2d>
 8000bd6:	a32e      	add	r3, pc, #184	; (adr r3, 8000c90 <Calibrar+0x218>)
 8000bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bdc:	f7ff fac0 	bl	8000160 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4620      	mov	r0, r4
 8000be6:	4629      	mov	r1, r5
 8000be8:	f7ff fbea 	bl	80003c0 <__adddf3>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f7ff fd9a 	bl	800072c <__aeabi_d2uiz>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <Calibrar+0x234>)
 8000bfe:	801a      	strh	r2, [r3, #0]

		speed_div_y[1] = axis_y_min_max[1] - (space_y*0.8);
 8000c00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fd28 	bl	8000658 <__aeabi_i2d>
 8000c08:	4604      	mov	r4, r0
 8000c0a:	460d      	mov	r5, r1
 8000c0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fd22 	bl	8000658 <__aeabi_i2d>
 8000c14:	a31e      	add	r3, pc, #120	; (adr r3, 8000c90 <Calibrar+0x218>)
 8000c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1a:	f7ff faa1 	bl	8000160 <__aeabi_dmul>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	460b      	mov	r3, r1
 8000c22:	4620      	mov	r0, r4
 8000c24:	4629      	mov	r1, r5
 8000c26:	f7ff fbc9 	bl	80003bc <__aeabi_dsub>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	f7ff fd7b 	bl	800072c <__aeabi_d2uiz>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <Calibrar+0x234>)
 8000c3c:	805a      	strh	r2, [r3, #2]

		sprintf(params_to_save, "%u,%u,%u,%u,", speed_div_x[0], speed_div_x[1], speed_div_y[0], speed_div_y[1]);
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <Calibrar+0x230>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <Calibrar+0x230>)
 8000c46:	885b      	ldrh	r3, [r3, #2]
 8000c48:	461c      	mov	r4, r3
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <Calibrar+0x234>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <Calibrar+0x234>)
 8000c52:	885b      	ldrh	r3, [r3, #2]
 8000c54:	4638      	mov	r0, r7
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	9200      	str	r2, [sp, #0]
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	4914      	ldr	r1, [pc, #80]	; (8000cb0 <Calibrar+0x238>)
 8000c60:	f00a f824 	bl	800acac <siprintf>
		save_to_flash((uint8_t *)params_to_save);
 8000c64:	463b      	mov	r3, r7
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fdbc 	bl	80007e4 <save_to_flash>
		HAL_UART_Transmit(&huart1, (uint8_t *)params_to_save, (int)sizeof(params_to_save), 100);
 8000c6c:	4639      	mov	r1, r7
 8000c6e:	2364      	movs	r3, #100	; 0x64
 8000c70:	2232      	movs	r2, #50	; 0x32
 8000c72:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <Calibrar+0x23c>)
 8000c74:	f005 f9f7 	bl	8006066 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n ", 2, 100);
 8000c78:	2364      	movs	r3, #100	; 0x64
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <Calibrar+0x240>)
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <Calibrar+0x23c>)
 8000c80:	f005 f9f1 	bl	8006066 <HAL_UART_Transmit>

	}
}
 8000c84:	bf00      	nop
 8000c86:	3740      	adds	r7, #64	; 0x40
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8c:	f3af 8000 	nop.w
 8000c90:	9999999a 	.word	0x9999999a
 8000c94:	3fe99999 	.word	0x3fe99999
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	20000360 	.word	0x20000360
 8000ca4:	55555556 	.word	0x55555556
 8000ca8:	20000004 	.word	0x20000004
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	0800c250 	.word	0x0800c250
 8000cb4:	20000310 	.word	0x20000310
 8000cb8:	0800c260 	.word	0x0800c260

08000cbc <update_data_from_flash>:

void update_data_from_flash(uint16_t (* speed_div_x), uint16_t (* speed_div_y)){									// PRECISA FINALIZAR ANTES DE TESTAR
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0b4      	sub	sp, #208	; 0xd0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	char data[0xC0];
	read_flash((uint8_t *)data);
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd4e 	bl	800076c <read_flash>
	char * token = strtok(data,",");				//first strtok go to variable directly
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4922      	ldr	r1, [pc, #136]	; (8000d60 <update_data_from_flash+0xa4>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f00a f810 	bl	800acfc <strtok>
 8000cdc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if (atoi(token)==0){
 8000ce0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000ce4:	f009 ffac 	bl	800ac40 <atoi>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d034      	beq.n	8000d58 <update_data_from_flash+0x9c>
    	return;
    }
	speed_div_x[0] = atoi(token);
 8000cee:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000cf2:	f009 ffa5 	bl	800ac40 <atoi>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000cfe:	4918      	ldr	r1, [pc, #96]	; (8000d60 <update_data_from_flash+0xa4>)
 8000d00:	2000      	movs	r0, #0
 8000d02:	f009 fffb 	bl	800acfc <strtok>
 8000d06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_x[1] = atoi(token);
 8000d0a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000d0e:	f009 ff97 	bl	800ac40 <atoi>
 8000d12:	4602      	mov	r2, r0
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3302      	adds	r3, #2
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000d1c:	4910      	ldr	r1, [pc, #64]	; (8000d60 <update_data_from_flash+0xa4>)
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f009 ffec 	bl	800acfc <strtok>
 8000d24:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_y[0] = atoi(token);
 8000d28:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000d2c:	f009 ff88 	bl	800ac40 <atoi>
 8000d30:	4603      	mov	r3, r0
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000d38:	4909      	ldr	r1, [pc, #36]	; (8000d60 <update_data_from_flash+0xa4>)
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f009 ffde 	bl	800acfc <strtok>
 8000d40:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_y[1] = atoi(token);
 8000d44:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000d48:	f009 ff7a 	bl	800ac40 <atoi>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3302      	adds	r3, #2
 8000d52:	b292      	uxth	r2, r2
 8000d54:	801a      	strh	r2, [r3, #0]
 8000d56:	e000      	b.n	8000d5a <update_data_from_flash+0x9e>
    	return;
 8000d58:	bf00      	nop

}
 8000d5a:	37d0      	adds	r7, #208	; 0xd0
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800c264 	.word	0x0800c264

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f000 fec3 	bl	8001af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 fa2d 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f000 fb99 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d76:	f000 fb79 	bl	800146c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000d7a:	f009 fb7d 	bl	800a478 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000d7e:	f000 fa83 	bl	8001288 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000d82:	f000 fadd 	bl	8001340 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d86:	f000 fb11 	bl	80013ac <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000d8a:	f000 fb45 	bl	8001418 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 8000d8e:	2203      	movs	r2, #3
 8000d90:	498d      	ldr	r1, [pc, #564]	; (8000fc8 <main+0x264>)
 8000d92:	488e      	ldr	r0, [pc, #568]	; (8000fcc <main+0x268>)
 8000d94:	f001 f80c 	bl	8001db0 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); 		//liga led
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9e:	488c      	ldr	r0, [pc, #560]	; (8000fd0 <main+0x26c>)
 8000da0:	f002 fa33 	bl	800320a <HAL_GPIO_WritePin>
  update_data_from_flash(speed_div_x, speed_div_y);				//atualiza valores com os dados da memoria flash
 8000da4:	498b      	ldr	r1, [pc, #556]	; (8000fd4 <main+0x270>)
 8000da6:	488c      	ldr	r0, [pc, #560]	; (8000fd8 <main+0x274>)
 8000da8:	f7ff ff88 	bl	8000cbc <update_data_from_flash>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Calibrar();
 8000dac:	f7ff fe64 	bl	8000a78 <Calibrar>
	  LerADCS();
 8000db0:	f7ff fdd6 	bl	8000960 <LerADCS>
	  LerSPI();
 8000db4:	f7ff fe18 	bl	80009e8 <LerSPI>
//	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_x[0]), 100);
//	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_x[1]), 100);
//	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_y[0]), 100);
//	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_y[1]), 100);

	  uint16_t cambio_x_axis = (uint16_t) ADCValue[0];  //manopla x
 8000db8:	4b83      	ldr	r3, [pc, #524]	; (8000fc8 <main+0x264>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	80fb      	strh	r3, [r7, #6]
	  uint16_t cambio_y_axis = (uint16_t) ADCValue[1];  //manopla y
 8000dbe:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <main+0x264>)
 8000dc0:	885b      	ldrh	r3, [r3, #2]
 8000dc2:	80bb      	strh	r3, [r7, #4]

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis > speed_div_y[1]){  //speed 1
 8000dc4:	4b84      	ldr	r3, [pc, #528]	; (8000fd8 <main+0x274>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	88fa      	ldrh	r2, [r7, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d20c      	bcs.n	8000de8 <main+0x84>
 8000dce:	4b81      	ldr	r3, [pc, #516]	; (8000fd4 <main+0x270>)
 8000dd0:	885b      	ldrh	r3, [r3, #2]
 8000dd2:	88ba      	ldrh	r2, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d907      	bls.n	8000de8 <main+0x84>
		  joystickhid.botoes0 |= (uint8_t)(1<<0);	// SETA BOTAO 1
 8000dd8:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <main+0x278>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b7e      	ldr	r3, [pc, #504]	; (8000fdc <main+0x278>)
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e006      	b.n	8000df6 <main+0x92>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<0);	// RESETA BOTAO 1
 8000de8:	4b7c      	ldr	r3, [pc, #496]	; (8000fdc <main+0x278>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f023 0301 	bic.w	r3, r3, #1
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <main+0x278>)
 8000df4:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis < speed_div_y[0]){  //speed2
 8000df6:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <main+0x274>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	88fa      	ldrh	r2, [r7, #6]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d20c      	bcs.n	8000e1a <main+0xb6>
 8000e00:	4b74      	ldr	r3, [pc, #464]	; (8000fd4 <main+0x270>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	88ba      	ldrh	r2, [r7, #4]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d207      	bcs.n	8000e1a <main+0xb6>
		  joystickhid.botoes0 |= (uint8_t)(1<<1);	// SETA BOTAO 2
 8000e0a:	4b74      	ldr	r3, [pc, #464]	; (8000fdc <main+0x278>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b71      	ldr	r3, [pc, #452]	; (8000fdc <main+0x278>)
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e006      	b.n	8000e28 <main+0xc4>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<1);	// RESETA BOTAO 2
 8000e1a:	4b70      	ldr	r3, [pc, #448]	; (8000fdc <main+0x278>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	f023 0302 	bic.w	r3, r3, #2
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b6d      	ldr	r3, [pc, #436]	; (8000fdc <main+0x278>)
 8000e26:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis > speed_div_y[1]){  //speed 3
 8000e28:	4b6b      	ldr	r3, [pc, #428]	; (8000fd8 <main+0x274>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d911      	bls.n	8000e56 <main+0xf2>
 8000e32:	4b69      	ldr	r3, [pc, #420]	; (8000fd8 <main+0x274>)
 8000e34:	885b      	ldrh	r3, [r3, #2]
 8000e36:	88fa      	ldrh	r2, [r7, #6]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d20c      	bcs.n	8000e56 <main+0xf2>
 8000e3c:	4b65      	ldr	r3, [pc, #404]	; (8000fd4 <main+0x270>)
 8000e3e:	885b      	ldrh	r3, [r3, #2]
 8000e40:	88ba      	ldrh	r2, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d907      	bls.n	8000e56 <main+0xf2>
		  joystickhid.botoes0 |= (uint8_t)(1<<2);	// SETA BOTAO 3
 8000e46:	4b65      	ldr	r3, [pc, #404]	; (8000fdc <main+0x278>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b62      	ldr	r3, [pc, #392]	; (8000fdc <main+0x278>)
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e006      	b.n	8000e64 <main+0x100>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<2);	// RESETA BOTAO 3
 8000e56:	4b61      	ldr	r3, [pc, #388]	; (8000fdc <main+0x278>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f023 0304 	bic.w	r3, r3, #4
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b5e      	ldr	r3, [pc, #376]	; (8000fdc <main+0x278>)
 8000e62:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis < speed_div_y[0]){  //speed 4
 8000e64:	4b5c      	ldr	r3, [pc, #368]	; (8000fd8 <main+0x274>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d911      	bls.n	8000e92 <main+0x12e>
 8000e6e:	4b5a      	ldr	r3, [pc, #360]	; (8000fd8 <main+0x274>)
 8000e70:	885b      	ldrh	r3, [r3, #2]
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d20c      	bcs.n	8000e92 <main+0x12e>
 8000e78:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <main+0x270>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	88ba      	ldrh	r2, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d207      	bcs.n	8000e92 <main+0x12e>
		  joystickhid.botoes0 |= (uint8_t)(1<<3);	// SETA BOTAO 4
 8000e82:	4b56      	ldr	r3, [pc, #344]	; (8000fdc <main+0x278>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <main+0x278>)
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	e006      	b.n	8000ea0 <main+0x13c>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<3);	// RESETA BOTAO 4
 8000e92:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <main+0x278>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f023 0308 	bic.w	r3, r3, #8
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <main+0x278>)
 8000e9e:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis > speed_div_y[1]){    //speed5
 8000ea0:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <main+0x274>)
 8000ea2:	885b      	ldrh	r3, [r3, #2]
 8000ea4:	88fa      	ldrh	r2, [r7, #6]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d90c      	bls.n	8000ec4 <main+0x160>
 8000eaa:	4b4a      	ldr	r3, [pc, #296]	; (8000fd4 <main+0x270>)
 8000eac:	885b      	ldrh	r3, [r3, #2]
 8000eae:	88ba      	ldrh	r2, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d907      	bls.n	8000ec4 <main+0x160>
		  joystickhid.botoes0 |= (uint8_t)(1<<4);	// SETA BOTAO 5
 8000eb4:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <main+0x278>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f043 0310 	orr.w	r3, r3, #16
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <main+0x278>)
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e006      	b.n	8000ed2 <main+0x16e>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<4);	// RESETA BOTAO 5
 8000ec4:	4b45      	ldr	r3, [pc, #276]	; (8000fdc <main+0x278>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f023 0310 	bic.w	r3, r3, #16
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <main+0x278>)
 8000ed0:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0]){    // speed 6
 8000ed2:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <main+0x274>)
 8000ed4:	885b      	ldrh	r3, [r3, #2]
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90c      	bls.n	8000ef6 <main+0x192>
 8000edc:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <main+0x270>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	88ba      	ldrh	r2, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d207      	bcs.n	8000ef6 <main+0x192>
		  joystickhid.botoes0 |= (uint8_t)(1<<5);	// SETA BOTAO 6
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <main+0x278>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f043 0320 	orr.w	r3, r3, #32
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <main+0x278>)
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e006      	b.n	8000f04 <main+0x1a0>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5);	// RESETA BOTAO 6
 8000ef6:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <main+0x278>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	f023 0320 	bic.w	r3, r3, #32
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <main+0x278>)
 8000f02:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<0))  {
 8000f04:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <main+0x27c>)
 8000f06:	785b      	ldrb	r3, [r3, #1]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d007      	beq.n	8000f20 <main+0x1bc>
		  joystickhid.botoes0 |= (uint16_t) (1<<6);  // SETA BOTAO 7
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <main+0x278>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <main+0x278>)
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e006      	b.n	8000f2e <main+0x1ca>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 7
 8000f20:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <main+0x278>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <main+0x278>)
 8000f2c:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<1))  {
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <main+0x27c>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <main+0x1e6>
		  joystickhid.botoes0 |= (uint16_t)(1<<7);	// SETA BOTAO 8
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <main+0x278>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <main+0x278>)
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e006      	b.n	8000f58 <main+0x1f4>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 8
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <main+0x278>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <main+0x278>)
 8000f56:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<2))  {
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <main+0x27c>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d007      	beq.n	8000f74 <main+0x210>
		  joystickhid.botoes1 |= (uint16_t)(1<<0);	// SETA BOTAO 9
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <main+0x278>)
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <main+0x278>)
 8000f70:	705a      	strb	r2, [r3, #1]
 8000f72:	e006      	b.n	8000f82 <main+0x21e>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 9
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <main+0x278>)
 8000f76:	785b      	ldrb	r3, [r3, #1]
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <main+0x278>)
 8000f80:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<3))  {
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <main+0x27c>)
 8000f84:	785b      	ldrb	r3, [r3, #1]
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <main+0x23a>
		  joystickhid.botoes1 |= (uint16_t)(1<<1);	// SETA BOTAO 10
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <main+0x278>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <main+0x278>)
 8000f9a:	705a      	strb	r2, [r3, #1]
 8000f9c:	e006      	b.n	8000fac <main+0x248>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 10
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <main+0x278>)
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	f023 0302 	bic.w	r3, r3, #2
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <main+0x278>)
 8000faa:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<4))  {
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <main+0x27c>)
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d015      	beq.n	8000fe4 <main+0x280>
		  joystickhid.botoes1 |= (uint16_t)(1<<2);	// SETA BOTAO 11
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <main+0x278>)
 8000fba:	785b      	ldrb	r3, [r3, #1]
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <main+0x278>)
 8000fc4:	705a      	strb	r2, [r3, #1]
 8000fc6:	e014      	b.n	8000ff2 <main+0x28e>
 8000fc8:	20000360 	.word	0x20000360
 8000fcc:	200001ec 	.word	0x200001ec
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	20000354 	.word	0x20000354
 8000fe0:	20000368 	.word	0x20000368
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<2);	// RESETA BOTAO 11
 8000fe4:	4b73      	ldr	r3, [pc, #460]	; (80011b4 <main+0x450>)
 8000fe6:	785b      	ldrb	r3, [r3, #1]
 8000fe8:	f023 0304 	bic.w	r3, r3, #4
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b71      	ldr	r3, [pc, #452]	; (80011b4 <main+0x450>)
 8000ff0:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<5))  {
 8000ff2:	4b71      	ldr	r3, [pc, #452]	; (80011b8 <main+0x454>)
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	f003 0320 	and.w	r3, r3, #32
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <main+0x2aa>
		  joystickhid.botoes1 |= (uint16_t)(1<<3);	// SETA BOTAO 12
 8000ffe:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <main+0x450>)
 8001000:	785b      	ldrb	r3, [r3, #1]
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b6a      	ldr	r3, [pc, #424]	; (80011b4 <main+0x450>)
 800100a:	705a      	strb	r2, [r3, #1]
 800100c:	e006      	b.n	800101c <main+0x2b8>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<3);	// RESETA BOTAO 12
 800100e:	4b69      	ldr	r3, [pc, #420]	; (80011b4 <main+0x450>)
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	f023 0308 	bic.w	r3, r3, #8
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <main+0x450>)
 800101a:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<6))  {
 800101c:	4b66      	ldr	r3, [pc, #408]	; (80011b8 <main+0x454>)
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <main+0x2d4>
		  joystickhid.botoes1 |= (uint16_t)(1<<4);	// SETA BOTAO 13
 8001028:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <main+0x450>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <main+0x450>)
 8001034:	705a      	strb	r2, [r3, #1]
 8001036:	e006      	b.n	8001046 <main+0x2e2>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<4);	// RESETA BOTAO 13
 8001038:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <main+0x450>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	f023 0310 	bic.w	r3, r3, #16
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <main+0x450>)
 8001044:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<7))  {
 8001046:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <main+0x454>)
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	b25b      	sxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	da07      	bge.n	8001060 <main+0x2fc>
		  joystickhid.botoes1 |= (uint16_t)(1<<5);	// SETA BOTAO 14
 8001050:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <main+0x450>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	f043 0320 	orr.w	r3, r3, #32
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <main+0x450>)
 800105c:	705a      	strb	r2, [r3, #1]
 800105e:	e006      	b.n	800106e <main+0x30a>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<5);	// RESETA BOTAO 14
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <main+0x450>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	f023 0320 	bic.w	r3, r3, #32
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <main+0x450>)
 800106c:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<0))  {
 800106e:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <main+0x454>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <main+0x326>
		  joystickhid.botoes1 |= (uint16_t)(1<<6);	// SETA BOTAO 15
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <main+0x450>)
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <main+0x450>)
 8001086:	705a      	strb	r2, [r3, #1]
 8001088:	e006      	b.n	8001098 <main+0x334>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 15
 800108a:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <main+0x450>)
 800108c:	785b      	ldrb	r3, [r3, #1]
 800108e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <main+0x450>)
 8001096:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<1))  {
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <main+0x454>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <main+0x350>
		  joystickhid.botoes1 |= (uint32_t)(1<<7);	// SETA BOTAO 16
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <main+0x450>)
 80010a6:	785b      	ldrb	r3, [r3, #1]
 80010a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <main+0x450>)
 80010b0:	705a      	strb	r2, [r3, #1]
 80010b2:	e006      	b.n	80010c2 <main+0x35e>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 16
 80010b4:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <main+0x450>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <main+0x450>)
 80010c0:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<2))  {
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <main+0x454>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <main+0x37a>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<0);	// SETA BOTAO 17
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <main+0x450>)
 80010d0:	789b      	ldrb	r3, [r3, #2]
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <main+0x450>)
 80010da:	709a      	strb	r2, [r3, #2]
 80010dc:	e006      	b.n	80010ec <main+0x388>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 17
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <main+0x450>)
 80010e0:	789b      	ldrb	r3, [r3, #2]
 80010e2:	f023 0301 	bic.w	r3, r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <main+0x450>)
 80010ea:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<3))  {
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <main+0x454>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <main+0x3a4>
		  joystickhid.botoes_freio0 |= (uint32_t)(1<<1);	// SETA BOTAO 18
 80010f8:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <main+0x450>)
 80010fa:	789b      	ldrb	r3, [r3, #2]
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <main+0x450>)
 8001104:	709a      	strb	r2, [r3, #2]
 8001106:	e006      	b.n	8001116 <main+0x3b2>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 18
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <main+0x450>)
 800110a:	789b      	ldrb	r3, [r3, #2]
 800110c:	f023 0302 	bic.w	r3, r3, #2
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <main+0x450>)
 8001114:	709a      	strb	r2, [r3, #2]
	  }

	  if (joystickhid.botoes1 == 0b11111111) { //desativa botoes ao pressionar reversa no g29 verifica se todos os botoes estao ativados ao mesmo tempo e desativa.
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <main+0x450>)
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	2bff      	cmp	r3, #255	; 0xff
 800111c:	d108      	bne.n	8001130 <main+0x3cc>
		  joystickhid.botoes0 = 0;
 800111e:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <main+0x450>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
		  joystickhid.botoes1 = 0;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <main+0x450>)
 8001126:	2200      	movs	r2, #0
 8001128:	705a      	strb	r2, [r3, #1]
		  joystickhid.botoes_freio0 = 0;
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <main+0x450>)
 800112c:	2200      	movs	r2, #0
 800112e:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<6) && cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0])  {
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <main+0x454>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001138:	2b00      	cmp	r3, #0
 800113a:	d018      	beq.n	800116e <main+0x40a>
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <main+0x458>)
 800113e:	885b      	ldrh	r3, [r3, #2]
 8001140:	88fa      	ldrh	r2, [r7, #6]
 8001142:	429a      	cmp	r2, r3
 8001144:	d913      	bls.n	800116e <main+0x40a>
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <main+0x45c>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	88ba      	ldrh	r2, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	d20e      	bcs.n	800116e <main+0x40a>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<2);	// SETA BOTAO 19 SPEED REVERSA
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <main+0x450>)
 8001152:	789b      	ldrb	r3, [r3, #2]
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <main+0x450>)
 800115c:	709a      	strb	r2, [r3, #2]
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5); 			// RESETA BOTAO SPEED 6 QUANDO ATIVA A REVERSA
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <main+0x450>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	f023 0320 	bic.w	r3, r3, #32
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <main+0x450>)
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e006      	b.n	800117c <main+0x418>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint32_t)(1<<2);	// RESETA BOTAO 19 SPEED REVERSA
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <main+0x450>)
 8001170:	789b      	ldrb	r3, [r3, #2]
 8001172:	f023 0304 	bic.w	r3, r3, #4
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <main+0x450>)
 800117a:	709a      	strb	r2, [r3, #2]
	  }


	  if (spi_values[0] > 4000 && spi_values[1] > 4000){  //se volante desconectado
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <main+0x460>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001184:	d90d      	bls.n	80011a2 <main+0x43e>
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <main+0x460>)
 8001188:	885b      	ldrh	r3, [r3, #2]
 800118a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800118e:	d908      	bls.n	80011a2 <main+0x43e>
		  joystickhid.botoes0 = 0;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <main+0x450>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
	  	  joystickhid.botoes1 = 0;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <main+0x450>)
 8001198:	2200      	movs	r2, #0
 800119a:	705a      	strb	r2, [r3, #1]
	  	  joystickhid.botoes_freio0 = 0;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <main+0x450>)
 800119e:	2200      	movs	r2, #0
 80011a0:	709a      	strb	r2, [r3, #2]
	  }

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80011a2:	2208      	movs	r2, #8
 80011a4:	4903      	ldr	r1, [pc, #12]	; (80011b4 <main+0x450>)
 80011a6:	4808      	ldr	r0, [pc, #32]	; (80011c8 <main+0x464>)
 80011a8:	f008 f804 	bl	80091b4 <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(1);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f000 fd03 	bl	8001bb8 <HAL_Delay>
  {
 80011b2:	e5fb      	b.n	8000dac <main+0x48>
 80011b4:	20000354 	.word	0x20000354
 80011b8:	20000368 	.word	0x20000368
 80011bc:	20000004 	.word	0x20000004
 80011c0:	20000008 	.word	0x20000008
 80011c4:	2000035c 	.word	0x2000035c
 80011c8:	2000039c 	.word	0x2000039c

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d6:	2228      	movs	r2, #40	; 0x28
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f009 fd5e 	bl	800ac9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011fc:	2301      	movs	r3, #1
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120a:	2301      	movs	r3, #1
 800120c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2302      	movs	r3, #2
 8001210:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001218:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800121c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fcce 	bl	8004bc4 <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800122e:	f000 f9c5 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	230f      	movs	r3, #15
 8001234:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f003 ff3a 	bl	80050c8 <HAL_RCC_ClockConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800125a:	f000 f9af 	bl	80015bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800125e:	2312      	movs	r3, #18
 8001260:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001266:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001268:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4618      	mov	r0, r3
 8001272:	f004 f8c1 	bl	80053f8 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800127c:	f000 f99e 	bl	80015bc <Error_Handler>
  }
}
 8001280:	bf00      	nop
 8001282:	3750      	adds	r7, #80	; 0x50
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <MX_ADC1_Init+0xb0>)
 800129a:	4a28      	ldr	r2, [pc, #160]	; (800133c <MX_ADC1_Init+0xb4>)
 800129c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012c2:	2203      	movs	r2, #3
 80012c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c6:	481c      	ldr	r0, [pc, #112]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012c8:	f000 fc9a 	bl	8001c00 <HAL_ADC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80012d2:	f000 f973 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012da:	2301      	movs	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80012de:	2307      	movs	r3, #7
 80012e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4814      	ldr	r0, [pc, #80]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012e8:	f000 fe5c 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f000 f963 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	480d      	ldr	r0, [pc, #52]	; (8001338 <MX_ADC1_Init+0xb0>)
 8001304:	f000 fe4e 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800130e:	f000 f955 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001312:	2302      	movs	r3, #2
 8001314:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001316:	2303      	movs	r3, #3
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <MX_ADC1_Init+0xb0>)
 8001320:	f000 fe40 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800132a:	f000 f947 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001ec 	.word	0x200001ec
 800133c:	40012400 	.word	0x40012400

08001340 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <MX_SPI1_Init+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_SPI1_Init+0x64>)
 800134c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_SPI1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001360:	2202      	movs	r2, #2
 8001362:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_SPI1_Init+0x64>)
 800136c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001370:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001374:	2228      	movs	r2, #40	; 0x28
 8001376:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <MX_SPI1_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_SPI1_Init+0x64>)
 800138c:	220a      	movs	r2, #10
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001392:	f004 f8e7 	bl	8005564 <HAL_SPI_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800139c:	f000 f90e 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000260 	.word	0x20000260
 80013a8:	40013000 	.word	0x40013000

080013ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_SPI2_Init+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <MX_SPI2_Init+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_SPI2_Init+0x64>)
 80013b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI2_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_SPI2_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_SPI2_Init+0x64>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI2_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_SPI2_Init+0x64>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI2_Init+0x64>)
 80013e0:	2220      	movs	r2, #32
 80013e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SPI2_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI2_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SPI2_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI2_Init+0x64>)
 80013f8:	220a      	movs	r2, #10
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_SPI2_Init+0x64>)
 80013fe:	f004 f8b1 	bl	8005564 <HAL_SPI_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001408:	f000 f8d8 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200002b8 	.word	0x200002b8
 8001414:	40003800 	.word	0x40003800

08001418 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MX_USART1_UART_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001450:	f004 fdbc 	bl	8005fcc <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 f8af 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000310 	.word	0x20000310
 8001468:	40013800 	.word	0x40013800

0800146c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_DMA_Init+0x38>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <MX_DMA_Init+0x38>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6153      	str	r3, [r2, #20]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_DMA_Init+0x38>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	200b      	movs	r0, #11
 8001490:	f001 f859 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001494:	200b      	movs	r0, #11
 8001496:	f001 f872 	bl	800257e <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <MX_GPIO_Init+0x108>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a3b      	ldr	r2, [pc, #236]	; (80015b0 <MX_GPIO_Init+0x108>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <MX_GPIO_Init+0x108>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <MX_GPIO_Init+0x108>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a35      	ldr	r2, [pc, #212]	; (80015b0 <MX_GPIO_Init+0x108>)
 80014da:	f043 0320 	orr.w	r3, r3, #32
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <MX_GPIO_Init+0x108>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <MX_GPIO_Init+0x108>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a2f      	ldr	r2, [pc, #188]	; (80015b0 <MX_GPIO_Init+0x108>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <MX_GPIO_Init+0x108>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <MX_GPIO_Init+0x108>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a29      	ldr	r2, [pc, #164]	; (80015b0 <MX_GPIO_Init+0x108>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <MX_GPIO_Init+0x108>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CALIB_LED_GPIO_Port, CALIB_LED_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001522:	4824      	ldr	r0, [pc, #144]	; (80015b4 <MX_GPIO_Init+0x10c>)
 8001524:	f001 fe71 	bl	800320a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFTER_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800152e:	4822      	ldr	r0, [pc, #136]	; (80015b8 <MX_GPIO_Init+0x110>)
 8001530:	f001 fe6b 	bl	800320a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CALIB_LED_Pin */
  GPIO_InitStruct.Pin = CALIB_LED_Pin;
 8001534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2302      	movs	r3, #2
 8001544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CALIB_LED_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	4619      	mov	r1, r3
 800154c:	4819      	ldr	r0, [pc, #100]	; (80015b4 <MX_GPIO_Init+0x10c>)
 800154e:	f001 fcc1 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CALIB_BUTTON_Pin */
  GPIO_InitStruct.Pin = CALIB_BUTTON_Pin;
 8001552:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155c:	2301      	movs	r3, #1
 800155e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CALIB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	4619      	mov	r1, r3
 8001566:	4813      	ldr	r0, [pc, #76]	; (80015b4 <MX_GPIO_Init+0x10c>)
 8001568:	f001 fcb4 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFTER_CS_Pin */
  GPIO_InitStruct.Pin = SHIFTER_CS_Pin;
 800156c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001576:	2301      	movs	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHIFTER_CS_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	4619      	mov	r1, r3
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <MX_GPIO_Init+0x110>)
 8001586:	f001 fca5 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800158a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001590:	2311      	movs	r3, #17
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2302      	movs	r3, #2
 800159a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4619      	mov	r1, r3
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_GPIO_Init+0x110>)
 80015a4:	f001 fc96 	bl	8002ed4 <HAL_GPIO_Init>

}
 80015a8:	bf00      	nop
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40011000 	.word	0x40011000
 80015b8:	40010c00 	.word	0x40010c00

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_MspInit+0x40>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_MspInit+0x40>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6193      	str	r3, [r2, #24]
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_MspInit+0x40>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_MspInit+0x40>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_MspInit+0x40>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_MspInit+0x40>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <HAL_ADC_MspInit+0xbc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d149      	bne.n	80016c0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_ADC_MspInit+0xc0>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a26      	ldr	r2, [pc, #152]	; (80016cc <HAL_ADC_MspInit+0xc0>)
 8001632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_ADC_MspInit+0xc0>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_ADC_MspInit+0xc0>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a20      	ldr	r2, [pc, #128]	; (80016cc <HAL_ADC_MspInit+0xc0>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_ADC_MspInit+0xc0>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800165c:	2307      	movs	r3, #7
 800165e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001660:	2303      	movs	r3, #3
 8001662:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4619      	mov	r1, r3
 800166a:	4819      	ldr	r0, [pc, #100]	; (80016d0 <HAL_ADC_MspInit+0xc4>)
 800166c:	f001 fc32 	bl	8002ed4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 8001672:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_ADC_MspInit+0xcc>)
 8001674:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 800168a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800168e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 8001692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001696:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 800169a:	2220      	movs	r2, #32
 800169c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 80016a6:	f000 ff85 	bl	80025b4 <HAL_DMA_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80016b0:	f7ff ff84 	bl	80015bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 80016b8:	621a      	str	r2, [r3, #32]
 80016ba:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_ADC_MspInit+0xc8>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	3720      	adds	r7, #32
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40012400 	.word	0x40012400
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	2000021c 	.word	0x2000021c
 80016d8:	40020008 	.word	0x40020008

080016dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a3b      	ldr	r2, [pc, #236]	; (80017e4 <HAL_SPI_MspInit+0x108>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d138      	bne.n	800176e <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fc:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a39      	ldr	r2, [pc, #228]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 8001702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a33      	ldr	r2, [pc, #204]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800172c:	23a0      	movs	r3, #160	; 0xa0
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0318 	add.w	r3, r7, #24
 800173c:	4619      	mov	r1, r3
 800173e:	482b      	ldr	r0, [pc, #172]	; (80017ec <HAL_SPI_MspInit+0x110>)
 8001740:	f001 fbc8 	bl	8002ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001744:	2340      	movs	r3, #64	; 0x40
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0318 	add.w	r3, r7, #24
 8001754:	4619      	mov	r1, r3
 8001756:	4825      	ldr	r0, [pc, #148]	; (80017ec <HAL_SPI_MspInit+0x110>)
 8001758:	f001 fbbc 	bl	8002ed4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	2023      	movs	r0, #35	; 0x23
 8001762:	f000 fef0 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001766:	2023      	movs	r0, #35	; 0x23
 8001768:	f000 ff09 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800176c:	e036      	b.n	80017dc <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_SPI_MspInit+0x114>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d131      	bne.n	80017dc <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	4a1a      	ldr	r2, [pc, #104]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 800177e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001782:	61d3      	str	r3, [r2, #28]
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_SPI_MspInit+0x10c>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80017a8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b6:	f107 0318 	add.w	r3, r7, #24
 80017ba:	4619      	mov	r1, r3
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <HAL_SPI_MspInit+0x118>)
 80017be:	f001 fb89 	bl	8002ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	4619      	mov	r1, r3
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <HAL_SPI_MspInit+0x118>)
 80017d8:	f001 fb7c 	bl	8002ed4 <HAL_GPIO_Init>
}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40013000 	.word	0x40013000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800
 80017f0:	40003800 	.word	0x40003800
 80017f4:	40010c00 	.word	0x40010c00

080017f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <HAL_UART_MspInit+0x8c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d131      	bne.n	800187c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_UART_MspInit+0x90>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <HAL_UART_MspInit+0x90>)
 800181e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_UART_MspInit+0x90>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_UART_MspInit+0x90>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_UART_MspInit+0x90>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_UART_MspInit+0x90>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	4619      	mov	r1, r3
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <HAL_UART_MspInit+0x94>)
 800185e:	f001 fb39 	bl	8002ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_UART_MspInit+0x94>)
 8001878:	f001 fb2c 	bl	8002ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40013800 	.word	0x40013800
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <NMI_Handler+0x4>

08001896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <MemManage_Handler+0x4>

080018a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <UsageFault_Handler+0x4>

080018ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d6:	f000 f953 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <DMA1_Channel1_IRQHandler+0x10>)
 80018e6:	f000 ff95 	bl	8002814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000021c 	.word	0x2000021c

080018f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80018fa:	f001 fde8 	bl	80034ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000860 	.word	0x20000860

08001908 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <SPI1_IRQHandler+0x10>)
 800190e:	f004 f961 	bl	8005bd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000260 	.word	0x20000260

0800191c <_getpid>:
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
 8001920:	2301      	movs	r3, #1
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <_kill>:
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
 8001934:	f009 f988 	bl	800ac48 <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	2216      	movs	r2, #22
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_exit>:
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	f04f 31ff 	mov.w	r1, #4294967295
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffe7 	bl	800192a <_kill>
 800195c:	e7fe      	b.n	800195c <_exit+0x12>

0800195e <_read>:
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e00a      	b.n	8001986 <_read+0x28>
 8001970:	f3af 8000 	nop.w
 8001974:	4601      	mov	r1, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	b2ca      	uxtb	r2, r1
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	dbf0      	blt.n	8001970 <_read+0x12>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_write>:
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e009      	b.n	80019be <_write+0x26>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f3af 8000 	nop.w
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbf1      	blt.n	80019aa <_write+0x12>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_close>:
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <_fstat>:
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	2300      	movs	r3, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <_isatty>:
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <_lseek>:
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <_sbrk>:
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
 8001a60:	f009 f8f2 	bl	800ac48 <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <_sbrk+0x64>)
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20005000 	.word	0x20005000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	2000036c 	.word	0x2000036c
 8001a98:	20000bb8 	.word	0x20000bb8

08001a9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <Reset_Handler>:
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <LoopFillZerobss+0x12>)
 8001aaa:	490d      	ldr	r1, [pc, #52]	; (8001ae0 <LoopFillZerobss+0x16>)
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x1a>)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:
 8001ab2:	58d4      	ldr	r4, [r2, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:
 8001ab8:	18c4      	adds	r4, r0, r3
 8001aba:	428c      	cmp	r4, r1
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <LoopFillZerobss+0x1e>)
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	; (8001aec <LoopFillZerobss+0x22>)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:
 8001aca:	42a2      	cmp	r2, r4
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>
 8001ace:	f7ff ffe5 	bl	8001a9c <SystemInit>
 8001ad2:	f009 f8bf 	bl	800ac54 <__libc_init_array>
 8001ad6:	f7ff f945 	bl	8000d64 <main>
 8001ada:	4770      	bx	lr
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	200001d0 	.word	0x200001d0
 8001ae4:	0800c528 	.word	0x0800c528
 8001ae8:	200001d0 	.word	0x200001d0
 8001aec:	20000bb4 	.word	0x20000bb4

08001af0 <ADC1_2_IRQHandler>:
 8001af0:	e7fe      	b.n	8001af0 <ADC1_2_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_Init+0x28>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_Init+0x28>)
 8001afe:	f043 0310 	orr.w	r3, r3, #16
 8001b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 fd13 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f000 f808 	bl	8001b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7ff fd5a 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40022000 	.word	0x40022000

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x54>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x58>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fd2b 	bl	800259a <HAL_SYSTICK_Config>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00e      	b.n	8001b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d80a      	bhi.n	8001b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f000 fcf3 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b60:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <HAL_InitTick+0x5c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2000000c 	.word	0x2000000c
 8001b78:	20000014 	.word	0x20000014
 8001b7c:	20000010 	.word	0x20000010

08001b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_IncTick+0x1c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a03      	ldr	r2, [pc, #12]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	20000014 	.word	0x20000014
 8001ba0:	20000370 	.word	0x20000370

08001ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <HAL_GetTick+0x10>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	20000370 	.word	0x20000370

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff fff0 	bl	8001ba4 <HAL_GetTick>
 8001bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d005      	beq.n	8001bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_Delay+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bde:	bf00      	nop
 8001be0:	f7ff ffe0 	bl	8001ba4 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8f7      	bhi.n	8001be0 <HAL_Delay+0x28>
  {
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000014 	.word	0x20000014

08001c00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0be      	b.n	8001da0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d109      	bne.n	8001c44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fce4 	bl	800160c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 faff 	bl	8002248 <ADC_ConversionStop_Disable>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 8099 	bne.w	8001d8e <HAL_ADC_Init+0x18e>
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 8095 	bne.w	8001d8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c6c:	f023 0302 	bic.w	r3, r3, #2
 8001c70:	f043 0202 	orr.w	r2, r3, #2
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7b1b      	ldrb	r3, [r3, #12]
 8001c86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c98:	d003      	beq.n	8001ca2 <HAL_ADC_Init+0xa2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d102      	bne.n	8001ca8 <HAL_ADC_Init+0xa8>
 8001ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca6:	e000      	b.n	8001caa <HAL_ADC_Init+0xaa>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7d1b      	ldrb	r3, [r3, #20]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d119      	bne.n	8001cec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7b1b      	ldrb	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	035a      	lsls	r2, r3, #13
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	e00b      	b.n	8001cec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	f043 0220 	orr.w	r2, r3, #32
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_ADC_Init+0x1a8>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d1c:	d003      	beq.n	8001d26 <HAL_ADC_Init+0x126>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d104      	bne.n	8001d30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	051b      	lsls	r3, r3, #20
 8001d2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <HAL_ADC_Init+0x1ac>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d10b      	bne.n	8001d6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	f023 0303 	bic.w	r3, r3, #3
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d6a:	e018      	b.n	8001d9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	f023 0312 	bic.w	r3, r3, #18
 8001d74:	f043 0210 	orr.w	r2, r3, #16
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d8c:	e007      	b.n	8001d9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	f043 0210 	orr.w	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	ffe1f7fd 	.word	0xffe1f7fd
 8001dac:	ff1f0efe 	.word	0xff1f0efe

08001db0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a64      	ldr	r2, [pc, #400]	; (8001f58 <HAL_ADC_Start_DMA+0x1a8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <HAL_ADC_Start_DMA+0x24>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a63      	ldr	r2, [pc, #396]	; (8001f5c <HAL_ADC_Start_DMA+0x1ac>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d106      	bne.n	8001de2 <HAL_ADC_Start_DMA+0x32>
 8001dd4:	4b60      	ldr	r3, [pc, #384]	; (8001f58 <HAL_ADC_Start_DMA+0x1a8>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 80b3 	bne.w	8001f48 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_Start_DMA+0x40>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e0ae      	b.n	8001f4e <HAL_ADC_Start_DMA+0x19e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f9cb 	bl	8002194 <ADC_Enable>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 809a 	bne.w	8001f3e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a4e      	ldr	r2, [pc, #312]	; (8001f5c <HAL_ADC_Start_DMA+0x1ac>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d105      	bne.n	8001e34 <HAL_ADC_Start_DMA+0x84>
 8001e28:	4b4b      	ldr	r3, [pc, #300]	; (8001f58 <HAL_ADC_Start_DMA+0x1a8>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d115      	bne.n	8001e60 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d026      	beq.n	8001e9c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e5e:	e01d      	b.n	8001e9c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a39      	ldr	r2, [pc, #228]	; (8001f58 <HAL_ADC_Start_DMA+0x1a8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d004      	beq.n	8001e80 <HAL_ADC_Start_DMA+0xd0>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <HAL_ADC_Start_DMA+0x1ac>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d10d      	bne.n	8001e9c <HAL_ADC_Start_DMA+0xec>
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_ADC_Start_DMA+0x1a8>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	f023 0206 	bic.w	r2, r3, #6
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eb4:	e002      	b.n	8001ebc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <HAL_ADC_Start_DMA+0x1b0>)
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a24      	ldr	r2, [pc, #144]	; (8001f64 <HAL_ADC_Start_DMA+0x1b4>)
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_ADC_Start_DMA+0x1b8>)
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0202 	mvn.w	r2, #2
 8001ee4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a18      	ldr	r0, [r3, #32]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	334c      	adds	r3, #76	; 0x4c
 8001f00:	4619      	mov	r1, r3
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f000 fbaf 	bl	8002668 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f14:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f18:	d108      	bne.n	8001f2c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f28:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f2a:	e00f      	b.n	8001f4c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f3a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f3c:	e006      	b.n	8001f4c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001f46:	e001      	b.n	8001f4c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40012400 	.word	0x40012400
 8001f5c:	40012800 	.word	0x40012800
 8001f60:	080022cb 	.word	0x080022cb
 8001f64:	08002347 	.word	0x08002347
 8001f68:	08002363 	.word	0x08002363

08001f6c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x20>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e0dc      	b.n	800217e <HAL_ADC_ConfigChannel+0x1da>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d81c      	bhi.n	800200e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b05      	subs	r3, #5
 8001fe6:	221f      	movs	r2, #31
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4019      	ands	r1, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b05      	subs	r3, #5
 8002000:	fa00 f203 	lsl.w	r2, r0, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	635a      	str	r2, [r3, #52]	; 0x34
 800200c:	e03c      	b.n	8002088 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d81c      	bhi.n	8002050 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	3b23      	subs	r3, #35	; 0x23
 8002028:	221f      	movs	r2, #31
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	4019      	ands	r1, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b23      	subs	r3, #35	; 0x23
 8002042:	fa00 f203 	lsl.w	r2, r0, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
 800204e:	e01b      	b.n	8002088 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	3b41      	subs	r3, #65	; 0x41
 8002062:	221f      	movs	r2, #31
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	4019      	ands	r1, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	3b41      	subs	r3, #65	; 0x41
 800207c:	fa00 f203 	lsl.w	r2, r0, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b09      	cmp	r3, #9
 800208e:	d91c      	bls.n	80020ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68d9      	ldr	r1, [r3, #12]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	3b1e      	subs	r3, #30
 80020a2:	2207      	movs	r2, #7
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4019      	ands	r1, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6898      	ldr	r0, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	3b1e      	subs	r3, #30
 80020bc:	fa00 f203 	lsl.w	r2, r0, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	e019      	b.n	80020fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6919      	ldr	r1, [r3, #16]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4019      	ands	r1, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6898      	ldr	r0, [r3, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	fa00 f203 	lsl.w	r2, r0, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b10      	cmp	r3, #16
 8002104:	d003      	beq.n	800210e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800210a:	2b11      	cmp	r3, #17
 800210c:	d132      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_ADC_ConfigChannel+0x1e4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d125      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d126      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002134:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b10      	cmp	r3, #16
 800213c:	d11a      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_ADC_ConfigChannel+0x1e8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a13      	ldr	r2, [pc, #76]	; (8002190 <HAL_ADC_ConfigChannel+0x1ec>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9a      	lsrs	r2, r3, #18
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002154:	e002      	b.n	800215c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x1b2>
 8002162:	e007      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40012400 	.word	0x40012400
 800218c:	2000000c 	.word	0x2000000c
 8002190:	431bde83 	.word	0x431bde83

08002194 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d040      	beq.n	8002234 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <ADC_Enable+0xac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <ADC_Enable+0xb0>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	0c9b      	lsrs	r3, r3, #18
 80021ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021d0:	e002      	b.n	80021d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f9      	bne.n	80021d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021de:	f7ff fce1 	bl	8001ba4 <HAL_GetTick>
 80021e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021e4:	e01f      	b.n	8002226 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021e6:	f7ff fcdd 	bl	8001ba4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d918      	bls.n	8002226 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d011      	beq.n	8002226 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e007      	b.n	8002236 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d1d8      	bne.n	80021e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000000c 	.word	0x2000000c
 8002244:	431bde83 	.word	0x431bde83

08002248 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d12e      	bne.n	80022c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002272:	f7ff fc97 	bl	8001ba4 <HAL_GetTick>
 8002276:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002278:	e01b      	b.n	80022b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800227a:	f7ff fc93 	bl	8001ba4 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d914      	bls.n	80022b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10d      	bne.n	80022b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f043 0210 	orr.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e007      	b.n	80022c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d0dc      	beq.n	800227a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d127      	bne.n	8002334 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022fe:	d115      	bne.n	800232c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fe1d 	bl	8001f6c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002332:	e004      	b.n	800233e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff fe12 	bl	8001f7e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff fe01 	bl	8001f90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4906      	ldr	r1, [pc, #24]	; (8002430 <__NVIC_EnableIRQ+0x34>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	; (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff90 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff2d 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff42 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff90 	bl	8002488 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5f 	bl	8002434 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff35 	bl	80023fc <__NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffa2 	bl	80024ec <SysTick_Config>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e043      	b.n	8002652 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_DMA_Init+0xa8>)
 80025d2:	4413      	add	r3, r2
 80025d4:	4a22      	ldr	r2, [pc, #136]	; (8002660 <HAL_DMA_Init+0xac>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	009a      	lsls	r2, r3, #2
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <HAL_DMA_Init+0xb0>)
 80025e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002602:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800260c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	bffdfff8 	.word	0xbffdfff8
 8002660:	cccccccd 	.word	0xcccccccd
 8002664:	40020000 	.word	0x40020000

08002668 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_DMA_Start_IT+0x20>
 8002684:	2302      	movs	r3, #2
 8002686:	e04a      	b.n	800271e <HAL_DMA_Start_IT+0xb6>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002696:	2b01      	cmp	r3, #1
 8002698:	d13a      	bne.n	8002710 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2202      	movs	r2, #2
 800269e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f9ae 	bl	8002a20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 020e 	orr.w	r2, r2, #14
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e00f      	b.n	80026fe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0204 	bic.w	r2, r2, #4
 80026ec:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 020a 	orr.w	r2, r2, #10
 80026fc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e005      	b.n	800271c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002718:	2302      	movs	r3, #2
 800271a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800271c:	7dfb      	ldrb	r3, [r7, #23]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800273a:	2b02      	cmp	r3, #2
 800273c:	d005      	beq.n	800274a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2204      	movs	r2, #4
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e051      	b.n	80027ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 020e 	bic.w	r2, r2, #14
 8002758:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <HAL_DMA_Abort_IT+0xd0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d029      	beq.n	80027c8 <HAL_DMA_Abort_IT+0xa0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a20      	ldr	r2, [pc, #128]	; (80027fc <HAL_DMA_Abort_IT+0xd4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d022      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x9c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <HAL_DMA_Abort_IT+0xd8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d01a      	beq.n	80027be <HAL_DMA_Abort_IT+0x96>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_DMA_Abort_IT+0xdc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d012      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x90>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_DMA_Abort_IT+0xe0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00a      	beq.n	80027b2 <HAL_DMA_Abort_IT+0x8a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1a      	ldr	r2, [pc, #104]	; (800280c <HAL_DMA_Abort_IT+0xe4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d102      	bne.n	80027ac <HAL_DMA_Abort_IT+0x84>
 80027a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027aa:	e00e      	b.n	80027ca <HAL_DMA_Abort_IT+0xa2>
 80027ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027b0:	e00b      	b.n	80027ca <HAL_DMA_Abort_IT+0xa2>
 80027b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b6:	e008      	b.n	80027ca <HAL_DMA_Abort_IT+0xa2>
 80027b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027bc:	e005      	b.n	80027ca <HAL_DMA_Abort_IT+0xa2>
 80027be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c2:	e002      	b.n	80027ca <HAL_DMA_Abort_IT+0xa2>
 80027c4:	2310      	movs	r3, #16
 80027c6:	e000      	b.n	80027ca <HAL_DMA_Abort_IT+0xa2>
 80027c8:	2301      	movs	r3, #1
 80027ca:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_DMA_Abort_IT+0xe8>)
 80027cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
    } 
  }
  return status;
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40020008 	.word	0x40020008
 80027fc:	4002001c 	.word	0x4002001c
 8002800:	40020030 	.word	0x40020030
 8002804:	40020044 	.word	0x40020044
 8002808:	40020058 	.word	0x40020058
 800280c:	4002006c 	.word	0x4002006c
 8002810:	40020000 	.word	0x40020000

08002814 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2204      	movs	r2, #4
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d04f      	beq.n	80028dc <HAL_DMA_IRQHandler+0xc8>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	d04a      	beq.n	80028dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d107      	bne.n	8002864 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0204 	bic.w	r2, r2, #4
 8002862:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a66      	ldr	r2, [pc, #408]	; (8002a04 <HAL_DMA_IRQHandler+0x1f0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d029      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xae>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a65      	ldr	r2, [pc, #404]	; (8002a08 <HAL_DMA_IRQHandler+0x1f4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d022      	beq.n	80028be <HAL_DMA_IRQHandler+0xaa>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_DMA_IRQHandler+0x1f8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01a      	beq.n	80028b8 <HAL_DMA_IRQHandler+0xa4>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a62      	ldr	r2, [pc, #392]	; (8002a10 <HAL_DMA_IRQHandler+0x1fc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d012      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x9e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a60      	ldr	r2, [pc, #384]	; (8002a14 <HAL_DMA_IRQHandler+0x200>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00a      	beq.n	80028ac <HAL_DMA_IRQHandler+0x98>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a5f      	ldr	r2, [pc, #380]	; (8002a18 <HAL_DMA_IRQHandler+0x204>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d102      	bne.n	80028a6 <HAL_DMA_IRQHandler+0x92>
 80028a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028a4:	e00e      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028aa:	e00b      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028b0:	e008      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028b6:	e005      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028bc:	e002      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028be:	2340      	movs	r3, #64	; 0x40
 80028c0:	e000      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028c2:	2304      	movs	r3, #4
 80028c4:	4a55      	ldr	r2, [pc, #340]	; (8002a1c <HAL_DMA_IRQHandler+0x208>)
 80028c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8094 	beq.w	80029fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028da:	e08e      	b.n	80029fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2202      	movs	r2, #2
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d056      	beq.n	800299a <HAL_DMA_IRQHandler+0x186>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d051      	beq.n	800299a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 020a 	bic.w	r2, r2, #10
 8002912:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a38      	ldr	r2, [pc, #224]	; (8002a04 <HAL_DMA_IRQHandler+0x1f0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d029      	beq.n	800297a <HAL_DMA_IRQHandler+0x166>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a37      	ldr	r2, [pc, #220]	; (8002a08 <HAL_DMA_IRQHandler+0x1f4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d022      	beq.n	8002976 <HAL_DMA_IRQHandler+0x162>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <HAL_DMA_IRQHandler+0x1f8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01a      	beq.n	8002970 <HAL_DMA_IRQHandler+0x15c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <HAL_DMA_IRQHandler+0x1fc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d012      	beq.n	800296a <HAL_DMA_IRQHandler+0x156>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a32      	ldr	r2, [pc, #200]	; (8002a14 <HAL_DMA_IRQHandler+0x200>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00a      	beq.n	8002964 <HAL_DMA_IRQHandler+0x150>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <HAL_DMA_IRQHandler+0x204>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d102      	bne.n	800295e <HAL_DMA_IRQHandler+0x14a>
 8002958:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800295c:	e00e      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	e00b      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 8002964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002968:	e008      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 800296a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800296e:	e005      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 8002970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002974:	e002      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 8002976:	2320      	movs	r3, #32
 8002978:	e000      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 800297a:	2302      	movs	r3, #2
 800297c:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <HAL_DMA_IRQHandler+0x208>)
 800297e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d034      	beq.n	80029fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002998:	e02f      	b.n	80029fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2208      	movs	r2, #8
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d028      	beq.n	80029fc <HAL_DMA_IRQHandler+0x1e8>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 020e 	bic.w	r2, r2, #14
 80029c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
    }
  }
  return;
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
}
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40020008 	.word	0x40020008
 8002a08:	4002001c 	.word	0x4002001c
 8002a0c:	40020030 	.word	0x40020030
 8002a10:	40020044 	.word	0x40020044
 8002a14:	40020058 	.word	0x40020058
 8002a18:	4002006c 	.word	0x4002006c
 8002a1c:	40020000 	.word	0x40020000

08002a20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	2101      	movs	r1, #1
 8002a38:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d108      	bne.n	8002a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a5e:	e007      	b.n	8002a70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a96:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <HAL_FLASH_Program+0xd8>)
 8002a98:	7e1b      	ldrb	r3, [r3, #24]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_FLASH_Program+0x26>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e054      	b.n	8002b4c <HAL_FLASH_Program+0xd0>
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <HAL_FLASH_Program+0xd8>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002aa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002aac:	f000 f8d4 	bl	8002c58 <FLASH_WaitForLastOperation>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d144      	bne.n	8002b44 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d102      	bne.n	8002ac6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	757b      	strb	r3, [r7, #21]
 8002ac4:	e007      	b.n	8002ad6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d102      	bne.n	8002ad2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002acc:	2302      	movs	r3, #2
 8002ace:	757b      	strb	r3, [r7, #21]
 8002ad0:	e001      	b.n	8002ad6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75bb      	strb	r3, [r7, #22]
 8002ada:	e02d      	b.n	8002b38 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002adc:	7dbb      	ldrb	r3, [r7, #22]
 8002ade:	005a      	lsls	r2, r3, #1
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	eb02 0c03 	add.w	ip, r2, r3
 8002ae6:	7dbb      	ldrb	r3, [r7, #22]
 8002ae8:	0119      	lsls	r1, r3, #4
 8002aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aee:	f1c1 0620 	rsb	r6, r1, #32
 8002af2:	f1a1 0020 	sub.w	r0, r1, #32
 8002af6:	fa22 f401 	lsr.w	r4, r2, r1
 8002afa:	fa03 f606 	lsl.w	r6, r3, r6
 8002afe:	4334      	orrs	r4, r6
 8002b00:	fa23 f000 	lsr.w	r0, r3, r0
 8002b04:	4304      	orrs	r4, r0
 8002b06:	fa23 f501 	lsr.w	r5, r3, r1
 8002b0a:	b2a3      	uxth	r3, r4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4660      	mov	r0, ip
 8002b10:	f000 f886 	bl	8002c20 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b18:	f000 f89e 	bl	8002c58 <FLASH_WaitForLastOperation>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <HAL_FLASH_Program+0xdc>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	4a0c      	ldr	r2, [pc, #48]	; (8002b58 <HAL_FLASH_Program+0xdc>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d107      	bne.n	8002b42 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002b32:	7dbb      	ldrb	r3, [r7, #22]
 8002b34:	3301      	adds	r3, #1
 8002b36:	75bb      	strb	r3, [r7, #22]
 8002b38:	7dba      	ldrb	r2, [r7, #22]
 8002b3a:	7d7b      	ldrb	r3, [r7, #21]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d3cd      	bcc.n	8002adc <HAL_FLASH_Program+0x60>
 8002b40:	e000      	b.n	8002b44 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002b42:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_FLASH_Program+0xd8>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	761a      	strb	r2, [r3, #24]

  return status;
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b54:	20000378 	.word	0x20000378
 8002b58:	40022000 	.word	0x40022000

08002b5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <HAL_FLASH_Unlock+0x40>)
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00d      	beq.n	8002b8e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_FLASH_Unlock+0x40>)
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <HAL_FLASH_Unlock+0x44>)
 8002b76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_FLASH_Unlock+0x40>)
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_FLASH_Unlock+0x48>)
 8002b7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_FLASH_Unlock+0x40>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	45670123 	.word	0x45670123
 8002ba4:	cdef89ab 	.word	0xcdef89ab

08002ba8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_FLASH_Lock+0x1c>)
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <HAL_FLASH_Lock+0x1c>)
 8002bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40022000 	.word	0x40022000

08002bc8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HAL_FLASH_OB_Unlock+0x2c>)
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_FLASH_OB_Unlock+0x2c>)
 8002bda:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_FLASH_OB_Unlock+0x30>)
 8002bdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_FLASH_OB_Unlock+0x2c>)
 8002be0:	4a06      	ldr	r2, [pc, #24]	; (8002bfc <HAL_FLASH_OB_Unlock+0x34>)
 8002be2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40022000 	.word	0x40022000
 8002bf8:	45670123 	.word	0x45670123
 8002bfc:	cdef89ab 	.word	0xcdef89ab

08002c00 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_FLASH_OB_Lock+0x1c>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_FLASH_OB_Lock+0x1c>)
 8002c0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c0e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40022000 	.word	0x40022000

08002c20 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <FLASH_Program_HalfWord+0x30>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <FLASH_Program_HalfWord+0x34>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <FLASH_Program_HalfWord+0x34>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	887a      	ldrh	r2, [r7, #2]
 8002c42:	801a      	strh	r2, [r3, #0]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000378 	.word	0x20000378
 8002c54:	40022000 	.word	0x40022000

08002c58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7fe ffa0 	bl	8001ba4 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002c66:	e010      	b.n	8002c8a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d00c      	beq.n	8002c8a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <FLASH_WaitForLastOperation+0x2e>
 8002c76:	f7fe ff95 	bl	8001ba4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d201      	bcs.n	8002c8a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e025      	b.n	8002cd6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <FLASH_WaitForLastOperation+0x88>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e8      	bne.n	8002c68 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <FLASH_WaitForLastOperation+0x88>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <FLASH_WaitForLastOperation+0x88>)
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <FLASH_WaitForLastOperation+0x88>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <FLASH_WaitForLastOperation+0x88>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <FLASH_WaitForLastOperation+0x88>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002ccc:	f000 f80a 	bl	8002ce4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40022000 	.word	0x40022000

08002ce4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002cee:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <FLASH_SetErrorCode+0x98>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002cfa:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <FLASH_SetErrorCode+0x9c>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <FLASH_SetErrorCode+0x9c>)
 8002d04:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f043 0310 	orr.w	r3, r3, #16
 8002d0c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <FLASH_SetErrorCode+0x98>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <FLASH_SetErrorCode+0x9c>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <FLASH_SetErrorCode+0x9c>)
 8002d24:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <FLASH_SetErrorCode+0x98>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <FLASH_SetErrorCode+0x9c>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <FLASH_SetErrorCode+0x9c>)
 8002d44:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <FLASH_SetErrorCode+0x98>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <FLASH_SetErrorCode+0x98>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f240 1201 	movw	r2, #257	; 0x101
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d106      	bne.n	8002d6a <FLASH_SetErrorCode+0x86>
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <FLASH_SetErrorCode+0x98>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <FLASH_SetErrorCode+0x98>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	61d3      	str	r3, [r2, #28]
}  
 8002d68:	e002      	b.n	8002d70 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <FLASH_SetErrorCode+0x98>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	60d3      	str	r3, [r2, #12]
}  
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	20000378 	.word	0x20000378

08002d84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <HAL_FLASHEx_Erase+0xd0>)
 8002d98:	7e1b      	ldrb	r3, [r3, #24]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_FLASHEx_Erase+0x1e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e053      	b.n	8002e4a <HAL_FLASHEx_Erase+0xc6>
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <HAL_FLASHEx_Erase+0xd0>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d116      	bne.n	8002dde <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002db0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002db4:	f7ff ff50 	bl	8002c58 <FLASH_WaitForLastOperation>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d141      	bne.n	8002e42 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f000 f84c 	bl	8002e5c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dc8:	f7ff ff46 	bl	8002c58 <FLASH_WaitForLastOperation>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002dd0:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <HAL_FLASHEx_Erase+0xd4>)
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	4a20      	ldr	r2, [pc, #128]	; (8002e58 <HAL_FLASHEx_Erase+0xd4>)
 8002dd6:	f023 0304 	bic.w	r3, r3, #4
 8002dda:	6113      	str	r3, [r2, #16]
 8002ddc:	e031      	b.n	8002e42 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002dde:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002de2:	f7ff ff39 	bl	8002c58 <FLASH_WaitForLastOperation>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d12a      	bne.n	8002e42 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f04f 32ff 	mov.w	r2, #4294967295
 8002df2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	e019      	b.n	8002e30 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002dfc:	68b8      	ldr	r0, [r7, #8]
 8002dfe:	f000 f849 	bl	8002e94 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e06:	f7ff ff27 	bl	8002c58 <FLASH_WaitForLastOperation>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_FLASHEx_Erase+0xd4>)
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_FLASHEx_Erase+0xd4>)
 8002e14:	f023 0302 	bic.w	r3, r3, #2
 8002e18:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	601a      	str	r2, [r3, #0]
            break;
 8002e26:	e00c      	b.n	8002e42 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e2e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	029a      	lsls	r2, r3, #10
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d3dc      	bcc.n	8002dfc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_FLASHEx_Erase+0xd0>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	761a      	strb	r2, [r3, #24]

  return status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000378 	.word	0x20000378
 8002e58:	40022000 	.word	0x40022000

08002e5c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <FLASH_MassErase+0x30>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <FLASH_MassErase+0x34>)
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <FLASH_MassErase+0x34>)
 8002e70:	f043 0304 	orr.w	r3, r3, #4
 8002e74:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <FLASH_MassErase+0x34>)
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	4a05      	ldr	r2, [pc, #20]	; (8002e90 <FLASH_MassErase+0x34>)
 8002e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e80:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	20000378 	.word	0x20000378
 8002e90:	40022000 	.word	0x40022000

08002e94 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <FLASH_PageErase+0x38>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <FLASH_PageErase+0x3c>)
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <FLASH_PageErase+0x3c>)
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002eae:	4a08      	ldr	r2, [pc, #32]	; (8002ed0 <FLASH_PageErase+0x3c>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <FLASH_PageErase+0x3c>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <FLASH_PageErase+0x3c>)
 8002eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ebe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000378 	.word	0x20000378
 8002ed0:	40022000 	.word	0x40022000

08002ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b08b      	sub	sp, #44	; 0x2c
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee6:	e169      	b.n	80031bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ee8:	2201      	movs	r2, #1
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	f040 8158 	bne.w	80031b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4a9a      	ldr	r2, [pc, #616]	; (8003174 <HAL_GPIO_Init+0x2a0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d05e      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
 8002f10:	4a98      	ldr	r2, [pc, #608]	; (8003174 <HAL_GPIO_Init+0x2a0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d875      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f16:	4a98      	ldr	r2, [pc, #608]	; (8003178 <HAL_GPIO_Init+0x2a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d058      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
 8002f1c:	4a96      	ldr	r2, [pc, #600]	; (8003178 <HAL_GPIO_Init+0x2a4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d86f      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f22:	4a96      	ldr	r2, [pc, #600]	; (800317c <HAL_GPIO_Init+0x2a8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d052      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
 8002f28:	4a94      	ldr	r2, [pc, #592]	; (800317c <HAL_GPIO_Init+0x2a8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d869      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f2e:	4a94      	ldr	r2, [pc, #592]	; (8003180 <HAL_GPIO_Init+0x2ac>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d04c      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
 8002f34:	4a92      	ldr	r2, [pc, #584]	; (8003180 <HAL_GPIO_Init+0x2ac>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d863      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f3a:	4a92      	ldr	r2, [pc, #584]	; (8003184 <HAL_GPIO_Init+0x2b0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d046      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
 8002f40:	4a90      	ldr	r2, [pc, #576]	; (8003184 <HAL_GPIO_Init+0x2b0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d85d      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f46:	2b12      	cmp	r3, #18
 8002f48:	d82a      	bhi.n	8002fa0 <HAL_GPIO_Init+0xcc>
 8002f4a:	2b12      	cmp	r3, #18
 8002f4c:	d859      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f4e:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <HAL_GPIO_Init+0x80>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002fcf 	.word	0x08002fcf
 8002f58:	08002fa9 	.word	0x08002fa9
 8002f5c:	08002fbb 	.word	0x08002fbb
 8002f60:	08002ffd 	.word	0x08002ffd
 8002f64:	08003003 	.word	0x08003003
 8002f68:	08003003 	.word	0x08003003
 8002f6c:	08003003 	.word	0x08003003
 8002f70:	08003003 	.word	0x08003003
 8002f74:	08003003 	.word	0x08003003
 8002f78:	08003003 	.word	0x08003003
 8002f7c:	08003003 	.word	0x08003003
 8002f80:	08003003 	.word	0x08003003
 8002f84:	08003003 	.word	0x08003003
 8002f88:	08003003 	.word	0x08003003
 8002f8c:	08003003 	.word	0x08003003
 8002f90:	08003003 	.word	0x08003003
 8002f94:	08003003 	.word	0x08003003
 8002f98:	08002fb1 	.word	0x08002fb1
 8002f9c:	08002fc5 	.word	0x08002fc5
 8002fa0:	4a79      	ldr	r2, [pc, #484]	; (8003188 <HAL_GPIO_Init+0x2b4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fa6:	e02c      	b.n	8003002 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	623b      	str	r3, [r7, #32]
          break;
 8002fae:	e029      	b.n	8003004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	623b      	str	r3, [r7, #32]
          break;
 8002fb8:	e024      	b.n	8003004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	623b      	str	r3, [r7, #32]
          break;
 8002fc2:	e01f      	b.n	8003004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	623b      	str	r3, [r7, #32]
          break;
 8002fcc:	e01a      	b.n	8003004 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	623b      	str	r3, [r7, #32]
          break;
 8002fda:	e013      	b.n	8003004 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	611a      	str	r2, [r3, #16]
          break;
 8002fee:	e009      	b.n	8003004 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	615a      	str	r2, [r3, #20]
          break;
 8002ffa:	e003      	b.n	8003004 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	623b      	str	r3, [r7, #32]
          break;
 8003000:	e000      	b.n	8003004 <HAL_GPIO_Init+0x130>
          break;
 8003002:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2bff      	cmp	r3, #255	; 0xff
 8003008:	d801      	bhi.n	800300e <HAL_GPIO_Init+0x13a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	e001      	b.n	8003012 <HAL_GPIO_Init+0x13e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2bff      	cmp	r3, #255	; 0xff
 8003018:	d802      	bhi.n	8003020 <HAL_GPIO_Init+0x14c>
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	e002      	b.n	8003026 <HAL_GPIO_Init+0x152>
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	3b08      	subs	r3, #8
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	210f      	movs	r1, #15
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	401a      	ands	r2, r3
 8003038:	6a39      	ldr	r1, [r7, #32]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	431a      	orrs	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80b1 	beq.w	80031b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003054:	4b4d      	ldr	r3, [pc, #308]	; (800318c <HAL_GPIO_Init+0x2b8>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	4a4c      	ldr	r2, [pc, #304]	; (800318c <HAL_GPIO_Init+0x2b8>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6193      	str	r3, [r2, #24]
 8003060:	4b4a      	ldr	r3, [pc, #296]	; (800318c <HAL_GPIO_Init+0x2b8>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800306c:	4a48      	ldr	r2, [pc, #288]	; (8003190 <HAL_GPIO_Init+0x2bc>)
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	3302      	adds	r3, #2
 8003074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003078:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4013      	ands	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a40      	ldr	r2, [pc, #256]	; (8003194 <HAL_GPIO_Init+0x2c0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_GPIO_Init+0x1ec>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3f      	ldr	r2, [pc, #252]	; (8003198 <HAL_GPIO_Init+0x2c4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00d      	beq.n	80030bc <HAL_GPIO_Init+0x1e8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a3e      	ldr	r2, [pc, #248]	; (800319c <HAL_GPIO_Init+0x2c8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <HAL_GPIO_Init+0x1e4>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <HAL_GPIO_Init+0x2cc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_GPIO_Init+0x1e0>
 80030b0:	2303      	movs	r3, #3
 80030b2:	e006      	b.n	80030c2 <HAL_GPIO_Init+0x1ee>
 80030b4:	2304      	movs	r3, #4
 80030b6:	e004      	b.n	80030c2 <HAL_GPIO_Init+0x1ee>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e002      	b.n	80030c2 <HAL_GPIO_Init+0x1ee>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_GPIO_Init+0x1ee>
 80030c0:	2300      	movs	r3, #0
 80030c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c4:	f002 0203 	and.w	r2, r2, #3
 80030c8:	0092      	lsls	r2, r2, #2
 80030ca:	4093      	lsls	r3, r2
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030d2:	492f      	ldr	r1, [pc, #188]	; (8003190 <HAL_GPIO_Init+0x2bc>)
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	3302      	adds	r3, #2
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	492c      	ldr	r1, [pc, #176]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
 80030f8:	e006      	b.n	8003108 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	43db      	mvns	r3, r3
 8003102:	4928      	ldr	r1, [pc, #160]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003104:	4013      	ands	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003114:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4922      	ldr	r1, [pc, #136]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	43db      	mvns	r3, r3
 800312a:	491e      	ldr	r1, [pc, #120]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 800312c:	4013      	ands	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	4918      	ldr	r1, [pc, #96]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	43db      	mvns	r3, r3
 8003152:	4914      	ldr	r1, [pc, #80]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003154:	4013      	ands	r3, r2
 8003156:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d021      	beq.n	80031a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	490e      	ldr	r1, [pc, #56]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	60cb      	str	r3, [r1, #12]
 8003170:	e021      	b.n	80031b6 <HAL_GPIO_Init+0x2e2>
 8003172:	bf00      	nop
 8003174:	10320000 	.word	0x10320000
 8003178:	10310000 	.word	0x10310000
 800317c:	10220000 	.word	0x10220000
 8003180:	10210000 	.word	0x10210000
 8003184:	10120000 	.word	0x10120000
 8003188:	10110000 	.word	0x10110000
 800318c:	40021000 	.word	0x40021000
 8003190:	40010000 	.word	0x40010000
 8003194:	40010800 	.word	0x40010800
 8003198:	40010c00 	.word	0x40010c00
 800319c:	40011000 	.word	0x40011000
 80031a0:	40011400 	.word	0x40011400
 80031a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_GPIO_Init+0x304>)
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	4909      	ldr	r1, [pc, #36]	; (80031d8 <HAL_GPIO_Init+0x304>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	3301      	adds	r3, #1
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f47f ae8e 	bne.w	8002ee8 <HAL_GPIO_Init+0x14>
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	372c      	adds	r7, #44	; 0x2c
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	40010400 	.word	0x40010400

080031dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	e001      	b.n	80031fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	807b      	strh	r3, [r7, #2]
 8003216:	4613      	mov	r3, r2
 8003218:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800321a:	787b      	ldrb	r3, [r7, #1]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003220:	887a      	ldrh	r2, [r7, #2]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003226:	e003      	b.n	8003230 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003228:	887b      	ldrh	r3, [r7, #2]
 800322a:	041a      	lsls	r2, r3, #16
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	611a      	str	r2, [r3, #16]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800324c:	887a      	ldrh	r2, [r7, #2]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4013      	ands	r3, r2
 8003252:	041a      	lsls	r2, r3, #16
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43d9      	mvns	r1, r3
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	400b      	ands	r3, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	611a      	str	r2, [r3, #16]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800326c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326e:	b08b      	sub	sp, #44	; 0x2c
 8003270:	af06      	add	r7, sp, #24
 8003272:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0fd      	b.n	800347a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f007 fa46 	bl	800a724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2203      	movs	r2, #3
 800329c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f003 f86f 	bl	8006388 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	687e      	ldr	r6, [r7, #4]
 80032b2:	466d      	mov	r5, sp
 80032b4:	f106 0410 	add.w	r4, r6, #16
 80032b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	602b      	str	r3, [r5, #0]
 80032c0:	1d33      	adds	r3, r6, #4
 80032c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c4:	6838      	ldr	r0, [r7, #0]
 80032c6:	f003 f839 	bl	800633c <USB_CoreInit>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0ce      	b.n	800347a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f003 f86a 	bl	80063bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
 80032ec:	e04c      	b.n	8003388 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	3301      	adds	r3, #1
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	b298      	uxth	r0, r3
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	3336      	adds	r3, #54	; 0x36
 800332c:	4602      	mov	r2, r0
 800332e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	440b      	add	r3, r1
 8003340:	3303      	adds	r3, #3
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	3338      	adds	r3, #56	; 0x38
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	440b      	add	r3, r1
 8003368:	333c      	adds	r3, #60	; 0x3c
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	3340      	adds	r3, #64	; 0x40
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	3301      	adds	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d3ad      	bcc.n	80032ee <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	e044      	b.n	8003422 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	440b      	add	r3, r1
 80033a6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	440b      	add	r3, r1
 80033bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033c4:	7bfa      	ldrb	r2, [r7, #15]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003406:	7bfa      	ldrb	r2, [r7, #15]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	3301      	adds	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d3b5      	bcc.n	8003398 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	687e      	ldr	r6, [r7, #4]
 8003434:	466d      	mov	r5, sp
 8003436:	f106 0410 	add.w	r4, r6, #16
 800343a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800343c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	602b      	str	r3, [r5, #0]
 8003442:	1d33      	adds	r3, r6, #4
 8003444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003446:	6838      	ldr	r0, [r7, #0]
 8003448:	f002 ffc4 	bl	80063d4 <USB_DevInit>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e00d      	b.n	800347a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f005 fc76 	bl	8008d64 <USB_DevDisconnect>

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003482 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_PCD_Start+0x16>
 8003494:	2302      	movs	r3, #2
 8003496:	e016      	b.n	80034c6 <HAL_PCD_Start+0x44>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 ff59 	bl	800635c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80034aa:	2101      	movs	r1, #1
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f007 fb90 	bl	800abd2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f005 fc4a 	bl	8008d50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f005 fc4c 	bl	8008d78 <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ea:	d102      	bne.n	80034f2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fb48 	bl	8003b82 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f005 fc3e 	bl	8008d78 <USB_ReadInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d112      	bne.n	800352e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003510:	b29a      	uxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351a:	b292      	uxth	r2, r2
 800351c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f007 f97a 	bl	800a81a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003526:	2100      	movs	r1, #0
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f923 	bl	8003774 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f005 fc20 	bl	8008d78 <USB_ReadInterrupts>
 8003538:	4603      	mov	r3, r0
 800353a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003542:	d10b      	bne.n	800355c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003556:	b292      	uxth	r2, r2
 8003558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f005 fc09 	bl	8008d78 <USB_ReadInterrupts>
 8003566:	4603      	mov	r3, r0
 8003568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003570:	d10b      	bne.n	800358a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800357a:	b29a      	uxth	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003584:	b292      	uxth	r2, r2
 8003586:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f005 fbf2 	bl	8008d78 <USB_ReadInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359e:	d126      	bne.n	80035ee <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0204 	bic.w	r2, r2, #4
 80035b2:	b292      	uxth	r2, r2
 80035b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0208 	bic.w	r2, r2, #8
 80035ca:	b292      	uxth	r2, r2
 80035cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f007 f95b 	bl	800a88c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035e8:	b292      	uxth	r2, r2
 80035ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f005 fbc0 	bl	8008d78 <USB_ReadInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003602:	f040 8082 	bne.w	800370a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003606:	2300      	movs	r3, #0
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e010      	b.n	800362e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	7ffb      	ldrb	r3, [r7, #31]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	441a      	add	r2, r3
 8003618:	7ffb      	ldrb	r3, [r7, #31]
 800361a:	8812      	ldrh	r2, [r2, #0]
 800361c:	b292      	uxth	r2, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	3320      	adds	r3, #32
 8003622:	443b      	add	r3, r7
 8003624:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003628:	7ffb      	ldrb	r3, [r7, #31]
 800362a:	3301      	adds	r3, #1
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	7ffb      	ldrb	r3, [r7, #31]
 8003630:	2b07      	cmp	r3, #7
 8003632:	d9eb      	bls.n	800360c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800363c:	b29a      	uxth	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	b292      	uxth	r2, r2
 8003648:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	b292      	uxth	r2, r2
 8003660:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003664:	bf00      	nop
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800366e:	b29b      	uxth	r3, r3
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f6      	beq.n	8003666 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003680:	b29a      	uxth	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368a:	b292      	uxth	r2, r2
 800368c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003690:	2300      	movs	r3, #0
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e00f      	b.n	80036b6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	4611      	mov	r1, r2
 800369e:	7ffa      	ldrb	r2, [r7, #31]
 80036a0:	0092      	lsls	r2, r2, #2
 80036a2:	440a      	add	r2, r1
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	3320      	adds	r3, #32
 80036a8:	443b      	add	r3, r7
 80036aa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80036ae:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80036b0:	7ffb      	ldrb	r3, [r7, #31]
 80036b2:	3301      	adds	r3, #1
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	7ffb      	ldrb	r3, [r7, #31]
 80036b8:	2b07      	cmp	r3, #7
 80036ba:	d9ec      	bls.n	8003696 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0208 	orr.w	r2, r2, #8
 80036ce:	b292      	uxth	r2, r2
 80036d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036dc:	b29a      	uxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e6:	b292      	uxth	r2, r2
 80036e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0204 	orr.w	r2, r2, #4
 80036fe:	b292      	uxth	r2, r2
 8003700:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f007 f8a7 	bl	800a858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f005 fb32 	bl	8008d78 <USB_ReadInterrupts>
 8003714:	4603      	mov	r3, r0
 8003716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371e:	d10e      	bne.n	800373e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003732:	b292      	uxth	r2, r2
 8003734:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f007 f860 	bl	800a7fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f005 fb18 	bl	8008d78 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	d10b      	bne.n	800376c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800375c:	b29a      	uxth	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003766:	b292      	uxth	r2, r2
 8003768:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800376c:	bf00      	nop
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_PCD_SetAddress+0x1a>
 800378a:	2302      	movs	r3, #2
 800378c:	e013      	b.n	80037b6 <HAL_PCD_SetAddress+0x42>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f005 fabf 	bl	8008d2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	4608      	mov	r0, r1
 80037c8:	4611      	mov	r1, r2
 80037ca:	461a      	mov	r2, r3
 80037cc:	4603      	mov	r3, r0
 80037ce:	70fb      	strb	r3, [r7, #3]
 80037d0:	460b      	mov	r3, r1
 80037d2:	803b      	strh	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da0e      	bge.n	8003802 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	705a      	strb	r2, [r3, #1]
 8003800:	e00e      	b.n	8003820 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 0207 	and.w	r2, r3, #7
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	b2da      	uxtb	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800382c:	883a      	ldrh	r2, [r7, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	78ba      	ldrb	r2, [r7, #2]
 8003836:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800384a:	78bb      	ldrb	r3, [r7, #2]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d102      	bne.n	8003856 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_PCD_EP_Open+0xa6>
 8003860:	2302      	movs	r3, #2
 8003862:	e00e      	b.n	8003882 <HAL_PCD_EP_Open+0xc4>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68f9      	ldr	r1, [r7, #12]
 8003872:	4618      	mov	r0, r3
 8003874:	f002 fdce 	bl	8006414 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003880:	7afb      	ldrb	r3, [r7, #11]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800389a:	2b00      	cmp	r3, #0
 800389c:	da0e      	bge.n	80038bc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	705a      	strb	r2, [r3, #1]
 80038ba:	e00e      	b.n	80038da <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 0207 	and.w	r2, r3, #7
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_PCD_EP_Close+0x6a>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e00e      	b.n	8003912 <HAL_PCD_EP_Close+0x88>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	4618      	mov	r0, r3
 8003904:	f003 f8f0 	bl	8006ae8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	460b      	mov	r3, r1
 8003928:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800392a:	7afb      	ldrb	r3, [r7, #11]
 800392c:	f003 0207 	and.w	r2, r3, #7
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2200      	movs	r2, #0
 8003958:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395a:	7afb      	ldrb	r3, [r7, #11]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	b2da      	uxtb	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6979      	ldr	r1, [r7, #20]
 8003976:	4618      	mov	r0, r3
 8003978:	f003 faa2 	bl	8006ec0 <USB_EPStartXfer>
 800397c:	e005      	b.n	800398a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6979      	ldr	r1, [r7, #20]
 8003984:	4618      	mov	r0, r3
 8003986:	f003 fa9b 	bl	8006ec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	460b      	mov	r3, r1
 80039a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a4:	7afb      	ldrb	r3, [r7, #11]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2201      	movs	r2, #1
 80039de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039e0:	7afb      	ldrb	r3, [r7, #11]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039ec:	7afb      	ldrb	r3, [r7, #11]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 fa5f 	bl	8006ec0 <USB_EPStartXfer>
 8003a02:	e005      	b.n	8003a10 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6979      	ldr	r1, [r7, #20]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 fa58 	bl	8006ec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	f003 0207 	and.w	r2, r3, #7
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d901      	bls.n	8003a38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e04c      	b.n	8003ad2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da0e      	bge.n	8003a5e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	705a      	strb	r2, [r3, #1]
 8003a5c:	e00c      	b.n	8003a78 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_PCD_EP_SetStall+0x7e>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e01c      	b.n	8003ad2 <HAL_PCD_EP_SetStall+0xb8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f005 f842 	bl	8008b30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d108      	bne.n	8003ac8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f005 f967 	bl	8008d96 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	f003 020f 	and.w	r2, r3, #15
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d901      	bls.n	8003af8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e040      	b.n	8003b7a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	da0e      	bge.n	8003b1e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	705a      	strb	r2, [r3, #1]
 8003b1c:	e00e      	b.n	8003b3c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	f003 0207 	and.w	r2, r3, #7
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_PCD_EP_ClrStall+0x82>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e00e      	b.n	8003b7a <HAL_PCD_EP_ClrStall+0xa0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f005 f830 	bl	8008bd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b08e      	sub	sp, #56	; 0x38
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b8a:	e2ec      	b.n	8004166 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b94:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003ba2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 8161 	bne.w	8003e6e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003bac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d152      	bne.n	8003c5c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	81fb      	strh	r3, [r7, #14]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	89fb      	ldrh	r3, [r7, #14]
 8003bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3328      	adds	r3, #40	; 0x28
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	441a      	add	r2, r3
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f006 fdd4 	bl	800a7ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 829b 	beq.w	8004166 <PCD_EP_ISR_Handler+0x5e4>
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f040 8296 	bne.w	8004166 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	b292      	uxth	r2, r2
 8003c4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c5a:	e284      	b.n	8004166 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d034      	beq.n	8003ce0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3306      	adds	r3, #6
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f005 f8be 	bl	8008e36 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	823b      	strh	r3, [r7, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	8a3a      	ldrh	r2, [r7, #16]
 8003cd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cd4:	b292      	uxth	r2, r2
 8003cd6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f006 fd49 	bl	800a770 <HAL_PCD_SetupStageCallback>
 8003cde:	e242      	b.n	8004166 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ce0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f280 823e 	bge.w	8004166 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	83bb      	strh	r3, [r7, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	8bba      	ldrh	r2, [r7, #28]
 8003d00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d04:	b292      	uxth	r2, r2
 8003d06:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3306      	adds	r3, #6
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d019      	beq.n	8003d70 <PCD_EP_ISR_Handler+0x1ee>
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d015      	beq.n	8003d70 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	6959      	ldr	r1, [r3, #20]
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f005 f86e 	bl	8008e36 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	441a      	add	r2, r3
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d68:	2100      	movs	r1, #0
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f006 fd12 	bl	800a794 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f040 81f2 	bne.w	8004166 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d112      	bne.n	8003dd0 <PCD_EP_ISR_Handler+0x24e>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	801a      	strh	r2, [r3, #0]
 8003dce:	e02f      	b.n	8003e30 <PCD_EP_ISR_Handler+0x2ae>
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b3e      	cmp	r3, #62	; 0x3e
 8003dd6:	d813      	bhi.n	8003e00 <PCD_EP_ISR_Handler+0x27e>
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <PCD_EP_ISR_Handler+0x270>
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	3301      	adds	r3, #1
 8003df0:	633b      	str	r3, [r7, #48]	; 0x30
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	029b      	lsls	r3, r3, #10
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	801a      	strh	r2, [r3, #0]
 8003dfe:	e017      	b.n	8003e30 <PCD_EP_ISR_Handler+0x2ae>
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <PCD_EP_ISR_Handler+0x298>
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	3b01      	subs	r3, #1
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	029b      	lsls	r3, r3, #10
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e40:	827b      	strh	r3, [r7, #18]
 8003e42:	8a7b      	ldrh	r3, [r7, #18]
 8003e44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e48:	827b      	strh	r3, [r7, #18]
 8003e4a:	8a7b      	ldrh	r3, [r7, #18]
 8003e4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e50:	827b      	strh	r3, [r7, #18]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	8a7b      	ldrh	r3, [r7, #18]
 8003e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	8013      	strh	r3, [r2, #0]
 8003e6c:	e17b      	b.n	8004166 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e80:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f280 80ea 	bge.w	800405e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	853b      	strh	r3, [r7, #40]	; 0x28
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003eb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eb8:	b292      	uxth	r2, r2
 8003eba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ebc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4413      	add	r3, r2
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	7b1b      	ldrb	r3, [r3, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d122      	bne.n	8003f20 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	3306      	adds	r3, #6
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f02:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003f04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8087 	beq.w	800401a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	6959      	ldr	r1, [r3, #20]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	88da      	ldrh	r2, [r3, #6]
 8003f18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f1a:	f004 ff8c 	bl	8008e36 <USB_ReadPMA>
 8003f1e:	e07c      	b.n	800401a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	78db      	ldrb	r3, [r3, #3]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d108      	bne.n	8003f3a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f927 	bl	8004182 <HAL_PCD_EP_DB_Receive>
 8003f34:	4603      	mov	r3, r0
 8003f36:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003f38:	e06f      	b.n	800401a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f54:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	441a      	add	r2, r3
 8003f64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d021      	beq.n	8003fd8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fbc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003fbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02a      	beq.n	800401a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	6959      	ldr	r1, [r3, #20]
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	891a      	ldrh	r2, [r3, #8]
 8003fd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fd2:	f004 ff30 	bl	8008e36 <USB_ReadPMA>
 8003fd6:	e020      	b.n	800401a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	3306      	adds	r3, #6
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004000:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004002:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	6959      	ldr	r1, [r3, #20]
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	895a      	ldrh	r2, [r3, #10]
 8004014:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004016:	f004 ff0e 	bl	8008e36 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	69da      	ldr	r2, [r3, #28]
 800401e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004020:	441a      	add	r2, r3
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800402c:	441a      	add	r2, r3
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <PCD_EP_ISR_Handler+0x4c2>
 800403a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	429a      	cmp	r2, r3
 8004042:	d206      	bcs.n	8004052 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f006 fba2 	bl	800a794 <HAL_PCD_DataOutStageCallback>
 8004050:	e005      	b.n	800405e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004058:	4618      	mov	r0, r3
 800405a:	f002 ff31 	bl	8006ec0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800405e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d07e      	beq.n	8004166 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004068:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004096:	843b      	strh	r3, [r7, #32]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	8c3b      	ldrh	r3, [r7, #32]
 80040a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	78db      	ldrb	r3, [r3, #3]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d00c      	beq.n	80040d6 <PCD_EP_ISR_Handler+0x554>
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	78db      	ldrb	r3, [r3, #3]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d146      	bne.n	800415a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80040cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d141      	bne.n	800415a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	3302      	adds	r3, #2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fe:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	8bfb      	ldrh	r3, [r7, #30]
 8004106:	429a      	cmp	r2, r3
 8004108:	d906      	bls.n	8004118 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	8bfb      	ldrh	r3, [r7, #30]
 8004110:	1ad2      	subs	r2, r2, r3
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	619a      	str	r2, [r3, #24]
 8004116:	e002      	b.n	800411e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	2200      	movs	r2, #0
 800411c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f006 fb4c 	bl	800a7ca <HAL_PCD_DataInStageCallback>
 8004132:	e018      	b.n	8004166 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	8bfb      	ldrh	r3, [r7, #30]
 800413a:	441a      	add	r2, r3
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	8bfb      	ldrh	r3, [r7, #30]
 8004146:	441a      	add	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004152:	4618      	mov	r0, r3
 8004154:	f002 feb4 	bl	8006ec0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004158:	e005      	b.n	8004166 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800415a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800415c:	461a      	mov	r2, r3
 800415e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f91b 	bl	800439c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800416e:	b29b      	uxth	r3, r3
 8004170:	b21b      	sxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	f6ff ad0a 	blt.w	8003b8c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3738      	adds	r7, #56	; 0x38
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b088      	sub	sp, #32
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	4613      	mov	r3, r2
 800418e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d07e      	beq.n	8004298 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	3302      	adds	r3, #2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	8b7b      	ldrh	r3, [r7, #26]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d306      	bcc.n	80041dc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	8b7b      	ldrh	r3, [r7, #26]
 80041d4:	1ad2      	subs	r2, r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	619a      	str	r2, [r3, #24]
 80041da:	e002      	b.n	80041e2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d123      	bne.n	8004232 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004204:	833b      	strh	r3, [r7, #24]
 8004206:	8b3b      	ldrh	r3, [r7, #24]
 8004208:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800420c:	833b      	strh	r3, [r7, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	441a      	add	r2, r3
 800421c:	8b3b      	ldrh	r3, [r7, #24]
 800421e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422e:	b29b      	uxth	r3, r3
 8004230:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01f      	beq.n	800427c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	82fb      	strh	r3, [r7, #22]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	441a      	add	r2, r3
 8004266:	8afb      	ldrh	r3, [r7, #22]
 8004268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004274:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004278:	b29b      	uxth	r3, r3
 800427a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800427c:	8b7b      	ldrh	r3, [r7, #26]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8087 	beq.w	8004392 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6959      	ldr	r1, [r3, #20]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	891a      	ldrh	r2, [r3, #8]
 8004290:	8b7b      	ldrh	r3, [r7, #26]
 8004292:	f004 fdd0 	bl	8008e36 <USB_ReadPMA>
 8004296:	e07c      	b.n	8004392 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4413      	add	r3, r2
 80042ac:	3306      	adds	r3, #6
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	8b7b      	ldrh	r3, [r7, #26]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d306      	bcc.n	80042da <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	8b7b      	ldrh	r3, [r7, #26]
 80042d2:	1ad2      	subs	r2, r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	619a      	str	r2, [r3, #24]
 80042d8:	e002      	b.n	80042e0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2200      	movs	r2, #0
 80042de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d123      	bne.n	8004330 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	83fb      	strh	r3, [r7, #30]
 8004304:	8bfb      	ldrh	r3, [r7, #30]
 8004306:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800430a:	83fb      	strh	r3, [r7, #30]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	8bfb      	ldrh	r3, [r7, #30]
 800431c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432c:	b29b      	uxth	r3, r3
 800432e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d11f      	bne.n	800437a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004354:	83bb      	strh	r3, [r7, #28]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	441a      	add	r2, r3
 8004364:	8bbb      	ldrh	r3, [r7, #28]
 8004366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800436a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004372:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004376:	b29b      	uxth	r3, r3
 8004378:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800437a:	8b7b      	ldrh	r3, [r7, #26]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	6959      	ldr	r1, [r3, #20]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	895a      	ldrh	r2, [r3, #10]
 800438c:	8b7b      	ldrh	r3, [r7, #26]
 800438e:	f004 fd52 	bl	8008e36 <USB_ReadPMA>
    }
  }

  return count;
 8004392:	8b7b      	ldrh	r3, [r7, #26]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b0a2      	sub	sp, #136	; 0x88
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 81c7 	beq.w	8004744 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	3302      	adds	r3, #2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d907      	bls.n	80043fe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	619a      	str	r2, [r3, #24]
 80043fc:	e002      	b.n	8004404 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 80b9 	bne.w	8004580 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d126      	bne.n	8004464 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004424:	b29b      	uxth	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	4413      	add	r3, r2
 800442c:	62bb      	str	r3, [r7, #40]	; 0x28
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	011a      	lsls	r2, r3, #4
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	4413      	add	r3, r2
 8004438:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004448:	b29a      	uxth	r2, r3
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	801a      	strh	r2, [r3, #0]
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800445c:	b29a      	uxth	r2, r3
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	e01a      	b.n	800449a <HAL_PCD_EP_DB_Transmit+0xfe>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d116      	bne.n	800449a <HAL_PCD_EP_DB_Transmit+0xfe>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	633b      	str	r3, [r7, #48]	; 0x30
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800447a:	b29b      	uxth	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	4413      	add	r3, r2
 8004482:	633b      	str	r3, [r7, #48]	; 0x30
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	011a      	lsls	r2, r3, #4
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	4413      	add	r3, r2
 800448e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	2200      	movs	r2, #0
 8004498:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d126      	bne.n	80044f6 <HAL_PCD_EP_DB_Transmit+0x15a>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	4413      	add	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	011a      	lsls	r2, r3, #4
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4413      	add	r3, r2
 80044ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044da:	b29a      	uxth	r2, r3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	801a      	strh	r2, [r3, #0]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	801a      	strh	r2, [r3, #0]
 80044f4:	e017      	b.n	8004526 <HAL_PCD_EP_DB_Transmit+0x18a>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d113      	bne.n	8004526 <HAL_PCD_EP_DB_Transmit+0x18a>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004506:	b29b      	uxth	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	4413      	add	r3, r2
 800450e:	623b      	str	r3, [r7, #32]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	011a      	lsls	r2, r3, #4
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	4413      	add	r3, r2
 800451a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2200      	movs	r2, #0
 8004524:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	4619      	mov	r1, r3
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f006 f94c 	bl	800a7ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 82d4 	beq.w	8004ae6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004558:	827b      	strh	r3, [r7, #18]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	441a      	add	r2, r3
 8004568:	8a7b      	ldrh	r3, [r7, #18]
 800456a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457a:	b29b      	uxth	r3, r3
 800457c:	8013      	strh	r3, [r2, #0]
 800457e:	e2b2      	b.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004580:	88fb      	ldrh	r3, [r7, #6]
 8004582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d021      	beq.n	80045ce <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80045ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	f040 8286 	bne.w	8004ae6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045e2:	441a      	add	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045f0:	441a      	add	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6a1a      	ldr	r2, [r3, #32]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d309      	bcc.n	8004616 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460e:	1ad2      	subs	r2, r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	621a      	str	r2, [r3, #32]
 8004614:	e015      	b.n	8004642 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800461e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004622:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800462c:	e009      	b.n	8004642 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d155      	bne.n	80046f6 <HAL_PCD_EP_DB_Transmit+0x35a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004658:	b29b      	uxth	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	4413      	add	r3, r2
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	011a      	lsls	r2, r3, #4
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	4413      	add	r3, r2
 800466c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004670:	637b      	str	r3, [r7, #52]	; 0x34
 8004672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004674:	2b00      	cmp	r3, #0
 8004676:	d112      	bne.n	800469e <HAL_PCD_EP_DB_Transmit+0x302>
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004682:	b29a      	uxth	r2, r3
 8004684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004696:	b29a      	uxth	r2, r3
 8004698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	e047      	b.n	800472e <HAL_PCD_EP_DB_Transmit+0x392>
 800469e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a0:	2b3e      	cmp	r3, #62	; 0x3e
 80046a2:	d811      	bhi.n	80046c8 <HAL_PCD_EP_DB_Transmit+0x32c>
 80046a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80046aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_PCD_EP_DB_Transmit+0x31e>
 80046b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b6:	3301      	adds	r3, #1
 80046b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80046ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046bc:	b29b      	uxth	r3, r3
 80046be:	029b      	lsls	r3, r3, #10
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	e032      	b.n	800472e <HAL_PCD_EP_DB_Transmit+0x392>
 80046c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80046ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <HAL_PCD_EP_DB_Transmit+0x342>
 80046d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046da:	3b01      	subs	r3, #1
 80046dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80046de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	029b      	lsls	r3, r3, #10
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	801a      	strh	r2, [r3, #0]
 80046f4:	e01b      	b.n	800472e <HAL_PCD_EP_DB_Transmit+0x392>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d117      	bne.n	800472e <HAL_PCD_EP_DB_Transmit+0x392>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470c:	b29b      	uxth	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004712:	4413      	add	r3, r2
 8004714:	643b      	str	r3, [r7, #64]	; 0x40
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	011a      	lsls	r2, r3, #4
 800471c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471e:	4413      	add	r3, r2
 8004720:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004728:	b29a      	uxth	r2, r3
 800472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6959      	ldr	r1, [r3, #20]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	891a      	ldrh	r2, [r3, #8]
 800473a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800473c:	b29b      	uxth	r3, r3
 800473e:	f004 fb35 	bl	8008dac <USB_WritePMA>
 8004742:	e1d0      	b.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4413      	add	r3, r2
 8004758:	3306      	adds	r3, #6
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800476c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004778:	429a      	cmp	r2, r3
 800477a:	d307      	bcc.n	800478c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	699a      	ldr	r2, [r3, #24]
 8004780:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004784:	1ad2      	subs	r2, r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	619a      	str	r2, [r3, #24]
 800478a:	e002      	b.n	8004792 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2200      	movs	r2, #0
 8004790:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 80c4 	bne.w	8004924 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d126      	bne.n	80047f2 <HAL_PCD_EP_DB_Transmit+0x456>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b8:	4413      	add	r3, r2
 80047ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	011a      	lsls	r2, r3, #4
 80047c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c4:	4413      	add	r3, r2
 80047c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80047cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047da:	801a      	strh	r2, [r3, #0]
 80047dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	e01a      	b.n	8004828 <HAL_PCD_EP_DB_Transmit+0x48c>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d116      	bne.n	8004828 <HAL_PCD_EP_DB_Transmit+0x48c>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	677b      	str	r3, [r7, #116]	; 0x74
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004808:	b29b      	uxth	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480e:	4413      	add	r3, r2
 8004810:	677b      	str	r3, [r7, #116]	; 0x74
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	011a      	lsls	r2, r3, #4
 8004818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800481a:	4413      	add	r3, r2
 800481c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004820:	673b      	str	r3, [r7, #112]	; 0x70
 8004822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004824:	2200      	movs	r2, #0
 8004826:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	67bb      	str	r3, [r7, #120]	; 0x78
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d12f      	bne.n	8004896 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004846:	b29b      	uxth	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800484e:	4413      	add	r3, r2
 8004850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	011a      	lsls	r2, r3, #4
 800485a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800485e:	4413      	add	r3, r2
 8004860:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004874:	b29a      	uxth	r2, r3
 8004876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800487a:	801a      	strh	r2, [r3, #0]
 800487c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488c:	b29a      	uxth	r2, r3
 800488e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	e017      	b.n	80048c6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d113      	bne.n	80048c6 <HAL_PCD_EP_DB_Transmit+0x52a>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ac:	4413      	add	r3, r2
 80048ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	011a      	lsls	r2, r3, #4
 80048b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048b8:	4413      	add	r3, r2
 80048ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048c2:	2200      	movs	r2, #0
 80048c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	4619      	mov	r1, r3
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f005 ff7c 	bl	800a7ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f040 8104 	bne.w	8004ae6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	441a      	add	r2, r3
 800490a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800490e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800491a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491e:	b29b      	uxth	r3, r3
 8004920:	8013      	strh	r3, [r2, #0]
 8004922:	e0e0      	b.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d121      	bne.n	8004972 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004948:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	441a      	add	r2, r3
 800495a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800495e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800496a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496e:	b29b      	uxth	r3, r3
 8004970:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004978:	2b01      	cmp	r3, #1
 800497a:	f040 80b4 	bne.w	8004ae6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004986:	441a      	add	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004994:	441a      	add	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d309      	bcc.n	80049ba <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b2:	1ad2      	subs	r2, r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	621a      	str	r2, [r3, #32]
 80049b8:	e015      	b.n	80049e6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d107      	bne.n	80049d2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80049c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049d0:	e009      	b.n	80049e6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2200      	movs	r2, #0
 80049dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	667b      	str	r3, [r7, #100]	; 0x64
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d155      	bne.n	8004aa0 <HAL_PCD_EP_DB_Transmit+0x704>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a08:	4413      	add	r3, r2
 8004a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	011a      	lsls	r2, r3, #4
 8004a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a14:	4413      	add	r3, r2
 8004a16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d112      	bne.n	8004a48 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a44:	801a      	strh	r2, [r3, #0]
 8004a46:	e044      	b.n	8004ad2 <HAL_PCD_EP_DB_Transmit+0x736>
 8004a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a4c:	d811      	bhi.n	8004a72 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a50:	085b      	lsrs	r3, r3, #1
 8004a52:	657b      	str	r3, [r7, #84]	; 0x54
 8004a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a60:	3301      	adds	r3, #1
 8004a62:	657b      	str	r3, [r7, #84]	; 0x54
 8004a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	029b      	lsls	r3, r3, #10
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	e02f      	b.n	8004ad2 <HAL_PCD_EP_DB_Transmit+0x736>
 8004a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	657b      	str	r3, [r7, #84]	; 0x54
 8004a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a84:	3b01      	subs	r3, #1
 8004a86:	657b      	str	r3, [r7, #84]	; 0x54
 8004a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	029b      	lsls	r3, r3, #10
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a9c:	801a      	strh	r2, [r3, #0]
 8004a9e:	e018      	b.n	8004ad2 <HAL_PCD_EP_DB_Transmit+0x736>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d114      	bne.n	8004ad2 <HAL_PCD_EP_DB_Transmit+0x736>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab6:	4413      	add	r3, r2
 8004ab8:	667b      	str	r3, [r7, #100]	; 0x64
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	011a      	lsls	r2, r3, #4
 8004ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ac8:	663b      	str	r3, [r7, #96]	; 0x60
 8004aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ad0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6959      	ldr	r1, [r3, #20]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	895a      	ldrh	r2, [r3, #10]
 8004ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f004 f963 	bl	8008dac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b00:	823b      	strh	r3, [r7, #16]
 8004b02:	8a3b      	ldrh	r3, [r7, #16]
 8004b04:	f083 0310 	eor.w	r3, r3, #16
 8004b08:	823b      	strh	r3, [r7, #16]
 8004b0a:	8a3b      	ldrh	r3, [r7, #16]
 8004b0c:	f083 0320 	eor.w	r3, r3, #32
 8004b10:	823b      	strh	r3, [r7, #16]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	8a3b      	ldrh	r3, [r7, #16]
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3788      	adds	r7, #136	; 0x88
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	817b      	strh	r3, [r7, #10]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b5e:	897b      	ldrh	r3, [r7, #10]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	e009      	b.n	8004b8a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b76:	897a      	ldrh	r2, [r7, #10]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004b8a:	893b      	ldrh	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	80da      	strh	r2, [r3, #6]
 8004b9e:	e00b      	b.n	8004bb8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e272      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8087 	beq.w	8004cf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004be4:	4b92      	ldr	r3, [pc, #584]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d00c      	beq.n	8004c0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bf0:	4b8f      	ldr	r3, [pc, #572]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d112      	bne.n	8004c22 <HAL_RCC_OscConfig+0x5e>
 8004bfc:	4b8c      	ldr	r3, [pc, #560]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c08:	d10b      	bne.n	8004c22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0a:	4b89      	ldr	r3, [pc, #548]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d06c      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x12c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d168      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e24c      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCC_OscConfig+0x76>
 8004c2c:	4b80      	ldr	r3, [pc, #512]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a7f      	ldr	r2, [pc, #508]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	e02e      	b.n	8004c98 <HAL_RCC_OscConfig+0xd4>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x98>
 8004c42:	4b7b      	ldr	r3, [pc, #492]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a7a      	ldr	r2, [pc, #488]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b78      	ldr	r3, [pc, #480]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a77      	ldr	r2, [pc, #476]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e01d      	b.n	8004c98 <HAL_RCC_OscConfig+0xd4>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0xbc>
 8004c66:	4b72      	ldr	r3, [pc, #456]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a71      	ldr	r2, [pc, #452]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b6f      	ldr	r3, [pc, #444]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a6e      	ldr	r2, [pc, #440]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0xd4>
 8004c80:	4b6b      	ldr	r3, [pc, #428]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a6a      	ldr	r2, [pc, #424]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b68      	ldr	r3, [pc, #416]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a67      	ldr	r2, [pc, #412]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d013      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fc ff80 	bl	8001ba4 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fc ff7c 	bl	8001ba4 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e200      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b5d      	ldr	r3, [pc, #372]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0xe4>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fc ff6c 	bl	8001ba4 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd0:	f7fc ff68 	bl	8001ba4 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	; 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1ec      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	4b53      	ldr	r3, [pc, #332]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x10c>
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d063      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cfe:	4b4c      	ldr	r3, [pc, #304]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d0a:	4b49      	ldr	r3, [pc, #292]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d11c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x18c>
 8004d16:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d116      	bne.n	8004d50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_RCC_OscConfig+0x176>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1c0      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3a:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4939      	ldr	r1, [pc, #228]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4e:	e03a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d58:	4b36      	ldr	r3, [pc, #216]	; (8004e34 <HAL_RCC_OscConfig+0x270>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7fc ff21 	bl	8001ba4 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d66:	f7fc ff1d 	bl	8001ba4 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e1a1      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d78:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d84:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4927      	ldr	r1, [pc, #156]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	600b      	str	r3, [r1, #0]
 8004d98:	e015      	b.n	8004dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9a:	4b26      	ldr	r3, [pc, #152]	; (8004e34 <HAL_RCC_OscConfig+0x270>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da0:	f7fc ff00 	bl	8001ba4 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da8:	f7fc fefc 	bl	8001ba4 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e180      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d03a      	beq.n	8004e48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d019      	beq.n	8004e0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dda:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de0:	f7fc fee0 	bl	8001ba4 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004de8:	f7fc fedc 	bl	8001ba4 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e160      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e06:	2001      	movs	r0, #1
 8004e08:	f000 fad8 	bl	80053bc <RCC_Delay>
 8004e0c:	e01c      	b.n	8004e48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e14:	f7fc fec6 	bl	8001ba4 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e1a:	e00f      	b.n	8004e3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e1c:	f7fc fec2 	bl	8001ba4 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d908      	bls.n	8004e3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e146      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000
 8004e34:	42420000 	.word	0x42420000
 8004e38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3c:	4b92      	ldr	r3, [pc, #584]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e9      	bne.n	8004e1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80a6 	beq.w	8004fa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5a:	4b8b      	ldr	r3, [pc, #556]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10d      	bne.n	8004e82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e66:	4b88      	ldr	r3, [pc, #544]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	4a87      	ldr	r2, [pc, #540]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e70:	61d3      	str	r3, [r2, #28]
 8004e72:	4b85      	ldr	r3, [pc, #532]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e82:	4b82      	ldr	r3, [pc, #520]	; (800508c <HAL_RCC_OscConfig+0x4c8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d118      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e8e:	4b7f      	ldr	r3, [pc, #508]	; (800508c <HAL_RCC_OscConfig+0x4c8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a7e      	ldr	r2, [pc, #504]	; (800508c <HAL_RCC_OscConfig+0x4c8>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9a:	f7fc fe83 	bl	8001ba4 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea2:	f7fc fe7f 	bl	8001ba4 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b64      	cmp	r3, #100	; 0x64
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e103      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb4:	4b75      	ldr	r3, [pc, #468]	; (800508c <HAL_RCC_OscConfig+0x4c8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f0      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x312>
 8004ec8:	4b6f      	ldr	r3, [pc, #444]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	4a6e      	ldr	r2, [pc, #440]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6213      	str	r3, [r2, #32]
 8004ed4:	e02d      	b.n	8004f32 <HAL_RCC_OscConfig+0x36e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x334>
 8004ede:	4b6a      	ldr	r3, [pc, #424]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	4a69      	ldr	r2, [pc, #420]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004ee4:	f023 0301 	bic.w	r3, r3, #1
 8004ee8:	6213      	str	r3, [r2, #32]
 8004eea:	4b67      	ldr	r3, [pc, #412]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	4a66      	ldr	r2, [pc, #408]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	f023 0304 	bic.w	r3, r3, #4
 8004ef4:	6213      	str	r3, [r2, #32]
 8004ef6:	e01c      	b.n	8004f32 <HAL_RCC_OscConfig+0x36e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b05      	cmp	r3, #5
 8004efe:	d10c      	bne.n	8004f1a <HAL_RCC_OscConfig+0x356>
 8004f00:	4b61      	ldr	r3, [pc, #388]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	4a60      	ldr	r2, [pc, #384]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f06:	f043 0304 	orr.w	r3, r3, #4
 8004f0a:	6213      	str	r3, [r2, #32]
 8004f0c:	4b5e      	ldr	r3, [pc, #376]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	4a5d      	ldr	r2, [pc, #372]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	6213      	str	r3, [r2, #32]
 8004f18:	e00b      	b.n	8004f32 <HAL_RCC_OscConfig+0x36e>
 8004f1a:	4b5b      	ldr	r3, [pc, #364]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	4a5a      	ldr	r2, [pc, #360]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	6213      	str	r3, [r2, #32]
 8004f26:	4b58      	ldr	r3, [pc, #352]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	4a57      	ldr	r2, [pc, #348]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f2c:	f023 0304 	bic.w	r3, r3, #4
 8004f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d015      	beq.n	8004f66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3a:	f7fc fe33 	bl	8001ba4 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f40:	e00a      	b.n	8004f58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f42:	f7fc fe2f 	bl	8001ba4 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e0b1      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f58:	4b4b      	ldr	r3, [pc, #300]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0ee      	beq.n	8004f42 <HAL_RCC_OscConfig+0x37e>
 8004f64:	e014      	b.n	8004f90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f66:	f7fc fe1d 	bl	8001ba4 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f6c:	e00a      	b.n	8004f84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6e:	f7fc fe19 	bl	8001ba4 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e09b      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f84:	4b40      	ldr	r3, [pc, #256]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ee      	bne.n	8004f6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d105      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f96:	4b3c      	ldr	r3, [pc, #240]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	4a3b      	ldr	r2, [pc, #236]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8087 	beq.w	80050ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fac:	4b36      	ldr	r3, [pc, #216]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 030c 	and.w	r3, r3, #12
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d061      	beq.n	800507c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d146      	bne.n	800504e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc0:	4b33      	ldr	r3, [pc, #204]	; (8005090 <HAL_RCC_OscConfig+0x4cc>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc6:	f7fc fded 	bl	8001ba4 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fce:	f7fc fde9 	bl	8001ba4 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e06d      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fe0:	4b29      	ldr	r3, [pc, #164]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f0      	bne.n	8004fce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff4:	d108      	bne.n	8005008 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	4921      	ldr	r1, [pc, #132]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8005004:	4313      	orrs	r3, r2
 8005006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005008:	4b1f      	ldr	r3, [pc, #124]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a19      	ldr	r1, [r3, #32]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	430b      	orrs	r3, r1
 800501a:	491b      	ldr	r1, [pc, #108]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 800501c:	4313      	orrs	r3, r2
 800501e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_RCC_OscConfig+0x4cc>)
 8005022:	2201      	movs	r2, #1
 8005024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005026:	f7fc fdbd 	bl	8001ba4 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502e:	f7fc fdb9 	bl	8001ba4 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e03d      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005040:	4b11      	ldr	r3, [pc, #68]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x46a>
 800504c:	e035      	b.n	80050ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <HAL_RCC_OscConfig+0x4cc>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7fc fda6 	bl	8001ba4 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7fc fda2 	bl	8001ba4 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e026      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_RCC_OscConfig+0x4c4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x498>
 800507a:	e01e      	b.n	80050ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d107      	bne.n	8005094 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e019      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
 8005088:	40021000 	.word	0x40021000
 800508c:	40007000 	.word	0x40007000
 8005090:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_OscConfig+0x500>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d106      	bne.n	80050b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d001      	beq.n	80050ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40021000 	.word	0x40021000

080050c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0d0      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050dc:	4b6a      	ldr	r3, [pc, #424]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d910      	bls.n	800510c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b67      	ldr	r3, [pc, #412]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f023 0207 	bic.w	r2, r3, #7
 80050f2:	4965      	ldr	r1, [pc, #404]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fa:	4b63      	ldr	r3, [pc, #396]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0b8      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d020      	beq.n	800515a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005124:	4b59      	ldr	r3, [pc, #356]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a58      	ldr	r2, [pc, #352]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 800512a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800512e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800513c:	4b53      	ldr	r3, [pc, #332]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a52      	ldr	r2, [pc, #328]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005142:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005146:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005148:	4b50      	ldr	r3, [pc, #320]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	494d      	ldr	r1, [pc, #308]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d040      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d107      	bne.n	800517e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	4b47      	ldr	r3, [pc, #284]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d115      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e07f      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d107      	bne.n	8005196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005186:	4b41      	ldr	r3, [pc, #260]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e073      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005196:	4b3d      	ldr	r3, [pc, #244]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e06b      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051a6:	4b39      	ldr	r3, [pc, #228]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f023 0203 	bic.w	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4936      	ldr	r1, [pc, #216]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051b8:	f7fc fcf4 	bl	8001ba4 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c0:	f7fc fcf0 	bl	8001ba4 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e053      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d6:	4b2d      	ldr	r3, [pc, #180]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f003 020c 	and.w	r2, r3, #12
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d1eb      	bne.n	80051c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051e8:	4b27      	ldr	r3, [pc, #156]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d210      	bcs.n	8005218 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 0207 	bic.w	r2, r3, #7
 80051fe:	4922      	ldr	r1, [pc, #136]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e032      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	4916      	ldr	r1, [pc, #88]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005232:	4313      	orrs	r3, r2
 8005234:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	490e      	ldr	r1, [pc, #56]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005252:	4313      	orrs	r3, r2
 8005254:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005256:	f000 f821 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800525a:	4602      	mov	r2, r0
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	490a      	ldr	r1, [pc, #40]	; (8005290 <HAL_RCC_ClockConfig+0x1c8>)
 8005268:	5ccb      	ldrb	r3, [r1, r3]
 800526a:	fa22 f303 	lsr.w	r3, r2, r3
 800526e:	4a09      	ldr	r2, [pc, #36]	; (8005294 <HAL_RCC_ClockConfig+0x1cc>)
 8005270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_RCC_ClockConfig+0x1d0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fc fc52 	bl	8001b20 <HAL_InitTick>

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40022000 	.word	0x40022000
 800528c:	40021000 	.word	0x40021000
 8005290:	0800c2c0 	.word	0x0800c2c0
 8005294:	2000000c 	.word	0x2000000c
 8005298:	20000010 	.word	0x20000010

0800529c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800529c:	b490      	push	{r4, r7}
 800529e:	b08a      	sub	sp, #40	; 0x28
 80052a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80052a2:	4b29      	ldr	r3, [pc, #164]	; (8005348 <HAL_RCC_GetSysClockFreq+0xac>)
 80052a4:	1d3c      	adds	r4, r7, #4
 80052a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80052ac:	f240 2301 	movw	r3, #513	; 0x201
 80052b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	2300      	movs	r3, #0
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052c6:	4b21      	ldr	r3, [pc, #132]	; (800534c <HAL_RCC_GetSysClockFreq+0xb0>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d002      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0x40>
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d003      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0x46>
 80052da:	e02b      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052dc:	4b1c      	ldr	r3, [pc, #112]	; (8005350 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052de:	623b      	str	r3, [r7, #32]
      break;
 80052e0:	e02b      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	0c9b      	lsrs	r3, r3, #18
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	3328      	adds	r3, #40	; 0x28
 80052ec:	443b      	add	r3, r7
 80052ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80052f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d012      	beq.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052fe:	4b13      	ldr	r3, [pc, #76]	; (800534c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	0c5b      	lsrs	r3, r3, #17
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	3328      	adds	r3, #40	; 0x28
 800530a:	443b      	add	r3, r7
 800530c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005310:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4a0e      	ldr	r2, [pc, #56]	; (8005350 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005316:	fb03 f202 	mul.w	r2, r3, r2
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
 8005322:	e004      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4a0b      	ldr	r2, [pc, #44]	; (8005354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005328:	fb02 f303 	mul.w	r3, r2, r3
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	623b      	str	r3, [r7, #32]
      break;
 8005332:	e002      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005336:	623b      	str	r3, [r7, #32]
      break;
 8005338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800533a:	6a3b      	ldr	r3, [r7, #32]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3728      	adds	r7, #40	; 0x28
 8005340:	46bd      	mov	sp, r7
 8005342:	bc90      	pop	{r4, r7}
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	0800c268 	.word	0x0800c268
 800534c:	40021000 	.word	0x40021000
 8005350:	007a1200 	.word	0x007a1200
 8005354:	003d0900 	.word	0x003d0900

08005358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800535c:	4b02      	ldr	r3, [pc, #8]	; (8005368 <HAL_RCC_GetHCLKFreq+0x10>)
 800535e:	681b      	ldr	r3, [r3, #0]
}
 8005360:	4618      	mov	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr
 8005368:	2000000c 	.word	0x2000000c

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005370:	f7ff fff2 	bl	8005358 <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40021000 	.word	0x40021000
 8005390:	0800c2d0 	.word	0x0800c2d0

08005394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005398:	f7ff ffde 	bl	8005358 <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	0adb      	lsrs	r3, r3, #11
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4903      	ldr	r1, [pc, #12]	; (80053b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40021000 	.word	0x40021000
 80053b8:	0800c2d0 	.word	0x0800c2d0

080053bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80053c4:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <RCC_Delay+0x34>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a0a      	ldr	r2, [pc, #40]	; (80053f4 <RCC_Delay+0x38>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	0a5b      	lsrs	r3, r3, #9
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053d8:	bf00      	nop
  }
  while (Delay --);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1e5a      	subs	r2, r3, #1
 80053de:	60fa      	str	r2, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f9      	bne.n	80053d8 <RCC_Delay+0x1c>
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr
 80053f0:	2000000c 	.word	0x2000000c
 80053f4:	10624dd3 	.word	0x10624dd3

080053f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d07d      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005414:	2300      	movs	r3, #0
 8005416:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005418:	4b4f      	ldr	r3, [pc, #316]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10d      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005424:	4b4c      	ldr	r3, [pc, #304]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	4a4b      	ldr	r2, [pc, #300]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800542a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542e:	61d3      	str	r3, [r2, #28]
 8005430:	4b49      	ldr	r3, [pc, #292]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800543c:	2301      	movs	r3, #1
 800543e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005440:	4b46      	ldr	r3, [pc, #280]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d118      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800544c:	4b43      	ldr	r3, [pc, #268]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a42      	ldr	r2, [pc, #264]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005456:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005458:	f7fc fba4 	bl	8001ba4 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545e:	e008      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005460:	f7fc fba0 	bl	8001ba4 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b64      	cmp	r3, #100	; 0x64
 800546c:	d901      	bls.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e06d      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005472:	4b3a      	ldr	r3, [pc, #232]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800547e:	4b36      	ldr	r3, [pc, #216]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005486:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d02e      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	429a      	cmp	r2, r3
 800549a:	d027      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800549c:	4b2e      	ldr	r3, [pc, #184]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054a6:	4b2e      	ldr	r3, [pc, #184]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054ac:	4b2c      	ldr	r3, [pc, #176]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054b2:	4a29      	ldr	r2, [pc, #164]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d014      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c2:	f7fc fb6f 	bl	8001ba4 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c8:	e00a      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fc fb6b 	bl	8001ba4 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d901      	bls.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e036      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e0:	4b1d      	ldr	r3, [pc, #116]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ee      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ec:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4917      	ldr	r1, [pc, #92]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d105      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005504:	4b14      	ldr	r3, [pc, #80]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	4a13      	ldr	r2, [pc, #76]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800550e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800551c:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	490b      	ldr	r1, [pc, #44]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800552a:	4313      	orrs	r3, r2
 800552c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	4904      	ldr	r1, [pc, #16]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005548:	4313      	orrs	r3, r2
 800554a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
 800555c:	40007000 	.word	0x40007000
 8005560:	42420440 	.word	0x42420440

08005564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e076      	b.n	8005664 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	2b00      	cmp	r3, #0
 800557c:	d108      	bne.n	8005590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005586:	d009      	beq.n	800559c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	61da      	str	r2, [r3, #28]
 800558e:	e005      	b.n	800559c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc f890 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005620:	ea42 0103 	orr.w	r1, r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	0c1a      	lsrs	r2, r3, #16
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f002 0204 	and.w	r2, r2, #4
 8005642:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69da      	ldr	r2, [r3, #28]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005652:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005688:	d112      	bne.n	80056b0 <HAL_SPI_Receive+0x44>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10e      	bne.n	80056b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2204      	movs	r2, #4
 8005696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f8f1 	bl	800588e <HAL_SPI_TransmitReceive>
 80056ac:	4603      	mov	r3, r0
 80056ae:	e0ea      	b.n	8005886 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_SPI_Receive+0x52>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e0e3      	b.n	8005886 <HAL_SPI_Receive+0x21a>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056c6:	f7fc fa6d 	bl	8001ba4 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d002      	beq.n	80056de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
 80056da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056dc:	e0ca      	b.n	8005874 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_SPI_Receive+0x7e>
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ee:	e0c1      	b.n	8005874 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2204      	movs	r2, #4
 80056f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	88fa      	ldrh	r2, [r7, #6]
 8005708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005736:	d10f      	bne.n	8005758 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005746:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005756:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d007      	beq.n	8005776 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d162      	bne.n	8005844 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800577e:	e02e      	b.n	80057de <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b01      	cmp	r3, #1
 800578c:	d115      	bne.n	80057ba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f103 020c 	add.w	r2, r3, #12
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	7812      	ldrb	r2, [r2, #0]
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057b8:	e011      	b.n	80057de <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ba:	f7fc f9f3 	bl	8001ba4 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d803      	bhi.n	80057d2 <HAL_SPI_Receive+0x166>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d102      	bne.n	80057d8 <HAL_SPI_Receive+0x16c>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057dc:	e04a      	b.n	8005874 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1cb      	bne.n	8005780 <HAL_SPI_Receive+0x114>
 80057e8:	e031      	b.n	800584e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d113      	bne.n	8005820 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	b292      	uxth	r2, r2
 8005804:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	1c9a      	adds	r2, r3, #2
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800581e:	e011      	b.n	8005844 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005820:	f7fc f9c0 	bl	8001ba4 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d803      	bhi.n	8005838 <HAL_SPI_Receive+0x1cc>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d102      	bne.n	800583e <HAL_SPI_Receive+0x1d2>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005842:	e017      	b.n	8005874 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1cd      	bne.n	80057ea <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fb4a 	bl	8005eec <SPI_EndRxTransaction>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	75fb      	strb	r3, [r7, #23]
 8005870:	e000      	b.n	8005874 <HAL_SPI_Receive+0x208>
  }

error :
 8005872:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b08c      	sub	sp, #48	; 0x30
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800589c:	2301      	movs	r3, #1
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x26>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e18a      	b.n	8005bca <HAL_SPI_TransmitReceive+0x33c>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058bc:	f7fc f972 	bl	8001ba4 <HAL_GetTick>
 80058c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058d2:	887b      	ldrh	r3, [r7, #2]
 80058d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d00f      	beq.n	80058fe <HAL_SPI_TransmitReceive+0x70>
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e4:	d107      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d103      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x68>
 80058ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d003      	beq.n	80058fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
 80058f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058fc:	e15b      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_SPI_TransmitReceive+0x82>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_SPI_TransmitReceive+0x82>
 800590a:	887b      	ldrh	r3, [r7, #2]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d103      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005916:	e14e      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b04      	cmp	r3, #4
 8005922:	d003      	beq.n	800592c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2205      	movs	r2, #5
 8005928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	887a      	ldrh	r2, [r7, #2]
 800593c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	887a      	ldrh	r2, [r7, #2]
 8005942:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	887a      	ldrh	r2, [r7, #2]
 800594e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	887a      	ldrh	r2, [r7, #2]
 8005954:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d007      	beq.n	8005980 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800597e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005988:	d178      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x10a>
 8005992:	8b7b      	ldrh	r3, [r7, #26]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d166      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	881a      	ldrh	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059bc:	e053      	b.n	8005a66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d11b      	bne.n	8005a04 <HAL_SPI_TransmitReceive+0x176>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d016      	beq.n	8005a04 <HAL_SPI_TransmitReceive+0x176>
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d113      	bne.n	8005a04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	881a      	ldrh	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	1c9a      	adds	r2, r3, #2
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d119      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x1b8>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d014      	beq.n	8005a46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	b292      	uxth	r2, r2
 8005a28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a42:	2301      	movs	r3, #1
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a46:	f7fc f8ad 	bl	8001ba4 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d807      	bhi.n	8005a66 <HAL_SPI_TransmitReceive+0x1d8>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d003      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a64:	e0a7      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1a6      	bne.n	80059be <HAL_SPI_TransmitReceive+0x130>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1a1      	bne.n	80059be <HAL_SPI_TransmitReceive+0x130>
 8005a7a:	e07c      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_SPI_TransmitReceive+0x1fc>
 8005a84:	8b7b      	ldrh	r3, [r7, #26]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d16b      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	7812      	ldrb	r2, [r2, #0]
 8005a96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ab0:	e057      	b.n	8005b62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d11c      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x26c>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d017      	beq.n	8005afa <HAL_SPI_TransmitReceive+0x26c>
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d114      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d119      	bne.n	8005b3c <HAL_SPI_TransmitReceive+0x2ae>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d014      	beq.n	8005b3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b3c:	f7fc f832 	bl	8001ba4 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d803      	bhi.n	8005b54 <HAL_SPI_TransmitReceive+0x2c6>
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b52:	d102      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x2cc>
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b60:	e029      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1a2      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x224>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d19d      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fa08 	bl	8005f90 <SPI_EndRxTxTransaction>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d006      	beq.n	8005b94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b92:	e010      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10b      	bne.n	8005bb4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	e000      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005bb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3730      	adds	r7, #48	; 0x30
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	099b      	lsrs	r3, r3, #6
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10f      	bne.n	8005c18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	099b      	lsrs	r3, r3, #6
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d004      	beq.n	8005c18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	4798      	blx	r3
    return;
 8005c16:	e0be      	b.n	8005d96 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <HAL_SPI_IRQHandler+0x66>
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	09db      	lsrs	r3, r3, #7
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d004      	beq.n	8005c3a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4798      	blx	r3
    return;
 8005c38:	e0ad      	b.n	8005d96 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_SPI_IRQHandler+0x80>
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	099b      	lsrs	r3, r3, #6
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80a1 	beq.w	8005d96 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 809a 	beq.w	8005d96 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	099b      	lsrs	r3, r3, #6
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d023      	beq.n	8005cb6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d011      	beq.n	8005c9e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	f043 0204 	orr.w	r2, r3, #4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	e00b      	b.n	8005cb6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	693b      	ldr	r3, [r7, #16]
        return;
 8005cb4:	e06f      	b.n	8005d96 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d014      	beq.n	8005cec <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc6:	f043 0201 	orr.w	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d04f      	beq.n	8005d94 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d02:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <HAL_SPI_IRQHandler+0x14c>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d034      	beq.n	8005d8a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0203 	bic.w	r2, r2, #3
 8005d2e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d011      	beq.n	8005d5c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3c:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <HAL_SPI_IRQHandler+0x1c8>)
 8005d3e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fc fcef 	bl	8002728 <HAL_DMA_Abort_IT>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d016      	beq.n	8005d92 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d68:	4a0c      	ldr	r2, [pc, #48]	; (8005d9c <HAL_SPI_IRQHandler+0x1c8>)
 8005d6a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fc fcd9 	bl	8002728 <HAL_DMA_Abort_IT>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005d88:	e003      	b.n	8005d92 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f808 	bl	8005da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d90:	e000      	b.n	8005d94 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005d92:	bf00      	nop
    return;
 8005d94:	bf00      	nop
  }
}
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	08005db3 	.word	0x08005db3

08005da0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr

08005db2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff ffe7 	bl	8005da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	4613      	mov	r3, r2
 8005dea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dec:	f7fb feda 	bl	8001ba4 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	4413      	add	r3, r2
 8005dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dfc:	f7fb fed2 	bl	8001ba4 <HAL_GetTick>
 8005e00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e02:	4b39      	ldr	r3, [pc, #228]	; (8005ee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	015b      	lsls	r3, r3, #5
 8005e08:	0d1b      	lsrs	r3, r3, #20
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	fb02 f303 	mul.w	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e12:	e054      	b.n	8005ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d050      	beq.n	8005ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e1c:	f7fb fec2 	bl	8001ba4 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d902      	bls.n	8005e32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d13d      	bne.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e4a:	d111      	bne.n	8005e70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e54:	d004      	beq.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5e:	d107      	bne.n	8005e70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e78:	d10f      	bne.n	8005e9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e017      	b.n	8005ede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	bf0c      	ite	eq
 8005ece:	2301      	moveq	r3, #1
 8005ed0:	2300      	movne	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d19b      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	2000000c 	.word	0x2000000c

08005eec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f00:	d111      	bne.n	8005f26 <SPI_EndRxTransaction+0x3a>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0a:	d004      	beq.n	8005f16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f14:	d107      	bne.n	8005f26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f24:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f2e:	d117      	bne.n	8005f60 <SPI_EndRxTransaction+0x74>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f38:	d112      	bne.n	8005f60 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2200      	movs	r2, #0
 8005f42:	2101      	movs	r1, #1
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff ff49 	bl	8005ddc <SPI_WaitFlagStateUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01a      	beq.n	8005f86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	f043 0220 	orr.w	r2, r3, #32
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e013      	b.n	8005f88 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2200      	movs	r2, #0
 8005f68:	2180      	movs	r1, #128	; 0x80
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff ff36 	bl	8005ddc <SPI_WaitFlagStateUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e000      	b.n	8005f88 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff ff18 	bl	8005ddc <SPI_WaitFlagStateUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb6:	f043 0220 	orr.w	r2, r3, #32
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e000      	b.n	8005fc4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e03f      	b.n	800605e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fb fc00 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	; 0x24
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800600e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f905 	bl	8006220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b08a      	sub	sp, #40	; 0x28
 800606a:	af02      	add	r7, sp, #8
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b20      	cmp	r3, #32
 8006084:	d17c      	bne.n	8006180 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_UART_Transmit+0x2c>
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e075      	b.n	8006182 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_UART_Transmit+0x3e>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e06e      	b.n	8006182 <HAL_UART_Transmit+0x11c>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2221      	movs	r2, #33	; 0x21
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ba:	f7fb fd73 	bl	8001ba4 <HAL_GetTick>
 80060be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	88fa      	ldrh	r2, [r7, #6]
 80060ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d4:	d108      	bne.n	80060e8 <HAL_UART_Transmit+0x82>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d104      	bne.n	80060e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e003      	b.n	80060f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060f8:	e02a      	b.n	8006150 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2200      	movs	r2, #0
 8006102:	2180      	movs	r1, #128	; 0x80
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f840 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e036      	b.n	8006182 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006128:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	3302      	adds	r3, #2
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e007      	b.n	8006142 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	781a      	ldrb	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	3301      	adds	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1cf      	bne.n	80060fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2200      	movs	r2, #0
 8006162:	2140      	movs	r1, #64	; 0x40
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f810 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e006      	b.n	8006182 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	e000      	b.n	8006182 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006180:	2302      	movs	r3, #2
  }
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619a:	e02c      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d028      	beq.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0x30>
 80061aa:	f7fb fcfb 	bl	8001ba4 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d21d      	bcs.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695a      	ldr	r2, [r3, #20]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0201 	bic.w	r2, r2, #1
 80061d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e00f      	b.n	8006216 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4013      	ands	r3, r2
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	429a      	cmp	r2, r3
 8006212:	d0c3      	beq.n	800619c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800625a:	f023 030c 	bic.w	r3, r3, #12
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	68b9      	ldr	r1, [r7, #8]
 8006264:	430b      	orrs	r3, r1
 8006266:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2c      	ldr	r2, [pc, #176]	; (8006334 <UART_SetConfig+0x114>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d103      	bne.n	8006290 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006288:	f7ff f884 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	e002      	b.n	8006296 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006290:	f7ff f86c 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8006294:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009a      	lsls	r2, r3, #2
 80062a0:	441a      	add	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	4a22      	ldr	r2, [pc, #136]	; (8006338 <UART_SetConfig+0x118>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	0119      	lsls	r1, r3, #4
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009a      	lsls	r2, r3, #2
 80062c0:	441a      	add	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80062cc:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <UART_SetConfig+0x118>)
 80062ce:	fba3 0302 	umull	r0, r3, r3, r2
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	2064      	movs	r0, #100	; 0x64
 80062d6:	fb00 f303 	mul.w	r3, r0, r3
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	3332      	adds	r3, #50	; 0x32
 80062e0:	4a15      	ldr	r2, [pc, #84]	; (8006338 <UART_SetConfig+0x118>)
 80062e2:	fba2 2303 	umull	r2, r3, r2, r3
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ec:	4419      	add	r1, r3
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009a      	lsls	r2, r3, #2
 80062f8:	441a      	add	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	fbb2 f2f3 	udiv	r2, r2, r3
 8006304:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <UART_SetConfig+0x118>)
 8006306:	fba3 0302 	umull	r0, r3, r3, r2
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	2064      	movs	r0, #100	; 0x64
 800630e:	fb00 f303 	mul.w	r3, r0, r3
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	3332      	adds	r3, #50	; 0x32
 8006318:	4a07      	ldr	r2, [pc, #28]	; (8006338 <UART_SetConfig+0x118>)
 800631a:	fba2 2303 	umull	r2, r3, r2, r3
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	f003 020f 	and.w	r2, r3, #15
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	440a      	add	r2, r1
 800632a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40013800 	.word	0x40013800
 8006338:	51eb851f 	.word	0x51eb851f

0800633c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800633c:	b084      	sub	sp, #16
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	f107 0014 	add.w	r0, r7, #20
 800634a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	b004      	add	sp, #16
 800635a:	4770      	bx	lr

0800635c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800636c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006370:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	bc80      	pop	{r7}
 8006386:	4770      	bx	lr

08006388 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006390:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006394:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	43db      	mvns	r3, r3
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	4013      	ands	r3, r2
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr

080063d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063d4:	b084      	sub	sp, #16
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	f107 0014 	add.w	r0, r7, #20
 80063e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	b004      	add	sp, #16
 8006412:	4770      	bx	lr

08006414 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006414:	b480      	push	{r7}
 8006416:	b09b      	sub	sp, #108	; 0x6c
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	78db      	ldrb	r3, [r3, #3]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d81f      	bhi.n	8006486 <USB_ActivateEndpoint+0x72>
 8006446:	a201      	add	r2, pc, #4	; (adr r2, 800644c <USB_ActivateEndpoint+0x38>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	0800645d 	.word	0x0800645d
 8006450:	08006479 	.word	0x08006479
 8006454:	0800648f 	.word	0x0800648f
 8006458:	0800646b 	.word	0x0800646b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800645c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006464:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006468:	e012      	b.n	8006490 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800646a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800646e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006472:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006476:	e00b      	b.n	8006490 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006478:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800647c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006480:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006484:	e004      	b.n	8006490 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800648c:	e000      	b.n	8006490 <USB_ActivateEndpoint+0x7c>
      break;
 800648e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	441a      	add	r2, r3
 800649a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800649e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	441a      	add	r2, r3
 80064e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80064e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	7b1b      	ldrb	r3, [r3, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f040 8149 	bne.w	8006794 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8084 	beq.w	8006614 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006516:	b29b      	uxth	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	4413      	add	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	011a      	lsls	r2, r3, #4
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	88db      	ldrh	r3, [r3, #6]
 8006534:	085b      	lsrs	r3, r3, #1
 8006536:	b29b      	uxth	r3, r3
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	81fb      	strh	r3, [r7, #14]
 800654e:	89fb      	ldrh	r3, [r7, #14]
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01b      	beq.n	8006590 <USB_ActivateEndpoint+0x17c>
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	81bb      	strh	r3, [r7, #12]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	441a      	add	r2, r3
 800657a:	89bb      	ldrh	r3, [r7, #12]
 800657c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006588:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	78db      	ldrb	r3, [r3, #3]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d020      	beq.n	80065da <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ae:	813b      	strh	r3, [r7, #8]
 80065b0:	893b      	ldrh	r3, [r7, #8]
 80065b2:	f083 0320 	eor.w	r3, r3, #32
 80065b6:	813b      	strh	r3, [r7, #8]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	893b      	ldrh	r3, [r7, #8]
 80065c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	8013      	strh	r3, [r2, #0]
 80065d8:	e27f      	b.n	8006ada <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f0:	817b      	strh	r3, [r7, #10]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	441a      	add	r2, r3
 80065fc:	897b      	ldrh	r3, [r7, #10]
 80065fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660e:	b29b      	uxth	r3, r3
 8006610:	8013      	strh	r3, [r2, #0]
 8006612:	e262      	b.n	8006ada <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	4413      	add	r3, r2
 8006626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	011a      	lsls	r2, r3, #4
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	4413      	add	r3, r2
 8006632:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006636:	62bb      	str	r3, [r7, #40]	; 0x28
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	88db      	ldrh	r3, [r3, #6]
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006652:	b29b      	uxth	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	4413      	add	r3, r2
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	011a      	lsls	r2, r3, #4
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	4413      	add	r3, r2
 8006666:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800666a:	623b      	str	r3, [r7, #32]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d112      	bne.n	800669a <USB_ActivateEndpoint+0x286>
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800667e:	b29a      	uxth	r2, r3
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006692:	b29a      	uxth	r2, r3
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	e02f      	b.n	80066fa <USB_ActivateEndpoint+0x2e6>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b3e      	cmp	r3, #62	; 0x3e
 80066a0:	d813      	bhi.n	80066ca <USB_ActivateEndpoint+0x2b6>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	663b      	str	r3, [r7, #96]	; 0x60
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <USB_ActivateEndpoint+0x2a8>
 80066b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b8:	3301      	adds	r3, #1
 80066ba:	663b      	str	r3, [r7, #96]	; 0x60
 80066bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066be:	b29b      	uxth	r3, r3
 80066c0:	029b      	lsls	r3, r3, #10
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	e017      	b.n	80066fa <USB_ActivateEndpoint+0x2e6>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	663b      	str	r3, [r7, #96]	; 0x60
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d102      	bne.n	80066e4 <USB_ActivateEndpoint+0x2d0>
 80066de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066e0:	3b01      	subs	r3, #1
 80066e2:	663b      	str	r3, [r7, #96]	; 0x60
 80066e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	029b      	lsls	r3, r3, #10
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	83fb      	strh	r3, [r7, #30]
 8006708:	8bfb      	ldrh	r3, [r7, #30]
 800670a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01b      	beq.n	800674a <USB_ActivateEndpoint+0x336>
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006728:	83bb      	strh	r3, [r7, #28]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	8bbb      	ldrh	r3, [r7, #28]
 8006736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006746:	b29b      	uxth	r3, r3
 8006748:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006760:	837b      	strh	r3, [r7, #26]
 8006762:	8b7b      	ldrh	r3, [r7, #26]
 8006764:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006768:	837b      	strh	r3, [r7, #26]
 800676a:	8b7b      	ldrh	r3, [r7, #26]
 800676c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006770:	837b      	strh	r3, [r7, #26]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	441a      	add	r2, r3
 800677c:	8b7b      	ldrh	r3, [r7, #26]
 800677e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678e:	b29b      	uxth	r3, r3
 8006790:	8013      	strh	r3, [r2, #0]
 8006792:	e1a2      	b.n	8006ada <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	441a      	add	r2, r3
 80067b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80067bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80067c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067da:	b29b      	uxth	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e0:	4413      	add	r3, r2
 80067e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	011a      	lsls	r2, r3, #4
 80067ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f2:	657b      	str	r3, [r7, #84]	; 0x54
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	891b      	ldrh	r3, [r3, #8]
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	653b      	str	r3, [r7, #80]	; 0x50
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006814:	4413      	add	r3, r2
 8006816:	653b      	str	r3, [r7, #80]	; 0x50
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	011a      	lsls	r2, r3, #4
 800681e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006820:	4413      	add	r3, r2
 8006822:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	895b      	ldrh	r3, [r3, #10]
 800682c:	085b      	lsrs	r3, r3, #1
 800682e:	b29b      	uxth	r3, r3
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006836:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f040 8091 	bne.w	8006964 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006850:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01b      	beq.n	8006892 <USB_ActivateEndpoint+0x47e>
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006870:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800688a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	873b      	strh	r3, [r7, #56]	; 0x38
 80068a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01b      	beq.n	80068e2 <USB_ActivateEndpoint+0x4ce>
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	441a      	add	r2, r3
 80068cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068de:	b29b      	uxth	r3, r3
 80068e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006900:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006902:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006904:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006908:	86bb      	strh	r3, [r7, #52]	; 0x34
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800691e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006926:	b29b      	uxth	r3, r3
 8006928:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006940:	867b      	strh	r3, [r7, #50]	; 0x32
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	441a      	add	r2, r3
 800694c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800694e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800695a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695e:	b29b      	uxth	r3, r3
 8006960:	8013      	strh	r3, [r2, #0]
 8006962:	e0ba      	b.n	8006ada <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006974:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01d      	beq.n	80069bc <USB_ActivateEndpoint+0x5a8>
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006996:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80069cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01d      	beq.n	8006a14 <USB_ActivateEndpoint+0x600>
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	441a      	add	r2, r3
 80069fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	78db      	ldrb	r3, [r3, #3]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d024      	beq.n	8006a66 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a3a:	f083 0320 	eor.w	r3, r3, #32
 8006a3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	441a      	add	r2, r3
 8006a4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	8013      	strh	r3, [r2, #0]
 8006a64:	e01d      	b.n	8006aa2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	441a      	add	r2, r3
 8006a8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	441a      	add	r2, r3
 8006ac4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006ada:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	376c      	adds	r7, #108	; 0x6c
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b08d      	sub	sp, #52	; 0x34
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	7b1b      	ldrb	r3, [r3, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f040 808e 	bne.w	8006c18 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d044      	beq.n	8006b8e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	81bb      	strh	r3, [r7, #12]
 8006b12:	89bb      	ldrh	r3, [r7, #12]
 8006b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01b      	beq.n	8006b54 <USB_DeactivateEndpoint+0x6c>
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	817b      	strh	r3, [r7, #10]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	441a      	add	r2, r3
 8006b3e:	897b      	ldrh	r3, [r7, #10]
 8006b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6a:	813b      	strh	r3, [r7, #8]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	893b      	ldrh	r3, [r7, #8]
 8006b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	8013      	strh	r3, [r2, #0]
 8006b8c:	e192      	b.n	8006eb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	827b      	strh	r3, [r7, #18]
 8006b9c:	8a7b      	ldrh	r3, [r7, #18]
 8006b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01b      	beq.n	8006bde <USB_DeactivateEndpoint+0xf6>
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbc:	823b      	strh	r3, [r7, #16]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	8a3b      	ldrh	r3, [r7, #16]
 8006bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf4:	81fb      	strh	r3, [r7, #14]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	89fb      	ldrh	r3, [r7, #14]
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]
 8006c16:	e14d      	b.n	8006eb4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f040 80a5 	bne.w	8006d6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	843b      	strh	r3, [r7, #32]
 8006c30:	8c3b      	ldrh	r3, [r7, #32]
 8006c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01b      	beq.n	8006c72 <USB_DeactivateEndpoint+0x18a>
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c50:	83fb      	strh	r3, [r7, #30]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	441a      	add	r2, r3
 8006c5c:	8bfb      	ldrh	r3, [r7, #30]
 8006c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	83bb      	strh	r3, [r7, #28]
 8006c80:	8bbb      	ldrh	r3, [r7, #28]
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01b      	beq.n	8006cc2 <USB_DeactivateEndpoint+0x1da>
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca0:	837b      	strh	r3, [r7, #26]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	441a      	add	r2, r3
 8006cac:	8b7b      	ldrh	r3, [r7, #26]
 8006cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd8:	833b      	strh	r3, [r7, #24]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	441a      	add	r2, r3
 8006ce4:	8b3b      	ldrh	r3, [r7, #24]
 8006ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d10:	82fb      	strh	r3, [r7, #22]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	441a      	add	r2, r3
 8006d1c:	8afb      	ldrh	r3, [r7, #22]
 8006d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d48:	82bb      	strh	r3, [r7, #20]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	441a      	add	r2, r3
 8006d54:	8abb      	ldrh	r3, [r7, #20]
 8006d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	8013      	strh	r3, [r2, #0]
 8006d6a:	e0a3      	b.n	8006eb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01b      	beq.n	8006dbc <USB_DeactivateEndpoint+0x2d4>
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	441a      	add	r2, r3
 8006da6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006dca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d01b      	beq.n	8006e0c <USB_DeactivateEndpoint+0x324>
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	853b      	strh	r3, [r7, #40]	; 0x28
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	441a      	add	r2, r3
 8006df6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	441a      	add	r2, r3
 8006e2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e92:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3734      	adds	r7, #52	; 0x34
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr

08006ec0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b0cc      	sub	sp, #304	; 0x130
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ece:	6018      	str	r0, [r3, #0]
 8006ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	f041 817d 	bne.w	80081e6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d908      	bls.n	8006f1a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006f18:	e007      	b.n	8006f2a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	7b1b      	ldrb	r3, [r3, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d152      	bne.n	8006fe0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6959      	ldr	r1, [r3, #20]
 8006f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	88da      	ldrh	r2, [r3, #6]
 8006f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f5c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f60:	6800      	ldr	r0, [r0, #0]
 8006f62:	f001 ff23 	bl	8008dac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f72:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f98:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006f9c:	6812      	ldr	r2, [r2, #0]
 8006f9e:	440a      	add	r2, r1
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	011a      	lsls	r2, r3, #4
 8006fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	f001 b8b5 	b.w	800814a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	78db      	ldrb	r3, [r3, #3]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	f040 84c6 	bne.w	800797e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6a1a      	ldr	r2, [r3, #32]
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	429a      	cmp	r2, r3
 800700c:	f240 8443 	bls.w	8007896 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	441a      	add	r2, r3
 8007054:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800705c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007060:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007068:	b29b      	uxth	r3, r3
 800706a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800706c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6a1a      	ldr	r2, [r3, #32]
 8007078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707c:	1ad2      	subs	r2, r2, r3
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 823e 	beq.w	800752e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80070ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070be:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070c2:	6812      	ldr	r2, [r2, #0]
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f040 809a 	bne.w	800720c <USB_EPStartXfer+0x34c>
 80070d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070e4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	4619      	mov	r1, r3
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007106:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800710a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800710e:	6812      	ldr	r2, [r2, #0]
 8007110:	440a      	add	r2, r1
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	011a      	lsls	r2, r3, #4
 8007122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4413      	add	r3, r2
 800712e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007136:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d122      	bne.n	800718a <USB_EPStartXfer+0x2ca>
 8007144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007148:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007156:	b29a      	uxth	r2, r3
 8007158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007168:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800717a:	b29a      	uxth	r2, r3
 800717c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007180:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	e079      	b.n	800727e <USB_EPStartXfer+0x3be>
 800718a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718e:	2b3e      	cmp	r3, #62	; 0x3e
 8007190:	d81b      	bhi.n	80071ca <USB_EPStartXfer+0x30a>
 8007192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800719c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <USB_EPStartXfer+0x2f2>
 80071a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071ac:	3301      	adds	r3, #1
 80071ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	029b      	lsls	r3, r3, #10
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	801a      	strh	r2, [r3, #0]
 80071c8:	e059      	b.n	800727e <USB_EPStartXfer+0x3be>
 80071ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d8:	f003 031f 	and.w	r3, r3, #31
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <USB_EPStartXfer+0x32a>
 80071e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071e4:	3b01      	subs	r3, #1
 80071e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	029b      	lsls	r3, r3, #10
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e038      	b.n	800727e <USB_EPStartXfer+0x3be>
 800720c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d130      	bne.n	800727e <USB_EPStartXfer+0x3be>
 800721c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722a:	b29b      	uxth	r3, r3
 800722c:	4619      	mov	r1, r3
 800722e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007232:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007236:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800723a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	440a      	add	r2, r1
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	011a      	lsls	r2, r3, #4
 8007252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007256:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4413      	add	r3, r2
 800725e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007270:	b29a      	uxth	r2, r3
 8007272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800727e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	895b      	ldrh	r3, [r3, #10]
 800728a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6959      	ldr	r1, [r3, #20]
 800729a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f001 fd7d 	bl	8008dac <USB_WritePMA>
            ep->xfer_buff += len;
 80072b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695a      	ldr	r2, [r3, #20]
 80072be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c2:	441a      	add	r2, r3
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6a1a      	ldr	r2, [r3, #32]
 80072dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d90f      	bls.n	800730c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80072ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6a1a      	ldr	r2, [r3, #32]
 80072f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fc:	1ad2      	subs	r2, r2, r3
 80072fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	621a      	str	r2, [r3, #32]
 800730a:	e00e      	b.n	800732a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800730c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800731c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2200      	movs	r2, #0
 8007328:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800732a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f040 809a 	bne.w	8007470 <USB_EPStartXfer+0x5b0>
 800733c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007340:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007344:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007348:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800734c:	6812      	ldr	r2, [r2, #0]
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007354:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735e:	b29b      	uxth	r3, r3
 8007360:	4619      	mov	r1, r3
 8007362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007366:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800736a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800736e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007372:	6812      	ldr	r2, [r2, #0]
 8007374:	440a      	add	r2, r1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	011a      	lsls	r2, r3, #4
 8007386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4413      	add	r3, r2
 8007392:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d122      	bne.n	80073ee <USB_EPStartXfer+0x52e>
 80073a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	801a      	strh	r2, [r3, #0]
 80073c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073de:	b29a      	uxth	r2, r3
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	801a      	strh	r2, [r3, #0]
 80073ec:	e083      	b.n	80074f6 <USB_EPStartXfer+0x636>
 80073ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f2:	2b3e      	cmp	r3, #62	; 0x3e
 80073f4:	d81b      	bhi.n	800742e <USB_EPStartXfer+0x56e>
 80073f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <USB_EPStartXfer+0x556>
 800740c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007410:	3301      	adds	r3, #1
 8007412:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007416:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800741a:	b29b      	uxth	r3, r3
 800741c:	029b      	lsls	r3, r3, #10
 800741e:	b29a      	uxth	r2, r3
 8007420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007424:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	e063      	b.n	80074f6 <USB_EPStartXfer+0x636>
 800742e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743c:	f003 031f 	and.w	r3, r3, #31
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <USB_EPStartXfer+0x58e>
 8007444:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007448:	3b01      	subs	r3, #1
 800744a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800744e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007452:	b29b      	uxth	r3, r3
 8007454:	029b      	lsls	r3, r3, #10
 8007456:	b29b      	uxth	r3, r3
 8007458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007460:	b29a      	uxth	r2, r3
 8007462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007466:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e042      	b.n	80074f6 <USB_EPStartXfer+0x636>
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	785b      	ldrb	r3, [r3, #1]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d13a      	bne.n	80074f6 <USB_EPStartXfer+0x636>
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007488:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800748c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007490:	6812      	ldr	r2, [r2, #0]
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	4619      	mov	r1, r3
 80074a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80074ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074b2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80074b6:	6812      	ldr	r2, [r2, #0]
 80074b8:	440a      	add	r2, r1
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	011a      	lsls	r2, r3, #4
 80074ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80074da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	891b      	ldrh	r3, [r3, #8]
 8007502:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6959      	ldr	r1, [r3, #20]
 8007512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007516:	b29b      	uxth	r3, r3
 8007518:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800751c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007520:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007524:	6800      	ldr	r0, [r0, #0]
 8007526:	f001 fc41 	bl	8008dac <USB_WritePMA>
 800752a:	f000 be0e 	b.w	800814a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d16d      	bne.n	800761a <USB_EPStartXfer+0x75a>
 800753e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007542:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	64bb      	str	r3, [r7, #72]	; 0x48
 800754a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007558:	b29b      	uxth	r3, r3
 800755a:	461a      	mov	r2, r3
 800755c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800755e:	4413      	add	r3, r2
 8007560:	64bb      	str	r3, [r7, #72]	; 0x48
 8007562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	011a      	lsls	r2, r3, #4
 8007570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007572:	4413      	add	r3, r2
 8007574:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007578:	647b      	str	r3, [r7, #68]	; 0x44
 800757a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d112      	bne.n	80075a8 <USB_EPStartXfer+0x6e8>
 8007582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800758c:	b29a      	uxth	r2, r3
 800758e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007590:	801a      	strh	r2, [r3, #0]
 8007592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a4:	801a      	strh	r2, [r3, #0]
 80075a6:	e063      	b.n	8007670 <USB_EPStartXfer+0x7b0>
 80075a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ac:	2b3e      	cmp	r3, #62	; 0x3e
 80075ae:	d817      	bhi.n	80075e0 <USB_EPStartXfer+0x720>
 80075b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b4:	085b      	lsrs	r3, r3, #1
 80075b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <USB_EPStartXfer+0x710>
 80075c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075ca:	3301      	adds	r3, #1
 80075cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	029b      	lsls	r3, r3, #10
 80075d8:	b29a      	uxth	r2, r3
 80075da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	e047      	b.n	8007670 <USB_EPStartXfer+0x7b0>
 80075e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <USB_EPStartXfer+0x740>
 80075f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075fa:	3b01      	subs	r3, #1
 80075fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007600:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007604:	b29b      	uxth	r3, r3
 8007606:	029b      	lsls	r3, r3, #10
 8007608:	b29b      	uxth	r3, r3
 800760a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800760e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007612:	b29a      	uxth	r2, r3
 8007614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007616:	801a      	strh	r2, [r3, #0]
 8007618:	e02a      	b.n	8007670 <USB_EPStartXfer+0x7b0>
 800761a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	785b      	ldrb	r3, [r3, #1]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d122      	bne.n	8007670 <USB_EPStartXfer+0x7b0>
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	653b      	str	r3, [r7, #80]	; 0x50
 8007636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007644:	b29b      	uxth	r3, r3
 8007646:	461a      	mov	r2, r3
 8007648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800764a:	4413      	add	r3, r2
 800764c:	653b      	str	r3, [r7, #80]	; 0x50
 800764e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	011a      	lsls	r2, r3, #4
 800765c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800765e:	4413      	add	r3, r2
 8007660:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766a:	b29a      	uxth	r2, r3
 800766c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	891b      	ldrh	r3, [r3, #8]
 800767c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6959      	ldr	r1, [r3, #20]
 800768c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007690:	b29b      	uxth	r3, r3
 8007692:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007696:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800769a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800769e:	6800      	ldr	r0, [r0, #0]
 80076a0:	f001 fb84 	bl	8008dac <USB_WritePMA>
            ep->xfer_buff += len;
 80076a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695a      	ldr	r2, [r3, #20]
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b4:	441a      	add	r2, r3
 80076b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6a1a      	ldr	r2, [r3, #32]
 80076ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d90f      	bls.n	80076fe <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80076de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6a1a      	ldr	r2, [r3, #32]
 80076ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	621a      	str	r2, [r3, #32]
 80076fc:	e00e      	b.n	800771c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80076fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800770e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2200      	movs	r2, #0
 800771a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800771c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007720:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	643b      	str	r3, [r7, #64]	; 0x40
 8007728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d16d      	bne.n	8007814 <USB_EPStartXfer+0x954>
 8007738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	63bb      	str	r3, [r7, #56]	; 0x38
 8007744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007752:	b29b      	uxth	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	4413      	add	r3, r2
 800775a:	63bb      	str	r3, [r7, #56]	; 0x38
 800775c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	011a      	lsls	r2, r3, #4
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	4413      	add	r3, r2
 800776e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
 8007774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007778:	2b00      	cmp	r3, #0
 800777a:	d112      	bne.n	80077a2 <USB_EPStartXfer+0x8e2>
 800777c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	b29b      	uxth	r3, r3
 8007782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007786:	b29a      	uxth	r2, r3
 8007788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778a:	801a      	strh	r2, [r3, #0]
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29b      	uxth	r3, r3
 8007792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779a:	b29a      	uxth	r2, r3
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779e:	801a      	strh	r2, [r3, #0]
 80077a0:	e05d      	b.n	800785e <USB_EPStartXfer+0x99e>
 80077a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a6:	2b3e      	cmp	r3, #62	; 0x3e
 80077a8:	d817      	bhi.n	80077da <USB_EPStartXfer+0x91a>
 80077aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <USB_EPStartXfer+0x90a>
 80077c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077c4:	3301      	adds	r3, #1
 80077c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	029b      	lsls	r3, r3, #10
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	801a      	strh	r2, [r3, #0]
 80077d8:	e041      	b.n	800785e <USB_EPStartXfer+0x99e>
 80077da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <USB_EPStartXfer+0x93a>
 80077f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077f4:	3b01      	subs	r3, #1
 80077f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077fe:	b29b      	uxth	r3, r3
 8007800:	029b      	lsls	r3, r3, #10
 8007802:	b29b      	uxth	r3, r3
 8007804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800780c:	b29a      	uxth	r2, r3
 800780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007810:	801a      	strh	r2, [r3, #0]
 8007812:	e024      	b.n	800785e <USB_EPStartXfer+0x99e>
 8007814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	785b      	ldrb	r3, [r3, #1]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d11c      	bne.n	800785e <USB_EPStartXfer+0x99e>
 8007824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007832:	b29b      	uxth	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007838:	4413      	add	r3, r2
 800783a:	643b      	str	r3, [r7, #64]	; 0x40
 800783c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	011a      	lsls	r2, r3, #4
 800784a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784c:	4413      	add	r3, r2
 800784e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007858:	b29a      	uxth	r2, r3
 800785a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800785c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800785e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	895b      	ldrh	r3, [r3, #10]
 800786a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800786e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6959      	ldr	r1, [r3, #20]
 800787a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787e:	b29b      	uxth	r3, r3
 8007880:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007884:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007888:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800788c:	6800      	ldr	r0, [r0, #0]
 800788e:	f001 fa8d 	bl	8008dac <USB_WritePMA>
 8007892:	f000 bc5a 	b.w	800814a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80078a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80078c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80078d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	441a      	add	r2, r3
 80078ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80078ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fe:	b29b      	uxth	r3, r3
 8007900:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800790e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791c:	b29b      	uxth	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007922:	4413      	add	r3, r2
 8007924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	011a      	lsls	r2, r3, #4
 8007934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007936:	4413      	add	r3, r2
 8007938:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800793c:	65bb      	str	r3, [r7, #88]	; 0x58
 800793e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007942:	b29a      	uxth	r2, r3
 8007944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007946:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	891b      	ldrh	r3, [r3, #8]
 8007954:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6959      	ldr	r1, [r3, #20]
 8007964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007968:	b29b      	uxth	r3, r3
 800796a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800796e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007972:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007976:	6800      	ldr	r0, [r0, #0]
 8007978:	f001 fa18 	bl	8008dac <USB_WritePMA>
 800797c:	e3e5      	b.n	800814a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800797e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80079a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	441a      	add	r2, r3
 80079c2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80079c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80079d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80079da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6a1a      	ldr	r2, [r3, #32]
 80079e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ea:	1ad2      	subs	r2, r2, r3
 80079ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 81bc 	beq.w	8007d98 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	785b      	ldrb	r3, [r3, #1]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d16d      	bne.n	8007b1a <USB_EPStartXfer+0xc5a>
 8007a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a5e:	4413      	add	r3, r2
 8007a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	011a      	lsls	r2, r3, #4
 8007a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a72:	4413      	add	r3, r2
 8007a74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a78:	677b      	str	r3, [r7, #116]	; 0x74
 8007a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d112      	bne.n	8007aa8 <USB_EPStartXfer+0xbe8>
 8007a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a90:	801a      	strh	r2, [r3, #0]
 8007a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa4:	801a      	strh	r2, [r3, #0]
 8007aa6:	e060      	b.n	8007b6a <USB_EPStartXfer+0xcaa>
 8007aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aac:	2b3e      	cmp	r3, #62	; 0x3e
 8007aae:	d817      	bhi.n	8007ae0 <USB_EPStartXfer+0xc20>
 8007ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab4:	085b      	lsrs	r3, r3, #1
 8007ab6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d004      	beq.n	8007ad0 <USB_EPStartXfer+0xc10>
 8007ac6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007aca:	3301      	adds	r3, #1
 8007acc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ad0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	029b      	lsls	r3, r3, #10
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	e044      	b.n	8007b6a <USB_EPStartXfer+0xcaa>
 8007ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae4:	095b      	lsrs	r3, r3, #5
 8007ae6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aee:	f003 031f 	and.w	r3, r3, #31
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <USB_EPStartXfer+0xc40>
 8007af6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007afa:	3b01      	subs	r3, #1
 8007afc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	029b      	lsls	r3, r3, #10
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b16:	801a      	strh	r2, [r3, #0]
 8007b18:	e027      	b.n	8007b6a <USB_EPStartXfer+0xcaa>
 8007b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d11f      	bne.n	8007b6a <USB_EPStartXfer+0xcaa>
 8007b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b40:	4413      	add	r3, r2
 8007b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	011a      	lsls	r2, r3, #4
 8007b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b58:	4413      	add	r3, r2
 8007b5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	895b      	ldrh	r3, [r3, #10]
 8007b76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6959      	ldr	r1, [r3, #20]
 8007b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b98:	6800      	ldr	r0, [r0, #0]
 8007b9a:	f001 f907 	bl	8008dac <USB_WritePMA>
          ep->xfer_buff += len;
 8007b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695a      	ldr	r2, [r3, #20]
 8007baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bae:	441a      	add	r2, r3
 8007bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6a1a      	ldr	r2, [r3, #32]
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d90f      	bls.n	8007bf8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6a1a      	ldr	r2, [r3, #32]
 8007be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be8:	1ad2      	subs	r2, r2, r3
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	621a      	str	r2, [r3, #32]
 8007bf6:	e00e      	b.n	8007c16 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2200      	movs	r2, #0
 8007c14:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8295 	beq.w	800814a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	785b      	ldrb	r3, [r3, #1]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d16d      	bne.n	8007d0c <USB_EPStartXfer+0xe4c>
 8007c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c50:	4413      	add	r3, r2
 8007c52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	011a      	lsls	r2, r3, #4
 8007c62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c64:	4413      	add	r3, r2
 8007c66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c6a:	667b      	str	r3, [r7, #100]	; 0x64
 8007c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d112      	bne.n	8007c9a <USB_EPStartXfer+0xdda>
 8007c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c96:	801a      	strh	r2, [r3, #0]
 8007c98:	e063      	b.n	8007d62 <USB_EPStartXfer+0xea2>
 8007c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8007ca0:	d817      	bhi.n	8007cd2 <USB_EPStartXfer+0xe12>
 8007ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca6:	085b      	lsrs	r3, r3, #1
 8007ca8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d004      	beq.n	8007cc2 <USB_EPStartXfer+0xe02>
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	029b      	lsls	r3, r3, #10
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cce:	801a      	strh	r2, [r3, #0]
 8007cd0:	e047      	b.n	8007d62 <USB_EPStartXfer+0xea2>
 8007cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ce0:	f003 031f 	and.w	r3, r3, #31
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d104      	bne.n	8007cf2 <USB_EPStartXfer+0xe32>
 8007ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cec:	3b01      	subs	r3, #1
 8007cee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	029b      	lsls	r3, r3, #10
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d08:	801a      	strh	r2, [r3, #0]
 8007d0a:	e02a      	b.n	8007d62 <USB_EPStartXfer+0xea2>
 8007d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d122      	bne.n	8007d62 <USB_EPStartXfer+0xea2>
 8007d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	673b      	str	r3, [r7, #112]	; 0x70
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d3c:	4413      	add	r3, r2
 8007d3e:	673b      	str	r3, [r7, #112]	; 0x70
 8007d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	011a      	lsls	r2, r3, #4
 8007d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d50:	4413      	add	r3, r2
 8007d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	891b      	ldrh	r3, [r3, #8]
 8007d6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6959      	ldr	r1, [r3, #20]
 8007d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d90:	6800      	ldr	r0, [r0, #0]
 8007d92:	f001 f80b 	bl	8008dac <USB_WritePMA>
 8007d96:	e1d8      	b.n	800814a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	785b      	ldrb	r3, [r3, #1]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d178      	bne.n	8007e9a <USB_EPStartXfer+0xfda>
 8007da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dcc:	4413      	add	r3, r2
 8007dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	011a      	lsls	r2, r3, #4
 8007de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007de4:	4413      	add	r3, r2
 8007de6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d116      	bne.n	8007e24 <USB_EPStartXfer+0xf64>
 8007df6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e08:	801a      	strh	r2, [r3, #0]
 8007e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	e06b      	b.n	8007efc <USB_EPStartXfer+0x103c>
 8007e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e28:	2b3e      	cmp	r3, #62	; 0x3e
 8007e2a:	d818      	bhi.n	8007e5e <USB_EPStartXfer+0xf9e>
 8007e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <USB_EPStartXfer+0xf8c>
 8007e42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e46:	3301      	adds	r3, #1
 8007e48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	029b      	lsls	r3, r3, #10
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e5a:	801a      	strh	r2, [r3, #0]
 8007e5c:	e04e      	b.n	8007efc <USB_EPStartXfer+0x103c>
 8007e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6c:	f003 031f 	and.w	r3, r3, #31
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <USB_EPStartXfer+0xfbe>
 8007e74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	029b      	lsls	r3, r3, #10
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e96:	801a      	strh	r2, [r3, #0]
 8007e98:	e030      	b.n	8007efc <USB_EPStartXfer+0x103c>
 8007e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d128      	bne.n	8007efc <USB_EPStartXfer+0x103c>
 8007eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ece:	4413      	add	r3, r2
 8007ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	011a      	lsls	r2, r3, #4
 8007ee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007efa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	891b      	ldrh	r3, [r3, #8]
 8007f08:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6959      	ldr	r1, [r3, #20]
 8007f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f22:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f26:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	f000 ff3e 	bl	8008dac <USB_WritePMA>
          ep->xfer_buff += len;
 8007f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695a      	ldr	r2, [r3, #20]
 8007f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f40:	441a      	add	r2, r3
 8007f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6a1a      	ldr	r2, [r3, #32]
 8007f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d90f      	bls.n	8007f8a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6a1a      	ldr	r2, [r3, #32]
 8007f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f7a:	1ad2      	subs	r2, r2, r3
 8007f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	621a      	str	r2, [r3, #32]
 8007f88:	e00e      	b.n	8007fa8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 80cc 	beq.w	800814a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d178      	bne.n	80080c2 <USB_EPStartXfer+0x1202>
 8007fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	011a      	lsls	r2, r3, #4
 8008008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800800c:	4413      	add	r3, r2
 800800e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d116      	bne.n	800804c <USB_EPStartXfer+0x118c>
 800801e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800802a:	b29a      	uxth	r2, r3
 800802c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008042:	b29a      	uxth	r2, r3
 8008044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008048:	801a      	strh	r2, [r3, #0]
 800804a:	e064      	b.n	8008116 <USB_EPStartXfer+0x1256>
 800804c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008050:	2b3e      	cmp	r3, #62	; 0x3e
 8008052:	d818      	bhi.n	8008086 <USB_EPStartXfer+0x11c6>
 8008054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008058:	085b      	lsrs	r3, r3, #1
 800805a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800805e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d004      	beq.n	8008074 <USB_EPStartXfer+0x11b4>
 800806a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800806e:	3301      	adds	r3, #1
 8008070:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008078:	b29b      	uxth	r3, r3
 800807a:	029b      	lsls	r3, r3, #10
 800807c:	b29a      	uxth	r2, r3
 800807e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e047      	b.n	8008116 <USB_EPStartXfer+0x1256>
 8008086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800808a:	095b      	lsrs	r3, r3, #5
 800808c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008094:	f003 031f 	and.w	r3, r3, #31
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <USB_EPStartXfer+0x11e6>
 800809c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080a0:	3b01      	subs	r3, #1
 80080a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	029b      	lsls	r3, r3, #10
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080be:	801a      	strh	r2, [r3, #0]
 80080c0:	e029      	b.n	8008116 <USB_EPStartXfer+0x1256>
 80080c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	785b      	ldrb	r3, [r3, #1]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d121      	bne.n	8008116 <USB_EPStartXfer+0x1256>
 80080d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080e8:	4413      	add	r3, r2
 80080ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	011a      	lsls	r2, r3, #4
 80080fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008100:	4413      	add	r3, r2
 8008102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800810a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810e:	b29a      	uxth	r2, r3
 8008110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008114:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	895b      	ldrh	r3, [r3, #10]
 8008122:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6959      	ldr	r1, [r3, #20]
 8008132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008136:	b29b      	uxth	r3, r3
 8008138:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800813c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008140:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008144:	6800      	ldr	r0, [r0, #0]
 8008146:	f000 fe31 	bl	8008dac <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800814a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	b29b      	uxth	r3, r3
 8008168:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800816c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008178:	8013      	strh	r3, [r2, #0]
 800817a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008182:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008186:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800818a:	8812      	ldrh	r2, [r2, #0]
 800818c:	f082 0210 	eor.w	r2, r2, #16
 8008190:	801a      	strh	r2, [r3, #0]
 8008192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008196:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800819a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800819e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80081a2:	8812      	ldrh	r2, [r2, #0]
 80081a4:	f082 0220 	eor.w	r2, r2, #32
 80081a8:	801a      	strh	r2, [r3, #0]
 80081aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	441a      	add	r2, r3
 80081c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80081cc:	881b      	ldrh	r3, [r3, #0]
 80081ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081de:	b29b      	uxth	r3, r3
 80081e0:	8013      	strh	r3, [r2, #0]
 80081e2:	f000 bc9f 	b.w	8008b24 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	7b1b      	ldrb	r3, [r3, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f040 80ae 	bne.w	8008354 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699a      	ldr	r2, [r3, #24]
 8008204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	429a      	cmp	r2, r3
 8008212:	d917      	bls.n	8008244 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	699a      	ldr	r2, [r3, #24]
 8008230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008234:	1ad2      	subs	r2, r2, r3
 8008236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	619a      	str	r2, [r3, #24]
 8008242:	e00e      	b.n	8008262 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2200      	movs	r2, #0
 8008260:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008266:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008274:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800827e:	b29b      	uxth	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008286:	4413      	add	r3, r2
 8008288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800828c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	011a      	lsls	r2, r3, #4
 800829a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800829e:	4413      	add	r3, r2
 80082a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d116      	bne.n	80082de <USB_EPStartXfer+0x141e>
 80082b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082bc:	b29a      	uxth	r2, r3
 80082be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082c2:	801a      	strh	r2, [r3, #0]
 80082c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082da:	801a      	strh	r2, [r3, #0]
 80082dc:	e3e8      	b.n	8008ab0 <USB_EPStartXfer+0x1bf0>
 80082de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082e2:	2b3e      	cmp	r3, #62	; 0x3e
 80082e4:	d818      	bhi.n	8008318 <USB_EPStartXfer+0x1458>
 80082e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ea:	085b      	lsrs	r3, r3, #1
 80082ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d004      	beq.n	8008306 <USB_EPStartXfer+0x1446>
 80082fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008300:	3301      	adds	r3, #1
 8008302:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008306:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800830a:	b29b      	uxth	r3, r3
 800830c:	029b      	lsls	r3, r3, #10
 800830e:	b29a      	uxth	r2, r3
 8008310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008314:	801a      	strh	r2, [r3, #0]
 8008316:	e3cb      	b.n	8008ab0 <USB_EPStartXfer+0x1bf0>
 8008318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800831c:	095b      	lsrs	r3, r3, #5
 800831e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008326:	f003 031f 	and.w	r3, r3, #31
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <USB_EPStartXfer+0x1478>
 800832e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008332:	3b01      	subs	r3, #1
 8008334:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008338:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800833c:	b29b      	uxth	r3, r3
 800833e:	029b      	lsls	r3, r3, #10
 8008340:	b29b      	uxth	r3, r3
 8008342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800834a:	b29a      	uxth	r2, r3
 800834c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008350:	801a      	strh	r2, [r3, #0]
 8008352:	e3ad      	b.n	8008ab0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	78db      	ldrb	r3, [r3, #3]
 8008360:	2b02      	cmp	r3, #2
 8008362:	f040 8200 	bne.w	8008766 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800836a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	785b      	ldrb	r3, [r3, #1]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f040 8091 	bne.w	800849a <USB_EPStartXfer+0x15da>
 8008378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008394:	b29b      	uxth	r3, r3
 8008396:	461a      	mov	r2, r3
 8008398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800839c:	4413      	add	r3, r2
 800839e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	011a      	lsls	r2, r3, #4
 80083b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083b4:	4413      	add	r3, r2
 80083b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d116      	bne.n	80083fc <USB_EPStartXfer+0x153c>
 80083ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083da:	b29a      	uxth	r2, r3
 80083dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083e0:	801a      	strh	r2, [r3, #0]
 80083e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083f8:	801a      	strh	r2, [r3, #0]
 80083fa:	e083      	b.n	8008504 <USB_EPStartXfer+0x1644>
 80083fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	2b3e      	cmp	r3, #62	; 0x3e
 800840a:	d820      	bhi.n	800844e <USB_EPStartXfer+0x158e>
 800840c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	085b      	lsrs	r3, r3, #1
 800841a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800841e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <USB_EPStartXfer+0x157c>
 8008432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008436:	3301      	adds	r3, #1
 8008438:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800843c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008440:	b29b      	uxth	r3, r3
 8008442:	029b      	lsls	r3, r3, #10
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	e05a      	b.n	8008504 <USB_EPStartXfer+0x1644>
 800844e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008464:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f003 031f 	and.w	r3, r3, #31
 8008470:	2b00      	cmp	r3, #0
 8008472:	d104      	bne.n	800847e <USB_EPStartXfer+0x15be>
 8008474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008478:	3b01      	subs	r3, #1
 800847a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800847e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008482:	b29b      	uxth	r3, r3
 8008484:	029b      	lsls	r3, r3, #10
 8008486:	b29b      	uxth	r3, r3
 8008488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800848c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008490:	b29a      	uxth	r2, r3
 8008492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008496:	801a      	strh	r2, [r3, #0]
 8008498:	e034      	b.n	8008504 <USB_EPStartXfer+0x1644>
 800849a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d12c      	bne.n	8008504 <USB_EPStartXfer+0x1644>
 80084aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	461a      	mov	r2, r3
 80084ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084ce:	4413      	add	r3, r2
 80084d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	011a      	lsls	r2, r3, #4
 80084e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084e6:	4413      	add	r3, r2
 80084e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008502:	801a      	strh	r2, [r3, #0]
 8008504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	2b00      	cmp	r3, #0
 8008520:	f040 8091 	bne.w	8008646 <USB_EPStartXfer+0x1786>
 8008524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008536:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008540:	b29b      	uxth	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008548:	4413      	add	r3, r2
 800854a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800854e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	011a      	lsls	r2, r3, #4
 800855c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008560:	4413      	add	r3, r2
 8008562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800856a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800856e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d116      	bne.n	80085a8 <USB_EPStartXfer+0x16e8>
 800857a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	b29b      	uxth	r3, r3
 8008582:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008586:	b29a      	uxth	r2, r3
 8008588:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800858c:	801a      	strh	r2, [r3, #0]
 800858e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	b29b      	uxth	r3, r3
 8008596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800859e:	b29a      	uxth	r2, r3
 80085a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085a4:	801a      	strh	r2, [r3, #0]
 80085a6:	e07c      	b.n	80086a2 <USB_EPStartXfer+0x17e2>
 80085a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b3e      	cmp	r3, #62	; 0x3e
 80085b6:	d820      	bhi.n	80085fa <USB_EPStartXfer+0x173a>
 80085b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	085b      	lsrs	r3, r3, #1
 80085c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d004      	beq.n	80085e8 <USB_EPStartXfer+0x1728>
 80085de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085e2:	3301      	adds	r3, #1
 80085e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	029b      	lsls	r3, r3, #10
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085f6:	801a      	strh	r2, [r3, #0]
 80085f8:	e053      	b.n	80086a2 <USB_EPStartXfer+0x17e2>
 80085fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	095b      	lsrs	r3, r3, #5
 8008608:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800860c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f003 031f 	and.w	r3, r3, #31
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <USB_EPStartXfer+0x176a>
 8008620:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008624:	3b01      	subs	r3, #1
 8008626:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800862a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800862e:	b29b      	uxth	r3, r3
 8008630:	029b      	lsls	r3, r3, #10
 8008632:	b29b      	uxth	r3, r3
 8008634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800863c:	b29a      	uxth	r2, r3
 800863e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008642:	801a      	strh	r2, [r3, #0]
 8008644:	e02d      	b.n	80086a2 <USB_EPStartXfer+0x17e2>
 8008646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	785b      	ldrb	r3, [r3, #1]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d125      	bne.n	80086a2 <USB_EPStartXfer+0x17e2>
 8008656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008664:	b29b      	uxth	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800866c:	4413      	add	r3, r2
 800866e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	011a      	lsls	r2, r3, #4
 8008680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008684:	4413      	add	r3, r2
 8008686:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800868a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800868e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	b29a      	uxth	r2, r3
 800869c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80086a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 81fe 	beq.w	8008ab0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80086b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <USB_EPStartXfer+0x182c>
 80086e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10d      	bne.n	8008708 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f040 81db 	bne.w	8008ab0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086fa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	f040 81d4 	bne.w	8008ab0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800870c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	b29b      	uxth	r3, r3
 8008726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800872a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008736:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	441a      	add	r2, r3
 800874c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008760:	b29b      	uxth	r3, r3
 8008762:	8013      	strh	r3, [r2, #0]
 8008764:	e1a4      	b.n	8008ab0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	78db      	ldrb	r3, [r3, #3]
 8008772:	2b01      	cmp	r3, #1
 8008774:	f040 819a 	bne.w	8008aac <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	429a      	cmp	r2, r3
 8008792:	d917      	bls.n	80087c4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80087a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	699a      	ldr	r2, [r3, #24]
 80087b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b4:	1ad2      	subs	r2, r2, r3
 80087b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	619a      	str	r2, [r3, #24]
 80087c2:	e00e      	b.n	80087e2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80087c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80087d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2200      	movs	r2, #0
 80087e0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d178      	bne.n	80088e4 <USB_EPStartXfer+0x1a24>
 80087f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800880e:	b29b      	uxth	r3, r3
 8008810:	461a      	mov	r2, r3
 8008812:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008816:	4413      	add	r3, r2
 8008818:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800881c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	011a      	lsls	r2, r3, #4
 800882a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800882e:	4413      	add	r3, r2
 8008830:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008834:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d116      	bne.n	800886e <USB_EPStartXfer+0x19ae>
 8008840:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800884c:	b29a      	uxth	r2, r3
 800884e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008852:	801a      	strh	r2, [r3, #0]
 8008854:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008864:	b29a      	uxth	r2, r3
 8008866:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800886a:	801a      	strh	r2, [r3, #0]
 800886c:	e06b      	b.n	8008946 <USB_EPStartXfer+0x1a86>
 800886e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008872:	2b3e      	cmp	r3, #62	; 0x3e
 8008874:	d818      	bhi.n	80088a8 <USB_EPStartXfer+0x19e8>
 8008876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800887a:	085b      	lsrs	r3, r3, #1
 800887c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <USB_EPStartXfer+0x19d6>
 800888c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008890:	3301      	adds	r3, #1
 8008892:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800889a:	b29b      	uxth	r3, r3
 800889c:	029b      	lsls	r3, r3, #10
 800889e:	b29a      	uxth	r2, r3
 80088a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088a4:	801a      	strh	r2, [r3, #0]
 80088a6:	e04e      	b.n	8008946 <USB_EPStartXfer+0x1a86>
 80088a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ac:	095b      	lsrs	r3, r3, #5
 80088ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b6:	f003 031f 	and.w	r3, r3, #31
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <USB_EPStartXfer+0x1a08>
 80088be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088c2:	3b01      	subs	r3, #1
 80088c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	029b      	lsls	r3, r3, #10
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088da:	b29a      	uxth	r2, r3
 80088dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088e0:	801a      	strh	r2, [r3, #0]
 80088e2:	e030      	b.n	8008946 <USB_EPStartXfer+0x1a86>
 80088e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d128      	bne.n	8008946 <USB_EPStartXfer+0x1a86>
 80088f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008910:	b29b      	uxth	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008918:	4413      	add	r3, r2
 800891a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800891e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	011a      	lsls	r2, r3, #4
 800892c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008930:	4413      	add	r3, r2
 8008932:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008936:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800893a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893e:	b29a      	uxth	r2, r3
 8008940:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	785b      	ldrb	r3, [r3, #1]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d178      	bne.n	8008a56 <USB_EPStartXfer+0x1b96>
 8008964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008980:	b29b      	uxth	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008988:	4413      	add	r3, r2
 800898a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800898e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	011a      	lsls	r2, r3, #4
 800899c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089a0:	4413      	add	r3, r2
 80089a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d116      	bne.n	80089e0 <USB_EPStartXfer+0x1b20>
 80089b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089be:	b29a      	uxth	r2, r3
 80089c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089c4:	801a      	strh	r2, [r3, #0]
 80089c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089dc:	801a      	strh	r2, [r3, #0]
 80089de:	e067      	b.n	8008ab0 <USB_EPStartXfer+0x1bf0>
 80089e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e4:	2b3e      	cmp	r3, #62	; 0x3e
 80089e6:	d818      	bhi.n	8008a1a <USB_EPStartXfer+0x1b5a>
 80089e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ec:	085b      	lsrs	r3, r3, #1
 80089ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d004      	beq.n	8008a08 <USB_EPStartXfer+0x1b48>
 80089fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a02:	3301      	adds	r3, #1
 8008a04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	029b      	lsls	r3, r3, #10
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a16:	801a      	strh	r2, [r3, #0]
 8008a18:	e04a      	b.n	8008ab0 <USB_EPStartXfer+0x1bf0>
 8008a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a1e:	095b      	lsrs	r3, r3, #5
 8008a20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a28:	f003 031f 	and.w	r3, r3, #31
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d104      	bne.n	8008a3a <USB_EPStartXfer+0x1b7a>
 8008a30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a34:	3b01      	subs	r3, #1
 8008a36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	029b      	lsls	r3, r3, #10
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a52:	801a      	strh	r2, [r3, #0]
 8008a54:	e02c      	b.n	8008ab0 <USB_EPStartXfer+0x1bf0>
 8008a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d124      	bne.n	8008ab0 <USB_EPStartXfer+0x1bf0>
 8008a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	461a      	mov	r2, r3
 8008a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	011a      	lsls	r2, r3, #4
 8008a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a94:	4413      	add	r3, r2
 8008a96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa8:	801a      	strh	r2, [r3, #0]
 8008aaa:	e001      	b.n	8008ab0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e03a      	b.n	8008b26 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ada:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ade:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ae2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ae6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008aea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008aee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	441a      	add	r2, r3
 8008b0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d020      	beq.n	8008b84 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b58:	81bb      	strh	r3, [r7, #12]
 8008b5a:	89bb      	ldrh	r3, [r7, #12]
 8008b5c:	f083 0310 	eor.w	r3, r3, #16
 8008b60:	81bb      	strh	r3, [r7, #12]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	441a      	add	r2, r3
 8008b6c:	89bb      	ldrh	r3, [r7, #12]
 8008b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	8013      	strh	r3, [r2, #0]
 8008b82:	e01f      	b.n	8008bc4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9a:	81fb      	strh	r3, [r7, #14]
 8008b9c:	89fb      	ldrh	r3, [r7, #14]
 8008b9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ba2:	81fb      	strh	r3, [r7, #14]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	441a      	add	r2, r3
 8008bae:	89fb      	ldrh	r3, [r7, #14]
 8008bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bc80      	pop	{r7}
 8008bce:	4770      	bx	lr

08008bd0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	7b1b      	ldrb	r3, [r3, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f040 809d 	bne.w	8008d1e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d04c      	beq.n	8008c86 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	823b      	strh	r3, [r7, #16]
 8008bfa:	8a3b      	ldrh	r3, [r7, #16]
 8008bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d01b      	beq.n	8008c3c <USB_EPClearStall+0x6c>
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1a:	81fb      	strh	r3, [r7, #14]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	441a      	add	r2, r3
 8008c26:	89fb      	ldrh	r3, [r7, #14]
 8008c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	78db      	ldrb	r3, [r3, #3]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d06c      	beq.n	8008d1e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c5a:	81bb      	strh	r3, [r7, #12]
 8008c5c:	89bb      	ldrh	r3, [r7, #12]
 8008c5e:	f083 0320 	eor.w	r3, r3, #32
 8008c62:	81bb      	strh	r3, [r7, #12]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	441a      	add	r2, r3
 8008c6e:	89bb      	ldrh	r3, [r7, #12]
 8008c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	8013      	strh	r3, [r2, #0]
 8008c84:	e04b      	b.n	8008d1e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	82fb      	strh	r3, [r7, #22]
 8008c94:	8afb      	ldrh	r3, [r7, #22]
 8008c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d01b      	beq.n	8008cd6 <USB_EPClearStall+0x106>
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb4:	82bb      	strh	r3, [r7, #20]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	441a      	add	r2, r3
 8008cc0:	8abb      	ldrh	r3, [r7, #20]
 8008cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cec:	827b      	strh	r3, [r7, #18]
 8008cee:	8a7b      	ldrh	r3, [r7, #18]
 8008cf0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cf4:	827b      	strh	r3, [r7, #18]
 8008cf6:	8a7b      	ldrh	r3, [r7, #18]
 8008cf8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cfc:	827b      	strh	r3, [r7, #18]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	441a      	add	r2, r3
 8008d08:	8a7b      	ldrh	r3, [r7, #18]
 8008d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	371c      	adds	r7, #28
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bc80      	pop	{r7}
 8008d28:	4770      	bx	lr

08008d2a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	460b      	mov	r3, r1
 8008d34:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d103      	bne.n	8008d44 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2280      	movs	r2, #128	; 0x80
 8008d40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr

08008d50 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bc80      	pop	{r7}
 8008d62:	4770      	bx	lr

08008d64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bc80      	pop	{r7}
 8008d76:	4770      	bx	lr

08008d78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bc80      	pop	{r7}
 8008d94:	4770      	bx	lr

08008d96 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr

08008dac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b08d      	sub	sp, #52	; 0x34
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4611      	mov	r1, r2
 8008db8:	461a      	mov	r2, r3
 8008dba:	460b      	mov	r3, r1
 8008dbc:	80fb      	strh	r3, [r7, #6]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008dc2:	88bb      	ldrh	r3, [r7, #4]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	085b      	lsrs	r3, r3, #1
 8008dc8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dd2:	88fb      	ldrh	r3, [r7, #6]
 8008dd4:	005a      	lsls	r2, r3, #1
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dde:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008de4:	e01e      	b.n	8008e24 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	3301      	adds	r3, #1
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	3302      	adds	r3, #2
 8008e10:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	3302      	adds	r3, #2
 8008e16:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	3b01      	subs	r3, #1
 8008e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1dd      	bne.n	8008de6 <USB_WritePMA+0x3a>
  }
}
 8008e2a:	bf00      	nop
 8008e2c:	bf00      	nop
 8008e2e:	3734      	adds	r7, #52	; 0x34
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc80      	pop	{r7}
 8008e34:	4770      	bx	lr

08008e36 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b08b      	sub	sp, #44	; 0x2c
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	60b9      	str	r1, [r7, #8]
 8008e40:	4611      	mov	r1, r2
 8008e42:	461a      	mov	r2, r3
 8008e44:	460b      	mov	r3, r1
 8008e46:	80fb      	strh	r3, [r7, #6]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e4c:	88bb      	ldrh	r3, [r7, #4]
 8008e4e:	085b      	lsrs	r3, r3, #1
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e5c:	88fb      	ldrh	r3, [r7, #6]
 8008e5e:	005a      	lsls	r2, r3, #1
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e68:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e6e:	e01b      	b.n	8008ea8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	3302      	adds	r3, #2
 8008e7c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	0a1b      	lsrs	r3, r3, #8
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	3302      	adds	r3, #2
 8008ea0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e0      	bne.n	8008e70 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008eae:	88bb      	ldrh	r3, [r7, #4]
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d007      	beq.n	8008eca <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	701a      	strb	r2, [r3, #0]
  }
}
 8008eca:	bf00      	nop
 8008ecc:	372c      	adds	r7, #44	; 0x2c
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr

08008ed4 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008ee4:	2340      	movs	r3, #64	; 0x40
 8008ee6:	2203      	movs	r2, #3
 8008ee8:	2181      	movs	r1, #129	; 0x81
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 fd47 	bl	800a97e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008ef6:	2340      	movs	r3, #64	; 0x40
 8008ef8:	2203      	movs	r2, #3
 8008efa:	2101      	movs	r1, #1
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 fd3e 	bl	800a97e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008f0a:	2054      	movs	r0, #84	; 0x54
 8008f0c:	f001 fe4c 	bl	800aba8 <USBD_static_malloc>
 8008f10:	4602      	mov	r2, r0
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008f22:	2301      	movs	r3, #1
 8008f24:	73fb      	strb	r3, [r7, #15]
 8008f26:	e012      	b.n	8008f4e <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2e:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	2340      	movs	r3, #64	; 0x40
 8008f46:	2101      	movs	r1, #1
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 fe09 	bl	800ab60 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008f64:	2181      	movs	r1, #129	; 0x81
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 fd2f 	bl	800a9ca <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008f72:	2101      	movs	r1, #1
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 fd28 	bl	800a9ca <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00e      	beq.n	8008faa <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 fe0f 	bl	800abc0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d051      	beq.n	8009086 <USBD_CUSTOM_HID_Setup+0xd2>
 8008fe2:	2b20      	cmp	r3, #32
 8008fe4:	f040 80d8 	bne.w	8009198 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	785b      	ldrb	r3, [r3, #1]
 8008fec:	3b02      	subs	r3, #2
 8008fee:	2b09      	cmp	r3, #9
 8008ff0:	d841      	bhi.n	8009076 <USBD_CUSTOM_HID_Setup+0xc2>
 8008ff2:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <USBD_CUSTOM_HID_Setup+0x44>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	08009051 	.word	0x08009051
 8008ffc:	0800902f 	.word	0x0800902f
 8009000:	08009077 	.word	0x08009077
 8009004:	08009077 	.word	0x08009077
 8009008:	08009077 	.word	0x08009077
 800900c:	08009077 	.word	0x08009077
 8009010:	08009077 	.word	0x08009077
 8009014:	08009061 	.word	0x08009061
 8009018:	0800903f 	.word	0x0800903f
 800901c:	08009021 	.word	0x08009021
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	885b      	ldrh	r3, [r3, #2]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	461a      	mov	r2, r3
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 800902c:	e02a      	b.n	8009084 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	3340      	adds	r3, #64	; 0x40
 8009032:	2201      	movs	r2, #1
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 f999 	bl	800a36e <USBD_CtlSendData>
          break;
 800903c:	e022      	b.n	8009084 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	885b      	ldrh	r3, [r3, #2]
 8009042:	0a1b      	lsrs	r3, r3, #8
 8009044:	b29b      	uxth	r3, r3
 8009046:	b2db      	uxtb	r3, r3
 8009048:	461a      	mov	r2, r3
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800904e:	e019      	b.n	8009084 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	3344      	adds	r3, #68	; 0x44
 8009054:	2201      	movs	r2, #1
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 f988 	bl	800a36e <USBD_CtlSendData>
          break;
 800905e:	e011      	b.n	8009084 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2201      	movs	r2, #1
 8009064:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8009066:	6939      	ldr	r1, [r7, #16]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	88db      	ldrh	r3, [r3, #6]
 800906c:	461a      	mov	r2, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 f9ab 	bl	800a3ca <USBD_CtlPrepareRx>
          break;
 8009074:	e006      	b.n	8009084 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 f90e 	bl	800a29a <USBD_CtlError>
          ret = USBD_FAIL;
 800907e:	2302      	movs	r3, #2
 8009080:	75fb      	strb	r3, [r7, #23]
          break;
 8009082:	bf00      	nop
      }
      break;
 8009084:	e08f      	b.n	80091a6 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	2b0b      	cmp	r3, #11
 800908c:	d87c      	bhi.n	8009188 <USBD_CUSTOM_HID_Setup+0x1d4>
 800908e:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <USBD_CUSTOM_HID_Setup+0xe0>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	080090c5 	.word	0x080090c5
 8009098:	08009189 	.word	0x08009189
 800909c:	08009189 	.word	0x08009189
 80090a0:	08009189 	.word	0x08009189
 80090a4:	08009189 	.word	0x08009189
 80090a8:	08009189 	.word	0x08009189
 80090ac:	080090ed 	.word	0x080090ed
 80090b0:	08009189 	.word	0x08009189
 80090b4:	08009189 	.word	0x08009189
 80090b8:	08009189 	.word	0x08009189
 80090bc:	0800913b 	.word	0x0800913b
 80090c0:	08009163 	.word	0x08009163
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d107      	bne.n	80090de <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80090ce:	f107 030e 	add.w	r3, r7, #14
 80090d2:	2202      	movs	r2, #2
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 f949 	bl	800a36e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090dc:	e05b      	b.n	8009196 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f001 f8da 	bl	800a29a <USBD_CtlError>
            ret = USBD_FAIL;
 80090e6:	2302      	movs	r3, #2
 80090e8:	75fb      	strb	r3, [r7, #23]
          break;
 80090ea:	e054      	b.n	8009196 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	885b      	ldrh	r3, [r3, #2]
 80090f0:	0a1b      	lsrs	r3, r3, #8
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	2b22      	cmp	r3, #34	; 0x22
 80090f6:	d10b      	bne.n	8009110 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	88db      	ldrh	r3, [r3, #6]
 80090fc:	2b1d      	cmp	r3, #29
 80090fe:	bf28      	it	cs
 8009100:	231d      	movcs	r3, #29
 8009102:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	61bb      	str	r3, [r7, #24]
 800910e:	e00d      	b.n	800912c <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	885b      	ldrh	r3, [r3, #2]
 8009114:	0a1b      	lsrs	r3, r3, #8
 8009116:	b29b      	uxth	r3, r3
 8009118:	2b21      	cmp	r3, #33	; 0x21
 800911a:	d107      	bne.n	800912c <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800911c:	4b24      	ldr	r3, [pc, #144]	; (80091b0 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800911e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	88db      	ldrh	r3, [r3, #6]
 8009124:	2b09      	cmp	r3, #9
 8009126:	bf28      	it	cs
 8009128:	2309      	movcs	r3, #9
 800912a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800912c:	8bfb      	ldrh	r3, [r7, #30]
 800912e:	461a      	mov	r2, r3
 8009130:	69b9      	ldr	r1, [r7, #24]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 f91b 	bl	800a36e <USBD_CtlSendData>
          break;
 8009138:	e02d      	b.n	8009196 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009140:	2b03      	cmp	r3, #3
 8009142:	d107      	bne.n	8009154 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	3348      	adds	r3, #72	; 0x48
 8009148:	2201      	movs	r2, #1
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f90e 	bl	800a36e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009152:	e020      	b.n	8009196 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f001 f89f 	bl	800a29a <USBD_CtlError>
            ret = USBD_FAIL;
 800915c:	2302      	movs	r3, #2
 800915e:	75fb      	strb	r3, [r7, #23]
          break;
 8009160:	e019      	b.n	8009196 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009168:	2b03      	cmp	r3, #3
 800916a:	d106      	bne.n	800917a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	885b      	ldrh	r3, [r3, #2]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	461a      	mov	r2, r3
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009178:	e00d      	b.n	8009196 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 f88c 	bl	800a29a <USBD_CtlError>
            ret = USBD_FAIL;
 8009182:	2302      	movs	r3, #2
 8009184:	75fb      	strb	r3, [r7, #23]
          break;
 8009186:	e006      	b.n	8009196 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f001 f885 	bl	800a29a <USBD_CtlError>
          ret = USBD_FAIL;
 8009190:	2302      	movs	r3, #2
 8009192:	75fb      	strb	r3, [r7, #23]
          break;
 8009194:	bf00      	nop
      }
      break;
 8009196:	e006      	b.n	80091a6 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 f87d 	bl	800a29a <USBD_CtlError>
      ret = USBD_FAIL;
 80091a0:	2302      	movs	r3, #2
 80091a2:	75fb      	strb	r3, [r7, #23]
      break;
 80091a4:	bf00      	nop
  }
  return ret;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3720      	adds	r7, #32
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	200000d4 	.word	0x200000d4

080091b4 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d111      	bne.n	80091f8 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80091e6:	88fb      	ldrh	r3, [r7, #6]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	2181      	movs	r1, #129	; 0x81
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f001 fc94 	bl	800ab1a <USBD_LL_Transmit>
 80091f2:	e001      	b.n	80091f8 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e000      	b.n	80091fa <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2229      	movs	r2, #41	; 0x29
 8009210:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8009212:	4b03      	ldr	r3, [pc, #12]	; (8009220 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20000050 	.word	0x20000050

08009224 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2229      	movs	r2, #41	; 0x29
 8009230:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8009232:	4b03      	ldr	r3, [pc, #12]	; (8009240 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	bc80      	pop	{r7}
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	2000007c 	.word	0x2000007c

08009244 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2229      	movs	r2, #41	; 0x29
 8009250:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8009252:	4b03      	ldr	r3, [pc, #12]	; (8009260 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	200000a8 	.word	0x200000a8

08009264 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009276:	2200      	movs	r2, #0
 8009278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr

08009288 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929a:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4610      	mov	r0, r2
 80092a8:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	2340      	movs	r3, #64	; 0x40
 80092ae:	2101      	movs	r1, #1
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 fc55 	bl	800ab60 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ce:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d109      	bne.n	80092ec <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	4610      	mov	r0, r2
 80092e4:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	220a      	movs	r2, #10
 8009304:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8009306:	4b03      	ldr	r3, [pc, #12]	; (8009314 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	200000e0 	.word	0x200000e0

08009318 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009322:	2302      	movs	r3, #2
 8009324:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009338:	7bfb      	ldrb	r3, [r7, #15]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr

08009344 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009358:	2302      	movs	r3, #2
 800935a:	e01a      	b.n	8009392 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	79fa      	ldrb	r2, [r7, #7]
 8009388:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f001 fa8c 	bl	800a8a8 <USBD_LL_Init>

  return USBD_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800939a:	b480      	push	{r7}
 800939c:	b085      	sub	sp, #20
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d006      	beq.n	80093bc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]
 80093ba:	e001      	b.n	80093c0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80093bc:	2302      	movs	r3, #2
 80093be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bc80      	pop	{r7}
 80093ca:	4770      	bx	lr

080093cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 fab7 	bl	800a948 <USBD_LL_Start>

  return USBD_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bc80      	pop	{r7}
 80093f6:	4770      	bx	lr

080093f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009404:	2302      	movs	r3, #2
 8009406:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00c      	beq.n	800942c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	4611      	mov	r1, r2
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	4798      	blx	r3
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d101      	bne.n	800942c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800942c:	7bfb      	ldrb	r3, [r7, #15]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	460b      	mov	r3, r1
 8009440:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	78fa      	ldrb	r2, [r7, #3]
 800944c:	4611      	mov	r1, r2
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	4798      	blx	r3

  return USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	4618      	mov	r0, r3
 8009470:	f000 fed7 	bl	800a222 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009482:	461a      	mov	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009490:	f003 031f 	and.w	r3, r3, #31
 8009494:	2b02      	cmp	r3, #2
 8009496:	d016      	beq.n	80094c6 <USBD_LL_SetupStage+0x6a>
 8009498:	2b02      	cmp	r3, #2
 800949a:	d81c      	bhi.n	80094d6 <USBD_LL_SetupStage+0x7a>
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <USBD_LL_SetupStage+0x4a>
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d008      	beq.n	80094b6 <USBD_LL_SetupStage+0x5a>
 80094a4:	e017      	b.n	80094d6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f9ca 	bl	8009848 <USBD_StdDevReq>
      break;
 80094b4:	e01a      	b.n	80094ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa2c 	bl	800991c <USBD_StdItfReq>
      break;
 80094c4:	e012      	b.n	80094ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa6c 	bl	80099ac <USBD_StdEPReq>
      break;
 80094d4:	e00a      	b.n	80094ec <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80094dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f001 fa8f 	bl	800aa08 <USBD_LL_StallEP>
      break;
 80094ea:	bf00      	nop
  }

  return USBD_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b086      	sub	sp, #24
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	460b      	mov	r3, r1
 8009500:	607a      	str	r2, [r7, #4]
 8009502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009504:	7afb      	ldrb	r3, [r7, #11]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d14b      	bne.n	80095a2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009510:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009518:	2b03      	cmp	r3, #3
 800951a:	d134      	bne.n	8009586 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	68da      	ldr	r2, [r3, #12]
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	429a      	cmp	r2, r3
 8009526:	d919      	bls.n	800955c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	1ad2      	subs	r2, r2, r3
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800953e:	429a      	cmp	r2, r3
 8009540:	d203      	bcs.n	800954a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009546:	b29b      	uxth	r3, r3
 8009548:	e002      	b.n	8009550 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800954e:	b29b      	uxth	r3, r3
 8009550:	461a      	mov	r2, r3
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 ff56 	bl	800a406 <USBD_CtlContinueRx>
 800955a:	e038      	b.n	80095ce <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00a      	beq.n	800957e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800956e:	2b03      	cmp	r3, #3
 8009570:	d105      	bne.n	800957e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 ff53 	bl	800a42a <USBD_CtlSendStatus>
 8009584:	e023      	b.n	80095ce <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800958c:	2b05      	cmp	r3, #5
 800958e:	d11e      	bne.n	80095ce <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f001 fa34 	bl	800aa08 <USBD_LL_StallEP>
 80095a0:	e015      	b.n	80095ce <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00d      	beq.n	80095ca <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d108      	bne.n	80095ca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	7afa      	ldrb	r2, [r7, #11]
 80095c2:	4611      	mov	r1, r2
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	4798      	blx	r3
 80095c8:	e001      	b.n	80095ce <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095ca:	2302      	movs	r3, #2
 80095cc:	e000      	b.n	80095d0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	460b      	mov	r3, r1
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095e6:	7afb      	ldrb	r3, [r7, #11]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d17f      	bne.n	80096ec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	3314      	adds	r3, #20
 80095f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d15c      	bne.n	80096b6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	429a      	cmp	r2, r3
 8009606:	d915      	bls.n	8009634 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	1ad2      	subs	r2, r2, r3
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	b29b      	uxth	r3, r3
 800961c:	461a      	mov	r2, r3
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 fec0 	bl	800a3a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009626:	2300      	movs	r3, #0
 8009628:	2200      	movs	r2, #0
 800962a:	2100      	movs	r1, #0
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f001 fa97 	bl	800ab60 <USBD_LL_PrepareReceive>
 8009632:	e04e      	b.n	80096d2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	6912      	ldr	r2, [r2, #16]
 800963c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009640:	fb01 f202 	mul.w	r2, r1, r2
 8009644:	1a9b      	subs	r3, r3, r2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d11c      	bne.n	8009684 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009652:	429a      	cmp	r2, r3
 8009654:	d316      	bcc.n	8009684 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009660:	429a      	cmp	r2, r3
 8009662:	d20f      	bcs.n	8009684 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009664:	2200      	movs	r2, #0
 8009666:	2100      	movs	r1, #0
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 fe9c 	bl	800a3a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009676:	2300      	movs	r3, #0
 8009678:	2200      	movs	r2, #0
 800967a:	2100      	movs	r1, #0
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f001 fa6f 	bl	800ab60 <USBD_LL_PrepareReceive>
 8009682:	e026      	b.n	80096d2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00a      	beq.n	80096a6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009696:	2b03      	cmp	r3, #3
 8009698:	d105      	bne.n	80096a6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80096a6:	2180      	movs	r1, #128	; 0x80
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f001 f9ad 	bl	800aa08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 fece 	bl	800a450 <USBD_CtlReceiveStatus>
 80096b4:	e00d      	b.n	80096d2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096bc:	2b04      	cmp	r3, #4
 80096be:	d004      	beq.n	80096ca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80096ca:	2180      	movs	r1, #128	; 0x80
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f001 f99b 	bl	800aa08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d11d      	bne.n	8009718 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff fe81 	bl	80093e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80096ea:	e015      	b.n	8009718 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00d      	beq.n	8009714 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d108      	bne.n	8009714 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	7afa      	ldrb	r2, [r7, #11]
 800970c:	4611      	mov	r1, r2
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	4798      	blx	r3
 8009712:	e001      	b.n	8009718 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009714:	2302      	movs	r3, #2
 8009716:	e000      	b.n	800971a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800972a:	2340      	movs	r3, #64	; 0x40
 800972c:	2200      	movs	r2, #0
 800972e:	2100      	movs	r1, #0
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 f924 	bl	800a97e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2240      	movs	r2, #64	; 0x40
 8009742:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009746:	2340      	movs	r3, #64	; 0x40
 8009748:	2200      	movs	r2, #0
 800974a:	2180      	movs	r1, #128	; 0x80
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 f916 	bl	800a97e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2240      	movs	r2, #64	; 0x40
 800975c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009782:	2b00      	cmp	r3, #0
 8009784:	d009      	beq.n	800979a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	6852      	ldr	r2, [r2, #4]
 8009792:	b2d2      	uxtb	r2, r2
 8009794:	4611      	mov	r1, r2
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	4798      	blx	r3
  }

  return USBD_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	460b      	mov	r3, r1
 80097ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	78fa      	ldrb	r2, [r7, #3]
 80097b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	bc80      	pop	{r7}
 80097c0:	4770      	bx	lr

080097c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2204      	movs	r2, #4
 80097da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bc80      	pop	{r7}
 80097e8:	4770      	bx	lr

080097ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b083      	sub	sp, #12
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	d105      	bne.n	8009808 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	bc80      	pop	{r7}
 8009812:	4770      	bx	lr

08009814 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009822:	2b03      	cmp	r3, #3
 8009824:	d10b      	bne.n	800983e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d005      	beq.n	800983e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800985e:	2b40      	cmp	r3, #64	; 0x40
 8009860:	d005      	beq.n	800986e <USBD_StdDevReq+0x26>
 8009862:	2b40      	cmp	r3, #64	; 0x40
 8009864:	d84f      	bhi.n	8009906 <USBD_StdDevReq+0xbe>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d009      	beq.n	800987e <USBD_StdDevReq+0x36>
 800986a:	2b20      	cmp	r3, #32
 800986c:	d14b      	bne.n	8009906 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	4798      	blx	r3
      break;
 800987c:	e048      	b.n	8009910 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	2b09      	cmp	r3, #9
 8009884:	d839      	bhi.n	80098fa <USBD_StdDevReq+0xb2>
 8009886:	a201      	add	r2, pc, #4	; (adr r2, 800988c <USBD_StdDevReq+0x44>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098dd 	.word	0x080098dd
 8009890:	080098f1 	.word	0x080098f1
 8009894:	080098fb 	.word	0x080098fb
 8009898:	080098e7 	.word	0x080098e7
 800989c:	080098fb 	.word	0x080098fb
 80098a0:	080098bf 	.word	0x080098bf
 80098a4:	080098b5 	.word	0x080098b5
 80098a8:	080098fb 	.word	0x080098fb
 80098ac:	080098d3 	.word	0x080098d3
 80098b0:	080098c9 	.word	0x080098c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f9dc 	bl	8009c74 <USBD_GetDescriptor>
          break;
 80098bc:	e022      	b.n	8009904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fb3f 	bl	8009f44 <USBD_SetAddress>
          break;
 80098c6:	e01d      	b.n	8009904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fb7e 	bl	8009fcc <USBD_SetConfig>
          break;
 80098d0:	e018      	b.n	8009904 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fc07 	bl	800a0e8 <USBD_GetConfig>
          break;
 80098da:	e013      	b.n	8009904 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fc37 	bl	800a152 <USBD_GetStatus>
          break;
 80098e4:	e00e      	b.n	8009904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fc65 	bl	800a1b8 <USBD_SetFeature>
          break;
 80098ee:	e009      	b.n	8009904 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fc74 	bl	800a1e0 <USBD_ClrFeature>
          break;
 80098f8:	e004      	b.n	8009904 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fccc 	bl	800a29a <USBD_CtlError>
          break;
 8009902:	bf00      	nop
      }
      break;
 8009904:	e004      	b.n	8009910 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fcc6 	bl	800a29a <USBD_CtlError>
      break;
 800990e:	bf00      	nop
  }

  return ret;
 8009910:	7bfb      	ldrb	r3, [r7, #15]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop

0800991c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009932:	2b40      	cmp	r3, #64	; 0x40
 8009934:	d005      	beq.n	8009942 <USBD_StdItfReq+0x26>
 8009936:	2b40      	cmp	r3, #64	; 0x40
 8009938:	d82e      	bhi.n	8009998 <USBD_StdItfReq+0x7c>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <USBD_StdItfReq+0x26>
 800993e:	2b20      	cmp	r3, #32
 8009940:	d12a      	bne.n	8009998 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009948:	3b01      	subs	r3, #1
 800994a:	2b02      	cmp	r3, #2
 800994c:	d81d      	bhi.n	800998a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	889b      	ldrh	r3, [r3, #4]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b01      	cmp	r3, #1
 8009956:	d813      	bhi.n	8009980 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	4798      	blx	r3
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	88db      	ldrh	r3, [r3, #6]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d110      	bne.n	8009994 <USBD_StdItfReq+0x78>
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10d      	bne.n	8009994 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fd56 	bl	800a42a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800997e:	e009      	b.n	8009994 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fc89 	bl	800a29a <USBD_CtlError>
          break;
 8009988:	e004      	b.n	8009994 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fc84 	bl	800a29a <USBD_CtlError>
          break;
 8009992:	e000      	b.n	8009996 <USBD_StdItfReq+0x7a>
          break;
 8009994:	bf00      	nop
      }
      break;
 8009996:	e004      	b.n	80099a2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fc7d 	bl	800a29a <USBD_CtlError>
      break;
 80099a0:	bf00      	nop
  }

  return USBD_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	889b      	ldrh	r3, [r3, #4]
 80099be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099c8:	2b40      	cmp	r3, #64	; 0x40
 80099ca:	d007      	beq.n	80099dc <USBD_StdEPReq+0x30>
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	f200 8146 	bhi.w	8009c5e <USBD_StdEPReq+0x2b2>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00a      	beq.n	80099ec <USBD_StdEPReq+0x40>
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	f040 8141 	bne.w	8009c5e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	4798      	blx	r3
      break;
 80099ea:	e13d      	b.n	8009c68 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	d10a      	bne.n	8009a0e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	4798      	blx	r3
 8009a06:	4603      	mov	r3, r0
 8009a08:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	e12d      	b.n	8009c6a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	785b      	ldrb	r3, [r3, #1]
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d007      	beq.n	8009a26 <USBD_StdEPReq+0x7a>
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	f300 811b 	bgt.w	8009c52 <USBD_StdEPReq+0x2a6>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d072      	beq.n	8009b06 <USBD_StdEPReq+0x15a>
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d03a      	beq.n	8009a9a <USBD_StdEPReq+0xee>
 8009a24:	e115      	b.n	8009c52 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d002      	beq.n	8009a36 <USBD_StdEPReq+0x8a>
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d015      	beq.n	8009a60 <USBD_StdEPReq+0xb4>
 8009a34:	e02b      	b.n	8009a8e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00c      	beq.n	8009a56 <USBD_StdEPReq+0xaa>
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
 8009a3e:	2b80      	cmp	r3, #128	; 0x80
 8009a40:	d009      	beq.n	8009a56 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 ffde 	bl	800aa08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009a4c:	2180      	movs	r1, #128	; 0x80
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 ffda 	bl	800aa08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a54:	e020      	b.n	8009a98 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fc1e 	bl	800a29a <USBD_CtlError>
              break;
 8009a5e:	e01b      	b.n	8009a98 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	885b      	ldrh	r3, [r3, #2]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10e      	bne.n	8009a86 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00b      	beq.n	8009a86 <USBD_StdEPReq+0xda>
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	2b80      	cmp	r3, #128	; 0x80
 8009a72:	d008      	beq.n	8009a86 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	88db      	ldrh	r3, [r3, #6]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d104      	bne.n	8009a86 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 ffc1 	bl	800aa08 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fccf 	bl	800a42a <USBD_CtlSendStatus>

              break;
 8009a8c:	e004      	b.n	8009a98 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fc02 	bl	800a29a <USBD_CtlError>
              break;
 8009a96:	bf00      	nop
          }
          break;
 8009a98:	e0e0      	b.n	8009c5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d002      	beq.n	8009aaa <USBD_StdEPReq+0xfe>
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d015      	beq.n	8009ad4 <USBD_StdEPReq+0x128>
 8009aa8:	e026      	b.n	8009af8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00c      	beq.n	8009aca <USBD_StdEPReq+0x11e>
 8009ab0:	7bbb      	ldrb	r3, [r7, #14]
 8009ab2:	2b80      	cmp	r3, #128	; 0x80
 8009ab4:	d009      	beq.n	8009aca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 ffa4 	bl	800aa08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ac0:	2180      	movs	r1, #128	; 0x80
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 ffa0 	bl	800aa08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ac8:	e01c      	b.n	8009b04 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fbe4 	bl	800a29a <USBD_CtlError>
              break;
 8009ad2:	e017      	b.n	8009b04 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	885b      	ldrh	r3, [r3, #2]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d112      	bne.n	8009b02 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 ffab 	bl	800aa46 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fc9a 	bl	800a42a <USBD_CtlSendStatus>
              }
              break;
 8009af6:	e004      	b.n	8009b02 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fbcd 	bl	800a29a <USBD_CtlError>
              break;
 8009b00:	e000      	b.n	8009b04 <USBD_StdEPReq+0x158>
              break;
 8009b02:	bf00      	nop
          }
          break;
 8009b04:	e0aa      	b.n	8009c5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d002      	beq.n	8009b16 <USBD_StdEPReq+0x16a>
 8009b10:	2b03      	cmp	r3, #3
 8009b12:	d032      	beq.n	8009b7a <USBD_StdEPReq+0x1ce>
 8009b14:	e097      	b.n	8009c46 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d007      	beq.n	8009b2c <USBD_StdEPReq+0x180>
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	2b80      	cmp	r3, #128	; 0x80
 8009b20:	d004      	beq.n	8009b2c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fbb8 	bl	800a29a <USBD_CtlError>
                break;
 8009b2a:	e091      	b.n	8009c50 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	da0b      	bge.n	8009b4c <USBD_StdEPReq+0x1a0>
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4413      	add	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	3310      	adds	r3, #16
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	4413      	add	r3, r2
 8009b48:	3304      	adds	r3, #4
 8009b4a:	e00b      	b.n	8009b64 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b52:	4613      	mov	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	4413      	add	r3, r2
 8009b62:	3304      	adds	r3, #4
 8009b64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fbfb 	bl	800a36e <USBD_CtlSendData>
              break;
 8009b78:	e06a      	b.n	8009c50 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	da11      	bge.n	8009ba6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	f003 020f 	and.w	r2, r3, #15
 8009b88:	6879      	ldr	r1, [r7, #4]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	440b      	add	r3, r1
 8009b94:	3318      	adds	r3, #24
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d117      	bne.n	8009bcc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fb7b 	bl	800a29a <USBD_CtlError>
                  break;
 8009ba4:	e054      	b.n	8009c50 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
 8009ba8:	f003 020f 	and.w	r2, r3, #15
 8009bac:	6879      	ldr	r1, [r7, #4]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	440b      	add	r3, r1
 8009bb8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d104      	bne.n	8009bcc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fb68 	bl	800a29a <USBD_CtlError>
                  break;
 8009bca:	e041      	b.n	8009c50 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da0b      	bge.n	8009bec <USBD_StdEPReq+0x240>
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	3310      	adds	r3, #16
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	4413      	add	r3, r2
 8009be8:	3304      	adds	r3, #4
 8009bea:	e00b      	b.n	8009c04 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	4413      	add	r3, r2
 8009c02:	3304      	adds	r3, #4
 8009c04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <USBD_StdEPReq+0x266>
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
 8009c0e:	2b80      	cmp	r3, #128	; 0x80
 8009c10:	d103      	bne.n	8009c1a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2200      	movs	r2, #0
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	e00e      	b.n	8009c38 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 ff30 	bl	800aa84 <USBD_LL_IsStallEP>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
 8009c30:	e002      	b.n	8009c38 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fb95 	bl	800a36e <USBD_CtlSendData>
              break;
 8009c44:	e004      	b.n	8009c50 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fb26 	bl	800a29a <USBD_CtlError>
              break;
 8009c4e:	bf00      	nop
          }
          break;
 8009c50:	e004      	b.n	8009c5c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fb20 	bl	800a29a <USBD_CtlError>
          break;
 8009c5a:	bf00      	nop
      }
      break;
 8009c5c:	e004      	b.n	8009c68 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fb1a 	bl	800a29a <USBD_CtlError>
      break;
 8009c66:	bf00      	nop
  }

  return ret;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
	...

08009c74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	885b      	ldrh	r3, [r3, #2]
 8009c8e:	0a1b      	lsrs	r3, r3, #8
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3b01      	subs	r3, #1
 8009c94:	2b06      	cmp	r3, #6
 8009c96:	f200 8128 	bhi.w	8009eea <USBD_GetDescriptor+0x276>
 8009c9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <USBD_GetDescriptor+0x2c>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009cbd 	.word	0x08009cbd
 8009ca4:	08009cd5 	.word	0x08009cd5
 8009ca8:	08009d15 	.word	0x08009d15
 8009cac:	08009eeb 	.word	0x08009eeb
 8009cb0:	08009eeb 	.word	0x08009eeb
 8009cb4:	08009e8b 	.word	0x08009e8b
 8009cb8:	08009eb7 	.word	0x08009eb7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	7c12      	ldrb	r2, [r2, #16]
 8009cc8:	f107 0108 	add.w	r1, r7, #8
 8009ccc:	4610      	mov	r0, r2
 8009cce:	4798      	blx	r3
 8009cd0:	60f8      	str	r0, [r7, #12]
      break;
 8009cd2:	e112      	b.n	8009efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	7c1b      	ldrb	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10d      	bne.n	8009cf8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce4:	f107 0208 	add.w	r2, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009cf6:	e100      	b.n	8009efa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	f107 0208 	add.w	r2, r7, #8
 8009d04:	4610      	mov	r0, r2
 8009d06:	4798      	blx	r3
 8009d08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	2202      	movs	r2, #2
 8009d10:	701a      	strb	r2, [r3, #0]
      break;
 8009d12:	e0f2      	b.n	8009efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	885b      	ldrh	r3, [r3, #2]
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b05      	cmp	r3, #5
 8009d1c:	f200 80ac 	bhi.w	8009e78 <USBD_GetDescriptor+0x204>
 8009d20:	a201      	add	r2, pc, #4	; (adr r2, 8009d28 <USBD_GetDescriptor+0xb4>)
 8009d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d26:	bf00      	nop
 8009d28:	08009d41 	.word	0x08009d41
 8009d2c:	08009d75 	.word	0x08009d75
 8009d30:	08009da9 	.word	0x08009da9
 8009d34:	08009ddd 	.word	0x08009ddd
 8009d38:	08009e11 	.word	0x08009e11
 8009d3c:	08009e45 	.word	0x08009e45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	7c12      	ldrb	r2, [r2, #16]
 8009d58:	f107 0108 	add.w	r1, r7, #8
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	4798      	blx	r3
 8009d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d62:	e091      	b.n	8009e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fa97 	bl	800a29a <USBD_CtlError>
            err++;
 8009d6c:	7afb      	ldrb	r3, [r7, #11]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	72fb      	strb	r3, [r7, #11]
          break;
 8009d72:	e089      	b.n	8009e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00b      	beq.n	8009d98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	7c12      	ldrb	r2, [r2, #16]
 8009d8c:	f107 0108 	add.w	r1, r7, #8
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
 8009d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d96:	e077      	b.n	8009e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fa7d 	bl	800a29a <USBD_CtlError>
            err++;
 8009da0:	7afb      	ldrb	r3, [r7, #11]
 8009da2:	3301      	adds	r3, #1
 8009da4:	72fb      	strb	r3, [r7, #11]
          break;
 8009da6:	e06f      	b.n	8009e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00b      	beq.n	8009dcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	7c12      	ldrb	r2, [r2, #16]
 8009dc0:	f107 0108 	add.w	r1, r7, #8
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4798      	blx	r3
 8009dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dca:	e05d      	b.n	8009e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fa63 	bl	800a29a <USBD_CtlError>
            err++;
 8009dd4:	7afb      	ldrb	r3, [r7, #11]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dda:	e055      	b.n	8009e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	7c12      	ldrb	r2, [r2, #16]
 8009df4:	f107 0108 	add.w	r1, r7, #8
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4798      	blx	r3
 8009dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dfe:	e043      	b.n	8009e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fa49 	bl	800a29a <USBD_CtlError>
            err++;
 8009e08:	7afb      	ldrb	r3, [r7, #11]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e0e:	e03b      	b.n	8009e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	7c12      	ldrb	r2, [r2, #16]
 8009e28:	f107 0108 	add.w	r1, r7, #8
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4798      	blx	r3
 8009e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e32:	e029      	b.n	8009e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fa2f 	bl	800a29a <USBD_CtlError>
            err++;
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	72fb      	strb	r3, [r7, #11]
          break;
 8009e42:	e021      	b.n	8009e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	7c12      	ldrb	r2, [r2, #16]
 8009e5c:	f107 0108 	add.w	r1, r7, #8
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e66:	e00f      	b.n	8009e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa15 	bl	800a29a <USBD_CtlError>
            err++;
 8009e70:	7afb      	ldrb	r3, [r7, #11]
 8009e72:	3301      	adds	r3, #1
 8009e74:	72fb      	strb	r3, [r7, #11]
          break;
 8009e76:	e007      	b.n	8009e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fa0d 	bl	800a29a <USBD_CtlError>
          err++;
 8009e80:	7afb      	ldrb	r3, [r7, #11]
 8009e82:	3301      	adds	r3, #1
 8009e84:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009e86:	e038      	b.n	8009efa <USBD_GetDescriptor+0x286>
 8009e88:	e037      	b.n	8009efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	7c1b      	ldrb	r3, [r3, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d109      	bne.n	8009ea6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e9a:	f107 0208 	add.w	r2, r7, #8
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	4798      	blx	r3
 8009ea2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ea4:	e029      	b.n	8009efa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f9f6 	bl	800a29a <USBD_CtlError>
        err++;
 8009eae:	7afb      	ldrb	r3, [r7, #11]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	72fb      	strb	r3, [r7, #11]
      break;
 8009eb4:	e021      	b.n	8009efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	7c1b      	ldrb	r3, [r3, #16]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10d      	bne.n	8009eda <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec6:	f107 0208 	add.w	r2, r7, #8
 8009eca:	4610      	mov	r0, r2
 8009ecc:	4798      	blx	r3
 8009ece:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	2207      	movs	r2, #7
 8009ed6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ed8:	e00f      	b.n	8009efa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f9dc 	bl	800a29a <USBD_CtlError>
        err++;
 8009ee2:	7afb      	ldrb	r3, [r7, #11]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ee8:	e007      	b.n	8009efa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f9d4 	bl	800a29a <USBD_CtlError>
      err++;
 8009ef2:	7afb      	ldrb	r3, [r7, #11]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ef8:	bf00      	nop
  }

  if (err != 0U)
 8009efa:	7afb      	ldrb	r3, [r7, #11]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d11c      	bne.n	8009f3a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009f00:	893b      	ldrh	r3, [r7, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d011      	beq.n	8009f2a <USBD_GetDescriptor+0x2b6>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	88db      	ldrh	r3, [r3, #6]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00d      	beq.n	8009f2a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	88da      	ldrh	r2, [r3, #6]
 8009f12:	893b      	ldrh	r3, [r7, #8]
 8009f14:	4293      	cmp	r3, r2
 8009f16:	bf28      	it	cs
 8009f18:	4613      	movcs	r3, r2
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f1e:	893b      	ldrh	r3, [r7, #8]
 8009f20:	461a      	mov	r2, r3
 8009f22:	68f9      	ldr	r1, [r7, #12]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fa22 	bl	800a36e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	88db      	ldrh	r3, [r3, #6]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d104      	bne.n	8009f3c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fa79 	bl	800a42a <USBD_CtlSendStatus>
 8009f38:	e000      	b.n	8009f3c <USBD_GetDescriptor+0x2c8>
    return;
 8009f3a:	bf00      	nop
    }
  }
}
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop

08009f44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	889b      	ldrh	r3, [r3, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d130      	bne.n	8009fb8 <USBD_SetAddress+0x74>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	88db      	ldrh	r3, [r3, #6]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d12c      	bne.n	8009fb8 <USBD_SetAddress+0x74>
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	885b      	ldrh	r3, [r3, #2]
 8009f62:	2b7f      	cmp	r3, #127	; 0x7f
 8009f64:	d828      	bhi.n	8009fb8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	885b      	ldrh	r3, [r3, #2]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d104      	bne.n	8009f86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f98b 	bl	800a29a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f84:	e01d      	b.n	8009fc2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	7bfa      	ldrb	r2, [r7, #15]
 8009f8a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f8e:	7bfb      	ldrb	r3, [r7, #15]
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fda2 	bl	800aadc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fa46 	bl	800a42a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d004      	beq.n	8009fae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fac:	e009      	b.n	8009fc2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fb6:	e004      	b.n	8009fc2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f96d 	bl	800a29a <USBD_CtlError>
  }
}
 8009fc0:	bf00      	nop
 8009fc2:	bf00      	nop
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	885b      	ldrh	r3, [r3, #2]
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	4b41      	ldr	r3, [pc, #260]	; (800a0e4 <USBD_SetConfig+0x118>)
 8009fde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009fe0:	4b40      	ldr	r3, [pc, #256]	; (800a0e4 <USBD_SetConfig+0x118>)
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d904      	bls.n	8009ff2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009fe8:	6839      	ldr	r1, [r7, #0]
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f955 	bl	800a29a <USBD_CtlError>
 8009ff0:	e075      	b.n	800a0de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d002      	beq.n	800a002 <USBD_SetConfig+0x36>
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	d023      	beq.n	800a048 <USBD_SetConfig+0x7c>
 800a000:	e062      	b.n	800a0c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a002:	4b38      	ldr	r3, [pc, #224]	; (800a0e4 <USBD_SetConfig+0x118>)
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d01a      	beq.n	800a040 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a00a:	4b36      	ldr	r3, [pc, #216]	; (800a0e4 <USBD_SetConfig+0x118>)
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2203      	movs	r2, #3
 800a018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a01c:	4b31      	ldr	r3, [pc, #196]	; (800a0e4 <USBD_SetConfig+0x118>)
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff f9e8 	bl	80093f8 <USBD_SetClassConfig>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d104      	bne.n	800a038 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f932 	bl	800a29a <USBD_CtlError>
            return;
 800a036:	e052      	b.n	800a0de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f9f6 	bl	800a42a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a03e:	e04e      	b.n	800a0de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f9f2 	bl	800a42a <USBD_CtlSendStatus>
        break;
 800a046:	e04a      	b.n	800a0de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a048:	4b26      	ldr	r3, [pc, #152]	; (800a0e4 <USBD_SetConfig+0x118>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d112      	bne.n	800a076 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2202      	movs	r2, #2
 800a054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a058:	4b22      	ldr	r3, [pc, #136]	; (800a0e4 <USBD_SetConfig+0x118>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a062:	4b20      	ldr	r3, [pc, #128]	; (800a0e4 <USBD_SetConfig+0x118>)
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7ff f9e4 	bl	8009436 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f9db 	bl	800a42a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a074:	e033      	b.n	800a0de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a076:	4b1b      	ldr	r3, [pc, #108]	; (800a0e4 <USBD_SetConfig+0x118>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	429a      	cmp	r2, r3
 800a082:	d01d      	beq.n	800a0c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff f9d2 	bl	8009436 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a092:	4b14      	ldr	r3, [pc, #80]	; (800a0e4 <USBD_SetConfig+0x118>)
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a09c:	4b11      	ldr	r3, [pc, #68]	; (800a0e4 <USBD_SetConfig+0x118>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7ff f9a8 	bl	80093f8 <USBD_SetClassConfig>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d104      	bne.n	800a0b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f8f2 	bl	800a29a <USBD_CtlError>
            return;
 800a0b6:	e012      	b.n	800a0de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f9b6 	bl	800a42a <USBD_CtlSendStatus>
        break;
 800a0be:	e00e      	b.n	800a0de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f9b2 	bl	800a42a <USBD_CtlSendStatus>
        break;
 800a0c6:	e00a      	b.n	800a0de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f8e5 	bl	800a29a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a0d0:	4b04      	ldr	r3, [pc, #16]	; (800a0e4 <USBD_SetConfig+0x118>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7ff f9ad 	bl	8009436 <USBD_ClrClassConfig>
        break;
 800a0dc:	bf00      	nop
    }
  }
}
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000398 	.word	0x20000398

0800a0e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	88db      	ldrh	r3, [r3, #6]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d004      	beq.n	800a104 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f8cc 	bl	800a29a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a102:	e022      	b.n	800a14a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	dc02      	bgt.n	800a114 <USBD_GetConfig+0x2c>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	dc03      	bgt.n	800a11a <USBD_GetConfig+0x32>
 800a112:	e015      	b.n	800a140 <USBD_GetConfig+0x58>
 800a114:	2b03      	cmp	r3, #3
 800a116:	d00b      	beq.n	800a130 <USBD_GetConfig+0x48>
 800a118:	e012      	b.n	800a140 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3308      	adds	r3, #8
 800a124:	2201      	movs	r2, #1
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f920 	bl	800a36e <USBD_CtlSendData>
        break;
 800a12e:	e00c      	b.n	800a14a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3304      	adds	r3, #4
 800a134:	2201      	movs	r2, #1
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f918 	bl	800a36e <USBD_CtlSendData>
        break;
 800a13e:	e004      	b.n	800a14a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f8a9 	bl	800a29a <USBD_CtlError>
        break;
 800a148:	bf00      	nop
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b082      	sub	sp, #8
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a162:	3b01      	subs	r3, #1
 800a164:	2b02      	cmp	r3, #2
 800a166:	d81e      	bhi.n	800a1a6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	88db      	ldrh	r3, [r3, #6]
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d004      	beq.n	800a17a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f891 	bl	800a29a <USBD_CtlError>
        break;
 800a178:	e01a      	b.n	800a1b0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a186:	2b00      	cmp	r3, #0
 800a188:	d005      	beq.n	800a196 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	f043 0202 	orr.w	r2, r3, #2
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	330c      	adds	r3, #12
 800a19a:	2202      	movs	r2, #2
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f8e5 	bl	800a36e <USBD_CtlSendData>
      break;
 800a1a4:	e004      	b.n	800a1b0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f876 	bl	800a29a <USBD_CtlError>
      break;
 800a1ae:	bf00      	nop
  }
}
 800a1b0:	bf00      	nop
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	885b      	ldrh	r3, [r3, #2]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d106      	bne.n	800a1d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f929 	bl	800a42a <USBD_CtlSendStatus>
  }
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d80b      	bhi.n	800a20e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	885b      	ldrh	r3, [r3, #2]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d10c      	bne.n	800a218 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f90f 	bl	800a42a <USBD_CtlSendStatus>
      }
      break;
 800a20c:	e004      	b.n	800a218 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f842 	bl	800a29a <USBD_CtlError>
      break;
 800a216:	e000      	b.n	800a21a <USBD_ClrFeature+0x3a>
      break;
 800a218:	bf00      	nop
  }
}
 800a21a:	bf00      	nop
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a222:	b480      	push	{r7}
 800a224:	b083      	sub	sp, #12
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781a      	ldrb	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	785a      	ldrb	r2, [r3, #1]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	3302      	adds	r3, #2
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	b29a      	uxth	r2, r3
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	3303      	adds	r3, #3
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	b29b      	uxth	r3, r3
 800a250:	4413      	add	r3, r2
 800a252:	b29a      	uxth	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	3304      	adds	r3, #4
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	b29a      	uxth	r2, r3
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	3305      	adds	r3, #5
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	b29b      	uxth	r3, r3
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	4413      	add	r3, r2
 800a26e:	b29a      	uxth	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	3306      	adds	r3, #6
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	3307      	adds	r3, #7
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	b29b      	uxth	r3, r3
 800a284:	021b      	lsls	r3, r3, #8
 800a286:	b29b      	uxth	r3, r3
 800a288:	4413      	add	r3, r2
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	80da      	strh	r2, [r3, #6]

}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	bc80      	pop	{r7}
 800a298:	4770      	bx	lr

0800a29a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b082      	sub	sp, #8
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a2a4:	2180      	movs	r1, #128	; 0x80
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fbae 	bl	800aa08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fbaa 	bl	800aa08 <USBD_LL_StallEP>
}
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d032      	beq.n	800a338 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 f834 	bl	800a340 <USBD_GetLen>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	3301      	adds	r3, #1
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	75fa      	strb	r2, [r7, #23]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	7812      	ldrb	r2, [r2, #0]
 800a2f6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	75fa      	strb	r2, [r7, #23]
 800a2fe:	461a      	mov	r2, r3
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	4413      	add	r3, r2
 800a304:	2203      	movs	r2, #3
 800a306:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a308:	e012      	b.n	800a330 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	1c5a      	adds	r2, r3, #1
 800a30e:	60fa      	str	r2, [r7, #12]
 800a310:	7dfa      	ldrb	r2, [r7, #23]
 800a312:	1c51      	adds	r1, r2, #1
 800a314:	75f9      	strb	r1, [r7, #23]
 800a316:	4611      	mov	r1, r2
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	440a      	add	r2, r1
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a320:	7dfb      	ldrb	r3, [r7, #23]
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	75fa      	strb	r2, [r7, #23]
 800a326:	461a      	mov	r2, r3
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4413      	add	r3, r2
 800a32c:	2200      	movs	r2, #0
 800a32e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e8      	bne.n	800a30a <USBD_GetString+0x4e>
    }
  }
}
 800a338:	bf00      	nop
 800a33a:	3718      	adds	r7, #24
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a34c:	e005      	b.n	800a35a <USBD_GetLen+0x1a>
  {
    len++;
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	3301      	adds	r3, #1
 800a352:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	3301      	adds	r3, #1
 800a358:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1f5      	bne.n	800a34e <USBD_GetLen+0xe>
  }

  return len;
 800a362:	7bfb      	ldrb	r3, [r7, #15]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	bc80      	pop	{r7}
 800a36c:	4770      	bx	lr

0800a36e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	4613      	mov	r3, r2
 800a37a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2202      	movs	r2, #2
 800a380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a384:	88fa      	ldrh	r2, [r7, #6]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a38a:	88fa      	ldrh	r2, [r7, #6]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a390:	88fb      	ldrh	r3, [r7, #6]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	2100      	movs	r1, #0
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 fbbf 	bl	800ab1a <USBD_LL_Transmit>

  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	60b9      	str	r1, [r7, #8]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3b4:	88fb      	ldrh	r3, [r7, #6]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f000 fbad 	bl	800ab1a <USBD_LL_Transmit>

  return USBD_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	60f8      	str	r0, [r7, #12]
 800a3d2:	60b9      	str	r1, [r7, #8]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2203      	movs	r2, #3
 800a3dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a3e0:	88fa      	ldrh	r2, [r7, #6]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a3e8:	88fa      	ldrh	r2, [r7, #6]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3f0:	88fb      	ldrh	r3, [r7, #6]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 fbb2 	bl	800ab60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	60b9      	str	r1, [r7, #8]
 800a410:	4613      	mov	r3, r2
 800a412:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a414:	88fb      	ldrh	r3, [r7, #6]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	2100      	movs	r1, #0
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f000 fba0 	bl	800ab60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b082      	sub	sp, #8
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2204      	movs	r2, #4
 800a436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a43a:	2300      	movs	r3, #0
 800a43c:	2200      	movs	r2, #0
 800a43e:	2100      	movs	r1, #0
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fb6a 	bl	800ab1a <USBD_LL_Transmit>

  return USBD_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2205      	movs	r2, #5
 800a45c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a460:	2300      	movs	r3, #0
 800a462:	2200      	movs	r2, #0
 800a464:	2100      	movs	r1, #0
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fb7a 	bl	800ab60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a47c:	2200      	movs	r2, #0
 800a47e:	4912      	ldr	r1, [pc, #72]	; (800a4c8 <MX_USB_DEVICE_Init+0x50>)
 800a480:	4812      	ldr	r0, [pc, #72]	; (800a4cc <MX_USB_DEVICE_Init+0x54>)
 800a482:	f7fe ff5f 	bl	8009344 <USBD_Init>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a48c:	f7f7 f896 	bl	80015bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a490:	490f      	ldr	r1, [pc, #60]	; (800a4d0 <MX_USB_DEVICE_Init+0x58>)
 800a492:	480e      	ldr	r0, [pc, #56]	; (800a4cc <MX_USB_DEVICE_Init+0x54>)
 800a494:	f7fe ff81 	bl	800939a <USBD_RegisterClass>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a49e:	f7f7 f88d 	bl	80015bc <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a4a2:	490c      	ldr	r1, [pc, #48]	; (800a4d4 <MX_USB_DEVICE_Init+0x5c>)
 800a4a4:	4809      	ldr	r0, [pc, #36]	; (800a4cc <MX_USB_DEVICE_Init+0x54>)
 800a4a6:	f7fe ff37 	bl	8009318 <USBD_CUSTOM_HID_RegisterInterface>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4b0:	f7f7 f884 	bl	80015bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a4b4:	4805      	ldr	r0, [pc, #20]	; (800a4cc <MX_USB_DEVICE_Init+0x54>)
 800a4b6:	f7fe ff89 	bl	80093cc <USBD_Start>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4c0:	f7f7 f87c 	bl	80015bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4c4:	bf00      	nop
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	2000011c 	.word	0x2000011c
 800a4cc:	2000039c 	.word	0x2000039c
 800a4d0:	20000018 	.word	0x20000018
 800a4d4:	2000010c 	.word	0x2000010c

0800a4d8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a4dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bc80      	pop	{r7}
 800a4e4:	4770      	bx	lr

0800a4e6 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a4ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bc80      	pop	{r7}
 800a4f2:	4770      	bx	lr

0800a4f4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800a4fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	bc80      	pop	{r7}
 800a506:	4770      	bx	lr

0800a508 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	6039      	str	r1, [r7, #0]
 800a512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	2212      	movs	r2, #18
 800a518:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a51a:	4b03      	ldr	r3, [pc, #12]	; (800a528 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	bc80      	pop	{r7}
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	20000138 	.word	0x20000138

0800a52c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	4603      	mov	r3, r0
 800a534:	6039      	str	r1, [r7, #0]
 800a536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2204      	movs	r2, #4
 800a53c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a53e:	4b03      	ldr	r3, [pc, #12]	; (800a54c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a540:	4618      	mov	r0, r3
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	bc80      	pop	{r7}
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	2000014c 	.word	0x2000014c

0800a550 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	6039      	str	r1, [r7, #0]
 800a55a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a55c:	79fb      	ldrb	r3, [r7, #7]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d105      	bne.n	800a56e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	4907      	ldr	r1, [pc, #28]	; (800a584 <USBD_FS_ProductStrDescriptor+0x34>)
 800a566:	4808      	ldr	r0, [pc, #32]	; (800a588 <USBD_FS_ProductStrDescriptor+0x38>)
 800a568:	f7ff fea8 	bl	800a2bc <USBD_GetString>
 800a56c:	e004      	b.n	800a578 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	4904      	ldr	r1, [pc, #16]	; (800a584 <USBD_FS_ProductStrDescriptor+0x34>)
 800a572:	4805      	ldr	r0, [pc, #20]	; (800a588 <USBD_FS_ProductStrDescriptor+0x38>)
 800a574:	f7ff fea2 	bl	800a2bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a578:	4b02      	ldr	r3, [pc, #8]	; (800a584 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	20000660 	.word	0x20000660
 800a588:	0800c278 	.word	0x0800c278

0800a58c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	6039      	str	r1, [r7, #0]
 800a596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	4904      	ldr	r1, [pc, #16]	; (800a5ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a59c:	4804      	ldr	r0, [pc, #16]	; (800a5b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a59e:	f7ff fe8d 	bl	800a2bc <USBD_GetString>
  return USBD_StrDesc;
 800a5a2:	4b02      	ldr	r3, [pc, #8]	; (800a5ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	20000660 	.word	0x20000660
 800a5b0:	0800c288 	.word	0x0800c288

0800a5b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	6039      	str	r1, [r7, #0]
 800a5be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	221a      	movs	r2, #26
 800a5c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5c6:	f000 f843 	bl	800a650 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5ca:	4b02      	ldr	r3, [pc, #8]	; (800a5d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	20000150 	.word	0x20000150

0800a5d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	6039      	str	r1, [r7, #0]
 800a5e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a5e4:	79fb      	ldrb	r3, [r7, #7]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d105      	bne.n	800a5f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	4907      	ldr	r1, [pc, #28]	; (800a60c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5ee:	4808      	ldr	r0, [pc, #32]	; (800a610 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5f0:	f7ff fe64 	bl	800a2bc <USBD_GetString>
 800a5f4:	e004      	b.n	800a600 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	4904      	ldr	r1, [pc, #16]	; (800a60c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5fa:	4805      	ldr	r0, [pc, #20]	; (800a610 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5fc:	f7ff fe5e 	bl	800a2bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a600:	4b02      	ldr	r3, [pc, #8]	; (800a60c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20000660 	.word	0x20000660
 800a610:	0800c294 	.word	0x0800c294

0800a614 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	6039      	str	r1, [r7, #0]
 800a61e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d105      	bne.n	800a632 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	4907      	ldr	r1, [pc, #28]	; (800a648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a62a:	4808      	ldr	r0, [pc, #32]	; (800a64c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a62c:	f7ff fe46 	bl	800a2bc <USBD_GetString>
 800a630:	e004      	b.n	800a63c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	4904      	ldr	r1, [pc, #16]	; (800a648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a636:	4805      	ldr	r0, [pc, #20]	; (800a64c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a638:	f7ff fe40 	bl	800a2bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a63c:	4b02      	ldr	r3, [pc, #8]	; (800a648 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20000660 	.word	0x20000660
 800a64c:	0800c2a8 	.word	0x0800c2a8

0800a650 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a656:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <Get_SerialNum+0x44>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a65c:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <Get_SerialNum+0x48>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a662:	4b0e      	ldr	r3, [pc, #56]	; (800a69c <Get_SerialNum+0x4c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4413      	add	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d009      	beq.n	800a68a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a676:	2208      	movs	r2, #8
 800a678:	4909      	ldr	r1, [pc, #36]	; (800a6a0 <Get_SerialNum+0x50>)
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 f814 	bl	800a6a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a680:	2204      	movs	r2, #4
 800a682:	4908      	ldr	r1, [pc, #32]	; (800a6a4 <Get_SerialNum+0x54>)
 800a684:	68b8      	ldr	r0, [r7, #8]
 800a686:	f000 f80f 	bl	800a6a8 <IntToUnicode>
  }
}
 800a68a:	bf00      	nop
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	1ffff7e8 	.word	0x1ffff7e8
 800a698:	1ffff7ec 	.word	0x1ffff7ec
 800a69c:	1ffff7f0 	.word	0x1ffff7f0
 800a6a0:	20000152 	.word	0x20000152
 800a6a4:	20000162 	.word	0x20000162

0800a6a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	75fb      	strb	r3, [r7, #23]
 800a6be:	e027      	b.n	800a710 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	0f1b      	lsrs	r3, r3, #28
 800a6c4:	2b09      	cmp	r3, #9
 800a6c6:	d80b      	bhi.n	800a6e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	0f1b      	lsrs	r3, r3, #28
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	005b      	lsls	r3, r3, #1
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	440b      	add	r3, r1
 800a6d8:	3230      	adds	r2, #48	; 0x30
 800a6da:	b2d2      	uxtb	r2, r2
 800a6dc:	701a      	strb	r2, [r3, #0]
 800a6de:	e00a      	b.n	800a6f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	0f1b      	lsrs	r3, r3, #28
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	440b      	add	r3, r1
 800a6f0:	3237      	adds	r2, #55	; 0x37
 800a6f2:	b2d2      	uxtb	r2, r2
 800a6f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	011b      	lsls	r3, r3, #4
 800a6fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	3301      	adds	r3, #1
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	4413      	add	r3, r2
 800a706:	2200      	movs	r2, #0
 800a708:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
 800a70c:	3301      	adds	r3, #1
 800a70e:	75fb      	strb	r3, [r7, #23]
 800a710:	7dfa      	ldrb	r2, [r7, #23]
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	429a      	cmp	r2, r3
 800a716:	d3d3      	bcc.n	800a6c0 <IntToUnicode+0x18>
  }
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	371c      	adds	r7, #28
 800a71e:	46bd      	mov	sp, r7
 800a720:	bc80      	pop	{r7}
 800a722:	4770      	bx	lr

0800a724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a0d      	ldr	r2, [pc, #52]	; (800a768 <HAL_PCD_MspInit+0x44>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d113      	bne.n	800a75e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a736:	4b0d      	ldr	r3, [pc, #52]	; (800a76c <HAL_PCD_MspInit+0x48>)
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	4a0c      	ldr	r2, [pc, #48]	; (800a76c <HAL_PCD_MspInit+0x48>)
 800a73c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a740:	61d3      	str	r3, [r2, #28]
 800a742:	4b0a      	ldr	r3, [pc, #40]	; (800a76c <HAL_PCD_MspInit+0x48>)
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a74e:	2200      	movs	r2, #0
 800a750:	2100      	movs	r1, #0
 800a752:	2014      	movs	r0, #20
 800a754:	f7f7 fef7 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a758:	2014      	movs	r0, #20
 800a75a:	f7f7 ff10 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a75e:	bf00      	nop
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	40005c00 	.word	0x40005c00
 800a76c:	40021000 	.word	0x40021000

0800a770 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a784:	4619      	mov	r1, r3
 800a786:	4610      	mov	r0, r2
 800a788:	f7fe fe68 	bl	800945c <USBD_LL_SetupStage>
}
 800a78c:	bf00      	nop
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a7a6:	78fa      	ldrb	r2, [r7, #3]
 800a7a8:	6879      	ldr	r1, [r7, #4]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	00db      	lsls	r3, r3, #3
 800a7b2:	440b      	add	r3, r1
 800a7b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	78fb      	ldrb	r3, [r7, #3]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	f7fe fe9a 	bl	80094f6 <USBD_LL_DataOutStage>
}
 800a7c2:	bf00      	nop
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a7dc:	78fa      	ldrb	r2, [r7, #3]
 800a7de:	6879      	ldr	r1, [r7, #4]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	440b      	add	r3, r1
 800a7ea:	333c      	adds	r3, #60	; 0x3c
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	f7fe fef1 	bl	80095d8 <USBD_LL_DataInStage>
}
 800a7f6:	bf00      	nop
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7ff f801 	bl	8009814 <USBD_LL_SOF>
}
 800a812:	bf00      	nop
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a822:	2301      	movs	r3, #1
 800a824:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d001      	beq.n	800a832 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a82e:	f7f6 fec5 	bl	80015bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a838:	7bfa      	ldrb	r2, [r7, #15]
 800a83a:	4611      	mov	r1, r2
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fe ffb1 	bl	80097a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fe ff6a 	bl	8009722 <USBD_LL_Reset>
}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe ffab 	bl	80097c2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a874:	4b04      	ldr	r3, [pc, #16]	; (800a888 <HAL_PCD_SuspendCallback+0x30>)
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	4a03      	ldr	r2, [pc, #12]	; (800a888 <HAL_PCD_SuspendCallback+0x30>)
 800a87a:	f043 0306 	orr.w	r3, r3, #6
 800a87e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	e000ed00 	.word	0xe000ed00

0800a88c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fe ffa5 	bl	80097ea <USBD_LL_Resume>
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a8b0:	4a23      	ldr	r2, [pc, #140]	; (800a940 <USBD_LL_Init+0x98>)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a21      	ldr	r2, [pc, #132]	; (800a940 <USBD_LL_Init+0x98>)
 800a8bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a8c0:	4b1f      	ldr	r3, [pc, #124]	; (800a940 <USBD_LL_Init+0x98>)
 800a8c2:	4a20      	ldr	r2, [pc, #128]	; (800a944 <USBD_LL_Init+0x9c>)
 800a8c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a8c6:	4b1e      	ldr	r3, [pc, #120]	; (800a940 <USBD_LL_Init+0x98>)
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a8cc:	4b1c      	ldr	r3, [pc, #112]	; (800a940 <USBD_LL_Init+0x98>)
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a8d2:	4b1b      	ldr	r3, [pc, #108]	; (800a940 <USBD_LL_Init+0x98>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a8d8:	4b19      	ldr	r3, [pc, #100]	; (800a940 <USBD_LL_Init+0x98>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a8de:	4b18      	ldr	r3, [pc, #96]	; (800a940 <USBD_LL_Init+0x98>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a8e4:	4816      	ldr	r0, [pc, #88]	; (800a940 <USBD_LL_Init+0x98>)
 800a8e6:	f7f8 fcc1 	bl	800326c <HAL_PCD_Init>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a8f0:	f7f6 fe64 	bl	80015bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8fa:	2318      	movs	r3, #24
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2100      	movs	r1, #0
 800a900:	f7fa f91e 	bl	8004b40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a90a:	2358      	movs	r3, #88	; 0x58
 800a90c:	2200      	movs	r2, #0
 800a90e:	2180      	movs	r1, #128	; 0x80
 800a910:	f7fa f916 	bl	8004b40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a91a:	2398      	movs	r3, #152	; 0x98
 800a91c:	2200      	movs	r2, #0
 800a91e:	2181      	movs	r1, #129	; 0x81
 800a920:	f7fa f90e 	bl	8004b40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a92a:	23d8      	movs	r3, #216	; 0xd8
 800a92c:	2200      	movs	r2, #0
 800a92e:	2101      	movs	r1, #1
 800a930:	f7fa f906 	bl	8004b40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20000860 	.word	0x20000860
 800a944:	40005c00 	.word	0x40005c00

0800a948 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a95e:	4618      	mov	r0, r3
 800a960:	f7f8 fd8f 	bl	8003482 <HAL_PCD_Start>
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 f93c 	bl	800abe8 <USBD_Get_USB_Status>
 800a970:	4603      	mov	r3, r0
 800a972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a974:	7bbb      	ldrb	r3, [r7, #14]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	4608      	mov	r0, r1
 800a988:	4611      	mov	r1, r2
 800a98a:	461a      	mov	r2, r3
 800a98c:	4603      	mov	r3, r0
 800a98e:	70fb      	strb	r3, [r7, #3]
 800a990:	460b      	mov	r3, r1
 800a992:	70bb      	strb	r3, [r7, #2]
 800a994:	4613      	mov	r3, r2
 800a996:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9a6:	78bb      	ldrb	r3, [r7, #2]
 800a9a8:	883a      	ldrh	r2, [r7, #0]
 800a9aa:	78f9      	ldrb	r1, [r7, #3]
 800a9ac:	f7f8 ff07 	bl	80037be <HAL_PCD_EP_Open>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 f916 	bl	800abe8 <USBD_Get_USB_Status>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9e4:	78fa      	ldrb	r2, [r7, #3]
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7f8 ff4e 	bl	800388a <HAL_PCD_EP_Close>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 f8f7 	bl	800abe8 <USBD_Get_USB_Status>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa22:	78fa      	ldrb	r2, [r7, #3]
 800aa24:	4611      	mov	r1, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7f8 fff7 	bl	8003a1a <HAL_PCD_EP_SetStall>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 f8d8 	bl	800abe8 <USBD_Get_USB_Status>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b084      	sub	sp, #16
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	460b      	mov	r3, r1
 800aa50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa60:	78fa      	ldrb	r2, [r7, #3]
 800aa62:	4611      	mov	r1, r2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7f9 f838 	bl	8003ada <HAL_PCD_EP_ClrStall>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 f8b9 	bl	800abe8 <USBD_Get_USB_Status>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	da0c      	bge.n	800aaba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaa6:	68f9      	ldr	r1, [r7, #12]
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	4613      	mov	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	440b      	add	r3, r1
 800aab4:	3302      	adds	r3, #2
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	e00b      	b.n	800aad2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aaba:	78fb      	ldrb	r3, [r7, #3]
 800aabc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aac0:	68f9      	ldr	r1, [r7, #12]
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	00db      	lsls	r3, r3, #3
 800aaca:	440b      	add	r3, r1
 800aacc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aad0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bc80      	pop	{r7}
 800aada:	4770      	bx	lr

0800aadc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	460b      	mov	r3, r1
 800aae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaf6:	78fa      	ldrb	r2, [r7, #3]
 800aaf8:	4611      	mov	r1, r2
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7f8 fe3a 	bl	8003774 <HAL_PCD_SetAddress>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 f86e 	bl	800abe8 <USBD_Get_USB_Status>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b086      	sub	sp, #24
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	461a      	mov	r2, r3
 800ab26:	460b      	mov	r3, r1
 800ab28:	72fb      	strb	r3, [r7, #11]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab3c:	893b      	ldrh	r3, [r7, #8]
 800ab3e:	7af9      	ldrb	r1, [r7, #11]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	f7f8 ff27 	bl	8003994 <HAL_PCD_EP_Transmit>
 800ab46:	4603      	mov	r3, r0
 800ab48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 f84b 	bl	800abe8 <USBD_Get_USB_Status>
 800ab52:	4603      	mov	r3, r0
 800ab54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab56:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	607a      	str	r2, [r7, #4]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	72fb      	strb	r3, [r7, #11]
 800ab70:	4613      	mov	r3, r2
 800ab72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab82:	893b      	ldrh	r3, [r7, #8]
 800ab84:	7af9      	ldrb	r1, [r7, #11]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	f7f8 fec7 	bl	800391a <HAL_PCD_EP_Receive>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab90:	7dfb      	ldrb	r3, [r7, #23]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 f828 	bl	800abe8 <USBD_Get_USB_Status>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800abb0:	4b02      	ldr	r3, [pc, #8]	; (800abbc <USBD_static_malloc+0x14>)
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bc80      	pop	{r7}
 800abba:	4770      	bx	lr
 800abbc:	20000b4c 	.word	0x20000b4c

0800abc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]

}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	bc80      	pop	{r7}
 800abd0:	4770      	bx	lr

0800abd2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	460b      	mov	r3, r1
 800abdc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bc80      	pop	{r7}
 800abe6:	4770      	bx	lr

0800abe8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d817      	bhi.n	800ac2c <USBD_Get_USB_Status+0x44>
 800abfc:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <USBD_Get_USB_Status+0x1c>)
 800abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac02:	bf00      	nop
 800ac04:	0800ac15 	.word	0x0800ac15
 800ac08:	0800ac1b 	.word	0x0800ac1b
 800ac0c:	0800ac21 	.word	0x0800ac21
 800ac10:	0800ac27 	.word	0x0800ac27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73fb      	strb	r3, [r7, #15]
    break;
 800ac18:	e00b      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac1e:	e008      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac20:	2301      	movs	r3, #1
 800ac22:	73fb      	strb	r3, [r7, #15]
    break;
 800ac24:	e005      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac26:	2302      	movs	r3, #2
 800ac28:	73fb      	strb	r3, [r7, #15]
    break;
 800ac2a:	e002      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac30:	bf00      	nop
  }
  return usb_status;
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bc80      	pop	{r7}
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop

0800ac40 <atoi>:
 800ac40:	220a      	movs	r2, #10
 800ac42:	2100      	movs	r1, #0
 800ac44:	f000 b932 	b.w	800aeac <strtol>

0800ac48 <__errno>:
 800ac48:	4b01      	ldr	r3, [pc, #4]	; (800ac50 <__errno+0x8>)
 800ac4a:	6818      	ldr	r0, [r3, #0]
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	2000016c 	.word	0x2000016c

0800ac54 <__libc_init_array>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	2600      	movs	r6, #0
 800ac58:	4d0c      	ldr	r5, [pc, #48]	; (800ac8c <__libc_init_array+0x38>)
 800ac5a:	4c0d      	ldr	r4, [pc, #52]	; (800ac90 <__libc_init_array+0x3c>)
 800ac5c:	1b64      	subs	r4, r4, r5
 800ac5e:	10a4      	asrs	r4, r4, #2
 800ac60:	42a6      	cmp	r6, r4
 800ac62:	d109      	bne.n	800ac78 <__libc_init_array+0x24>
 800ac64:	f001 fae8 	bl	800c238 <_init>
 800ac68:	2600      	movs	r6, #0
 800ac6a:	4d0a      	ldr	r5, [pc, #40]	; (800ac94 <__libc_init_array+0x40>)
 800ac6c:	4c0a      	ldr	r4, [pc, #40]	; (800ac98 <__libc_init_array+0x44>)
 800ac6e:	1b64      	subs	r4, r4, r5
 800ac70:	10a4      	asrs	r4, r4, #2
 800ac72:	42a6      	cmp	r6, r4
 800ac74:	d105      	bne.n	800ac82 <__libc_init_array+0x2e>
 800ac76:	bd70      	pop	{r4, r5, r6, pc}
 800ac78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7c:	4798      	blx	r3
 800ac7e:	3601      	adds	r6, #1
 800ac80:	e7ee      	b.n	800ac60 <__libc_init_array+0xc>
 800ac82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac86:	4798      	blx	r3
 800ac88:	3601      	adds	r6, #1
 800ac8a:	e7f2      	b.n	800ac72 <__libc_init_array+0x1e>
 800ac8c:	0800c520 	.word	0x0800c520
 800ac90:	0800c520 	.word	0x0800c520
 800ac94:	0800c520 	.word	0x0800c520
 800ac98:	0800c524 	.word	0x0800c524

0800ac9c <memset>:
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	4402      	add	r2, r0
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d100      	bne.n	800aca6 <memset+0xa>
 800aca4:	4770      	bx	lr
 800aca6:	f803 1b01 	strb.w	r1, [r3], #1
 800acaa:	e7f9      	b.n	800aca0 <memset+0x4>

0800acac <siprintf>:
 800acac:	b40e      	push	{r1, r2, r3}
 800acae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acb2:	b500      	push	{lr}
 800acb4:	b09c      	sub	sp, #112	; 0x70
 800acb6:	ab1d      	add	r3, sp, #116	; 0x74
 800acb8:	9002      	str	r0, [sp, #8]
 800acba:	9006      	str	r0, [sp, #24]
 800acbc:	9107      	str	r1, [sp, #28]
 800acbe:	9104      	str	r1, [sp, #16]
 800acc0:	4808      	ldr	r0, [pc, #32]	; (800ace4 <siprintf+0x38>)
 800acc2:	4909      	ldr	r1, [pc, #36]	; (800ace8 <siprintf+0x3c>)
 800acc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc8:	9105      	str	r1, [sp, #20]
 800acca:	6800      	ldr	r0, [r0, #0]
 800accc:	a902      	add	r1, sp, #8
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	f000 fa66 	bl	800b1a0 <_svfiprintf_r>
 800acd4:	2200      	movs	r2, #0
 800acd6:	9b02      	ldr	r3, [sp, #8]
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	b01c      	add	sp, #112	; 0x70
 800acdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ace0:	b003      	add	sp, #12
 800ace2:	4770      	bx	lr
 800ace4:	2000016c 	.word	0x2000016c
 800ace8:	ffff0208 	.word	0xffff0208

0800acec <strcpy>:
 800acec:	4603      	mov	r3, r0
 800acee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acf2:	f803 2b01 	strb.w	r2, [r3], #1
 800acf6:	2a00      	cmp	r2, #0
 800acf8:	d1f9      	bne.n	800acee <strcpy+0x2>
 800acfa:	4770      	bx	lr

0800acfc <strtok>:
 800acfc:	4b16      	ldr	r3, [pc, #88]	; (800ad58 <strtok+0x5c>)
 800acfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad02:	681f      	ldr	r7, [r3, #0]
 800ad04:	4605      	mov	r5, r0
 800ad06:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800ad08:	460e      	mov	r6, r1
 800ad0a:	b9ec      	cbnz	r4, 800ad48 <strtok+0x4c>
 800ad0c:	2050      	movs	r0, #80	; 0x50
 800ad0e:	f000 f907 	bl	800af20 <malloc>
 800ad12:	4602      	mov	r2, r0
 800ad14:	65b8      	str	r0, [r7, #88]	; 0x58
 800ad16:	b920      	cbnz	r0, 800ad22 <strtok+0x26>
 800ad18:	2157      	movs	r1, #87	; 0x57
 800ad1a:	4b10      	ldr	r3, [pc, #64]	; (800ad5c <strtok+0x60>)
 800ad1c:	4810      	ldr	r0, [pc, #64]	; (800ad60 <strtok+0x64>)
 800ad1e:	f000 f8cf 	bl	800aec0 <__assert_func>
 800ad22:	e9c0 4400 	strd	r4, r4, [r0]
 800ad26:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad2a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad2e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ad32:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ad36:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ad3a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ad3e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ad42:	6184      	str	r4, [r0, #24]
 800ad44:	7704      	strb	r4, [r0, #28]
 800ad46:	6244      	str	r4, [r0, #36]	; 0x24
 800ad48:	4631      	mov	r1, r6
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad54:	f000 b806 	b.w	800ad64 <__strtok_r>
 800ad58:	2000016c 	.word	0x2000016c
 800ad5c:	0800c2dc 	.word	0x0800c2dc
 800ad60:	0800c2f3 	.word	0x0800c2f3

0800ad64 <__strtok_r>:
 800ad64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad66:	b908      	cbnz	r0, 800ad6c <__strtok_r+0x8>
 800ad68:	6810      	ldr	r0, [r2, #0]
 800ad6a:	b188      	cbz	r0, 800ad90 <__strtok_r+0x2c>
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	460f      	mov	r7, r1
 800ad70:	4620      	mov	r0, r4
 800ad72:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ad76:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ad7a:	b91e      	cbnz	r6, 800ad84 <__strtok_r+0x20>
 800ad7c:	b965      	cbnz	r5, 800ad98 <__strtok_r+0x34>
 800ad7e:	4628      	mov	r0, r5
 800ad80:	6015      	str	r5, [r2, #0]
 800ad82:	e005      	b.n	800ad90 <__strtok_r+0x2c>
 800ad84:	42b5      	cmp	r5, r6
 800ad86:	d1f6      	bne.n	800ad76 <__strtok_r+0x12>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1f0      	bne.n	800ad6e <__strtok_r+0xa>
 800ad8c:	6014      	str	r4, [r2, #0]
 800ad8e:	7003      	strb	r3, [r0, #0]
 800ad90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad92:	461c      	mov	r4, r3
 800ad94:	e00c      	b.n	800adb0 <__strtok_r+0x4c>
 800ad96:	b915      	cbnz	r5, 800ad9e <__strtok_r+0x3a>
 800ad98:	460e      	mov	r6, r1
 800ad9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ada2:	42ab      	cmp	r3, r5
 800ada4:	d1f7      	bne.n	800ad96 <__strtok_r+0x32>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0f3      	beq.n	800ad92 <__strtok_r+0x2e>
 800adaa:	2300      	movs	r3, #0
 800adac:	f804 3c01 	strb.w	r3, [r4, #-1]
 800adb0:	6014      	str	r4, [r2, #0]
 800adb2:	e7ed      	b.n	800ad90 <__strtok_r+0x2c>

0800adb4 <_strtol_l.constprop.0>:
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adba:	4680      	mov	r8, r0
 800adbc:	d001      	beq.n	800adc2 <_strtol_l.constprop.0+0xe>
 800adbe:	2b24      	cmp	r3, #36	; 0x24
 800adc0:	d906      	bls.n	800add0 <_strtol_l.constprop.0+0x1c>
 800adc2:	f7ff ff41 	bl	800ac48 <__errno>
 800adc6:	2316      	movs	r3, #22
 800adc8:	6003      	str	r3, [r0, #0]
 800adca:	2000      	movs	r0, #0
 800adcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add0:	460d      	mov	r5, r1
 800add2:	4f35      	ldr	r7, [pc, #212]	; (800aea8 <_strtol_l.constprop.0+0xf4>)
 800add4:	4628      	mov	r0, r5
 800add6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adda:	5de6      	ldrb	r6, [r4, r7]
 800addc:	f016 0608 	ands.w	r6, r6, #8
 800ade0:	d1f8      	bne.n	800add4 <_strtol_l.constprop.0+0x20>
 800ade2:	2c2d      	cmp	r4, #45	; 0x2d
 800ade4:	d12f      	bne.n	800ae46 <_strtol_l.constprop.0+0x92>
 800ade6:	2601      	movs	r6, #1
 800ade8:	782c      	ldrb	r4, [r5, #0]
 800adea:	1c85      	adds	r5, r0, #2
 800adec:	2b00      	cmp	r3, #0
 800adee:	d057      	beq.n	800aea0 <_strtol_l.constprop.0+0xec>
 800adf0:	2b10      	cmp	r3, #16
 800adf2:	d109      	bne.n	800ae08 <_strtol_l.constprop.0+0x54>
 800adf4:	2c30      	cmp	r4, #48	; 0x30
 800adf6:	d107      	bne.n	800ae08 <_strtol_l.constprop.0+0x54>
 800adf8:	7828      	ldrb	r0, [r5, #0]
 800adfa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800adfe:	2858      	cmp	r0, #88	; 0x58
 800ae00:	d149      	bne.n	800ae96 <_strtol_l.constprop.0+0xe2>
 800ae02:	2310      	movs	r3, #16
 800ae04:	786c      	ldrb	r4, [r5, #1]
 800ae06:	3502      	adds	r5, #2
 800ae08:	2700      	movs	r7, #0
 800ae0a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800ae0e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ae12:	fbbe f9f3 	udiv	r9, lr, r3
 800ae16:	4638      	mov	r0, r7
 800ae18:	fb03 ea19 	mls	sl, r3, r9, lr
 800ae1c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ae20:	f1bc 0f09 	cmp.w	ip, #9
 800ae24:	d814      	bhi.n	800ae50 <_strtol_l.constprop.0+0x9c>
 800ae26:	4664      	mov	r4, ip
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	dd22      	ble.n	800ae72 <_strtol_l.constprop.0+0xbe>
 800ae2c:	2f00      	cmp	r7, #0
 800ae2e:	db1d      	blt.n	800ae6c <_strtol_l.constprop.0+0xb8>
 800ae30:	4581      	cmp	r9, r0
 800ae32:	d31b      	bcc.n	800ae6c <_strtol_l.constprop.0+0xb8>
 800ae34:	d101      	bne.n	800ae3a <_strtol_l.constprop.0+0x86>
 800ae36:	45a2      	cmp	sl, r4
 800ae38:	db18      	blt.n	800ae6c <_strtol_l.constprop.0+0xb8>
 800ae3a:	2701      	movs	r7, #1
 800ae3c:	fb00 4003 	mla	r0, r0, r3, r4
 800ae40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae44:	e7ea      	b.n	800ae1c <_strtol_l.constprop.0+0x68>
 800ae46:	2c2b      	cmp	r4, #43	; 0x2b
 800ae48:	bf04      	itt	eq
 800ae4a:	782c      	ldrbeq	r4, [r5, #0]
 800ae4c:	1c85      	addeq	r5, r0, #2
 800ae4e:	e7cd      	b.n	800adec <_strtol_l.constprop.0+0x38>
 800ae50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ae54:	f1bc 0f19 	cmp.w	ip, #25
 800ae58:	d801      	bhi.n	800ae5e <_strtol_l.constprop.0+0xaa>
 800ae5a:	3c37      	subs	r4, #55	; 0x37
 800ae5c:	e7e4      	b.n	800ae28 <_strtol_l.constprop.0+0x74>
 800ae5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ae62:	f1bc 0f19 	cmp.w	ip, #25
 800ae66:	d804      	bhi.n	800ae72 <_strtol_l.constprop.0+0xbe>
 800ae68:	3c57      	subs	r4, #87	; 0x57
 800ae6a:	e7dd      	b.n	800ae28 <_strtol_l.constprop.0+0x74>
 800ae6c:	f04f 37ff 	mov.w	r7, #4294967295
 800ae70:	e7e6      	b.n	800ae40 <_strtol_l.constprop.0+0x8c>
 800ae72:	2f00      	cmp	r7, #0
 800ae74:	da07      	bge.n	800ae86 <_strtol_l.constprop.0+0xd2>
 800ae76:	2322      	movs	r3, #34	; 0x22
 800ae78:	4670      	mov	r0, lr
 800ae7a:	f8c8 3000 	str.w	r3, [r8]
 800ae7e:	2a00      	cmp	r2, #0
 800ae80:	d0a4      	beq.n	800adcc <_strtol_l.constprop.0+0x18>
 800ae82:	1e69      	subs	r1, r5, #1
 800ae84:	e005      	b.n	800ae92 <_strtol_l.constprop.0+0xde>
 800ae86:	b106      	cbz	r6, 800ae8a <_strtol_l.constprop.0+0xd6>
 800ae88:	4240      	negs	r0, r0
 800ae8a:	2a00      	cmp	r2, #0
 800ae8c:	d09e      	beq.n	800adcc <_strtol_l.constprop.0+0x18>
 800ae8e:	2f00      	cmp	r7, #0
 800ae90:	d1f7      	bne.n	800ae82 <_strtol_l.constprop.0+0xce>
 800ae92:	6011      	str	r1, [r2, #0]
 800ae94:	e79a      	b.n	800adcc <_strtol_l.constprop.0+0x18>
 800ae96:	2430      	movs	r4, #48	; 0x30
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1b5      	bne.n	800ae08 <_strtol_l.constprop.0+0x54>
 800ae9c:	2308      	movs	r3, #8
 800ae9e:	e7b3      	b.n	800ae08 <_strtol_l.constprop.0+0x54>
 800aea0:	2c30      	cmp	r4, #48	; 0x30
 800aea2:	d0a9      	beq.n	800adf8 <_strtol_l.constprop.0+0x44>
 800aea4:	230a      	movs	r3, #10
 800aea6:	e7af      	b.n	800ae08 <_strtol_l.constprop.0+0x54>
 800aea8:	0800c38d 	.word	0x0800c38d

0800aeac <strtol>:
 800aeac:	4613      	mov	r3, r2
 800aeae:	460a      	mov	r2, r1
 800aeb0:	4601      	mov	r1, r0
 800aeb2:	4802      	ldr	r0, [pc, #8]	; (800aebc <strtol+0x10>)
 800aeb4:	6800      	ldr	r0, [r0, #0]
 800aeb6:	f7ff bf7d 	b.w	800adb4 <_strtol_l.constprop.0>
 800aeba:	bf00      	nop
 800aebc:	2000016c 	.word	0x2000016c

0800aec0 <__assert_func>:
 800aec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aec2:	4614      	mov	r4, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	4b09      	ldr	r3, [pc, #36]	; (800aeec <__assert_func+0x2c>)
 800aec8:	4605      	mov	r5, r0
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68d8      	ldr	r0, [r3, #12]
 800aece:	b14c      	cbz	r4, 800aee4 <__assert_func+0x24>
 800aed0:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <__assert_func+0x30>)
 800aed2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aed6:	9100      	str	r1, [sp, #0]
 800aed8:	462b      	mov	r3, r5
 800aeda:	4906      	ldr	r1, [pc, #24]	; (800aef4 <__assert_func+0x34>)
 800aedc:	f000 f80e 	bl	800aefc <fiprintf>
 800aee0:	f000 fe1c 	bl	800bb1c <abort>
 800aee4:	4b04      	ldr	r3, [pc, #16]	; (800aef8 <__assert_func+0x38>)
 800aee6:	461c      	mov	r4, r3
 800aee8:	e7f3      	b.n	800aed2 <__assert_func+0x12>
 800aeea:	bf00      	nop
 800aeec:	2000016c 	.word	0x2000016c
 800aef0:	0800c350 	.word	0x0800c350
 800aef4:	0800c35d 	.word	0x0800c35d
 800aef8:	0800c38b 	.word	0x0800c38b

0800aefc <fiprintf>:
 800aefc:	b40e      	push	{r1, r2, r3}
 800aefe:	b503      	push	{r0, r1, lr}
 800af00:	4601      	mov	r1, r0
 800af02:	ab03      	add	r3, sp, #12
 800af04:	4805      	ldr	r0, [pc, #20]	; (800af1c <fiprintf+0x20>)
 800af06:	f853 2b04 	ldr.w	r2, [r3], #4
 800af0a:	6800      	ldr	r0, [r0, #0]
 800af0c:	9301      	str	r3, [sp, #4]
 800af0e:	f000 fa6f 	bl	800b3f0 <_vfiprintf_r>
 800af12:	b002      	add	sp, #8
 800af14:	f85d eb04 	ldr.w	lr, [sp], #4
 800af18:	b003      	add	sp, #12
 800af1a:	4770      	bx	lr
 800af1c:	2000016c 	.word	0x2000016c

0800af20 <malloc>:
 800af20:	4b02      	ldr	r3, [pc, #8]	; (800af2c <malloc+0xc>)
 800af22:	4601      	mov	r1, r0
 800af24:	6818      	ldr	r0, [r3, #0]
 800af26:	f000 b86b 	b.w	800b000 <_malloc_r>
 800af2a:	bf00      	nop
 800af2c:	2000016c 	.word	0x2000016c

0800af30 <_free_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	4605      	mov	r5, r0
 800af34:	2900      	cmp	r1, #0
 800af36:	d040      	beq.n	800afba <_free_r+0x8a>
 800af38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af3c:	1f0c      	subs	r4, r1, #4
 800af3e:	2b00      	cmp	r3, #0
 800af40:	bfb8      	it	lt
 800af42:	18e4      	addlt	r4, r4, r3
 800af44:	f001 f844 	bl	800bfd0 <__malloc_lock>
 800af48:	4a1c      	ldr	r2, [pc, #112]	; (800afbc <_free_r+0x8c>)
 800af4a:	6813      	ldr	r3, [r2, #0]
 800af4c:	b933      	cbnz	r3, 800af5c <_free_r+0x2c>
 800af4e:	6063      	str	r3, [r4, #4]
 800af50:	6014      	str	r4, [r2, #0]
 800af52:	4628      	mov	r0, r5
 800af54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af58:	f001 b840 	b.w	800bfdc <__malloc_unlock>
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	d908      	bls.n	800af72 <_free_r+0x42>
 800af60:	6820      	ldr	r0, [r4, #0]
 800af62:	1821      	adds	r1, r4, r0
 800af64:	428b      	cmp	r3, r1
 800af66:	bf01      	itttt	eq
 800af68:	6819      	ldreq	r1, [r3, #0]
 800af6a:	685b      	ldreq	r3, [r3, #4]
 800af6c:	1809      	addeq	r1, r1, r0
 800af6e:	6021      	streq	r1, [r4, #0]
 800af70:	e7ed      	b.n	800af4e <_free_r+0x1e>
 800af72:	461a      	mov	r2, r3
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	b10b      	cbz	r3, 800af7c <_free_r+0x4c>
 800af78:	42a3      	cmp	r3, r4
 800af7a:	d9fa      	bls.n	800af72 <_free_r+0x42>
 800af7c:	6811      	ldr	r1, [r2, #0]
 800af7e:	1850      	adds	r0, r2, r1
 800af80:	42a0      	cmp	r0, r4
 800af82:	d10b      	bne.n	800af9c <_free_r+0x6c>
 800af84:	6820      	ldr	r0, [r4, #0]
 800af86:	4401      	add	r1, r0
 800af88:	1850      	adds	r0, r2, r1
 800af8a:	4283      	cmp	r3, r0
 800af8c:	6011      	str	r1, [r2, #0]
 800af8e:	d1e0      	bne.n	800af52 <_free_r+0x22>
 800af90:	6818      	ldr	r0, [r3, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	4401      	add	r1, r0
 800af96:	6011      	str	r1, [r2, #0]
 800af98:	6053      	str	r3, [r2, #4]
 800af9a:	e7da      	b.n	800af52 <_free_r+0x22>
 800af9c:	d902      	bls.n	800afa4 <_free_r+0x74>
 800af9e:	230c      	movs	r3, #12
 800afa0:	602b      	str	r3, [r5, #0]
 800afa2:	e7d6      	b.n	800af52 <_free_r+0x22>
 800afa4:	6820      	ldr	r0, [r4, #0]
 800afa6:	1821      	adds	r1, r4, r0
 800afa8:	428b      	cmp	r3, r1
 800afaa:	bf01      	itttt	eq
 800afac:	6819      	ldreq	r1, [r3, #0]
 800afae:	685b      	ldreq	r3, [r3, #4]
 800afb0:	1809      	addeq	r1, r1, r0
 800afb2:	6021      	streq	r1, [r4, #0]
 800afb4:	6063      	str	r3, [r4, #4]
 800afb6:	6054      	str	r4, [r2, #4]
 800afb8:	e7cb      	b.n	800af52 <_free_r+0x22>
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	20000ba4 	.word	0x20000ba4

0800afc0 <sbrk_aligned>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	4e0e      	ldr	r6, [pc, #56]	; (800affc <sbrk_aligned+0x3c>)
 800afc4:	460c      	mov	r4, r1
 800afc6:	6831      	ldr	r1, [r6, #0]
 800afc8:	4605      	mov	r5, r0
 800afca:	b911      	cbnz	r1, 800afd2 <sbrk_aligned+0x12>
 800afcc:	f000 fcd6 	bl	800b97c <_sbrk_r>
 800afd0:	6030      	str	r0, [r6, #0]
 800afd2:	4621      	mov	r1, r4
 800afd4:	4628      	mov	r0, r5
 800afd6:	f000 fcd1 	bl	800b97c <_sbrk_r>
 800afda:	1c43      	adds	r3, r0, #1
 800afdc:	d00a      	beq.n	800aff4 <sbrk_aligned+0x34>
 800afde:	1cc4      	adds	r4, r0, #3
 800afe0:	f024 0403 	bic.w	r4, r4, #3
 800afe4:	42a0      	cmp	r0, r4
 800afe6:	d007      	beq.n	800aff8 <sbrk_aligned+0x38>
 800afe8:	1a21      	subs	r1, r4, r0
 800afea:	4628      	mov	r0, r5
 800afec:	f000 fcc6 	bl	800b97c <_sbrk_r>
 800aff0:	3001      	adds	r0, #1
 800aff2:	d101      	bne.n	800aff8 <sbrk_aligned+0x38>
 800aff4:	f04f 34ff 	mov.w	r4, #4294967295
 800aff8:	4620      	mov	r0, r4
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	20000ba8 	.word	0x20000ba8

0800b000 <_malloc_r>:
 800b000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b004:	1ccd      	adds	r5, r1, #3
 800b006:	f025 0503 	bic.w	r5, r5, #3
 800b00a:	3508      	adds	r5, #8
 800b00c:	2d0c      	cmp	r5, #12
 800b00e:	bf38      	it	cc
 800b010:	250c      	movcc	r5, #12
 800b012:	2d00      	cmp	r5, #0
 800b014:	4607      	mov	r7, r0
 800b016:	db01      	blt.n	800b01c <_malloc_r+0x1c>
 800b018:	42a9      	cmp	r1, r5
 800b01a:	d905      	bls.n	800b028 <_malloc_r+0x28>
 800b01c:	230c      	movs	r3, #12
 800b01e:	2600      	movs	r6, #0
 800b020:	603b      	str	r3, [r7, #0]
 800b022:	4630      	mov	r0, r6
 800b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b028:	4e2e      	ldr	r6, [pc, #184]	; (800b0e4 <_malloc_r+0xe4>)
 800b02a:	f000 ffd1 	bl	800bfd0 <__malloc_lock>
 800b02e:	6833      	ldr	r3, [r6, #0]
 800b030:	461c      	mov	r4, r3
 800b032:	bb34      	cbnz	r4, 800b082 <_malloc_r+0x82>
 800b034:	4629      	mov	r1, r5
 800b036:	4638      	mov	r0, r7
 800b038:	f7ff ffc2 	bl	800afc0 <sbrk_aligned>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	4604      	mov	r4, r0
 800b040:	d14d      	bne.n	800b0de <_malloc_r+0xde>
 800b042:	6834      	ldr	r4, [r6, #0]
 800b044:	4626      	mov	r6, r4
 800b046:	2e00      	cmp	r6, #0
 800b048:	d140      	bne.n	800b0cc <_malloc_r+0xcc>
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	4631      	mov	r1, r6
 800b04e:	4638      	mov	r0, r7
 800b050:	eb04 0803 	add.w	r8, r4, r3
 800b054:	f000 fc92 	bl	800b97c <_sbrk_r>
 800b058:	4580      	cmp	r8, r0
 800b05a:	d13a      	bne.n	800b0d2 <_malloc_r+0xd2>
 800b05c:	6821      	ldr	r1, [r4, #0]
 800b05e:	3503      	adds	r5, #3
 800b060:	1a6d      	subs	r5, r5, r1
 800b062:	f025 0503 	bic.w	r5, r5, #3
 800b066:	3508      	adds	r5, #8
 800b068:	2d0c      	cmp	r5, #12
 800b06a:	bf38      	it	cc
 800b06c:	250c      	movcc	r5, #12
 800b06e:	4638      	mov	r0, r7
 800b070:	4629      	mov	r1, r5
 800b072:	f7ff ffa5 	bl	800afc0 <sbrk_aligned>
 800b076:	3001      	adds	r0, #1
 800b078:	d02b      	beq.n	800b0d2 <_malloc_r+0xd2>
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	442b      	add	r3, r5
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	e00e      	b.n	800b0a0 <_malloc_r+0xa0>
 800b082:	6822      	ldr	r2, [r4, #0]
 800b084:	1b52      	subs	r2, r2, r5
 800b086:	d41e      	bmi.n	800b0c6 <_malloc_r+0xc6>
 800b088:	2a0b      	cmp	r2, #11
 800b08a:	d916      	bls.n	800b0ba <_malloc_r+0xba>
 800b08c:	1961      	adds	r1, r4, r5
 800b08e:	42a3      	cmp	r3, r4
 800b090:	6025      	str	r5, [r4, #0]
 800b092:	bf18      	it	ne
 800b094:	6059      	strne	r1, [r3, #4]
 800b096:	6863      	ldr	r3, [r4, #4]
 800b098:	bf08      	it	eq
 800b09a:	6031      	streq	r1, [r6, #0]
 800b09c:	5162      	str	r2, [r4, r5]
 800b09e:	604b      	str	r3, [r1, #4]
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f104 060b 	add.w	r6, r4, #11
 800b0a6:	f000 ff99 	bl	800bfdc <__malloc_unlock>
 800b0aa:	f026 0607 	bic.w	r6, r6, #7
 800b0ae:	1d23      	adds	r3, r4, #4
 800b0b0:	1af2      	subs	r2, r6, r3
 800b0b2:	d0b6      	beq.n	800b022 <_malloc_r+0x22>
 800b0b4:	1b9b      	subs	r3, r3, r6
 800b0b6:	50a3      	str	r3, [r4, r2]
 800b0b8:	e7b3      	b.n	800b022 <_malloc_r+0x22>
 800b0ba:	6862      	ldr	r2, [r4, #4]
 800b0bc:	42a3      	cmp	r3, r4
 800b0be:	bf0c      	ite	eq
 800b0c0:	6032      	streq	r2, [r6, #0]
 800b0c2:	605a      	strne	r2, [r3, #4]
 800b0c4:	e7ec      	b.n	800b0a0 <_malloc_r+0xa0>
 800b0c6:	4623      	mov	r3, r4
 800b0c8:	6864      	ldr	r4, [r4, #4]
 800b0ca:	e7b2      	b.n	800b032 <_malloc_r+0x32>
 800b0cc:	4634      	mov	r4, r6
 800b0ce:	6876      	ldr	r6, [r6, #4]
 800b0d0:	e7b9      	b.n	800b046 <_malloc_r+0x46>
 800b0d2:	230c      	movs	r3, #12
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	603b      	str	r3, [r7, #0]
 800b0d8:	f000 ff80 	bl	800bfdc <__malloc_unlock>
 800b0dc:	e7a1      	b.n	800b022 <_malloc_r+0x22>
 800b0de:	6025      	str	r5, [r4, #0]
 800b0e0:	e7de      	b.n	800b0a0 <_malloc_r+0xa0>
 800b0e2:	bf00      	nop
 800b0e4:	20000ba4 	.word	0x20000ba4

0800b0e8 <__ssputs_r>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	688e      	ldr	r6, [r1, #8]
 800b0ee:	4682      	mov	sl, r0
 800b0f0:	429e      	cmp	r6, r3
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	4690      	mov	r8, r2
 800b0f6:	461f      	mov	r7, r3
 800b0f8:	d838      	bhi.n	800b16c <__ssputs_r+0x84>
 800b0fa:	898a      	ldrh	r2, [r1, #12]
 800b0fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b100:	d032      	beq.n	800b168 <__ssputs_r+0x80>
 800b102:	6825      	ldr	r5, [r4, #0]
 800b104:	6909      	ldr	r1, [r1, #16]
 800b106:	3301      	adds	r3, #1
 800b108:	eba5 0901 	sub.w	r9, r5, r1
 800b10c:	6965      	ldr	r5, [r4, #20]
 800b10e:	444b      	add	r3, r9
 800b110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b118:	106d      	asrs	r5, r5, #1
 800b11a:	429d      	cmp	r5, r3
 800b11c:	bf38      	it	cc
 800b11e:	461d      	movcc	r5, r3
 800b120:	0553      	lsls	r3, r2, #21
 800b122:	d531      	bpl.n	800b188 <__ssputs_r+0xa0>
 800b124:	4629      	mov	r1, r5
 800b126:	f7ff ff6b 	bl	800b000 <_malloc_r>
 800b12a:	4606      	mov	r6, r0
 800b12c:	b950      	cbnz	r0, 800b144 <__ssputs_r+0x5c>
 800b12e:	230c      	movs	r3, #12
 800b130:	f04f 30ff 	mov.w	r0, #4294967295
 800b134:	f8ca 3000 	str.w	r3, [sl]
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b144:	464a      	mov	r2, r9
 800b146:	6921      	ldr	r1, [r4, #16]
 800b148:	f000 ff1a 	bl	800bf80 <memcpy>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b156:	81a3      	strh	r3, [r4, #12]
 800b158:	6126      	str	r6, [r4, #16]
 800b15a:	444e      	add	r6, r9
 800b15c:	6026      	str	r6, [r4, #0]
 800b15e:	463e      	mov	r6, r7
 800b160:	6165      	str	r5, [r4, #20]
 800b162:	eba5 0509 	sub.w	r5, r5, r9
 800b166:	60a5      	str	r5, [r4, #8]
 800b168:	42be      	cmp	r6, r7
 800b16a:	d900      	bls.n	800b16e <__ssputs_r+0x86>
 800b16c:	463e      	mov	r6, r7
 800b16e:	4632      	mov	r2, r6
 800b170:	4641      	mov	r1, r8
 800b172:	6820      	ldr	r0, [r4, #0]
 800b174:	f000 ff12 	bl	800bf9c <memmove>
 800b178:	68a3      	ldr	r3, [r4, #8]
 800b17a:	2000      	movs	r0, #0
 800b17c:	1b9b      	subs	r3, r3, r6
 800b17e:	60a3      	str	r3, [r4, #8]
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	4433      	add	r3, r6
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	e7db      	b.n	800b140 <__ssputs_r+0x58>
 800b188:	462a      	mov	r2, r5
 800b18a:	f000 ff2d 	bl	800bfe8 <_realloc_r>
 800b18e:	4606      	mov	r6, r0
 800b190:	2800      	cmp	r0, #0
 800b192:	d1e1      	bne.n	800b158 <__ssputs_r+0x70>
 800b194:	4650      	mov	r0, sl
 800b196:	6921      	ldr	r1, [r4, #16]
 800b198:	f7ff feca 	bl	800af30 <_free_r>
 800b19c:	e7c7      	b.n	800b12e <__ssputs_r+0x46>
	...

0800b1a0 <_svfiprintf_r>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	4698      	mov	r8, r3
 800b1a6:	898b      	ldrh	r3, [r1, #12]
 800b1a8:	4607      	mov	r7, r0
 800b1aa:	061b      	lsls	r3, r3, #24
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	4614      	mov	r4, r2
 800b1b0:	b09d      	sub	sp, #116	; 0x74
 800b1b2:	d50e      	bpl.n	800b1d2 <_svfiprintf_r+0x32>
 800b1b4:	690b      	ldr	r3, [r1, #16]
 800b1b6:	b963      	cbnz	r3, 800b1d2 <_svfiprintf_r+0x32>
 800b1b8:	2140      	movs	r1, #64	; 0x40
 800b1ba:	f7ff ff21 	bl	800b000 <_malloc_r>
 800b1be:	6028      	str	r0, [r5, #0]
 800b1c0:	6128      	str	r0, [r5, #16]
 800b1c2:	b920      	cbnz	r0, 800b1ce <_svfiprintf_r+0x2e>
 800b1c4:	230c      	movs	r3, #12
 800b1c6:	603b      	str	r3, [r7, #0]
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	e0d1      	b.n	800b372 <_svfiprintf_r+0x1d2>
 800b1ce:	2340      	movs	r3, #64	; 0x40
 800b1d0:	616b      	str	r3, [r5, #20]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d6:	2320      	movs	r3, #32
 800b1d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1dc:	2330      	movs	r3, #48	; 0x30
 800b1de:	f04f 0901 	mov.w	r9, #1
 800b1e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b38c <_svfiprintf_r+0x1ec>
 800b1ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1ee:	4623      	mov	r3, r4
 800b1f0:	469a      	mov	sl, r3
 800b1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1f6:	b10a      	cbz	r2, 800b1fc <_svfiprintf_r+0x5c>
 800b1f8:	2a25      	cmp	r2, #37	; 0x25
 800b1fa:	d1f9      	bne.n	800b1f0 <_svfiprintf_r+0x50>
 800b1fc:	ebba 0b04 	subs.w	fp, sl, r4
 800b200:	d00b      	beq.n	800b21a <_svfiprintf_r+0x7a>
 800b202:	465b      	mov	r3, fp
 800b204:	4622      	mov	r2, r4
 800b206:	4629      	mov	r1, r5
 800b208:	4638      	mov	r0, r7
 800b20a:	f7ff ff6d 	bl	800b0e8 <__ssputs_r>
 800b20e:	3001      	adds	r0, #1
 800b210:	f000 80aa 	beq.w	800b368 <_svfiprintf_r+0x1c8>
 800b214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b216:	445a      	add	r2, fp
 800b218:	9209      	str	r2, [sp, #36]	; 0x24
 800b21a:	f89a 3000 	ldrb.w	r3, [sl]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 80a2 	beq.w	800b368 <_svfiprintf_r+0x1c8>
 800b224:	2300      	movs	r3, #0
 800b226:	f04f 32ff 	mov.w	r2, #4294967295
 800b22a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b22e:	f10a 0a01 	add.w	sl, sl, #1
 800b232:	9304      	str	r3, [sp, #16]
 800b234:	9307      	str	r3, [sp, #28]
 800b236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b23a:	931a      	str	r3, [sp, #104]	; 0x68
 800b23c:	4654      	mov	r4, sl
 800b23e:	2205      	movs	r2, #5
 800b240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b244:	4851      	ldr	r0, [pc, #324]	; (800b38c <_svfiprintf_r+0x1ec>)
 800b246:	f000 fe8d 	bl	800bf64 <memchr>
 800b24a:	9a04      	ldr	r2, [sp, #16]
 800b24c:	b9d8      	cbnz	r0, 800b286 <_svfiprintf_r+0xe6>
 800b24e:	06d0      	lsls	r0, r2, #27
 800b250:	bf44      	itt	mi
 800b252:	2320      	movmi	r3, #32
 800b254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b258:	0711      	lsls	r1, r2, #28
 800b25a:	bf44      	itt	mi
 800b25c:	232b      	movmi	r3, #43	; 0x2b
 800b25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b262:	f89a 3000 	ldrb.w	r3, [sl]
 800b266:	2b2a      	cmp	r3, #42	; 0x2a
 800b268:	d015      	beq.n	800b296 <_svfiprintf_r+0xf6>
 800b26a:	4654      	mov	r4, sl
 800b26c:	2000      	movs	r0, #0
 800b26e:	f04f 0c0a 	mov.w	ip, #10
 800b272:	9a07      	ldr	r2, [sp, #28]
 800b274:	4621      	mov	r1, r4
 800b276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b27a:	3b30      	subs	r3, #48	; 0x30
 800b27c:	2b09      	cmp	r3, #9
 800b27e:	d94e      	bls.n	800b31e <_svfiprintf_r+0x17e>
 800b280:	b1b0      	cbz	r0, 800b2b0 <_svfiprintf_r+0x110>
 800b282:	9207      	str	r2, [sp, #28]
 800b284:	e014      	b.n	800b2b0 <_svfiprintf_r+0x110>
 800b286:	eba0 0308 	sub.w	r3, r0, r8
 800b28a:	fa09 f303 	lsl.w	r3, r9, r3
 800b28e:	4313      	orrs	r3, r2
 800b290:	46a2      	mov	sl, r4
 800b292:	9304      	str	r3, [sp, #16]
 800b294:	e7d2      	b.n	800b23c <_svfiprintf_r+0x9c>
 800b296:	9b03      	ldr	r3, [sp, #12]
 800b298:	1d19      	adds	r1, r3, #4
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	9103      	str	r1, [sp, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	bfbb      	ittet	lt
 800b2a2:	425b      	neglt	r3, r3
 800b2a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b2a8:	9307      	strge	r3, [sp, #28]
 800b2aa:	9307      	strlt	r3, [sp, #28]
 800b2ac:	bfb8      	it	lt
 800b2ae:	9204      	strlt	r2, [sp, #16]
 800b2b0:	7823      	ldrb	r3, [r4, #0]
 800b2b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b2b4:	d10c      	bne.n	800b2d0 <_svfiprintf_r+0x130>
 800b2b6:	7863      	ldrb	r3, [r4, #1]
 800b2b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ba:	d135      	bne.n	800b328 <_svfiprintf_r+0x188>
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	3402      	adds	r4, #2
 800b2c0:	1d1a      	adds	r2, r3, #4
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	9203      	str	r2, [sp, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bfb8      	it	lt
 800b2ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2ce:	9305      	str	r3, [sp, #20]
 800b2d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b390 <_svfiprintf_r+0x1f0>
 800b2d4:	2203      	movs	r2, #3
 800b2d6:	4650      	mov	r0, sl
 800b2d8:	7821      	ldrb	r1, [r4, #0]
 800b2da:	f000 fe43 	bl	800bf64 <memchr>
 800b2de:	b140      	cbz	r0, 800b2f2 <_svfiprintf_r+0x152>
 800b2e0:	2340      	movs	r3, #64	; 0x40
 800b2e2:	eba0 000a 	sub.w	r0, r0, sl
 800b2e6:	fa03 f000 	lsl.w	r0, r3, r0
 800b2ea:	9b04      	ldr	r3, [sp, #16]
 800b2ec:	3401      	adds	r4, #1
 800b2ee:	4303      	orrs	r3, r0
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f6:	2206      	movs	r2, #6
 800b2f8:	4826      	ldr	r0, [pc, #152]	; (800b394 <_svfiprintf_r+0x1f4>)
 800b2fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2fe:	f000 fe31 	bl	800bf64 <memchr>
 800b302:	2800      	cmp	r0, #0
 800b304:	d038      	beq.n	800b378 <_svfiprintf_r+0x1d8>
 800b306:	4b24      	ldr	r3, [pc, #144]	; (800b398 <_svfiprintf_r+0x1f8>)
 800b308:	bb1b      	cbnz	r3, 800b352 <_svfiprintf_r+0x1b2>
 800b30a:	9b03      	ldr	r3, [sp, #12]
 800b30c:	3307      	adds	r3, #7
 800b30e:	f023 0307 	bic.w	r3, r3, #7
 800b312:	3308      	adds	r3, #8
 800b314:	9303      	str	r3, [sp, #12]
 800b316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b318:	4433      	add	r3, r6
 800b31a:	9309      	str	r3, [sp, #36]	; 0x24
 800b31c:	e767      	b.n	800b1ee <_svfiprintf_r+0x4e>
 800b31e:	460c      	mov	r4, r1
 800b320:	2001      	movs	r0, #1
 800b322:	fb0c 3202 	mla	r2, ip, r2, r3
 800b326:	e7a5      	b.n	800b274 <_svfiprintf_r+0xd4>
 800b328:	2300      	movs	r3, #0
 800b32a:	f04f 0c0a 	mov.w	ip, #10
 800b32e:	4619      	mov	r1, r3
 800b330:	3401      	adds	r4, #1
 800b332:	9305      	str	r3, [sp, #20]
 800b334:	4620      	mov	r0, r4
 800b336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b33a:	3a30      	subs	r2, #48	; 0x30
 800b33c:	2a09      	cmp	r2, #9
 800b33e:	d903      	bls.n	800b348 <_svfiprintf_r+0x1a8>
 800b340:	2b00      	cmp	r3, #0
 800b342:	d0c5      	beq.n	800b2d0 <_svfiprintf_r+0x130>
 800b344:	9105      	str	r1, [sp, #20]
 800b346:	e7c3      	b.n	800b2d0 <_svfiprintf_r+0x130>
 800b348:	4604      	mov	r4, r0
 800b34a:	2301      	movs	r3, #1
 800b34c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b350:	e7f0      	b.n	800b334 <_svfiprintf_r+0x194>
 800b352:	ab03      	add	r3, sp, #12
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	462a      	mov	r2, r5
 800b358:	4638      	mov	r0, r7
 800b35a:	4b10      	ldr	r3, [pc, #64]	; (800b39c <_svfiprintf_r+0x1fc>)
 800b35c:	a904      	add	r1, sp, #16
 800b35e:	f3af 8000 	nop.w
 800b362:	1c42      	adds	r2, r0, #1
 800b364:	4606      	mov	r6, r0
 800b366:	d1d6      	bne.n	800b316 <_svfiprintf_r+0x176>
 800b368:	89ab      	ldrh	r3, [r5, #12]
 800b36a:	065b      	lsls	r3, r3, #25
 800b36c:	f53f af2c 	bmi.w	800b1c8 <_svfiprintf_r+0x28>
 800b370:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b372:	b01d      	add	sp, #116	; 0x74
 800b374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b378:	ab03      	add	r3, sp, #12
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	462a      	mov	r2, r5
 800b37e:	4638      	mov	r0, r7
 800b380:	4b06      	ldr	r3, [pc, #24]	; (800b39c <_svfiprintf_r+0x1fc>)
 800b382:	a904      	add	r1, sp, #16
 800b384:	f000 f9d4 	bl	800b730 <_printf_i>
 800b388:	e7eb      	b.n	800b362 <_svfiprintf_r+0x1c2>
 800b38a:	bf00      	nop
 800b38c:	0800c48d 	.word	0x0800c48d
 800b390:	0800c493 	.word	0x0800c493
 800b394:	0800c497 	.word	0x0800c497
 800b398:	00000000 	.word	0x00000000
 800b39c:	0800b0e9 	.word	0x0800b0e9

0800b3a0 <__sfputc_r>:
 800b3a0:	6893      	ldr	r3, [r2, #8]
 800b3a2:	b410      	push	{r4}
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	6093      	str	r3, [r2, #8]
 800b3aa:	da07      	bge.n	800b3bc <__sfputc_r+0x1c>
 800b3ac:	6994      	ldr	r4, [r2, #24]
 800b3ae:	42a3      	cmp	r3, r4
 800b3b0:	db01      	blt.n	800b3b6 <__sfputc_r+0x16>
 800b3b2:	290a      	cmp	r1, #10
 800b3b4:	d102      	bne.n	800b3bc <__sfputc_r+0x1c>
 800b3b6:	bc10      	pop	{r4}
 800b3b8:	f000 baf0 	b.w	800b99c <__swbuf_r>
 800b3bc:	6813      	ldr	r3, [r2, #0]
 800b3be:	1c58      	adds	r0, r3, #1
 800b3c0:	6010      	str	r0, [r2, #0]
 800b3c2:	7019      	strb	r1, [r3, #0]
 800b3c4:	4608      	mov	r0, r1
 800b3c6:	bc10      	pop	{r4}
 800b3c8:	4770      	bx	lr

0800b3ca <__sfputs_r>:
 800b3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3cc:	4606      	mov	r6, r0
 800b3ce:	460f      	mov	r7, r1
 800b3d0:	4614      	mov	r4, r2
 800b3d2:	18d5      	adds	r5, r2, r3
 800b3d4:	42ac      	cmp	r4, r5
 800b3d6:	d101      	bne.n	800b3dc <__sfputs_r+0x12>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	e007      	b.n	800b3ec <__sfputs_r+0x22>
 800b3dc:	463a      	mov	r2, r7
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e4:	f7ff ffdc 	bl	800b3a0 <__sfputc_r>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d1f3      	bne.n	800b3d4 <__sfputs_r+0xa>
 800b3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3f0 <_vfiprintf_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	4614      	mov	r4, r2
 800b3f8:	4698      	mov	r8, r3
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	b09d      	sub	sp, #116	; 0x74
 800b3fe:	b118      	cbz	r0, 800b408 <_vfiprintf_r+0x18>
 800b400:	6983      	ldr	r3, [r0, #24]
 800b402:	b90b      	cbnz	r3, 800b408 <_vfiprintf_r+0x18>
 800b404:	f000 fca8 	bl	800bd58 <__sinit>
 800b408:	4b89      	ldr	r3, [pc, #548]	; (800b630 <_vfiprintf_r+0x240>)
 800b40a:	429d      	cmp	r5, r3
 800b40c:	d11b      	bne.n	800b446 <_vfiprintf_r+0x56>
 800b40e:	6875      	ldr	r5, [r6, #4]
 800b410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b412:	07d9      	lsls	r1, r3, #31
 800b414:	d405      	bmi.n	800b422 <_vfiprintf_r+0x32>
 800b416:	89ab      	ldrh	r3, [r5, #12]
 800b418:	059a      	lsls	r2, r3, #22
 800b41a:	d402      	bmi.n	800b422 <_vfiprintf_r+0x32>
 800b41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b41e:	f000 fd39 	bl	800be94 <__retarget_lock_acquire_recursive>
 800b422:	89ab      	ldrh	r3, [r5, #12]
 800b424:	071b      	lsls	r3, r3, #28
 800b426:	d501      	bpl.n	800b42c <_vfiprintf_r+0x3c>
 800b428:	692b      	ldr	r3, [r5, #16]
 800b42a:	b9eb      	cbnz	r3, 800b468 <_vfiprintf_r+0x78>
 800b42c:	4629      	mov	r1, r5
 800b42e:	4630      	mov	r0, r6
 800b430:	f000 fb06 	bl	800ba40 <__swsetup_r>
 800b434:	b1c0      	cbz	r0, 800b468 <_vfiprintf_r+0x78>
 800b436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b438:	07dc      	lsls	r4, r3, #31
 800b43a:	d50e      	bpl.n	800b45a <_vfiprintf_r+0x6a>
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	b01d      	add	sp, #116	; 0x74
 800b442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b446:	4b7b      	ldr	r3, [pc, #492]	; (800b634 <_vfiprintf_r+0x244>)
 800b448:	429d      	cmp	r5, r3
 800b44a:	d101      	bne.n	800b450 <_vfiprintf_r+0x60>
 800b44c:	68b5      	ldr	r5, [r6, #8]
 800b44e:	e7df      	b.n	800b410 <_vfiprintf_r+0x20>
 800b450:	4b79      	ldr	r3, [pc, #484]	; (800b638 <_vfiprintf_r+0x248>)
 800b452:	429d      	cmp	r5, r3
 800b454:	bf08      	it	eq
 800b456:	68f5      	ldreq	r5, [r6, #12]
 800b458:	e7da      	b.n	800b410 <_vfiprintf_r+0x20>
 800b45a:	89ab      	ldrh	r3, [r5, #12]
 800b45c:	0598      	lsls	r0, r3, #22
 800b45e:	d4ed      	bmi.n	800b43c <_vfiprintf_r+0x4c>
 800b460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b462:	f000 fd18 	bl	800be96 <__retarget_lock_release_recursive>
 800b466:	e7e9      	b.n	800b43c <_vfiprintf_r+0x4c>
 800b468:	2300      	movs	r3, #0
 800b46a:	9309      	str	r3, [sp, #36]	; 0x24
 800b46c:	2320      	movs	r3, #32
 800b46e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b472:	2330      	movs	r3, #48	; 0x30
 800b474:	f04f 0901 	mov.w	r9, #1
 800b478:	f8cd 800c 	str.w	r8, [sp, #12]
 800b47c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b63c <_vfiprintf_r+0x24c>
 800b480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b484:	4623      	mov	r3, r4
 800b486:	469a      	mov	sl, r3
 800b488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b48c:	b10a      	cbz	r2, 800b492 <_vfiprintf_r+0xa2>
 800b48e:	2a25      	cmp	r2, #37	; 0x25
 800b490:	d1f9      	bne.n	800b486 <_vfiprintf_r+0x96>
 800b492:	ebba 0b04 	subs.w	fp, sl, r4
 800b496:	d00b      	beq.n	800b4b0 <_vfiprintf_r+0xc0>
 800b498:	465b      	mov	r3, fp
 800b49a:	4622      	mov	r2, r4
 800b49c:	4629      	mov	r1, r5
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f7ff ff93 	bl	800b3ca <__sfputs_r>
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	f000 80aa 	beq.w	800b5fe <_vfiprintf_r+0x20e>
 800b4aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ac:	445a      	add	r2, fp
 800b4ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 80a2 	beq.w	800b5fe <_vfiprintf_r+0x20e>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4c4:	f10a 0a01 	add.w	sl, sl, #1
 800b4c8:	9304      	str	r3, [sp, #16]
 800b4ca:	9307      	str	r3, [sp, #28]
 800b4cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b4d2:	4654      	mov	r4, sl
 800b4d4:	2205      	movs	r2, #5
 800b4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4da:	4858      	ldr	r0, [pc, #352]	; (800b63c <_vfiprintf_r+0x24c>)
 800b4dc:	f000 fd42 	bl	800bf64 <memchr>
 800b4e0:	9a04      	ldr	r2, [sp, #16]
 800b4e2:	b9d8      	cbnz	r0, 800b51c <_vfiprintf_r+0x12c>
 800b4e4:	06d1      	lsls	r1, r2, #27
 800b4e6:	bf44      	itt	mi
 800b4e8:	2320      	movmi	r3, #32
 800b4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ee:	0713      	lsls	r3, r2, #28
 800b4f0:	bf44      	itt	mi
 800b4f2:	232b      	movmi	r3, #43	; 0x2b
 800b4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4fe:	d015      	beq.n	800b52c <_vfiprintf_r+0x13c>
 800b500:	4654      	mov	r4, sl
 800b502:	2000      	movs	r0, #0
 800b504:	f04f 0c0a 	mov.w	ip, #10
 800b508:	9a07      	ldr	r2, [sp, #28]
 800b50a:	4621      	mov	r1, r4
 800b50c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b510:	3b30      	subs	r3, #48	; 0x30
 800b512:	2b09      	cmp	r3, #9
 800b514:	d94e      	bls.n	800b5b4 <_vfiprintf_r+0x1c4>
 800b516:	b1b0      	cbz	r0, 800b546 <_vfiprintf_r+0x156>
 800b518:	9207      	str	r2, [sp, #28]
 800b51a:	e014      	b.n	800b546 <_vfiprintf_r+0x156>
 800b51c:	eba0 0308 	sub.w	r3, r0, r8
 800b520:	fa09 f303 	lsl.w	r3, r9, r3
 800b524:	4313      	orrs	r3, r2
 800b526:	46a2      	mov	sl, r4
 800b528:	9304      	str	r3, [sp, #16]
 800b52a:	e7d2      	b.n	800b4d2 <_vfiprintf_r+0xe2>
 800b52c:	9b03      	ldr	r3, [sp, #12]
 800b52e:	1d19      	adds	r1, r3, #4
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	9103      	str	r1, [sp, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	bfbb      	ittet	lt
 800b538:	425b      	neglt	r3, r3
 800b53a:	f042 0202 	orrlt.w	r2, r2, #2
 800b53e:	9307      	strge	r3, [sp, #28]
 800b540:	9307      	strlt	r3, [sp, #28]
 800b542:	bfb8      	it	lt
 800b544:	9204      	strlt	r2, [sp, #16]
 800b546:	7823      	ldrb	r3, [r4, #0]
 800b548:	2b2e      	cmp	r3, #46	; 0x2e
 800b54a:	d10c      	bne.n	800b566 <_vfiprintf_r+0x176>
 800b54c:	7863      	ldrb	r3, [r4, #1]
 800b54e:	2b2a      	cmp	r3, #42	; 0x2a
 800b550:	d135      	bne.n	800b5be <_vfiprintf_r+0x1ce>
 800b552:	9b03      	ldr	r3, [sp, #12]
 800b554:	3402      	adds	r4, #2
 800b556:	1d1a      	adds	r2, r3, #4
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	9203      	str	r2, [sp, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfb8      	it	lt
 800b560:	f04f 33ff 	movlt.w	r3, #4294967295
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b640 <_vfiprintf_r+0x250>
 800b56a:	2203      	movs	r2, #3
 800b56c:	4650      	mov	r0, sl
 800b56e:	7821      	ldrb	r1, [r4, #0]
 800b570:	f000 fcf8 	bl	800bf64 <memchr>
 800b574:	b140      	cbz	r0, 800b588 <_vfiprintf_r+0x198>
 800b576:	2340      	movs	r3, #64	; 0x40
 800b578:	eba0 000a 	sub.w	r0, r0, sl
 800b57c:	fa03 f000 	lsl.w	r0, r3, r0
 800b580:	9b04      	ldr	r3, [sp, #16]
 800b582:	3401      	adds	r4, #1
 800b584:	4303      	orrs	r3, r0
 800b586:	9304      	str	r3, [sp, #16]
 800b588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58c:	2206      	movs	r2, #6
 800b58e:	482d      	ldr	r0, [pc, #180]	; (800b644 <_vfiprintf_r+0x254>)
 800b590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b594:	f000 fce6 	bl	800bf64 <memchr>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d03f      	beq.n	800b61c <_vfiprintf_r+0x22c>
 800b59c:	4b2a      	ldr	r3, [pc, #168]	; (800b648 <_vfiprintf_r+0x258>)
 800b59e:	bb1b      	cbnz	r3, 800b5e8 <_vfiprintf_r+0x1f8>
 800b5a0:	9b03      	ldr	r3, [sp, #12]
 800b5a2:	3307      	adds	r3, #7
 800b5a4:	f023 0307 	bic.w	r3, r3, #7
 800b5a8:	3308      	adds	r3, #8
 800b5aa:	9303      	str	r3, [sp, #12]
 800b5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ae:	443b      	add	r3, r7
 800b5b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b2:	e767      	b.n	800b484 <_vfiprintf_r+0x94>
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5bc:	e7a5      	b.n	800b50a <_vfiprintf_r+0x11a>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f04f 0c0a 	mov.w	ip, #10
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	3401      	adds	r4, #1
 800b5c8:	9305      	str	r3, [sp, #20]
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d0:	3a30      	subs	r2, #48	; 0x30
 800b5d2:	2a09      	cmp	r2, #9
 800b5d4:	d903      	bls.n	800b5de <_vfiprintf_r+0x1ee>
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d0c5      	beq.n	800b566 <_vfiprintf_r+0x176>
 800b5da:	9105      	str	r1, [sp, #20]
 800b5dc:	e7c3      	b.n	800b566 <_vfiprintf_r+0x176>
 800b5de:	4604      	mov	r4, r0
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5e6:	e7f0      	b.n	800b5ca <_vfiprintf_r+0x1da>
 800b5e8:	ab03      	add	r3, sp, #12
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	462a      	mov	r2, r5
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	4b16      	ldr	r3, [pc, #88]	; (800b64c <_vfiprintf_r+0x25c>)
 800b5f2:	a904      	add	r1, sp, #16
 800b5f4:	f3af 8000 	nop.w
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	1c78      	adds	r0, r7, #1
 800b5fc:	d1d6      	bne.n	800b5ac <_vfiprintf_r+0x1bc>
 800b5fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b600:	07d9      	lsls	r1, r3, #31
 800b602:	d405      	bmi.n	800b610 <_vfiprintf_r+0x220>
 800b604:	89ab      	ldrh	r3, [r5, #12]
 800b606:	059a      	lsls	r2, r3, #22
 800b608:	d402      	bmi.n	800b610 <_vfiprintf_r+0x220>
 800b60a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b60c:	f000 fc43 	bl	800be96 <__retarget_lock_release_recursive>
 800b610:	89ab      	ldrh	r3, [r5, #12]
 800b612:	065b      	lsls	r3, r3, #25
 800b614:	f53f af12 	bmi.w	800b43c <_vfiprintf_r+0x4c>
 800b618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b61a:	e711      	b.n	800b440 <_vfiprintf_r+0x50>
 800b61c:	ab03      	add	r3, sp, #12
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	462a      	mov	r2, r5
 800b622:	4630      	mov	r0, r6
 800b624:	4b09      	ldr	r3, [pc, #36]	; (800b64c <_vfiprintf_r+0x25c>)
 800b626:	a904      	add	r1, sp, #16
 800b628:	f000 f882 	bl	800b730 <_printf_i>
 800b62c:	e7e4      	b.n	800b5f8 <_vfiprintf_r+0x208>
 800b62e:	bf00      	nop
 800b630:	0800c4e0 	.word	0x0800c4e0
 800b634:	0800c500 	.word	0x0800c500
 800b638:	0800c4c0 	.word	0x0800c4c0
 800b63c:	0800c48d 	.word	0x0800c48d
 800b640:	0800c493 	.word	0x0800c493
 800b644:	0800c497 	.word	0x0800c497
 800b648:	00000000 	.word	0x00000000
 800b64c:	0800b3cb 	.word	0x0800b3cb

0800b650 <_printf_common>:
 800b650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b654:	4616      	mov	r6, r2
 800b656:	4699      	mov	r9, r3
 800b658:	688a      	ldr	r2, [r1, #8]
 800b65a:	690b      	ldr	r3, [r1, #16]
 800b65c:	4607      	mov	r7, r0
 800b65e:	4293      	cmp	r3, r2
 800b660:	bfb8      	it	lt
 800b662:	4613      	movlt	r3, r2
 800b664:	6033      	str	r3, [r6, #0]
 800b666:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b66a:	460c      	mov	r4, r1
 800b66c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b670:	b10a      	cbz	r2, 800b676 <_printf_common+0x26>
 800b672:	3301      	adds	r3, #1
 800b674:	6033      	str	r3, [r6, #0]
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	0699      	lsls	r1, r3, #26
 800b67a:	bf42      	ittt	mi
 800b67c:	6833      	ldrmi	r3, [r6, #0]
 800b67e:	3302      	addmi	r3, #2
 800b680:	6033      	strmi	r3, [r6, #0]
 800b682:	6825      	ldr	r5, [r4, #0]
 800b684:	f015 0506 	ands.w	r5, r5, #6
 800b688:	d106      	bne.n	800b698 <_printf_common+0x48>
 800b68a:	f104 0a19 	add.w	sl, r4, #25
 800b68e:	68e3      	ldr	r3, [r4, #12]
 800b690:	6832      	ldr	r2, [r6, #0]
 800b692:	1a9b      	subs	r3, r3, r2
 800b694:	42ab      	cmp	r3, r5
 800b696:	dc28      	bgt.n	800b6ea <_printf_common+0x9a>
 800b698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b69c:	1e13      	subs	r3, r2, #0
 800b69e:	6822      	ldr	r2, [r4, #0]
 800b6a0:	bf18      	it	ne
 800b6a2:	2301      	movne	r3, #1
 800b6a4:	0692      	lsls	r2, r2, #26
 800b6a6:	d42d      	bmi.n	800b704 <_printf_common+0xb4>
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6b0:	47c0      	blx	r8
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	d020      	beq.n	800b6f8 <_printf_common+0xa8>
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	68e5      	ldr	r5, [r4, #12]
 800b6ba:	f003 0306 	and.w	r3, r3, #6
 800b6be:	2b04      	cmp	r3, #4
 800b6c0:	bf18      	it	ne
 800b6c2:	2500      	movne	r5, #0
 800b6c4:	6832      	ldr	r2, [r6, #0]
 800b6c6:	f04f 0600 	mov.w	r6, #0
 800b6ca:	68a3      	ldr	r3, [r4, #8]
 800b6cc:	bf08      	it	eq
 800b6ce:	1aad      	subeq	r5, r5, r2
 800b6d0:	6922      	ldr	r2, [r4, #16]
 800b6d2:	bf08      	it	eq
 800b6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	bfc4      	itt	gt
 800b6dc:	1a9b      	subgt	r3, r3, r2
 800b6de:	18ed      	addgt	r5, r5, r3
 800b6e0:	341a      	adds	r4, #26
 800b6e2:	42b5      	cmp	r5, r6
 800b6e4:	d11a      	bne.n	800b71c <_printf_common+0xcc>
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	e008      	b.n	800b6fc <_printf_common+0xac>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4652      	mov	r2, sl
 800b6ee:	4649      	mov	r1, r9
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	47c0      	blx	r8
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d103      	bne.n	800b700 <_printf_common+0xb0>
 800b6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b700:	3501      	adds	r5, #1
 800b702:	e7c4      	b.n	800b68e <_printf_common+0x3e>
 800b704:	2030      	movs	r0, #48	; 0x30
 800b706:	18e1      	adds	r1, r4, r3
 800b708:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b712:	4422      	add	r2, r4
 800b714:	3302      	adds	r3, #2
 800b716:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b71a:	e7c5      	b.n	800b6a8 <_printf_common+0x58>
 800b71c:	2301      	movs	r3, #1
 800b71e:	4622      	mov	r2, r4
 800b720:	4649      	mov	r1, r9
 800b722:	4638      	mov	r0, r7
 800b724:	47c0      	blx	r8
 800b726:	3001      	adds	r0, #1
 800b728:	d0e6      	beq.n	800b6f8 <_printf_common+0xa8>
 800b72a:	3601      	adds	r6, #1
 800b72c:	e7d9      	b.n	800b6e2 <_printf_common+0x92>
	...

0800b730 <_printf_i>:
 800b730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b734:	7e0f      	ldrb	r7, [r1, #24]
 800b736:	4691      	mov	r9, r2
 800b738:	2f78      	cmp	r7, #120	; 0x78
 800b73a:	4680      	mov	r8, r0
 800b73c:	460c      	mov	r4, r1
 800b73e:	469a      	mov	sl, r3
 800b740:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b746:	d807      	bhi.n	800b758 <_printf_i+0x28>
 800b748:	2f62      	cmp	r7, #98	; 0x62
 800b74a:	d80a      	bhi.n	800b762 <_printf_i+0x32>
 800b74c:	2f00      	cmp	r7, #0
 800b74e:	f000 80d9 	beq.w	800b904 <_printf_i+0x1d4>
 800b752:	2f58      	cmp	r7, #88	; 0x58
 800b754:	f000 80a4 	beq.w	800b8a0 <_printf_i+0x170>
 800b758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b75c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b760:	e03a      	b.n	800b7d8 <_printf_i+0xa8>
 800b762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b766:	2b15      	cmp	r3, #21
 800b768:	d8f6      	bhi.n	800b758 <_printf_i+0x28>
 800b76a:	a101      	add	r1, pc, #4	; (adr r1, 800b770 <_printf_i+0x40>)
 800b76c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b770:	0800b7c9 	.word	0x0800b7c9
 800b774:	0800b7dd 	.word	0x0800b7dd
 800b778:	0800b759 	.word	0x0800b759
 800b77c:	0800b759 	.word	0x0800b759
 800b780:	0800b759 	.word	0x0800b759
 800b784:	0800b759 	.word	0x0800b759
 800b788:	0800b7dd 	.word	0x0800b7dd
 800b78c:	0800b759 	.word	0x0800b759
 800b790:	0800b759 	.word	0x0800b759
 800b794:	0800b759 	.word	0x0800b759
 800b798:	0800b759 	.word	0x0800b759
 800b79c:	0800b8eb 	.word	0x0800b8eb
 800b7a0:	0800b80d 	.word	0x0800b80d
 800b7a4:	0800b8cd 	.word	0x0800b8cd
 800b7a8:	0800b759 	.word	0x0800b759
 800b7ac:	0800b759 	.word	0x0800b759
 800b7b0:	0800b90d 	.word	0x0800b90d
 800b7b4:	0800b759 	.word	0x0800b759
 800b7b8:	0800b80d 	.word	0x0800b80d
 800b7bc:	0800b759 	.word	0x0800b759
 800b7c0:	0800b759 	.word	0x0800b759
 800b7c4:	0800b8d5 	.word	0x0800b8d5
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	1d1a      	adds	r2, r3, #4
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	602a      	str	r2, [r5, #0]
 800b7d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e0a4      	b.n	800b926 <_printf_i+0x1f6>
 800b7dc:	6820      	ldr	r0, [r4, #0]
 800b7de:	6829      	ldr	r1, [r5, #0]
 800b7e0:	0606      	lsls	r6, r0, #24
 800b7e2:	f101 0304 	add.w	r3, r1, #4
 800b7e6:	d50a      	bpl.n	800b7fe <_printf_i+0xce>
 800b7e8:	680e      	ldr	r6, [r1, #0]
 800b7ea:	602b      	str	r3, [r5, #0]
 800b7ec:	2e00      	cmp	r6, #0
 800b7ee:	da03      	bge.n	800b7f8 <_printf_i+0xc8>
 800b7f0:	232d      	movs	r3, #45	; 0x2d
 800b7f2:	4276      	negs	r6, r6
 800b7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7f8:	230a      	movs	r3, #10
 800b7fa:	485e      	ldr	r0, [pc, #376]	; (800b974 <_printf_i+0x244>)
 800b7fc:	e019      	b.n	800b832 <_printf_i+0x102>
 800b7fe:	680e      	ldr	r6, [r1, #0]
 800b800:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b804:	602b      	str	r3, [r5, #0]
 800b806:	bf18      	it	ne
 800b808:	b236      	sxthne	r6, r6
 800b80a:	e7ef      	b.n	800b7ec <_printf_i+0xbc>
 800b80c:	682b      	ldr	r3, [r5, #0]
 800b80e:	6820      	ldr	r0, [r4, #0]
 800b810:	1d19      	adds	r1, r3, #4
 800b812:	6029      	str	r1, [r5, #0]
 800b814:	0601      	lsls	r1, r0, #24
 800b816:	d501      	bpl.n	800b81c <_printf_i+0xec>
 800b818:	681e      	ldr	r6, [r3, #0]
 800b81a:	e002      	b.n	800b822 <_printf_i+0xf2>
 800b81c:	0646      	lsls	r6, r0, #25
 800b81e:	d5fb      	bpl.n	800b818 <_printf_i+0xe8>
 800b820:	881e      	ldrh	r6, [r3, #0]
 800b822:	2f6f      	cmp	r7, #111	; 0x6f
 800b824:	bf0c      	ite	eq
 800b826:	2308      	moveq	r3, #8
 800b828:	230a      	movne	r3, #10
 800b82a:	4852      	ldr	r0, [pc, #328]	; (800b974 <_printf_i+0x244>)
 800b82c:	2100      	movs	r1, #0
 800b82e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b832:	6865      	ldr	r5, [r4, #4]
 800b834:	2d00      	cmp	r5, #0
 800b836:	bfa8      	it	ge
 800b838:	6821      	ldrge	r1, [r4, #0]
 800b83a:	60a5      	str	r5, [r4, #8]
 800b83c:	bfa4      	itt	ge
 800b83e:	f021 0104 	bicge.w	r1, r1, #4
 800b842:	6021      	strge	r1, [r4, #0]
 800b844:	b90e      	cbnz	r6, 800b84a <_printf_i+0x11a>
 800b846:	2d00      	cmp	r5, #0
 800b848:	d04d      	beq.n	800b8e6 <_printf_i+0x1b6>
 800b84a:	4615      	mov	r5, r2
 800b84c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b850:	fb03 6711 	mls	r7, r3, r1, r6
 800b854:	5dc7      	ldrb	r7, [r0, r7]
 800b856:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b85a:	4637      	mov	r7, r6
 800b85c:	42bb      	cmp	r3, r7
 800b85e:	460e      	mov	r6, r1
 800b860:	d9f4      	bls.n	800b84c <_printf_i+0x11c>
 800b862:	2b08      	cmp	r3, #8
 800b864:	d10b      	bne.n	800b87e <_printf_i+0x14e>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	07de      	lsls	r6, r3, #31
 800b86a:	d508      	bpl.n	800b87e <_printf_i+0x14e>
 800b86c:	6923      	ldr	r3, [r4, #16]
 800b86e:	6861      	ldr	r1, [r4, #4]
 800b870:	4299      	cmp	r1, r3
 800b872:	bfde      	ittt	le
 800b874:	2330      	movle	r3, #48	; 0x30
 800b876:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b87a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b87e:	1b52      	subs	r2, r2, r5
 800b880:	6122      	str	r2, [r4, #16]
 800b882:	464b      	mov	r3, r9
 800b884:	4621      	mov	r1, r4
 800b886:	4640      	mov	r0, r8
 800b888:	f8cd a000 	str.w	sl, [sp]
 800b88c:	aa03      	add	r2, sp, #12
 800b88e:	f7ff fedf 	bl	800b650 <_printf_common>
 800b892:	3001      	adds	r0, #1
 800b894:	d14c      	bne.n	800b930 <_printf_i+0x200>
 800b896:	f04f 30ff 	mov.w	r0, #4294967295
 800b89a:	b004      	add	sp, #16
 800b89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a0:	4834      	ldr	r0, [pc, #208]	; (800b974 <_printf_i+0x244>)
 800b8a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b8a6:	6829      	ldr	r1, [r5, #0]
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8ae:	6029      	str	r1, [r5, #0]
 800b8b0:	061d      	lsls	r5, r3, #24
 800b8b2:	d514      	bpl.n	800b8de <_printf_i+0x1ae>
 800b8b4:	07df      	lsls	r7, r3, #31
 800b8b6:	bf44      	itt	mi
 800b8b8:	f043 0320 	orrmi.w	r3, r3, #32
 800b8bc:	6023      	strmi	r3, [r4, #0]
 800b8be:	b91e      	cbnz	r6, 800b8c8 <_printf_i+0x198>
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	f023 0320 	bic.w	r3, r3, #32
 800b8c6:	6023      	str	r3, [r4, #0]
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	e7af      	b.n	800b82c <_printf_i+0xfc>
 800b8cc:	6823      	ldr	r3, [r4, #0]
 800b8ce:	f043 0320 	orr.w	r3, r3, #32
 800b8d2:	6023      	str	r3, [r4, #0]
 800b8d4:	2378      	movs	r3, #120	; 0x78
 800b8d6:	4828      	ldr	r0, [pc, #160]	; (800b978 <_printf_i+0x248>)
 800b8d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8dc:	e7e3      	b.n	800b8a6 <_printf_i+0x176>
 800b8de:	0659      	lsls	r1, r3, #25
 800b8e0:	bf48      	it	mi
 800b8e2:	b2b6      	uxthmi	r6, r6
 800b8e4:	e7e6      	b.n	800b8b4 <_printf_i+0x184>
 800b8e6:	4615      	mov	r5, r2
 800b8e8:	e7bb      	b.n	800b862 <_printf_i+0x132>
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	6826      	ldr	r6, [r4, #0]
 800b8ee:	1d18      	adds	r0, r3, #4
 800b8f0:	6961      	ldr	r1, [r4, #20]
 800b8f2:	6028      	str	r0, [r5, #0]
 800b8f4:	0635      	lsls	r5, r6, #24
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	d501      	bpl.n	800b8fe <_printf_i+0x1ce>
 800b8fa:	6019      	str	r1, [r3, #0]
 800b8fc:	e002      	b.n	800b904 <_printf_i+0x1d4>
 800b8fe:	0670      	lsls	r0, r6, #25
 800b900:	d5fb      	bpl.n	800b8fa <_printf_i+0x1ca>
 800b902:	8019      	strh	r1, [r3, #0]
 800b904:	2300      	movs	r3, #0
 800b906:	4615      	mov	r5, r2
 800b908:	6123      	str	r3, [r4, #16]
 800b90a:	e7ba      	b.n	800b882 <_printf_i+0x152>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	2100      	movs	r1, #0
 800b910:	1d1a      	adds	r2, r3, #4
 800b912:	602a      	str	r2, [r5, #0]
 800b914:	681d      	ldr	r5, [r3, #0]
 800b916:	6862      	ldr	r2, [r4, #4]
 800b918:	4628      	mov	r0, r5
 800b91a:	f000 fb23 	bl	800bf64 <memchr>
 800b91e:	b108      	cbz	r0, 800b924 <_printf_i+0x1f4>
 800b920:	1b40      	subs	r0, r0, r5
 800b922:	6060      	str	r0, [r4, #4]
 800b924:	6863      	ldr	r3, [r4, #4]
 800b926:	6123      	str	r3, [r4, #16]
 800b928:	2300      	movs	r3, #0
 800b92a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b92e:	e7a8      	b.n	800b882 <_printf_i+0x152>
 800b930:	462a      	mov	r2, r5
 800b932:	4649      	mov	r1, r9
 800b934:	4640      	mov	r0, r8
 800b936:	6923      	ldr	r3, [r4, #16]
 800b938:	47d0      	blx	sl
 800b93a:	3001      	adds	r0, #1
 800b93c:	d0ab      	beq.n	800b896 <_printf_i+0x166>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	079b      	lsls	r3, r3, #30
 800b942:	d413      	bmi.n	800b96c <_printf_i+0x23c>
 800b944:	68e0      	ldr	r0, [r4, #12]
 800b946:	9b03      	ldr	r3, [sp, #12]
 800b948:	4298      	cmp	r0, r3
 800b94a:	bfb8      	it	lt
 800b94c:	4618      	movlt	r0, r3
 800b94e:	e7a4      	b.n	800b89a <_printf_i+0x16a>
 800b950:	2301      	movs	r3, #1
 800b952:	4632      	mov	r2, r6
 800b954:	4649      	mov	r1, r9
 800b956:	4640      	mov	r0, r8
 800b958:	47d0      	blx	sl
 800b95a:	3001      	adds	r0, #1
 800b95c:	d09b      	beq.n	800b896 <_printf_i+0x166>
 800b95e:	3501      	adds	r5, #1
 800b960:	68e3      	ldr	r3, [r4, #12]
 800b962:	9903      	ldr	r1, [sp, #12]
 800b964:	1a5b      	subs	r3, r3, r1
 800b966:	42ab      	cmp	r3, r5
 800b968:	dcf2      	bgt.n	800b950 <_printf_i+0x220>
 800b96a:	e7eb      	b.n	800b944 <_printf_i+0x214>
 800b96c:	2500      	movs	r5, #0
 800b96e:	f104 0619 	add.w	r6, r4, #25
 800b972:	e7f5      	b.n	800b960 <_printf_i+0x230>
 800b974:	0800c49e 	.word	0x0800c49e
 800b978:	0800c4af 	.word	0x0800c4af

0800b97c <_sbrk_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	2300      	movs	r3, #0
 800b980:	4d05      	ldr	r5, [pc, #20]	; (800b998 <_sbrk_r+0x1c>)
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	602b      	str	r3, [r5, #0]
 800b988:	f7f6 f852 	bl	8001a30 <_sbrk>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d102      	bne.n	800b996 <_sbrk_r+0x1a>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b103      	cbz	r3, 800b996 <_sbrk_r+0x1a>
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	20000bb0 	.word	0x20000bb0

0800b99c <__swbuf_r>:
 800b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99e:	460e      	mov	r6, r1
 800b9a0:	4614      	mov	r4, r2
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	b118      	cbz	r0, 800b9ae <__swbuf_r+0x12>
 800b9a6:	6983      	ldr	r3, [r0, #24]
 800b9a8:	b90b      	cbnz	r3, 800b9ae <__swbuf_r+0x12>
 800b9aa:	f000 f9d5 	bl	800bd58 <__sinit>
 800b9ae:	4b21      	ldr	r3, [pc, #132]	; (800ba34 <__swbuf_r+0x98>)
 800b9b0:	429c      	cmp	r4, r3
 800b9b2:	d12b      	bne.n	800ba0c <__swbuf_r+0x70>
 800b9b4:	686c      	ldr	r4, [r5, #4]
 800b9b6:	69a3      	ldr	r3, [r4, #24]
 800b9b8:	60a3      	str	r3, [r4, #8]
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	071a      	lsls	r2, r3, #28
 800b9be:	d52f      	bpl.n	800ba20 <__swbuf_r+0x84>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	b36b      	cbz	r3, 800ba20 <__swbuf_r+0x84>
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	6820      	ldr	r0, [r4, #0]
 800b9c8:	b2f6      	uxtb	r6, r6
 800b9ca:	1ac0      	subs	r0, r0, r3
 800b9cc:	6963      	ldr	r3, [r4, #20]
 800b9ce:	4637      	mov	r7, r6
 800b9d0:	4283      	cmp	r3, r0
 800b9d2:	dc04      	bgt.n	800b9de <__swbuf_r+0x42>
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	f000 f92a 	bl	800bc30 <_fflush_r>
 800b9dc:	bb30      	cbnz	r0, 800ba2c <__swbuf_r+0x90>
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	60a3      	str	r3, [r4, #8]
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	6022      	str	r2, [r4, #0]
 800b9ec:	701e      	strb	r6, [r3, #0]
 800b9ee:	6963      	ldr	r3, [r4, #20]
 800b9f0:	4283      	cmp	r3, r0
 800b9f2:	d004      	beq.n	800b9fe <__swbuf_r+0x62>
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	07db      	lsls	r3, r3, #31
 800b9f8:	d506      	bpl.n	800ba08 <__swbuf_r+0x6c>
 800b9fa:	2e0a      	cmp	r6, #10
 800b9fc:	d104      	bne.n	800ba08 <__swbuf_r+0x6c>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4628      	mov	r0, r5
 800ba02:	f000 f915 	bl	800bc30 <_fflush_r>
 800ba06:	b988      	cbnz	r0, 800ba2c <__swbuf_r+0x90>
 800ba08:	4638      	mov	r0, r7
 800ba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0c:	4b0a      	ldr	r3, [pc, #40]	; (800ba38 <__swbuf_r+0x9c>)
 800ba0e:	429c      	cmp	r4, r3
 800ba10:	d101      	bne.n	800ba16 <__swbuf_r+0x7a>
 800ba12:	68ac      	ldr	r4, [r5, #8]
 800ba14:	e7cf      	b.n	800b9b6 <__swbuf_r+0x1a>
 800ba16:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <__swbuf_r+0xa0>)
 800ba18:	429c      	cmp	r4, r3
 800ba1a:	bf08      	it	eq
 800ba1c:	68ec      	ldreq	r4, [r5, #12]
 800ba1e:	e7ca      	b.n	800b9b6 <__swbuf_r+0x1a>
 800ba20:	4621      	mov	r1, r4
 800ba22:	4628      	mov	r0, r5
 800ba24:	f000 f80c 	bl	800ba40 <__swsetup_r>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d0cb      	beq.n	800b9c4 <__swbuf_r+0x28>
 800ba2c:	f04f 37ff 	mov.w	r7, #4294967295
 800ba30:	e7ea      	b.n	800ba08 <__swbuf_r+0x6c>
 800ba32:	bf00      	nop
 800ba34:	0800c4e0 	.word	0x0800c4e0
 800ba38:	0800c500 	.word	0x0800c500
 800ba3c:	0800c4c0 	.word	0x0800c4c0

0800ba40 <__swsetup_r>:
 800ba40:	4b32      	ldr	r3, [pc, #200]	; (800bb0c <__swsetup_r+0xcc>)
 800ba42:	b570      	push	{r4, r5, r6, lr}
 800ba44:	681d      	ldr	r5, [r3, #0]
 800ba46:	4606      	mov	r6, r0
 800ba48:	460c      	mov	r4, r1
 800ba4a:	b125      	cbz	r5, 800ba56 <__swsetup_r+0x16>
 800ba4c:	69ab      	ldr	r3, [r5, #24]
 800ba4e:	b913      	cbnz	r3, 800ba56 <__swsetup_r+0x16>
 800ba50:	4628      	mov	r0, r5
 800ba52:	f000 f981 	bl	800bd58 <__sinit>
 800ba56:	4b2e      	ldr	r3, [pc, #184]	; (800bb10 <__swsetup_r+0xd0>)
 800ba58:	429c      	cmp	r4, r3
 800ba5a:	d10f      	bne.n	800ba7c <__swsetup_r+0x3c>
 800ba5c:	686c      	ldr	r4, [r5, #4]
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba64:	0719      	lsls	r1, r3, #28
 800ba66:	d42c      	bmi.n	800bac2 <__swsetup_r+0x82>
 800ba68:	06dd      	lsls	r5, r3, #27
 800ba6a:	d411      	bmi.n	800ba90 <__swsetup_r+0x50>
 800ba6c:	2309      	movs	r3, #9
 800ba6e:	6033      	str	r3, [r6, #0]
 800ba70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	e03e      	b.n	800bafa <__swsetup_r+0xba>
 800ba7c:	4b25      	ldr	r3, [pc, #148]	; (800bb14 <__swsetup_r+0xd4>)
 800ba7e:	429c      	cmp	r4, r3
 800ba80:	d101      	bne.n	800ba86 <__swsetup_r+0x46>
 800ba82:	68ac      	ldr	r4, [r5, #8]
 800ba84:	e7eb      	b.n	800ba5e <__swsetup_r+0x1e>
 800ba86:	4b24      	ldr	r3, [pc, #144]	; (800bb18 <__swsetup_r+0xd8>)
 800ba88:	429c      	cmp	r4, r3
 800ba8a:	bf08      	it	eq
 800ba8c:	68ec      	ldreq	r4, [r5, #12]
 800ba8e:	e7e6      	b.n	800ba5e <__swsetup_r+0x1e>
 800ba90:	0758      	lsls	r0, r3, #29
 800ba92:	d512      	bpl.n	800baba <__swsetup_r+0x7a>
 800ba94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba96:	b141      	cbz	r1, 800baaa <__swsetup_r+0x6a>
 800ba98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba9c:	4299      	cmp	r1, r3
 800ba9e:	d002      	beq.n	800baa6 <__swsetup_r+0x66>
 800baa0:	4630      	mov	r0, r6
 800baa2:	f7ff fa45 	bl	800af30 <_free_r>
 800baa6:	2300      	movs	r3, #0
 800baa8:	6363      	str	r3, [r4, #52]	; 0x34
 800baaa:	89a3      	ldrh	r3, [r4, #12]
 800baac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bab0:	81a3      	strh	r3, [r4, #12]
 800bab2:	2300      	movs	r3, #0
 800bab4:	6063      	str	r3, [r4, #4]
 800bab6:	6923      	ldr	r3, [r4, #16]
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	f043 0308 	orr.w	r3, r3, #8
 800bac0:	81a3      	strh	r3, [r4, #12]
 800bac2:	6923      	ldr	r3, [r4, #16]
 800bac4:	b94b      	cbnz	r3, 800bada <__swsetup_r+0x9a>
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bacc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bad0:	d003      	beq.n	800bada <__swsetup_r+0x9a>
 800bad2:	4621      	mov	r1, r4
 800bad4:	4630      	mov	r0, r6
 800bad6:	f000 fa05 	bl	800bee4 <__smakebuf_r>
 800bada:	89a0      	ldrh	r0, [r4, #12]
 800badc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bae0:	f010 0301 	ands.w	r3, r0, #1
 800bae4:	d00a      	beq.n	800bafc <__swsetup_r+0xbc>
 800bae6:	2300      	movs	r3, #0
 800bae8:	60a3      	str	r3, [r4, #8]
 800baea:	6963      	ldr	r3, [r4, #20]
 800baec:	425b      	negs	r3, r3
 800baee:	61a3      	str	r3, [r4, #24]
 800baf0:	6923      	ldr	r3, [r4, #16]
 800baf2:	b943      	cbnz	r3, 800bb06 <__swsetup_r+0xc6>
 800baf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800baf8:	d1ba      	bne.n	800ba70 <__swsetup_r+0x30>
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	0781      	lsls	r1, r0, #30
 800bafe:	bf58      	it	pl
 800bb00:	6963      	ldrpl	r3, [r4, #20]
 800bb02:	60a3      	str	r3, [r4, #8]
 800bb04:	e7f4      	b.n	800baf0 <__swsetup_r+0xb0>
 800bb06:	2000      	movs	r0, #0
 800bb08:	e7f7      	b.n	800bafa <__swsetup_r+0xba>
 800bb0a:	bf00      	nop
 800bb0c:	2000016c 	.word	0x2000016c
 800bb10:	0800c4e0 	.word	0x0800c4e0
 800bb14:	0800c500 	.word	0x0800c500
 800bb18:	0800c4c0 	.word	0x0800c4c0

0800bb1c <abort>:
 800bb1c:	2006      	movs	r0, #6
 800bb1e:	b508      	push	{r3, lr}
 800bb20:	f000 faba 	bl	800c098 <raise>
 800bb24:	2001      	movs	r0, #1
 800bb26:	f7f5 ff10 	bl	800194a <_exit>
	...

0800bb2c <__sflush_r>:
 800bb2c:	898a      	ldrh	r2, [r1, #12]
 800bb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb30:	4605      	mov	r5, r0
 800bb32:	0710      	lsls	r0, r2, #28
 800bb34:	460c      	mov	r4, r1
 800bb36:	d457      	bmi.n	800bbe8 <__sflush_r+0xbc>
 800bb38:	684b      	ldr	r3, [r1, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	dc04      	bgt.n	800bb48 <__sflush_r+0x1c>
 800bb3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	dc01      	bgt.n	800bb48 <__sflush_r+0x1c>
 800bb44:	2000      	movs	r0, #0
 800bb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	d0fa      	beq.n	800bb44 <__sflush_r+0x18>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb54:	682f      	ldr	r7, [r5, #0]
 800bb56:	602b      	str	r3, [r5, #0]
 800bb58:	d032      	beq.n	800bbc0 <__sflush_r+0x94>
 800bb5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb5c:	89a3      	ldrh	r3, [r4, #12]
 800bb5e:	075a      	lsls	r2, r3, #29
 800bb60:	d505      	bpl.n	800bb6e <__sflush_r+0x42>
 800bb62:	6863      	ldr	r3, [r4, #4]
 800bb64:	1ac0      	subs	r0, r0, r3
 800bb66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb68:	b10b      	cbz	r3, 800bb6e <__sflush_r+0x42>
 800bb6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb6c:	1ac0      	subs	r0, r0, r3
 800bb6e:	2300      	movs	r3, #0
 800bb70:	4602      	mov	r2, r0
 800bb72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb74:	4628      	mov	r0, r5
 800bb76:	6a21      	ldr	r1, [r4, #32]
 800bb78:	47b0      	blx	r6
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	d106      	bne.n	800bb8e <__sflush_r+0x62>
 800bb80:	6829      	ldr	r1, [r5, #0]
 800bb82:	291d      	cmp	r1, #29
 800bb84:	d82c      	bhi.n	800bbe0 <__sflush_r+0xb4>
 800bb86:	4a29      	ldr	r2, [pc, #164]	; (800bc2c <__sflush_r+0x100>)
 800bb88:	40ca      	lsrs	r2, r1
 800bb8a:	07d6      	lsls	r6, r2, #31
 800bb8c:	d528      	bpl.n	800bbe0 <__sflush_r+0xb4>
 800bb8e:	2200      	movs	r2, #0
 800bb90:	6062      	str	r2, [r4, #4]
 800bb92:	6922      	ldr	r2, [r4, #16]
 800bb94:	04d9      	lsls	r1, r3, #19
 800bb96:	6022      	str	r2, [r4, #0]
 800bb98:	d504      	bpl.n	800bba4 <__sflush_r+0x78>
 800bb9a:	1c42      	adds	r2, r0, #1
 800bb9c:	d101      	bne.n	800bba2 <__sflush_r+0x76>
 800bb9e:	682b      	ldr	r3, [r5, #0]
 800bba0:	b903      	cbnz	r3, 800bba4 <__sflush_r+0x78>
 800bba2:	6560      	str	r0, [r4, #84]	; 0x54
 800bba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bba6:	602f      	str	r7, [r5, #0]
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	d0cb      	beq.n	800bb44 <__sflush_r+0x18>
 800bbac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbb0:	4299      	cmp	r1, r3
 800bbb2:	d002      	beq.n	800bbba <__sflush_r+0x8e>
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f7ff f9bb 	bl	800af30 <_free_r>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	6360      	str	r0, [r4, #52]	; 0x34
 800bbbe:	e7c2      	b.n	800bb46 <__sflush_r+0x1a>
 800bbc0:	6a21      	ldr	r1, [r4, #32]
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	47b0      	blx	r6
 800bbc8:	1c41      	adds	r1, r0, #1
 800bbca:	d1c7      	bne.n	800bb5c <__sflush_r+0x30>
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d0c4      	beq.n	800bb5c <__sflush_r+0x30>
 800bbd2:	2b1d      	cmp	r3, #29
 800bbd4:	d001      	beq.n	800bbda <__sflush_r+0xae>
 800bbd6:	2b16      	cmp	r3, #22
 800bbd8:	d101      	bne.n	800bbde <__sflush_r+0xb2>
 800bbda:	602f      	str	r7, [r5, #0]
 800bbdc:	e7b2      	b.n	800bb44 <__sflush_r+0x18>
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe4:	81a3      	strh	r3, [r4, #12]
 800bbe6:	e7ae      	b.n	800bb46 <__sflush_r+0x1a>
 800bbe8:	690f      	ldr	r7, [r1, #16]
 800bbea:	2f00      	cmp	r7, #0
 800bbec:	d0aa      	beq.n	800bb44 <__sflush_r+0x18>
 800bbee:	0793      	lsls	r3, r2, #30
 800bbf0:	bf18      	it	ne
 800bbf2:	2300      	movne	r3, #0
 800bbf4:	680e      	ldr	r6, [r1, #0]
 800bbf6:	bf08      	it	eq
 800bbf8:	694b      	ldreq	r3, [r1, #20]
 800bbfa:	1bf6      	subs	r6, r6, r7
 800bbfc:	600f      	str	r7, [r1, #0]
 800bbfe:	608b      	str	r3, [r1, #8]
 800bc00:	2e00      	cmp	r6, #0
 800bc02:	dd9f      	ble.n	800bb44 <__sflush_r+0x18>
 800bc04:	4633      	mov	r3, r6
 800bc06:	463a      	mov	r2, r7
 800bc08:	4628      	mov	r0, r5
 800bc0a:	6a21      	ldr	r1, [r4, #32]
 800bc0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bc10:	47e0      	blx	ip
 800bc12:	2800      	cmp	r0, #0
 800bc14:	dc06      	bgt.n	800bc24 <__sflush_r+0xf8>
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	e790      	b.n	800bb46 <__sflush_r+0x1a>
 800bc24:	4407      	add	r7, r0
 800bc26:	1a36      	subs	r6, r6, r0
 800bc28:	e7ea      	b.n	800bc00 <__sflush_r+0xd4>
 800bc2a:	bf00      	nop
 800bc2c:	20400001 	.word	0x20400001

0800bc30 <_fflush_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	690b      	ldr	r3, [r1, #16]
 800bc34:	4605      	mov	r5, r0
 800bc36:	460c      	mov	r4, r1
 800bc38:	b913      	cbnz	r3, 800bc40 <_fflush_r+0x10>
 800bc3a:	2500      	movs	r5, #0
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	b118      	cbz	r0, 800bc4a <_fflush_r+0x1a>
 800bc42:	6983      	ldr	r3, [r0, #24]
 800bc44:	b90b      	cbnz	r3, 800bc4a <_fflush_r+0x1a>
 800bc46:	f000 f887 	bl	800bd58 <__sinit>
 800bc4a:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <_fflush_r+0x6c>)
 800bc4c:	429c      	cmp	r4, r3
 800bc4e:	d11b      	bne.n	800bc88 <_fflush_r+0x58>
 800bc50:	686c      	ldr	r4, [r5, #4]
 800bc52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0ef      	beq.n	800bc3a <_fflush_r+0xa>
 800bc5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc5c:	07d0      	lsls	r0, r2, #31
 800bc5e:	d404      	bmi.n	800bc6a <_fflush_r+0x3a>
 800bc60:	0599      	lsls	r1, r3, #22
 800bc62:	d402      	bmi.n	800bc6a <_fflush_r+0x3a>
 800bc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc66:	f000 f915 	bl	800be94 <__retarget_lock_acquire_recursive>
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	f7ff ff5d 	bl	800bb2c <__sflush_r>
 800bc72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc74:	4605      	mov	r5, r0
 800bc76:	07da      	lsls	r2, r3, #31
 800bc78:	d4e0      	bmi.n	800bc3c <_fflush_r+0xc>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	059b      	lsls	r3, r3, #22
 800bc7e:	d4dd      	bmi.n	800bc3c <_fflush_r+0xc>
 800bc80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc82:	f000 f908 	bl	800be96 <__retarget_lock_release_recursive>
 800bc86:	e7d9      	b.n	800bc3c <_fflush_r+0xc>
 800bc88:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <_fflush_r+0x70>)
 800bc8a:	429c      	cmp	r4, r3
 800bc8c:	d101      	bne.n	800bc92 <_fflush_r+0x62>
 800bc8e:	68ac      	ldr	r4, [r5, #8]
 800bc90:	e7df      	b.n	800bc52 <_fflush_r+0x22>
 800bc92:	4b04      	ldr	r3, [pc, #16]	; (800bca4 <_fflush_r+0x74>)
 800bc94:	429c      	cmp	r4, r3
 800bc96:	bf08      	it	eq
 800bc98:	68ec      	ldreq	r4, [r5, #12]
 800bc9a:	e7da      	b.n	800bc52 <_fflush_r+0x22>
 800bc9c:	0800c4e0 	.word	0x0800c4e0
 800bca0:	0800c500 	.word	0x0800c500
 800bca4:	0800c4c0 	.word	0x0800c4c0

0800bca8 <std>:
 800bca8:	2300      	movs	r3, #0
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	4604      	mov	r4, r0
 800bcae:	e9c0 3300 	strd	r3, r3, [r0]
 800bcb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcb6:	6083      	str	r3, [r0, #8]
 800bcb8:	8181      	strh	r1, [r0, #12]
 800bcba:	6643      	str	r3, [r0, #100]	; 0x64
 800bcbc:	81c2      	strh	r2, [r0, #14]
 800bcbe:	6183      	str	r3, [r0, #24]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	2208      	movs	r2, #8
 800bcc4:	305c      	adds	r0, #92	; 0x5c
 800bcc6:	f7fe ffe9 	bl	800ac9c <memset>
 800bcca:	4b05      	ldr	r3, [pc, #20]	; (800bce0 <std+0x38>)
 800bccc:	6224      	str	r4, [r4, #32]
 800bcce:	6263      	str	r3, [r4, #36]	; 0x24
 800bcd0:	4b04      	ldr	r3, [pc, #16]	; (800bce4 <std+0x3c>)
 800bcd2:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcd4:	4b04      	ldr	r3, [pc, #16]	; (800bce8 <std+0x40>)
 800bcd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcd8:	4b04      	ldr	r3, [pc, #16]	; (800bcec <std+0x44>)
 800bcda:	6323      	str	r3, [r4, #48]	; 0x30
 800bcdc:	bd10      	pop	{r4, pc}
 800bcde:	bf00      	nop
 800bce0:	0800c0d1 	.word	0x0800c0d1
 800bce4:	0800c0f3 	.word	0x0800c0f3
 800bce8:	0800c12b 	.word	0x0800c12b
 800bcec:	0800c14f 	.word	0x0800c14f

0800bcf0 <_cleanup_r>:
 800bcf0:	4901      	ldr	r1, [pc, #4]	; (800bcf8 <_cleanup_r+0x8>)
 800bcf2:	f000 b8af 	b.w	800be54 <_fwalk_reent>
 800bcf6:	bf00      	nop
 800bcf8:	0800bc31 	.word	0x0800bc31

0800bcfc <__sfmoreglue>:
 800bcfc:	2268      	movs	r2, #104	; 0x68
 800bcfe:	b570      	push	{r4, r5, r6, lr}
 800bd00:	1e4d      	subs	r5, r1, #1
 800bd02:	4355      	muls	r5, r2
 800bd04:	460e      	mov	r6, r1
 800bd06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd0a:	f7ff f979 	bl	800b000 <_malloc_r>
 800bd0e:	4604      	mov	r4, r0
 800bd10:	b140      	cbz	r0, 800bd24 <__sfmoreglue+0x28>
 800bd12:	2100      	movs	r1, #0
 800bd14:	e9c0 1600 	strd	r1, r6, [r0]
 800bd18:	300c      	adds	r0, #12
 800bd1a:	60a0      	str	r0, [r4, #8]
 800bd1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd20:	f7fe ffbc 	bl	800ac9c <memset>
 800bd24:	4620      	mov	r0, r4
 800bd26:	bd70      	pop	{r4, r5, r6, pc}

0800bd28 <__sfp_lock_acquire>:
 800bd28:	4801      	ldr	r0, [pc, #4]	; (800bd30 <__sfp_lock_acquire+0x8>)
 800bd2a:	f000 b8b3 	b.w	800be94 <__retarget_lock_acquire_recursive>
 800bd2e:	bf00      	nop
 800bd30:	20000bad 	.word	0x20000bad

0800bd34 <__sfp_lock_release>:
 800bd34:	4801      	ldr	r0, [pc, #4]	; (800bd3c <__sfp_lock_release+0x8>)
 800bd36:	f000 b8ae 	b.w	800be96 <__retarget_lock_release_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	20000bad 	.word	0x20000bad

0800bd40 <__sinit_lock_acquire>:
 800bd40:	4801      	ldr	r0, [pc, #4]	; (800bd48 <__sinit_lock_acquire+0x8>)
 800bd42:	f000 b8a7 	b.w	800be94 <__retarget_lock_acquire_recursive>
 800bd46:	bf00      	nop
 800bd48:	20000bae 	.word	0x20000bae

0800bd4c <__sinit_lock_release>:
 800bd4c:	4801      	ldr	r0, [pc, #4]	; (800bd54 <__sinit_lock_release+0x8>)
 800bd4e:	f000 b8a2 	b.w	800be96 <__retarget_lock_release_recursive>
 800bd52:	bf00      	nop
 800bd54:	20000bae 	.word	0x20000bae

0800bd58 <__sinit>:
 800bd58:	b510      	push	{r4, lr}
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	f7ff fff0 	bl	800bd40 <__sinit_lock_acquire>
 800bd60:	69a3      	ldr	r3, [r4, #24]
 800bd62:	b11b      	cbz	r3, 800bd6c <__sinit+0x14>
 800bd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd68:	f7ff bff0 	b.w	800bd4c <__sinit_lock_release>
 800bd6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd70:	6523      	str	r3, [r4, #80]	; 0x50
 800bd72:	4b13      	ldr	r3, [pc, #76]	; (800bdc0 <__sinit+0x68>)
 800bd74:	4a13      	ldr	r2, [pc, #76]	; (800bdc4 <__sinit+0x6c>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd7a:	42a3      	cmp	r3, r4
 800bd7c:	bf08      	it	eq
 800bd7e:	2301      	moveq	r3, #1
 800bd80:	4620      	mov	r0, r4
 800bd82:	bf08      	it	eq
 800bd84:	61a3      	streq	r3, [r4, #24]
 800bd86:	f000 f81f 	bl	800bdc8 <__sfp>
 800bd8a:	6060      	str	r0, [r4, #4]
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f000 f81b 	bl	800bdc8 <__sfp>
 800bd92:	60a0      	str	r0, [r4, #8]
 800bd94:	4620      	mov	r0, r4
 800bd96:	f000 f817 	bl	800bdc8 <__sfp>
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	2104      	movs	r1, #4
 800bd9e:	60e0      	str	r0, [r4, #12]
 800bda0:	6860      	ldr	r0, [r4, #4]
 800bda2:	f7ff ff81 	bl	800bca8 <std>
 800bda6:	2201      	movs	r2, #1
 800bda8:	2109      	movs	r1, #9
 800bdaa:	68a0      	ldr	r0, [r4, #8]
 800bdac:	f7ff ff7c 	bl	800bca8 <std>
 800bdb0:	2202      	movs	r2, #2
 800bdb2:	2112      	movs	r1, #18
 800bdb4:	68e0      	ldr	r0, [r4, #12]
 800bdb6:	f7ff ff77 	bl	800bca8 <std>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	61a3      	str	r3, [r4, #24]
 800bdbe:	e7d1      	b.n	800bd64 <__sinit+0xc>
 800bdc0:	0800c2d8 	.word	0x0800c2d8
 800bdc4:	0800bcf1 	.word	0x0800bcf1

0800bdc8 <__sfp>:
 800bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdca:	4607      	mov	r7, r0
 800bdcc:	f7ff ffac 	bl	800bd28 <__sfp_lock_acquire>
 800bdd0:	4b1e      	ldr	r3, [pc, #120]	; (800be4c <__sfp+0x84>)
 800bdd2:	681e      	ldr	r6, [r3, #0]
 800bdd4:	69b3      	ldr	r3, [r6, #24]
 800bdd6:	b913      	cbnz	r3, 800bdde <__sfp+0x16>
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f7ff ffbd 	bl	800bd58 <__sinit>
 800bdde:	3648      	adds	r6, #72	; 0x48
 800bde0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	d503      	bpl.n	800bdf0 <__sfp+0x28>
 800bde8:	6833      	ldr	r3, [r6, #0]
 800bdea:	b30b      	cbz	r3, 800be30 <__sfp+0x68>
 800bdec:	6836      	ldr	r6, [r6, #0]
 800bdee:	e7f7      	b.n	800bde0 <__sfp+0x18>
 800bdf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bdf4:	b9d5      	cbnz	r5, 800be2c <__sfp+0x64>
 800bdf6:	4b16      	ldr	r3, [pc, #88]	; (800be50 <__sfp+0x88>)
 800bdf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bdfc:	60e3      	str	r3, [r4, #12]
 800bdfe:	6665      	str	r5, [r4, #100]	; 0x64
 800be00:	f000 f847 	bl	800be92 <__retarget_lock_init_recursive>
 800be04:	f7ff ff96 	bl	800bd34 <__sfp_lock_release>
 800be08:	2208      	movs	r2, #8
 800be0a:	4629      	mov	r1, r5
 800be0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be14:	6025      	str	r5, [r4, #0]
 800be16:	61a5      	str	r5, [r4, #24]
 800be18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be1c:	f7fe ff3e 	bl	800ac9c <memset>
 800be20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be28:	4620      	mov	r0, r4
 800be2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be2c:	3468      	adds	r4, #104	; 0x68
 800be2e:	e7d9      	b.n	800bde4 <__sfp+0x1c>
 800be30:	2104      	movs	r1, #4
 800be32:	4638      	mov	r0, r7
 800be34:	f7ff ff62 	bl	800bcfc <__sfmoreglue>
 800be38:	4604      	mov	r4, r0
 800be3a:	6030      	str	r0, [r6, #0]
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d1d5      	bne.n	800bdec <__sfp+0x24>
 800be40:	f7ff ff78 	bl	800bd34 <__sfp_lock_release>
 800be44:	230c      	movs	r3, #12
 800be46:	603b      	str	r3, [r7, #0]
 800be48:	e7ee      	b.n	800be28 <__sfp+0x60>
 800be4a:	bf00      	nop
 800be4c:	0800c2d8 	.word	0x0800c2d8
 800be50:	ffff0001 	.word	0xffff0001

0800be54 <_fwalk_reent>:
 800be54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be58:	4606      	mov	r6, r0
 800be5a:	4688      	mov	r8, r1
 800be5c:	2700      	movs	r7, #0
 800be5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be66:	f1b9 0901 	subs.w	r9, r9, #1
 800be6a:	d505      	bpl.n	800be78 <_fwalk_reent+0x24>
 800be6c:	6824      	ldr	r4, [r4, #0]
 800be6e:	2c00      	cmp	r4, #0
 800be70:	d1f7      	bne.n	800be62 <_fwalk_reent+0xe>
 800be72:	4638      	mov	r0, r7
 800be74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be78:	89ab      	ldrh	r3, [r5, #12]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d907      	bls.n	800be8e <_fwalk_reent+0x3a>
 800be7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be82:	3301      	adds	r3, #1
 800be84:	d003      	beq.n	800be8e <_fwalk_reent+0x3a>
 800be86:	4629      	mov	r1, r5
 800be88:	4630      	mov	r0, r6
 800be8a:	47c0      	blx	r8
 800be8c:	4307      	orrs	r7, r0
 800be8e:	3568      	adds	r5, #104	; 0x68
 800be90:	e7e9      	b.n	800be66 <_fwalk_reent+0x12>

0800be92 <__retarget_lock_init_recursive>:
 800be92:	4770      	bx	lr

0800be94 <__retarget_lock_acquire_recursive>:
 800be94:	4770      	bx	lr

0800be96 <__retarget_lock_release_recursive>:
 800be96:	4770      	bx	lr

0800be98 <__swhatbuf_r>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	460e      	mov	r6, r1
 800be9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea0:	4614      	mov	r4, r2
 800bea2:	2900      	cmp	r1, #0
 800bea4:	461d      	mov	r5, r3
 800bea6:	b096      	sub	sp, #88	; 0x58
 800bea8:	da08      	bge.n	800bebc <__swhatbuf_r+0x24>
 800beaa:	2200      	movs	r2, #0
 800beac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800beb0:	602a      	str	r2, [r5, #0]
 800beb2:	061a      	lsls	r2, r3, #24
 800beb4:	d410      	bmi.n	800bed8 <__swhatbuf_r+0x40>
 800beb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beba:	e00e      	b.n	800beda <__swhatbuf_r+0x42>
 800bebc:	466a      	mov	r2, sp
 800bebe:	f000 f96d 	bl	800c19c <_fstat_r>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	dbf1      	blt.n	800beaa <__swhatbuf_r+0x12>
 800bec6:	9a01      	ldr	r2, [sp, #4]
 800bec8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800becc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bed0:	425a      	negs	r2, r3
 800bed2:	415a      	adcs	r2, r3
 800bed4:	602a      	str	r2, [r5, #0]
 800bed6:	e7ee      	b.n	800beb6 <__swhatbuf_r+0x1e>
 800bed8:	2340      	movs	r3, #64	; 0x40
 800beda:	2000      	movs	r0, #0
 800bedc:	6023      	str	r3, [r4, #0]
 800bede:	b016      	add	sp, #88	; 0x58
 800bee0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bee4 <__smakebuf_r>:
 800bee4:	898b      	ldrh	r3, [r1, #12]
 800bee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bee8:	079d      	lsls	r5, r3, #30
 800beea:	4606      	mov	r6, r0
 800beec:	460c      	mov	r4, r1
 800beee:	d507      	bpl.n	800bf00 <__smakebuf_r+0x1c>
 800bef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bef4:	6023      	str	r3, [r4, #0]
 800bef6:	6123      	str	r3, [r4, #16]
 800bef8:	2301      	movs	r3, #1
 800befa:	6163      	str	r3, [r4, #20]
 800befc:	b002      	add	sp, #8
 800befe:	bd70      	pop	{r4, r5, r6, pc}
 800bf00:	466a      	mov	r2, sp
 800bf02:	ab01      	add	r3, sp, #4
 800bf04:	f7ff ffc8 	bl	800be98 <__swhatbuf_r>
 800bf08:	9900      	ldr	r1, [sp, #0]
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	f7ff f877 	bl	800b000 <_malloc_r>
 800bf12:	b948      	cbnz	r0, 800bf28 <__smakebuf_r+0x44>
 800bf14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf18:	059a      	lsls	r2, r3, #22
 800bf1a:	d4ef      	bmi.n	800befc <__smakebuf_r+0x18>
 800bf1c:	f023 0303 	bic.w	r3, r3, #3
 800bf20:	f043 0302 	orr.w	r3, r3, #2
 800bf24:	81a3      	strh	r3, [r4, #12]
 800bf26:	e7e3      	b.n	800bef0 <__smakebuf_r+0xc>
 800bf28:	4b0d      	ldr	r3, [pc, #52]	; (800bf60 <__smakebuf_r+0x7c>)
 800bf2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	6020      	str	r0, [r4, #0]
 800bf30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf34:	81a3      	strh	r3, [r4, #12]
 800bf36:	9b00      	ldr	r3, [sp, #0]
 800bf38:	6120      	str	r0, [r4, #16]
 800bf3a:	6163      	str	r3, [r4, #20]
 800bf3c:	9b01      	ldr	r3, [sp, #4]
 800bf3e:	b15b      	cbz	r3, 800bf58 <__smakebuf_r+0x74>
 800bf40:	4630      	mov	r0, r6
 800bf42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf46:	f000 f93b 	bl	800c1c0 <_isatty_r>
 800bf4a:	b128      	cbz	r0, 800bf58 <__smakebuf_r+0x74>
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	f023 0303 	bic.w	r3, r3, #3
 800bf52:	f043 0301 	orr.w	r3, r3, #1
 800bf56:	81a3      	strh	r3, [r4, #12]
 800bf58:	89a0      	ldrh	r0, [r4, #12]
 800bf5a:	4305      	orrs	r5, r0
 800bf5c:	81a5      	strh	r5, [r4, #12]
 800bf5e:	e7cd      	b.n	800befc <__smakebuf_r+0x18>
 800bf60:	0800bcf1 	.word	0x0800bcf1

0800bf64 <memchr>:
 800bf64:	4603      	mov	r3, r0
 800bf66:	b510      	push	{r4, lr}
 800bf68:	b2c9      	uxtb	r1, r1
 800bf6a:	4402      	add	r2, r0
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	4618      	mov	r0, r3
 800bf70:	d101      	bne.n	800bf76 <memchr+0x12>
 800bf72:	2000      	movs	r0, #0
 800bf74:	e003      	b.n	800bf7e <memchr+0x1a>
 800bf76:	7804      	ldrb	r4, [r0, #0]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	428c      	cmp	r4, r1
 800bf7c:	d1f6      	bne.n	800bf6c <memchr+0x8>
 800bf7e:	bd10      	pop	{r4, pc}

0800bf80 <memcpy>:
 800bf80:	440a      	add	r2, r1
 800bf82:	4291      	cmp	r1, r2
 800bf84:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf88:	d100      	bne.n	800bf8c <memcpy+0xc>
 800bf8a:	4770      	bx	lr
 800bf8c:	b510      	push	{r4, lr}
 800bf8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf92:	4291      	cmp	r1, r2
 800bf94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf98:	d1f9      	bne.n	800bf8e <memcpy+0xe>
 800bf9a:	bd10      	pop	{r4, pc}

0800bf9c <memmove>:
 800bf9c:	4288      	cmp	r0, r1
 800bf9e:	b510      	push	{r4, lr}
 800bfa0:	eb01 0402 	add.w	r4, r1, r2
 800bfa4:	d902      	bls.n	800bfac <memmove+0x10>
 800bfa6:	4284      	cmp	r4, r0
 800bfa8:	4623      	mov	r3, r4
 800bfaa:	d807      	bhi.n	800bfbc <memmove+0x20>
 800bfac:	1e43      	subs	r3, r0, #1
 800bfae:	42a1      	cmp	r1, r4
 800bfb0:	d008      	beq.n	800bfc4 <memmove+0x28>
 800bfb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfba:	e7f8      	b.n	800bfae <memmove+0x12>
 800bfbc:	4601      	mov	r1, r0
 800bfbe:	4402      	add	r2, r0
 800bfc0:	428a      	cmp	r2, r1
 800bfc2:	d100      	bne.n	800bfc6 <memmove+0x2a>
 800bfc4:	bd10      	pop	{r4, pc}
 800bfc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfce:	e7f7      	b.n	800bfc0 <memmove+0x24>

0800bfd0 <__malloc_lock>:
 800bfd0:	4801      	ldr	r0, [pc, #4]	; (800bfd8 <__malloc_lock+0x8>)
 800bfd2:	f7ff bf5f 	b.w	800be94 <__retarget_lock_acquire_recursive>
 800bfd6:	bf00      	nop
 800bfd8:	20000bac 	.word	0x20000bac

0800bfdc <__malloc_unlock>:
 800bfdc:	4801      	ldr	r0, [pc, #4]	; (800bfe4 <__malloc_unlock+0x8>)
 800bfde:	f7ff bf5a 	b.w	800be96 <__retarget_lock_release_recursive>
 800bfe2:	bf00      	nop
 800bfe4:	20000bac 	.word	0x20000bac

0800bfe8 <_realloc_r>:
 800bfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfec:	4680      	mov	r8, r0
 800bfee:	4614      	mov	r4, r2
 800bff0:	460e      	mov	r6, r1
 800bff2:	b921      	cbnz	r1, 800bffe <_realloc_r+0x16>
 800bff4:	4611      	mov	r1, r2
 800bff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bffa:	f7ff b801 	b.w	800b000 <_malloc_r>
 800bffe:	b92a      	cbnz	r2, 800c00c <_realloc_r+0x24>
 800c000:	f7fe ff96 	bl	800af30 <_free_r>
 800c004:	4625      	mov	r5, r4
 800c006:	4628      	mov	r0, r5
 800c008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c00c:	f000 f8fa 	bl	800c204 <_malloc_usable_size_r>
 800c010:	4284      	cmp	r4, r0
 800c012:	4607      	mov	r7, r0
 800c014:	d802      	bhi.n	800c01c <_realloc_r+0x34>
 800c016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c01a:	d812      	bhi.n	800c042 <_realloc_r+0x5a>
 800c01c:	4621      	mov	r1, r4
 800c01e:	4640      	mov	r0, r8
 800c020:	f7fe ffee 	bl	800b000 <_malloc_r>
 800c024:	4605      	mov	r5, r0
 800c026:	2800      	cmp	r0, #0
 800c028:	d0ed      	beq.n	800c006 <_realloc_r+0x1e>
 800c02a:	42bc      	cmp	r4, r7
 800c02c:	4622      	mov	r2, r4
 800c02e:	4631      	mov	r1, r6
 800c030:	bf28      	it	cs
 800c032:	463a      	movcs	r2, r7
 800c034:	f7ff ffa4 	bl	800bf80 <memcpy>
 800c038:	4631      	mov	r1, r6
 800c03a:	4640      	mov	r0, r8
 800c03c:	f7fe ff78 	bl	800af30 <_free_r>
 800c040:	e7e1      	b.n	800c006 <_realloc_r+0x1e>
 800c042:	4635      	mov	r5, r6
 800c044:	e7df      	b.n	800c006 <_realloc_r+0x1e>

0800c046 <_raise_r>:
 800c046:	291f      	cmp	r1, #31
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	4604      	mov	r4, r0
 800c04c:	460d      	mov	r5, r1
 800c04e:	d904      	bls.n	800c05a <_raise_r+0x14>
 800c050:	2316      	movs	r3, #22
 800c052:	6003      	str	r3, [r0, #0]
 800c054:	f04f 30ff 	mov.w	r0, #4294967295
 800c058:	bd38      	pop	{r3, r4, r5, pc}
 800c05a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c05c:	b112      	cbz	r2, 800c064 <_raise_r+0x1e>
 800c05e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c062:	b94b      	cbnz	r3, 800c078 <_raise_r+0x32>
 800c064:	4620      	mov	r0, r4
 800c066:	f000 f831 	bl	800c0cc <_getpid_r>
 800c06a:	462a      	mov	r2, r5
 800c06c:	4601      	mov	r1, r0
 800c06e:	4620      	mov	r0, r4
 800c070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c074:	f000 b818 	b.w	800c0a8 <_kill_r>
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d00a      	beq.n	800c092 <_raise_r+0x4c>
 800c07c:	1c59      	adds	r1, r3, #1
 800c07e:	d103      	bne.n	800c088 <_raise_r+0x42>
 800c080:	2316      	movs	r3, #22
 800c082:	6003      	str	r3, [r0, #0]
 800c084:	2001      	movs	r0, #1
 800c086:	e7e7      	b.n	800c058 <_raise_r+0x12>
 800c088:	2400      	movs	r4, #0
 800c08a:	4628      	mov	r0, r5
 800c08c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c090:	4798      	blx	r3
 800c092:	2000      	movs	r0, #0
 800c094:	e7e0      	b.n	800c058 <_raise_r+0x12>
	...

0800c098 <raise>:
 800c098:	4b02      	ldr	r3, [pc, #8]	; (800c0a4 <raise+0xc>)
 800c09a:	4601      	mov	r1, r0
 800c09c:	6818      	ldr	r0, [r3, #0]
 800c09e:	f7ff bfd2 	b.w	800c046 <_raise_r>
 800c0a2:	bf00      	nop
 800c0a4:	2000016c 	.word	0x2000016c

0800c0a8 <_kill_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	4d06      	ldr	r5, [pc, #24]	; (800c0c8 <_kill_r+0x20>)
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	f7f5 fc38 	bl	800192a <_kill>
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	d102      	bne.n	800c0c4 <_kill_r+0x1c>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	b103      	cbz	r3, 800c0c4 <_kill_r+0x1c>
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20000bb0 	.word	0x20000bb0

0800c0cc <_getpid_r>:
 800c0cc:	f7f5 bc26 	b.w	800191c <_getpid>

0800c0d0 <__sread>:
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d8:	f000 f89c 	bl	800c214 <_read_r>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	bfab      	itete	ge
 800c0e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c0e4:	181b      	addge	r3, r3, r0
 800c0e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0ea:	bfac      	ite	ge
 800c0ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0ee:	81a3      	strhlt	r3, [r4, #12]
 800c0f0:	bd10      	pop	{r4, pc}

0800c0f2 <__swrite>:
 800c0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f6:	461f      	mov	r7, r3
 800c0f8:	898b      	ldrh	r3, [r1, #12]
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	05db      	lsls	r3, r3, #23
 800c0fe:	460c      	mov	r4, r1
 800c100:	4616      	mov	r6, r2
 800c102:	d505      	bpl.n	800c110 <__swrite+0x1e>
 800c104:	2302      	movs	r3, #2
 800c106:	2200      	movs	r2, #0
 800c108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c10c:	f000 f868 	bl	800c1e0 <_lseek_r>
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	4632      	mov	r2, r6
 800c114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c118:	81a3      	strh	r3, [r4, #12]
 800c11a:	4628      	mov	r0, r5
 800c11c:	463b      	mov	r3, r7
 800c11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c126:	f000 b817 	b.w	800c158 <_write_r>

0800c12a <__sseek>:
 800c12a:	b510      	push	{r4, lr}
 800c12c:	460c      	mov	r4, r1
 800c12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c132:	f000 f855 	bl	800c1e0 <_lseek_r>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	bf15      	itete	ne
 800c13c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c13e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c146:	81a3      	strheq	r3, [r4, #12]
 800c148:	bf18      	it	ne
 800c14a:	81a3      	strhne	r3, [r4, #12]
 800c14c:	bd10      	pop	{r4, pc}

0800c14e <__sclose>:
 800c14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c152:	f000 b813 	b.w	800c17c <_close_r>
	...

0800c158 <_write_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4604      	mov	r4, r0
 800c15c:	4608      	mov	r0, r1
 800c15e:	4611      	mov	r1, r2
 800c160:	2200      	movs	r2, #0
 800c162:	4d05      	ldr	r5, [pc, #20]	; (800c178 <_write_r+0x20>)
 800c164:	602a      	str	r2, [r5, #0]
 800c166:	461a      	mov	r2, r3
 800c168:	f7f5 fc16 	bl	8001998 <_write>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d102      	bne.n	800c176 <_write_r+0x1e>
 800c170:	682b      	ldr	r3, [r5, #0]
 800c172:	b103      	cbz	r3, 800c176 <_write_r+0x1e>
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	20000bb0 	.word	0x20000bb0

0800c17c <_close_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	2300      	movs	r3, #0
 800c180:	4d05      	ldr	r5, [pc, #20]	; (800c198 <_close_r+0x1c>)
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	602b      	str	r3, [r5, #0]
 800c188:	f7f5 fc22 	bl	80019d0 <_close>
 800c18c:	1c43      	adds	r3, r0, #1
 800c18e:	d102      	bne.n	800c196 <_close_r+0x1a>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	b103      	cbz	r3, 800c196 <_close_r+0x1a>
 800c194:	6023      	str	r3, [r4, #0]
 800c196:	bd38      	pop	{r3, r4, r5, pc}
 800c198:	20000bb0 	.word	0x20000bb0

0800c19c <_fstat_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	2300      	movs	r3, #0
 800c1a0:	4d06      	ldr	r5, [pc, #24]	; (800c1bc <_fstat_r+0x20>)
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	4611      	mov	r1, r2
 800c1a8:	602b      	str	r3, [r5, #0]
 800c1aa:	f7f5 fc1c 	bl	80019e6 <_fstat>
 800c1ae:	1c43      	adds	r3, r0, #1
 800c1b0:	d102      	bne.n	800c1b8 <_fstat_r+0x1c>
 800c1b2:	682b      	ldr	r3, [r5, #0]
 800c1b4:	b103      	cbz	r3, 800c1b8 <_fstat_r+0x1c>
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20000bb0 	.word	0x20000bb0

0800c1c0 <_isatty_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4d05      	ldr	r5, [pc, #20]	; (800c1dc <_isatty_r+0x1c>)
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	602b      	str	r3, [r5, #0]
 800c1cc:	f7f5 fc1a 	bl	8001a04 <_isatty>
 800c1d0:	1c43      	adds	r3, r0, #1
 800c1d2:	d102      	bne.n	800c1da <_isatty_r+0x1a>
 800c1d4:	682b      	ldr	r3, [r5, #0]
 800c1d6:	b103      	cbz	r3, 800c1da <_isatty_r+0x1a>
 800c1d8:	6023      	str	r3, [r4, #0]
 800c1da:	bd38      	pop	{r3, r4, r5, pc}
 800c1dc:	20000bb0 	.word	0x20000bb0

0800c1e0 <_lseek_r>:
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	4d05      	ldr	r5, [pc, #20]	; (800c200 <_lseek_r+0x20>)
 800c1ec:	602a      	str	r2, [r5, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	f7f5 fc12 	bl	8001a18 <_lseek>
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d102      	bne.n	800c1fe <_lseek_r+0x1e>
 800c1f8:	682b      	ldr	r3, [r5, #0]
 800c1fa:	b103      	cbz	r3, 800c1fe <_lseek_r+0x1e>
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	20000bb0 	.word	0x20000bb0

0800c204 <_malloc_usable_size_r>:
 800c204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c208:	1f18      	subs	r0, r3, #4
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	bfbc      	itt	lt
 800c20e:	580b      	ldrlt	r3, [r1, r0]
 800c210:	18c0      	addlt	r0, r0, r3
 800c212:	4770      	bx	lr

0800c214 <_read_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4604      	mov	r4, r0
 800c218:	4608      	mov	r0, r1
 800c21a:	4611      	mov	r1, r2
 800c21c:	2200      	movs	r2, #0
 800c21e:	4d05      	ldr	r5, [pc, #20]	; (800c234 <_read_r+0x20>)
 800c220:	602a      	str	r2, [r5, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	f7f5 fb9b 	bl	800195e <_read>
 800c228:	1c43      	adds	r3, r0, #1
 800c22a:	d102      	bne.n	800c232 <_read_r+0x1e>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	b103      	cbz	r3, 800c232 <_read_r+0x1e>
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	20000bb0 	.word	0x20000bb0

0800c238 <_init>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	bf00      	nop
 800c23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23e:	bc08      	pop	{r3}
 800c240:	469e      	mov	lr, r3
 800c242:	4770      	bx	lr

0800c244 <_fini>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	bf00      	nop
 800c248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c24a:	bc08      	pop	{r3}
 800c24c:	469e      	mov	lr, r3
 800c24e:	4770      	bx	lr
