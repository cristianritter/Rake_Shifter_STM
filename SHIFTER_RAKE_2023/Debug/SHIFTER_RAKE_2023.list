
SHIFTER_RAKE_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008440  08008440  00020160  2**0
                  CONTENTS
  4 .ARM          00000000  08008440  08008440  00020160  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008440  08008440  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008444  08008444  00018444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08008448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000994  20000160  080085a8  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  080085a8  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001126a  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316d  00000000  00000000  000313f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00034560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00035538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa86  00000000  00000000  000363b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139e2  00000000  00000000  00050e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d9a8  00000000  00000000  00064820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f21c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fcc  00000000  00000000  000f2218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000160 	.word	0x20000160
 8000128:	00000000 	.word	0x00000000
 800012c:	080083b8 	.word	0x080083b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000164 	.word	0x20000164
 8000148:	080083b8 	.word	0x080083b8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb60 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80f 	bl	8000176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f97c 	bl	8000454 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f95c 	bl	8000418 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000160:	f007 fd16 	bl	8007b90 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000164:	f000 f866 	bl	8000234 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000168:	f000 f8c0 	bl	80002ec <MX_SPI1_Init>
  MX_SPI2_Init();
 800016c:	f000 f8f4 	bl	8000358 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f928 	bl	80003c4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000174:	e7fe      	b.n	8000174 <main+0x28>

08000176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b094      	sub	sp, #80	; 0x50
 800017a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000180:	2228      	movs	r2, #40	; 0x28
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f008 f90f 	bl	80083a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	f107 0314 	add.w	r3, r7, #20
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	605a      	str	r2, [r3, #4]
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a6:	2301      	movs	r3, #1
 80001a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b0:	2300      	movs	r3, #0
 80001b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b4:	2301      	movs	r3, #1
 80001b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b8:	2302      	movs	r3, #2
 80001ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001cc:	4618      	mov	r0, r3
 80001ce:	f002 fe33 	bl	8002e38 <HAL_RCC_OscConfig>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001d8:	f000 f96a 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001dc:	230f      	movs	r3, #15
 80001de:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e0:	2302      	movs	r3, #2
 80001e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	2101      	movs	r1, #1
 80001f8:	4618      	mov	r0, r3
 80001fa:	f003 f89f 	bl	800333c <HAL_RCC_ClockConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000204:	f000 f954 	bl	80004b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000208:	2312      	movs	r3, #18
 800020a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800020c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000210:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000212:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000216:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fa26 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000226:	f000 f943 	bl	80004b0 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3750      	adds	r7, #80	; 0x50
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000244:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <MX_ADC1_Init+0xb0>)
 8000246:	4a28      	ldr	r2, [pc, #160]	; (80002e8 <MX_ADC1_Init+0xb4>)
 8000248:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800024a:	4b26      	ldr	r3, [pc, #152]	; (80002e4 <MX_ADC1_Init+0xb0>)
 800024c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000250:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <MX_ADC1_Init+0xb0>)
 8000254:	2201      	movs	r2, #1
 8000256:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000258:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <MX_ADC1_Init+0xb0>)
 800025a:	2200      	movs	r2, #0
 800025c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800025e:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <MX_ADC1_Init+0xb0>)
 8000260:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000264:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000266:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <MX_ADC1_Init+0xb0>)
 8000268:	2200      	movs	r2, #0
 800026a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800026c:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <MX_ADC1_Init+0xb0>)
 800026e:	2203      	movs	r2, #3
 8000270:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000272:	481c      	ldr	r0, [pc, #112]	; (80002e4 <MX_ADC1_Init+0xb0>)
 8000274:	f000 fb30 	bl	80008d8 <HAL_ADC_Init>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800027e:	f000 f917 	bl	80004b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000282:	2300      	movs	r3, #0
 8000284:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000286:	2301      	movs	r3, #1
 8000288:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800028a:	2307      	movs	r3, #7
 800028c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4619      	mov	r1, r3
 8000292:	4814      	ldr	r0, [pc, #80]	; (80002e4 <MX_ADC1_Init+0xb0>)
 8000294:	f000 fbf8 	bl	8000a88 <HAL_ADC_ConfigChannel>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800029e:	f000 f907 	bl	80004b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <MX_ADC1_Init+0xb0>)
 80002b0:	f000 fbea 	bl	8000a88 <HAL_ADC_ConfigChannel>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002ba:	f000 f8f9 	bl	80004b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002be:	2302      	movs	r3, #2
 80002c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002c2:	2303      	movs	r3, #3
 80002c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4619      	mov	r1, r3
 80002ca:	4806      	ldr	r0, [pc, #24]	; (80002e4 <MX_ADC1_Init+0xb0>)
 80002cc:	f000 fbdc 	bl	8000a88 <HAL_ADC_ConfigChannel>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002d6:	f000 f8eb 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000017c 	.word	0x2000017c
 80002e8:	40012400 	.word	0x40012400

080002ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002f0:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_SPI1_Init+0x64>)
 80002f2:	4a18      	ldr	r2, [pc, #96]	; (8000354 <MX_SPI1_Init+0x68>)
 80002f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002f6:	4b16      	ldr	r3, [pc, #88]	; (8000350 <MX_SPI1_Init+0x64>)
 80002f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_SPI1_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_SPI1_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_SPI1_Init+0x64>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_SPI1_Init+0x64>)
 8000312:	2200      	movs	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_SPI1_Init+0x64>)
 8000318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800031c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_SPI1_Init+0x64>)
 8000320:	2208      	movs	r2, #8
 8000322:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <MX_SPI1_Init+0x64>)
 8000326:	2200      	movs	r2, #0
 8000328:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_SPI1_Init+0x64>)
 800032c:	2200      	movs	r2, #0
 800032e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <MX_SPI1_Init+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_SPI1_Init+0x64>)
 8000338:	220a      	movs	r2, #10
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_SPI1_Init+0x64>)
 800033e:	f003 fa4b 	bl	80037d8 <HAL_SPI_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000348:	f000 f8b2 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200001f0 	.word	0x200001f0
 8000354:	40013000 	.word	0x40013000

08000358 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_SPI2_Init+0x64>)
 800035e:	4a18      	ldr	r2, [pc, #96]	; (80003c0 <MX_SPI2_Init+0x68>)
 8000360:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_SPI2_Init+0x64>)
 8000364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000368:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_SPI2_Init+0x64>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_SPI2_Init+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_SPI2_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_SPI2_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_SPI2_Init+0x64>)
 8000384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000388:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_SPI2_Init+0x64>)
 800038c:	2200      	movs	r2, #0
 800038e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <MX_SPI2_Init+0x64>)
 8000392:	2200      	movs	r2, #0
 8000394:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_SPI2_Init+0x64>)
 8000398:	2200      	movs	r2, #0
 800039a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <MX_SPI2_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_SPI2_Init+0x64>)
 80003a4:	220a      	movs	r2, #10
 80003a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_SPI2_Init+0x64>)
 80003aa:	f003 fa15 	bl	80037d8 <HAL_SPI_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80003b4:	f000 f87c 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000248 	.word	0x20000248
 80003c0:	40003800 	.word	0x40003800

080003c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <MX_USART1_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003fc:	f003 fa70 	bl	80038e0 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f853 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200002a0 	.word	0x200002a0
 8000414:	40013800 	.word	0x40013800

08000418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_DMA_Init+0x38>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <MX_DMA_Init+0x38>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_DMA_Init+0x38>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	2100      	movs	r1, #0
 800043a:	200b      	movs	r0, #11
 800043c:	f000 fd35 	bl	8000eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000440:	200b      	movs	r0, #11
 8000442:	f000 fd4e 	bl	8000ee2 <HAL_NVIC_EnableIRQ>

}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000

08000454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <MX_GPIO_Init+0x58>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a13      	ldr	r2, [pc, #76]	; (80004ac <MX_GPIO_Init+0x58>)
 8000460:	f043 0320 	orr.w	r3, r3, #32
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_GPIO_Init+0x58>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0320 	and.w	r3, r3, #32
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_GPIO_Init+0x58>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <MX_GPIO_Init+0x58>)
 8000478:	f043 0304 	orr.w	r3, r3, #4
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_GPIO_Init+0x58>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0304 	and.w	r3, r3, #4
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_GPIO_Init+0x58>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a07      	ldr	r2, [pc, #28]	; (80004ac <MX_GPIO_Init+0x58>)
 8000490:	f043 0308 	orr.w	r3, r3, #8
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <MX_GPIO_Init+0x58>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0308 	and.w	r3, r3, #8
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	40021000 	.word	0x40021000

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <HAL_MspInit+0x40>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <HAL_MspInit+0x40>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <HAL_MspInit+0x40>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_MspInit+0x40>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <HAL_MspInit+0x40>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_MspInit+0x40>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000

08000500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a28      	ldr	r2, [pc, #160]	; (80005bc <HAL_ADC_MspInit+0xbc>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d149      	bne.n	80005b4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <HAL_ADC_MspInit+0xc0>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a26      	ldr	r2, [pc, #152]	; (80005c0 <HAL_ADC_MspInit+0xc0>)
 8000526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <HAL_ADC_MspInit+0xc0>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <HAL_ADC_MspInit+0xc0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a20      	ldr	r2, [pc, #128]	; (80005c0 <HAL_ADC_MspInit+0xc0>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <HAL_ADC_MspInit+0xc0>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000550:	2307      	movs	r3, #7
 8000552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000554:	2303      	movs	r3, #3
 8000556:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4819      	ldr	r0, [pc, #100]	; (80005c4 <HAL_ADC_MspInit+0xc4>)
 8000560:	f000 fe3a 	bl	80011d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 8000566:	4a19      	ldr	r2, [pc, #100]	; (80005cc <HAL_ADC_MspInit+0xcc>)
 8000568:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 800057e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000582:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 8000586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800058a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 800058e:	2220      	movs	r2, #32
 8000590:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 800059a:	f000 fcbd 	bl	8000f18 <HAL_DMA_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80005a4:	f7ff ff84 	bl	80004b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 80005ac:	621a      	str	r2, [r3, #32]
 80005ae:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <HAL_ADC_MspInit+0xc8>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40012400 	.word	0x40012400
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010800 	.word	0x40010800
 80005c8:	200001ac 	.word	0x200001ac
 80005cc:	40020008 	.word	0x40020008

080005d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0318 	add.w	r3, r7, #24
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <HAL_SPI_MspInit+0xc8>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d124      	bne.n	800063a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <HAL_SPI_MspInit+0xcc>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a29      	ldr	r2, [pc, #164]	; (800069c <HAL_SPI_MspInit+0xcc>)
 80005f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <HAL_SPI_MspInit+0xcc>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <HAL_SPI_MspInit+0xcc>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a23      	ldr	r2, [pc, #140]	; (800069c <HAL_SPI_MspInit+0xcc>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <HAL_SPI_MspInit+0xcc>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0318 	add.w	r3, r7, #24
 8000630:	4619      	mov	r1, r3
 8000632:	481b      	ldr	r0, [pc, #108]	; (80006a0 <HAL_SPI_MspInit+0xd0>)
 8000634:	f000 fdd0 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000638:	e029      	b.n	800068e <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <HAL_SPI_MspInit+0xd4>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d124      	bne.n	800068e <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_SPI_MspInit+0xcc>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <HAL_SPI_MspInit+0xcc>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	61d3      	str	r3, [r2, #28]
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_SPI_MspInit+0xcc>)
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_SPI_MspInit+0xcc>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_SPI_MspInit+0xcc>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_SPI_MspInit+0xcc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000674:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	2302      	movs	r3, #2
 800067c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067e:	2303      	movs	r3, #3
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	4619      	mov	r1, r3
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <HAL_SPI_MspInit+0xd8>)
 800068a:	f000 fda5 	bl	80011d8 <HAL_GPIO_Init>
}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	; 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40013000 	.word	0x40013000
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010800 	.word	0x40010800
 80006a4:	40003800 	.word	0x40003800
 80006a8:	40010c00 	.word	0x40010c00

080006ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <HAL_UART_MspInit+0x8c>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d131      	bne.n	8000730 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <HAL_UART_MspInit+0x90>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a1a      	ldr	r2, [pc, #104]	; (800073c <HAL_UART_MspInit+0x90>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <HAL_UART_MspInit+0x90>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_UART_MspInit+0x90>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <HAL_UART_MspInit+0x90>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_UART_MspInit+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000700:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <HAL_UART_MspInit+0x94>)
 8000712:	f000 fd61 	bl	80011d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <HAL_UART_MspInit+0x94>)
 800072c:	f000 fd54 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40013800 	.word	0x40013800
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078a:	f000 f889 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <DMA1_Channel1_IRQHandler+0x10>)
 800079a:	f000 fc17 	bl	8000fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200001ac 	.word	0x200001ac

080007a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007ae:	f000 ffc8 	bl	8001742 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200007b0 	.word	0x200007b0

080007bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ca:	490d      	ldr	r1, [pc, #52]	; (8000800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e0:	4c0a      	ldr	r4, [pc, #40]	; (800080c <LoopFillZerobss+0x22>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ee:	f7ff ffe5 	bl	80007bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f007 fdb5 	bl	8008360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fca9 	bl	800014c <main>
  bx lr
 80007fa:	4770      	bx	lr
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000804:	08008448 	.word	0x08008448
  ldr r2, =_sbss
 8000808:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800080c:	20000af4 	.word	0x20000af4

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 fb35 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	200f      	movs	r0, #15
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff fe44 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fb4d 	bl	8000efe <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 fb15 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000000 	.word	0x20000000
 8000898:	20000008 	.word	0x20000008
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <HAL_IncTick+0x20>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000008 	.word	0x20000008
 80008c0:	200002e4 	.word	0x200002e4

080008c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	200002e4 	.word	0x200002e4

080008d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e0be      	b.n	8000a78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000904:	2b00      	cmp	r3, #0
 8000906:	d109      	bne.n	800091c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fdf2 	bl	8000500 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 f9ab 	bl	8000c78 <ADC_ConversionStop_Disable>
 8000922:	4603      	mov	r3, r0
 8000924:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	2b00      	cmp	r3, #0
 8000930:	f040 8099 	bne.w	8000a66 <HAL_ADC_Init+0x18e>
 8000934:	7dfb      	ldrb	r3, [r7, #23]
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 8095 	bne.w	8000a66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000940:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000944:	f023 0302 	bic.w	r3, r3, #2
 8000948:	f043 0202 	orr.w	r2, r3, #2
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000958:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7b1b      	ldrb	r3, [r3, #12]
 800095e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000960:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	4313      	orrs	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000970:	d003      	beq.n	800097a <HAL_ADC_Init+0xa2>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d102      	bne.n	8000980 <HAL_ADC_Init+0xa8>
 800097a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097e:	e000      	b.n	8000982 <HAL_ADC_Init+0xaa>
 8000980:	2300      	movs	r3, #0
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7d1b      	ldrb	r3, [r3, #20]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d119      	bne.n	80009c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7b1b      	ldrb	r3, [r3, #12]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d109      	bne.n	80009ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	3b01      	subs	r3, #1
 800099e:	035a      	lsls	r2, r3, #13
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	e00b      	b.n	80009c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b0:	f043 0220 	orr.w	r2, r3, #32
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	f043 0201 	orr.w	r2, r3, #1
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <HAL_ADC_Init+0x1a8>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	68b9      	ldr	r1, [r7, #8]
 80009e8:	430b      	orrs	r3, r1
 80009ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009f4:	d003      	beq.n	80009fe <HAL_ADC_Init+0x126>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d104      	bne.n	8000a08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	691b      	ldr	r3, [r3, #16]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	051b      	lsls	r3, r3, #20
 8000a06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_ADC_Init+0x1ac>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d10b      	bne.n	8000a44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a36:	f023 0303 	bic.w	r3, r3, #3
 8000a3a:	f043 0201 	orr.w	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a42:	e018      	b.n	8000a76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a48:	f023 0312 	bic.w	r3, r3, #18
 8000a4c:	f043 0210 	orr.w	r2, r3, #16
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a58:	f043 0201 	orr.w	r2, r3, #1
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a64:	e007      	b.n	8000a76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6a:	f043 0210 	orr.w	r2, r3, #16
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	ffe1f7fd 	.word	0xffe1f7fd
 8000a84:	ff1f0efe 	.word	0xff1f0efe

08000a88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d101      	bne.n	8000aa8 <HAL_ADC_ConfigChannel+0x20>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	e0dc      	b.n	8000c62 <HAL_ADC_ConfigChannel+0x1da>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b06      	cmp	r3, #6
 8000ab6:	d81c      	bhi.n	8000af2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	3b05      	subs	r3, #5
 8000aca:	221f      	movs	r2, #31
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4019      	ands	r1, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	3b05      	subs	r3, #5
 8000ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	635a      	str	r2, [r3, #52]	; 0x34
 8000af0:	e03c      	b.n	8000b6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b0c      	cmp	r3, #12
 8000af8:	d81c      	bhi.n	8000b34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	4613      	mov	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	3b23      	subs	r3, #35	; 0x23
 8000b0c:	221f      	movs	r2, #31
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	4019      	ands	r1, r3
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	3b23      	subs	r3, #35	; 0x23
 8000b26:	fa00 f203 	lsl.w	r2, r0, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	631a      	str	r2, [r3, #48]	; 0x30
 8000b32:	e01b      	b.n	8000b6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	3b41      	subs	r3, #65	; 0x41
 8000b46:	221f      	movs	r2, #31
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4019      	ands	r1, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	3b41      	subs	r3, #65	; 0x41
 8000b60:	fa00 f203 	lsl.w	r2, r0, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b09      	cmp	r3, #9
 8000b72:	d91c      	bls.n	8000bae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68d9      	ldr	r1, [r3, #12]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	3b1e      	subs	r3, #30
 8000b86:	2207      	movs	r2, #7
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4019      	ands	r1, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6898      	ldr	r0, [r3, #8]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3b1e      	subs	r3, #30
 8000ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	e019      	b.n	8000be2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6919      	ldr	r1, [r3, #16]
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2207      	movs	r2, #7
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	4019      	ands	r1, r3
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	6898      	ldr	r0, [r3, #8]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b10      	cmp	r3, #16
 8000be8:	d003      	beq.n	8000bf2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bee:	2b11      	cmp	r3, #17
 8000bf0:	d132      	bne.n	8000c58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <HAL_ADC_ConfigChannel+0x1e4>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d125      	bne.n	8000c48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d126      	bne.n	8000c58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b10      	cmp	r3, #16
 8000c20:	d11a      	bne.n	8000c58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_ADC_ConfigChannel+0x1ec>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	0c9a      	lsrs	r2, r3, #18
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c38:	e002      	b.n	8000c40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f9      	bne.n	8000c3a <HAL_ADC_ConfigChannel+0x1b2>
 8000c46:	e007      	b.n	8000c58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4c:	f043 0220 	orr.w	r2, r3, #32
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	40012400 	.word	0x40012400
 8000c70:	20000000 	.word	0x20000000
 8000c74:	431bde83 	.word	0x431bde83

08000c78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d12e      	bne.n	8000cf0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 0201 	bic.w	r2, r2, #1
 8000ca0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ca2:	f7ff fe0f 	bl	80008c4 <HAL_GetTick>
 8000ca6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ca8:	e01b      	b.n	8000ce2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000caa:	f7ff fe0b 	bl	80008c4 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d914      	bls.n	8000ce2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d10d      	bne.n	8000ce2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f043 0210 	orr.w	r2, r3, #16
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd6:	f043 0201 	orr.w	r2, r3, #1
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e007      	b.n	8000cf2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d0dc      	beq.n	8000caa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4906      	ldr	r1, [pc, #24]	; (8000d94 <__NVIC_EnableIRQ+0x34>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff90 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff2d 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff42 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff90 	bl	8000dec <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5f 	bl	8000d98 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff35 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffa2 	bl	8000e50 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e043      	b.n	8000fb6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <HAL_DMA_Init+0xa8>)
 8000f36:	4413      	add	r3, r2
 8000f38:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <HAL_DMA_Init+0xac>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	009a      	lsls	r2, r3, #2
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <HAL_DMA_Init+0xb0>)
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f62:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	bffdfff8 	.word	0xbffdfff8
 8000fc4:	cccccccd 	.word	0xcccccccd
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	2204      	movs	r2, #4
 8000fea:	409a      	lsls	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d04f      	beq.n	8001094 <HAL_DMA_IRQHandler+0xc8>
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d04a      	beq.n	8001094 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0320 	and.w	r3, r3, #32
 8001008:	2b00      	cmp	r3, #0
 800100a:	d107      	bne.n	800101c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0204 	bic.w	r2, r2, #4
 800101a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a66      	ldr	r2, [pc, #408]	; (80011bc <HAL_DMA_IRQHandler+0x1f0>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d029      	beq.n	800107a <HAL_DMA_IRQHandler+0xae>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a65      	ldr	r2, [pc, #404]	; (80011c0 <HAL_DMA_IRQHandler+0x1f4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d022      	beq.n	8001076 <HAL_DMA_IRQHandler+0xaa>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a63      	ldr	r2, [pc, #396]	; (80011c4 <HAL_DMA_IRQHandler+0x1f8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01a      	beq.n	8001070 <HAL_DMA_IRQHandler+0xa4>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a62      	ldr	r2, [pc, #392]	; (80011c8 <HAL_DMA_IRQHandler+0x1fc>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d012      	beq.n	800106a <HAL_DMA_IRQHandler+0x9e>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a60      	ldr	r2, [pc, #384]	; (80011cc <HAL_DMA_IRQHandler+0x200>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00a      	beq.n	8001064 <HAL_DMA_IRQHandler+0x98>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a5f      	ldr	r2, [pc, #380]	; (80011d0 <HAL_DMA_IRQHandler+0x204>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d102      	bne.n	800105e <HAL_DMA_IRQHandler+0x92>
 8001058:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105c:	e00e      	b.n	800107c <HAL_DMA_IRQHandler+0xb0>
 800105e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001062:	e00b      	b.n	800107c <HAL_DMA_IRQHandler+0xb0>
 8001064:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001068:	e008      	b.n	800107c <HAL_DMA_IRQHandler+0xb0>
 800106a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800106e:	e005      	b.n	800107c <HAL_DMA_IRQHandler+0xb0>
 8001070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001074:	e002      	b.n	800107c <HAL_DMA_IRQHandler+0xb0>
 8001076:	2340      	movs	r3, #64	; 0x40
 8001078:	e000      	b.n	800107c <HAL_DMA_IRQHandler+0xb0>
 800107a:	2304      	movs	r3, #4
 800107c:	4a55      	ldr	r2, [pc, #340]	; (80011d4 <HAL_DMA_IRQHandler+0x208>)
 800107e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 8094 	beq.w	80011b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001092:	e08e      	b.n	80011b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	2202      	movs	r2, #2
 800109a:	409a      	lsls	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d056      	beq.n	8001152 <HAL_DMA_IRQHandler+0x186>
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d051      	beq.n	8001152 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10b      	bne.n	80010d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 020a 	bic.w	r2, r2, #10
 80010ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a38      	ldr	r2, [pc, #224]	; (80011bc <HAL_DMA_IRQHandler+0x1f0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d029      	beq.n	8001132 <HAL_DMA_IRQHandler+0x166>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a37      	ldr	r2, [pc, #220]	; (80011c0 <HAL_DMA_IRQHandler+0x1f4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d022      	beq.n	800112e <HAL_DMA_IRQHandler+0x162>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a35      	ldr	r2, [pc, #212]	; (80011c4 <HAL_DMA_IRQHandler+0x1f8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01a      	beq.n	8001128 <HAL_DMA_IRQHandler+0x15c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <HAL_DMA_IRQHandler+0x1fc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d012      	beq.n	8001122 <HAL_DMA_IRQHandler+0x156>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_DMA_IRQHandler+0x200>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00a      	beq.n	800111c <HAL_DMA_IRQHandler+0x150>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <HAL_DMA_IRQHandler+0x204>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d102      	bne.n	8001116 <HAL_DMA_IRQHandler+0x14a>
 8001110:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001114:	e00e      	b.n	8001134 <HAL_DMA_IRQHandler+0x168>
 8001116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800111a:	e00b      	b.n	8001134 <HAL_DMA_IRQHandler+0x168>
 800111c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001120:	e008      	b.n	8001134 <HAL_DMA_IRQHandler+0x168>
 8001122:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001126:	e005      	b.n	8001134 <HAL_DMA_IRQHandler+0x168>
 8001128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112c:	e002      	b.n	8001134 <HAL_DMA_IRQHandler+0x168>
 800112e:	2320      	movs	r3, #32
 8001130:	e000      	b.n	8001134 <HAL_DMA_IRQHandler+0x168>
 8001132:	2302      	movs	r3, #2
 8001134:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <HAL_DMA_IRQHandler+0x208>)
 8001136:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	2b00      	cmp	r3, #0
 8001146:	d034      	beq.n	80011b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001150:	e02f      	b.n	80011b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	2208      	movs	r2, #8
 8001158:	409a      	lsls	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d028      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x1e8>
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d023      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 020e 	bic.w	r2, r2, #14
 800117a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	4798      	blx	r3
    }
  }
  return;
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
}
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40020008 	.word	0x40020008
 80011c0:	4002001c 	.word	0x4002001c
 80011c4:	40020030 	.word	0x40020030
 80011c8:	40020044 	.word	0x40020044
 80011cc:	40020058 	.word	0x40020058
 80011d0:	4002006c 	.word	0x4002006c
 80011d4:	40020000 	.word	0x40020000

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b08b      	sub	sp, #44	; 0x2c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e169      	b.n	80014c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ec:	2201      	movs	r2, #1
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8158 	bne.w	80014ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4a9a      	ldr	r2, [pc, #616]	; (8001478 <HAL_GPIO_Init+0x2a0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d05e      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001214:	4a98      	ldr	r2, [pc, #608]	; (8001478 <HAL_GPIO_Init+0x2a0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d875      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800121a:	4a98      	ldr	r2, [pc, #608]	; (800147c <HAL_GPIO_Init+0x2a4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d058      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001220:	4a96      	ldr	r2, [pc, #600]	; (800147c <HAL_GPIO_Init+0x2a4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d86f      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001226:	4a96      	ldr	r2, [pc, #600]	; (8001480 <HAL_GPIO_Init+0x2a8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d052      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 800122c:	4a94      	ldr	r2, [pc, #592]	; (8001480 <HAL_GPIO_Init+0x2a8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d869      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001232:	4a94      	ldr	r2, [pc, #592]	; (8001484 <HAL_GPIO_Init+0x2ac>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d04c      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001238:	4a92      	ldr	r2, [pc, #584]	; (8001484 <HAL_GPIO_Init+0x2ac>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d863      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800123e:	4a92      	ldr	r2, [pc, #584]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d046      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001244:	4a90      	ldr	r2, [pc, #576]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d85d      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d82a      	bhi.n	80012a4 <HAL_GPIO_Init+0xcc>
 800124e:	2b12      	cmp	r3, #18
 8001250:	d859      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <HAL_GPIO_Init+0x80>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	080012d3 	.word	0x080012d3
 800125c:	080012ad 	.word	0x080012ad
 8001260:	080012bf 	.word	0x080012bf
 8001264:	08001301 	.word	0x08001301
 8001268:	08001307 	.word	0x08001307
 800126c:	08001307 	.word	0x08001307
 8001270:	08001307 	.word	0x08001307
 8001274:	08001307 	.word	0x08001307
 8001278:	08001307 	.word	0x08001307
 800127c:	08001307 	.word	0x08001307
 8001280:	08001307 	.word	0x08001307
 8001284:	08001307 	.word	0x08001307
 8001288:	08001307 	.word	0x08001307
 800128c:	08001307 	.word	0x08001307
 8001290:	08001307 	.word	0x08001307
 8001294:	08001307 	.word	0x08001307
 8001298:	08001307 	.word	0x08001307
 800129c:	080012b5 	.word	0x080012b5
 80012a0:	080012c9 	.word	0x080012c9
 80012a4:	4a79      	ldr	r2, [pc, #484]	; (800148c <HAL_GPIO_Init+0x2b4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012aa:	e02c      	b.n	8001306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e029      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	3304      	adds	r3, #4
 80012ba:	623b      	str	r3, [r7, #32]
          break;
 80012bc:	e024      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	3308      	adds	r3, #8
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e01f      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	330c      	adds	r3, #12
 80012ce:	623b      	str	r3, [r7, #32]
          break;
 80012d0:	e01a      	b.n	8001308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012da:	2304      	movs	r3, #4
 80012dc:	623b      	str	r3, [r7, #32]
          break;
 80012de:	e013      	b.n	8001308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	2308      	movs	r3, #8
 80012ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	611a      	str	r2, [r3, #16]
          break;
 80012f2:	e009      	b.n	8001308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f4:	2308      	movs	r3, #8
 80012f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	615a      	str	r2, [r3, #20]
          break;
 80012fe:	e003      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x130>
          break;
 8001306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2bff      	cmp	r3, #255	; 0xff
 800130c:	d801      	bhi.n	8001312 <HAL_GPIO_Init+0x13a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_Init+0x13e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3304      	adds	r3, #4
 8001316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d802      	bhi.n	8001324 <HAL_GPIO_Init+0x14c>
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x152>
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	3b08      	subs	r3, #8
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	210f      	movs	r1, #15
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	6a39      	ldr	r1, [r7, #32]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80b1 	beq.w	80014ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001358:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <HAL_GPIO_Init+0x2b8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_GPIO_Init+0x2b8>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <HAL_GPIO_Init+0x2b8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001370:	4a48      	ldr	r2, [pc, #288]	; (8001494 <HAL_GPIO_Init+0x2bc>)
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <HAL_GPIO_Init+0x2c0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d013      	beq.n	80013c4 <HAL_GPIO_Init+0x1ec>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3f      	ldr	r2, [pc, #252]	; (800149c <HAL_GPIO_Init+0x2c4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d00d      	beq.n	80013c0 <HAL_GPIO_Init+0x1e8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a3e      	ldr	r2, [pc, #248]	; (80014a0 <HAL_GPIO_Init+0x2c8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d007      	beq.n	80013bc <HAL_GPIO_Init+0x1e4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3d      	ldr	r2, [pc, #244]	; (80014a4 <HAL_GPIO_Init+0x2cc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_GPIO_Init+0x1e0>
 80013b4:	2303      	movs	r3, #3
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013b8:	2304      	movs	r3, #4
 80013ba:	e004      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013bc:	2302      	movs	r3, #2
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013c4:	2300      	movs	r3, #0
 80013c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d6:	492f      	ldr	r1, [pc, #188]	; (8001494 <HAL_GPIO_Init+0x2bc>)
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	492c      	ldr	r1, [pc, #176]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	4928      	ldr	r1, [pc, #160]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4922      	ldr	r1, [pc, #136]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	491e      	ldr	r1, [pc, #120]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	4918      	ldr	r1, [pc, #96]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	4914      	ldr	r1, [pc, #80]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001458:	4013      	ands	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d021      	beq.n	80014ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	490e      	ldr	r1, [pc, #56]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
 8001474:	e021      	b.n	80014ba <HAL_GPIO_Init+0x2e2>
 8001476:	bf00      	nop
 8001478:	10320000 	.word	0x10320000
 800147c:	10310000 	.word	0x10310000
 8001480:	10220000 	.word	0x10220000
 8001484:	10210000 	.word	0x10210000
 8001488:	10120000 	.word	0x10120000
 800148c:	10110000 	.word	0x10110000
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	40010800 	.word	0x40010800
 800149c:	40010c00 	.word	0x40010c00
 80014a0:	40011000 	.word	0x40011000
 80014a4:	40011400 	.word	0x40011400
 80014a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_GPIO_Init+0x304>)
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4909      	ldr	r1, [pc, #36]	; (80014dc <HAL_GPIO_Init+0x304>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f ae8e 	bne.w	80011ec <HAL_GPIO_Init+0x14>
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	372c      	adds	r7, #44	; 0x2c
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	b08b      	sub	sp, #44	; 0x2c
 80014e4:	af06      	add	r7, sp, #24
 80014e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0fd      	b.n	80016ee <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f006 fc9c 	bl	8007e44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2203      	movs	r2, #3
 8001510:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fae3 	bl	8003ae4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	687e      	ldr	r6, [r7, #4]
 8001526:	466d      	mov	r5, sp
 8001528:	f106 0410 	add.w	r4, r6, #16
 800152c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	602b      	str	r3, [r5, #0]
 8001534:	1d33      	adds	r3, r6, #4
 8001536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f002 faad 	bl	8003a98 <USB_CoreInit>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0ce      	b.n	80016ee <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fade 	bl	8003b18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e04c      	b.n	80015fc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	3301      	adds	r3, #1
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	b298      	uxth	r0, r3
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	3336      	adds	r3, #54	; 0x36
 80015a0:	4602      	mov	r2, r0
 80015a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	3303      	adds	r3, #3
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	3338      	adds	r3, #56	; 0x38
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	333c      	adds	r3, #60	; 0x3c
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	3340      	adds	r3, #64	; 0x40
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	3301      	adds	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3ad      	bcc.n	8001562 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e044      	b.n	8001696 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	3301      	adds	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3b5      	bcc.n	800160c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	687e      	ldr	r6, [r7, #4]
 80016a8:	466d      	mov	r5, sp
 80016aa:	f106 0410 	add.w	r4, r6, #16
 80016ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	602b      	str	r3, [r5, #0]
 80016b6:	1d33      	adds	r3, r6, #4
 80016b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f002 fa38 	bl	8003b30 <USB_DevInit>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00d      	b.n	80016ee <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f004 feea 	bl	80064c0 <USB_DevDisconnect>

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_PCD_Start+0x16>
 8001708:	2302      	movs	r3, #2
 800170a:	e016      	b.n	800173a <HAL_PCD_Start+0x44>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f002 f9cd 	bl	8003ab8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800171e:	2101      	movs	r1, #1
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f006 fde6 	bl	80082f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f004 febe 	bl	80064ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b088      	sub	sp, #32
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f004 fec0 	bl	80064d4 <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800175a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800175e:	d102      	bne.n	8001766 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 fb48 	bl	8001df6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f004 feb2 	bl	80064d4 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177a:	d112      	bne.n	80017a2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001784:	b29a      	uxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800178e:	b292      	uxth	r2, r2
 8001790:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f006 fbd0 	bl	8007f3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800179a:	2100      	movs	r1, #0
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f923 	bl	80019e8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 fe94 	bl	80064d4 <USB_ReadInterrupts>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017b6:	d10b      	bne.n	80017d0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017ca:	b292      	uxth	r2, r2
 80017cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f004 fe7d 	bl	80064d4 <USB_ReadInterrupts>
 80017da:	4603      	mov	r3, r0
 80017dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017e4:	d10b      	bne.n	80017fe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017f8:	b292      	uxth	r2, r2
 80017fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fe66 	bl	80064d4 <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001812:	d126      	bne.n	8001862 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800181c:	b29a      	uxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0204 	bic.w	r2, r2, #4
 8001826:	b292      	uxth	r2, r2
 8001828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0208 	bic.w	r2, r2, #8
 800183e:	b292      	uxth	r2, r2
 8001840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f006 fbb1 	bl	8007fac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001852:	b29a      	uxth	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800185c:	b292      	uxth	r2, r2
 800185e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fe34 	bl	80064d4 <USB_ReadInterrupts>
 800186c:	4603      	mov	r3, r0
 800186e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001876:	f040 8082 	bne.w	800197e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	77fb      	strb	r3, [r7, #31]
 800187e:	e010      	b.n	80018a2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	441a      	add	r2, r3
 800188c:	7ffb      	ldrb	r3, [r7, #31]
 800188e:	8812      	ldrh	r2, [r2, #0]
 8001890:	b292      	uxth	r2, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	3320      	adds	r3, #32
 8001896:	443b      	add	r3, r7
 8001898:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800189c:	7ffb      	ldrb	r3, [r7, #31]
 800189e:	3301      	adds	r3, #1
 80018a0:	77fb      	strb	r3, [r7, #31]
 80018a2:	7ffb      	ldrb	r3, [r7, #31]
 80018a4:	2b07      	cmp	r3, #7
 80018a6:	d9eb      	bls.n	8001880 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	b292      	uxth	r2, r2
 80018bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	b292      	uxth	r2, r2
 80018d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80018d8:	bf00      	nop
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f6      	beq.n	80018da <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018fe:	b292      	uxth	r2, r2
 8001900:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001904:	2300      	movs	r3, #0
 8001906:	77fb      	strb	r3, [r7, #31]
 8001908:	e00f      	b.n	800192a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800190a:	7ffb      	ldrb	r3, [r7, #31]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4611      	mov	r1, r2
 8001912:	7ffa      	ldrb	r2, [r7, #31]
 8001914:	0092      	lsls	r2, r2, #2
 8001916:	440a      	add	r2, r1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	3320      	adds	r3, #32
 800191c:	443b      	add	r3, r7
 800191e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001922:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001924:	7ffb      	ldrb	r3, [r7, #31]
 8001926:	3301      	adds	r3, #1
 8001928:	77fb      	strb	r3, [r7, #31]
 800192a:	7ffb      	ldrb	r3, [r7, #31]
 800192c:	2b07      	cmp	r3, #7
 800192e:	d9ec      	bls.n	800190a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001938:	b29a      	uxth	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0208 	orr.w	r2, r2, #8
 8001942:	b292      	uxth	r2, r2
 8001944:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001950:	b29a      	uxth	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195a:	b292      	uxth	r2, r2
 800195c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001968:	b29a      	uxth	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0204 	orr.w	r2, r2, #4
 8001972:	b292      	uxth	r2, r2
 8001974:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f006 fafd 	bl	8007f78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f004 fda6 	bl	80064d4 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800198e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001992:	d10e      	bne.n	80019b2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800199c:	b29a      	uxth	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019a6:	b292      	uxth	r2, r2
 80019a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f006 fab6 	bl	8007f1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 fd8c 	bl	80064d4 <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c6:	d10b      	bne.n	80019e0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019da:	b292      	uxth	r2, r2
 80019dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80019e0:	bf00      	nop
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_PCD_SetAddress+0x1a>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e013      	b.n	8001a2a <HAL_PCD_SetAddress+0x42>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 fd33 	bl	8006486 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	4608      	mov	r0, r1
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4603      	mov	r3, r0
 8001a42:	70fb      	strb	r3, [r7, #3]
 8001a44:	460b      	mov	r3, r1
 8001a46:	803b      	strh	r3, [r7, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	da0e      	bge.n	8001a76 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2201      	movs	r2, #1
 8001a72:	705a      	strb	r2, [r3, #1]
 8001a74:	e00e      	b.n	8001a94 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	f003 0207 	and.w	r2, r3, #7
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001aa0:	883a      	ldrh	r2, [r7, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	78ba      	ldrb	r2, [r7, #2]
 8001aaa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	785b      	ldrb	r3, [r3, #1]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001abe:	78bb      	ldrb	r3, [r7, #2]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d102      	bne.n	8001aca <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_PCD_EP_Open+0xa6>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e00e      	b.n	8001af6 <HAL_PCD_EP_Open+0xc4>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 f842 	bl	8003b70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001af4:	7afb      	ldrb	r3, [r7, #11]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da0e      	bge.n	8001b30 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	705a      	strb	r2, [r3, #1]
 8001b2e:	e00e      	b.n	8001b4e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 0207 	and.w	r2, r3, #7
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_PCD_EP_Close+0x6a>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e00e      	b.n	8001b86 <HAL_PCD_EP_Close+0x88>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fb64 	bl	8004244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9e:	7afb      	ldrb	r3, [r7, #11]
 8001ba0:	f003 0207 	and.w	r2, r3, #7
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d106      	bne.n	8001bf2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6979      	ldr	r1, [r7, #20]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fd16 	bl	800461c <USB_EPStartXfer>
 8001bf0:	e005      	b.n	8001bfe <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6979      	ldr	r1, [r7, #20]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 fd0f 	bl	800461c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	460b      	mov	r3, r1
 8001c16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c18:	7afb      	ldrb	r3, [r7, #11]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2201      	movs	r2, #1
 8001c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c60:	7afb      	ldrb	r3, [r7, #11]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6979      	ldr	r1, [r7, #20]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 fcd3 	bl	800461c <USB_EPStartXfer>
 8001c76:	e005      	b.n	8001c84 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fccc 	bl	800461c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 0207 	and.w	r2, r3, #7
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d901      	bls.n	8001cac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e04c      	b.n	8001d46 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da0e      	bge.n	8001cd2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	705a      	strb	r2, [r3, #1]
 8001cd0:	e00c      	b.n	8001cec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_PCD_EP_SetStall+0x7e>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e01c      	b.n	8001d46 <HAL_PCD_EP_SetStall+0xb8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68f9      	ldr	r1, [r7, #12]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f004 fab6 	bl	800628c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d108      	bne.n	8001d3c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f004 fbdb 	bl	80064f2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d901      	bls.n	8001d6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e040      	b.n	8001dee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da0e      	bge.n	8001d92 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	705a      	strb	r2, [r3, #1]
 8001d90:	e00e      	b.n	8001db0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	f003 0207 	and.w	r2, r3, #7
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_PCD_EP_ClrStall+0x82>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e00e      	b.n	8001dee <HAL_PCD_EP_ClrStall+0xa0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 faa4 	bl	800632c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b08e      	sub	sp, #56	; 0x38
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dfe:	e2ec      	b.n	80023da <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e08:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001e16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 8161 	bne.w	80020e2 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d152      	bne.n	8001ed0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3a:	81fb      	strh	r3, [r7, #14]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3328      	adds	r3, #40	; 0x28
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	441a      	add	r2, r3
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e8e:	2100      	movs	r1, #0
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f006 f82a 	bl	8007eea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 829b 	beq.w	80023da <PCD_EP_ISR_Handler+0x5e4>
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f040 8296 	bne.w	80023da <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ece:	e284      	b.n	80023da <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ee0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d034      	beq.n	8001f54 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	3306      	adds	r3, #6
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f004 fb32 	bl	8006592 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	823b      	strh	r3, [r7, #16]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	8a3a      	ldrh	r2, [r7, #16]
 8001f44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f005 ff9f 	bl	8007e90 <HAL_PCD_SetupStageCallback>
 8001f52:	e242      	b.n	80023da <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f54:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f280 823e 	bge.w	80023da <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	83bb      	strh	r3, [r7, #28]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	8bba      	ldrh	r2, [r7, #28]
 8001f74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3306      	adds	r3, #6
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d019      	beq.n	8001fe4 <PCD_EP_ISR_Handler+0x1ee>
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	6959      	ldr	r1, [r3, #20]
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f004 fae2 	bl	8006592 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	441a      	add	r2, r3
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f005 ff68 	bl	8007eb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 81f2 	bne.w	80023da <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002004:	b29b      	uxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	4413      	add	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d112      	bne.n	8002044 <PCD_EP_ISR_Handler+0x24e>
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002028:	b29a      	uxth	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203c:	b29a      	uxth	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	e02f      	b.n	80020a4 <PCD_EP_ISR_Handler+0x2ae>
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b3e      	cmp	r3, #62	; 0x3e
 800204a:	d813      	bhi.n	8002074 <PCD_EP_ISR_Handler+0x27e>
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	085b      	lsrs	r3, r3, #1
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <PCD_EP_ISR_Handler+0x270>
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	3301      	adds	r3, #1
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	b29b      	uxth	r3, r3
 800206a:	029b      	lsls	r3, r3, #10
 800206c:	b29a      	uxth	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	e017      	b.n	80020a4 <PCD_EP_ISR_Handler+0x2ae>
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <PCD_EP_ISR_Handler+0x298>
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	3b01      	subs	r3, #1
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	b29b      	uxth	r3, r3
 8002092:	029b      	lsls	r3, r3, #10
 8002094:	b29b      	uxth	r3, r3
 8002096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800209a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800209e:	b29a      	uxth	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b4:	827b      	strh	r3, [r7, #18]
 80020b6:	8a7b      	ldrh	r3, [r7, #18]
 80020b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020bc:	827b      	strh	r3, [r7, #18]
 80020be:	8a7b      	ldrh	r3, [r7, #18]
 80020c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020c4:	827b      	strh	r3, [r7, #18]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	8a7b      	ldrh	r3, [r7, #18]
 80020cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020dc:	b29b      	uxth	r3, r3
 80020de:	8013      	strh	r3, [r2, #0]
 80020e0:	e17b      	b.n	80023da <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020f4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f280 80ea 	bge.w	80022d2 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	b29a      	uxth	r2, r3
 8002110:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002114:	4013      	ands	r3, r2
 8002116:	853b      	strh	r3, [r7, #40]	; 0x28
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002128:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800212c:	b292      	uxth	r2, r2
 800212e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002130:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	7b1b      	ldrb	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d122      	bne.n	8002194 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	3306      	adds	r3, #6
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002176:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002178:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8087 	beq.w	800228e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	6959      	ldr	r1, [r3, #20]
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	88da      	ldrh	r2, [r3, #6]
 800218c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800218e:	f004 fa00 	bl	8006592 <USB_ReadPMA>
 8002192:	e07c      	b.n	800228e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	78db      	ldrb	r3, [r3, #3]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d108      	bne.n	80021ae <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800219c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800219e:	461a      	mov	r2, r3
 80021a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f927 	bl	80023f6 <HAL_PCD_EP_DB_Receive>
 80021a8:	4603      	mov	r3, r0
 80021aa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80021ac:	e06f      	b.n	800228e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	441a      	add	r2, r3
 80021d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d021      	beq.n	800224c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002210:	b29b      	uxth	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	3302      	adds	r3, #2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002230:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002232:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002234:	2b00      	cmp	r3, #0
 8002236:	d02a      	beq.n	800228e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	6959      	ldr	r1, [r3, #20]
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	891a      	ldrh	r2, [r3, #8]
 8002244:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002246:	f004 f9a4 	bl	8006592 <USB_ReadPMA>
 800224a:	e020      	b.n	800228e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002254:	b29b      	uxth	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	3306      	adds	r3, #6
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002274:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002276:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	6959      	ldr	r1, [r3, #20]
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	895a      	ldrh	r2, [r3, #10]
 8002288:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800228a:	f004 f982 	bl	8006592 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002294:	441a      	add	r2, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022a0:	441a      	add	r2, r3
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <PCD_EP_ISR_Handler+0x4c2>
 80022ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d206      	bcs.n	80022c6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f005 fdf8 	bl	8007eb4 <HAL_PCD_DataOutStageCallback>
 80022c4:	e005      	b.n	80022d2 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 f9a5 	bl	800461c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80022d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d07e      	beq.n	80023da <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80022dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	843b      	strh	r3, [r7, #32]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	441a      	add	r2, r3
 800231a:	8c3b      	ldrh	r3, [r7, #32]
 800231c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002324:	b29b      	uxth	r3, r3
 8002326:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	78db      	ldrb	r3, [r3, #3]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d00c      	beq.n	800234a <PCD_EP_ISR_Handler+0x554>
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	78db      	ldrb	r3, [r3, #3]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800233c:	2b02      	cmp	r3, #2
 800233e:	d146      	bne.n	80023ce <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002340:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d141      	bne.n	80023ce <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	3302      	adds	r3, #2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	4413      	add	r3, r2
 8002368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002372:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	8bfb      	ldrh	r3, [r7, #30]
 800237a:	429a      	cmp	r2, r3
 800237c:	d906      	bls.n	800238c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	8bfb      	ldrh	r3, [r7, #30]
 8002384:	1ad2      	subs	r2, r2, r3
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	619a      	str	r2, [r3, #24]
 800238a:	e002      	b.n	8002392 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f005 fda2 	bl	8007eea <HAL_PCD_DataInStageCallback>
 80023a6:	e018      	b.n	80023da <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	8bfb      	ldrh	r3, [r7, #30]
 80023ae:	441a      	add	r2, r3
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	8bfb      	ldrh	r3, [r7, #30]
 80023ba:	441a      	add	r2, r3
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 f928 	bl	800461c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80023cc:	e005      	b.n	80023da <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023d0:	461a      	mov	r2, r3
 80023d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f91b 	bl	8002610 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f6ff ad0a 	blt.w	8001e00 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3738      	adds	r7, #56	; 0x38
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b088      	sub	sp, #32
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	4613      	mov	r3, r2
 8002402:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d07e      	beq.n	800250c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	3302      	adds	r3, #2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002436:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	699a      	ldr	r2, [r3, #24]
 800243c:	8b7b      	ldrh	r3, [r7, #26]
 800243e:	429a      	cmp	r2, r3
 8002440:	d306      	bcc.n	8002450 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	8b7b      	ldrh	r3, [r7, #26]
 8002448:	1ad2      	subs	r2, r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	619a      	str	r2, [r3, #24]
 800244e:	e002      	b.n	8002456 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d123      	bne.n	80024a6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002478:	833b      	strh	r3, [r7, #24]
 800247a:	8b3b      	ldrh	r3, [r7, #24]
 800247c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002480:	833b      	strh	r3, [r7, #24]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	441a      	add	r2, r3
 8002490:	8b3b      	ldrh	r3, [r7, #24]
 8002492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800249a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01f      	beq.n	80024f0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	82fb      	strh	r3, [r7, #22]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	441a      	add	r2, r3
 80024da:	8afb      	ldrh	r3, [r7, #22]
 80024dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024f0:	8b7b      	ldrh	r3, [r7, #26]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8087 	beq.w	8002606 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	6959      	ldr	r1, [r3, #20]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	891a      	ldrh	r2, [r3, #8]
 8002504:	8b7b      	ldrh	r3, [r7, #26]
 8002506:	f004 f844 	bl	8006592 <USB_ReadPMA>
 800250a:	e07c      	b.n	8002606 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	3306      	adds	r3, #6
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002534:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	8b7b      	ldrh	r3, [r7, #26]
 800253c:	429a      	cmp	r2, r3
 800253e:	d306      	bcc.n	800254e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	8b7b      	ldrh	r3, [r7, #26]
 8002546:	1ad2      	subs	r2, r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	619a      	str	r2, [r3, #24]
 800254c:	e002      	b.n	8002554 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d123      	bne.n	80025a4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002576:	83fb      	strh	r3, [r7, #30]
 8002578:	8bfb      	ldrh	r3, [r7, #30]
 800257a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800257e:	83fb      	strh	r3, [r7, #30]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	441a      	add	r2, r3
 800258e:	8bfb      	ldrh	r3, [r7, #30]
 8002590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11f      	bne.n	80025ee <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c8:	83bb      	strh	r3, [r7, #28]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	441a      	add	r2, r3
 80025d8:	8bbb      	ldrh	r3, [r7, #28]
 80025da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	6959      	ldr	r1, [r3, #20]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	895a      	ldrh	r2, [r3, #10]
 8002600:	8b7b      	ldrh	r3, [r7, #26]
 8002602:	f003 ffc6 	bl	8006592 <USB_ReadPMA>
    }
  }

  return count;
 8002606:	8b7b      	ldrh	r3, [r7, #26]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0a2      	sub	sp, #136	; 0x88
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 81c7 	beq.w	80029b8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	3302      	adds	r3, #2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002652:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800265e:	429a      	cmp	r2, r3
 8002660:	d907      	bls.n	8002672 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800266a:	1ad2      	subs	r2, r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	619a      	str	r2, [r3, #24]
 8002670:	e002      	b.n	8002678 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 80b9 	bne.w	80027f4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d126      	bne.n	80026d8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	4413      	add	r3, r2
 80026a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	011a      	lsls	r2, r3, #4
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	4413      	add	r3, r2
 80026ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	801a      	strh	r2, [r3, #0]
 80026d6:	e01a      	b.n	800270e <HAL_PCD_EP_DB_Transmit+0xfe>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	785b      	ldrb	r3, [r3, #1]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d116      	bne.n	800270e <HAL_PCD_EP_DB_Transmit+0xfe>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	4413      	add	r3, r2
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	011a      	lsls	r2, r3, #4
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	4413      	add	r3, r2
 8002702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	2200      	movs	r2, #0
 800270c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	623b      	str	r3, [r7, #32]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d126      	bne.n	800276a <HAL_PCD_EP_DB_Transmit+0x15a>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4413      	add	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	011a      	lsls	r2, r3, #4
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800274e:	b29a      	uxth	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800275e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002762:	b29a      	uxth	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	801a      	strh	r2, [r3, #0]
 8002768:	e017      	b.n	800279a <HAL_PCD_EP_DB_Transmit+0x18a>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	785b      	ldrb	r3, [r3, #1]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d113      	bne.n	800279a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	4413      	add	r3, r2
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	011a      	lsls	r2, r3, #4
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	4413      	add	r3, r2
 800278e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2200      	movs	r2, #0
 8002798:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	4619      	mov	r1, r3
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f005 fba2 	bl	8007eea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 82d4 	beq.w	8002d5a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027cc:	827b      	strh	r3, [r7, #18]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	441a      	add	r2, r3
 80027dc:	8a7b      	ldrh	r3, [r7, #18]
 80027de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	8013      	strh	r3, [r2, #0]
 80027f2:	e2b2      	b.n	8002d5a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d021      	beq.n	8002842 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002818:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	441a      	add	r2, r3
 800282a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800282e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002836:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283e:	b29b      	uxth	r3, r3
 8002840:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 8286 	bne.w	8002d5a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002856:	441a      	add	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002864:	441a      	add	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	429a      	cmp	r2, r3
 8002874:	d309      	bcc.n	800288a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6a1a      	ldr	r2, [r3, #32]
 8002880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	621a      	str	r2, [r3, #32]
 8002888:	e015      	b.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d107      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002892:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002896:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028a0:	e009      	b.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d155      	bne.n	800296a <HAL_PCD_EP_DB_Transmit+0x35a>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d2:	4413      	add	r3, r2
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	011a      	lsls	r2, r3, #4
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	4413      	add	r3, r2
 80028e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
 80028e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d112      	bne.n	8002912 <HAL_PCD_EP_DB_Transmit+0x302>
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800290a:	b29a      	uxth	r2, r3
 800290c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	e047      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x392>
 8002912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002914:	2b3e      	cmp	r3, #62	; 0x3e
 8002916:	d811      	bhi.n	800293c <HAL_PCD_EP_DB_Transmit+0x32c>
 8002918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	64bb      	str	r3, [r7, #72]	; 0x48
 800291e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_PCD_EP_DB_Transmit+0x31e>
 8002928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800292a:	3301      	adds	r3, #1
 800292c:	64bb      	str	r3, [r7, #72]	; 0x48
 800292e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002930:	b29b      	uxth	r3, r3
 8002932:	029b      	lsls	r3, r3, #10
 8002934:	b29a      	uxth	r2, r3
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002938:	801a      	strh	r2, [r3, #0]
 800293a:	e032      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x392>
 800293c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	64bb      	str	r3, [r7, #72]	; 0x48
 8002942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <HAL_PCD_EP_DB_Transmit+0x342>
 800294c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800294e:	3b01      	subs	r3, #1
 8002950:	64bb      	str	r3, [r7, #72]	; 0x48
 8002952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002954:	b29b      	uxth	r3, r3
 8002956:	029b      	lsls	r3, r3, #10
 8002958:	b29b      	uxth	r3, r3
 800295a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002962:	b29a      	uxth	r2, r3
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	e01b      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x392>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d117      	bne.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x392>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	643b      	str	r3, [r7, #64]	; 0x40
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002980:	b29b      	uxth	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002986:	4413      	add	r3, r2
 8002988:	643b      	str	r3, [r7, #64]	; 0x40
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	011a      	lsls	r2, r3, #4
 8002990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002992:	4413      	add	r3, r2
 8002994:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299c:	b29a      	uxth	r2, r3
 800299e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6959      	ldr	r1, [r3, #20]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	891a      	ldrh	r2, [r3, #8]
 80029ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f003 fda9 	bl	8006508 <USB_WritePMA>
 80029b6:	e1d0      	b.n	8002d5a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	3306      	adds	r3, #6
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d307      	bcc.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029f8:	1ad2      	subs	r2, r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	619a      	str	r2, [r3, #24]
 80029fe:	e002      	b.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 80c4 	bne.w	8002b98 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d126      	bne.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x456>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2c:	4413      	add	r3, r2
 8002a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	011a      	lsls	r2, r3, #4
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a38:	4413      	add	r3, r2
 8002a3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a4e:	801a      	strh	r2, [r3, #0]
 8002a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a62:	801a      	strh	r2, [r3, #0]
 8002a64:	e01a      	b.n	8002a9c <HAL_PCD_EP_DB_Transmit+0x48c>
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	785b      	ldrb	r3, [r3, #1]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d116      	bne.n	8002a9c <HAL_PCD_EP_DB_Transmit+0x48c>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	677b      	str	r3, [r7, #116]	; 0x74
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a82:	4413      	add	r3, r2
 8002a84:	677b      	str	r3, [r7, #116]	; 0x74
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	011a      	lsls	r2, r3, #4
 8002a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8e:	4413      	add	r3, r2
 8002a90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a94:	673b      	str	r3, [r7, #112]	; 0x70
 8002a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a98:	2200      	movs	r2, #0
 8002a9a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	785b      	ldrb	r3, [r3, #1]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d12f      	bne.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	011a      	lsls	r2, r3, #4
 8002ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aee:	801a      	strh	r2, [r3, #0]
 8002af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	e017      	b.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	785b      	ldrb	r3, [r3, #1]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d113      	bne.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b20:	4413      	add	r3, r2
 8002b22:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	011a      	lsls	r2, r3, #4
 8002b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b36:	2200      	movs	r2, #0
 8002b38:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f005 f9d2 	bl	8007eea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 8104 	bne.w	8002d5a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	8013      	strh	r3, [r2, #0]
 8002b96:	e0e0      	b.n	8002d5a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d121      	bne.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 80b4 	bne.w	8002d5a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bfa:	441a      	add	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c08:	441a      	add	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d309      	bcc.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c26:	1ad2      	subs	r2, r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	621a      	str	r2, [r3, #32]
 8002c2c:	e015      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002c36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c44:	e009      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	785b      	ldrb	r3, [r3, #1]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d155      	bne.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x704>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7c:	4413      	add	r3, r2
 8002c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	011a      	lsls	r2, r3, #4
 8002c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c88:	4413      	add	r3, r2
 8002c8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d112      	bne.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca4:	801a      	strh	r2, [r3, #0]
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb8:	801a      	strh	r2, [r3, #0]
 8002cba:	e044      	b.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x736>
 8002cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8002cc0:	d811      	bhi.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8002cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8002cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	029b      	lsls	r3, r3, #10
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce2:	801a      	strh	r2, [r3, #0]
 8002ce4:	e02f      	b.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	657b      	str	r3, [r7, #84]	; 0x54
 8002cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d102      	bne.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	657b      	str	r3, [r7, #84]	; 0x54
 8002cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	029b      	lsls	r3, r3, #10
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d10:	801a      	strh	r2, [r3, #0]
 8002d12:	e018      	b.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d114      	bne.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d2a:	4413      	add	r3, r2
 8002d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	011a      	lsls	r2, r3, #4
 8002d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d36:	4413      	add	r3, r2
 8002d38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d3c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d44:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6959      	ldr	r1, [r3, #20]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	895a      	ldrh	r2, [r3, #10]
 8002d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f003 fbd7 	bl	8006508 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d74:	823b      	strh	r3, [r7, #16]
 8002d76:	8a3b      	ldrh	r3, [r7, #16]
 8002d78:	f083 0310 	eor.w	r3, r3, #16
 8002d7c:	823b      	strh	r3, [r7, #16]
 8002d7e:	8a3b      	ldrh	r3, [r7, #16]
 8002d80:	f083 0320 	eor.w	r3, r3, #32
 8002d84:	823b      	strh	r3, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	441a      	add	r2, r3
 8002d94:	8a3b      	ldrh	r3, [r7, #16]
 8002d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3788      	adds	r7, #136	; 0x88
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	817b      	strh	r3, [r7, #10]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e009      	b.n	8002dfe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dea:	897a      	ldrh	r2, [r7, #10]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002dfe:	893b      	ldrh	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2200      	movs	r2, #0
 8002e08:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	80da      	strh	r2, [r3, #6]
 8002e12:	e00b      	b.n	8002e2c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2201      	movs	r2, #1
 8002e18:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e272      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8087 	beq.w	8002f66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e58:	4b92      	ldr	r3, [pc, #584]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d00c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e64:	4b8f      	ldr	r3, [pc, #572]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d112      	bne.n	8002e96 <HAL_RCC_OscConfig+0x5e>
 8002e70:	4b8c      	ldr	r3, [pc, #560]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7c:	d10b      	bne.n	8002e96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7e:	4b89      	ldr	r3, [pc, #548]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d06c      	beq.n	8002f64 <HAL_RCC_OscConfig+0x12c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d168      	bne.n	8002f64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e24c      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x76>
 8002ea0:	4b80      	ldr	r3, [pc, #512]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a7f      	ldr	r2, [pc, #508]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	e02e      	b.n	8002f0c <HAL_RCC_OscConfig+0xd4>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x98>
 8002eb6:	4b7b      	ldr	r3, [pc, #492]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7a      	ldr	r2, [pc, #488]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b78      	ldr	r3, [pc, #480]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a77      	ldr	r2, [pc, #476]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e01d      	b.n	8002f0c <HAL_RCC_OscConfig+0xd4>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xbc>
 8002eda:	4b72      	ldr	r3, [pc, #456]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a71      	ldr	r2, [pc, #452]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b6f      	ldr	r3, [pc, #444]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6e      	ldr	r2, [pc, #440]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0xd4>
 8002ef4:	4b6b      	ldr	r3, [pc, #428]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6a      	ldr	r2, [pc, #424]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b68      	ldr	r3, [pc, #416]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a67      	ldr	r2, [pc, #412]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fd fcd6 	bl	80008c4 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fd fcd2 	bl	80008c4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e200      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b5d      	ldr	r3, [pc, #372]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0xe4>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fd fcc2 	bl	80008c4 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fd fcbe 	bl	80008c4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e1ec      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x10c>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d063      	beq.n	800303a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f72:	4b4c      	ldr	r3, [pc, #304]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f7e:	4b49      	ldr	r3, [pc, #292]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x18c>
 8002f8a:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x176>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1c0      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b3d      	ldr	r3, [pc, #244]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4939      	ldr	r1, [pc, #228]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	e03a      	b.n	800303a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <HAL_RCC_OscConfig+0x270>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7fd fc77 	bl	80008c4 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fd fc73 	bl	80008c4 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e1a1      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4927      	ldr	r1, [pc, #156]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e015      	b.n	800303a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_RCC_OscConfig+0x270>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fd fc56 	bl	80008c4 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301c:	f7fd fc52 	bl	80008c4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e180      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d03a      	beq.n	80030bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d019      	beq.n	8003082 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <HAL_RCC_OscConfig+0x274>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7fd fc36 	bl	80008c4 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305c:	f7fd fc32 	bl	80008c4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e160      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800307a:	2001      	movs	r0, #1
 800307c:	f000 fad8 	bl	8003630 <RCC_Delay>
 8003080:	e01c      	b.n	80030bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_RCC_OscConfig+0x274>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7fd fc1c 	bl	80008c4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308e:	e00f      	b.n	80030b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7fd fc18 	bl	80008c4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d908      	bls.n	80030b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e146      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	42420000 	.word	0x42420000
 80030ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	4b92      	ldr	r3, [pc, #584]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e9      	bne.n	8003090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a6 	beq.w	8003216 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ce:	4b8b      	ldr	r3, [pc, #556]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10d      	bne.n	80030f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	4b88      	ldr	r3, [pc, #544]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4a87      	ldr	r2, [pc, #540]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	61d3      	str	r3, [r2, #28]
 80030e6:	4b85      	ldr	r3, [pc, #532]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b82      	ldr	r3, [pc, #520]	; (8003300 <HAL_RCC_OscConfig+0x4c8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d118      	bne.n	8003134 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003102:	4b7f      	ldr	r3, [pc, #508]	; (8003300 <HAL_RCC_OscConfig+0x4c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7e      	ldr	r2, [pc, #504]	; (8003300 <HAL_RCC_OscConfig+0x4c8>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7fd fbd9 	bl	80008c4 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7fd fbd5 	bl	80008c4 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e103      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	4b75      	ldr	r3, [pc, #468]	; (8003300 <HAL_RCC_OscConfig+0x4c8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x312>
 800313c:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a6e      	ldr	r2, [pc, #440]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	e02d      	b.n	80031a6 <HAL_RCC_OscConfig+0x36e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x334>
 8003152:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4a69      	ldr	r2, [pc, #420]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	6213      	str	r3, [r2, #32]
 800315e:	4b67      	ldr	r3, [pc, #412]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4a66      	ldr	r2, [pc, #408]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003164:	f023 0304 	bic.w	r3, r3, #4
 8003168:	6213      	str	r3, [r2, #32]
 800316a:	e01c      	b.n	80031a6 <HAL_RCC_OscConfig+0x36e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b05      	cmp	r3, #5
 8003172:	d10c      	bne.n	800318e <HAL_RCC_OscConfig+0x356>
 8003174:	4b61      	ldr	r3, [pc, #388]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4a60      	ldr	r2, [pc, #384]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 800317a:	f043 0304 	orr.w	r3, r3, #4
 800317e:	6213      	str	r3, [r2, #32]
 8003180:	4b5e      	ldr	r3, [pc, #376]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a5d      	ldr	r2, [pc, #372]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	e00b      	b.n	80031a6 <HAL_RCC_OscConfig+0x36e>
 800318e:	4b5b      	ldr	r3, [pc, #364]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	4a5a      	ldr	r2, [pc, #360]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6213      	str	r3, [r2, #32]
 800319a:	4b58      	ldr	r3, [pc, #352]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4a57      	ldr	r2, [pc, #348]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	f023 0304 	bic.w	r3, r3, #4
 80031a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d015      	beq.n	80031da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fd fb89 	bl	80008c4 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fd fb85 	bl	80008c4 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0b1      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	4b4b      	ldr	r3, [pc, #300]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ee      	beq.n	80031b6 <HAL_RCC_OscConfig+0x37e>
 80031d8:	e014      	b.n	8003204 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031da:	f7fd fb73 	bl	80008c4 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fd fb6f 	bl	80008c4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e09b      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f8:	4b40      	ldr	r3, [pc, #256]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ee      	bne.n	80031e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d105      	bne.n	8003216 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320a:	4b3c      	ldr	r3, [pc, #240]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4a3b      	ldr	r2, [pc, #236]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003214:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8087 	beq.w	800332e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003220:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d061      	beq.n	80032f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d146      	bne.n	80032c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003234:	4b33      	ldr	r3, [pc, #204]	; (8003304 <HAL_RCC_OscConfig+0x4cc>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323a:	f7fd fb43 	bl	80008c4 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003242:	f7fd fb3f 	bl	80008c4 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e06d      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003254:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d108      	bne.n	800327c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800326a:	4b24      	ldr	r3, [pc, #144]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	4921      	ldr	r1, [pc, #132]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a19      	ldr	r1, [r3, #32]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	430b      	orrs	r3, r1
 800328e:	491b      	ldr	r1, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_RCC_OscConfig+0x4cc>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7fd fb13 	bl	80008c4 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fd fb0f 	bl	80008c4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e03d      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x46a>
 80032c0:	e035      	b.n	800332e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_RCC_OscConfig+0x4cc>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fd fafc 	bl	80008c4 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fd faf8 	bl	80008c4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e026      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x498>
 80032ee:	e01e      	b.n	800332e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e019      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
 80032fc:	40021000 	.word	0x40021000
 8003300:	40007000 	.word	0x40007000
 8003304:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_OscConfig+0x500>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	429a      	cmp	r2, r3
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d001      	beq.n	800332e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000

0800333c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0d0      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b6a      	ldr	r3, [pc, #424]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d910      	bls.n	8003380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b67      	ldr	r3, [pc, #412]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0207 	bic.w	r2, r3, #7
 8003366:	4965      	ldr	r1, [pc, #404]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b8      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a52      	ldr	r2, [pc, #328]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	494d      	ldr	r1, [pc, #308]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d040      	beq.n	800345c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d115      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e073      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e06b      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b39      	ldr	r3, [pc, #228]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4936      	ldr	r1, [pc, #216]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800342c:	f7fd fa4a 	bl	80008c4 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fd fa46 	bl	80008c4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e053      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d210      	bcs.n	800348c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 0207 	bic.w	r2, r3, #7
 8003472:	4922      	ldr	r1, [pc, #136]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e032      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4916      	ldr	r1, [pc, #88]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ca:	f000 f821 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	490a      	ldr	r1, [pc, #40]	; (8003504 <HAL_RCC_ClockConfig+0x1c8>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1cc>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x1d0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd f9a8 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40022000 	.word	0x40022000
 8003500:	40021000 	.word	0x40021000
 8003504:	08008428 	.word	0x08008428
 8003508:	20000000 	.word	0x20000000
 800350c:	20000004 	.word	0x20000004

08003510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	b490      	push	{r4, r7}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <HAL_RCC_GetSysClockFreq+0xac>)
 8003518:	1d3c      	adds	r4, r7, #4
 800351a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800351c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003520:	f240 2301 	movw	r3, #513	; 0x201
 8003524:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800353a:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b04      	cmp	r3, #4
 8003548:	d002      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x40>
 800354a:	2b08      	cmp	r3, #8
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0x46>
 800354e:	e02b      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003550:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003552:	623b      	str	r3, [r7, #32]
      break;
 8003554:	e02b      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	0c9b      	lsrs	r3, r3, #18
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3328      	adds	r3, #40	; 0x28
 8003560:	443b      	add	r3, r7
 8003562:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003566:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d012      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	0c5b      	lsrs	r3, r3, #17
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	3328      	adds	r3, #40	; 0x28
 800357e:	443b      	add	r3, r7
 8003580:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003584:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800358a:	fb03 f202 	mul.w	r2, r3, r2
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	e004      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	623b      	str	r3, [r7, #32]
      break;
 80035a6:	e002      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035aa:	623b      	str	r3, [r7, #32]
      break;
 80035ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ae:	6a3b      	ldr	r3, [r7, #32]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3728      	adds	r7, #40	; 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc90      	pop	{r4, r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	080083d0 	.word	0x080083d0
 80035c0:	40021000 	.word	0x40021000
 80035c4:	007a1200 	.word	0x007a1200
 80035c8:	003d0900 	.word	0x003d0900

080035cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d0:	4b02      	ldr	r3, [pc, #8]	; (80035dc <HAL_RCC_GetHCLKFreq+0x10>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	20000000 	.word	0x20000000

080035e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e4:	f7ff fff2 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4903      	ldr	r1, [pc, #12]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	08008438 	.word	0x08008438

08003608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800360c:	f7ff ffde 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	0adb      	lsrs	r3, r3, #11
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	4903      	ldr	r1, [pc, #12]	; (800362c <HAL_RCC_GetPCLK2Freq+0x24>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	08008438 	.word	0x08008438

08003630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <RCC_Delay+0x34>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <RCC_Delay+0x38>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0a5b      	lsrs	r3, r3, #9
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	fb02 f303 	mul.w	r3, r2, r3
 800364a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800364c:	bf00      	nop
  }
  while (Delay --);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1e5a      	subs	r2, r3, #1
 8003652:	60fa      	str	r2, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f9      	bne.n	800364c <RCC_Delay+0x1c>
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	20000000 	.word	0x20000000
 8003668:	10624dd3 	.word	0x10624dd3

0800366c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d07d      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368c:	4b4f      	ldr	r3, [pc, #316]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10d      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003698:	4b4c      	ldr	r3, [pc, #304]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	4a4b      	ldr	r2, [pc, #300]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a2:	61d3      	str	r3, [r2, #28]
 80036a4:	4b49      	ldr	r3, [pc, #292]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d118      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c0:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a42      	ldr	r2, [pc, #264]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036cc:	f7fd f8fa 	bl	80008c4 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d2:	e008      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fd f8f6 	bl	80008c4 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e06d      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036f2:	4b36      	ldr	r3, [pc, #216]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02e      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	429a      	cmp	r2, r3
 800370e:	d027      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003710:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003718:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800371a:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003720:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003726:	4a29      	ldr	r2, [pc, #164]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d014      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fd f8c5 	bl	80008c4 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373c:	e00a      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fd f8c1 	bl	80008c4 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e036      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ee      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4917      	ldr	r1, [pc, #92]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376e:	4313      	orrs	r3, r2
 8003770:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d105      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	4a13      	ldr	r2, [pc, #76]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003782:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	490b      	ldr	r1, [pc, #44]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4904      	ldr	r1, [pc, #16]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40007000 	.word	0x40007000
 80037d4:	42420440 	.word	0x42420440

080037d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e076      	b.n	80038d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d108      	bne.n	8003804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fa:	d009      	beq.n	8003810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
 8003802:	e005      	b.n	8003810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fc fed0 	bl	80005d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003846:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003894:	ea42 0103 	orr.w	r1, r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	0c1a      	lsrs	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f002 0204 	and.w	r2, r2, #4
 80038b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e03f      	b.n	8003972 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fc fed0 	bl	80006ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f829 	bl	800397c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039b6:	f023 030c 	bic.w	r3, r3, #12
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2c      	ldr	r2, [pc, #176]	; (8003a90 <UART_SetConfig+0x114>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d103      	bne.n	80039ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7ff fe10 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	e002      	b.n	80039f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039ec:	f7ff fdf8 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 80039f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	009a      	lsls	r2, r3, #2
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <UART_SetConfig+0x118>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	0119      	lsls	r1, r3, #4
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009a      	lsls	r2, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <UART_SetConfig+0x118>)
 8003a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2064      	movs	r0, #100	; 0x64
 8003a32:	fb00 f303 	mul.w	r3, r0, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	3332      	adds	r3, #50	; 0x32
 8003a3c:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <UART_SetConfig+0x118>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a48:	4419      	add	r1, r3
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <UART_SetConfig+0x118>)
 8003a62:	fba3 0302 	umull	r0, r3, r3, r2
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2064      	movs	r0, #100	; 0x64
 8003a6a:	fb00 f303 	mul.w	r3, r0, r3
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	3332      	adds	r3, #50	; 0x32
 8003a74:	4a07      	ldr	r2, [pc, #28]	; (8003a94 <UART_SetConfig+0x118>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	f003 020f 	and.w	r2, r3, #15
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	440a      	add	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40013800 	.word	0x40013800
 8003a94:	51eb851f 	.word	0x51eb851f

08003a98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a98:	b084      	sub	sp, #16
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	f107 0014 	add.w	r0, r7, #20
 8003aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	b004      	add	sp, #16
 8003ab6:	4770      	bx	lr

08003ab8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ac8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003acc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003aec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003af0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	4013      	ands	r3, r2
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b30:	b084      	sub	sp, #16
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	f107 0014 	add.w	r0, r7, #20
 8003b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	b004      	add	sp, #16
 8003b6e:	4770      	bx	lr

08003b70 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b09b      	sub	sp, #108	; 0x6c
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	78db      	ldrb	r3, [r3, #3]
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d81f      	bhi.n	8003be2 <USB_ActivateEndpoint+0x72>
 8003ba2:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <USB_ActivateEndpoint+0x38>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bd5 	.word	0x08003bd5
 8003bb0:	08003beb 	.word	0x08003beb
 8003bb4:	08003bc7 	.word	0x08003bc7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003bb8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bc0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bc4:	e012      	b.n	8003bec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003bc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003bce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bd2:	e00b      	b.n	8003bec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003bd4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bdc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003be0:	e004      	b.n	8003bec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003be8:	e000      	b.n	8003bec <USB_ActivateEndpoint+0x7c>
      break;
 8003bea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	441a      	add	r2, r3
 8003c3c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	7b1b      	ldrb	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f040 8149 	bne.w	8003ef0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	785b      	ldrb	r3, [r3, #1]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8084 	beq.w	8003d70 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	4413      	add	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	011a      	lsls	r2, r3, #4
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	88db      	ldrh	r3, [r3, #6]
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	81fb      	strh	r3, [r7, #14]
 8003caa:	89fb      	ldrh	r3, [r7, #14]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <USB_ActivateEndpoint+0x17c>
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	81bb      	strh	r3, [r7, #12]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	89bb      	ldrh	r3, [r7, #12]
 8003cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	78db      	ldrb	r3, [r3, #3]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d020      	beq.n	8003d36 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d0a:	813b      	strh	r3, [r7, #8]
 8003d0c:	893b      	ldrh	r3, [r7, #8]
 8003d0e:	f083 0320 	eor.w	r3, r3, #32
 8003d12:	813b      	strh	r3, [r7, #8]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	893b      	ldrh	r3, [r7, #8]
 8003d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	8013      	strh	r3, [r2, #0]
 8003d34:	e27f      	b.n	8004236 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d4c:	817b      	strh	r3, [r7, #10]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	441a      	add	r2, r3
 8003d58:	897b      	ldrh	r3, [r7, #10]
 8003d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8013      	strh	r3, [r2, #0]
 8003d6e:	e262      	b.n	8004236 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	4413      	add	r3, r2
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	011a      	lsls	r2, r3, #4
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	88db      	ldrh	r3, [r3, #6]
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	4413      	add	r3, r2
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	011a      	lsls	r2, r3, #4
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d112      	bne.n	8003df6 <USB_ActivateEndpoint+0x286>
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	801a      	strh	r2, [r3, #0]
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	e02f      	b.n	8003e56 <USB_ActivateEndpoint+0x2e6>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8003dfc:	d813      	bhi.n	8003e26 <USB_ActivateEndpoint+0x2b6>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	663b      	str	r3, [r7, #96]	; 0x60
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <USB_ActivateEndpoint+0x2a8>
 8003e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e14:	3301      	adds	r3, #1
 8003e16:	663b      	str	r3, [r7, #96]	; 0x60
 8003e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	029b      	lsls	r3, r3, #10
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	e017      	b.n	8003e56 <USB_ActivateEndpoint+0x2e6>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <USB_ActivateEndpoint+0x2d0>
 8003e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	029b      	lsls	r3, r3, #10
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	83fb      	strh	r3, [r7, #30]
 8003e64:	8bfb      	ldrh	r3, [r7, #30]
 8003e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01b      	beq.n	8003ea6 <USB_ActivateEndpoint+0x336>
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e84:	83bb      	strh	r3, [r7, #28]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	441a      	add	r2, r3
 8003e90:	8bbb      	ldrh	r3, [r7, #28]
 8003e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebc:	837b      	strh	r3, [r7, #26]
 8003ebe:	8b7b      	ldrh	r3, [r7, #26]
 8003ec0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ec4:	837b      	strh	r3, [r7, #26]
 8003ec6:	8b7b      	ldrh	r3, [r7, #26]
 8003ec8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ecc:	837b      	strh	r3, [r7, #26]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	441a      	add	r2, r3
 8003ed8:	8b7b      	ldrh	r3, [r7, #26]
 8003eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	8013      	strh	r3, [r2, #0]
 8003eee:	e1a2      	b.n	8004236 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	441a      	add	r2, r3
 8003f14:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f3c:	4413      	add	r3, r2
 8003f3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	011a      	lsls	r2, r3, #4
 8003f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	891b      	ldrh	r3, [r3, #8]
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	653b      	str	r3, [r7, #80]	; 0x50
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f70:	4413      	add	r3, r2
 8003f72:	653b      	str	r3, [r7, #80]	; 0x50
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	011a      	lsls	r2, r3, #4
 8003f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	895b      	ldrh	r3, [r3, #10]
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f040 8091 	bne.w	80040c0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003fac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01b      	beq.n	8003fee <USB_ActivateEndpoint+0x47e>
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fcc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	873b      	strh	r3, [r7, #56]	; 0x38
 8003ffc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01b      	beq.n	800403e <USB_ActivateEndpoint+0x4ce>
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	441a      	add	r2, r3
 8004028:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800402a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800403a:	b29b      	uxth	r3, r3
 800403c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004054:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004056:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004058:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800405c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800405e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004060:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004064:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	441a      	add	r2, r3
 8004070:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800407a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004082:	b29b      	uxth	r3, r3
 8004084:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409c:	867b      	strh	r3, [r7, #50]	; 0x32
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	441a      	add	r2, r3
 80040a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80040aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	8013      	strh	r3, [r2, #0]
 80040be:	e0ba      	b.n	8004236 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80040d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01d      	beq.n	8004118 <USB_ActivateEndpoint+0x5a8>
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	441a      	add	r2, r3
 8004100:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800410c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004114:	b29b      	uxth	r3, r3
 8004116:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004128:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01d      	beq.n	8004170 <USB_ActivateEndpoint+0x600>
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	441a      	add	r2, r3
 8004158:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800415c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800416c:	b29b      	uxth	r3, r3
 800416e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	78db      	ldrb	r3, [r3, #3]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d024      	beq.n	80041c2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004192:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004196:	f083 0320 	eor.w	r3, r3, #32
 800419a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	441a      	add	r2, r3
 80041a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041bc:	b29b      	uxth	r3, r3
 80041be:	8013      	strh	r3, [r2, #0]
 80041c0:	e01d      	b.n	80041fe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	441a      	add	r2, r3
 80041e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80041ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004236:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800423a:	4618      	mov	r0, r3
 800423c:	376c      	adds	r7, #108	; 0x6c
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004244:	b480      	push	{r7}
 8004246:	b08d      	sub	sp, #52	; 0x34
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	7b1b      	ldrb	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 808e 	bne.w	8004374 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d044      	beq.n	80042ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	81bb      	strh	r3, [r7, #12]
 800426e:	89bb      	ldrh	r3, [r7, #12]
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01b      	beq.n	80042b0 <USB_DeactivateEndpoint+0x6c>
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29b      	uxth	r3, r3
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	817b      	strh	r3, [r7, #10]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	897b      	ldrh	r3, [r7, #10]
 800429c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c6:	813b      	strh	r3, [r7, #8]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	441a      	add	r2, r3
 80042d2:	893b      	ldrh	r3, [r7, #8]
 80042d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]
 80042e8:	e192      	b.n	8004610 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	827b      	strh	r3, [r7, #18]
 80042f8:	8a7b      	ldrh	r3, [r7, #18]
 80042fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01b      	beq.n	800433a <USB_DeactivateEndpoint+0xf6>
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004318:	823b      	strh	r3, [r7, #16]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	441a      	add	r2, r3
 8004324:	8a3b      	ldrh	r3, [r7, #16]
 8004326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004336:	b29b      	uxth	r3, r3
 8004338:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800434c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004350:	81fb      	strh	r3, [r7, #14]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	89fb      	ldrh	r3, [r7, #14]
 800435e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436e:	b29b      	uxth	r3, r3
 8004370:	8013      	strh	r3, [r2, #0]
 8004372:	e14d      	b.n	8004610 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 80a5 	bne.w	80044c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	843b      	strh	r3, [r7, #32]
 800438c:	8c3b      	ldrh	r3, [r7, #32]
 800438e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01b      	beq.n	80043ce <USB_DeactivateEndpoint+0x18a>
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	83fb      	strh	r3, [r7, #30]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	441a      	add	r2, r3
 80043b8:	8bfb      	ldrh	r3, [r7, #30]
 80043ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	83bb      	strh	r3, [r7, #28]
 80043dc:	8bbb      	ldrh	r3, [r7, #28]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01b      	beq.n	800441e <USB_DeactivateEndpoint+0x1da>
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fc:	837b      	strh	r3, [r7, #26]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	8b7b      	ldrh	r3, [r7, #26]
 800440a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004416:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800441a:	b29b      	uxth	r3, r3
 800441c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004434:	833b      	strh	r3, [r7, #24]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	441a      	add	r2, r3
 8004440:	8b3b      	ldrh	r3, [r7, #24]
 8004442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004452:	b29b      	uxth	r3, r3
 8004454:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446c:	82fb      	strh	r3, [r7, #22]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	441a      	add	r2, r3
 8004478:	8afb      	ldrh	r3, [r7, #22]
 800447a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448a:	b29b      	uxth	r3, r3
 800448c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a4:	82bb      	strh	r3, [r7, #20]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	441a      	add	r2, r3
 80044b0:	8abb      	ldrh	r3, [r7, #20]
 80044b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	8013      	strh	r3, [r2, #0]
 80044c6:	e0a3      	b.n	8004610 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80044d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01b      	beq.n	8004518 <USB_DeactivateEndpoint+0x2d4>
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004526:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01b      	beq.n	8004568 <USB_DeactivateEndpoint+0x324>
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	853b      	strh	r3, [r7, #40]	; 0x28
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004564:	b29b      	uxth	r3, r3
 8004566:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	441a      	add	r2, r3
 800458a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800458c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459c:	b29b      	uxth	r3, r3
 800459e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	441a      	add	r2, r3
 80045c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460c:	b29b      	uxth	r3, r3
 800460e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3734      	adds	r7, #52	; 0x34
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b0cc      	sub	sp, #304	; 0x130
 8004620:	af00      	add	r7, sp, #0
 8004622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800462a:	6018      	str	r0, [r3, #0]
 800462c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004634:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800463a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	785b      	ldrb	r3, [r3, #1]
 8004642:	2b01      	cmp	r3, #1
 8004644:	f041 817d 	bne.w	8005942 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800464c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	429a      	cmp	r2, r3
 8004662:	d908      	bls.n	8004676 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004674:	e007      	b.n	8004686 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800467a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800468a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	7b1b      	ldrb	r3, [r3, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d152      	bne.n	800473c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800469a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6959      	ldr	r1, [r3, #20]
 80046a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	88da      	ldrh	r2, [r3, #6]
 80046ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80046b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80046bc:	6800      	ldr	r0, [r0, #0]
 80046be:	f001 ff23 	bl	8006508 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046ce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	4619      	mov	r1, r3
 80046e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046f4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	440a      	add	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	011a      	lsls	r2, r3, #4
 800470c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004710:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4413      	add	r3, r2
 8004718:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800471c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004720:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800472a:	b29a      	uxth	r2, r3
 800472c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004730:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	f001 b8b5 	b.w	80058a6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800473c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	78db      	ldrb	r3, [r3, #3]
 8004748:	2b02      	cmp	r3, #2
 800474a:	f040 84c6 	bne.w	80050da <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800474e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6a1a      	ldr	r2, [r3, #32]
 800475a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800475e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	429a      	cmp	r2, r3
 8004768:	f240 8443 	bls.w	8004ff2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800476c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004770:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800477a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800479a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80047c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a1a      	ldr	r2, [r3, #32]
 80047d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047d8:	1ad2      	subs	r2, r2, r3
 80047da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 823e 	beq.w	8004c8a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800480e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004812:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004816:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800481a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 809a 	bne.w	8004968 <USB_EPStartXfer+0x34c>
 8004834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800483c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004840:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004856:	b29b      	uxth	r3, r3
 8004858:	4619      	mov	r1, r3
 800485a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004862:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004866:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	440a      	add	r2, r1
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	011a      	lsls	r2, r3, #4
 800487e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4413      	add	r3, r2
 800488a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800488e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004892:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d122      	bne.n	80048e6 <USB_EPStartXfer+0x2ca>
 80048a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	e079      	b.n	80049da <USB_EPStartXfer+0x3be>
 80048e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ea:	2b3e      	cmp	r3, #62	; 0x3e
 80048ec:	d81b      	bhi.n	8004926 <USB_EPStartXfer+0x30a>
 80048ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <USB_EPStartXfer+0x2f2>
 8004904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004908:	3301      	adds	r3, #1
 800490a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800490e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004912:	b29b      	uxth	r3, r3
 8004914:	029b      	lsls	r3, r3, #10
 8004916:	b29a      	uxth	r2, r3
 8004918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	801a      	strh	r2, [r3, #0]
 8004924:	e059      	b.n	80049da <USB_EPStartXfer+0x3be>
 8004926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	2b00      	cmp	r3, #0
 800493a:	d104      	bne.n	8004946 <USB_EPStartXfer+0x32a>
 800493c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004940:	3b01      	subs	r3, #1
 8004942:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004946:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800494a:	b29b      	uxth	r3, r3
 800494c:	029b      	lsls	r3, r3, #10
 800494e:	b29b      	uxth	r3, r3
 8004950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004958:	b29a      	uxth	r2, r3
 800495a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800495e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	e038      	b.n	80049da <USB_EPStartXfer+0x3be>
 8004968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800496c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	785b      	ldrb	r3, [r3, #1]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d130      	bne.n	80049da <USB_EPStartXfer+0x3be>
 8004978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004986:	b29b      	uxth	r3, r3
 8004988:	4619      	mov	r1, r3
 800498a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004992:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004996:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	440a      	add	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	011a      	lsls	r2, r3, #4
 80049ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4413      	add	r3, r2
 80049ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80049be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80049da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	895b      	ldrh	r3, [r3, #10]
 80049e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6959      	ldr	r1, [r3, #20]
 80049f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a00:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a04:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a08:	6800      	ldr	r0, [r0, #0]
 8004a0a:	f001 fd7d 	bl	8006508 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695a      	ldr	r2, [r3, #20]
 8004a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a1e:	441a      	add	r2, r3
 8004a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6a1a      	ldr	r2, [r3, #32]
 8004a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d90f      	bls.n	8004a68 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a58:	1ad2      	subs	r2, r2, r3
 8004a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	621a      	str	r2, [r3, #32]
 8004a66:	e00e      	b.n	8004a86 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2200      	movs	r2, #0
 8004a84:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	785b      	ldrb	r3, [r3, #1]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f040 809a 	bne.w	8004bcc <USB_EPStartXfer+0x5b0>
 8004a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004aa0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004aa4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	4619      	mov	r1, r3
 8004abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ac6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004aca:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	011a      	lsls	r2, r3, #4
 8004ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4413      	add	r3, r2
 8004aee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d122      	bne.n	8004b4a <USB_EPStartXfer+0x52e>
 8004b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	801a      	strh	r2, [r3, #0]
 8004b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e083      	b.n	8004c52 <USB_EPStartXfer+0x636>
 8004b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b50:	d81b      	bhi.n	8004b8a <USB_EPStartXfer+0x56e>
 8004b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <USB_EPStartXfer+0x556>
 8004b68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	029b      	lsls	r3, r3, #10
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	801a      	strh	r2, [r3, #0]
 8004b88:	e063      	b.n	8004c52 <USB_EPStartXfer+0x636>
 8004b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <USB_EPStartXfer+0x58e>
 8004ba0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004baa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	029b      	lsls	r3, r3, #10
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	801a      	strh	r2, [r3, #0]
 8004bca:	e042      	b.n	8004c52 <USB_EPStartXfer+0x636>
 8004bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	785b      	ldrb	r3, [r3, #1]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d13a      	bne.n	8004c52 <USB_EPStartXfer+0x636>
 8004bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004be4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004be8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	4619      	mov	r1, r3
 8004c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c0e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	440a      	add	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	011a      	lsls	r2, r3, #4
 8004c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4413      	add	r3, r2
 8004c32:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	891b      	ldrh	r3, [r3, #8]
 8004c5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6959      	ldr	r1, [r3, #20]
 8004c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c80:	6800      	ldr	r0, [r0, #0]
 8004c82:	f001 fc41 	bl	8006508 <USB_WritePMA>
 8004c86:	f000 be0e 	b.w	80058a6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d16d      	bne.n	8004d76 <USB_EPStartXfer+0x75a>
 8004c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004caa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cba:	4413      	add	r3, r2
 8004cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	011a      	lsls	r2, r3, #4
 8004ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cce:	4413      	add	r3, r2
 8004cd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d112      	bne.n	8004d04 <USB_EPStartXfer+0x6e8>
 8004cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cec:	801a      	strh	r2, [r3, #0]
 8004cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	e063      	b.n	8004dcc <USB_EPStartXfer+0x7b0>
 8004d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d08:	2b3e      	cmp	r3, #62	; 0x3e
 8004d0a:	d817      	bhi.n	8004d3c <USB_EPStartXfer+0x720>
 8004d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d004      	beq.n	8004d2c <USB_EPStartXfer+0x710>
 8004d22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d26:	3301      	adds	r3, #1
 8004d28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	029b      	lsls	r3, r3, #10
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	e047      	b.n	8004dcc <USB_EPStartXfer+0x7b0>
 8004d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d104      	bne.n	8004d5c <USB_EPStartXfer+0x740>
 8004d52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d56:	3b01      	subs	r3, #1
 8004d58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	029b      	lsls	r3, r3, #10
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d72:	801a      	strh	r2, [r3, #0]
 8004d74:	e02a      	b.n	8004dcc <USB_EPStartXfer+0x7b0>
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d122      	bne.n	8004dcc <USB_EPStartXfer+0x7b0>
 8004d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	653b      	str	r3, [r7, #80]	; 0x50
 8004d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da6:	4413      	add	r3, r2
 8004da8:	653b      	str	r3, [r7, #80]	; 0x50
 8004daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	011a      	lsls	r2, r3, #4
 8004db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dba:	4413      	add	r3, r2
 8004dbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	891b      	ldrh	r3, [r3, #8]
 8004dd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6959      	ldr	r1, [r3, #20]
 8004de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004df2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004df6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004dfa:	6800      	ldr	r0, [r0, #0]
 8004dfc:	f001 fb84 	bl	8006508 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e10:	441a      	add	r2, r3
 8004e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6a1a      	ldr	r2, [r3, #32]
 8004e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d90f      	bls.n	8004e5a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6a1a      	ldr	r2, [r3, #32]
 8004e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	621a      	str	r2, [r3, #32]
 8004e58:	e00e      	b.n	8004e78 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2200      	movs	r2, #0
 8004e76:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	643b      	str	r3, [r7, #64]	; 0x40
 8004e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d16d      	bne.n	8004f70 <USB_EPStartXfer+0x954>
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	4413      	add	r3, r2
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	011a      	lsls	r2, r3, #4
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	4413      	add	r3, r2
 8004eca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d112      	bne.n	8004efe <USB_EPStartXfer+0x8e2>
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	e05d      	b.n	8004fba <USB_EPStartXfer+0x99e>
 8004efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f02:	2b3e      	cmp	r3, #62	; 0x3e
 8004f04:	d817      	bhi.n	8004f36 <USB_EPStartXfer+0x91a>
 8004f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d004      	beq.n	8004f26 <USB_EPStartXfer+0x90a>
 8004f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f20:	3301      	adds	r3, #1
 8004f22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	029b      	lsls	r3, r3, #10
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f32:	801a      	strh	r2, [r3, #0]
 8004f34:	e041      	b.n	8004fba <USB_EPStartXfer+0x99e>
 8004f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f44:	f003 031f 	and.w	r3, r3, #31
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <USB_EPStartXfer+0x93a>
 8004f4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f50:	3b01      	subs	r3, #1
 8004f52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	029b      	lsls	r3, r3, #10
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	e024      	b.n	8004fba <USB_EPStartXfer+0x99e>
 8004f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d11c      	bne.n	8004fba <USB_EPStartXfer+0x99e>
 8004f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f94:	4413      	add	r3, r2
 8004f96:	643b      	str	r3, [r7, #64]	; 0x40
 8004f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	011a      	lsls	r2, r3, #4
 8004fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa8:	4413      	add	r3, r2
 8004faa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	895b      	ldrh	r3, [r3, #10]
 8004fc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6959      	ldr	r1, [r3, #20]
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fe0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fe4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fe8:	6800      	ldr	r0, [r0, #0]
 8004fea:	f001 fa8d 	bl	8006508 <USB_WritePMA>
 8004fee:	f000 bc5a 	b.w	80058a6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005006:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800502c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005030:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800504a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505a:	b29b      	uxth	r3, r3
 800505c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800506a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005078:	b29b      	uxth	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800507e:	4413      	add	r3, r2
 8005080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	011a      	lsls	r2, r3, #4
 8005090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005092:	4413      	add	r3, r2
 8005094:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005098:	65bb      	str	r3, [r7, #88]	; 0x58
 800509a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800509e:	b29a      	uxth	r2, r3
 80050a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	891b      	ldrh	r3, [r3, #8]
 80050b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6959      	ldr	r1, [r3, #20]
 80050c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050ca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80050ce:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80050d2:	6800      	ldr	r0, [r0, #0]
 80050d4:	f001 fa18 	bl	8006508 <USB_WritePMA>
 80050d8:	e3e5      	b.n	80058a6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80050da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005100:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005108:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	441a      	add	r2, r3
 800511e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800512e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005132:	b29b      	uxth	r3, r3
 8005134:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005146:	1ad2      	subs	r2, r2, r3
 8005148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005158:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 81bc 	beq.w	80054f4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800517c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800518a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d16d      	bne.n	8005276 <USB_EPStartXfer+0xc5a>
 800519a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80051a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ba:	4413      	add	r3, r2
 80051bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80051be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	011a      	lsls	r2, r3, #4
 80051cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ce:	4413      	add	r3, r2
 80051d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051d4:	677b      	str	r3, [r7, #116]	; 0x74
 80051d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d112      	bne.n	8005204 <USB_EPStartXfer+0xbe8>
 80051de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ec:	801a      	strh	r2, [r3, #0]
 80051ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005200:	801a      	strh	r2, [r3, #0]
 8005202:	e060      	b.n	80052c6 <USB_EPStartXfer+0xcaa>
 8005204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005208:	2b3e      	cmp	r3, #62	; 0x3e
 800520a:	d817      	bhi.n	800523c <USB_EPStartXfer+0xc20>
 800520c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <USB_EPStartXfer+0xc10>
 8005222:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005226:	3301      	adds	r3, #1
 8005228:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800522c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005230:	b29b      	uxth	r3, r3
 8005232:	029b      	lsls	r3, r3, #10
 8005234:	b29a      	uxth	r2, r3
 8005236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e044      	b.n	80052c6 <USB_EPStartXfer+0xcaa>
 800523c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <USB_EPStartXfer+0xc40>
 8005252:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005256:	3b01      	subs	r3, #1
 8005258:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800525c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005260:	b29b      	uxth	r3, r3
 8005262:	029b      	lsls	r3, r3, #10
 8005264:	b29b      	uxth	r3, r3
 8005266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526e:	b29a      	uxth	r2, r3
 8005270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	e027      	b.n	80052c6 <USB_EPStartXfer+0xcaa>
 8005276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d11f      	bne.n	80052c6 <USB_EPStartXfer+0xcaa>
 8005286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800529c:	4413      	add	r3, r2
 800529e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	011a      	lsls	r2, r3, #4
 80052b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052b4:	4413      	add	r3, r2
 80052b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80052c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	895b      	ldrh	r3, [r3, #10]
 80052d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6959      	ldr	r1, [r3, #20]
 80052e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80052f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052f4:	6800      	ldr	r0, [r0, #0]
 80052f6:	f001 f907 	bl	8006508 <USB_WritePMA>
          ep->xfer_buff += len;
 80052fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530a:	441a      	add	r2, r3
 800530c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6a1a      	ldr	r2, [r3, #32]
 8005324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	429a      	cmp	r2, r3
 8005332:	d90f      	bls.n	8005354 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1a      	ldr	r2, [r3, #32]
 8005340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005344:	1ad2      	subs	r2, r2, r3
 8005346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	621a      	str	r2, [r3, #32]
 8005352:	e00e      	b.n	8005372 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8295 	beq.w	80058a6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800537c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d16d      	bne.n	8005468 <USB_EPStartXfer+0xe4c>
 800538c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005390:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	66bb      	str	r3, [r7, #104]	; 0x68
 8005398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ac:	4413      	add	r3, r2
 80053ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80053b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	011a      	lsls	r2, r3, #4
 80053be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053c0:	4413      	add	r3, r2
 80053c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053c6:	667b      	str	r3, [r7, #100]	; 0x64
 80053c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d112      	bne.n	80053f6 <USB_EPStartXfer+0xdda>
 80053d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053da:	b29a      	uxth	r2, r3
 80053dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e063      	b.n	80054be <USB_EPStartXfer+0xea2>
 80053f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fa:	2b3e      	cmp	r3, #62	; 0x3e
 80053fc:	d817      	bhi.n	800542e <USB_EPStartXfer+0xe12>
 80053fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d004      	beq.n	800541e <USB_EPStartXfer+0xe02>
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005418:	3301      	adds	r3, #1
 800541a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005422:	b29b      	uxth	r3, r3
 8005424:	029b      	lsls	r3, r3, #10
 8005426:	b29a      	uxth	r2, r3
 8005428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	e047      	b.n	80054be <USB_EPStartXfer+0xea2>
 800542e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	2b00      	cmp	r3, #0
 8005442:	d104      	bne.n	800544e <USB_EPStartXfer+0xe32>
 8005444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005448:	3b01      	subs	r3, #1
 800544a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800544e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005452:	b29b      	uxth	r3, r3
 8005454:	029b      	lsls	r3, r3, #10
 8005456:	b29b      	uxth	r3, r3
 8005458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005460:	b29a      	uxth	r2, r3
 8005462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005464:	801a      	strh	r2, [r3, #0]
 8005466:	e02a      	b.n	80054be <USB_EPStartXfer+0xea2>
 8005468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d122      	bne.n	80054be <USB_EPStartXfer+0xea2>
 8005478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	673b      	str	r3, [r7, #112]	; 0x70
 8005484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005492:	b29b      	uxth	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005498:	4413      	add	r3, r2
 800549a:	673b      	str	r3, [r7, #112]	; 0x70
 800549c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	011a      	lsls	r2, r3, #4
 80054aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	891b      	ldrh	r3, [r3, #8]
 80054ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6959      	ldr	r1, [r3, #20]
 80054da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054ec:	6800      	ldr	r0, [r0, #0]
 80054ee:	f001 f80b 	bl	8006508 <USB_WritePMA>
 80054f2:	e1d8      	b.n	80058a6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d178      	bne.n	80055f6 <USB_EPStartXfer+0xfda>
 8005504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005516:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005520:	b29b      	uxth	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005528:	4413      	add	r3, r2
 800552a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800552e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	011a      	lsls	r2, r3, #4
 800553c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005540:	4413      	add	r3, r2
 8005542:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005546:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800554a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d116      	bne.n	8005580 <USB_EPStartXfer+0xf64>
 8005552:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800555e:	b29a      	uxth	r2, r3
 8005560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005576:	b29a      	uxth	r2, r3
 8005578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e06b      	b.n	8005658 <USB_EPStartXfer+0x103c>
 8005580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005584:	2b3e      	cmp	r3, #62	; 0x3e
 8005586:	d818      	bhi.n	80055ba <USB_EPStartXfer+0xf9e>
 8005588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <USB_EPStartXfer+0xf8c>
 800559e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055a2:	3301      	adds	r3, #1
 80055a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	029b      	lsls	r3, r3, #10
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	e04e      	b.n	8005658 <USB_EPStartXfer+0x103c>
 80055ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <USB_EPStartXfer+0xfbe>
 80055d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055d4:	3b01      	subs	r3, #1
 80055d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055de:	b29b      	uxth	r3, r3
 80055e0:	029b      	lsls	r3, r3, #10
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055f2:	801a      	strh	r2, [r3, #0]
 80055f4:	e030      	b.n	8005658 <USB_EPStartXfer+0x103c>
 80055f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d128      	bne.n	8005658 <USB_EPStartXfer+0x103c>
 8005606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800562a:	4413      	add	r3, r2
 800562c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	011a      	lsls	r2, r3, #4
 800563e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005642:	4413      	add	r3, r2
 8005644:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005648:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800564c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005650:	b29a      	uxth	r2, r3
 8005652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005656:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	891b      	ldrh	r3, [r3, #8]
 8005664:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6959      	ldr	r1, [r3, #20]
 8005674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005678:	b29b      	uxth	r3, r3
 800567a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800567e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005682:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005686:	6800      	ldr	r0, [r0, #0]
 8005688:	f000 ff3e 	bl	8006508 <USB_WritePMA>
          ep->xfer_buff += len;
 800568c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569c:	441a      	add	r2, r3
 800569e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80056aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6a1a      	ldr	r2, [r3, #32]
 80056b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d90f      	bls.n	80056e6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80056c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6a1a      	ldr	r2, [r3, #32]
 80056d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	621a      	str	r2, [r3, #32]
 80056e4:	e00e      	b.n	8005704 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80056e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80056f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2200      	movs	r2, #0
 8005702:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80cc 	beq.w	80058a6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800570e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005712:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800571c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d178      	bne.n	800581e <USB_EPStartXfer+0x1202>
 800572c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005730:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005748:	b29b      	uxth	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005750:	4413      	add	r3, r2
 8005752:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	011a      	lsls	r2, r3, #4
 8005764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005768:	4413      	add	r3, r2
 800576a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800576e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d116      	bne.n	80057a8 <USB_EPStartXfer+0x118c>
 800577a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005786:	b29a      	uxth	r2, r3
 8005788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579e:	b29a      	uxth	r2, r3
 80057a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	e064      	b.n	8005872 <USB_EPStartXfer+0x1256>
 80057a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ac:	2b3e      	cmp	r3, #62	; 0x3e
 80057ae:	d818      	bhi.n	80057e2 <USB_EPStartXfer+0x11c6>
 80057b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <USB_EPStartXfer+0x11b4>
 80057c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ca:	3301      	adds	r3, #1
 80057cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	029b      	lsls	r3, r3, #10
 80057d8:	b29a      	uxth	r2, r3
 80057da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	e047      	b.n	8005872 <USB_EPStartXfer+0x1256>
 80057e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <USB_EPStartXfer+0x11e6>
 80057f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fc:	3b01      	subs	r3, #1
 80057fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005806:	b29b      	uxth	r3, r3
 8005808:	029b      	lsls	r3, r3, #10
 800580a:	b29b      	uxth	r3, r3
 800580c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005814:	b29a      	uxth	r2, r3
 8005816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	e029      	b.n	8005872 <USB_EPStartXfer+0x1256>
 800581e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d121      	bne.n	8005872 <USB_EPStartXfer+0x1256>
 800582e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583c:	b29b      	uxth	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005844:	4413      	add	r3, r2
 8005846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800584a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	011a      	lsls	r2, r3, #4
 8005858:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800585c:	4413      	add	r3, r2
 800585e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586a:	b29a      	uxth	r2, r3
 800586c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005870:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	895b      	ldrh	r3, [r3, #10]
 800587e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6959      	ldr	r1, [r3, #20]
 800588e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005892:	b29b      	uxth	r3, r3
 8005894:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005898:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800589c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058a0:	6800      	ldr	r0, [r0, #0]
 80058a2:	f000 fe31 	bl	8006508 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058c8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80058cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d4:	8013      	strh	r3, [r2, #0]
 80058d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058da:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80058de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058e2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80058e6:	8812      	ldrh	r2, [r2, #0]
 80058e8:	f082 0210 	eor.w	r2, r2, #16
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80058f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058fa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80058fe:	8812      	ldrh	r2, [r2, #0]
 8005900:	f082 0220 	eor.w	r2, r2, #32
 8005904:	801a      	strh	r2, [r3, #0]
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	441a      	add	r2, r3
 8005920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005924:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593a:	b29b      	uxth	r3, r3
 800593c:	8013      	strh	r3, [r2, #0]
 800593e:	f000 bc9f 	b.w	8006280 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	7b1b      	ldrb	r3, [r3, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 80ae 	bne.w	8005ab0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	429a      	cmp	r2, r3
 800596e:	d917      	bls.n	80059a0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	699a      	ldr	r2, [r3, #24]
 800598c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005990:	1ad2      	subs	r2, r2, r3
 8005992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	619a      	str	r2, [r3, #24]
 800599e:	e00e      	b.n	80059be <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80059a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80059b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059da:	b29b      	uxth	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059e2:	4413      	add	r3, r2
 80059e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	011a      	lsls	r2, r3, #4
 80059f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059fa:	4413      	add	r3, r2
 80059fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d116      	bne.n	8005a3a <USB_EPStartXfer+0x141e>
 8005a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	e3e8      	b.n	800620c <USB_EPStartXfer+0x1bf0>
 8005a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a40:	d818      	bhi.n	8005a74 <USB_EPStartXfer+0x1458>
 8005a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <USB_EPStartXfer+0x1446>
 8005a58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e3cb      	b.n	800620c <USB_EPStartXfer+0x1bf0>
 8005a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <USB_EPStartXfer+0x1478>
 8005a8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	029b      	lsls	r3, r3, #10
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e3ad      	b.n	800620c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	78db      	ldrb	r3, [r3, #3]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	f040 8200 	bne.w	8005ec2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f040 8091 	bne.w	8005bf6 <USB_EPStartXfer+0x15da>
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	461a      	mov	r2, r3
 8005af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005af8:	4413      	add	r3, r2
 8005afa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	011a      	lsls	r2, r3, #4
 8005b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d116      	bne.n	8005b58 <USB_EPStartXfer+0x153c>
 8005b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b3c:	801a      	strh	r2, [r3, #0]
 8005b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	e083      	b.n	8005c60 <USB_EPStartXfer+0x1644>
 8005b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b3e      	cmp	r3, #62	; 0x3e
 8005b66:	d820      	bhi.n	8005baa <USB_EPStartXfer+0x158e>
 8005b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <USB_EPStartXfer+0x157c>
 8005b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b92:	3301      	adds	r3, #1
 8005b94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	029b      	lsls	r3, r3, #10
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e05a      	b.n	8005c60 <USB_EPStartXfer+0x1644>
 8005baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <USB_EPStartXfer+0x15be>
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bf2:	801a      	strh	r2, [r3, #0]
 8005bf4:	e034      	b.n	8005c60 <USB_EPStartXfer+0x1644>
 8005bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d12c      	bne.n	8005c60 <USB_EPStartXfer+0x1644>
 8005c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	011a      	lsls	r2, r3, #4
 8005c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c42:	4413      	add	r3, r2
 8005c44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f040 8091 	bne.w	8005da2 <USB_EPStartXfer+0x1786>
 8005c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	011a      	lsls	r2, r3, #4
 8005cb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d116      	bne.n	8005d04 <USB_EPStartXfer+0x16e8>
 8005cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ce8:	801a      	strh	r2, [r3, #0]
 8005cea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d00:	801a      	strh	r2, [r3, #0]
 8005d02:	e07c      	b.n	8005dfe <USB_EPStartXfer+0x17e2>
 8005d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b3e      	cmp	r3, #62	; 0x3e
 8005d12:	d820      	bhi.n	8005d56 <USB_EPStartXfer+0x173a>
 8005d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <USB_EPStartXfer+0x1728>
 8005d3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	e053      	b.n	8005dfe <USB_EPStartXfer+0x17e2>
 8005d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <USB_EPStartXfer+0x176a>
 8005d7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d80:	3b01      	subs	r3, #1
 8005d82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	e02d      	b.n	8005dfe <USB_EPStartXfer+0x17e2>
 8005da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d125      	bne.n	8005dfe <USB_EPStartXfer+0x17e2>
 8005db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dc8:	4413      	add	r3, r2
 8005dca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	011a      	lsls	r2, r3, #4
 8005ddc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005de0:	4413      	add	r3, r2
 8005de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005de6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dfc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 81fe 	beq.w	800620c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e30:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <USB_EPStartXfer+0x182c>
 8005e3c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10d      	bne.n	8005e64 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e48:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f040 81db 	bne.w	800620c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e56:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 81d4 	bne.w	800620c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	8013      	strh	r3, [r2, #0]
 8005ec0:	e1a4      	b.n	800620c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	78db      	ldrb	r3, [r3, #3]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	f040 819a 	bne.w	8006208 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d917      	bls.n	8005f20 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f10:	1ad2      	subs	r2, r2, r3
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	619a      	str	r2, [r3, #24]
 8005f1e:	e00e      	b.n	8005f3e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d178      	bne.n	8006040 <USB_EPStartXfer+0x1a24>
 8005f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f72:	4413      	add	r3, r2
 8005f74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	011a      	lsls	r2, r3, #4
 8005f86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d116      	bne.n	8005fca <USB_EPStartXfer+0x19ae>
 8005f9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	e06b      	b.n	80060a2 <USB_EPStartXfer+0x1a86>
 8005fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fce:	2b3e      	cmp	r3, #62	; 0x3e
 8005fd0:	d818      	bhi.n	8006004 <USB_EPStartXfer+0x19e8>
 8005fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d004      	beq.n	8005ff2 <USB_EPStartXfer+0x19d6>
 8005fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fec:	3301      	adds	r3, #1
 8005fee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	029b      	lsls	r3, r3, #10
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	e04e      	b.n	80060a2 <USB_EPStartXfer+0x1a86>
 8006004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800600e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <USB_EPStartXfer+0x1a08>
 800601a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800601e:	3b01      	subs	r3, #1
 8006020:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006028:	b29b      	uxth	r3, r3
 800602a:	029b      	lsls	r3, r3, #10
 800602c:	b29b      	uxth	r3, r3
 800602e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006036:	b29a      	uxth	r2, r3
 8006038:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800603c:	801a      	strh	r2, [r3, #0]
 800603e:	e030      	b.n	80060a2 <USB_EPStartXfer+0x1a86>
 8006040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d128      	bne.n	80060a2 <USB_EPStartXfer+0x1a86>
 8006050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006054:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800605e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606c:	b29b      	uxth	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006074:	4413      	add	r3, r2
 8006076:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800607a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	011a      	lsls	r2, r3, #4
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	4413      	add	r3, r2
 800608e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006092:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609a:	b29a      	uxth	r2, r3
 800609c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d178      	bne.n	80061b2 <USB_EPStartXfer+0x1b96>
 80060c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060dc:	b29b      	uxth	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e4:	4413      	add	r3, r2
 80060e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	011a      	lsls	r2, r3, #4
 80060f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060fc:	4413      	add	r3, r2
 80060fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d116      	bne.n	800613c <USB_EPStartXfer+0x1b20>
 800610e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006132:	b29a      	uxth	r2, r3
 8006134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	e067      	b.n	800620c <USB_EPStartXfer+0x1bf0>
 800613c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006140:	2b3e      	cmp	r3, #62	; 0x3e
 8006142:	d818      	bhi.n	8006176 <USB_EPStartXfer+0x1b5a>
 8006144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800614e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d004      	beq.n	8006164 <USB_EPStartXfer+0x1b48>
 800615a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800615e:	3301      	adds	r3, #1
 8006160:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006164:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006168:	b29b      	uxth	r3, r3
 800616a:	029b      	lsls	r3, r3, #10
 800616c:	b29a      	uxth	r2, r3
 800616e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006172:	801a      	strh	r2, [r3, #0]
 8006174:	e04a      	b.n	800620c <USB_EPStartXfer+0x1bf0>
 8006176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <USB_EPStartXfer+0x1b7a>
 800618c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006190:	3b01      	subs	r3, #1
 8006192:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800619a:	b29b      	uxth	r3, r3
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	b29b      	uxth	r3, r3
 80061a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ae:	801a      	strh	r2, [r3, #0]
 80061b0:	e02c      	b.n	800620c <USB_EPStartXfer+0x1bf0>
 80061b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d124      	bne.n	800620c <USB_EPStartXfer+0x1bf0>
 80061c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d8:	4413      	add	r3, r2
 80061da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	011a      	lsls	r2, r3, #4
 80061ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f0:	4413      	add	r3, r2
 80061f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fe:	b29a      	uxth	r2, r3
 8006200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	e001      	b.n	800620c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e03a      	b.n	8006282 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800620c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006236:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800623a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800623e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006242:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006246:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800624a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800624e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	441a      	add	r2, r3
 8006268:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800626c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627c:	b29b      	uxth	r3, r3
 800627e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	785b      	ldrb	r3, [r3, #1]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d020      	beq.n	80062e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b4:	81bb      	strh	r3, [r7, #12]
 80062b6:	89bb      	ldrh	r3, [r7, #12]
 80062b8:	f083 0310 	eor.w	r3, r3, #16
 80062bc:	81bb      	strh	r3, [r7, #12]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	441a      	add	r2, r3
 80062c8:	89bb      	ldrh	r3, [r7, #12]
 80062ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062da:	b29b      	uxth	r3, r3
 80062dc:	8013      	strh	r3, [r2, #0]
 80062de:	e01f      	b.n	8006320 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f6:	81fb      	strh	r3, [r7, #14]
 80062f8:	89fb      	ldrh	r3, [r7, #14]
 80062fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062fe:	81fb      	strh	r3, [r7, #14]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	89fb      	ldrh	r3, [r7, #14]
 800630c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631c:	b29b      	uxth	r3, r3
 800631e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr

0800632c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	7b1b      	ldrb	r3, [r3, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f040 809d 	bne.w	800647a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d04c      	beq.n	80063e2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	823b      	strh	r3, [r7, #16]
 8006356:	8a3b      	ldrh	r3, [r7, #16]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01b      	beq.n	8006398 <USB_EPClearStall+0x6c>
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006376:	81fb      	strh	r3, [r7, #14]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	441a      	add	r2, r3
 8006382:	89fb      	ldrh	r3, [r7, #14]
 8006384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006390:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006394:	b29b      	uxth	r3, r3
 8006396:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	78db      	ldrb	r3, [r3, #3]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d06c      	beq.n	800647a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b6:	81bb      	strh	r3, [r7, #12]
 80063b8:	89bb      	ldrh	r3, [r7, #12]
 80063ba:	f083 0320 	eor.w	r3, r3, #32
 80063be:	81bb      	strh	r3, [r7, #12]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	441a      	add	r2, r3
 80063ca:	89bb      	ldrh	r3, [r7, #12]
 80063cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063dc:	b29b      	uxth	r3, r3
 80063de:	8013      	strh	r3, [r2, #0]
 80063e0:	e04b      	b.n	800647a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	82fb      	strh	r3, [r7, #22]
 80063f0:	8afb      	ldrh	r3, [r7, #22]
 80063f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d01b      	beq.n	8006432 <USB_EPClearStall+0x106>
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006410:	82bb      	strh	r3, [r7, #20]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	441a      	add	r2, r3
 800641c:	8abb      	ldrh	r3, [r7, #20]
 800641e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800642a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006448:	827b      	strh	r3, [r7, #18]
 800644a:	8a7b      	ldrh	r3, [r7, #18]
 800644c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006450:	827b      	strh	r3, [r7, #18]
 8006452:	8a7b      	ldrh	r3, [r7, #18]
 8006454:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006458:	827b      	strh	r3, [r7, #18]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	8a7b      	ldrh	r3, [r7, #18]
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d103      	bne.n	80064a0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2280      	movs	r2, #128	; 0x80
 800649c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr

080064ac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr

080064c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80064e6:	68fb      	ldr	r3, [r7, #12]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr

080064f2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006508:	b480      	push	{r7}
 800650a:	b08d      	sub	sp, #52	; 0x34
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	4611      	mov	r1, r2
 8006514:	461a      	mov	r2, r3
 8006516:	460b      	mov	r3, r1
 8006518:	80fb      	strh	r3, [r7, #6]
 800651a:	4613      	mov	r3, r2
 800651c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800651e:	88bb      	ldrh	r3, [r7, #4]
 8006520:	3301      	adds	r3, #1
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	005a      	lsls	r2, r3, #1
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006540:	e01e      	b.n	8006580 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	3301      	adds	r3, #1
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	b29b      	uxth	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	b29a      	uxth	r2, r3
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	3302      	adds	r3, #2
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	3302      	adds	r3, #2
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	3301      	adds	r3, #1
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657c:	3b01      	subs	r3, #1
 800657e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1dd      	bne.n	8006542 <USB_WritePMA+0x3a>
  }
}
 8006586:	bf00      	nop
 8006588:	bf00      	nop
 800658a:	3734      	adds	r7, #52	; 0x34
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr

08006592 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006592:	b480      	push	{r7}
 8006594:	b08b      	sub	sp, #44	; 0x2c
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	4611      	mov	r1, r2
 800659e:	461a      	mov	r2, r3
 80065a0:	460b      	mov	r3, r1
 80065a2:	80fb      	strh	r3, [r7, #6]
 80065a4:	4613      	mov	r3, r2
 80065a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80065a8:	88bb      	ldrh	r3, [r7, #4]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065b8:	88fb      	ldrh	r3, [r7, #6]
 80065ba:	005a      	lsls	r2, r3, #1
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ca:	e01b      	b.n	8006604 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	3302      	adds	r3, #2
 80065d8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3301      	adds	r3, #1
 80065e6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	0a1b      	lsrs	r3, r3, #8
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	3301      	adds	r3, #1
 80065f6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	3302      	adds	r3, #2
 80065fc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	3b01      	subs	r3, #1
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e0      	bne.n	80065cc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800660a:	88bb      	ldrh	r3, [r7, #4]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	701a      	strb	r2, [r3, #0]
  }
}
 8006626:	bf00      	nop
 8006628:	372c      	adds	r7, #44	; 0x2c
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8006640:	2302      	movs	r3, #2
 8006642:	2203      	movs	r2, #3
 8006644:	2181      	movs	r1, #129	; 0x81
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 fd29 	bl	800809e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8006652:	2302      	movs	r3, #2
 8006654:	2203      	movs	r2, #3
 8006656:	2101      	movs	r1, #1
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fd20 	bl	800809e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006666:	2054      	movs	r0, #84	; 0x54
 8006668:	f001 fe2e 	bl	80082c8 <USBD_static_malloc>
 800666c:	4602      	mov	r2, r0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800667e:	2301      	movs	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
 8006682:	e012      	b.n	80066aa <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	2340      	movs	r3, #64	; 0x40
 80066a2:	2101      	movs	r1, #1
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 fdeb 	bl	8008280 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80066c0:	2181      	movs	r1, #129	; 0x81
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 fd11 	bl	80080ea <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80066ce:	2101      	movs	r1, #1
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 fd0a 	bl	80080ea <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00e      	beq.n	8006706 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 fdf1 	bl	80082e0 <USBD_static_free>
    pdev->pClassData = NULL;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006720:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800673a:	2b00      	cmp	r3, #0
 800673c:	d051      	beq.n	80067e2 <USBD_CUSTOM_HID_Setup+0xd2>
 800673e:	2b20      	cmp	r3, #32
 8006740:	f040 80d8 	bne.w	80068f4 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	3b02      	subs	r3, #2
 800674a:	2b09      	cmp	r3, #9
 800674c:	d841      	bhi.n	80067d2 <USBD_CUSTOM_HID_Setup+0xc2>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <USBD_CUSTOM_HID_Setup+0x44>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	080067ad 	.word	0x080067ad
 8006758:	0800678b 	.word	0x0800678b
 800675c:	080067d3 	.word	0x080067d3
 8006760:	080067d3 	.word	0x080067d3
 8006764:	080067d3 	.word	0x080067d3
 8006768:	080067d3 	.word	0x080067d3
 800676c:	080067d3 	.word	0x080067d3
 8006770:	080067bd 	.word	0x080067bd
 8006774:	0800679b 	.word	0x0800679b
 8006778:	0800677d 	.word	0x0800677d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	885b      	ldrh	r3, [r3, #2]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006788:	e02a      	b.n	80067e0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3340      	adds	r3, #64	; 0x40
 800678e:	2201      	movs	r2, #1
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 f977 	bl	8007a86 <USBD_CtlSendData>
          break;
 8006798:	e022      	b.n	80067e0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	885b      	ldrh	r3, [r3, #2]
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80067aa:	e019      	b.n	80067e0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	3344      	adds	r3, #68	; 0x44
 80067b0:	2201      	movs	r2, #1
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 f966 	bl	8007a86 <USBD_CtlSendData>
          break;
 80067ba:	e011      	b.n	80067e0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2201      	movs	r2, #1
 80067c0:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80067c2:	6939      	ldr	r1, [r7, #16]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	88db      	ldrh	r3, [r3, #6]
 80067c8:	461a      	mov	r2, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 f989 	bl	8007ae2 <USBD_CtlPrepareRx>
          break;
 80067d0:	e006      	b.n	80067e0 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 f8ec 	bl	80079b2 <USBD_CtlError>
          ret = USBD_FAIL;
 80067da:	2302      	movs	r3, #2
 80067dc:	75fb      	strb	r3, [r7, #23]
          break;
 80067de:	bf00      	nop
      }
      break;
 80067e0:	e08f      	b.n	8006902 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b0b      	cmp	r3, #11
 80067e8:	d87c      	bhi.n	80068e4 <USBD_CUSTOM_HID_Setup+0x1d4>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <USBD_CUSTOM_HID_Setup+0xe0>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006821 	.word	0x08006821
 80067f4:	080068e5 	.word	0x080068e5
 80067f8:	080068e5 	.word	0x080068e5
 80067fc:	080068e5 	.word	0x080068e5
 8006800:	080068e5 	.word	0x080068e5
 8006804:	080068e5 	.word	0x080068e5
 8006808:	08006849 	.word	0x08006849
 800680c:	080068e5 	.word	0x080068e5
 8006810:	080068e5 	.word	0x080068e5
 8006814:	080068e5 	.word	0x080068e5
 8006818:	08006897 	.word	0x08006897
 800681c:	080068bf 	.word	0x080068bf
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006826:	2b03      	cmp	r3, #3
 8006828:	d107      	bne.n	800683a <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800682a:	f107 030e 	add.w	r3, r7, #14
 800682e:	2202      	movs	r2, #2
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 f927 	bl	8007a86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006838:	e05b      	b.n	80068f2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 f8b8 	bl	80079b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006842:	2302      	movs	r3, #2
 8006844:	75fb      	strb	r3, [r7, #23]
          break;
 8006846:	e054      	b.n	80068f2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	885b      	ldrh	r3, [r3, #2]
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b22      	cmp	r3, #34	; 0x22
 8006852:	d10b      	bne.n	800686c <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	88db      	ldrh	r3, [r3, #6]
 8006858:	2b20      	cmp	r3, #32
 800685a:	bf28      	it	cs
 800685c:	2320      	movcs	r3, #32
 800685e:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	e00d      	b.n	8006888 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	885b      	ldrh	r3, [r3, #2]
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b21      	cmp	r3, #33	; 0x21
 8006876:	d107      	bne.n	8006888 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006878:	4b24      	ldr	r3, [pc, #144]	; (800690c <USBD_CUSTOM_HID_Setup+0x1fc>)
 800687a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	88db      	ldrh	r3, [r3, #6]
 8006880:	2b09      	cmp	r3, #9
 8006882:	bf28      	it	cs
 8006884:	2309      	movcs	r3, #9
 8006886:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8006888:	8bfb      	ldrh	r3, [r7, #30]
 800688a:	461a      	mov	r2, r3
 800688c:	69b9      	ldr	r1, [r7, #24]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 f8f9 	bl	8007a86 <USBD_CtlSendData>
          break;
 8006894:	e02d      	b.n	80068f2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689c:	2b03      	cmp	r3, #3
 800689e:	d107      	bne.n	80068b0 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	3348      	adds	r3, #72	; 0x48
 80068a4:	2201      	movs	r2, #1
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 f8ec 	bl	8007a86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ae:	e020      	b.n	80068f2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 f87d 	bl	80079b2 <USBD_CtlError>
            ret = USBD_FAIL;
 80068b8:	2302      	movs	r3, #2
 80068ba:	75fb      	strb	r3, [r7, #23]
          break;
 80068bc:	e019      	b.n	80068f2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d106      	bne.n	80068d6 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	885b      	ldrh	r3, [r3, #2]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068d4:	e00d      	b.n	80068f2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 f86a 	bl	80079b2 <USBD_CtlError>
            ret = USBD_FAIL;
 80068de:	2302      	movs	r3, #2
 80068e0:	75fb      	strb	r3, [r7, #23]
          break;
 80068e2:	e006      	b.n	80068f2 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 f863 	bl	80079b2 <USBD_CtlError>
          ret = USBD_FAIL;
 80068ec:	2302      	movs	r3, #2
 80068ee:	75fb      	strb	r3, [r7, #23]
          break;
 80068f0:	bf00      	nop
      }
      break;
 80068f2:	e006      	b.n	8006902 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 f85b 	bl	80079b2 <USBD_CtlError>
      ret = USBD_FAIL;
 80068fc:	2302      	movs	r3, #2
 80068fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006900:	bf00      	nop
  }
  return ret;
 8006902:	7dfb      	ldrb	r3, [r7, #23]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	200000c8 	.word	0x200000c8

08006910 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2229      	movs	r2, #41	; 0x29
 800691c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800691e:	4b03      	ldr	r3, [pc, #12]	; (800692c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20000044 	.word	0x20000044

08006930 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2229      	movs	r2, #41	; 0x29
 800693c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800693e:	4b03      	ldr	r3, [pc, #12]	; (800694c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	bc80      	pop	{r7}
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	20000070 	.word	0x20000070

08006950 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2229      	movs	r2, #41	; 0x29
 800695c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800695e:	4b03      	ldr	r3, [pc, #12]	; (800696c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	2000009c 	.word	0x2000009c

08006970 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr

08006994 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a6:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	7810      	ldrb	r0, [r2, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	7852      	ldrb	r2, [r2, #1]
 80069b8:	4611      	mov	r1, r2
 80069ba:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	2340      	movs	r3, #64	; 0x40
 80069c0:	2101      	movs	r1, #1
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 fc5c 	bl	8008280 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e0:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d10c      	bne.n	8006a04 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	7810      	ldrb	r0, [r2, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	7852      	ldrb	r2, [r2, #1]
 80069fa:	4611      	mov	r1, r2
 80069fc:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	220a      	movs	r2, #10
 8006a1c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006a1e:	4b03      	ldr	r3, [pc, #12]	; (8006a2c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	200000d4 	.word	0x200000d4

08006a30 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr

08006a5c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a70:	2302      	movs	r3, #2
 8006a72:	e01a      	b.n	8006aaa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	79fa      	ldrb	r2, [r7, #7]
 8006aa0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f001 fa90 	bl	8007fc8 <USBD_LL_Init>

  return USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d006      	beq.n	8006ad4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
 8006ad2:	e001      	b.n	8006ad8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fabb 	bl	8008068 <USBD_LL_Start>

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00c      	beq.n	8006b44 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	4611      	mov	r1, r2
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	4798      	blx	r3
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	78fa      	ldrb	r2, [r7, #3]
 8006b64:	4611      	mov	r1, r2
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3

  return USBD_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fed7 	bl	800793a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d016      	beq.n	8006bde <USBD_LL_SetupStage+0x6a>
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d81c      	bhi.n	8006bee <USBD_LL_SetupStage+0x7a>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <USBD_LL_SetupStage+0x4a>
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d008      	beq.n	8006bce <USBD_LL_SetupStage+0x5a>
 8006bbc:	e017      	b.n	8006bee <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9ca 	bl	8006f60 <USBD_StdDevReq>
      break;
 8006bcc:	e01a      	b.n	8006c04 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa2c 	bl	8007034 <USBD_StdItfReq>
      break;
 8006bdc:	e012      	b.n	8006c04 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fa6c 	bl	80070c4 <USBD_StdEPReq>
      break;
 8006bec:	e00a      	b.n	8006c04 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006bf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 fa93 	bl	8008128 <USBD_LL_StallEP>
      break;
 8006c02:	bf00      	nop
  }

  return USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	460b      	mov	r3, r1
 8006c18:	607a      	str	r2, [r7, #4]
 8006c1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d14b      	bne.n	8006cba <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c28:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d134      	bne.n	8006c9e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d919      	bls.n	8006c74 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	1ad2      	subs	r2, r2, r3
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d203      	bcs.n	8006c62 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	e002      	b.n	8006c68 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 ff56 	bl	8007b1e <USBD_CtlContinueRx>
 8006c72:	e038      	b.n	8006ce6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d105      	bne.n	8006c96 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 ff53 	bl	8007b42 <USBD_CtlSendStatus>
 8006c9c:	e023      	b.n	8006ce6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ca4:	2b05      	cmp	r3, #5
 8006ca6:	d11e      	bne.n	8006ce6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f001 fa38 	bl	8008128 <USBD_LL_StallEP>
 8006cb8:	e015      	b.n	8006ce6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00d      	beq.n	8006ce2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d108      	bne.n	8006ce2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	7afa      	ldrb	r2, [r7, #11]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	4798      	blx	r3
 8006ce0:	e001      	b.n	8006ce6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e000      	b.n	8006ce8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d17f      	bne.n	8006e04 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3314      	adds	r3, #20
 8006d08:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d15c      	bne.n	8006dce <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d915      	bls.n	8006d4c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	1ad2      	subs	r2, r2, r3
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 fec0 	bl	8007abe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2200      	movs	r2, #0
 8006d42:	2100      	movs	r1, #0
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f001 fa9b 	bl	8008280 <USBD_LL_PrepareReceive>
 8006d4a:	e04e      	b.n	8006dea <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	6912      	ldr	r2, [r2, #16]
 8006d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d58:	fb01 f202 	mul.w	r2, r1, r2
 8006d5c:	1a9b      	subs	r3, r3, r2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d11c      	bne.n	8006d9c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d316      	bcc.n	8006d9c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d20f      	bcs.n	8006d9c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2100      	movs	r1, #0
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 fe9c 	bl	8007abe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2200      	movs	r2, #0
 8006d92:	2100      	movs	r1, #0
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f001 fa73 	bl	8008280 <USBD_LL_PrepareReceive>
 8006d9a:	e026      	b.n	8006dea <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d105      	bne.n	8006dbe <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006dbe:	2180      	movs	r1, #128	; 0x80
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f001 f9b1 	bl	8008128 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fece 	bl	8007b68 <USBD_CtlReceiveStatus>
 8006dcc:	e00d      	b.n	8006dea <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d004      	beq.n	8006de2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006de2:	2180      	movs	r1, #128	; 0x80
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f001 f99f 	bl	8008128 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d11d      	bne.n	8006e30 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff fe81 	bl	8006afc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e02:	e015      	b.n	8006e30 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00d      	beq.n	8006e2c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d108      	bne.n	8006e2c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	7afa      	ldrb	r2, [r7, #11]
 8006e24:	4611      	mov	r1, r2
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	4798      	blx	r3
 8006e2a:	e001      	b.n	8006e30 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e000      	b.n	8006e32 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e42:	2340      	movs	r3, #64	; 0x40
 8006e44:	2200      	movs	r2, #0
 8006e46:	2100      	movs	r1, #0
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 f928 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2240      	movs	r2, #64	; 0x40
 8006e5a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e5e:	2340      	movs	r3, #64	; 0x40
 8006e60:	2200      	movs	r2, #0
 8006e62:	2180      	movs	r1, #128	; 0x80
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f91a 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2240      	movs	r2, #64	; 0x40
 8006e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6852      	ldr	r2, [r2, #4]
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	4611      	mov	r1, r2
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
  }

  return USBD_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	78fa      	ldrb	r2, [r7, #3]
 8006ecc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr

08006eda <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr

08006f02 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d105      	bne.n	8006f20 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d10b      	bne.n	8006f56 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d005      	beq.n	8006f86 <USBD_StdDevReq+0x26>
 8006f7a:	2b40      	cmp	r3, #64	; 0x40
 8006f7c:	d84f      	bhi.n	800701e <USBD_StdDevReq+0xbe>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <USBD_StdDevReq+0x36>
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d14b      	bne.n	800701e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
      break;
 8006f94:	e048      	b.n	8007028 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b09      	cmp	r3, #9
 8006f9c:	d839      	bhi.n	8007012 <USBD_StdDevReq+0xb2>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <USBD_StdDevReq+0x44>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006ff5 	.word	0x08006ff5
 8006fa8:	08007009 	.word	0x08007009
 8006fac:	08007013 	.word	0x08007013
 8006fb0:	08006fff 	.word	0x08006fff
 8006fb4:	08007013 	.word	0x08007013
 8006fb8:	08006fd7 	.word	0x08006fd7
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08007013 	.word	0x08007013
 8006fc4:	08006feb 	.word	0x08006feb
 8006fc8:	08006fe1 	.word	0x08006fe1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f9dc 	bl	800738c <USBD_GetDescriptor>
          break;
 8006fd4:	e022      	b.n	800701c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fb3f 	bl	800765c <USBD_SetAddress>
          break;
 8006fde:	e01d      	b.n	800701c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fb7e 	bl	80076e4 <USBD_SetConfig>
          break;
 8006fe8:	e018      	b.n	800701c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fc07 	bl	8007800 <USBD_GetConfig>
          break;
 8006ff2:	e013      	b.n	800701c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fc37 	bl	800786a <USBD_GetStatus>
          break;
 8006ffc:	e00e      	b.n	800701c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fc65 	bl	80078d0 <USBD_SetFeature>
          break;
 8007006:	e009      	b.n	800701c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fc74 	bl	80078f8 <USBD_ClrFeature>
          break;
 8007010:	e004      	b.n	800701c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fccc 	bl	80079b2 <USBD_CtlError>
          break;
 800701a:	bf00      	nop
      }
      break;
 800701c:	e004      	b.n	8007028 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fcc6 	bl	80079b2 <USBD_CtlError>
      break;
 8007026:	bf00      	nop
  }

  return ret;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop

08007034 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800704a:	2b40      	cmp	r3, #64	; 0x40
 800704c:	d005      	beq.n	800705a <USBD_StdItfReq+0x26>
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d82e      	bhi.n	80070b0 <USBD_StdItfReq+0x7c>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <USBD_StdItfReq+0x26>
 8007056:	2b20      	cmp	r3, #32
 8007058:	d12a      	bne.n	80070b0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007060:	3b01      	subs	r3, #1
 8007062:	2b02      	cmp	r3, #2
 8007064:	d81d      	bhi.n	80070a2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	889b      	ldrh	r3, [r3, #4]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	d813      	bhi.n	8007098 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
 800707e:	4603      	mov	r3, r0
 8007080:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	88db      	ldrh	r3, [r3, #6]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d110      	bne.n	80070ac <USBD_StdItfReq+0x78>
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10d      	bne.n	80070ac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fd56 	bl	8007b42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007096:	e009      	b.n	80070ac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fc89 	bl	80079b2 <USBD_CtlError>
          break;
 80070a0:	e004      	b.n	80070ac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fc84 	bl	80079b2 <USBD_CtlError>
          break;
 80070aa:	e000      	b.n	80070ae <USBD_StdItfReq+0x7a>
          break;
 80070ac:	bf00      	nop
      }
      break;
 80070ae:	e004      	b.n	80070ba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fc7d 	bl	80079b2 <USBD_CtlError>
      break;
 80070b8:	bf00      	nop
  }

  return USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	889b      	ldrh	r3, [r3, #4]
 80070d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d007      	beq.n	80070f4 <USBD_StdEPReq+0x30>
 80070e4:	2b40      	cmp	r3, #64	; 0x40
 80070e6:	f200 8146 	bhi.w	8007376 <USBD_StdEPReq+0x2b2>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <USBD_StdEPReq+0x40>
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	f040 8141 	bne.w	8007376 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
      break;
 8007102:	e13d      	b.n	8007380 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710c:	2b20      	cmp	r3, #32
 800710e:	d10a      	bne.n	8007126 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	e12d      	b.n	8007382 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2b03      	cmp	r3, #3
 800712c:	d007      	beq.n	800713e <USBD_StdEPReq+0x7a>
 800712e:	2b03      	cmp	r3, #3
 8007130:	f300 811b 	bgt.w	800736a <USBD_StdEPReq+0x2a6>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d072      	beq.n	800721e <USBD_StdEPReq+0x15a>
 8007138:	2b01      	cmp	r3, #1
 800713a:	d03a      	beq.n	80071b2 <USBD_StdEPReq+0xee>
 800713c:	e115      	b.n	800736a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007144:	2b02      	cmp	r3, #2
 8007146:	d002      	beq.n	800714e <USBD_StdEPReq+0x8a>
 8007148:	2b03      	cmp	r3, #3
 800714a:	d015      	beq.n	8007178 <USBD_StdEPReq+0xb4>
 800714c:	e02b      	b.n	80071a6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00c      	beq.n	800716e <USBD_StdEPReq+0xaa>
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	d009      	beq.n	800716e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 ffe2 	bl	8008128 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 ffde 	bl	8008128 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800716c:	e020      	b.n	80071b0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc1e 	bl	80079b2 <USBD_CtlError>
              break;
 8007176:	e01b      	b.n	80071b0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	885b      	ldrh	r3, [r3, #2]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10e      	bne.n	800719e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <USBD_StdEPReq+0xda>
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	2b80      	cmp	r3, #128	; 0x80
 800718a:	d008      	beq.n	800719e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	88db      	ldrh	r3, [r3, #6]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d104      	bne.n	800719e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 ffc5 	bl	8008128 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fccf 	bl	8007b42 <USBD_CtlSendStatus>

              break;
 80071a4:	e004      	b.n	80071b0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fc02 	bl	80079b2 <USBD_CtlError>
              break;
 80071ae:	bf00      	nop
          }
          break;
 80071b0:	e0e0      	b.n	8007374 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d002      	beq.n	80071c2 <USBD_StdEPReq+0xfe>
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d015      	beq.n	80071ec <USBD_StdEPReq+0x128>
 80071c0:	e026      	b.n	8007210 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00c      	beq.n	80071e2 <USBD_StdEPReq+0x11e>
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	2b80      	cmp	r3, #128	; 0x80
 80071cc:	d009      	beq.n	80071e2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 ffa8 	bl	8008128 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 ffa4 	bl	8008128 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071e0:	e01c      	b.n	800721c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fbe4 	bl	80079b2 <USBD_CtlError>
              break;
 80071ea:	e017      	b.n	800721c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	885b      	ldrh	r3, [r3, #2]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d112      	bne.n	800721a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d004      	beq.n	8007208 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 ffaf 	bl	8008166 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fc9a 	bl	8007b42 <USBD_CtlSendStatus>
              }
              break;
 800720e:	e004      	b.n	800721a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fbcd 	bl	80079b2 <USBD_CtlError>
              break;
 8007218:	e000      	b.n	800721c <USBD_StdEPReq+0x158>
              break;
 800721a:	bf00      	nop
          }
          break;
 800721c:	e0aa      	b.n	8007374 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007224:	2b02      	cmp	r3, #2
 8007226:	d002      	beq.n	800722e <USBD_StdEPReq+0x16a>
 8007228:	2b03      	cmp	r3, #3
 800722a:	d032      	beq.n	8007292 <USBD_StdEPReq+0x1ce>
 800722c:	e097      	b.n	800735e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <USBD_StdEPReq+0x180>
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b80      	cmp	r3, #128	; 0x80
 8007238:	d004      	beq.n	8007244 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fbb8 	bl	80079b2 <USBD_CtlError>
                break;
 8007242:	e091      	b.n	8007368 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007248:	2b00      	cmp	r3, #0
 800724a:	da0b      	bge.n	8007264 <USBD_StdEPReq+0x1a0>
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	3310      	adds	r3, #16
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4413      	add	r3, r2
 8007260:	3304      	adds	r3, #4
 8007262:	e00b      	b.n	800727c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	4413      	add	r3, r2
 800727a:	3304      	adds	r3, #4
 800727c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2202      	movs	r2, #2
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fbfb 	bl	8007a86 <USBD_CtlSendData>
              break;
 8007290:	e06a      	b.n	8007368 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007296:	2b00      	cmp	r3, #0
 8007298:	da11      	bge.n	80072be <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	f003 020f 	and.w	r2, r3, #15
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	3318      	adds	r3, #24
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d117      	bne.n	80072e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fb7b 	bl	80079b2 <USBD_CtlError>
                  break;
 80072bc:	e054      	b.n	8007368 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	f003 020f 	and.w	r2, r3, #15
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d104      	bne.n	80072e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fb68 	bl	80079b2 <USBD_CtlError>
                  break;
 80072e2:	e041      	b.n	8007368 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da0b      	bge.n	8007304 <USBD_StdEPReq+0x240>
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	3310      	adds	r3, #16
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	3304      	adds	r3, #4
 8007302:	e00b      	b.n	800731c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	4413      	add	r3, r2
 800731a:	3304      	adds	r3, #4
 800731c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <USBD_StdEPReq+0x266>
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	2b80      	cmp	r3, #128	; 0x80
 8007328:	d103      	bne.n	8007332 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	e00e      	b.n	8007350 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 ff34 	bl	80081a4 <USBD_LL_IsStallEP>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2201      	movs	r2, #1
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e002      	b.n	8007350 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2202      	movs	r2, #2
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fb95 	bl	8007a86 <USBD_CtlSendData>
              break;
 800735c:	e004      	b.n	8007368 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fb26 	bl	80079b2 <USBD_CtlError>
              break;
 8007366:	bf00      	nop
          }
          break;
 8007368:	e004      	b.n	8007374 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fb20 	bl	80079b2 <USBD_CtlError>
          break;
 8007372:	bf00      	nop
      }
      break;
 8007374:	e004      	b.n	8007380 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fb1a 	bl	80079b2 <USBD_CtlError>
      break;
 800737e:	bf00      	nop
  }

  return ret;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	885b      	ldrh	r3, [r3, #2]
 80073a6:	0a1b      	lsrs	r3, r3, #8
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3b01      	subs	r3, #1
 80073ac:	2b06      	cmp	r3, #6
 80073ae:	f200 8128 	bhi.w	8007602 <USBD_GetDescriptor+0x276>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <USBD_GetDescriptor+0x2c>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073d5 	.word	0x080073d5
 80073bc:	080073ed 	.word	0x080073ed
 80073c0:	0800742d 	.word	0x0800742d
 80073c4:	08007603 	.word	0x08007603
 80073c8:	08007603 	.word	0x08007603
 80073cc:	080075a3 	.word	0x080075a3
 80073d0:	080075cf 	.word	0x080075cf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	7c12      	ldrb	r2, [r2, #16]
 80073e0:	f107 0108 	add.w	r1, r7, #8
 80073e4:	4610      	mov	r0, r2
 80073e6:	4798      	blx	r3
 80073e8:	60f8      	str	r0, [r7, #12]
      break;
 80073ea:	e112      	b.n	8007612 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	7c1b      	ldrb	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10d      	bne.n	8007410 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	f107 0208 	add.w	r2, r7, #8
 8007400:	4610      	mov	r0, r2
 8007402:	4798      	blx	r3
 8007404:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3301      	adds	r3, #1
 800740a:	2202      	movs	r2, #2
 800740c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800740e:	e100      	b.n	8007612 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	f107 0208 	add.w	r2, r7, #8
 800741c:	4610      	mov	r0, r2
 800741e:	4798      	blx	r3
 8007420:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	2202      	movs	r2, #2
 8007428:	701a      	strb	r2, [r3, #0]
      break;
 800742a:	e0f2      	b.n	8007612 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	885b      	ldrh	r3, [r3, #2]
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b05      	cmp	r3, #5
 8007434:	f200 80ac 	bhi.w	8007590 <USBD_GetDescriptor+0x204>
 8007438:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <USBD_GetDescriptor+0xb4>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	08007459 	.word	0x08007459
 8007444:	0800748d 	.word	0x0800748d
 8007448:	080074c1 	.word	0x080074c1
 800744c:	080074f5 	.word	0x080074f5
 8007450:	08007529 	.word	0x08007529
 8007454:	0800755d 	.word	0x0800755d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	7c12      	ldrb	r2, [r2, #16]
 8007470:	f107 0108 	add.w	r1, r7, #8
 8007474:	4610      	mov	r0, r2
 8007476:	4798      	blx	r3
 8007478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800747a:	e091      	b.n	80075a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa97 	bl	80079b2 <USBD_CtlError>
            err++;
 8007484:	7afb      	ldrb	r3, [r7, #11]
 8007486:	3301      	adds	r3, #1
 8007488:	72fb      	strb	r3, [r7, #11]
          break;
 800748a:	e089      	b.n	80075a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00b      	beq.n	80074b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	7c12      	ldrb	r2, [r2, #16]
 80074a4:	f107 0108 	add.w	r1, r7, #8
 80074a8:	4610      	mov	r0, r2
 80074aa:	4798      	blx	r3
 80074ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ae:	e077      	b.n	80075a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fa7d 	bl	80079b2 <USBD_CtlError>
            err++;
 80074b8:	7afb      	ldrb	r3, [r7, #11]
 80074ba:	3301      	adds	r3, #1
 80074bc:	72fb      	strb	r3, [r7, #11]
          break;
 80074be:	e06f      	b.n	80075a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00b      	beq.n	80074e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	7c12      	ldrb	r2, [r2, #16]
 80074d8:	f107 0108 	add.w	r1, r7, #8
 80074dc:	4610      	mov	r0, r2
 80074de:	4798      	blx	r3
 80074e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074e2:	e05d      	b.n	80075a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa63 	bl	80079b2 <USBD_CtlError>
            err++;
 80074ec:	7afb      	ldrb	r3, [r7, #11]
 80074ee:	3301      	adds	r3, #1
 80074f0:	72fb      	strb	r3, [r7, #11]
          break;
 80074f2:	e055      	b.n	80075a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00b      	beq.n	8007518 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	7c12      	ldrb	r2, [r2, #16]
 800750c:	f107 0108 	add.w	r1, r7, #8
 8007510:	4610      	mov	r0, r2
 8007512:	4798      	blx	r3
 8007514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007516:	e043      	b.n	80075a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fa49 	bl	80079b2 <USBD_CtlError>
            err++;
 8007520:	7afb      	ldrb	r3, [r7, #11]
 8007522:	3301      	adds	r3, #1
 8007524:	72fb      	strb	r3, [r7, #11]
          break;
 8007526:	e03b      	b.n	80075a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	7c12      	ldrb	r2, [r2, #16]
 8007540:	f107 0108 	add.w	r1, r7, #8
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
 8007548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800754a:	e029      	b.n	80075a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa2f 	bl	80079b2 <USBD_CtlError>
            err++;
 8007554:	7afb      	ldrb	r3, [r7, #11]
 8007556:	3301      	adds	r3, #1
 8007558:	72fb      	strb	r3, [r7, #11]
          break;
 800755a:	e021      	b.n	80075a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	7c12      	ldrb	r2, [r2, #16]
 8007574:	f107 0108 	add.w	r1, r7, #8
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800757e:	e00f      	b.n	80075a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa15 	bl	80079b2 <USBD_CtlError>
            err++;
 8007588:	7afb      	ldrb	r3, [r7, #11]
 800758a:	3301      	adds	r3, #1
 800758c:	72fb      	strb	r3, [r7, #11]
          break;
 800758e:	e007      	b.n	80075a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fa0d 	bl	80079b2 <USBD_CtlError>
          err++;
 8007598:	7afb      	ldrb	r3, [r7, #11]
 800759a:	3301      	adds	r3, #1
 800759c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800759e:	e038      	b.n	8007612 <USBD_GetDescriptor+0x286>
 80075a0:	e037      	b.n	8007612 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	7c1b      	ldrb	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b2:	f107 0208 	add.w	r2, r7, #8
 80075b6:	4610      	mov	r0, r2
 80075b8:	4798      	blx	r3
 80075ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075bc:	e029      	b.n	8007612 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f9f6 	bl	80079b2 <USBD_CtlError>
        err++;
 80075c6:	7afb      	ldrb	r3, [r7, #11]
 80075c8:	3301      	adds	r3, #1
 80075ca:	72fb      	strb	r3, [r7, #11]
      break;
 80075cc:	e021      	b.n	8007612 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	7c1b      	ldrb	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10d      	bne.n	80075f2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	f107 0208 	add.w	r2, r7, #8
 80075e2:	4610      	mov	r0, r2
 80075e4:	4798      	blx	r3
 80075e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3301      	adds	r3, #1
 80075ec:	2207      	movs	r2, #7
 80075ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075f0:	e00f      	b.n	8007612 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f9dc 	bl	80079b2 <USBD_CtlError>
        err++;
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	3301      	adds	r3, #1
 80075fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007600:	e007      	b.n	8007612 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f9d4 	bl	80079b2 <USBD_CtlError>
      err++;
 800760a:	7afb      	ldrb	r3, [r7, #11]
 800760c:	3301      	adds	r3, #1
 800760e:	72fb      	strb	r3, [r7, #11]
      break;
 8007610:	bf00      	nop
  }

  if (err != 0U)
 8007612:	7afb      	ldrb	r3, [r7, #11]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d11c      	bne.n	8007652 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007618:	893b      	ldrh	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d011      	beq.n	8007642 <USBD_GetDescriptor+0x2b6>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	88db      	ldrh	r3, [r3, #6]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00d      	beq.n	8007642 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	88da      	ldrh	r2, [r3, #6]
 800762a:	893b      	ldrh	r3, [r7, #8]
 800762c:	4293      	cmp	r3, r2
 800762e:	bf28      	it	cs
 8007630:	4613      	movcs	r3, r2
 8007632:	b29b      	uxth	r3, r3
 8007634:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007636:	893b      	ldrh	r3, [r7, #8]
 8007638:	461a      	mov	r2, r3
 800763a:	68f9      	ldr	r1, [r7, #12]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fa22 	bl	8007a86 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	88db      	ldrh	r3, [r3, #6]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d104      	bne.n	8007654 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fa79 	bl	8007b42 <USBD_CtlSendStatus>
 8007650:	e000      	b.n	8007654 <USBD_GetDescriptor+0x2c8>
    return;
 8007652:	bf00      	nop
    }
  }
}
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop

0800765c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	889b      	ldrh	r3, [r3, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d130      	bne.n	80076d0 <USBD_SetAddress+0x74>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	88db      	ldrh	r3, [r3, #6]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d12c      	bne.n	80076d0 <USBD_SetAddress+0x74>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	885b      	ldrh	r3, [r3, #2]
 800767a:	2b7f      	cmp	r3, #127	; 0x7f
 800767c:	d828      	bhi.n	80076d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	885b      	ldrh	r3, [r3, #2]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007688:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007690:	2b03      	cmp	r3, #3
 8007692:	d104      	bne.n	800769e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f98b 	bl	80079b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800769c:	e01d      	b.n	80076da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7bfa      	ldrb	r2, [r7, #15]
 80076a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fda6 	bl	80081fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fa46 	bl	8007b42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c4:	e009      	b.n	80076da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ce:	e004      	b.n	80076da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f96d 	bl	80079b2 <USBD_CtlError>
  }
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	885b      	ldrh	r3, [r3, #2]
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	4b41      	ldr	r3, [pc, #260]	; (80077fc <USBD_SetConfig+0x118>)
 80076f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076f8:	4b40      	ldr	r3, [pc, #256]	; (80077fc <USBD_SetConfig+0x118>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d904      	bls.n	800770a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f955 	bl	80079b2 <USBD_CtlError>
 8007708:	e075      	b.n	80077f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007710:	2b02      	cmp	r3, #2
 8007712:	d002      	beq.n	800771a <USBD_SetConfig+0x36>
 8007714:	2b03      	cmp	r3, #3
 8007716:	d023      	beq.n	8007760 <USBD_SetConfig+0x7c>
 8007718:	e062      	b.n	80077e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800771a:	4b38      	ldr	r3, [pc, #224]	; (80077fc <USBD_SetConfig+0x118>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01a      	beq.n	8007758 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007722:	4b36      	ldr	r3, [pc, #216]	; (80077fc <USBD_SetConfig+0x118>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2203      	movs	r2, #3
 8007730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007734:	4b31      	ldr	r3, [pc, #196]	; (80077fc <USBD_SetConfig+0x118>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff f9e8 	bl	8006b10 <USBD_SetClassConfig>
 8007740:	4603      	mov	r3, r0
 8007742:	2b02      	cmp	r3, #2
 8007744:	d104      	bne.n	8007750 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f932 	bl	80079b2 <USBD_CtlError>
            return;
 800774e:	e052      	b.n	80077f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f9f6 	bl	8007b42 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007756:	e04e      	b.n	80077f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f9f2 	bl	8007b42 <USBD_CtlSendStatus>
        break;
 800775e:	e04a      	b.n	80077f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007760:	4b26      	ldr	r3, [pc, #152]	; (80077fc <USBD_SetConfig+0x118>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d112      	bne.n	800778e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007770:	4b22      	ldr	r3, [pc, #136]	; (80077fc <USBD_SetConfig+0x118>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800777a:	4b20      	ldr	r3, [pc, #128]	; (80077fc <USBD_SetConfig+0x118>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff f9e4 	bl	8006b4e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f9db 	bl	8007b42 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800778c:	e033      	b.n	80077f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800778e:	4b1b      	ldr	r3, [pc, #108]	; (80077fc <USBD_SetConfig+0x118>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d01d      	beq.n	80077d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff f9d2 	bl	8006b4e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80077aa:	4b14      	ldr	r3, [pc, #80]	; (80077fc <USBD_SetConfig+0x118>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077b4:	4b11      	ldr	r3, [pc, #68]	; (80077fc <USBD_SetConfig+0x118>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff f9a8 	bl	8006b10 <USBD_SetClassConfig>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d104      	bne.n	80077d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f8f2 	bl	80079b2 <USBD_CtlError>
            return;
 80077ce:	e012      	b.n	80077f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f9b6 	bl	8007b42 <USBD_CtlSendStatus>
        break;
 80077d6:	e00e      	b.n	80077f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f9b2 	bl	8007b42 <USBD_CtlSendStatus>
        break;
 80077de:	e00a      	b.n	80077f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f8e5 	bl	80079b2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <USBD_SetConfig+0x118>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff f9ad 	bl	8006b4e <USBD_ClrClassConfig>
        break;
 80077f4:	bf00      	nop
    }
  }
}
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	200002e8 	.word	0x200002e8

08007800 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	88db      	ldrh	r3, [r3, #6]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d004      	beq.n	800781c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f8cc 	bl	80079b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800781a:	e022      	b.n	8007862 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007822:	2b02      	cmp	r3, #2
 8007824:	dc02      	bgt.n	800782c <USBD_GetConfig+0x2c>
 8007826:	2b00      	cmp	r3, #0
 8007828:	dc03      	bgt.n	8007832 <USBD_GetConfig+0x32>
 800782a:	e015      	b.n	8007858 <USBD_GetConfig+0x58>
 800782c:	2b03      	cmp	r3, #3
 800782e:	d00b      	beq.n	8007848 <USBD_GetConfig+0x48>
 8007830:	e012      	b.n	8007858 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3308      	adds	r3, #8
 800783c:	2201      	movs	r2, #1
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f920 	bl	8007a86 <USBD_CtlSendData>
        break;
 8007846:	e00c      	b.n	8007862 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3304      	adds	r3, #4
 800784c:	2201      	movs	r2, #1
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f918 	bl	8007a86 <USBD_CtlSendData>
        break;
 8007856:	e004      	b.n	8007862 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f8a9 	bl	80079b2 <USBD_CtlError>
        break;
 8007860:	bf00      	nop
}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787a:	3b01      	subs	r3, #1
 800787c:	2b02      	cmp	r3, #2
 800787e:	d81e      	bhi.n	80078be <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	88db      	ldrh	r3, [r3, #6]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d004      	beq.n	8007892 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f891 	bl	80079b2 <USBD_CtlError>
        break;
 8007890:	e01a      	b.n	80078c8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f043 0202 	orr.w	r2, r3, #2
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	330c      	adds	r3, #12
 80078b2:	2202      	movs	r2, #2
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f8e5 	bl	8007a86 <USBD_CtlSendData>
      break;
 80078bc:	e004      	b.n	80078c8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f876 	bl	80079b2 <USBD_CtlError>
      break;
 80078c6:	bf00      	nop
  }
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	885b      	ldrh	r3, [r3, #2]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d106      	bne.n	80078f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f929 	bl	8007b42 <USBD_CtlSendStatus>
  }
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007908:	3b01      	subs	r3, #1
 800790a:	2b02      	cmp	r3, #2
 800790c:	d80b      	bhi.n	8007926 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	885b      	ldrh	r3, [r3, #2]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d10c      	bne.n	8007930 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f90f 	bl	8007b42 <USBD_CtlSendStatus>
      }
      break;
 8007924:	e004      	b.n	8007930 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f842 	bl	80079b2 <USBD_CtlError>
      break;
 800792e:	e000      	b.n	8007932 <USBD_ClrFeature+0x3a>
      break;
 8007930:	bf00      	nop
  }
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781a      	ldrb	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	785a      	ldrb	r2, [r3, #1]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	3302      	adds	r3, #2
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	b29a      	uxth	r2, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	3303      	adds	r3, #3
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	021b      	lsls	r3, r3, #8
 8007966:	b29b      	uxth	r3, r3
 8007968:	4413      	add	r3, r2
 800796a:	b29a      	uxth	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	3304      	adds	r3, #4
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	b29a      	uxth	r2, r3
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	3305      	adds	r3, #5
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	b29b      	uxth	r3, r3
 8007984:	4413      	add	r3, r2
 8007986:	b29a      	uxth	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	3306      	adds	r3, #6
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	b29a      	uxth	r2, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	3307      	adds	r3, #7
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	b29b      	uxth	r3, r3
 80079a0:	4413      	add	r3, r2
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	80da      	strh	r2, [r3, #6]

}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr

080079b2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80079bc:	2180      	movs	r1, #128	; 0x80
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fbb2 	bl	8008128 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80079c4:	2100      	movs	r1, #0
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fbae 	bl	8008128 <USBD_LL_StallEP>
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d032      	beq.n	8007a50 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f834 	bl	8007a58 <USBD_GetLen>
 80079f0:	4603      	mov	r3, r0
 80079f2:	3301      	adds	r3, #1
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	75fa      	strb	r2, [r7, #23]
 8007a04:	461a      	mov	r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4413      	add	r3, r2
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	75fa      	strb	r2, [r7, #23]
 8007a16:	461a      	mov	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007a20:	e012      	b.n	8007a48 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	60fa      	str	r2, [r7, #12]
 8007a28:	7dfa      	ldrb	r2, [r7, #23]
 8007a2a:	1c51      	adds	r1, r2, #1
 8007a2c:	75f9      	strb	r1, [r7, #23]
 8007a2e:	4611      	mov	r1, r2
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	440a      	add	r2, r1
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	75fa      	strb	r2, [r7, #23]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4413      	add	r3, r2
 8007a44:	2200      	movs	r2, #0
 8007a46:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e8      	bne.n	8007a22 <USBD_GetString+0x4e>
    }
  }
}
 8007a50:	bf00      	nop
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007a64:	e005      	b.n	8007a72 <USBD_GetLen+0x1a>
  {
    len++;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1f5      	bne.n	8007a66 <USBD_GetLen+0xe>
  }

  return len;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bc80      	pop	{r7}
 8007a84:	4770      	bx	lr

08007a86 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	4613      	mov	r3, r2
 8007a92:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a9c:	88fa      	ldrh	r2, [r7, #6]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007aa2:	88fa      	ldrh	r2, [r7, #6]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	2100      	movs	r1, #0
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fbc3 	bl	800823a <USBD_LL_Transmit>

  return USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007acc:	88fb      	ldrh	r3, [r7, #6]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 fbb1 	bl	800823a <USBD_LL_Transmit>

  return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	4613      	mov	r3, r2
 8007aee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2203      	movs	r2, #3
 8007af4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007af8:	88fa      	ldrh	r2, [r7, #6]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007b00:	88fa      	ldrh	r2, [r7, #6]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b08:	88fb      	ldrh	r3, [r7, #6]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fbb6 	bl	8008280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	2100      	movs	r1, #0
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 fba4 	bl	8008280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2204      	movs	r2, #4
 8007b4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b52:	2300      	movs	r3, #0
 8007b54:	2200      	movs	r2, #0
 8007b56:	2100      	movs	r1, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fb6e 	bl	800823a <USBD_LL_Transmit>

  return USBD_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2205      	movs	r2, #5
 8007b74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fb7e 	bl	8008280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b94:	2200      	movs	r2, #0
 8007b96:	4912      	ldr	r1, [pc, #72]	; (8007be0 <MX_USB_DEVICE_Init+0x50>)
 8007b98:	4812      	ldr	r0, [pc, #72]	; (8007be4 <MX_USB_DEVICE_Init+0x54>)
 8007b9a:	f7fe ff5f 	bl	8006a5c <USBD_Init>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ba4:	f7f8 fc84 	bl	80004b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007ba8:	490f      	ldr	r1, [pc, #60]	; (8007be8 <MX_USB_DEVICE_Init+0x58>)
 8007baa:	480e      	ldr	r0, [pc, #56]	; (8007be4 <MX_USB_DEVICE_Init+0x54>)
 8007bac:	f7fe ff81 	bl	8006ab2 <USBD_RegisterClass>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007bb6:	f7f8 fc7b 	bl	80004b0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007bba:	490c      	ldr	r1, [pc, #48]	; (8007bec <MX_USB_DEVICE_Init+0x5c>)
 8007bbc:	4809      	ldr	r0, [pc, #36]	; (8007be4 <MX_USB_DEVICE_Init+0x54>)
 8007bbe:	f7fe ff37 	bl	8006a30 <USBD_CUSTOM_HID_RegisterInterface>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007bc8:	f7f8 fc72 	bl	80004b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007bcc:	4805      	ldr	r0, [pc, #20]	; (8007be4 <MX_USB_DEVICE_Init+0x54>)
 8007bce:	f7fe ff89 	bl	8006ae4 <USBD_Start>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bd8:	f7f8 fc6a 	bl	80004b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bdc:	bf00      	nop
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000110 	.word	0x20000110
 8007be4:	200002ec 	.word	0x200002ec
 8007be8:	2000000c 	.word	0x2000000c
 8007bec:	20000100 	.word	0x20000100

08007bf0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007c02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr

08007c0c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	460a      	mov	r2, r1
 8007c16:	71fb      	strb	r3, [r7, #7]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007c1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	6039      	str	r1, [r7, #0]
 8007c32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2212      	movs	r2, #18
 8007c38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c3a:	4b03      	ldr	r3, [pc, #12]	; (8007c48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	2000012c 	.word	0x2000012c

08007c4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	6039      	str	r1, [r7, #0]
 8007c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c5e:	4b03      	ldr	r3, [pc, #12]	; (8007c6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bc80      	pop	{r7}
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	20000140 	.word	0x20000140

08007c70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	4907      	ldr	r1, [pc, #28]	; (8007ca4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c86:	4808      	ldr	r0, [pc, #32]	; (8007ca8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c88:	f7ff fea4 	bl	80079d4 <USBD_GetString>
 8007c8c:	e004      	b.n	8007c98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	4904      	ldr	r1, [pc, #16]	; (8007ca4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c92:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c94:	f7ff fe9e 	bl	80079d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c98:	4b02      	ldr	r3, [pc, #8]	; (8007ca4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200005b0 	.word	0x200005b0
 8007ca8:	080083e0 	.word	0x080083e0

08007cac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	6039      	str	r1, [r7, #0]
 8007cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	4904      	ldr	r1, [pc, #16]	; (8007ccc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007cbc:	4804      	ldr	r0, [pc, #16]	; (8007cd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cbe:	f7ff fe89 	bl	80079d4 <USBD_GetString>
  return USBD_StrDesc;
 8007cc2:	4b02      	ldr	r3, [pc, #8]	; (8007ccc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	200005b0 	.word	0x200005b0
 8007cd0:	080083f0 	.word	0x080083f0

08007cd4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	6039      	str	r1, [r7, #0]
 8007cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	221a      	movs	r2, #26
 8007ce4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ce6:	f000 f843 	bl	8007d70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cea:	4b02      	ldr	r3, [pc, #8]	; (8007cf4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20000144 	.word	0x20000144

08007cf8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	6039      	str	r1, [r7, #0]
 8007d02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d105      	bne.n	8007d16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	4907      	ldr	r1, [pc, #28]	; (8007d2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d0e:	4808      	ldr	r0, [pc, #32]	; (8007d30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d10:	f7ff fe60 	bl	80079d4 <USBD_GetString>
 8007d14:	e004      	b.n	8007d20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	4904      	ldr	r1, [pc, #16]	; (8007d2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d1a:	4805      	ldr	r0, [pc, #20]	; (8007d30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d1c:	f7ff fe5a 	bl	80079d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d20:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200005b0 	.word	0x200005b0
 8007d30:	080083fc 	.word	0x080083fc

08007d34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	6039      	str	r1, [r7, #0]
 8007d3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d105      	bne.n	8007d52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	4907      	ldr	r1, [pc, #28]	; (8007d68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d4a:	4808      	ldr	r0, [pc, #32]	; (8007d6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d4c:	f7ff fe42 	bl	80079d4 <USBD_GetString>
 8007d50:	e004      	b.n	8007d5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	4904      	ldr	r1, [pc, #16]	; (8007d68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d56:	4805      	ldr	r0, [pc, #20]	; (8007d6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d58:	f7ff fe3c 	bl	80079d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d5c:	4b02      	ldr	r3, [pc, #8]	; (8007d68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	200005b0 	.word	0x200005b0
 8007d6c:	08008410 	.word	0x08008410

08007d70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d76:	4b0f      	ldr	r3, [pc, #60]	; (8007db4 <Get_SerialNum+0x44>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d7c:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <Get_SerialNum+0x48>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d82:	4b0e      	ldr	r3, [pc, #56]	; (8007dbc <Get_SerialNum+0x4c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d96:	2208      	movs	r2, #8
 8007d98:	4909      	ldr	r1, [pc, #36]	; (8007dc0 <Get_SerialNum+0x50>)
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 f814 	bl	8007dc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007da0:	2204      	movs	r2, #4
 8007da2:	4908      	ldr	r1, [pc, #32]	; (8007dc4 <Get_SerialNum+0x54>)
 8007da4:	68b8      	ldr	r0, [r7, #8]
 8007da6:	f000 f80f 	bl	8007dc8 <IntToUnicode>
  }
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	1ffff7e8 	.word	0x1ffff7e8
 8007db8:	1ffff7ec 	.word	0x1ffff7ec
 8007dbc:	1ffff7f0 	.word	0x1ffff7f0
 8007dc0:	20000146 	.word	0x20000146
 8007dc4:	20000156 	.word	0x20000156

08007dc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75fb      	strb	r3, [r7, #23]
 8007dde:	e027      	b.n	8007e30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	0f1b      	lsrs	r3, r3, #28
 8007de4:	2b09      	cmp	r3, #9
 8007de6:	d80b      	bhi.n	8007e00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	0f1b      	lsrs	r3, r3, #28
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	4619      	mov	r1, r3
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	440b      	add	r3, r1
 8007df8:	3230      	adds	r2, #48	; 0x30
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	e00a      	b.n	8007e16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	0f1b      	lsrs	r3, r3, #28
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	440b      	add	r3, r1
 8007e10:	3237      	adds	r2, #55	; 0x37
 8007e12:	b2d2      	uxtb	r2, r2
 8007e14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	011b      	lsls	r3, r3, #4
 8007e1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	3301      	adds	r3, #1
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	4413      	add	r3, r2
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	75fb      	strb	r3, [r7, #23]
 8007e30:	7dfa      	ldrb	r2, [r7, #23]
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d3d3      	bcc.n	8007de0 <IntToUnicode+0x18>
  }
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	371c      	adds	r7, #28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a0d      	ldr	r2, [pc, #52]	; (8007e88 <HAL_PCD_MspInit+0x44>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d113      	bne.n	8007e7e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e56:	4b0d      	ldr	r3, [pc, #52]	; (8007e8c <HAL_PCD_MspInit+0x48>)
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	4a0c      	ldr	r2, [pc, #48]	; (8007e8c <HAL_PCD_MspInit+0x48>)
 8007e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e60:	61d3      	str	r3, [r2, #28]
 8007e62:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <HAL_PCD_MspInit+0x48>)
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2100      	movs	r1, #0
 8007e72:	2014      	movs	r0, #20
 8007e74:	f7f9 f819 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007e78:	2014      	movs	r0, #20
 8007e7a:	f7f9 f832 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	40005c00 	.word	0x40005c00
 8007e8c:	40021000 	.word	0x40021000

08007e90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	f7fe fe64 	bl	8006b74 <USBD_LL_SetupStage>
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	440b      	add	r3, r1
 8007ed4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	4619      	mov	r1, r3
 8007ede:	f7fe fe96 	bl	8006c0e <USBD_LL_DataOutStage>
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007efc:	78fa      	ldrb	r2, [r7, #3]
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	440b      	add	r3, r1
 8007f0a:	333c      	adds	r3, #60	; 0x3c
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	78fb      	ldrb	r3, [r7, #3]
 8007f10:	4619      	mov	r1, r3
 8007f12:	f7fe feed 	bl	8006cf0 <USBD_LL_DataInStage>
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe fffd 	bl	8006f2c <USBD_LL_SOF>
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f42:	2301      	movs	r3, #1
 8007f44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d001      	beq.n	8007f52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f4e:	f7f8 faaf 	bl	80004b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f58:	7bfa      	ldrb	r2, [r7, #15]
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fe ffad 	bl	8006ebc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fe ff66 	bl	8006e3a <USBD_LL_Reset>
}
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe ffa7 	bl	8006eda <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f94:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <HAL_PCD_SuspendCallback+0x30>)
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	4a03      	ldr	r2, [pc, #12]	; (8007fa8 <HAL_PCD_SuspendCallback+0x30>)
 8007f9a:	f043 0306 	orr.w	r3, r3, #6
 8007f9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	e000ed00 	.word	0xe000ed00

08007fac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe ffa1 	bl	8006f02 <USBD_LL_Resume>
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007fd0:	4a23      	ldr	r2, [pc, #140]	; (8008060 <USBD_LL_Init+0x98>)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a21      	ldr	r2, [pc, #132]	; (8008060 <USBD_LL_Init+0x98>)
 8007fdc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007fe0:	4b1f      	ldr	r3, [pc, #124]	; (8008060 <USBD_LL_Init+0x98>)
 8007fe2:	4a20      	ldr	r2, [pc, #128]	; (8008064 <USBD_LL_Init+0x9c>)
 8007fe4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fe6:	4b1e      	ldr	r3, [pc, #120]	; (8008060 <USBD_LL_Init+0x98>)
 8007fe8:	2208      	movs	r2, #8
 8007fea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007fec:	4b1c      	ldr	r3, [pc, #112]	; (8008060 <USBD_LL_Init+0x98>)
 8007fee:	2202      	movs	r2, #2
 8007ff0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ff2:	4b1b      	ldr	r3, [pc, #108]	; (8008060 <USBD_LL_Init+0x98>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007ff8:	4b19      	ldr	r3, [pc, #100]	; (8008060 <USBD_LL_Init+0x98>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007ffe:	4b18      	ldr	r3, [pc, #96]	; (8008060 <USBD_LL_Init+0x98>)
 8008000:	2200      	movs	r2, #0
 8008002:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008004:	4816      	ldr	r0, [pc, #88]	; (8008060 <USBD_LL_Init+0x98>)
 8008006:	f7f9 fa6b 	bl	80014e0 <HAL_PCD_Init>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008010:	f7f8 fa4e 	bl	80004b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800801a:	2318      	movs	r3, #24
 800801c:	2200      	movs	r2, #0
 800801e:	2100      	movs	r1, #0
 8008020:	f7fa fec8 	bl	8002db4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800802a:	2358      	movs	r3, #88	; 0x58
 800802c:	2200      	movs	r2, #0
 800802e:	2180      	movs	r1, #128	; 0x80
 8008030:	f7fa fec0 	bl	8002db4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800803a:	2398      	movs	r3, #152	; 0x98
 800803c:	2200      	movs	r2, #0
 800803e:	2181      	movs	r1, #129	; 0x81
 8008040:	f7fa feb8 	bl	8002db4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800804a:	23d8      	movs	r3, #216	; 0xd8
 800804c:	2200      	movs	r2, #0
 800804e:	2101      	movs	r1, #1
 8008050:	f7fa feb0 	bl	8002db4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	200007b0 	.word	0x200007b0
 8008064:	40005c00 	.word	0x40005c00

08008068 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800807e:	4618      	mov	r0, r3
 8008080:	f7f9 fb39 	bl	80016f6 <HAL_PCD_Start>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f93c 	bl	8008308 <USBD_Get_USB_Status>
 8008090:	4603      	mov	r3, r0
 8008092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008094:	7bbb      	ldrb	r3, [r7, #14]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	461a      	mov	r2, r3
 80080ac:	4603      	mov	r3, r0
 80080ae:	70fb      	strb	r3, [r7, #3]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70bb      	strb	r3, [r7, #2]
 80080b4:	4613      	mov	r3, r2
 80080b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080c6:	78bb      	ldrb	r3, [r7, #2]
 80080c8:	883a      	ldrh	r2, [r7, #0]
 80080ca:	78f9      	ldrb	r1, [r7, #3]
 80080cc:	f7f9 fcb1 	bl	8001a32 <HAL_PCD_EP_Open>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f916 	bl	8008308 <USBD_Get_USB_Status>
 80080dc:	4603      	mov	r3, r0
 80080de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008104:	78fa      	ldrb	r2, [r7, #3]
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f7f9 fcf8 	bl	8001afe <HAL_PCD_EP_Close>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f8f7 	bl	8008308 <USBD_Get_USB_Status>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	4611      	mov	r1, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f7f9 fda1 	bl	8001c8e <HAL_PCD_EP_SetStall>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f8d8 	bl	8008308 <USBD_Get_USB_Status>
 8008158:	4603      	mov	r3, r0
 800815a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815c:	7bbb      	ldrb	r3, [r7, #14]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f7f9 fde2 	bl	8001d4e <HAL_PCD_EP_ClrStall>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f8b9 	bl	8008308 <USBD_Get_USB_Status>
 8008196:	4603      	mov	r3, r0
 8008198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819a:	7bbb      	ldrb	r3, [r7, #14]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	da0c      	bge.n	80081da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	440b      	add	r3, r1
 80081d4:	3302      	adds	r3, #2
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	e00b      	b.n	80081f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081e0:	68f9      	ldr	r1, [r7, #12]
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	440b      	add	r3, r1
 80081ec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80081f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bc80      	pop	{r7}
 80081fa:	4770      	bx	lr

080081fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008216:	78fa      	ldrb	r2, [r7, #3]
 8008218:	4611      	mov	r1, r2
 800821a:	4618      	mov	r0, r3
 800821c:	f7f9 fbe4 	bl	80019e8 <HAL_PCD_SetAddress>
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f86e 	bl	8008308 <USBD_Get_USB_Status>
 800822c:	4603      	mov	r3, r0
 800822e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008230:	7bbb      	ldrb	r3, [r7, #14]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b086      	sub	sp, #24
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	461a      	mov	r2, r3
 8008246:	460b      	mov	r3, r1
 8008248:	72fb      	strb	r3, [r7, #11]
 800824a:	4613      	mov	r3, r2
 800824c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800825c:	893b      	ldrh	r3, [r7, #8]
 800825e:	7af9      	ldrb	r1, [r7, #11]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	f7f9 fcd1 	bl	8001c08 <HAL_PCD_EP_Transmit>
 8008266:	4603      	mov	r3, r0
 8008268:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 f84b 	bl	8008308 <USBD_Get_USB_Status>
 8008272:	4603      	mov	r3, r0
 8008274:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008276:	7dbb      	ldrb	r3, [r7, #22]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	461a      	mov	r2, r3
 800828c:	460b      	mov	r3, r1
 800828e:	72fb      	strb	r3, [r7, #11]
 8008290:	4613      	mov	r3, r2
 8008292:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082a2:	893b      	ldrh	r3, [r7, #8]
 80082a4:	7af9      	ldrb	r1, [r7, #11]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	f7f9 fc71 	bl	8001b8e <HAL_PCD_EP_Receive>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f828 	bl	8008308 <USBD_Get_USB_Status>
 80082b8:	4603      	mov	r3, r0
 80082ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80082d0:	4b02      	ldr	r3, [pc, #8]	; (80082dc <USBD_static_malloc+0x14>)
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	4770      	bx	lr
 80082dc:	20000a9c 	.word	0x20000a9c

080082e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]

}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bc80      	pop	{r7}
 80082f0:	4770      	bx	lr

080082f2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d817      	bhi.n	800834c <USBD_Get_USB_Status+0x44>
 800831c:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <USBD_Get_USB_Status+0x1c>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008335 	.word	0x08008335
 8008328:	0800833b 	.word	0x0800833b
 800832c:	08008341 	.word	0x08008341
 8008330:	08008347 	.word	0x08008347
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
    break;
 8008338:	e00b      	b.n	8008352 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800833a:	2302      	movs	r3, #2
 800833c:	73fb      	strb	r3, [r7, #15]
    break;
 800833e:	e008      	b.n	8008352 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008340:	2301      	movs	r3, #1
 8008342:	73fb      	strb	r3, [r7, #15]
    break;
 8008344:	e005      	b.n	8008352 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008346:	2302      	movs	r3, #2
 8008348:	73fb      	strb	r3, [r7, #15]
    break;
 800834a:	e002      	b.n	8008352 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800834c:	2302      	movs	r3, #2
 800834e:	73fb      	strb	r3, [r7, #15]
    break;
 8008350:	bf00      	nop
  }
  return usb_status;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop

08008360 <__libc_init_array>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	2600      	movs	r6, #0
 8008364:	4d0c      	ldr	r5, [pc, #48]	; (8008398 <__libc_init_array+0x38>)
 8008366:	4c0d      	ldr	r4, [pc, #52]	; (800839c <__libc_init_array+0x3c>)
 8008368:	1b64      	subs	r4, r4, r5
 800836a:	10a4      	asrs	r4, r4, #2
 800836c:	42a6      	cmp	r6, r4
 800836e:	d109      	bne.n	8008384 <__libc_init_array+0x24>
 8008370:	f000 f822 	bl	80083b8 <_init>
 8008374:	2600      	movs	r6, #0
 8008376:	4d0a      	ldr	r5, [pc, #40]	; (80083a0 <__libc_init_array+0x40>)
 8008378:	4c0a      	ldr	r4, [pc, #40]	; (80083a4 <__libc_init_array+0x44>)
 800837a:	1b64      	subs	r4, r4, r5
 800837c:	10a4      	asrs	r4, r4, #2
 800837e:	42a6      	cmp	r6, r4
 8008380:	d105      	bne.n	800838e <__libc_init_array+0x2e>
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	f855 3b04 	ldr.w	r3, [r5], #4
 8008388:	4798      	blx	r3
 800838a:	3601      	adds	r6, #1
 800838c:	e7ee      	b.n	800836c <__libc_init_array+0xc>
 800838e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008392:	4798      	blx	r3
 8008394:	3601      	adds	r6, #1
 8008396:	e7f2      	b.n	800837e <__libc_init_array+0x1e>
 8008398:	08008440 	.word	0x08008440
 800839c:	08008440 	.word	0x08008440
 80083a0:	08008440 	.word	0x08008440
 80083a4:	08008444 	.word	0x08008444

080083a8 <memset>:
 80083a8:	4603      	mov	r3, r0
 80083aa:	4402      	add	r2, r0
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d100      	bne.n	80083b2 <memset+0xa>
 80083b0:	4770      	bx	lr
 80083b2:	f803 1b01 	strb.w	r1, [r3], #1
 80083b6:	e7f9      	b.n	80083ac <memset+0x4>

080083b8 <_init>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr

080083c4 <_fini>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr
