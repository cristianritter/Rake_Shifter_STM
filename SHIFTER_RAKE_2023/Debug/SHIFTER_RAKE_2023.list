
SHIFTER_RAKE_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800b808  0800b808  0001b808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bad4  0800bad4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bad4  0800bad4  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bad4  0800bad4  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bad4  0800bad4  0001bad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bad8  0800bad8  0001bad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800badc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  200001d0  0800bcac  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  0800bcac  00020bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013383  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003954  00000000  00000000  0003357c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00036ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  000380c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbfd  00000000  00000000  00039118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001608c  00000000  00000000  00054d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8e3  00000000  00000000  0006ada1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005458  00000000  00000000  000fa6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b7f0 	.word	0x0800b7f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	0800b7f0 	.word	0x0800b7f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000164:	2300      	movs	r3, #0
 8000166:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000168:	68bb      	ldr	r3, [r7, #8]
 800016a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800016e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800017c:	d020      	beq.n	80001c0 <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 800017e:	68f9      	ldr	r1, [r7, #12]
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	b2ca      	uxtb	r2, r1
 8000188:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	0a19      	lsrs	r1, r3, #8
 800018e:	68bb      	ldr	r3, [r7, #8]
 8000190:	3301      	adds	r3, #1
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	b2ca      	uxtb	r2, r1
 8000198:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	0c19      	lsrs	r1, r3, #16
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	3302      	adds	r3, #2
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	4413      	add	r3, r2
 80001a6:	b2ca      	uxtb	r2, r1
 80001a8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	0e19      	lsrs	r1, r3, #24
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	3303      	adds	r3, #3
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	4413      	add	r3, r2
 80001b6:	b2ca      	uxtb	r2, r1
 80001b8:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	3304      	adds	r3, #4
 80001be:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001c6:	d1cf      	bne.n	8000168 <read_flash+0xc>
}
 80001c8:	bf00      	nop
 80001ca:	bf00      	nop
 80001cc:	3714      	adds	r7, #20
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <save_to_flash>:

void save_to_flash(uint8_t *data){
 80001d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d8:	b08f      	sub	sp, #60	; 0x3c
 80001da:	af00      	add	r7, sp, #0
 80001dc:	6078      	str	r0, [r7, #4]
 80001de:	466b      	mov	r3, sp
 80001e0:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f7ff ffb2 	bl	800014c <strlen>
 80001e8:	4603      	mov	r3, r0
 80001ea:	089e      	lsrs	r6, r3, #2
 80001ec:	6878      	ldr	r0, [r7, #4]
 80001ee:	f7ff ffad 	bl	800014c <strlen>
 80001f2:	4603      	mov	r3, r0
 80001f4:	f003 0303 	and.w	r3, r3, #3
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	bf14      	ite	ne
 80001fc:	2301      	movne	r3, #1
 80001fe:	2300      	moveq	r3, #0
 8000200:	b2db      	uxtb	r3, r3
 8000202:	18f1      	adds	r1, r6, r3
 8000204:	460b      	mov	r3, r1
 8000206:	3b01      	subs	r3, #1
 8000208:	637b      	str	r3, [r7, #52]	; 0x34
 800020a:	2300      	movs	r3, #0
 800020c:	4688      	mov	r8, r1
 800020e:	4699      	mov	r9, r3
 8000210:	f04f 0200 	mov.w	r2, #0
 8000214:	f04f 0300 	mov.w	r3, #0
 8000218:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800021c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000220:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000224:	2300      	movs	r3, #0
 8000226:	460c      	mov	r4, r1
 8000228:	461d      	mov	r5, r3
 800022a:	f04f 0200 	mov.w	r2, #0
 800022e:	f04f 0300 	mov.w	r3, #0
 8000232:	016b      	lsls	r3, r5, #5
 8000234:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000238:	0162      	lsls	r2, r4, #5
 800023a:	008b      	lsls	r3, r1, #2
 800023c:	3307      	adds	r3, #7
 800023e:	08db      	lsrs	r3, r3, #3
 8000240:	00db      	lsls	r3, r3, #3
 8000242:	ebad 0d03 	sub.w	sp, sp, r3
 8000246:	466b      	mov	r3, sp
 8000248:	3303      	adds	r3, #3
 800024a:	089b      	lsrs	r3, r3, #2
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8000250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000252:	f7ff ff7b 	bl	800014c <strlen>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	2100      	movs	r1, #0
 800025c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800025e:	f009 fff9 	bl	800a254 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8000262:	6879      	ldr	r1, [r7, #4]
 8000264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000266:	f00a f81d 	bl	800a2a4 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800026a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800026c:	f7ff ff6e 	bl	800014c <strlen>
 8000270:	4603      	mov	r3, r0
 8000272:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8000274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000276:	f7ff ff69 	bl	800014c <strlen>
 800027a:	4603      	mov	r3, r0
 800027c:	f003 0303 	and.w	r3, r3, #3
 8000280:	2b00      	cmp	r3, #0
 8000282:	bf14      	ite	ne
 8000284:	2301      	movne	r3, #1
 8000286:	2300      	moveq	r3, #0
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800028c:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f7ff ff5c 	bl	800014c <strlen>
 8000294:	4603      	mov	r3, r0
 8000296:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 8000298:	b29c      	uxth	r4, r3
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f7ff ff56 	bl	800014c <strlen>
 80002a0:	4603      	mov	r3, r0
 80002a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	bf14      	ite	ne
 80002aa:	2301      	movne	r3, #1
 80002ac:	2300      	moveq	r3, #0
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	4423      	add	r3, r4
 80002b4:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80002b6:	857b      	strh	r3, [r7, #42]	; 0x2a
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80002b8:	f002 f830 	bl	800231c <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 80002bc:	f002 f864 	bl	8002388 <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.PageAddress = FLASH_STORAGE;
 80002c4:	4b21      	ldr	r3, [pc, #132]	; (800034c <save_to_flash+0x178>)
 80002c6:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbPages = pages;
 80002c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError;

	volatile uint32_t write_cnt=0, index=0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]

	volatile HAL_StatusTypeDef status;
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80002d6:	f107 0214 	add.w	r2, r7, #20
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	4611      	mov	r1, r2
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 f92f 	bl	8002544 <HAL_FLASHEx_Erase>
 80002e6:	4603      	mov	r3, r0
 80002e8:	72fb      	strb	r3, [r7, #11]
	while(index < data_length)
 80002ea:	e020      	b.n	800032e <save_to_flash+0x15a>
	{
		if (status == HAL_OK){
 80002ec:	7afb      	ldrb	r3, [r7, #11]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d11c      	bne.n	800032e <save_to_flash+0x15a>
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 80002f4:	693b      	ldr	r3, [r7, #16]
 80002f6:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80002fa:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000306:	2200      	movs	r2, #0
 8000308:	469a      	mov	sl, r3
 800030a:	4693      	mov	fp, r2
 800030c:	4652      	mov	r2, sl
 800030e:	465b      	mov	r3, fp
 8000310:	2002      	movs	r0, #2
 8000312:	f001 ff93 	bl	800223c <HAL_FLASH_Program>
 8000316:	4603      	mov	r3, r0
 8000318:	72fb      	strb	r3, [r7, #11]
			if(status == HAL_OK){
 800031a:	7afb      	ldrb	r3, [r7, #11]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	2b00      	cmp	r3, #0
 8000320:	d105      	bne.n	800032e <save_to_flash+0x15a>
				write_cnt += 4;
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	3304      	adds	r3, #4
 8000326:	613b      	str	r3, [r7, #16]
				index++;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
	while(index < data_length)
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000332:	429a      	cmp	r2, r3
 8000334:	d3da      	bcc.n	80002ec <save_to_flash+0x118>
			}
		}
	}

	HAL_FLASH_OB_Lock();
 8000336:	f002 f843 	bl	80023c0 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 800033a:	f002 f815 	bl	8002368 <HAL_FLASH_Lock>
 800033e:	f8d7 d000 	ldr.w	sp, [r7]
}
 8000342:	bf00      	nop
 8000344:	373c      	adds	r7, #60	; 0x3c
 8000346:	46bd      	mov	sp, r7
 8000348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034c:	08019000 	.word	0x08019000

08000350 <LerADCS>:
uint16_t speed_div_y[2] = {900, 2000};					//  -		-		-		-		-		-		-		-  y
uint16_t ADCValue[3] = {0, 0, 0};
int8_t buffer2[6];
uint8_t rx_buffer[3];

void LerADCS(){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  ADCValue[0] = HAL_ADC_GetValue(&hadc1); 					// leitura do axis x cambio
 8000354:	483c      	ldr	r0, [pc, #240]	; (8000448 <LerADCS+0xf8>)
 8000356:	f001 fa53 	bl	8001800 <HAL_ADC_GetValue>
 800035a:	4603      	mov	r3, r0
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b3b      	ldr	r3, [pc, #236]	; (800044c <LerADCS+0xfc>)
 8000360:	801a      	strh	r2, [r3, #0]
  ADCValue[1] = HAL_ADC_GetValue(&hadc1); 					// leitura do axis y cambio
 8000362:	4839      	ldr	r0, [pc, #228]	; (8000448 <LerADCS+0xf8>)
 8000364:	f001 fa4c 	bl	8001800 <HAL_ADC_GetValue>
 8000368:	4603      	mov	r3, r0
 800036a:	b29a      	uxth	r2, r3
 800036c:	4b37      	ldr	r3, [pc, #220]	; (800044c <LerADCS+0xfc>)
 800036e:	805a      	strh	r2, [r3, #2]
  if (spi_detection == 1){
 8000370:	4b37      	ldr	r3, [pc, #220]	; (8000450 <LerADCS+0x100>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d124      	bne.n	80003c2 <LerADCS+0x72>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //descarga para seleção do G27
 8000378:	2301      	movs	r3, #1
 800037a:	2203      	movs	r2, #3
 800037c:	4935      	ldr	r1, [pc, #212]	; (8000454 <LerADCS+0x104>)
 800037e:	4836      	ldr	r0, [pc, #216]	; (8000458 <LerADCS+0x108>)
 8000380:	f004 fd54 	bl	8004e2c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);
 8000384:	2301      	movs	r3, #1
 8000386:	2203      	movs	r2, #3
 8000388:	4932      	ldr	r1, [pc, #200]	; (8000454 <LerADCS+0x104>)
 800038a:	4833      	ldr	r0, [pc, #204]	; (8000458 <LerADCS+0x108>)
 800038c:	f004 fd4e 	bl	8004e2c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);
 8000390:	2301      	movs	r3, #1
 8000392:	2203      	movs	r2, #3
 8000394:	492f      	ldr	r1, [pc, #188]	; (8000454 <LerADCS+0x104>)
 8000396:	4830      	ldr	r0, [pc, #192]	; (8000458 <LerADCS+0x108>)
 8000398:	f004 fd48 	bl	8004e2c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);
 800039c:	2301      	movs	r3, #1
 800039e:	2203      	movs	r2, #3
 80003a0:	492c      	ldr	r1, [pc, #176]	; (8000454 <LerADCS+0x104>)
 80003a2:	482d      	ldr	r0, [pc, #180]	; (8000458 <LerADCS+0x108>)
 80003a4:	f004 fd42 	bl	8004e2c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);
 80003a8:	2301      	movs	r3, #1
 80003aa:	2203      	movs	r2, #3
 80003ac:	4929      	ldr	r1, [pc, #164]	; (8000454 <LerADCS+0x104>)
 80003ae:	482a      	ldr	r0, [pc, #168]	; (8000458 <LerADCS+0x108>)
 80003b0:	f004 fd3c 	bl	8004e2c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);
 80003b4:	2301      	movs	r3, #1
 80003b6:	2203      	movs	r2, #3
 80003b8:	4926      	ldr	r1, [pc, #152]	; (8000454 <LerADCS+0x104>)
 80003ba:	4827      	ldr	r0, [pc, #156]	; (8000458 <LerADCS+0x108>)
 80003bc:	f004 fd36 	bl	8004e2c <HAL_SPI_Receive>
 80003c0:	e023      	b.n	800040a <LerADCS+0xba>
  }
  else {
	  HAL_SPI_Receive(&hspi2, rx_buffer, 3, 1);  // descarga para seleção do G25
 80003c2:	2301      	movs	r3, #1
 80003c4:	2203      	movs	r2, #3
 80003c6:	4923      	ldr	r1, [pc, #140]	; (8000454 <LerADCS+0x104>)
 80003c8:	4824      	ldr	r0, [pc, #144]	; (800045c <LerADCS+0x10c>)
 80003ca:	f004 fd2f 	bl	8004e2c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 3, 1);
 80003ce:	2301      	movs	r3, #1
 80003d0:	2203      	movs	r2, #3
 80003d2:	4920      	ldr	r1, [pc, #128]	; (8000454 <LerADCS+0x104>)
 80003d4:	4821      	ldr	r0, [pc, #132]	; (800045c <LerADCS+0x10c>)
 80003d6:	f004 fd29 	bl	8004e2c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 3, 1);
 80003da:	2301      	movs	r3, #1
 80003dc:	2203      	movs	r2, #3
 80003de:	491d      	ldr	r1, [pc, #116]	; (8000454 <LerADCS+0x104>)
 80003e0:	481e      	ldr	r0, [pc, #120]	; (800045c <LerADCS+0x10c>)
 80003e2:	f004 fd23 	bl	8004e2c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 3, 1);
 80003e6:	2301      	movs	r3, #1
 80003e8:	2203      	movs	r2, #3
 80003ea:	491a      	ldr	r1, [pc, #104]	; (8000454 <LerADCS+0x104>)
 80003ec:	481b      	ldr	r0, [pc, #108]	; (800045c <LerADCS+0x10c>)
 80003ee:	f004 fd1d 	bl	8004e2c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 3, 1);
 80003f2:	2301      	movs	r3, #1
 80003f4:	2203      	movs	r2, #3
 80003f6:	4917      	ldr	r1, [pc, #92]	; (8000454 <LerADCS+0x104>)
 80003f8:	4818      	ldr	r0, [pc, #96]	; (800045c <LerADCS+0x10c>)
 80003fa:	f004 fd17 	bl	8004e2c <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 3, 1);
 80003fe:	2301      	movs	r3, #1
 8000400:	2203      	movs	r2, #3
 8000402:	4914      	ldr	r1, [pc, #80]	; (8000454 <LerADCS+0x104>)
 8000404:	4815      	ldr	r0, [pc, #84]	; (800045c <LerADCS+0x10c>)
 8000406:	f004 fd11 	bl	8004e2c <HAL_SPI_Receive>
  }
  ADCValue[2] = HAL_ADC_GetValue(&hadc1); // sck pin 9 reading  		>=4093 se desconectado
 800040a:	480f      	ldr	r0, [pc, #60]	; (8000448 <LerADCS+0xf8>)
 800040c:	f001 f9f8 	bl	8001800 <HAL_ADC_GetValue>
 8000410:	4603      	mov	r3, r0
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b0d      	ldr	r3, [pc, #52]	; (800044c <LerADCS+0xfc>)
 8000416:	809a      	strh	r2, [r3, #4]
  if (spi_detection == 1){											// quando excitado spi1 gera reducao na tensao do cap caso esteja conectado o g27
 8000418:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <LerADCS+0x100>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d107      	bne.n	8000430 <LerADCS+0xe0>
	  spi_values[0] = ADCValue[2];
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <LerADCS+0xfc>)
 8000422:	889a      	ldrh	r2, [r3, #4]
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <LerADCS+0x110>)
 8000426:	801a      	strh	r2, [r3, #0]
	  spi_detection = 2;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <LerADCS+0x100>)
 800042a:	2202      	movs	r2, #2
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	e006      	b.n	800043e <LerADCS+0xee>
  }
  else{
	  spi_values[1] = ADCValue[2];									// quando excitado spi2 gera reducao na tensao do cap caso esteja conectado o g25
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <LerADCS+0xfc>)
 8000432:	889a      	ldrh	r2, [r3, #4]
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <LerADCS+0x110>)
 8000436:	805a      	strh	r2, [r3, #2]
	  spi_detection = 1;
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <LerADCS+0x100>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[1]), 100);
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[2]), 100);
//  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", spi_select), 100);
//  HAL_UART_Transmit(&huart1, "      ", 6, 100);
//  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  HAL_Delay(1);
 800043e:	2001      	movs	r0, #1
 8000440:	f001 f804 	bl	800144c <HAL_Delay>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	200001ec 	.word	0x200001ec
 800044c:	20000360 	.word	0x20000360
 8000450:	20000000 	.word	0x20000000
 8000454:	20000368 	.word	0x20000368
 8000458:	20000260 	.word	0x20000260
 800045c:	200002b8 	.word	0x200002b8
 8000460:	2000035c 	.word	0x2000035c

08000464 <LerSPI>:

void LerSPI(){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046e:	4813      	ldr	r0, [pc, #76]	; (80004bc <LerSPI+0x58>)
 8000470:	f002 faab 	bl	80029ca <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000474:	2001      	movs	r0, #1
 8000476:	f000 ffe9 	bl	800144c <HAL_Delay>
  if (spi_values[0] < spi_values[1]){ 					// significa que está conectado o G27
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <LerSPI+0x5c>)
 800047c:	881a      	ldrh	r2, [r3, #0]
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <LerSPI+0x5c>)
 8000480:	885b      	ldrh	r3, [r3, #2]
 8000482:	429a      	cmp	r2, r3
 8000484:	d206      	bcs.n	8000494 <LerSPI+0x30>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 50);
 8000486:	2332      	movs	r3, #50	; 0x32
 8000488:	2203      	movs	r2, #3
 800048a:	490e      	ldr	r1, [pc, #56]	; (80004c4 <LerSPI+0x60>)
 800048c:	480e      	ldr	r0, [pc, #56]	; (80004c8 <LerSPI+0x64>)
 800048e:	f004 fccd 	bl	8004e2c <HAL_SPI_Receive>
 8000492:	e005      	b.n	80004a0 <LerSPI+0x3c>
  }
  else{													// significa que está conectado o G25
	  HAL_SPI_Receive(&hspi2, rx_buffer, 3, 50);
 8000494:	2332      	movs	r3, #50	; 0x32
 8000496:	2203      	movs	r2, #3
 8000498:	490a      	ldr	r1, [pc, #40]	; (80004c4 <LerSPI+0x60>)
 800049a:	480c      	ldr	r0, [pc, #48]	; (80004cc <LerSPI+0x68>)
 800049c:	f004 fcc6 	bl	8004e2c <HAL_SPI_Receive>
  }
  HAL_Delay(1);
 80004a0:	2001      	movs	r0, #1
 80004a2:	f000 ffd3 	bl	800144c <HAL_Delay>
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ac:	4803      	ldr	r0, [pc, #12]	; (80004bc <LerSPI+0x58>)
 80004ae:	f002 fa8c 	bl	80029ca <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004b2:	2001      	movs	r0, #1
 80004b4:	f000 ffca 	bl	800144c <HAL_Delay>
  //HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[0]), 100);
  //HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[1]), 100);
  //HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[2]), 100);
  //HAL_UART_Transmit(&huart1, "      ", 6, 100);
  //HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	2000035c 	.word	0x2000035c
 80004c4:	20000368 	.word	0x20000368
 80004c8:	20000260 	.word	0x20000260
 80004cc:	200002b8 	.word	0x200002b8

080004d0 <Calibrar>:

void Calibrar(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b093      	sub	sp, #76	; 0x4c
 80004d4:	af02      	add	r7, sp, #8
	if (HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){			// se botão de calibração pressionado
 80004d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004da:	4851      	ldr	r0, [pc, #324]	; (8000620 <Calibrar+0x150>)
 80004dc:	f002 fa5e 	bl	800299c <HAL_GPIO_ReadPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	f000 8098 	beq.w	8000618 <Calibrar+0x148>
		HAL_Delay(500);
 80004e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ec:	f000 ffae 	bl	800144c <HAL_Delay>
		char params_to_save[50];
		uint16_t axis_x_min_max[2] = {9999, 0};
 80004f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80004f4:	873b      	strh	r3, [r7, #56]	; 0x38
 80004f6:	2300      	movs	r3, #0
 80004f8:	877b      	strh	r3, [r7, #58]	; 0x3a
		uint16_t axis_y_min_max[2] = {9999, 0};
 80004fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80004fe:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000500:	2300      	movs	r3, #0
 8000502:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000504:	e029      	b.n	800055a <Calibrar+0x8a>
			HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8000506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050a:	4846      	ldr	r0, [pc, #280]	; (8000624 <Calibrar+0x154>)
 800050c:	f002 fa75 	bl	80029fa <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8000510:	2032      	movs	r0, #50	; 0x32
 8000512:	f000 ff9b 	bl	800144c <HAL_Delay>
			LerADCS();  									//le posicao dos eixos
 8000516:	f7ff ff1b 	bl	8000350 <LerADCS>
			if (ADCValue[0] < axis_x_min_max[0]){			// define o menor valor detectado no eixo x
 800051a:	4b43      	ldr	r3, [pc, #268]	; (8000628 <Calibrar+0x158>)
 800051c:	881a      	ldrh	r2, [r3, #0]
 800051e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000520:	429a      	cmp	r2, r3
 8000522:	d202      	bcs.n	800052a <Calibrar+0x5a>
				axis_x_min_max[0] = ADCValue[0];
 8000524:	4b40      	ldr	r3, [pc, #256]	; (8000628 <Calibrar+0x158>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	873b      	strh	r3, [r7, #56]	; 0x38
			}
			if (ADCValue[0] > axis_x_min_max[1]){			// define o maior valor detectado no eixo x
 800052a:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <Calibrar+0x158>)
 800052c:	881a      	ldrh	r2, [r3, #0]
 800052e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000530:	429a      	cmp	r2, r3
 8000532:	d902      	bls.n	800053a <Calibrar+0x6a>
				axis_x_min_max[1] = ADCValue[0];
 8000534:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <Calibrar+0x158>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	877b      	strh	r3, [r7, #58]	; 0x3a
			}
			if (ADCValue[1] < axis_y_min_max[0]){			// define o menor valor detectado no eixo y
 800053a:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <Calibrar+0x158>)
 800053c:	885a      	ldrh	r2, [r3, #2]
 800053e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000540:	429a      	cmp	r2, r3
 8000542:	d202      	bcs.n	800054a <Calibrar+0x7a>
				axis_y_min_max[0] = ADCValue[1];
 8000544:	4b38      	ldr	r3, [pc, #224]	; (8000628 <Calibrar+0x158>)
 8000546:	885b      	ldrh	r3, [r3, #2]
 8000548:	86bb      	strh	r3, [r7, #52]	; 0x34
			}
			if (ADCValue[1] > axis_y_min_max[1]){			// define o maior valor detectado no eixo y
 800054a:	4b37      	ldr	r3, [pc, #220]	; (8000628 <Calibrar+0x158>)
 800054c:	885a      	ldrh	r2, [r3, #2]
 800054e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000550:	429a      	cmp	r2, r3
 8000552:	d902      	bls.n	800055a <Calibrar+0x8a>
				axis_y_min_max[1] = ADCValue[1];
 8000554:	4b34      	ldr	r3, [pc, #208]	; (8000628 <Calibrar+0x158>)
 8000556:	885b      	ldrh	r3, [r3, #2]
 8000558:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4830      	ldr	r0, [pc, #192]	; (8000620 <Calibrar+0x150>)
 8000560:	f002 fa1c 	bl	800299c <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d1cd      	bne.n	8000506 <Calibrar+0x36>
			}
		}
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000570:	482c      	ldr	r0, [pc, #176]	; (8000624 <Calibrar+0x154>)
 8000572:	f002 fa2a 	bl	80029ca <HAL_GPIO_WritePin>

		uint16_t space_x = (axis_x_min_max[1]-axis_x_min_max[0])/3;
 8000576:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000578:	461a      	mov	r2, r3
 800057a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	4a2b      	ldr	r2, [pc, #172]	; (800062c <Calibrar+0x15c>)
 8000580:	fb82 1203 	smull	r1, r2, r2, r3
 8000584:	17db      	asrs	r3, r3, #31
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	87fb      	strh	r3, [r7, #62]	; 0x3e
		speed_div_x[0] = axis_x_min_max[0] + space_x; 					//calcula as linhas de calibracao do eixo x
 800058a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800058c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800058e:	4413      	add	r3, r2
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <Calibrar+0x160>)
 8000594:	801a      	strh	r2, [r3, #0]

		speed_div_x[1] = axis_x_min_max[1] - space_x;
 8000596:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000598:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <Calibrar+0x160>)
 80005a0:	805a      	strh	r2, [r3, #2]

		uint16_t space_y = (axis_y_min_max[1]-axis_y_min_max[0])/3;
 80005a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80005a4:	461a      	mov	r2, r3
 80005a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	4a20      	ldr	r2, [pc, #128]	; (800062c <Calibrar+0x15c>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	17db      	asrs	r3, r3, #31
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
		speed_div_y[0] = axis_y_min_max[0] + space_y; 					//calcula as linhas de calibracao do eixo y
 80005b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80005b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80005ba:	4413      	add	r3, r2
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <Calibrar+0x164>)
 80005c0:	801a      	strh	r2, [r3, #0]

		speed_div_y[1] = axis_y_min_max[1] - space_y;
 80005c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80005c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <Calibrar+0x164>)
 80005cc:	805a      	strh	r2, [r3, #2]

		sprintf(params_to_save, "%u,%u,%u,%u", speed_div_x[0], speed_div_x[1], speed_div_y[0], speed_div_y[1]);
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <Calibrar+0x160>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <Calibrar+0x160>)
 80005d6:	885b      	ldrh	r3, [r3, #2]
 80005d8:	461c      	mov	r4, r3
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <Calibrar+0x164>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <Calibrar+0x164>)
 80005e2:	885b      	ldrh	r3, [r3, #2]
 80005e4:	4638      	mov	r0, r7
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	4623      	mov	r3, r4
 80005ec:	460a      	mov	r2, r1
 80005ee:	4912      	ldr	r1, [pc, #72]	; (8000638 <Calibrar+0x168>)
 80005f0:	f009 fe38 	bl	800a264 <siprintf>
		save_to_flash((uint8_t *)params_to_save);
 80005f4:	463b      	mov	r3, r7
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fdec 	bl	80001d4 <save_to_flash>
		HAL_UART_Transmit(&huart1, (uint8_t)params_to_save, (int)sizeof(params_to_save), 100);
 80005fc:	463b      	mov	r3, r7
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	4619      	mov	r1, r3
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	2232      	movs	r2, #50	; 0x32
 8000606:	480d      	ldr	r0, [pc, #52]	; (800063c <Calibrar+0x16c>)
 8000608:	f005 f809 	bl	800561e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	2202      	movs	r2, #2
 8000610:	490b      	ldr	r1, [pc, #44]	; (8000640 <Calibrar+0x170>)
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <Calibrar+0x16c>)
 8000614:	f005 f803 	bl	800561e <HAL_UART_Transmit>

	}
}
 8000618:	bf00      	nop
 800061a:	3744      	adds	r7, #68	; 0x44
 800061c:	46bd      	mov	sp, r7
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	40011000 	.word	0x40011000
 8000624:	40010c00 	.word	0x40010c00
 8000628:	20000360 	.word	0x20000360
 800062c:	55555556 	.word	0x55555556
 8000630:	20000004 	.word	0x20000004
 8000634:	20000008 	.word	0x20000008
 8000638:	0800b808 	.word	0x0800b808
 800063c:	20000310 	.word	0x20000310
 8000640:	0800b814 	.word	0x0800b814

08000644 <update_data_from_flash>:

void update_data_from_flash(uint16_t (* speed_div_x), uint16_t (* speed_div_y)){									// PRECISA FINALIZAR ANTES DE TESTAR
 8000644:	b580      	push	{r7, lr}
 8000646:	b0b4      	sub	sp, #208	; 0xd0
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	char data[0xC0];
	read_flash((uint8_t *)data);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fd82 	bl	800015c <read_flash>
    char * token = strtok(data,",");				//first strtok go to variable directly
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	490b      	ldr	r1, [pc, #44]	; (800068c <update_data_from_flash+0x48>)
 800065e:	4618      	mov	r0, r3
 8000660:	f009 fe28 	bl	800a2b4 <strtok>
 8000664:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_x[0] = atoi(token)*10;
 8000668:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800066c:	f009 fdc4 	bl	800a1f8 <atoi>
 8000670:	4603      	mov	r3, r0
 8000672:	b29b      	uxth	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	0092      	lsls	r2, r2, #2
 8000678:	4413      	add	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	b29a      	uxth	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	801a      	strh	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	37d0      	adds	r7, #208	; 0xd0
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	0800b818 	.word	0x0800b818

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fe77 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 fa0b 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 fb7b 	bl	8000d98 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a2:	f000 fb5b 	bl	8000d5c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80006a6:	f009 f9c3 	bl	8009a30 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80006aa:	f000 fa61 	bl	8000b70 <MX_ADC1_Init>
  MX_SPI1_Init();
 80006ae:	f000 fabb 	bl	8000c28 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006b2:	f000 faf1 	bl	8000c98 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80006b6:	f000 fb27 	bl	8000d08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 80006ba:	2203      	movs	r2, #3
 80006bc:	498d      	ldr	r1, [pc, #564]	; (80008f4 <main+0x264>)
 80006be:	488e      	ldr	r0, [pc, #568]	; (80008f8 <main+0x268>)
 80006c0:	f000 ffc0 	bl	8001644 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0); 		//liga led
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ca:	488c      	ldr	r0, [pc, #560]	; (80008fc <main+0x26c>)
 80006cc:	f002 f97d 	bl	80029ca <HAL_GPIO_WritePin>
  update_data_from_flash(speed_div_x, speed_div_y);				//atualiza valores com os dados da memoria flash
 80006d0:	498b      	ldr	r1, [pc, #556]	; (8000900 <main+0x270>)
 80006d2:	488c      	ldr	r0, [pc, #560]	; (8000904 <main+0x274>)
 80006d4:	f7ff ffb6 	bl	8000644 <update_data_from_flash>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Calibrar();
 80006d8:	f7ff fefa 	bl	80004d0 <Calibrar>
	  LerADCS();
 80006dc:	f7ff fe38 	bl	8000350 <LerADCS>
	  LerSPI();
 80006e0:	f7ff fec0 	bl	8000464 <LerSPI>

	  uint16_t cambio_x_axis = (uint16_t) ADCValue[0];  //manopla x
 80006e4:	4b83      	ldr	r3, [pc, #524]	; (80008f4 <main+0x264>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	80fb      	strh	r3, [r7, #6]
	  uint16_t cambio_y_axis = (uint16_t) ADCValue[1];  //manopla y
 80006ea:	4b82      	ldr	r3, [pc, #520]	; (80008f4 <main+0x264>)
 80006ec:	885b      	ldrh	r3, [r3, #2]
 80006ee:	80bb      	strh	r3, [r7, #4]

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis > speed_div_y[1]){  //speed 1
 80006f0:	4b84      	ldr	r3, [pc, #528]	; (8000904 <main+0x274>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	88fa      	ldrh	r2, [r7, #6]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d20c      	bcs.n	8000714 <main+0x84>
 80006fa:	4b81      	ldr	r3, [pc, #516]	; (8000900 <main+0x270>)
 80006fc:	885b      	ldrh	r3, [r3, #2]
 80006fe:	88ba      	ldrh	r2, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	d907      	bls.n	8000714 <main+0x84>
		  joystickhid.botoes0 |= (uint8_t)(1<<0);	// SETA BOTAO 1
 8000704:	4b80      	ldr	r3, [pc, #512]	; (8000908 <main+0x278>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b7e      	ldr	r3, [pc, #504]	; (8000908 <main+0x278>)
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e006      	b.n	8000722 <main+0x92>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<0);	// RESETA BOTAO 1
 8000714:	4b7c      	ldr	r3, [pc, #496]	; (8000908 <main+0x278>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b7a      	ldr	r3, [pc, #488]	; (8000908 <main+0x278>)
 8000720:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis < speed_div_y[0]){  //speed2
 8000722:	4b78      	ldr	r3, [pc, #480]	; (8000904 <main+0x274>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	88fa      	ldrh	r2, [r7, #6]
 8000728:	429a      	cmp	r2, r3
 800072a:	d20c      	bcs.n	8000746 <main+0xb6>
 800072c:	4b74      	ldr	r3, [pc, #464]	; (8000900 <main+0x270>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	88ba      	ldrh	r2, [r7, #4]
 8000732:	429a      	cmp	r2, r3
 8000734:	d207      	bcs.n	8000746 <main+0xb6>
		  joystickhid.botoes0 |= (uint8_t)(1<<1);	// SETA BOTAO 2
 8000736:	4b74      	ldr	r3, [pc, #464]	; (8000908 <main+0x278>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b71      	ldr	r3, [pc, #452]	; (8000908 <main+0x278>)
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e006      	b.n	8000754 <main+0xc4>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<1);	// RESETA BOTAO 2
 8000746:	4b70      	ldr	r3, [pc, #448]	; (8000908 <main+0x278>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	f023 0302 	bic.w	r3, r3, #2
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b6d      	ldr	r3, [pc, #436]	; (8000908 <main+0x278>)
 8000752:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis > speed_div_y[1]){  //speed 3
 8000754:	4b6b      	ldr	r3, [pc, #428]	; (8000904 <main+0x274>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	88fa      	ldrh	r2, [r7, #6]
 800075a:	429a      	cmp	r2, r3
 800075c:	d911      	bls.n	8000782 <main+0xf2>
 800075e:	4b69      	ldr	r3, [pc, #420]	; (8000904 <main+0x274>)
 8000760:	885b      	ldrh	r3, [r3, #2]
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	429a      	cmp	r2, r3
 8000766:	d20c      	bcs.n	8000782 <main+0xf2>
 8000768:	4b65      	ldr	r3, [pc, #404]	; (8000900 <main+0x270>)
 800076a:	885b      	ldrh	r3, [r3, #2]
 800076c:	88ba      	ldrh	r2, [r7, #4]
 800076e:	429a      	cmp	r2, r3
 8000770:	d907      	bls.n	8000782 <main+0xf2>
		  joystickhid.botoes0 |= (uint8_t)(1<<2);	// SETA BOTAO 3
 8000772:	4b65      	ldr	r3, [pc, #404]	; (8000908 <main+0x278>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b62      	ldr	r3, [pc, #392]	; (8000908 <main+0x278>)
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e006      	b.n	8000790 <main+0x100>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<2);	// RESETA BOTAO 3
 8000782:	4b61      	ldr	r3, [pc, #388]	; (8000908 <main+0x278>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f023 0304 	bic.w	r3, r3, #4
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b5e      	ldr	r3, [pc, #376]	; (8000908 <main+0x278>)
 800078e:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis < speed_div_y[0]){  //speed 4
 8000790:	4b5c      	ldr	r3, [pc, #368]	; (8000904 <main+0x274>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	88fa      	ldrh	r2, [r7, #6]
 8000796:	429a      	cmp	r2, r3
 8000798:	d911      	bls.n	80007be <main+0x12e>
 800079a:	4b5a      	ldr	r3, [pc, #360]	; (8000904 <main+0x274>)
 800079c:	885b      	ldrh	r3, [r3, #2]
 800079e:	88fa      	ldrh	r2, [r7, #6]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d20c      	bcs.n	80007be <main+0x12e>
 80007a4:	4b56      	ldr	r3, [pc, #344]	; (8000900 <main+0x270>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	88ba      	ldrh	r2, [r7, #4]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d207      	bcs.n	80007be <main+0x12e>
		  joystickhid.botoes0 |= (uint8_t)(1<<3);	// SETA BOTAO 4
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <main+0x278>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b53      	ldr	r3, [pc, #332]	; (8000908 <main+0x278>)
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	e006      	b.n	80007cc <main+0x13c>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<3);	// RESETA BOTAO 4
 80007be:	4b52      	ldr	r3, [pc, #328]	; (8000908 <main+0x278>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	f023 0308 	bic.w	r3, r3, #8
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <main+0x278>)
 80007ca:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis > speed_div_y[1]){    //speed5
 80007cc:	4b4d      	ldr	r3, [pc, #308]	; (8000904 <main+0x274>)
 80007ce:	885b      	ldrh	r3, [r3, #2]
 80007d0:	88fa      	ldrh	r2, [r7, #6]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d90c      	bls.n	80007f0 <main+0x160>
 80007d6:	4b4a      	ldr	r3, [pc, #296]	; (8000900 <main+0x270>)
 80007d8:	885b      	ldrh	r3, [r3, #2]
 80007da:	88ba      	ldrh	r2, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d907      	bls.n	80007f0 <main+0x160>
		  joystickhid.botoes0 |= (uint8_t)(1<<4);	// SETA BOTAO 5
 80007e0:	4b49      	ldr	r3, [pc, #292]	; (8000908 <main+0x278>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b47      	ldr	r3, [pc, #284]	; (8000908 <main+0x278>)
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	e006      	b.n	80007fe <main+0x16e>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<4);	// RESETA BOTAO 5
 80007f0:	4b45      	ldr	r3, [pc, #276]	; (8000908 <main+0x278>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	f023 0310 	bic.w	r3, r3, #16
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b43      	ldr	r3, [pc, #268]	; (8000908 <main+0x278>)
 80007fc:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0]){    // speed 6
 80007fe:	4b41      	ldr	r3, [pc, #260]	; (8000904 <main+0x274>)
 8000800:	885b      	ldrh	r3, [r3, #2]
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	429a      	cmp	r2, r3
 8000806:	d90c      	bls.n	8000822 <main+0x192>
 8000808:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <main+0x270>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	88ba      	ldrh	r2, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d207      	bcs.n	8000822 <main+0x192>
		  joystickhid.botoes0 |= (uint8_t)(1<<5);	// SETA BOTAO 6
 8000812:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <main+0x278>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	f043 0320 	orr.w	r3, r3, #32
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b3a      	ldr	r3, [pc, #232]	; (8000908 <main+0x278>)
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	e006      	b.n	8000830 <main+0x1a0>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5);	// RESETA BOTAO 6
 8000822:	4b39      	ldr	r3, [pc, #228]	; (8000908 <main+0x278>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f023 0320 	bic.w	r3, r3, #32
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b36      	ldr	r3, [pc, #216]	; (8000908 <main+0x278>)
 800082e:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<0))  {
 8000830:	4b36      	ldr	r3, [pc, #216]	; (800090c <main+0x27c>)
 8000832:	789b      	ldrb	r3, [r3, #2]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d007      	beq.n	800084c <main+0x1bc>
		  joystickhid.botoes0 |= (uint16_t) (1<<6);  // SETA BOTAO 7
 800083c:	4b32      	ldr	r3, [pc, #200]	; (8000908 <main+0x278>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b30      	ldr	r3, [pc, #192]	; (8000908 <main+0x278>)
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	e006      	b.n	800085a <main+0x1ca>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 7
 800084c:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <main+0x278>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <main+0x278>)
 8000858:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<1))  {
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <main+0x27c>)
 800085c:	789b      	ldrb	r3, [r3, #2]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	2b00      	cmp	r3, #0
 8000864:	d007      	beq.n	8000876 <main+0x1e6>
		  joystickhid.botoes0 |= (uint16_t)(1<<7);	// SETA BOTAO 8
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <main+0x278>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <main+0x278>)
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	e006      	b.n	8000884 <main+0x1f4>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 8
 8000876:	4b24      	ldr	r3, [pc, #144]	; (8000908 <main+0x278>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <main+0x278>)
 8000882:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<2))  {
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <main+0x27c>)
 8000886:	789b      	ldrb	r3, [r3, #2]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	2b00      	cmp	r3, #0
 800088e:	d007      	beq.n	80008a0 <main+0x210>
		  joystickhid.botoes1 |= (uint16_t)(1<<0);	// SETA BOTAO 9
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <main+0x278>)
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <main+0x278>)
 800089c:	705a      	strb	r2, [r3, #1]
 800089e:	e006      	b.n	80008ae <main+0x21e>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 9
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <main+0x278>)
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	f023 0301 	bic.w	r3, r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <main+0x278>)
 80008ac:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<3))  {
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <main+0x27c>)
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d007      	beq.n	80008ca <main+0x23a>
		  joystickhid.botoes1 |= (uint16_t)(1<<1);	// SETA BOTAO 10
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <main+0x278>)
 80008bc:	785b      	ldrb	r3, [r3, #1]
 80008be:	f043 0302 	orr.w	r3, r3, #2
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <main+0x278>)
 80008c6:	705a      	strb	r2, [r3, #1]
 80008c8:	e006      	b.n	80008d8 <main+0x248>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 10
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <main+0x278>)
 80008cc:	785b      	ldrb	r3, [r3, #1]
 80008ce:	f023 0302 	bic.w	r3, r3, #2
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <main+0x278>)
 80008d6:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<4))  {
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <main+0x27c>)
 80008da:	789b      	ldrb	r3, [r3, #2]
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d015      	beq.n	8000910 <main+0x280>
		  joystickhid.botoes1 |= (uint16_t)(1<<2);	// SETA BOTAO 11
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <main+0x278>)
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <main+0x278>)
 80008f0:	705a      	strb	r2, [r3, #1]
 80008f2:	e014      	b.n	800091e <main+0x28e>
 80008f4:	20000360 	.word	0x20000360
 80008f8:	200001ec 	.word	0x200001ec
 80008fc:	40010c00 	.word	0x40010c00
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004
 8000908:	20000354 	.word	0x20000354
 800090c:	20000368 	.word	0x20000368
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<2);	// RESETA BOTAO 11
 8000910:	4b63      	ldr	r3, [pc, #396]	; (8000aa0 <main+0x410>)
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	f023 0304 	bic.w	r3, r3, #4
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b61      	ldr	r3, [pc, #388]	; (8000aa0 <main+0x410>)
 800091c:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<5))  {
 800091e:	4b61      	ldr	r3, [pc, #388]	; (8000aa4 <main+0x414>)
 8000920:	789b      	ldrb	r3, [r3, #2]
 8000922:	f003 0320 	and.w	r3, r3, #32
 8000926:	2b00      	cmp	r3, #0
 8000928:	d007      	beq.n	800093a <main+0x2aa>
		  joystickhid.botoes1 |= (uint16_t)(1<<3);	// SETA BOTAO 12
 800092a:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <main+0x410>)
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <main+0x410>)
 8000936:	705a      	strb	r2, [r3, #1]
 8000938:	e006      	b.n	8000948 <main+0x2b8>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<3);	// RESETA BOTAO 12
 800093a:	4b59      	ldr	r3, [pc, #356]	; (8000aa0 <main+0x410>)
 800093c:	785b      	ldrb	r3, [r3, #1]
 800093e:	f023 0308 	bic.w	r3, r3, #8
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b56      	ldr	r3, [pc, #344]	; (8000aa0 <main+0x410>)
 8000946:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<6))  {
 8000948:	4b56      	ldr	r3, [pc, #344]	; (8000aa4 <main+0x414>)
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000950:	2b00      	cmp	r3, #0
 8000952:	d007      	beq.n	8000964 <main+0x2d4>
		  joystickhid.botoes1 |= (uint16_t)(1<<4);	// SETA BOTAO 13
 8000954:	4b52      	ldr	r3, [pc, #328]	; (8000aa0 <main+0x410>)
 8000956:	785b      	ldrb	r3, [r3, #1]
 8000958:	f043 0310 	orr.w	r3, r3, #16
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <main+0x410>)
 8000960:	705a      	strb	r2, [r3, #1]
 8000962:	e006      	b.n	8000972 <main+0x2e2>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<4);	// RESETA BOTAO 13
 8000964:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <main+0x410>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	f023 0310 	bic.w	r3, r3, #16
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b4c      	ldr	r3, [pc, #304]	; (8000aa0 <main+0x410>)
 8000970:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<7))  {
 8000972:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <main+0x414>)
 8000974:	789b      	ldrb	r3, [r3, #2]
 8000976:	b25b      	sxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	da07      	bge.n	800098c <main+0x2fc>
		  joystickhid.botoes1 |= (uint16_t)(1<<5);	// SETA BOTAO 14
 800097c:	4b48      	ldr	r3, [pc, #288]	; (8000aa0 <main+0x410>)
 800097e:	785b      	ldrb	r3, [r3, #1]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <main+0x410>)
 8000988:	705a      	strb	r2, [r3, #1]
 800098a:	e006      	b.n	800099a <main+0x30a>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<5);	// RESETA BOTAO 14
 800098c:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <main+0x410>)
 800098e:	785b      	ldrb	r3, [r3, #1]
 8000990:	f023 0320 	bic.w	r3, r3, #32
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <main+0x410>)
 8000998:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<0))  {
 800099a:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <main+0x414>)
 800099c:	785b      	ldrb	r3, [r3, #1]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d007      	beq.n	80009b6 <main+0x326>
		  joystickhid.botoes1 |= (uint16_t)(1<<6);	// SETA BOTAO 15
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <main+0x410>)
 80009a8:	785b      	ldrb	r3, [r3, #1]
 80009aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <main+0x410>)
 80009b2:	705a      	strb	r2, [r3, #1]
 80009b4:	e006      	b.n	80009c4 <main+0x334>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 15
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <main+0x410>)
 80009b8:	785b      	ldrb	r3, [r3, #1]
 80009ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <main+0x410>)
 80009c2:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<1))  {
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <main+0x414>)
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d007      	beq.n	80009e0 <main+0x350>
		  joystickhid.botoes1 |= (uint32_t)(1<<7);	// SETA BOTAO 16
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <main+0x410>)
 80009d2:	785b      	ldrb	r3, [r3, #1]
 80009d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <main+0x410>)
 80009dc:	705a      	strb	r2, [r3, #1]
 80009de:	e006      	b.n	80009ee <main+0x35e>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 16
 80009e0:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <main+0x410>)
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <main+0x410>)
 80009ec:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<2))  {
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <main+0x414>)
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d007      	beq.n	8000a0a <main+0x37a>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<0);	// SETA BOTAO 17
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <main+0x410>)
 80009fc:	789b      	ldrb	r3, [r3, #2]
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <main+0x410>)
 8000a06:	709a      	strb	r2, [r3, #2]
 8000a08:	e006      	b.n	8000a18 <main+0x388>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 17
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <main+0x410>)
 8000a0c:	789b      	ldrb	r3, [r3, #2]
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <main+0x410>)
 8000a16:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<3))  {
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <main+0x414>)
 8000a1a:	785b      	ldrb	r3, [r3, #1]
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d007      	beq.n	8000a34 <main+0x3a4>
		  joystickhid.botoes_freio0 |= (uint32_t)(1<<1);	// SETA BOTAO 18
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <main+0x410>)
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <main+0x410>)
 8000a30:	709a      	strb	r2, [r3, #2]
 8000a32:	e006      	b.n	8000a42 <main+0x3b2>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 18
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <main+0x410>)
 8000a36:	789b      	ldrb	r3, [r3, #2]
 8000a38:	f023 0302 	bic.w	r3, r3, #2
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <main+0x410>)
 8000a40:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<6) && cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0])  {
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <main+0x414>)
 8000a44:	785b      	ldrb	r3, [r3, #1]
 8000a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d018      	beq.n	8000a80 <main+0x3f0>
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <main+0x418>)
 8000a50:	885b      	ldrh	r3, [r3, #2]
 8000a52:	88fa      	ldrh	r2, [r7, #6]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d913      	bls.n	8000a80 <main+0x3f0>
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <main+0x41c>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	88ba      	ldrh	r2, [r7, #4]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d20e      	bcs.n	8000a80 <main+0x3f0>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<2);	// SETA BOTAO 19 SPEED REVERSA
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <main+0x410>)
 8000a64:	789b      	ldrb	r3, [r3, #2]
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <main+0x410>)
 8000a6e:	709a      	strb	r2, [r3, #2]
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5); 			// RESETA BOTAO SPEED 6 QUANDO ATIVA A REVERSA
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <main+0x410>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	f023 0320 	bic.w	r3, r3, #32
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <main+0x410>)
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	e006      	b.n	8000a8e <main+0x3fe>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint32_t)(1<<2);	// RESETA BOTAO 19 SPEED REVERSA
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <main+0x410>)
 8000a82:	789b      	ldrb	r3, [r3, #2]
 8000a84:	f023 0304 	bic.w	r3, r3, #4
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <main+0x410>)
 8000a8c:	709a      	strb	r2, [r3, #2]
	  //joystickhid.botoes0 = 0xff;
	  //	  joystickhid.botoes1 = 0;
	  	//  joystickhid.botoes_freio0 &= 0b11110000;
	 // }

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 8000a8e:	2208      	movs	r2, #8
 8000a90:	4903      	ldr	r1, [pc, #12]	; (8000aa0 <main+0x410>)
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <main+0x420>)
 8000a94:	f007 fe6a 	bl	800876c <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(1);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f000 fcd7 	bl	800144c <HAL_Delay>
  {
 8000a9e:	e61b      	b.n	80006d8 <main+0x48>
 8000aa0:	20000354 	.word	0x20000354
 8000aa4:	20000368 	.word	0x20000368
 8000aa8:	20000004 	.word	0x20000004
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	2000039c 	.word	0x2000039c

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abe:	2228      	movs	r2, #40	; 0x28
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f009 fbc6 	bl	800a254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af2:	2301      	movs	r3, #1
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 fc3a 	bl	8004384 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b16:	f000 f9ad 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2101      	movs	r1, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fea6 	bl	8004888 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b42:	f000 f997 	bl	8000e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000b46:	2312      	movs	r3, #18
 8000b48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000b4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b4e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b54:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 f82d 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b64:	f000 f986 	bl	8000e74 <Error_Handler>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3750      	adds	r7, #80	; 0x50
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000b82:	4a28      	ldr	r2, [pc, #160]	; (8000c24 <MX_ADC1_Init+0xb4>)
 8000b84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000b9c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ba0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000baa:	2203      	movs	r2, #3
 8000bac:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bae:	481c      	ldr	r0, [pc, #112]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000bb0:	f000 fc70 	bl	8001494 <HAL_ADC_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bba:	f000 f95b 	bl	8000e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000bd0:	f000 fe3e 	bl	8001850 <HAL_ADC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bda:	f000 f94b 	bl	8000e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000bec:	f000 fe30 	bl	8001850 <HAL_ADC_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bf6:	f000 f93d 	bl	8000e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <MX_ADC1_Init+0xb0>)
 8000c08:	f000 fe22 	bl	8001850 <HAL_ADC_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c12:	f000 f92f 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200001ec 	.word	0x200001ec
 8000c24:	40012400 	.word	0x40012400

08000c28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c2e:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <MX_SPI1_Init+0x6c>)
 8000c30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c40:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c5e:	2208      	movs	r2, #8
 8000c60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c76:	220a      	movs	r2, #10
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c7c:	f004 f852 	bl	8004d24 <HAL_SPI_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000c86:	f000 f8f5 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000260 	.word	0x20000260
 8000c94:	40013000 	.word	0x40013000

08000c98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000c9e:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <MX_SPI2_Init+0x6c>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000ce6:	220a      	movs	r2, #10
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_SPI2_Init+0x68>)
 8000cec:	f004 f81a 	bl	8004d24 <HAL_SPI_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000cf6:	f000 f8bd 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200002b8 	.word	0x200002b8
 8000d04:	40003800 	.word	0x40003800

08000d08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <MX_USART1_UART_Init+0x50>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d40:	f004 fc20 	bl	8005584 <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d4a:	f000 f893 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000310 	.word	0x20000310
 8000d58:	40013800 	.word	0x40013800

08000d5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_DMA_Init+0x38>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <MX_DMA_Init+0x38>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6153      	str	r3, [r2, #20]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_DMA_Init+0x38>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	200b      	movs	r0, #11
 8000d80:	f001 f837 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d84:	200b      	movs	r0, #11
 8000d86:	f001 f850 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a2d      	ldr	r2, [pc, #180]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0320 	and.w	r3, r3, #32
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000dfa:	f043 0308 	orr.w	r3, r3, #8
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_GPIO_Init+0xd0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e12:	4816      	ldr	r0, [pc, #88]	; (8000e6c <MX_GPIO_Init+0xd4>)
 8000e14:	f001 fdd9 	bl	80029ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFTER_CS_Pin|LED_PIN_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000e1e:	4814      	ldr	r0, [pc, #80]	; (8000e70 <MX_GPIO_Init+0xd8>)
 8000e20:	f001 fdd3 	bl	80029ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CALIB_BUTTON_Pin */
  GPIO_InitStruct.Pin = CALIB_BUTTON_Pin;
 8000e24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CALIB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <MX_GPIO_Init+0xd4>)
 8000e3e:	f001 fc29 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHIFTER_CS_Pin LED_PIN_Pin */
  GPIO_InitStruct.Pin = SHIFTER_CS_Pin|LED_PIN_Pin;
 8000e42:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_GPIO_Init+0xd8>)
 8000e5c:	f001 fc1a 	bl	8002694 <HAL_GPIO_Init>

}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40011000 	.word	0x40011000
 8000e70:	40010c00 	.word	0x40010c00

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_MspInit+0x40>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_MspInit+0x40>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_MspInit+0x40>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_MspInit+0x40>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_MspInit+0x40>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_MspInit+0x40>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <HAL_ADC_MspInit+0xbc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d149      	bne.n	8000f78 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <HAL_ADC_MspInit+0xc0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <HAL_ADC_MspInit+0xc0>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <HAL_ADC_MspInit+0xc0>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_ADC_MspInit+0xc0>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <HAL_ADC_MspInit+0xc0>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_ADC_MspInit+0xc0>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f14:	2307      	movs	r3, #7
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4819      	ldr	r0, [pc, #100]	; (8000f88 <HAL_ADC_MspInit+0xc4>)
 8000f24:	f001 fbb6 	bl	8002694 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f2a:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f52:	2220      	movs	r2, #32
 8000f54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f5e:	f000 ff7f 	bl	8001e60 <HAL_DMA_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000f68:	f7ff ff84 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f70:	621a      	str	r2, [r3, #32]
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40012400 	.word	0x40012400
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010800 	.word	0x40010800
 8000f8c:	2000021c 	.word	0x2000021c
 8000f90:	40020008 	.word	0x40020008

08000f94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a37      	ldr	r2, [pc, #220]	; (800108c <HAL_SPI_MspInit+0xf8>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d130      	bne.n	8001016 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a35      	ldr	r2, [pc, #212]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 8000fba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b30      	ldr	r3, [pc, #192]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 0318 	add.w	r3, r7, #24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4827      	ldr	r0, [pc, #156]	; (8001094 <HAL_SPI_MspInit+0x100>)
 8000ff8:	f001 fb4c 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ffc:	2340      	movs	r3, #64	; 0x40
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	4619      	mov	r1, r3
 800100e:	4821      	ldr	r0, [pc, #132]	; (8001094 <HAL_SPI_MspInit+0x100>)
 8001010:	f001 fb40 	bl	8002694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001014:	e036      	b.n	8001084 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <HAL_SPI_MspInit+0x104>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d131      	bne.n	8001084 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102a:	61d3      	str	r3, [r2, #28]
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_SPI_MspInit+0xfc>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0318 	add.w	r3, r7, #24
 8001062:	4619      	mov	r1, r3
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <HAL_SPI_MspInit+0x108>)
 8001066:	f001 fb15 	bl	8002694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800106a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	4619      	mov	r1, r3
 800107e:	4807      	ldr	r0, [pc, #28]	; (800109c <HAL_SPI_MspInit+0x108>)
 8001080:	f001 fb08 	bl	8002694 <HAL_GPIO_Init>
}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40013000 	.word	0x40013000
 8001090:	40021000 	.word	0x40021000
 8001094:	40010800 	.word	0x40010800
 8001098:	40003800 	.word	0x40003800
 800109c:	40010c00 	.word	0x40010c00

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_UART_MspInit+0x8c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d131      	bne.n	8001124 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_UART_MspInit+0x90>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <HAL_UART_MspInit+0x90>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_UART_MspInit+0x90>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_UART_MspInit+0x90>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_UART_MspInit+0x90>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_UART_MspInit+0x90>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4619      	mov	r1, r3
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <HAL_UART_MspInit+0x94>)
 8001106:	f001 fac5 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800110a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_UART_MspInit+0x94>)
 8001120:	f001 fab8 	bl	8002694 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40013800 	.word	0x40013800
 8001130:	40021000 	.word	0x40021000
 8001134:	40010800 	.word	0x40010800

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800113c:	e7fe      	b.n	800113c <NMI_Handler+0x4>

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117e:	f000 f949 	bl	8001414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <DMA1_Channel1_IRQHandler+0x10>)
 800118e:	f000 ff21 	bl	8001fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000021c 	.word	0x2000021c

0800119c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80011a2:	f001 fd74 	bl	8002c8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000860 	.word	0x20000860

080011b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	return 1;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <_kill>:

int _kill(int pid, int sig)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011c8:	f009 f81a 	bl	800a200 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2216      	movs	r2, #22
 80011d0:	601a      	str	r2, [r3, #0]
	return -1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_exit>:

void _exit (int status)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011e6:	f04f 31ff 	mov.w	r1, #4294967295
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffe7 	bl	80011be <_kill>
	while (1) {}		/* Make sure we hang here */
 80011f0:	e7fe      	b.n	80011f0 <_exit+0x12>

080011f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e00a      	b.n	800121a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001204:	f3af 8000 	nop.w
 8001208:	4601      	mov	r1, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	60ba      	str	r2, [r7, #8]
 8001210:	b2ca      	uxtb	r2, r1
 8001212:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf0      	blt.n	8001204 <_read+0x12>
	}

return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e009      	b.n	8001252 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	60ba      	str	r2, [r7, #8]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	dbf1      	blt.n	800123e <_write+0x12>
	}
	return len;
 800125a:	687b      	ldr	r3, [r7, #4]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_close>:

int _close(int file)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	return -1;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800128a:	605a      	str	r2, [r3, #4]
	return 0;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <_isatty>:

int _isatty(int file)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	return 1;
 80012a0:	2301      	movs	r3, #1
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
	return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012cc:	4a14      	ldr	r2, [pc, #80]	; (8001320 <_sbrk+0x5c>)
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <_sbrk+0x60>)
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <_sbrk+0x64>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <_sbrk+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d207      	bcs.n	8001304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f4:	f008 ff84 	bl	800a200 <__errno>
 80012f8:	4603      	mov	r3, r0
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e009      	b.n	8001318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <_sbrk+0x64>)
 8001314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20005000 	.word	0x20005000
 8001324:	00000400 	.word	0x00000400
 8001328:	2000036c 	.word	0x2000036c
 800132c:	20000bb8 	.word	0x20000bb8

08001330 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	; (8001374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001362:	f7ff ffe5 	bl	8001330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001366:	f008 ff51 	bl	800a20c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800136a:	f7ff f991 	bl	8000690 <main>
  bx lr
 800136e:	4770      	bx	lr
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001378:	0800badc 	.word	0x0800badc
  ldr r2, =_sbss
 800137c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001380:	20000bb4 	.word	0x20000bb4

08001384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC1_2_IRQHandler>
	...

08001388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_Init+0x28>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_Init+0x28>)
 8001392:	f043 0310 	orr.w	r3, r3, #16
 8001396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 fd1f 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139e:	200f      	movs	r0, #15
 80013a0:	f000 f808 	bl	80013b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a4:	f7ff fd6c 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40022000 	.word	0x40022000

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_InitTick+0x54>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_InitTick+0x58>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fd37 	bl	8001e46 <HAL_SYSTICK_Config>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e00e      	b.n	8001400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d80a      	bhi.n	80013fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e8:	2200      	movs	r2, #0
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f000 fcff 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <HAL_InitTick+0x5c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e000      	b.n	8001400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000000c 	.word	0x2000000c
 800140c:	20000014 	.word	0x20000014
 8001410:	20000010 	.word	0x20000010

08001414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_IncTick+0x1c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_IncTick+0x20>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a03      	ldr	r2, [pc, #12]	; (8001434 <HAL_IncTick+0x20>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000014 	.word	0x20000014
 8001434:	20000370 	.word	0x20000370

08001438 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <HAL_GetTick+0x10>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000370 	.word	0x20000370

0800144c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff fff0 	bl	8001438 <HAL_GetTick>
 8001458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d005      	beq.n	8001472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_Delay+0x44>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001472:	bf00      	nop
 8001474:	f7ff ffe0 	bl	8001438 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d8f7      	bhi.n	8001474 <HAL_Delay+0x28>
  {
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000014 	.word	0x20000014

08001494 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0be      	b.n	8001634 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fcf6 	bl	8000ec4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fb0b 	bl	8001af4 <ADC_ConversionStop_Disable>
 80014de:	4603      	mov	r3, r0
 80014e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 8099 	bne.w	8001622 <HAL_ADC_Init+0x18e>
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 8095 	bne.w	8001622 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001500:	f023 0302 	bic.w	r3, r3, #2
 8001504:	f043 0202 	orr.w	r2, r3, #2
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001514:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7b1b      	ldrb	r3, [r3, #12]
 800151a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800151c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	4313      	orrs	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800152c:	d003      	beq.n	8001536 <HAL_ADC_Init+0xa2>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d102      	bne.n	800153c <HAL_ADC_Init+0xa8>
 8001536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153a:	e000      	b.n	800153e <HAL_ADC_Init+0xaa>
 800153c:	2300      	movs	r3, #0
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7d1b      	ldrb	r3, [r3, #20]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d119      	bne.n	8001580 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7b1b      	ldrb	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d109      	bne.n	8001568 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	3b01      	subs	r3, #1
 800155a:	035a      	lsls	r2, r3, #13
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e00b      	b.n	8001580 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	f043 0220 	orr.w	r2, r3, #32
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_ADC_Init+0x1a8>)
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015b0:	d003      	beq.n	80015ba <HAL_ADC_Init+0x126>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d104      	bne.n	80015c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	3b01      	subs	r3, #1
 80015c0:	051b      	lsls	r3, r3, #20
 80015c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_ADC_Init+0x1ac>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d10b      	bne.n	8001600 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	f023 0303 	bic.w	r3, r3, #3
 80015f6:	f043 0201 	orr.w	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015fe:	e018      	b.n	8001632 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	f023 0312 	bic.w	r3, r3, #18
 8001608:	f043 0210 	orr.w	r2, r3, #16
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	f043 0201 	orr.w	r2, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001620:	e007      	b.n	8001632 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	f043 0210 	orr.w	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001632:	7dfb      	ldrb	r3, [r7, #23]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	ffe1f7fd 	.word	0xffe1f7fd
 8001640:	ff1f0efe 	.word	0xff1f0efe

08001644 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a64      	ldr	r2, [pc, #400]	; (80017ec <HAL_ADC_Start_DMA+0x1a8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d004      	beq.n	8001668 <HAL_ADC_Start_DMA+0x24>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a63      	ldr	r2, [pc, #396]	; (80017f0 <HAL_ADC_Start_DMA+0x1ac>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d106      	bne.n	8001676 <HAL_ADC_Start_DMA+0x32>
 8001668:	4b60      	ldr	r3, [pc, #384]	; (80017ec <HAL_ADC_Start_DMA+0x1a8>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 80b3 	bne.w	80017dc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_ADC_Start_DMA+0x40>
 8001680:	2302      	movs	r3, #2
 8001682:	e0ae      	b.n	80017e2 <HAL_ADC_Start_DMA+0x19e>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f9d7 	bl	8001a40 <ADC_Enable>
 8001692:	4603      	mov	r3, r0
 8001694:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 809a 	bne.w	80017d2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a4e      	ldr	r2, [pc, #312]	; (80017f0 <HAL_ADC_Start_DMA+0x1ac>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d105      	bne.n	80016c8 <HAL_ADC_Start_DMA+0x84>
 80016bc:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <HAL_ADC_Start_DMA+0x1a8>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d115      	bne.n	80016f4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d026      	beq.n	8001730 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016f2:	e01d      	b.n	8001730 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a39      	ldr	r2, [pc, #228]	; (80017ec <HAL_ADC_Start_DMA+0x1a8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d004      	beq.n	8001714 <HAL_ADC_Start_DMA+0xd0>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a38      	ldr	r2, [pc, #224]	; (80017f0 <HAL_ADC_Start_DMA+0x1ac>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d10d      	bne.n	8001730 <HAL_ADC_Start_DMA+0xec>
 8001714:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_ADC_Start_DMA+0x1a8>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001728:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	f023 0206 	bic.w	r2, r3, #6
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
 8001748:	e002      	b.n	8001750 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <HAL_ADC_Start_DMA+0x1b0>)
 800175e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <HAL_ADC_Start_DMA+0x1b4>)
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a23      	ldr	r2, [pc, #140]	; (80017fc <HAL_ADC_Start_DMA+0x1b8>)
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0202 	mvn.w	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001788:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a18      	ldr	r0, [r3, #32]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	334c      	adds	r3, #76	; 0x4c
 8001794:	4619      	mov	r1, r3
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f000 fbbb 	bl	8001f14 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017ac:	d108      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80017bc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017be:	e00f      	b.n	80017e0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80017ce:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017d0:	e006      	b.n	80017e0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80017da:	e001      	b.n	80017e0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40012400 	.word	0x40012400
 80017f0:	40012800 	.word	0x40012800
 80017f4:	08001b77 	.word	0x08001b77
 80017f8:	08001bf3 	.word	0x08001bf3
 80017fc:	08001c0f 	.word	0x08001c0f

08001800 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x20>
 800186c:	2302      	movs	r3, #2
 800186e:	e0dc      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x1da>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b06      	cmp	r3, #6
 800187e:	d81c      	bhi.n	80018ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	3b05      	subs	r3, #5
 8001892:	221f      	movs	r2, #31
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	4019      	ands	r1, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	3b05      	subs	r3, #5
 80018ac:	fa00 f203 	lsl.w	r2, r0, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
 80018b8:	e03c      	b.n	8001934 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d81c      	bhi.n	80018fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	3b23      	subs	r3, #35	; 0x23
 80018d4:	221f      	movs	r2, #31
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	4019      	ands	r1, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b23      	subs	r3, #35	; 0x23
 80018ee:	fa00 f203 	lsl.w	r2, r0, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
 80018fa:	e01b      	b.n	8001934 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b41      	subs	r3, #65	; 0x41
 800190e:	221f      	movs	r2, #31
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	4019      	ands	r1, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	3b41      	subs	r3, #65	; 0x41
 8001928:	fa00 f203 	lsl.w	r2, r0, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b09      	cmp	r3, #9
 800193a:	d91c      	bls.n	8001976 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68d9      	ldr	r1, [r3, #12]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	3b1e      	subs	r3, #30
 800194e:	2207      	movs	r2, #7
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	4019      	ands	r1, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6898      	ldr	r0, [r3, #8]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	3b1e      	subs	r3, #30
 8001968:	fa00 f203 	lsl.w	r2, r0, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	e019      	b.n	80019aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6919      	ldr	r1, [r3, #16]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	2207      	movs	r2, #7
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	4019      	ands	r1, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6898      	ldr	r0, [r3, #8]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	fa00 f203 	lsl.w	r2, r0, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b10      	cmp	r3, #16
 80019b0:	d003      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019b6:	2b11      	cmp	r3, #17
 80019b8:	d132      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_ADC_ConfigChannel+0x1e4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d125      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d126      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019e0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d11a      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <HAL_ADC_ConfigChannel+0x1e8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <HAL_ADC_ConfigChannel+0x1ec>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0c9a      	lsrs	r2, r3, #18
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a00:	e002      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f9      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x1b2>
 8001a0e:	e007      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f043 0220 	orr.w	r2, r3, #32
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40012400 	.word	0x40012400
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	431bde83 	.word	0x431bde83

08001a40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d040      	beq.n	8001ae0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <ADC_Enable+0xac>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <ADC_Enable+0xb0>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9b      	lsrs	r3, r3, #18
 8001a7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a7c:	e002      	b.n	8001a84 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a8a:	f7ff fcd5 	bl	8001438 <HAL_GetTick>
 8001a8e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a90:	e01f      	b.n	8001ad2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a92:	f7ff fcd1 	bl	8001438 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d918      	bls.n	8001ad2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d011      	beq.n	8001ad2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	f043 0210 	orr.w	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e007      	b.n	8001ae2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d1d8      	bne.n	8001a92 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000000c 	.word	0x2000000c
 8001af0:	431bde83 	.word	0x431bde83

08001af4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d12e      	bne.n	8001b6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0201 	bic.w	r2, r2, #1
 8001b1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b1e:	f7ff fc8b 	bl	8001438 <HAL_GetTick>
 8001b22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b24:	e01b      	b.n	8001b5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b26:	f7ff fc87 	bl	8001438 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d914      	bls.n	8001b5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10d      	bne.n	8001b5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	f043 0210 	orr.w	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	f043 0201 	orr.w	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e007      	b.n	8001b6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d0dc      	beq.n	8001b26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d127      	bne.n	8001be0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ba6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001baa:	d115      	bne.n	8001bd8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d111      	bne.n	8001bd8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7ff fe1d 	bl	8001818 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001bde:	e004      	b.n	8001bea <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	4798      	blx	r3
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff fe12 	bl	800182a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	f043 0204 	orr.w	r2, r3, #4
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f7ff fe01 	bl	800183c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4906      	ldr	r1, [pc, #24]	; (8001cdc <__NVIC_EnableIRQ+0x34>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff90 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff2d 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff42 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff90 	bl	8001d34 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5f 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff35 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e043      	b.n	8001efe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_DMA_Init+0xa8>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_DMA_Init+0xac>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	009a      	lsls	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_DMA_Init+0xb0>)
 8001e92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001eaa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001eae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	bffdfff8 	.word	0xbffdfff8
 8001f0c:	cccccccd 	.word	0xcccccccd
 8001f10:	40020000 	.word	0x40020000

08001f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_DMA_Start_IT+0x20>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e04a      	b.n	8001fca <HAL_DMA_Start_IT+0xb6>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d13a      	bne.n	8001fbc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f938 	bl	80021e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 020e 	orr.w	r2, r2, #14
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e00f      	b.n	8001faa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0204 	bic.w	r2, r2, #4
 8001f98:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 020a 	orr.w	r2, r2, #10
 8001fa8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e005      	b.n	8001fc8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d04f      	beq.n	800209c <HAL_DMA_IRQHandler+0xc8>
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d04a      	beq.n	800209c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b00      	cmp	r3, #0
 8002012:	d107      	bne.n	8002024 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0204 	bic.w	r2, r2, #4
 8002022:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a66      	ldr	r2, [pc, #408]	; (80021c4 <HAL_DMA_IRQHandler+0x1f0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d029      	beq.n	8002082 <HAL_DMA_IRQHandler+0xae>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a65      	ldr	r2, [pc, #404]	; (80021c8 <HAL_DMA_IRQHandler+0x1f4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d022      	beq.n	800207e <HAL_DMA_IRQHandler+0xaa>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a63      	ldr	r2, [pc, #396]	; (80021cc <HAL_DMA_IRQHandler+0x1f8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01a      	beq.n	8002078 <HAL_DMA_IRQHandler+0xa4>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a62      	ldr	r2, [pc, #392]	; (80021d0 <HAL_DMA_IRQHandler+0x1fc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d012      	beq.n	8002072 <HAL_DMA_IRQHandler+0x9e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a60      	ldr	r2, [pc, #384]	; (80021d4 <HAL_DMA_IRQHandler+0x200>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00a      	beq.n	800206c <HAL_DMA_IRQHandler+0x98>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a5f      	ldr	r2, [pc, #380]	; (80021d8 <HAL_DMA_IRQHandler+0x204>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d102      	bne.n	8002066 <HAL_DMA_IRQHandler+0x92>
 8002060:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002064:	e00e      	b.n	8002084 <HAL_DMA_IRQHandler+0xb0>
 8002066:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800206a:	e00b      	b.n	8002084 <HAL_DMA_IRQHandler+0xb0>
 800206c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002070:	e008      	b.n	8002084 <HAL_DMA_IRQHandler+0xb0>
 8002072:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002076:	e005      	b.n	8002084 <HAL_DMA_IRQHandler+0xb0>
 8002078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800207c:	e002      	b.n	8002084 <HAL_DMA_IRQHandler+0xb0>
 800207e:	2340      	movs	r3, #64	; 0x40
 8002080:	e000      	b.n	8002084 <HAL_DMA_IRQHandler+0xb0>
 8002082:	2304      	movs	r3, #4
 8002084:	4a55      	ldr	r2, [pc, #340]	; (80021dc <HAL_DMA_IRQHandler+0x208>)
 8002086:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8094 	beq.w	80021ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800209a:	e08e      	b.n	80021ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2202      	movs	r2, #2
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d056      	beq.n	800215a <HAL_DMA_IRQHandler+0x186>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d051      	beq.n	800215a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10b      	bne.n	80020dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 020a 	bic.w	r2, r2, #10
 80020d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a38      	ldr	r2, [pc, #224]	; (80021c4 <HAL_DMA_IRQHandler+0x1f0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d029      	beq.n	800213a <HAL_DMA_IRQHandler+0x166>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a37      	ldr	r2, [pc, #220]	; (80021c8 <HAL_DMA_IRQHandler+0x1f4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d022      	beq.n	8002136 <HAL_DMA_IRQHandler+0x162>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a35      	ldr	r2, [pc, #212]	; (80021cc <HAL_DMA_IRQHandler+0x1f8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01a      	beq.n	8002130 <HAL_DMA_IRQHandler+0x15c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <HAL_DMA_IRQHandler+0x1fc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d012      	beq.n	800212a <HAL_DMA_IRQHandler+0x156>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a32      	ldr	r2, [pc, #200]	; (80021d4 <HAL_DMA_IRQHandler+0x200>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00a      	beq.n	8002124 <HAL_DMA_IRQHandler+0x150>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a31      	ldr	r2, [pc, #196]	; (80021d8 <HAL_DMA_IRQHandler+0x204>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d102      	bne.n	800211e <HAL_DMA_IRQHandler+0x14a>
 8002118:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800211c:	e00e      	b.n	800213c <HAL_DMA_IRQHandler+0x168>
 800211e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002122:	e00b      	b.n	800213c <HAL_DMA_IRQHandler+0x168>
 8002124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002128:	e008      	b.n	800213c <HAL_DMA_IRQHandler+0x168>
 800212a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800212e:	e005      	b.n	800213c <HAL_DMA_IRQHandler+0x168>
 8002130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002134:	e002      	b.n	800213c <HAL_DMA_IRQHandler+0x168>
 8002136:	2320      	movs	r3, #32
 8002138:	e000      	b.n	800213c <HAL_DMA_IRQHandler+0x168>
 800213a:	2302      	movs	r3, #2
 800213c:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_DMA_IRQHandler+0x208>)
 800213e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	d034      	beq.n	80021ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002158:	e02f      	b.n	80021ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2208      	movs	r2, #8
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d028      	beq.n	80021bc <HAL_DMA_IRQHandler+0x1e8>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d023      	beq.n	80021bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 020e 	bic.w	r2, r2, #14
 8002182:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218c:	2101      	movs	r1, #1
 800218e:	fa01 f202 	lsl.w	r2, r1, r2
 8002192:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
    }
  }
  return;
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
}
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40020008 	.word	0x40020008
 80021c8:	4002001c 	.word	0x4002001c
 80021cc:	40020030 	.word	0x40020030
 80021d0:	40020044 	.word	0x40020044
 80021d4:	40020058 	.word	0x40020058
 80021d8:	4002006c 	.word	0x4002006c
 80021dc:	40020000 	.word	0x40020000

080021e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b10      	cmp	r3, #16
 800220c:	d108      	bne.n	8002220 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800221e:	e007      	b.n	8002230 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	60da      	str	r2, [r3, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
	...

0800223c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_FLASH_Program+0xd8>)
 8002258:	7e1b      	ldrb	r3, [r3, #24]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_FLASH_Program+0x26>
 800225e:	2302      	movs	r3, #2
 8002260:	e054      	b.n	800230c <HAL_FLASH_Program+0xd0>
 8002262:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <HAL_FLASH_Program+0xd8>)
 8002264:	2201      	movs	r2, #1
 8002266:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002268:	f24c 3050 	movw	r0, #50000	; 0xc350
 800226c:	f000 f8d4 	bl	8002418 <FLASH_WaitForLastOperation>
 8002270:	4603      	mov	r3, r0
 8002272:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d144      	bne.n	8002304 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d102      	bne.n	8002286 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002280:	2301      	movs	r3, #1
 8002282:	757b      	strb	r3, [r7, #21]
 8002284:	e007      	b.n	8002296 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d102      	bne.n	8002292 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800228c:	2302      	movs	r3, #2
 800228e:	757b      	strb	r3, [r7, #21]
 8002290:	e001      	b.n	8002296 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002292:	2304      	movs	r3, #4
 8002294:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002296:	2300      	movs	r3, #0
 8002298:	75bb      	strb	r3, [r7, #22]
 800229a:	e02d      	b.n	80022f8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800229c:	7dbb      	ldrb	r3, [r7, #22]
 800229e:	005a      	lsls	r2, r3, #1
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	eb02 0c03 	add.w	ip, r2, r3
 80022a6:	7dbb      	ldrb	r3, [r7, #22]
 80022a8:	0119      	lsls	r1, r3, #4
 80022aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022ae:	f1c1 0620 	rsb	r6, r1, #32
 80022b2:	f1a1 0020 	sub.w	r0, r1, #32
 80022b6:	fa22 f401 	lsr.w	r4, r2, r1
 80022ba:	fa03 f606 	lsl.w	r6, r3, r6
 80022be:	4334      	orrs	r4, r6
 80022c0:	fa23 f000 	lsr.w	r0, r3, r0
 80022c4:	4304      	orrs	r4, r0
 80022c6:	fa23 f501 	lsr.w	r5, r3, r1
 80022ca:	b2a3      	uxth	r3, r4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4660      	mov	r0, ip
 80022d0:	f000 f886 	bl	80023e0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80022d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022d8:	f000 f89e 	bl	8002418 <FLASH_WaitForLastOperation>
 80022dc:	4603      	mov	r3, r0
 80022de:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_FLASH_Program+0xdc>)
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <HAL_FLASH_Program+0xdc>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80022f2:	7dbb      	ldrb	r3, [r7, #22]
 80022f4:	3301      	adds	r3, #1
 80022f6:	75bb      	strb	r3, [r7, #22]
 80022f8:	7dba      	ldrb	r2, [r7, #22]
 80022fa:	7d7b      	ldrb	r3, [r7, #21]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d3cd      	bcc.n	800229c <HAL_FLASH_Program+0x60>
 8002300:	e000      	b.n	8002304 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002302:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_FLASH_Program+0xd8>)
 8002306:	2200      	movs	r2, #0
 8002308:	761a      	strb	r2, [r3, #24]

  return status;
 800230a:	7dfb      	ldrb	r3, [r7, #23]
}
 800230c:	4618      	mov	r0, r3
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002314:	20000378 	.word	0x20000378
 8002318:	40022000 	.word	0x40022000

0800231c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_FLASH_Unlock+0x40>)
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_FLASH_Unlock+0x40>)
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_FLASH_Unlock+0x44>)
 8002336:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_FLASH_Unlock+0x40>)
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <HAL_FLASH_Unlock+0x48>)
 800233c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <HAL_FLASH_Unlock+0x40>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800234e:	79fb      	ldrb	r3, [r7, #7]
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40022000 	.word	0x40022000
 8002360:	45670123 	.word	0x45670123
 8002364:	cdef89ab 	.word	0xcdef89ab

08002368 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_FLASH_Lock+0x1c>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	4a04      	ldr	r2, [pc, #16]	; (8002384 <HAL_FLASH_Lock+0x1c>)
 8002372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002376:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40022000 	.word	0x40022000

08002388 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_FLASH_OB_Unlock+0x2c>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_FLASH_OB_Unlock+0x2c>)
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_FLASH_OB_Unlock+0x30>)
 800239c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_FLASH_OB_Unlock+0x2c>)
 80023a0:	4a06      	ldr	r2, [pc, #24]	; (80023bc <HAL_FLASH_OB_Unlock+0x34>)
 80023a2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40022000 	.word	0x40022000
 80023b8:	45670123 	.word	0x45670123
 80023bc:	cdef89ab 	.word	0xcdef89ab

080023c0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_FLASH_OB_Lock+0x1c>)
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_FLASH_OB_Lock+0x1c>)
 80023ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023ce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40022000 	.word	0x40022000

080023e0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <FLASH_Program_HalfWord+0x30>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <FLASH_Program_HalfWord+0x34>)
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	4a07      	ldr	r2, [pc, #28]	; (8002414 <FLASH_Program_HalfWord+0x34>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	887a      	ldrh	r2, [r7, #2]
 8002402:	801a      	strh	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000378 	.word	0x20000378
 8002414:	40022000 	.word	0x40022000

08002418 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff f80a 	bl	8001438 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002426:	e010      	b.n	800244a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d00c      	beq.n	800244a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <FLASH_WaitForLastOperation+0x2e>
 8002436:	f7fe ffff 	bl	8001438 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	d201      	bcs.n	800244a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e025      	b.n	8002496 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <FLASH_WaitForLastOperation+0x88>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1e8      	bne.n	8002428 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <FLASH_WaitForLastOperation+0x88>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <FLASH_WaitForLastOperation+0x88>)
 8002464:	2220      	movs	r2, #32
 8002466:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <FLASH_WaitForLastOperation+0x88>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <FLASH_WaitForLastOperation+0x88>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <FLASH_WaitForLastOperation+0x88>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800248c:	f000 f80a 	bl	80024a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40022000 	.word	0x40022000

080024a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <FLASH_SetErrorCode+0x98>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024ba:	4b21      	ldr	r3, [pc, #132]	; (8002540 <FLASH_SetErrorCode+0x9c>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	4a1f      	ldr	r2, [pc, #124]	; (8002540 <FLASH_SetErrorCode+0x9c>)
 80024c4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f043 0310 	orr.w	r3, r3, #16
 80024cc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <FLASH_SetErrorCode+0x98>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <FLASH_SetErrorCode+0x9c>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	4a17      	ldr	r2, [pc, #92]	; (8002540 <FLASH_SetErrorCode+0x9c>)
 80024e4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <FLASH_SetErrorCode+0x98>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <FLASH_SetErrorCode+0x9c>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <FLASH_SetErrorCode+0x9c>)
 8002504:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <FLASH_SetErrorCode+0x98>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a0c      	ldr	r2, [pc, #48]	; (800253c <FLASH_SetErrorCode+0x98>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f240 1201 	movw	r2, #257	; 0x101
 8002518:	4293      	cmp	r3, r2
 800251a:	d106      	bne.n	800252a <FLASH_SetErrorCode+0x86>
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <FLASH_SetErrorCode+0x98>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	4a06      	ldr	r2, [pc, #24]	; (800253c <FLASH_SetErrorCode+0x98>)
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	61d3      	str	r3, [r2, #28]
}  
 8002528:	e002      	b.n	8002530 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <FLASH_SetErrorCode+0x98>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	60d3      	str	r3, [r2, #12]
}  
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40022000 	.word	0x40022000
 8002540:	20000378 	.word	0x20000378

08002544 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002556:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <HAL_FLASHEx_Erase+0xd0>)
 8002558:	7e1b      	ldrb	r3, [r3, #24]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_FLASHEx_Erase+0x1e>
 800255e:	2302      	movs	r3, #2
 8002560:	e053      	b.n	800260a <HAL_FLASHEx_Erase+0xc6>
 8002562:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <HAL_FLASHEx_Erase+0xd0>)
 8002564:	2201      	movs	r2, #1
 8002566:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d116      	bne.n	800259e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002570:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002574:	f7ff ff50 	bl	8002418 <FLASH_WaitForLastOperation>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d141      	bne.n	8002602 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800257e:	2001      	movs	r0, #1
 8002580:	f000 f84c 	bl	800261c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002584:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002588:	f7ff ff46 	bl	8002418 <FLASH_WaitForLastOperation>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <HAL_FLASHEx_Erase+0xd4>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	4a20      	ldr	r2, [pc, #128]	; (8002618 <HAL_FLASHEx_Erase+0xd4>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6113      	str	r3, [r2, #16]
 800259c:	e031      	b.n	8002602 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800259e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025a2:	f7ff ff39 	bl	8002418 <FLASH_WaitForLastOperation>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d12a      	bne.n	8002602 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f04f 32ff 	mov.w	r2, #4294967295
 80025b2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	e019      	b.n	80025f0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80025bc:	68b8      	ldr	r0, [r7, #8]
 80025be:	f000 f849 	bl	8002654 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025c6:	f7ff ff27 	bl	8002418 <FLASH_WaitForLastOperation>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_FLASHEx_Erase+0xd4>)
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <HAL_FLASHEx_Erase+0xd4>)
 80025d4:	f023 0302 	bic.w	r3, r3, #2
 80025d8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	601a      	str	r2, [r3, #0]
            break;
 80025e6:	e00c      	b.n	8002602 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ee:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	029a      	lsls	r2, r3, #10
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3dc      	bcc.n	80025bc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <HAL_FLASHEx_Erase+0xd0>)
 8002604:	2200      	movs	r2, #0
 8002606:	761a      	strb	r2, [r3, #24]

  return status;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000378 	.word	0x20000378
 8002618:	40022000 	.word	0x40022000

0800261c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <FLASH_MassErase+0x30>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <FLASH_MassErase+0x34>)
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <FLASH_MassErase+0x34>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <FLASH_MassErase+0x34>)
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <FLASH_MassErase+0x34>)
 800263c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002640:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	20000378 	.word	0x20000378
 8002650:	40022000 	.word	0x40022000

08002654 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <FLASH_PageErase+0x38>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <FLASH_PageErase+0x3c>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <FLASH_PageErase+0x3c>)
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <FLASH_PageErase+0x3c>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <FLASH_PageErase+0x3c>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	4a05      	ldr	r2, [pc, #20]	; (8002690 <FLASH_PageErase+0x3c>)
 800267a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800267e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000378 	.word	0x20000378
 8002690:	40022000 	.word	0x40022000

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b08b      	sub	sp, #44	; 0x2c
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a6:	e169      	b.n	800297c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a8:	2201      	movs	r2, #1
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f040 8158 	bne.w	8002976 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4a9a      	ldr	r2, [pc, #616]	; (8002934 <HAL_GPIO_Init+0x2a0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d05e      	beq.n	800278e <HAL_GPIO_Init+0xfa>
 80026d0:	4a98      	ldr	r2, [pc, #608]	; (8002934 <HAL_GPIO_Init+0x2a0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d875      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 80026d6:	4a98      	ldr	r2, [pc, #608]	; (8002938 <HAL_GPIO_Init+0x2a4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d058      	beq.n	800278e <HAL_GPIO_Init+0xfa>
 80026dc:	4a96      	ldr	r2, [pc, #600]	; (8002938 <HAL_GPIO_Init+0x2a4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d86f      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 80026e2:	4a96      	ldr	r2, [pc, #600]	; (800293c <HAL_GPIO_Init+0x2a8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d052      	beq.n	800278e <HAL_GPIO_Init+0xfa>
 80026e8:	4a94      	ldr	r2, [pc, #592]	; (800293c <HAL_GPIO_Init+0x2a8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d869      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 80026ee:	4a94      	ldr	r2, [pc, #592]	; (8002940 <HAL_GPIO_Init+0x2ac>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d04c      	beq.n	800278e <HAL_GPIO_Init+0xfa>
 80026f4:	4a92      	ldr	r2, [pc, #584]	; (8002940 <HAL_GPIO_Init+0x2ac>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d863      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 80026fa:	4a92      	ldr	r2, [pc, #584]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d046      	beq.n	800278e <HAL_GPIO_Init+0xfa>
 8002700:	4a90      	ldr	r2, [pc, #576]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d85d      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 8002706:	2b12      	cmp	r3, #18
 8002708:	d82a      	bhi.n	8002760 <HAL_GPIO_Init+0xcc>
 800270a:	2b12      	cmp	r3, #18
 800270c:	d859      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 800270e:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <HAL_GPIO_Init+0x80>)
 8002710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002714:	0800278f 	.word	0x0800278f
 8002718:	08002769 	.word	0x08002769
 800271c:	0800277b 	.word	0x0800277b
 8002720:	080027bd 	.word	0x080027bd
 8002724:	080027c3 	.word	0x080027c3
 8002728:	080027c3 	.word	0x080027c3
 800272c:	080027c3 	.word	0x080027c3
 8002730:	080027c3 	.word	0x080027c3
 8002734:	080027c3 	.word	0x080027c3
 8002738:	080027c3 	.word	0x080027c3
 800273c:	080027c3 	.word	0x080027c3
 8002740:	080027c3 	.word	0x080027c3
 8002744:	080027c3 	.word	0x080027c3
 8002748:	080027c3 	.word	0x080027c3
 800274c:	080027c3 	.word	0x080027c3
 8002750:	080027c3 	.word	0x080027c3
 8002754:	080027c3 	.word	0x080027c3
 8002758:	08002771 	.word	0x08002771
 800275c:	08002785 	.word	0x08002785
 8002760:	4a79      	ldr	r2, [pc, #484]	; (8002948 <HAL_GPIO_Init+0x2b4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002766:	e02c      	b.n	80027c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	623b      	str	r3, [r7, #32]
          break;
 800276e:	e029      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	3304      	adds	r3, #4
 8002776:	623b      	str	r3, [r7, #32]
          break;
 8002778:	e024      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	3308      	adds	r3, #8
 8002780:	623b      	str	r3, [r7, #32]
          break;
 8002782:	e01f      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	330c      	adds	r3, #12
 800278a:	623b      	str	r3, [r7, #32]
          break;
 800278c:	e01a      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002796:	2304      	movs	r3, #4
 8002798:	623b      	str	r3, [r7, #32]
          break;
 800279a:	e013      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a4:	2308      	movs	r3, #8
 80027a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	611a      	str	r2, [r3, #16]
          break;
 80027ae:	e009      	b.n	80027c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b0:	2308      	movs	r3, #8
 80027b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	615a      	str	r2, [r3, #20]
          break;
 80027ba:	e003      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
          break;
 80027c0:	e000      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          break;
 80027c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2bff      	cmp	r3, #255	; 0xff
 80027c8:	d801      	bhi.n	80027ce <HAL_GPIO_Init+0x13a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	e001      	b.n	80027d2 <HAL_GPIO_Init+0x13e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2bff      	cmp	r3, #255	; 0xff
 80027d8:	d802      	bhi.n	80027e0 <HAL_GPIO_Init+0x14c>
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	e002      	b.n	80027e6 <HAL_GPIO_Init+0x152>
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	3b08      	subs	r3, #8
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	210f      	movs	r1, #15
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	401a      	ands	r2, r3
 80027f8:	6a39      	ldr	r1, [r7, #32]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	431a      	orrs	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80b1 	beq.w	8002976 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002814:	4b4d      	ldr	r3, [pc, #308]	; (800294c <HAL_GPIO_Init+0x2b8>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4a4c      	ldr	r2, [pc, #304]	; (800294c <HAL_GPIO_Init+0x2b8>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6193      	str	r3, [r2, #24]
 8002820:	4b4a      	ldr	r3, [pc, #296]	; (800294c <HAL_GPIO_Init+0x2b8>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800282c:	4a48      	ldr	r2, [pc, #288]	; (8002950 <HAL_GPIO_Init+0x2bc>)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	3302      	adds	r3, #2
 8002834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002838:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a40      	ldr	r2, [pc, #256]	; (8002954 <HAL_GPIO_Init+0x2c0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d013      	beq.n	8002880 <HAL_GPIO_Init+0x1ec>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3f      	ldr	r2, [pc, #252]	; (8002958 <HAL_GPIO_Init+0x2c4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00d      	beq.n	800287c <HAL_GPIO_Init+0x1e8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a3e      	ldr	r2, [pc, #248]	; (800295c <HAL_GPIO_Init+0x2c8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d007      	beq.n	8002878 <HAL_GPIO_Init+0x1e4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a3d      	ldr	r2, [pc, #244]	; (8002960 <HAL_GPIO_Init+0x2cc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d101      	bne.n	8002874 <HAL_GPIO_Init+0x1e0>
 8002870:	2303      	movs	r3, #3
 8002872:	e006      	b.n	8002882 <HAL_GPIO_Init+0x1ee>
 8002874:	2304      	movs	r3, #4
 8002876:	e004      	b.n	8002882 <HAL_GPIO_Init+0x1ee>
 8002878:	2302      	movs	r3, #2
 800287a:	e002      	b.n	8002882 <HAL_GPIO_Init+0x1ee>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_GPIO_Init+0x1ee>
 8002880:	2300      	movs	r3, #0
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	f002 0203 	and.w	r2, r2, #3
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	4093      	lsls	r3, r2
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002892:	492f      	ldr	r1, [pc, #188]	; (8002950 <HAL_GPIO_Init+0x2bc>)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	492c      	ldr	r1, [pc, #176]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	4928      	ldr	r1, [pc, #160]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028d4:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4922      	ldr	r1, [pc, #136]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	491e      	ldr	r1, [pc, #120]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	4918      	ldr	r1, [pc, #96]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	43db      	mvns	r3, r3
 8002912:	4914      	ldr	r1, [pc, #80]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 8002914:	4013      	ands	r3, r2
 8002916:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d021      	beq.n	8002968 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	490e      	ldr	r1, [pc, #56]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	60cb      	str	r3, [r1, #12]
 8002930:	e021      	b.n	8002976 <HAL_GPIO_Init+0x2e2>
 8002932:	bf00      	nop
 8002934:	10320000 	.word	0x10320000
 8002938:	10310000 	.word	0x10310000
 800293c:	10220000 	.word	0x10220000
 8002940:	10210000 	.word	0x10210000
 8002944:	10120000 	.word	0x10120000
 8002948:	10110000 	.word	0x10110000
 800294c:	40021000 	.word	0x40021000
 8002950:	40010000 	.word	0x40010000
 8002954:	40010800 	.word	0x40010800
 8002958:	40010c00 	.word	0x40010c00
 800295c:	40011000 	.word	0x40011000
 8002960:	40011400 	.word	0x40011400
 8002964:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_GPIO_Init+0x304>)
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	43db      	mvns	r3, r3
 8002970:	4909      	ldr	r1, [pc, #36]	; (8002998 <HAL_GPIO_Init+0x304>)
 8002972:	4013      	ands	r3, r2
 8002974:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	3301      	adds	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	fa22 f303 	lsr.w	r3, r2, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	f47f ae8e 	bne.w	80026a8 <HAL_GPIO_Init+0x14>
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	372c      	adds	r7, #44	; 0x2c
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	40010400 	.word	0x40010400

0800299c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	887b      	ldrh	r3, [r7, #2]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e001      	b.n	80029be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]
 80029d6:	4613      	mov	r3, r2
 80029d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029da:	787b      	ldrb	r3, [r7, #1]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e0:	887a      	ldrh	r2, [r7, #2]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029e6:	e003      	b.n	80029f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	041a      	lsls	r2, r3, #16
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	611a      	str	r2, [r3, #16]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	041a      	lsls	r2, r3, #16
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	611a      	str	r2, [r3, #16]
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2e:	b08b      	sub	sp, #44	; 0x2c
 8002a30:	af06      	add	r7, sp, #24
 8002a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0fd      	b.n	8002c3a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f007 f942 	bl	8009cdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f002 ff6b 	bl	8005940 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	687e      	ldr	r6, [r7, #4]
 8002a72:	466d      	mov	r5, sp
 8002a74:	f106 0410 	add.w	r4, r6, #16
 8002a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	602b      	str	r3, [r5, #0]
 8002a80:	1d33      	adds	r3, r6, #4
 8002a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a84:	6838      	ldr	r0, [r7, #0]
 8002a86:	f002 ff35 	bl	80058f4 <USB_CoreInit>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0ce      	b.n	8002c3a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f002 ff66 	bl	8005974 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e04c      	b.n	8002b48 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	3301      	adds	r3, #1
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	440b      	add	r3, r1
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	b298      	uxth	r0, r3
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	3336      	adds	r3, #54	; 0x36
 8002aec:	4602      	mov	r2, r0
 8002aee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	3303      	adds	r3, #3
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	3338      	adds	r3, #56	; 0x38
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	333c      	adds	r3, #60	; 0x3c
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3340      	adds	r3, #64	; 0x40
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	3301      	adds	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d3ad      	bcc.n	8002aae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	e044      	b.n	8002be2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	3301      	adds	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d3b5      	bcc.n	8002b58 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	687e      	ldr	r6, [r7, #4]
 8002bf4:	466d      	mov	r5, sp
 8002bf6:	f106 0410 	add.w	r4, r6, #16
 8002bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	602b      	str	r3, [r5, #0]
 8002c02:	1d33      	adds	r3, r6, #4
 8002c04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c06:	6838      	ldr	r0, [r7, #0]
 8002c08:	f002 fec0 	bl	800598c <USB_DevInit>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00d      	b.n	8002c3a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f005 fb72 	bl	800831c <USB_DevDisconnect>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_PCD_Start+0x16>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e016      	b.n	8002c86 <HAL_PCD_Start+0x44>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fe55 	bl	8005914 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f007 fa8c 	bl	800a18a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f005 fb46 	bl	8008308 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b088      	sub	sp, #32
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f005 fb48 	bl	8008330 <USB_ReadInterrupts>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002caa:	d102      	bne.n	8002cb2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fb48 	bl	8003342 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f005 fb3a 	bl	8008330 <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d112      	bne.n	8002cee <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f007 f876 	bl	8009dd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f923 	bl	8002f34 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f005 fb1c 	bl	8008330 <USB_ReadInterrupts>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d02:	d10b      	bne.n	8002d1c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d16:	b292      	uxth	r2, r2
 8002d18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f005 fb05 	bl	8008330 <USB_ReadInterrupts>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d30:	d10b      	bne.n	8002d4a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d44:	b292      	uxth	r2, r2
 8002d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f005 faee 	bl	8008330 <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5e:	d126      	bne.n	8002dae <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0204 	bic.w	r2, r2, #4
 8002d72:	b292      	uxth	r2, r2
 8002d74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0208 	bic.w	r2, r2, #8
 8002d8a:	b292      	uxth	r2, r2
 8002d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f007 f857 	bl	8009e44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002da8:	b292      	uxth	r2, r2
 8002daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f005 fabc 	bl	8008330 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc2:	f040 8082 	bne.w	8002eca <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	77fb      	strb	r3, [r7, #31]
 8002dca:	e010      	b.n	8002dee <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	7ffb      	ldrb	r3, [r7, #31]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	441a      	add	r2, r3
 8002dd8:	7ffb      	ldrb	r3, [r7, #31]
 8002dda:	8812      	ldrh	r2, [r2, #0]
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	3320      	adds	r3, #32
 8002de2:	443b      	add	r3, r7
 8002de4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	3301      	adds	r3, #1
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	2b07      	cmp	r3, #7
 8002df2:	d9eb      	bls.n	8002dcc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	b292      	uxth	r2, r2
 8002e08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002e24:	bf00      	nop
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f6      	beq.n	8002e26 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4a:	b292      	uxth	r2, r2
 8002e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
 8002e54:	e00f      	b.n	8002e76 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002e56:	7ffb      	ldrb	r3, [r7, #31]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	7ffa      	ldrb	r2, [r7, #31]
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	440a      	add	r2, r1
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	3320      	adds	r3, #32
 8002e68:	443b      	add	r3, r7
 8002e6a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002e6e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002e70:	7ffb      	ldrb	r3, [r7, #31]
 8002e72:	3301      	adds	r3, #1
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	7ffb      	ldrb	r3, [r7, #31]
 8002e78:	2b07      	cmp	r3, #7
 8002e7a:	d9ec      	bls.n	8002e56 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0208 	orr.w	r2, r2, #8
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0204 	orr.w	r2, r2, #4
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f006 ffa3 	bl	8009e10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f005 fa2e 	bl	8008330 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ede:	d10e      	bne.n	8002efe <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ef2:	b292      	uxth	r2, r2
 8002ef4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f006 ff5c 	bl	8009db6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f005 fa14 	bl	8008330 <USB_ReadInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f12:	d10b      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f26:	b292      	uxth	r2, r2
 8002f28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_PCD_SetAddress+0x1a>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e013      	b.n	8002f76 <HAL_PCD_SetAddress+0x42>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f005 f9bb 	bl	80082e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	4608      	mov	r0, r1
 8002f88:	4611      	mov	r1, r2
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	70fb      	strb	r3, [r7, #3]
 8002f90:	460b      	mov	r3, r1
 8002f92:	803b      	strh	r3, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	da0e      	bge.n	8002fc2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	705a      	strb	r2, [r3, #1]
 8002fc0:	e00e      	b.n	8002fe0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 0207 	and.w	r2, r3, #7
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fec:	883a      	ldrh	r2, [r7, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	78ba      	ldrb	r2, [r7, #2]
 8002ff6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800300a:	78bb      	ldrb	r3, [r7, #2]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d102      	bne.n	8003016 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_PCD_EP_Open+0xa6>
 8003020:	2302      	movs	r3, #2
 8003022:	e00e      	b.n	8003042 <HAL_PCD_EP_Open+0xc4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	4618      	mov	r0, r3
 8003034:	f002 fcca 	bl	80059cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003040:	7afb      	ldrb	r3, [r7, #11]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da0e      	bge.n	800307c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	705a      	strb	r2, [r3, #1]
 800307a:	e00e      	b.n	800309a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 0207 	and.w	r2, r3, #7
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_PCD_EP_Close+0x6a>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e00e      	b.n	80030d2 <HAL_PCD_EP_Close+0x88>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f002 ffec 	bl	80060a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	460b      	mov	r3, r1
 80030e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ea:	7afb      	ldrb	r3, [r7, #11]
 80030ec:	f003 0207 	and.w	r2, r3, #7
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2200      	movs	r2, #0
 8003112:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2200      	movs	r2, #0
 8003118:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800311a:	7afb      	ldrb	r3, [r7, #11]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	b2da      	uxtb	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003126:	7afb      	ldrb	r3, [r7, #11]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6979      	ldr	r1, [r7, #20]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 f99e 	bl	8006478 <USB_EPStartXfer>
 800313c:	e005      	b.n	800314a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6979      	ldr	r1, [r7, #20]
 8003144:	4618      	mov	r0, r3
 8003146:	f003 f997 	bl	8006478 <USB_EPStartXfer>
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	460b      	mov	r3, r1
 8003162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003164:	7afb      	ldrb	r3, [r7, #11]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2200      	movs	r2, #0
 8003198:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2201      	movs	r2, #1
 800319e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a0:	7afb      	ldrb	r3, [r7, #11]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ac:	7afb      	ldrb	r3, [r7, #11]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 f95b 	bl	8006478 <USB_EPStartXfer>
 80031c2:	e005      	b.n	80031d0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6979      	ldr	r1, [r7, #20]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 f954 	bl	8006478 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 0207 	and.w	r2, r3, #7
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d901      	bls.n	80031f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e04c      	b.n	8003292 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	da0e      	bge.n	800321e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	705a      	strb	r2, [r3, #1]
 800321c:	e00c      	b.n	8003238 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	4413      	add	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_PCD_EP_SetStall+0x7e>
 8003254:	2302      	movs	r3, #2
 8003256:	e01c      	b.n	8003292 <HAL_PCD_EP_SetStall+0xb8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68f9      	ldr	r1, [r7, #12]
 8003266:	4618      	mov	r0, r3
 8003268:	f004 ff3e 	bl	80080e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f005 f863 	bl	800834e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	f003 020f 	and.w	r2, r3, #15
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d901      	bls.n	80032b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e040      	b.n	800333a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da0e      	bge.n	80032de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	705a      	strb	r2, [r3, #1]
 80032dc:	e00e      	b.n	80032fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	f003 0207 	and.w	r2, r3, #7
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_PCD_EP_ClrStall+0x82>
 8003318:	2302      	movs	r3, #2
 800331a:	e00e      	b.n	800333a <HAL_PCD_EP_ClrStall+0xa0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68f9      	ldr	r1, [r7, #12]
 800332a:	4618      	mov	r0, r3
 800332c:	f004 ff2c 	bl	8008188 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b08e      	sub	sp, #56	; 0x38
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800334a:	e2ec      	b.n	8003926 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003354:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003356:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003362:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 8161 	bne.w	800362e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800336c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d152      	bne.n	800341c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	81fb      	strh	r3, [r7, #14]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	89fb      	ldrh	r3, [r7, #14]
 800338e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003396:	b29b      	uxth	r3, r3
 8003398:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3328      	adds	r3, #40	; 0x28
 800339e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	3302      	adds	r3, #2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	441a      	add	r2, r3
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033da:	2100      	movs	r1, #0
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f006 fcd0 	bl	8009d82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 829b 	beq.w	8003926 <PCD_EP_ISR_Handler+0x5e4>
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f040 8296 	bne.w	8003926 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003406:	b2da      	uxtb	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	b292      	uxth	r2, r2
 800340e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800341a:	e284      	b.n	8003926 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800342c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800342e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003432:	2b00      	cmp	r3, #0
 8003434:	d034      	beq.n	80034a0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	3306      	adds	r3, #6
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003474:	b29b      	uxth	r3, r3
 8003476:	f004 ffba 	bl	80083ee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b29a      	uxth	r2, r3
 8003482:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003486:	4013      	ands	r3, r2
 8003488:	823b      	strh	r3, [r7, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	8a3a      	ldrh	r2, [r7, #16]
 8003490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003494:	b292      	uxth	r2, r2
 8003496:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f006 fc45 	bl	8009d28 <HAL_PCD_SetupStageCallback>
 800349e:	e242      	b.n	8003926 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f280 823e 	bge.w	8003926 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80034b6:	4013      	ands	r3, r2
 80034b8:	83bb      	strh	r3, [r7, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	8bba      	ldrh	r2, [r7, #28]
 80034c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034c4:	b292      	uxth	r2, r2
 80034c6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	3306      	adds	r3, #6
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d019      	beq.n	8003530 <PCD_EP_ISR_Handler+0x1ee>
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	6959      	ldr	r1, [r3, #20]
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003514:	b29b      	uxth	r3, r3
 8003516:	f004 ff6a 	bl	80083ee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	441a      	add	r2, r3
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003528:	2100      	movs	r1, #0
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f006 fc0e 	bl	8009d4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 81f2 	bne.w	8003926 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003550:	b29b      	uxth	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	4413      	add	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d112      	bne.n	8003590 <PCD_EP_ISR_Handler+0x24e>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003574:	b29a      	uxth	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	801a      	strh	r2, [r3, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003588:	b29a      	uxth	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	e02f      	b.n	80035f0 <PCD_EP_ISR_Handler+0x2ae>
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b3e      	cmp	r3, #62	; 0x3e
 8003596:	d813      	bhi.n	80035c0 <PCD_EP_ISR_Handler+0x27e>
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <PCD_EP_ISR_Handler+0x270>
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	3301      	adds	r3, #1
 80035b0:	633b      	str	r3, [r7, #48]	; 0x30
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	029b      	lsls	r3, r3, #10
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	801a      	strh	r2, [r3, #0]
 80035be:	e017      	b.n	80035f0 <PCD_EP_ISR_Handler+0x2ae>
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	633b      	str	r3, [r7, #48]	; 0x30
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <PCD_EP_ISR_Handler+0x298>
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	3b01      	subs	r3, #1
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	b29b      	uxth	r3, r3
 80035de:	029b      	lsls	r3, r3, #10
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003600:	827b      	strh	r3, [r7, #18]
 8003602:	8a7b      	ldrh	r3, [r7, #18]
 8003604:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003608:	827b      	strh	r3, [r7, #18]
 800360a:	8a7b      	ldrh	r3, [r7, #18]
 800360c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003610:	827b      	strh	r3, [r7, #18]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	8a7b      	ldrh	r3, [r7, #18]
 8003618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003628:	b29b      	uxth	r3, r3
 800362a:	8013      	strh	r3, [r2, #0]
 800362c:	e17b      	b.n	8003926 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003640:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003644:	2b00      	cmp	r3, #0
 8003646:	f280 80ea 	bge.w	800381e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b29a      	uxth	r2, r3
 800365c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003660:	4013      	ands	r3, r2
 8003662:	853b      	strh	r3, [r7, #40]	; 0x28
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003674:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003678:	b292      	uxth	r2, r2
 800367a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800367c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	7b1b      	ldrb	r3, [r3, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d122      	bne.n	80036e0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	3306      	adds	r3, #6
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80036c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8087 	beq.w	80037da <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	6959      	ldr	r1, [r3, #20]
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	88da      	ldrh	r2, [r3, #6]
 80036d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036da:	f004 fe88 	bl	80083ee <USB_ReadPMA>
 80036de:	e07c      	b.n	80037da <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	78db      	ldrb	r3, [r3, #3]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d108      	bne.n	80036fa <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036ea:	461a      	mov	r2, r3
 80036ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f927 	bl	8003942 <HAL_PCD_EP_DB_Receive>
 80036f4:	4603      	mov	r3, r0
 80036f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80036f8:	e06f      	b.n	80037da <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003714:	847b      	strh	r3, [r7, #34]	; 0x22
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	441a      	add	r2, r3
 8003724:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800372e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003736:	b29b      	uxth	r3, r3
 8003738:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d021      	beq.n	8003798 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800375c:	b29b      	uxth	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	3302      	adds	r3, #2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800377c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800377e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003780:	2b00      	cmp	r3, #0
 8003782:	d02a      	beq.n	80037da <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	6959      	ldr	r1, [r3, #20]
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	891a      	ldrh	r2, [r3, #8]
 8003790:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003792:	f004 fe2c 	bl	80083ee <USB_ReadPMA>
 8003796:	e020      	b.n	80037da <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	3306      	adds	r3, #6
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80037c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	6959      	ldr	r1, [r3, #20]
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	895a      	ldrh	r2, [r3, #10]
 80037d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037d6:	f004 fe0a 	bl	80083ee <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037e0:	441a      	add	r2, r3
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037ec:	441a      	add	r2, r3
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <PCD_EP_ISR_Handler+0x4c2>
 80037fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	429a      	cmp	r2, r3
 8003802:	d206      	bcs.n	8003812 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f006 fa9e 	bl	8009d4c <HAL_PCD_DataOutStageCallback>
 8003810:	e005      	b.n	800381e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003818:	4618      	mov	r0, r3
 800381a:	f002 fe2d 	bl	8006478 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800381e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d07e      	beq.n	8003926 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003828:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	843b      	strh	r3, [r7, #32]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	8c3b      	ldrh	r3, [r7, #32]
 8003868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800386c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003870:	b29b      	uxth	r3, r3
 8003872:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	78db      	ldrb	r3, [r3, #3]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d00c      	beq.n	8003896 <PCD_EP_ISR_Handler+0x554>
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	78db      	ldrb	r3, [r3, #3]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003888:	2b02      	cmp	r3, #2
 800388a:	d146      	bne.n	800391a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800388c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d141      	bne.n	800391a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	3302      	adds	r3, #2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038be:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	8bfb      	ldrh	r3, [r7, #30]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d906      	bls.n	80038d8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	8bfb      	ldrh	r3, [r7, #30]
 80038d0:	1ad2      	subs	r2, r2, r3
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	619a      	str	r2, [r3, #24]
 80038d6:	e002      	b.n	80038de <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	2200      	movs	r2, #0
 80038dc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f006 fa48 	bl	8009d82 <HAL_PCD_DataInStageCallback>
 80038f2:	e018      	b.n	8003926 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	8bfb      	ldrh	r3, [r7, #30]
 80038fa:	441a      	add	r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	8bfb      	ldrh	r3, [r7, #30]
 8003906:	441a      	add	r2, r3
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003912:	4618      	mov	r0, r3
 8003914:	f002 fdb0 	bl	8006478 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003918:	e005      	b.n	8003926 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800391a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800391c:	461a      	mov	r2, r3
 800391e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f91b 	bl	8003b5c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800392e:	b29b      	uxth	r3, r3
 8003930:	b21b      	sxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	f6ff ad0a 	blt.w	800334c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3738      	adds	r7, #56	; 0x38
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b088      	sub	sp, #32
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	4613      	mov	r3, r2
 800394e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d07e      	beq.n	8003a58 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003962:	b29b      	uxth	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	3302      	adds	r3, #2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003982:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	8b7b      	ldrh	r3, [r7, #26]
 800398a:	429a      	cmp	r2, r3
 800398c:	d306      	bcc.n	800399c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	8b7b      	ldrh	r3, [r7, #26]
 8003994:	1ad2      	subs	r2, r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	619a      	str	r2, [r3, #24]
 800399a:	e002      	b.n	80039a2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2200      	movs	r2, #0
 80039a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d123      	bne.n	80039f2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c4:	833b      	strh	r3, [r7, #24]
 80039c6:	8b3b      	ldrh	r3, [r7, #24]
 80039c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039cc:	833b      	strh	r3, [r7, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	441a      	add	r2, r3
 80039dc:	8b3b      	ldrh	r3, [r7, #24]
 80039de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01f      	beq.n	8003a3c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a16:	82fb      	strh	r3, [r7, #22]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	441a      	add	r2, r3
 8003a26:	8afb      	ldrh	r3, [r7, #22]
 8003a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a3c:	8b7b      	ldrh	r3, [r7, #26]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8087 	beq.w	8003b52 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6959      	ldr	r1, [r3, #20]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	891a      	ldrh	r2, [r3, #8]
 8003a50:	8b7b      	ldrh	r3, [r7, #26]
 8003a52:	f004 fccc 	bl	80083ee <USB_ReadPMA>
 8003a56:	e07c      	b.n	8003b52 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3306      	adds	r3, #6
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a80:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	8b7b      	ldrh	r3, [r7, #26]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d306      	bcc.n	8003a9a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	8b7b      	ldrh	r3, [r7, #26]
 8003a92:	1ad2      	subs	r2, r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	619a      	str	r2, [r3, #24]
 8003a98:	e002      	b.n	8003aa0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d123      	bne.n	8003af0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	83fb      	strh	r3, [r7, #30]
 8003ac4:	8bfb      	ldrh	r3, [r7, #30]
 8003ac6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003aca:	83fb      	strh	r3, [r7, #30]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	8bfb      	ldrh	r3, [r7, #30]
 8003adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11f      	bne.n	8003b3a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b14:	83bb      	strh	r3, [r7, #28]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	441a      	add	r2, r3
 8003b24:	8bbb      	ldrh	r3, [r7, #28]
 8003b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b3a:	8b7b      	ldrh	r3, [r7, #26]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6959      	ldr	r1, [r3, #20]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	895a      	ldrh	r2, [r3, #10]
 8003b4c:	8b7b      	ldrh	r3, [r7, #26]
 8003b4e:	f004 fc4e 	bl	80083ee <USB_ReadPMA>
    }
  }

  return count;
 8003b52:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b0a2      	sub	sp, #136	; 0x88
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 81c7 	beq.w	8003f04 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d907      	bls.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bb6:	1ad2      	subs	r2, r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	619a      	str	r2, [r3, #24]
 8003bbc:	e002      	b.n	8003bc4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 80b9 	bne.w	8003d40 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d126      	bne.n	8003c24 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	4413      	add	r3, r2
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	011a      	lsls	r2, r3, #4
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e01a      	b.n	8003c5a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d116      	bne.n	8003c5a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	633b      	str	r3, [r7, #48]	; 0x30
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	4413      	add	r3, r2
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	011a      	lsls	r2, r3, #4
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c56:	2200      	movs	r2, #0
 8003c58:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	623b      	str	r3, [r7, #32]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d126      	bne.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	011a      	lsls	r2, r3, #4
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	801a      	strh	r2, [r3, #0]
 8003cb4:	e017      	b.n	8003ce6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	785b      	ldrb	r3, [r3, #1]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d113      	bne.n	8003ce6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	4413      	add	r3, r2
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	011a      	lsls	r2, r3, #4
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	4619      	mov	r1, r3
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f006 f848 	bl	8009d82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 82d4 	beq.w	80042a6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d18:	827b      	strh	r3, [r7, #18]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	441a      	add	r2, r3
 8003d28:	8a7b      	ldrh	r3, [r7, #18]
 8003d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	8013      	strh	r3, [r2, #0]
 8003d3e:	e2b2      	b.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d021      	beq.n	8003d8e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d64:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	441a      	add	r2, r3
 8003d76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	f040 8286 	bne.w	80042a6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003da2:	441a      	add	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003db0:	441a      	add	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d309      	bcc.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6a1a      	ldr	r2, [r3, #32]
 8003dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dce:	1ad2      	subs	r2, r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	621a      	str	r2, [r3, #32]
 8003dd4:	e015      	b.n	8003e02 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d107      	bne.n	8003dee <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003de2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dec:	e009      	b.n	8003e02 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	785b      	ldrb	r3, [r3, #1]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d155      	bne.n	8003eb6 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	4413      	add	r3, r2
 8003e20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	011a      	lsls	r2, r3, #4
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
 8003e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d112      	bne.n	8003e5e <HAL_PCD_EP_DB_Transmit+0x302>
 8003e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e46:	801a      	strh	r2, [r3, #0]
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	801a      	strh	r2, [r3, #0]
 8003e5c:	e047      	b.n	8003eee <HAL_PCD_EP_DB_Transmit+0x392>
 8003e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e60:	2b3e      	cmp	r3, #62	; 0x3e
 8003e62:	d811      	bhi.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_PCD_EP_DB_Transmit+0x31e>
 8003e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e76:	3301      	adds	r3, #1
 8003e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	029b      	lsls	r3, r3, #10
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	e032      	b.n	8003eee <HAL_PCD_EP_DB_Transmit+0x392>
 8003e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x342>
 8003e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	029b      	lsls	r3, r3, #10
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb2:	801a      	strh	r2, [r3, #0]
 8003eb4:	e01b      	b.n	8003eee <HAL_PCD_EP_DB_Transmit+0x392>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	785b      	ldrb	r3, [r3, #1]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d117      	bne.n	8003eee <HAL_PCD_EP_DB_Transmit+0x392>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed2:	4413      	add	r3, r2
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	011a      	lsls	r2, r3, #4
 8003edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ede:	4413      	add	r3, r2
 8003ee0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	6959      	ldr	r1, [r3, #20]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	891a      	ldrh	r2, [r3, #8]
 8003efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f004 fa31 	bl	8008364 <USB_WritePMA>
 8003f02:	e1d0      	b.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	3306      	adds	r3, #6
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	699a      	ldr	r2, [r3, #24]
 8003f34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d307      	bcc.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f44:	1ad2      	subs	r2, r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	619a      	str	r2, [r3, #24]
 8003f4a:	e002      	b.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 80c4 	bne.w	80040e4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	785b      	ldrb	r3, [r3, #1]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d126      	bne.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x456>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f78:	4413      	add	r3, r2
 8003f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	011a      	lsls	r2, r3, #4
 8003f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f84:	4413      	add	r3, r2
 8003f86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	e01a      	b.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d116      	bne.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	677b      	str	r3, [r7, #116]	; 0x74
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fce:	4413      	add	r3, r2
 8003fd0:	677b      	str	r3, [r7, #116]	; 0x74
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	011a      	lsls	r2, r3, #4
 8003fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fda:	4413      	add	r3, r2
 8003fdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fe0:	673b      	str	r3, [r7, #112]	; 0x70
 8003fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	785b      	ldrb	r3, [r3, #1]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d12f      	bne.n	8004056 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004006:	b29b      	uxth	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800400e:	4413      	add	r3, r2
 8004010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	011a      	lsls	r2, r3, #4
 800401a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800401e:	4413      	add	r3, r2
 8004020:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004034:	b29a      	uxth	r2, r3
 8004036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800403a:	801a      	strh	r2, [r3, #0]
 800403c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800404c:	b29a      	uxth	r2, r3
 800404e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	e017      	b.n	8004086 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	785b      	ldrb	r3, [r3, #1]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d113      	bne.n	8004086 <HAL_PCD_EP_DB_Transmit+0x52a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800406c:	4413      	add	r3, r2
 800406e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	011a      	lsls	r2, r3, #4
 8004076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004078:	4413      	add	r3, r2
 800407a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800407e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004082:	2200      	movs	r2, #0
 8004084:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	4619      	mov	r1, r3
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f005 fe78 	bl	8009d82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8104 	bne.w	80042a6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	441a      	add	r2, r3
 80040ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040de:	b29b      	uxth	r3, r3
 80040e0:	8013      	strh	r3, [r2, #0]
 80040e2:	e0e0      	b.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d121      	bne.n	8004132 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004108:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	441a      	add	r2, r3
 800411a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800411e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800412a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412e:	b29b      	uxth	r3, r3
 8004130:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004138:	2b01      	cmp	r3, #1
 800413a:	f040 80b4 	bne.w	80042a6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004146:	441a      	add	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004154:	441a      	add	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	6a1a      	ldr	r2, [r3, #32]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	429a      	cmp	r2, r3
 8004164:	d309      	bcc.n	800417a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6a1a      	ldr	r2, [r3, #32]
 8004170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004172:	1ad2      	subs	r2, r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	621a      	str	r2, [r3, #32]
 8004178:	e015      	b.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d107      	bne.n	8004192 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004182:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004186:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004190:	e009      	b.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2200      	movs	r2, #0
 800419c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	667b      	str	r3, [r7, #100]	; 0x64
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d155      	bne.n	8004260 <HAL_PCD_EP_DB_Transmit+0x704>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c8:	4413      	add	r3, r2
 80041ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	011a      	lsls	r2, r3, #4
 80041d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d4:	4413      	add	r3, r2
 80041d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041da:	65bb      	str	r3, [r7, #88]	; 0x58
 80041dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d112      	bne.n	8004208 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80041e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f0:	801a      	strh	r2, [r3, #0]
 80041f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004200:	b29a      	uxth	r2, r3
 8004202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004204:	801a      	strh	r2, [r3, #0]
 8004206:	e044      	b.n	8004292 <HAL_PCD_EP_DB_Transmit+0x736>
 8004208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420a:	2b3e      	cmp	r3, #62	; 0x3e
 800420c:	d811      	bhi.n	8004232 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800420e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	657b      	str	r3, [r7, #84]	; 0x54
 8004214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800421e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004220:	3301      	adds	r3, #1
 8004222:	657b      	str	r3, [r7, #84]	; 0x54
 8004224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004226:	b29b      	uxth	r3, r3
 8004228:	029b      	lsls	r3, r3, #10
 800422a:	b29a      	uxth	r2, r3
 800422c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800422e:	801a      	strh	r2, [r3, #0]
 8004230:	e02f      	b.n	8004292 <HAL_PCD_EP_DB_Transmit+0x736>
 8004232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	657b      	str	r3, [r7, #84]	; 0x54
 8004238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004244:	3b01      	subs	r3, #1
 8004246:	657b      	str	r3, [r7, #84]	; 0x54
 8004248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424a:	b29b      	uxth	r3, r3
 800424c:	029b      	lsls	r3, r3, #10
 800424e:	b29b      	uxth	r3, r3
 8004250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004258:	b29a      	uxth	r2, r3
 800425a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800425c:	801a      	strh	r2, [r3, #0]
 800425e:	e018      	b.n	8004292 <HAL_PCD_EP_DB_Transmit+0x736>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	785b      	ldrb	r3, [r3, #1]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d114      	bne.n	8004292 <HAL_PCD_EP_DB_Transmit+0x736>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004270:	b29b      	uxth	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004276:	4413      	add	r3, r2
 8004278:	667b      	str	r3, [r7, #100]	; 0x64
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	011a      	lsls	r2, r3, #4
 8004280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004282:	4413      	add	r3, r2
 8004284:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004288:	663b      	str	r3, [r7, #96]	; 0x60
 800428a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428c:	b29a      	uxth	r2, r3
 800428e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004290:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6959      	ldr	r1, [r3, #20]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	895a      	ldrh	r2, [r3, #10]
 800429e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f004 f85f 	bl	8008364 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c0:	823b      	strh	r3, [r7, #16]
 80042c2:	8a3b      	ldrh	r3, [r7, #16]
 80042c4:	f083 0310 	eor.w	r3, r3, #16
 80042c8:	823b      	strh	r3, [r7, #16]
 80042ca:	8a3b      	ldrh	r3, [r7, #16]
 80042cc:	f083 0320 	eor.w	r3, r3, #32
 80042d0:	823b      	strh	r3, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	441a      	add	r2, r3
 80042e0:	8a3b      	ldrh	r3, [r7, #16]
 80042e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3788      	adds	r7, #136	; 0x88
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	817b      	strh	r3, [r7, #10]
 800430e:	4613      	mov	r3, r2
 8004310:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004312:	897b      	ldrh	r3, [r7, #10]
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	e009      	b.n	800434a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004336:	897a      	ldrh	r2, [r7, #10]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800434a:	893b      	ldrh	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2200      	movs	r2, #0
 8004354:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	b29a      	uxth	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	80da      	strh	r2, [r3, #6]
 800435e:	e00b      	b.n	8004378 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2201      	movs	r2, #1
 8004364:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	b29a      	uxth	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	b29a      	uxth	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e272      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8087 	beq.w	80044b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043a4:	4b92      	ldr	r3, [pc, #584]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d00c      	beq.n	80043ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043b0:	4b8f      	ldr	r3, [pc, #572]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d112      	bne.n	80043e2 <HAL_RCC_OscConfig+0x5e>
 80043bc:	4b8c      	ldr	r3, [pc, #560]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c8:	d10b      	bne.n	80043e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ca:	4b89      	ldr	r3, [pc, #548]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d06c      	beq.n	80044b0 <HAL_RCC_OscConfig+0x12c>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d168      	bne.n	80044b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e24c      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ea:	d106      	bne.n	80043fa <HAL_RCC_OscConfig+0x76>
 80043ec:	4b80      	ldr	r3, [pc, #512]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a7f      	ldr	r2, [pc, #508]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	e02e      	b.n	8004458 <HAL_RCC_OscConfig+0xd4>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0x98>
 8004402:	4b7b      	ldr	r3, [pc, #492]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7a      	ldr	r2, [pc, #488]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b78      	ldr	r3, [pc, #480]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a77      	ldr	r2, [pc, #476]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e01d      	b.n	8004458 <HAL_RCC_OscConfig+0xd4>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0xbc>
 8004426:	4b72      	ldr	r3, [pc, #456]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a71      	ldr	r2, [pc, #452]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a6e      	ldr	r2, [pc, #440]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xd4>
 8004440:	4b6b      	ldr	r3, [pc, #428]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a6a      	ldr	r2, [pc, #424]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b68      	ldr	r3, [pc, #416]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a67      	ldr	r2, [pc, #412]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004456:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fc ffea 	bl	8001438 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fc ffe6 	bl	8001438 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e200      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b5d      	ldr	r3, [pc, #372]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xe4>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fc ffd6 	bl	8001438 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004490:	f7fc ffd2 	bl	8001438 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1ec      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x10c>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d063      	beq.n	8004586 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044be:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044ca:	4b49      	ldr	r3, [pc, #292]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11c      	bne.n	8004510 <HAL_RCC_OscConfig+0x18c>
 80044d6:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	4b43      	ldr	r3, [pc, #268]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_RCC_OscConfig+0x176>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e1c0      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4939      	ldr	r1, [pc, #228]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	e03a      	b.n	8004586 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004518:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <HAL_RCC_OscConfig+0x270>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fc ff8b 	bl	8001438 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004526:	f7fc ff87 	bl	8001438 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e1a1      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004538:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4927      	ldr	r1, [pc, #156]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <HAL_RCC_OscConfig+0x270>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fc ff6a 	bl	8001438 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004568:	f7fc ff66 	bl	8001438 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e180      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d03a      	beq.n	8004608 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d019      	beq.n	80045ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <HAL_RCC_OscConfig+0x274>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a0:	f7fc ff4a 	bl	8001438 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fc ff46 	bl	8001438 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e160      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045c6:	2001      	movs	r0, #1
 80045c8:	f000 fad8 	bl	8004b7c <RCC_Delay>
 80045cc:	e01c      	b.n	8004608 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <HAL_RCC_OscConfig+0x274>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d4:	f7fc ff30 	bl	8001438 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045da:	e00f      	b.n	80045fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045dc:	f7fc ff2c 	bl	8001438 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d908      	bls.n	80045fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e146      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000
 80045f4:	42420000 	.word	0x42420000
 80045f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045fc:	4b92      	ldr	r3, [pc, #584]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e9      	bne.n	80045dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a6 	beq.w	8004762 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461a:	4b8b      	ldr	r3, [pc, #556]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10d      	bne.n	8004642 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	4b88      	ldr	r3, [pc, #544]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4a87      	ldr	r2, [pc, #540]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004630:	61d3      	str	r3, [r2, #28]
 8004632:	4b85      	ldr	r3, [pc, #532]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463e:	2301      	movs	r3, #1
 8004640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004642:	4b82      	ldr	r3, [pc, #520]	; (800484c <HAL_RCC_OscConfig+0x4c8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d118      	bne.n	8004680 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464e:	4b7f      	ldr	r3, [pc, #508]	; (800484c <HAL_RCC_OscConfig+0x4c8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a7e      	ldr	r2, [pc, #504]	; (800484c <HAL_RCC_OscConfig+0x4c8>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800465a:	f7fc feed 	bl	8001438 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fc fee9 	bl	8001438 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b64      	cmp	r3, #100	; 0x64
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e103      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	4b75      	ldr	r3, [pc, #468]	; (800484c <HAL_RCC_OscConfig+0x4c8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d106      	bne.n	8004696 <HAL_RCC_OscConfig+0x312>
 8004688:	4b6f      	ldr	r3, [pc, #444]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	4a6e      	ldr	r2, [pc, #440]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6213      	str	r3, [r2, #32]
 8004694:	e02d      	b.n	80046f2 <HAL_RCC_OscConfig+0x36e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x334>
 800469e:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	4a69      	ldr	r2, [pc, #420]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6213      	str	r3, [r2, #32]
 80046aa:	4b67      	ldr	r3, [pc, #412]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4a66      	ldr	r2, [pc, #408]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	6213      	str	r3, [r2, #32]
 80046b6:	e01c      	b.n	80046f2 <HAL_RCC_OscConfig+0x36e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d10c      	bne.n	80046da <HAL_RCC_OscConfig+0x356>
 80046c0:	4b61      	ldr	r3, [pc, #388]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	4a60      	ldr	r2, [pc, #384]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	6213      	str	r3, [r2, #32]
 80046cc:	4b5e      	ldr	r3, [pc, #376]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	4a5d      	ldr	r2, [pc, #372]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6213      	str	r3, [r2, #32]
 80046d8:	e00b      	b.n	80046f2 <HAL_RCC_OscConfig+0x36e>
 80046da:	4b5b      	ldr	r3, [pc, #364]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	4a5a      	ldr	r2, [pc, #360]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	6213      	str	r3, [r2, #32]
 80046e6:	4b58      	ldr	r3, [pc, #352]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	4a57      	ldr	r2, [pc, #348]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	f023 0304 	bic.w	r3, r3, #4
 80046f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d015      	beq.n	8004726 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fa:	f7fc fe9d 	bl	8001438 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	e00a      	b.n	8004718 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fc fe99 	bl	8001438 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0b1      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004718:	4b4b      	ldr	r3, [pc, #300]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ee      	beq.n	8004702 <HAL_RCC_OscConfig+0x37e>
 8004724:	e014      	b.n	8004750 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004726:	f7fc fe87 	bl	8001438 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472c:	e00a      	b.n	8004744 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fc fe83 	bl	8001438 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f241 3288 	movw	r2, #5000	; 0x1388
 800473c:	4293      	cmp	r3, r2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e09b      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004744:	4b40      	ldr	r3, [pc, #256]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ee      	bne.n	800472e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d105      	bne.n	8004762 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004756:	4b3c      	ldr	r3, [pc, #240]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	4a3b      	ldr	r2, [pc, #236]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004760:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8087 	beq.w	800487a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800476c:	4b36      	ldr	r3, [pc, #216]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b08      	cmp	r3, #8
 8004776:	d061      	beq.n	800483c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d146      	bne.n	800480e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004780:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_RCC_OscConfig+0x4cc>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004786:	f7fc fe57 	bl	8001438 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478e:	f7fc fe53 	bl	8001438 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e06d      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a0:	4b29      	ldr	r3, [pc, #164]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f0      	bne.n	800478e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d108      	bne.n	80047c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047b6:	4b24      	ldr	r3, [pc, #144]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	4921      	ldr	r1, [pc, #132]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c8:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a19      	ldr	r1, [r3, #32]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	430b      	orrs	r3, r1
 80047da:	491b      	ldr	r1, [pc, #108]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <HAL_RCC_OscConfig+0x4cc>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e6:	f7fc fe27 	bl	8001438 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fc fe23 	bl	8001438 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e03d      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x46a>
 800480c:	e035      	b.n	800487a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <HAL_RCC_OscConfig+0x4cc>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fc fe10 	bl	8001438 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fc fe0c 	bl	8001438 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e026      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x498>
 800483a:	e01e      	b.n	800487a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d107      	bne.n	8004854 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e019      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
 8004848:	40021000 	.word	0x40021000
 800484c:	40007000 	.word	0x40007000
 8004850:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_OscConfig+0x500>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	429a      	cmp	r2, r3
 8004866:	d106      	bne.n	8004876 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000

08004888 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0d0      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d910      	bls.n	80048cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b67      	ldr	r3, [pc, #412]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 0207 	bic.w	r2, r3, #7
 80048b2:	4965      	ldr	r1, [pc, #404]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b63      	ldr	r3, [pc, #396]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0b8      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d020      	beq.n	800491a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e4:	4b59      	ldr	r3, [pc, #356]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4a58      	ldr	r2, [pc, #352]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 80048ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048fc:	4b53      	ldr	r3, [pc, #332]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4a52      	ldr	r2, [pc, #328]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004906:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004908:	4b50      	ldr	r3, [pc, #320]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	494d      	ldr	r1, [pc, #308]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004916:	4313      	orrs	r3, r2
 8004918:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d040      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d107      	bne.n	800493e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d115      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e07f      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004946:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e073      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004956:	4b3d      	ldr	r3, [pc, #244]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e06b      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004966:	4b39      	ldr	r3, [pc, #228]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f023 0203 	bic.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4936      	ldr	r1, [pc, #216]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004978:	f7fc fd5e 	bl	8001438 <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	e00a      	b.n	8004996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004980:	f7fc fd5a 	bl	8001438 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e053      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 020c 	and.w	r2, r3, #12
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d1eb      	bne.n	8004980 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049a8:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d210      	bcs.n	80049d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 0207 	bic.w	r2, r3, #7
 80049be:	4922      	ldr	r1, [pc, #136]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c6:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e032      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e4:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4916      	ldr	r1, [pc, #88]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a02:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	490e      	ldr	r1, [pc, #56]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a16:	f000 f821 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	490a      	ldr	r1, [pc, #40]	; (8004a50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a28:	5ccb      	ldrb	r3, [r1, r3]
 8004a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2e:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <HAL_RCC_ClockConfig+0x1cc>)
 8004a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a32:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <HAL_RCC_ClockConfig+0x1d0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fc fcbc 	bl	80013b4 <HAL_InitTick>

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40022000 	.word	0x40022000
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	0800b874 	.word	0x0800b874
 8004a54:	2000000c 	.word	0x2000000c
 8004a58:	20000010 	.word	0x20000010

08004a5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a5c:	b490      	push	{r4, r7}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a62:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <HAL_RCC_GetSysClockFreq+0xac>)
 8004a64:	1d3c      	adds	r4, r7, #4
 8004a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a6c:	f240 2301 	movw	r3, #513	; 0x201
 8004a70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a86:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d002      	beq.n	8004a9c <HAL_RCC_GetSysClockFreq+0x40>
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x46>
 8004a9a:	e02b      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a9e:	623b      	str	r3, [r7, #32]
      break;
 8004aa0:	e02b      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	0c9b      	lsrs	r3, r3, #18
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	3328      	adds	r3, #40	; 0x28
 8004aac:	443b      	add	r3, r7
 8004aae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ab2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d012      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	0c5b      	lsrs	r3, r3, #17
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	3328      	adds	r3, #40	; 0x28
 8004aca:	443b      	add	r3, r7
 8004acc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ad0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	4a0e      	ldr	r2, [pc, #56]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ad6:	fb03 f202 	mul.w	r2, r3, r2
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae2:	e004      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	623b      	str	r3, [r7, #32]
      break;
 8004af2:	e002      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004af6:	623b      	str	r3, [r7, #32]
      break;
 8004af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004afa:	6a3b      	ldr	r3, [r7, #32]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3728      	adds	r7, #40	; 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc90      	pop	{r4, r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	0800b81c 	.word	0x0800b81c
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	007a1200 	.word	0x007a1200
 8004b14:	003d0900 	.word	0x003d0900

08004b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b1c:	4b02      	ldr	r3, [pc, #8]	; (8004b28 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr
 8004b28:	2000000c 	.word	0x2000000c

08004b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b30:	f7ff fff2 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	4903      	ldr	r1, [pc, #12]	; (8004b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	0800b884 	.word	0x0800b884

08004b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b58:	f7ff ffde 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	0adb      	lsrs	r3, r3, #11
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	0800b884 	.word	0x0800b884

08004b7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <RCC_Delay+0x34>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <RCC_Delay+0x38>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	0a5b      	lsrs	r3, r3, #9
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b98:	bf00      	nop
  }
  while (Delay --);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1e5a      	subs	r2, r3, #1
 8004b9e:	60fa      	str	r2, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f9      	bne.n	8004b98 <RCC_Delay+0x1c>
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr
 8004bb0:	2000000c 	.word	0x2000000c
 8004bb4:	10624dd3 	.word	0x10624dd3

08004bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d07d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd8:	4b4f      	ldr	r3, [pc, #316]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be4:	4b4c      	ldr	r3, [pc, #304]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	4a4b      	ldr	r2, [pc, #300]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	61d3      	str	r3, [r2, #28]
 8004bf0:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c00:	4b46      	ldr	r3, [pc, #280]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d118      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c0c:	4b43      	ldr	r3, [pc, #268]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a42      	ldr	r2, [pc, #264]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c18:	f7fc fc0e 	bl	8001438 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1e:	e008      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c20:	f7fc fc0a 	bl	8001438 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e06d      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c32:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c3e:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02e      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d027      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c5c:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c72:	4a29      	ldr	r2, [pc, #164]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d014      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c82:	f7fc fbd9 	bl	8001438 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fc fbd5 	bl	8001438 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e036      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ee      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4917      	ldr	r1, [pc, #92]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc4:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4a13      	ldr	r2, [pc, #76]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	490b      	ldr	r1, [pc, #44]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cfa:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4904      	ldr	r1, [pc, #16]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	42420440 	.word	0x42420440

08004d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e076      	b.n	8004e24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d108      	bne.n	8004d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d46:	d009      	beq.n	8004d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61da      	str	r2, [r3, #28]
 8004d4e:	e005      	b.n	8004d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fc f90c 	bl	8000f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	ea42 0103 	orr.w	r1, r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	0c1a      	lsrs	r2, r3, #16
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f002 0204 	and.w	r2, r2, #4
 8004e02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69da      	ldr	r2, [r3, #28]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e48:	d112      	bne.n	8004e70 <HAL_SPI_Receive+0x44>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10e      	bne.n	8004e70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2204      	movs	r2, #4
 8004e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	4613      	mov	r3, r2
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f8f1 	bl	800504e <HAL_SPI_TransmitReceive>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	e0ea      	b.n	8005046 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_SPI_Receive+0x52>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e0e3      	b.n	8005046 <HAL_SPI_Receive+0x21a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e86:	f7fc fad7 	bl	8001438 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e9c:	e0ca      	b.n	8005034 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Receive+0x7e>
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eae:	e0c1      	b.n	8005034 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef6:	d10f      	bne.n	8004f18 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d007      	beq.n	8004f36 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d162      	bne.n	8005004 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f3e:	e02e      	b.n	8004f9e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d115      	bne.n	8004f7a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f103 020c 	add.w	r2, r3, #12
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f78:	e011      	b.n	8004f9e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f7a:	f7fc fa5d 	bl	8001438 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d803      	bhi.n	8004f92 <HAL_SPI_Receive+0x166>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d102      	bne.n	8004f98 <HAL_SPI_Receive+0x16c>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f9c:	e04a      	b.n	8005034 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1cb      	bne.n	8004f40 <HAL_SPI_Receive+0x114>
 8004fa8:	e031      	b.n	800500e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d113      	bne.n	8004fe0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	b292      	uxth	r2, r2
 8004fc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	1c9a      	adds	r2, r3, #2
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fde:	e011      	b.n	8005004 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe0:	f7fc fa2a 	bl	8001438 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d803      	bhi.n	8004ff8 <HAL_SPI_Receive+0x1cc>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d102      	bne.n	8004ffe <HAL_SPI_Receive+0x1d2>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005002:	e017      	b.n	8005034 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1cd      	bne.n	8004faa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fa46 	bl	80054a4 <SPI_EndRxTransaction>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	75fb      	strb	r3, [r7, #23]
 8005030:	e000      	b.n	8005034 <HAL_SPI_Receive+0x208>
  }

error :
 8005032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b08c      	sub	sp, #48	; 0x30
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800505c:	2301      	movs	r3, #1
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x26>
 8005070:	2302      	movs	r3, #2
 8005072:	e18a      	b.n	800538a <HAL_SPI_TransmitReceive+0x33c>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800507c:	f7fc f9dc 	bl	8001438 <HAL_GetTick>
 8005080:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005092:	887b      	ldrh	r3, [r7, #2]
 8005094:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800509a:	2b01      	cmp	r3, #1
 800509c:	d00f      	beq.n	80050be <HAL_SPI_TransmitReceive+0x70>
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a4:	d107      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d103      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x68>
 80050ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d003      	beq.n	80050be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
 80050b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050bc:	e15b      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x82>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x82>
 80050ca:	887b      	ldrh	r3, [r7, #2]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d103      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050d6:	e14e      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d003      	beq.n	80050ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2205      	movs	r2, #5
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	887a      	ldrh	r2, [r7, #2]
 80050fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	887a      	ldrh	r2, [r7, #2]
 8005102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	887a      	ldrh	r2, [r7, #2]
 800510e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b40      	cmp	r3, #64	; 0x40
 800512e:	d007      	beq.n	8005140 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005148:	d178      	bne.n	800523c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_SPI_TransmitReceive+0x10a>
 8005152:	8b7b      	ldrh	r3, [r7, #26]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d166      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	881a      	ldrh	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	1c9a      	adds	r2, r3, #2
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800517c:	e053      	b.n	8005226 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b02      	cmp	r3, #2
 800518a:	d11b      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x176>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d016      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0x176>
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d113      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	881a      	ldrh	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	1c9a      	adds	r2, r3, #2
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d119      	bne.n	8005206 <HAL_SPI_TransmitReceive+0x1b8>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d014      	beq.n	8005206 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	b292      	uxth	r2, r2
 80051e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005202:	2301      	movs	r3, #1
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005206:	f7fc f917 	bl	8001438 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005212:	429a      	cmp	r2, r3
 8005214:	d807      	bhi.n	8005226 <HAL_SPI_TransmitReceive+0x1d8>
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d003      	beq.n	8005226 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005224:	e0a7      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1a6      	bne.n	800517e <HAL_SPI_TransmitReceive+0x130>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1a1      	bne.n	800517e <HAL_SPI_TransmitReceive+0x130>
 800523a:	e07c      	b.n	8005336 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_SPI_TransmitReceive+0x1fc>
 8005244:	8b7b      	ldrh	r3, [r7, #26]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d16b      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	330c      	adds	r3, #12
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005270:	e057      	b.n	8005322 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b02      	cmp	r3, #2
 800527e:	d11c      	bne.n	80052ba <HAL_SPI_TransmitReceive+0x26c>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d017      	beq.n	80052ba <HAL_SPI_TransmitReceive+0x26c>
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	2b01      	cmp	r3, #1
 800528e:	d114      	bne.n	80052ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	7812      	ldrb	r2, [r2, #0]
 800529c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d119      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x2ae>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d014      	beq.n	80052fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052f8:	2301      	movs	r3, #1
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052fc:	f7fc f89c 	bl	8001438 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005308:	429a      	cmp	r2, r3
 800530a:	d803      	bhi.n	8005314 <HAL_SPI_TransmitReceive+0x2c6>
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d102      	bne.n	800531a <HAL_SPI_TransmitReceive+0x2cc>
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005320:	e029      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1a2      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x224>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d19d      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f904 	bl	8005548 <SPI_EndRxTxTransaction>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d006      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005352:	e010      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	e000      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005374:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800538a:	4618      	mov	r0, r3
 800538c:	3730      	adds	r7, #48	; 0x30
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a4:	f7fc f848 	bl	8001438 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b4:	f7fc f840 	bl	8001438 <HAL_GetTick>
 80053b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053ba:	4b39      	ldr	r3, [pc, #228]	; (80054a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	015b      	lsls	r3, r3, #5
 80053c0:	0d1b      	lsrs	r3, r3, #20
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ca:	e054      	b.n	8005476 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d050      	beq.n	8005476 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d4:	f7fc f830 	bl	8001438 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d902      	bls.n	80053ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d13d      	bne.n	8005466 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005402:	d111      	bne.n	8005428 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540c:	d004      	beq.n	8005418 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005416:	d107      	bne.n	8005428 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005426:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005430:	d10f      	bne.n	8005452 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005450:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e017      	b.n	8005496 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	3b01      	subs	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	429a      	cmp	r2, r3
 8005492:	d19b      	bne.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c

080054a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b8:	d111      	bne.n	80054de <SPI_EndRxTransaction+0x3a>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c2:	d004      	beq.n	80054ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054cc:	d107      	bne.n	80054de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054dc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e6:	d117      	bne.n	8005518 <SPI_EndRxTransaction+0x74>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f0:	d112      	bne.n	8005518 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2101      	movs	r1, #1
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff ff49 	bl	8005394 <SPI_WaitFlagStateUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01a      	beq.n	800553e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e013      	b.n	8005540 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2200      	movs	r2, #0
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff ff36 	bl	8005394 <SPI_WaitFlagStateUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005532:	f043 0220 	orr.w	r2, r3, #32
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e000      	b.n	8005540 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2200      	movs	r2, #0
 800555c:	2180      	movs	r1, #128	; 0x80
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff ff18 	bl	8005394 <SPI_WaitFlagStateUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	f043 0220 	orr.w	r2, r3, #32
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e000      	b.n	800557c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e03f      	b.n	8005616 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb fd78 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2224      	movs	r2, #36	; 0x24
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f905 	bl	80057d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b08a      	sub	sp, #40	; 0x28
 8005622:	af02      	add	r7, sp, #8
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b20      	cmp	r3, #32
 800563c:	d17c      	bne.n	8005738 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_UART_Transmit+0x2c>
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e075      	b.n	800573a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_UART_Transmit+0x3e>
 8005658:	2302      	movs	r3, #2
 800565a:	e06e      	b.n	800573a <HAL_UART_Transmit+0x11c>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2221      	movs	r2, #33	; 0x21
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005672:	f7fb fee1 	bl	8001438 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	88fa      	ldrh	r2, [r7, #6]
 8005682:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568c:	d108      	bne.n	80056a0 <HAL_UART_Transmit+0x82>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	e003      	b.n	80056a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056b0:	e02a      	b.n	8005708 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f840 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e036      	b.n	800573a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	3302      	adds	r3, #2
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	e007      	b.n	80056fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	3301      	adds	r3, #1
 80056f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1cf      	bne.n	80056b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2200      	movs	r2, #0
 800571a:	2140      	movs	r1, #64	; 0x40
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f810 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e006      	b.n	800573a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e000      	b.n	800573a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	603b      	str	r3, [r7, #0]
 800574e:	4613      	mov	r3, r2
 8005750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005752:	e02c      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d028      	beq.n	80057ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0x30>
 8005762:	f7fb fe69 	bl	8001438 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	429a      	cmp	r2, r3
 8005770:	d21d      	bcs.n	80057ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005780:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695a      	ldr	r2, [r3, #20]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e00f      	b.n	80057ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4013      	ands	r3, r2
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	bf0c      	ite	eq
 80057be:	2301      	moveq	r3, #1
 80057c0:	2300      	movne	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d0c3      	beq.n	8005754 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005812:	f023 030c 	bic.w	r3, r3, #12
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	430b      	orrs	r3, r1
 800581e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2c      	ldr	r2, [pc, #176]	; (80058ec <UART_SetConfig+0x114>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d103      	bne.n	8005848 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005840:	f7ff f988 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	e002      	b.n	800584e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005848:	f7ff f970 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 800584c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009a      	lsls	r2, r3, #2
 8005858:	441a      	add	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <UART_SetConfig+0x118>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	0119      	lsls	r1, r3, #4
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009a      	lsls	r2, r3, #2
 8005878:	441a      	add	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	fbb2 f2f3 	udiv	r2, r2, r3
 8005884:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <UART_SetConfig+0x118>)
 8005886:	fba3 0302 	umull	r0, r3, r3, r2
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	2064      	movs	r0, #100	; 0x64
 800588e:	fb00 f303 	mul.w	r3, r0, r3
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	3332      	adds	r3, #50	; 0x32
 8005898:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <UART_SetConfig+0x118>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058a4:	4419      	add	r1, r3
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009a      	lsls	r2, r3, #2
 80058b0:	441a      	add	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80058bc:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <UART_SetConfig+0x118>)
 80058be:	fba3 0302 	umull	r0, r3, r3, r2
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	2064      	movs	r0, #100	; 0x64
 80058c6:	fb00 f303 	mul.w	r3, r0, r3
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	3332      	adds	r3, #50	; 0x32
 80058d0:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <UART_SetConfig+0x118>)
 80058d2:	fba2 2303 	umull	r2, r3, r2, r3
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	f003 020f 	and.w	r2, r3, #15
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	440a      	add	r2, r1
 80058e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40013800 	.word	0x40013800
 80058f0:	51eb851f 	.word	0x51eb851f

080058f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058f4:	b084      	sub	sp, #16
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	f107 0014 	add.w	r0, r7, #20
 8005902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	b004      	add	sp, #16
 8005912:	4770      	bx	lr

08005914 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005924:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005928:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	b29a      	uxth	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005948:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800594c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	b29b      	uxth	r3, r3
 800595a:	43db      	mvns	r3, r3
 800595c:	b29b      	uxth	r3, r3
 800595e:	4013      	ands	r3, r2
 8005960:	b29a      	uxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800598c:	b084      	sub	sp, #16
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	f107 0014 	add.w	r0, r7, #20
 800599a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	b004      	add	sp, #16
 80059ca:	4770      	bx	lr

080059cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b09b      	sub	sp, #108	; 0x6c
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80059ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	78db      	ldrb	r3, [r3, #3]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d81f      	bhi.n	8005a3e <USB_ActivateEndpoint+0x72>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <USB_ActivateEndpoint+0x38>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a15 	.word	0x08005a15
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a47 	.word	0x08005a47
 8005a10:	08005a23 	.word	0x08005a23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005a14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005a20:	e012      	b.n	8005a48 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005a22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a26:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005a2a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005a2e:	e00b      	b.n	8005a48 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a38:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005a3c:	e004      	b.n	8005a48 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005a44:	e000      	b.n	8005a48 <USB_ActivateEndpoint+0x7c>
      break;
 8005a46:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	7b1b      	ldrb	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 8149 	bne.w	8005d4c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 8084 	beq.w	8005bcc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	011a      	lsls	r2, r3, #4
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	88db      	ldrh	r3, [r3, #6]
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	81fb      	strh	r3, [r7, #14]
 8005b06:	89fb      	ldrh	r3, [r7, #14]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01b      	beq.n	8005b48 <USB_ActivateEndpoint+0x17c>
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	81bb      	strh	r3, [r7, #12]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	89bb      	ldrh	r3, [r7, #12]
 8005b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	78db      	ldrb	r3, [r3, #3]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d020      	beq.n	8005b92 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b66:	813b      	strh	r3, [r7, #8]
 8005b68:	893b      	ldrh	r3, [r7, #8]
 8005b6a:	f083 0320 	eor.w	r3, r3, #32
 8005b6e:	813b      	strh	r3, [r7, #8]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	893b      	ldrh	r3, [r7, #8]
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
 8005b90:	e27f      	b.n	8006092 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba8:	817b      	strh	r3, [r7, #10]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	897b      	ldrh	r3, [r7, #10]
 8005bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]
 8005bca:	e262      	b.n	8006092 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	4413      	add	r3, r2
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	011a      	lsls	r2, r3, #4
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	88db      	ldrh	r3, [r3, #6]
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	4413      	add	r3, r2
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	011a      	lsls	r2, r3, #4
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c22:	623b      	str	r3, [r7, #32]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d112      	bne.n	8005c52 <USB_ActivateEndpoint+0x286>
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	e02f      	b.n	8005cb2 <USB_ActivateEndpoint+0x2e6>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b3e      	cmp	r3, #62	; 0x3e
 8005c58:	d813      	bhi.n	8005c82 <USB_ActivateEndpoint+0x2b6>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	085b      	lsrs	r3, r3, #1
 8005c60:	663b      	str	r3, [r7, #96]	; 0x60
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <USB_ActivateEndpoint+0x2a8>
 8005c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c70:	3301      	adds	r3, #1
 8005c72:	663b      	str	r3, [r7, #96]	; 0x60
 8005c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	029b      	lsls	r3, r3, #10
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	e017      	b.n	8005cb2 <USB_ActivateEndpoint+0x2e6>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	663b      	str	r3, [r7, #96]	; 0x60
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <USB_ActivateEndpoint+0x2d0>
 8005c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	83fb      	strh	r3, [r7, #30]
 8005cc0:	8bfb      	ldrh	r3, [r7, #30]
 8005cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01b      	beq.n	8005d02 <USB_ActivateEndpoint+0x336>
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce0:	83bb      	strh	r3, [r7, #28]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	441a      	add	r2, r3
 8005cec:	8bbb      	ldrh	r3, [r7, #28]
 8005cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d18:	837b      	strh	r3, [r7, #26]
 8005d1a:	8b7b      	ldrh	r3, [r7, #26]
 8005d1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d20:	837b      	strh	r3, [r7, #26]
 8005d22:	8b7b      	ldrh	r3, [r7, #26]
 8005d24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d28:	837b      	strh	r3, [r7, #26]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	441a      	add	r2, r3
 8005d34:	8b7b      	ldrh	r3, [r7, #26]
 8005d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	8013      	strh	r3, [r2, #0]
 8005d4a:	e1a2      	b.n	8006092 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	441a      	add	r2, r3
 8005d70:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d98:	4413      	add	r3, r2
 8005d9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	011a      	lsls	r2, r3, #4
 8005da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005daa:	657b      	str	r3, [r7, #84]	; 0x54
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	891b      	ldrh	r3, [r3, #8]
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dcc:	4413      	add	r3, r2
 8005dce:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	011a      	lsls	r2, r3, #4
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	895b      	ldrh	r3, [r3, #10]
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 8091 	bne.w	8005f1c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005e08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d01b      	beq.n	8005e4a <USB_ActivateEndpoint+0x47e>
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e28:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	441a      	add	r2, r3
 8005e34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01b      	beq.n	8005e9a <USB_ActivateEndpoint+0x4ce>
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e78:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	441a      	add	r2, r3
 8005e84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005eb2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005eb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005eb8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005eba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ebc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ec0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef8:	867b      	strh	r3, [r7, #50]	; 0x32
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]
 8005f1a:	e0ba      	b.n	8006092 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01d      	beq.n	8005f74 <USB_ActivateEndpoint+0x5a8>
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	441a      	add	r2, r3
 8005f5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01d      	beq.n	8005fcc <USB_ActivateEndpoint+0x600>
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	441a      	add	r2, r3
 8005fb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	78db      	ldrb	r3, [r3, #3]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d024      	beq.n	800601e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005fee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ff2:	f083 0320 	eor.w	r3, r3, #32
 8005ff6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006018:	b29b      	uxth	r3, r3
 800601a:	8013      	strh	r3, [r2, #0]
 800601c:	e01d      	b.n	800605a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006034:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	441a      	add	r2, r3
 8006042:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006056:	b29b      	uxth	r3, r3
 8006058:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800606c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006070:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006092:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006096:	4618      	mov	r0, r3
 8006098:	376c      	adds	r7, #108	; 0x6c
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr

080060a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b08d      	sub	sp, #52	; 0x34
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	7b1b      	ldrb	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f040 808e 	bne.w	80061d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d044      	beq.n	8006146 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	81bb      	strh	r3, [r7, #12]
 80060ca:	89bb      	ldrh	r3, [r7, #12]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01b      	beq.n	800610c <USB_DeactivateEndpoint+0x6c>
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ea:	817b      	strh	r3, [r7, #10]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	441a      	add	r2, r3
 80060f6:	897b      	ldrh	r3, [r7, #10]
 80060f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006104:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006108:	b29b      	uxth	r3, r3
 800610a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29b      	uxth	r3, r3
 800611a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006122:	813b      	strh	r3, [r7, #8]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	893b      	ldrh	r3, [r7, #8]
 8006130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006140:	b29b      	uxth	r3, r3
 8006142:	8013      	strh	r3, [r2, #0]
 8006144:	e192      	b.n	800646c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	827b      	strh	r3, [r7, #18]
 8006154:	8a7b      	ldrh	r3, [r7, #18]
 8006156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01b      	beq.n	8006196 <USB_DeactivateEndpoint+0xf6>
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	823b      	strh	r3, [r7, #16]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8a3b      	ldrh	r3, [r7, #16]
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800618e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ac:	81fb      	strh	r3, [r7, #14]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	89fb      	ldrh	r3, [r7, #14]
 80061ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	8013      	strh	r3, [r2, #0]
 80061ce:	e14d      	b.n	800646c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	785b      	ldrb	r3, [r3, #1]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f040 80a5 	bne.w	8006324 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	843b      	strh	r3, [r7, #32]
 80061e8:	8c3b      	ldrh	r3, [r7, #32]
 80061ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01b      	beq.n	800622a <USB_DeactivateEndpoint+0x18a>
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006208:	83fb      	strh	r3, [r7, #30]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	441a      	add	r2, r3
 8006214:	8bfb      	ldrh	r3, [r7, #30]
 8006216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006226:	b29b      	uxth	r3, r3
 8006228:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	83bb      	strh	r3, [r7, #28]
 8006238:	8bbb      	ldrh	r3, [r7, #28]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01b      	beq.n	800627a <USB_DeactivateEndpoint+0x1da>
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006258:	837b      	strh	r3, [r7, #26]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	441a      	add	r2, r3
 8006264:	8b7b      	ldrh	r3, [r7, #26]
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006272:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	833b      	strh	r3, [r7, #24]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	441a      	add	r2, r3
 800629c:	8b3b      	ldrh	r3, [r7, #24]
 800629e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c8:	82fb      	strh	r3, [r7, #22]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	441a      	add	r2, r3
 80062d4:	8afb      	ldrh	r3, [r7, #22]
 80062d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006300:	82bb      	strh	r3, [r7, #20]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	441a      	add	r2, r3
 800630c:	8abb      	ldrh	r3, [r7, #20]
 800630e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631e:	b29b      	uxth	r3, r3
 8006320:	8013      	strh	r3, [r2, #0]
 8006322:	e0a3      	b.n	800646c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006332:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01b      	beq.n	8006374 <USB_DeactivateEndpoint+0x2d4>
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800636c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006370:	b29b      	uxth	r3, r3
 8006372:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006382:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01b      	beq.n	80063c4 <USB_DeactivateEndpoint+0x324>
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006412:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644a:	847b      	strh	r3, [r7, #34]	; 0x22
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	441a      	add	r2, r3
 8006456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006468:	b29b      	uxth	r3, r3
 800646a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3734      	adds	r7, #52	; 0x34
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr

08006478 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b0cc      	sub	sp, #304	; 0x130
 800647c:	af00      	add	r7, sp, #0
 800647e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006482:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006486:	6018      	str	r0, [r3, #0]
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006490:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	f041 817d 	bne.w	800779e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80064a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d908      	bls.n	80064d2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80064c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80064d0:	e007      	b.n	80064e2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80064d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80064e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	7b1b      	ldrb	r3, [r3, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d152      	bne.n	8006598 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80064f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6959      	ldr	r1, [r3, #20]
 80064fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	88da      	ldrh	r2, [r3, #6]
 800650a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650e:	b29b      	uxth	r3, r3
 8006510:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006514:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006518:	6800      	ldr	r0, [r0, #0]
 800651a:	f001 ff23 	bl	8008364 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800651e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006522:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006526:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800652a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800652e:	6812      	ldr	r2, [r2, #0]
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006536:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006540:	b29b      	uxth	r3, r3
 8006542:	4619      	mov	r1, r3
 8006544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006548:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800654c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006550:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	440a      	add	r2, r1
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	011a      	lsls	r2, r3, #4
 8006568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4413      	add	r3, r2
 8006574:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006586:	b29a      	uxth	r2, r3
 8006588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	f001 b8b5 	b.w	8007702 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	78db      	ldrb	r3, [r3, #3]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	f040 84c6 	bne.w	8006f36 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80065aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	f240 8443 	bls.w	8006e4e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80065c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80065f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006618:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800661c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006620:	b29b      	uxth	r3, r3
 8006622:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6a1a      	ldr	r2, [r3, #32]
 8006630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006634:	1ad2      	subs	r2, r2, r3
 8006636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800663a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 823e 	beq.w	8006ae6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800666a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006672:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006676:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	785b      	ldrb	r3, [r3, #1]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 809a 	bne.w	80067c4 <USB_EPStartXfer+0x34c>
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006698:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800669c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	4619      	mov	r1, r3
 80066b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066c2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	440a      	add	r2, r1
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	011a      	lsls	r2, r3, #4
 80066da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4413      	add	r3, r2
 80066e6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80066ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d122      	bne.n	8006742 <USB_EPStartXfer+0x2ca>
 80066fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006700:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670e:	b29a      	uxth	r2, r3
 8006710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006714:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006720:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800672e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006732:	b29a      	uxth	r2, r3
 8006734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006738:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	801a      	strh	r2, [r3, #0]
 8006740:	e079      	b.n	8006836 <USB_EPStartXfer+0x3be>
 8006742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006746:	2b3e      	cmp	r3, #62	; 0x3e
 8006748:	d81b      	bhi.n	8006782 <USB_EPStartXfer+0x30a>
 800674a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d004      	beq.n	800676a <USB_EPStartXfer+0x2f2>
 8006760:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006764:	3301      	adds	r3, #1
 8006766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800676a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800676e:	b29b      	uxth	r3, r3
 8006770:	029b      	lsls	r3, r3, #10
 8006772:	b29a      	uxth	r2, r3
 8006774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006778:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e059      	b.n	8006836 <USB_EPStartXfer+0x3be>
 8006782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800678c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <USB_EPStartXfer+0x32a>
 8006798:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800679c:	3b01      	subs	r3, #1
 800679e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80067a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	029b      	lsls	r3, r3, #10
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	801a      	strh	r2, [r3, #0]
 80067c2:	e038      	b.n	8006836 <USB_EPStartXfer+0x3be>
 80067c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d130      	bne.n	8006836 <USB_EPStartXfer+0x3be>
 80067d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	4619      	mov	r1, r3
 80067e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067f2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	440a      	add	r2, r1
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	011a      	lsls	r2, r3, #4
 800680a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4413      	add	r3, r2
 8006816:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800681a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006828:	b29a      	uxth	r2, r3
 800682a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	895b      	ldrh	r3, [r3, #10]
 8006842:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6959      	ldr	r1, [r3, #20]
 8006852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006856:	b29b      	uxth	r3, r3
 8006858:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800685c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006860:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006864:	6800      	ldr	r0, [r0, #0]
 8006866:	f001 fd7d 	bl	8008364 <USB_WritePMA>
            ep->xfer_buff += len;
 800686a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695a      	ldr	r2, [r3, #20]
 8006876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687a:	441a      	add	r2, r3
 800687c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d90f      	bls.n	80068c4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80068a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6a1a      	ldr	r2, [r3, #32]
 80068b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b4:	1ad2      	subs	r2, r2, r3
 80068b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	621a      	str	r2, [r3, #32]
 80068c2:	e00e      	b.n	80068e2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80068c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80068d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 809a 	bne.w	8006a28 <USB_EPStartXfer+0x5b0>
 80068f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006900:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006916:	b29b      	uxth	r3, r3
 8006918:	4619      	mov	r1, r3
 800691a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006922:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006926:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	440a      	add	r2, r1
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	011a      	lsls	r2, r3, #4
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4413      	add	r3, r2
 800694a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800694e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006952:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d122      	bne.n	80069a6 <USB_EPStartXfer+0x52e>
 8006960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006964:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006972:	b29a      	uxth	r2, r3
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006984:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006996:	b29a      	uxth	r2, r3
 8006998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e083      	b.n	8006aae <USB_EPStartXfer+0x636>
 80069a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069aa:	2b3e      	cmp	r3, #62	; 0x3e
 80069ac:	d81b      	bhi.n	80069e6 <USB_EPStartXfer+0x56e>
 80069ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b2:	085b      	lsrs	r3, r3, #1
 80069b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <USB_EPStartXfer+0x556>
 80069c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069c8:	3301      	adds	r3, #1
 80069ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	029b      	lsls	r3, r3, #10
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e063      	b.n	8006aae <USB_EPStartXfer+0x636>
 80069e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <USB_EPStartXfer+0x58e>
 80069fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a00:	3b01      	subs	r3, #1
 8006a02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a06:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	e042      	b.n	8006aae <USB_EPStartXfer+0x636>
 8006a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d13a      	bne.n	8006aae <USB_EPStartXfer+0x636>
 8006a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a44:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a62:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a6a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	440a      	add	r2, r1
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	011a      	lsls	r2, r3, #4
 8006a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a86:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	891b      	ldrh	r3, [r3, #8]
 8006aba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6959      	ldr	r1, [r3, #20]
 8006aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ad4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ad8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006adc:	6800      	ldr	r0, [r0, #0]
 8006ade:	f001 fc41 	bl	8008364 <USB_WritePMA>
 8006ae2:	f000 be0e 	b.w	8007702 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	785b      	ldrb	r3, [r3, #1]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d16d      	bne.n	8006bd2 <USB_EPStartXfer+0x75a>
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	461a      	mov	r2, r3
 8006b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b16:	4413      	add	r3, r2
 8006b18:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	011a      	lsls	r2, r3, #4
 8006b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b30:	647b      	str	r3, [r7, #68]	; 0x44
 8006b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d112      	bne.n	8006b60 <USB_EPStartXfer+0x6e8>
 8006b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b5c:	801a      	strh	r2, [r3, #0]
 8006b5e:	e063      	b.n	8006c28 <USB_EPStartXfer+0x7b0>
 8006b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b64:	2b3e      	cmp	r3, #62	; 0x3e
 8006b66:	d817      	bhi.n	8006b98 <USB_EPStartXfer+0x720>
 8006b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6c:	085b      	lsrs	r3, r3, #1
 8006b6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <USB_EPStartXfer+0x710>
 8006b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b82:	3301      	adds	r3, #1
 8006b84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	029b      	lsls	r3, r3, #10
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b94:	801a      	strh	r2, [r3, #0]
 8006b96:	e047      	b.n	8006c28 <USB_EPStartXfer+0x7b0>
 8006b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <USB_EPStartXfer+0x740>
 8006bae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	029b      	lsls	r3, r3, #10
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e02a      	b.n	8006c28 <USB_EPStartXfer+0x7b0>
 8006bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d122      	bne.n	8006c28 <USB_EPStartXfer+0x7b0>
 8006be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	653b      	str	r3, [r7, #80]	; 0x50
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c02:	4413      	add	r3, r2
 8006c04:	653b      	str	r3, [r7, #80]	; 0x50
 8006c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	011a      	lsls	r2, r3, #4
 8006c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	891b      	ldrh	r3, [r3, #8]
 8006c34:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6959      	ldr	r1, [r3, #20]
 8006c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c4e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c52:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c56:	6800      	ldr	r0, [r0, #0]
 8006c58:	f001 fb84 	bl	8008364 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	695a      	ldr	r2, [r3, #20]
 8006c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6c:	441a      	add	r2, r3
 8006c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6a1a      	ldr	r2, [r3, #32]
 8006c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d90f      	bls.n	8006cb6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6a1a      	ldr	r2, [r3, #32]
 8006ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	621a      	str	r2, [r3, #32]
 8006cb4:	e00e      	b.n	8006cd4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	643b      	str	r3, [r7, #64]	; 0x40
 8006ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d16d      	bne.n	8006dcc <USB_EPStartXfer+0x954>
 8006cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	4413      	add	r3, r2
 8006d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	011a      	lsls	r2, r3, #4
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	4413      	add	r3, r2
 8006d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d112      	bne.n	8006d5a <USB_EPStartXfer+0x8e2>
 8006d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d42:	801a      	strh	r2, [r3, #0]
 8006d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	e05d      	b.n	8006e16 <USB_EPStartXfer+0x99e>
 8006d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d60:	d817      	bhi.n	8006d92 <USB_EPStartXfer+0x91a>
 8006d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d66:	085b      	lsrs	r3, r3, #1
 8006d68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <USB_EPStartXfer+0x90a>
 8006d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	029b      	lsls	r3, r3, #10
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	e041      	b.n	8006e16 <USB_EPStartXfer+0x99e>
 8006d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da0:	f003 031f 	and.w	r3, r3, #31
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <USB_EPStartXfer+0x93a>
 8006da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dac:	3b01      	subs	r3, #1
 8006dae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	029b      	lsls	r3, r3, #10
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	e024      	b.n	8006e16 <USB_EPStartXfer+0x99e>
 8006dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d11c      	bne.n	8006e16 <USB_EPStartXfer+0x99e>
 8006ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df0:	4413      	add	r3, r2
 8006df2:	643b      	str	r3, [r7, #64]	; 0x40
 8006df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	011a      	lsls	r2, r3, #4
 8006e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e04:	4413      	add	r3, r2
 8006e06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	895b      	ldrh	r3, [r3, #10]
 8006e22:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6959      	ldr	r1, [r3, #20]
 8006e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e3c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e40:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e44:	6800      	ldr	r0, [r0, #0]
 8006e46:	f001 fa8d 	bl	8008364 <USB_WritePMA>
 8006e4a:	f000 bc5a 	b.w	8007702 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e84:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	441a      	add	r2, r3
 8006ea2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eda:	4413      	add	r3, r2
 8006edc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	011a      	lsls	r2, r3, #4
 8006eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eee:	4413      	add	r3, r2
 8006ef0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ef4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006efe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	891b      	ldrh	r3, [r3, #8]
 8006f0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6959      	ldr	r1, [r3, #20]
 8006f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f26:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f2a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f2e:	6800      	ldr	r0, [r0, #0]
 8006f30:	f001 fa18 	bl	8008364 <USB_WritePMA>
 8006f34:	e3e5      	b.n	8007702 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6a1a      	ldr	r2, [r3, #32]
 8006f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 81bc 	beq.w	8007350 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	785b      	ldrb	r3, [r3, #1]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d16d      	bne.n	80070d2 <USB_EPStartXfer+0xc5a>
 8006ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	67bb      	str	r3, [r7, #120]	; 0x78
 8007002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007006:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007010:	b29b      	uxth	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007016:	4413      	add	r3, r2
 8007018:	67bb      	str	r3, [r7, #120]	; 0x78
 800701a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	011a      	lsls	r2, r3, #4
 8007028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800702a:	4413      	add	r3, r2
 800702c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007030:	677b      	str	r3, [r7, #116]	; 0x74
 8007032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d112      	bne.n	8007060 <USB_EPStartXfer+0xbe8>
 800703a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007044:	b29a      	uxth	r2, r3
 8007046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007058:	b29a      	uxth	r2, r3
 800705a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	e060      	b.n	8007122 <USB_EPStartXfer+0xcaa>
 8007060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007064:	2b3e      	cmp	r3, #62	; 0x3e
 8007066:	d817      	bhi.n	8007098 <USB_EPStartXfer+0xc20>
 8007068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <USB_EPStartXfer+0xc10>
 800707e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007082:	3301      	adds	r3, #1
 8007084:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007088:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800708c:	b29b      	uxth	r3, r3
 800708e:	029b      	lsls	r3, r3, #10
 8007090:	b29a      	uxth	r2, r3
 8007092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007094:	801a      	strh	r2, [r3, #0]
 8007096:	e044      	b.n	8007122 <USB_EPStartXfer+0xcaa>
 8007098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80070a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a6:	f003 031f 	and.w	r3, r3, #31
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <USB_EPStartXfer+0xc40>
 80070ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80070b2:	3b01      	subs	r3, #1
 80070b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80070b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80070bc:	b29b      	uxth	r3, r3
 80070be:	029b      	lsls	r3, r3, #10
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ce:	801a      	strh	r2, [r3, #0]
 80070d0:	e027      	b.n	8007122 <USB_EPStartXfer+0xcaa>
 80070d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d11f      	bne.n	8007122 <USB_EPStartXfer+0xcaa>
 80070e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070f8:	4413      	add	r3, r2
 80070fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	011a      	lsls	r2, r3, #4
 800710c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007110:	4413      	add	r3, r2
 8007112:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007116:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711c:	b29a      	uxth	r2, r3
 800711e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007120:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	895b      	ldrh	r3, [r3, #10]
 800712e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6959      	ldr	r1, [r3, #20]
 800713e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007142:	b29b      	uxth	r3, r3
 8007144:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007148:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800714c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007150:	6800      	ldr	r0, [r0, #0]
 8007152:	f001 f907 	bl	8008364 <USB_WritePMA>
          ep->xfer_buff += len;
 8007156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007166:	441a      	add	r2, r3
 8007168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6a1a      	ldr	r2, [r3, #32]
 8007180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	429a      	cmp	r2, r3
 800718e:	d90f      	bls.n	80071b0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6a1a      	ldr	r2, [r3, #32]
 800719c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a0:	1ad2      	subs	r2, r2, r3
 80071a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	621a      	str	r2, [r3, #32]
 80071ae:	e00e      	b.n	80071ce <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80071b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80071c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2200      	movs	r2, #0
 80071cc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80071ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 8295 	beq.w	8007702 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d16d      	bne.n	80072c4 <USB_EPStartXfer+0xe4c>
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007202:	b29b      	uxth	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007208:	4413      	add	r3, r2
 800720a:	66bb      	str	r3, [r7, #104]	; 0x68
 800720c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	011a      	lsls	r2, r3, #4
 800721a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800721c:	4413      	add	r3, r2
 800721e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007222:	667b      	str	r3, [r7, #100]	; 0x64
 8007224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d112      	bne.n	8007252 <USB_EPStartXfer+0xdda>
 800722c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	b29b      	uxth	r3, r3
 8007232:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007236:	b29a      	uxth	r2, r3
 8007238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724a:	b29a      	uxth	r2, r3
 800724c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	e063      	b.n	800731a <USB_EPStartXfer+0xea2>
 8007252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007256:	2b3e      	cmp	r3, #62	; 0x3e
 8007258:	d817      	bhi.n	800728a <USB_EPStartXfer+0xe12>
 800725a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725e:	085b      	lsrs	r3, r3, #1
 8007260:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d004      	beq.n	800727a <USB_EPStartXfer+0xe02>
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007274:	3301      	adds	r3, #1
 8007276:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800727e:	b29b      	uxth	r3, r3
 8007280:	029b      	lsls	r3, r3, #10
 8007282:	b29a      	uxth	r2, r3
 8007284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007286:	801a      	strh	r2, [r3, #0]
 8007288:	e047      	b.n	800731a <USB_EPStartXfer+0xea2>
 800728a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007298:	f003 031f 	and.w	r3, r3, #31
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <USB_EPStartXfer+0xe32>
 80072a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072a4:	3b01      	subs	r3, #1
 80072a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80072aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	029b      	lsls	r3, r3, #10
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072bc:	b29a      	uxth	r2, r3
 80072be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c0:	801a      	strh	r2, [r3, #0]
 80072c2:	e02a      	b.n	800731a <USB_EPStartXfer+0xea2>
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	785b      	ldrb	r3, [r3, #1]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d122      	bne.n	800731a <USB_EPStartXfer+0xea2>
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	673b      	str	r3, [r7, #112]	; 0x70
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072f4:	4413      	add	r3, r2
 80072f6:	673b      	str	r3, [r7, #112]	; 0x70
 80072f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	011a      	lsls	r2, r3, #4
 8007306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007308:	4413      	add	r3, r2
 800730a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800730e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007314:	b29a      	uxth	r2, r3
 8007316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007318:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800731a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	891b      	ldrh	r3, [r3, #8]
 8007326:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800732a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6959      	ldr	r1, [r3, #20]
 8007336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733a:	b29b      	uxth	r3, r3
 800733c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007340:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007344:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007348:	6800      	ldr	r0, [r0, #0]
 800734a:	f001 f80b 	bl	8008364 <USB_WritePMA>
 800734e:	e1d8      	b.n	8007702 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d178      	bne.n	8007452 <USB_EPStartXfer+0xfda>
 8007360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007364:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800736e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007372:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737c:	b29b      	uxth	r3, r3
 800737e:	461a      	mov	r2, r3
 8007380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007384:	4413      	add	r3, r2
 8007386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800738a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	011a      	lsls	r2, r3, #4
 8007398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800739c:	4413      	add	r3, r2
 800739e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d116      	bne.n	80073dc <USB_EPStartXfer+0xf64>
 80073ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073d8:	801a      	strh	r2, [r3, #0]
 80073da:	e06b      	b.n	80074b4 <USB_EPStartXfer+0x103c>
 80073dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e0:	2b3e      	cmp	r3, #62	; 0x3e
 80073e2:	d818      	bhi.n	8007416 <USB_EPStartXfer+0xf9e>
 80073e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <USB_EPStartXfer+0xf8c>
 80073fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073fe:	3301      	adds	r3, #1
 8007400:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007404:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007408:	b29b      	uxth	r3, r3
 800740a:	029b      	lsls	r3, r3, #10
 800740c:	b29a      	uxth	r2, r3
 800740e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007412:	801a      	strh	r2, [r3, #0]
 8007414:	e04e      	b.n	80074b4 <USB_EPStartXfer+0x103c>
 8007416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741a:	095b      	lsrs	r3, r3, #5
 800741c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	2b00      	cmp	r3, #0
 800742a:	d104      	bne.n	8007436 <USB_EPStartXfer+0xfbe>
 800742c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007430:	3b01      	subs	r3, #1
 8007432:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007436:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800743a:	b29b      	uxth	r3, r3
 800743c:	029b      	lsls	r3, r3, #10
 800743e:	b29b      	uxth	r3, r3
 8007440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007448:	b29a      	uxth	r2, r3
 800744a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800744e:	801a      	strh	r2, [r3, #0]
 8007450:	e030      	b.n	80074b4 <USB_EPStartXfer+0x103c>
 8007452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d128      	bne.n	80074b4 <USB_EPStartXfer+0x103c>
 8007462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007466:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800747e:	b29b      	uxth	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007486:	4413      	add	r3, r2
 8007488:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800748c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	011a      	lsls	r2, r3, #4
 800749a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800749e:	4413      	add	r3, r2
 80074a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	891b      	ldrh	r3, [r3, #8]
 80074c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6959      	ldr	r1, [r3, #20]
 80074d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074da:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074de:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074e2:	6800      	ldr	r0, [r0, #0]
 80074e4:	f000 ff3e 	bl	8008364 <USB_WritePMA>
          ep->xfer_buff += len;
 80074e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695a      	ldr	r2, [r3, #20]
 80074f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f8:	441a      	add	r2, r3
 80074fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6a1a      	ldr	r2, [r3, #32]
 8007512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	429a      	cmp	r2, r3
 8007520:	d90f      	bls.n	8007542 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007532:	1ad2      	subs	r2, r2, r3
 8007534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	621a      	str	r2, [r3, #32]
 8007540:	e00e      	b.n	8007560 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2200      	movs	r2, #0
 800755e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80cc 	beq.w	8007702 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800756a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d178      	bne.n	800767a <USB_EPStartXfer+0x1202>
 8007588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075ac:	4413      	add	r3, r2
 80075ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	011a      	lsls	r2, r3, #4
 80075c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075c4:	4413      	add	r3, r2
 80075c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d116      	bne.n	8007604 <USB_EPStartXfer+0x118c>
 80075d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075e8:	801a      	strh	r2, [r3, #0]
 80075ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007600:	801a      	strh	r2, [r3, #0]
 8007602:	e064      	b.n	80076ce <USB_EPStartXfer+0x1256>
 8007604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007608:	2b3e      	cmp	r3, #62	; 0x3e
 800760a:	d818      	bhi.n	800763e <USB_EPStartXfer+0x11c6>
 800760c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007610:	085b      	lsrs	r3, r3, #1
 8007612:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d004      	beq.n	800762c <USB_EPStartXfer+0x11b4>
 8007622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007626:	3301      	adds	r3, #1
 8007628:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800762c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007630:	b29b      	uxth	r3, r3
 8007632:	029b      	lsls	r3, r3, #10
 8007634:	b29a      	uxth	r2, r3
 8007636:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800763a:	801a      	strh	r2, [r3, #0]
 800763c:	e047      	b.n	80076ce <USB_EPStartXfer+0x1256>
 800763e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <USB_EPStartXfer+0x11e6>
 8007654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007658:	3b01      	subs	r3, #1
 800765a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800765e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007662:	b29b      	uxth	r3, r3
 8007664:	029b      	lsls	r3, r3, #10
 8007666:	b29b      	uxth	r3, r3
 8007668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800766c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007670:	b29a      	uxth	r2, r3
 8007672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007676:	801a      	strh	r2, [r3, #0]
 8007678:	e029      	b.n	80076ce <USB_EPStartXfer+0x1256>
 800767a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d121      	bne.n	80076ce <USB_EPStartXfer+0x1256>
 800768a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007698:	b29b      	uxth	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076a0:	4413      	add	r3, r2
 80076a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	011a      	lsls	r2, r3, #4
 80076b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076b8:	4413      	add	r3, r2
 80076ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80076c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	895b      	ldrh	r3, [r3, #10]
 80076da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6959      	ldr	r1, [r3, #20]
 80076ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076fc:	6800      	ldr	r0, [r0, #0]
 80076fe:	f000 fe31 	bl	8008364 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007706:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007724:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007730:	8013      	strh	r3, [r2, #0]
 8007732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007736:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800773a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800773e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007742:	8812      	ldrh	r2, [r2, #0]
 8007744:	f082 0210 	eor.w	r2, r2, #16
 8007748:	801a      	strh	r2, [r3, #0]
 800774a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007752:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007756:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800775a:	8812      	ldrh	r2, [r2, #0]
 800775c:	f082 0220 	eor.w	r2, r2, #32
 8007760:	801a      	strh	r2, [r3, #0]
 8007762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	441a      	add	r2, r3
 800777c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007780:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]
 800779a:	f000 bc9f 	b.w	80080dc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800779e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	7b1b      	ldrb	r3, [r3, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f040 80ae 	bne.w	800790c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80077b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d917      	bls.n	80077fc <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80077cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80077dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699a      	ldr	r2, [r3, #24]
 80077e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ec:	1ad2      	subs	r2, r2, r3
 80077ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	619a      	str	r2, [r3, #24]
 80077fa:	e00e      	b.n	800781a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80077fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800780c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2200      	movs	r2, #0
 8007818:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800781a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007836:	b29b      	uxth	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800783e:	4413      	add	r3, r2
 8007840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	011a      	lsls	r2, r3, #4
 8007852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007856:	4413      	add	r3, r2
 8007858:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800785c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d116      	bne.n	8007896 <USB_EPStartXfer+0x141e>
 8007868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	b29b      	uxth	r3, r3
 8007870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007874:	b29a      	uxth	r2, r3
 8007876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788c:	b29a      	uxth	r2, r3
 800788e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	e3e8      	b.n	8008068 <USB_EPStartXfer+0x1bf0>
 8007896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789a:	2b3e      	cmp	r3, #62	; 0x3e
 800789c:	d818      	bhi.n	80078d0 <USB_EPStartXfer+0x1458>
 800789e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <USB_EPStartXfer+0x1446>
 80078b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078b8:	3301      	adds	r3, #1
 80078ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	029b      	lsls	r3, r3, #10
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	e3cb      	b.n	8008068 <USB_EPStartXfer+0x1bf0>
 80078d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d4:	095b      	lsrs	r3, r3, #5
 80078d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078de:	f003 031f 	and.w	r3, r3, #31
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <USB_EPStartXfer+0x1478>
 80078e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078ea:	3b01      	subs	r3, #1
 80078ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	029b      	lsls	r3, r3, #10
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007902:	b29a      	uxth	r2, r3
 8007904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007908:	801a      	strh	r2, [r3, #0]
 800790a:	e3ad      	b.n	8008068 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800790c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	78db      	ldrb	r3, [r3, #3]
 8007918:	2b02      	cmp	r3, #2
 800791a:	f040 8200 	bne.w	8007d1e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800791e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	785b      	ldrb	r3, [r3, #1]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f040 8091 	bne.w	8007a52 <USB_EPStartXfer+0x15da>
 8007930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800793e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007942:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794c:	b29b      	uxth	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007954:	4413      	add	r3, r2
 8007956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800795a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	011a      	lsls	r2, r3, #4
 8007968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800796c:	4413      	add	r3, r2
 800796e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d116      	bne.n	80079b4 <USB_EPStartXfer+0x153c>
 8007986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007992:	b29a      	uxth	r2, r3
 8007994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007998:	801a      	strh	r2, [r3, #0]
 800799a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079b0:	801a      	strh	r2, [r3, #0]
 80079b2:	e083      	b.n	8007abc <USB_EPStartXfer+0x1644>
 80079b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	2b3e      	cmp	r3, #62	; 0x3e
 80079c2:	d820      	bhi.n	8007a06 <USB_EPStartXfer+0x158e>
 80079c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d004      	beq.n	80079f4 <USB_EPStartXfer+0x157c>
 80079ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ee:	3301      	adds	r3, #1
 80079f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	029b      	lsls	r3, r3, #10
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a02:	801a      	strh	r2, [r3, #0]
 8007a04:	e05a      	b.n	8007abc <USB_EPStartXfer+0x1644>
 8007a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	095b      	lsrs	r3, r3, #5
 8007a14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d104      	bne.n	8007a36 <USB_EPStartXfer+0x15be>
 8007a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a30:	3b01      	subs	r3, #1
 8007a32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	029b      	lsls	r3, r3, #10
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a4e:	801a      	strh	r2, [r3, #0]
 8007a50:	e034      	b.n	8007abc <USB_EPStartXfer+0x1644>
 8007a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d12c      	bne.n	8007abc <USB_EPStartXfer+0x1644>
 8007a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a86:	4413      	add	r3, r2
 8007a88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	011a      	lsls	r2, r3, #4
 8007a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007aba:	801a      	strh	r2, [r3, #0]
 8007abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 8091 	bne.w	8007bfe <USB_EPStartXfer+0x1786>
 8007adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b00:	4413      	add	r3, r2
 8007b02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	011a      	lsls	r2, r3, #4
 8007b14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b18:	4413      	add	r3, r2
 8007b1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d116      	bne.n	8007b60 <USB_EPStartXfer+0x16e8>
 8007b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b5c:	801a      	strh	r2, [r3, #0]
 8007b5e:	e07c      	b.n	8007c5a <USB_EPStartXfer+0x17e2>
 8007b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b6e:	d820      	bhi.n	8007bb2 <USB_EPStartXfer+0x173a>
 8007b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <USB_EPStartXfer+0x1728>
 8007b96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ba0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	e053      	b.n	8007c5a <USB_EPStartXfer+0x17e2>
 8007bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f003 031f 	and.w	r3, r3, #31
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <USB_EPStartXfer+0x176a>
 8007bd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007be2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	029b      	lsls	r3, r3, #10
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	e02d      	b.n	8007c5a <USB_EPStartXfer+0x17e2>
 8007bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d125      	bne.n	8007c5a <USB_EPStartXfer+0x17e2>
 8007c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c24:	4413      	add	r3, r2
 8007c26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	011a      	lsls	r2, r3, #4
 8007c38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c58:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 81fe 	beq.w	8008068 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c8c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <USB_EPStartXfer+0x182c>
 8007c98:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10d      	bne.n	8007cc0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ca4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f040 81db 	bne.w	8008068 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007cb2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f040 81d4 	bne.w	8008068 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	441a      	add	r2, r3
 8007d04:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	8013      	strh	r3, [r2, #0]
 8007d1c:	e1a4      	b.n	8008068 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	78db      	ldrb	r3, [r3, #3]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	f040 819a 	bne.w	8008064 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699a      	ldr	r2, [r3, #24]
 8007d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d917      	bls.n	8007d7c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	699a      	ldr	r2, [r3, #24]
 8007d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6c:	1ad2      	subs	r2, r2, r3
 8007d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	619a      	str	r2, [r3, #24]
 8007d7a:	e00e      	b.n	8007d9a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2200      	movs	r2, #0
 8007d98:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	785b      	ldrb	r3, [r3, #1]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d178      	bne.n	8007e9c <USB_EPStartXfer+0x1a24>
 8007daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007dce:	4413      	add	r3, r2
 8007dd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	011a      	lsls	r2, r3, #4
 8007de2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007de6:	4413      	add	r3, r2
 8007de8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d116      	bne.n	8007e26 <USB_EPStartXfer+0x19ae>
 8007df8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e0a:	801a      	strh	r2, [r3, #0]
 8007e0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e22:	801a      	strh	r2, [r3, #0]
 8007e24:	e06b      	b.n	8007efe <USB_EPStartXfer+0x1a86>
 8007e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e2c:	d818      	bhi.n	8007e60 <USB_EPStartXfer+0x19e8>
 8007e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <USB_EPStartXfer+0x19d6>
 8007e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	029b      	lsls	r3, r3, #10
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	e04e      	b.n	8007efe <USB_EPStartXfer+0x1a86>
 8007e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e64:	095b      	lsrs	r3, r3, #5
 8007e66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6e:	f003 031f 	and.w	r3, r3, #31
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d104      	bne.n	8007e80 <USB_EPStartXfer+0x1a08>
 8007e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	029b      	lsls	r3, r3, #10
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e98:	801a      	strh	r2, [r3, #0]
 8007e9a:	e030      	b.n	8007efe <USB_EPStartXfer+0x1a86>
 8007e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d128      	bne.n	8007efe <USB_EPStartXfer+0x1a86>
 8007eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	011a      	lsls	r2, r3, #4
 8007ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee8:	4413      	add	r3, r2
 8007eea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007eee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	785b      	ldrb	r3, [r3, #1]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d178      	bne.n	800800e <USB_EPStartXfer+0x1b96>
 8007f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f40:	4413      	add	r3, r2
 8007f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	011a      	lsls	r2, r3, #4
 8007f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f58:	4413      	add	r3, r2
 8007f5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d116      	bne.n	8007f98 <USB_EPStartXfer+0x1b20>
 8007f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f94:	801a      	strh	r2, [r3, #0]
 8007f96:	e067      	b.n	8008068 <USB_EPStartXfer+0x1bf0>
 8007f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f9e:	d818      	bhi.n	8007fd2 <USB_EPStartXfer+0x1b5a>
 8007fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa4:	085b      	lsrs	r3, r3, #1
 8007fa6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d004      	beq.n	8007fc0 <USB_EPStartXfer+0x1b48>
 8007fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fba:	3301      	adds	r3, #1
 8007fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007fc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	029b      	lsls	r3, r3, #10
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	e04a      	b.n	8008068 <USB_EPStartXfer+0x1bf0>
 8007fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe0:	f003 031f 	and.w	r3, r3, #31
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d104      	bne.n	8007ff2 <USB_EPStartXfer+0x1b7a>
 8007fe8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fec:	3b01      	subs	r3, #1
 8007fee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	029b      	lsls	r3, r3, #10
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008004:	b29a      	uxth	r2, r3
 8008006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800800a:	801a      	strh	r2, [r3, #0]
 800800c:	e02c      	b.n	8008068 <USB_EPStartXfer+0x1bf0>
 800800e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	785b      	ldrb	r3, [r3, #1]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d124      	bne.n	8008068 <USB_EPStartXfer+0x1bf0>
 800801e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800802c:	b29b      	uxth	r3, r3
 800802e:	461a      	mov	r2, r3
 8008030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008034:	4413      	add	r3, r2
 8008036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800803a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	011a      	lsls	r2, r3, #4
 8008048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804c:	4413      	add	r3, r2
 800804e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008052:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805a:	b29a      	uxth	r2, r3
 800805c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	e001      	b.n	8008068 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e03a      	b.n	80080de <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008092:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008096:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800809a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800809e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80080a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80080aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	441a      	add	r2, r3
 80080c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80080c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d8:	b29b      	uxth	r3, r3
 80080da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d020      	beq.n	800813c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29b      	uxth	r3, r3
 8008108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800810c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008110:	81bb      	strh	r3, [r7, #12]
 8008112:	89bb      	ldrh	r3, [r7, #12]
 8008114:	f083 0310 	eor.w	r3, r3, #16
 8008118:	81bb      	strh	r3, [r7, #12]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	441a      	add	r2, r3
 8008124:	89bb      	ldrh	r3, [r7, #12]
 8008126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800812e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008136:	b29b      	uxth	r3, r3
 8008138:	8013      	strh	r3, [r2, #0]
 800813a:	e01f      	b.n	800817c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29b      	uxth	r3, r3
 800814a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800814e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008152:	81fb      	strh	r3, [r7, #14]
 8008154:	89fb      	ldrh	r3, [r7, #14]
 8008156:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800815a:	81fb      	strh	r3, [r7, #14]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	441a      	add	r2, r3
 8008166:	89fb      	ldrh	r3, [r7, #14]
 8008168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008178:	b29b      	uxth	r3, r3
 800817a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	bc80      	pop	{r7}
 8008186:	4770      	bx	lr

08008188 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	7b1b      	ldrb	r3, [r3, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f040 809d 	bne.w	80082d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d04c      	beq.n	800823e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	823b      	strh	r3, [r7, #16]
 80081b2:	8a3b      	ldrh	r3, [r7, #16]
 80081b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01b      	beq.n	80081f4 <USB_EPClearStall+0x6c>
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d2:	81fb      	strh	r3, [r7, #14]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	441a      	add	r2, r3
 80081de:	89fb      	ldrh	r3, [r7, #14]
 80081e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	78db      	ldrb	r3, [r3, #3]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d06c      	beq.n	80082d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008212:	81bb      	strh	r3, [r7, #12]
 8008214:	89bb      	ldrh	r3, [r7, #12]
 8008216:	f083 0320 	eor.w	r3, r3, #32
 800821a:	81bb      	strh	r3, [r7, #12]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	441a      	add	r2, r3
 8008226:	89bb      	ldrh	r3, [r7, #12]
 8008228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008238:	b29b      	uxth	r3, r3
 800823a:	8013      	strh	r3, [r2, #0]
 800823c:	e04b      	b.n	80082d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	82fb      	strh	r3, [r7, #22]
 800824c:	8afb      	ldrh	r3, [r7, #22]
 800824e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d01b      	beq.n	800828e <USB_EPClearStall+0x106>
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826c:	82bb      	strh	r3, [r7, #20]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	441a      	add	r2, r3
 8008278:	8abb      	ldrh	r3, [r7, #20]
 800827a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800827e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828a:	b29b      	uxth	r3, r3
 800828c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a4:	827b      	strh	r3, [r7, #18]
 80082a6:	8a7b      	ldrh	r3, [r7, #18]
 80082a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082ac:	827b      	strh	r3, [r7, #18]
 80082ae:	8a7b      	ldrh	r3, [r7, #18]
 80082b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082b4:	827b      	strh	r3, [r7, #18]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	441a      	add	r2, r3
 80082c0:	8a7b      	ldrh	r3, [r7, #18]
 80082c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d103      	bne.n	80082fc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2280      	movs	r2, #128	; 0x80
 80082f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr

0800831c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr

08008330 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800833e:	b29b      	uxth	r3, r3
 8008340:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008342:	68fb      	ldr	r3, [r7, #12]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	bc80      	pop	{r7}
 800834c:	4770      	bx	lr

0800834e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	bc80      	pop	{r7}
 8008362:	4770      	bx	lr

08008364 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008364:	b480      	push	{r7}
 8008366:	b08d      	sub	sp, #52	; 0x34
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4611      	mov	r1, r2
 8008370:	461a      	mov	r2, r3
 8008372:	460b      	mov	r3, r1
 8008374:	80fb      	strh	r3, [r7, #6]
 8008376:	4613      	mov	r3, r2
 8008378:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800837a:	88bb      	ldrh	r3, [r7, #4]
 800837c:	3301      	adds	r3, #1
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800838a:	88fb      	ldrh	r3, [r7, #6]
 800838c:	005a      	lsls	r2, r3, #1
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800839c:	e01e      	b.n	80083dc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	3301      	adds	r3, #1
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	021b      	lsls	r3, r3, #8
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	b29a      	uxth	r2, r3
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	3302      	adds	r3, #2
 80083c8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	3302      	adds	r3, #2
 80083ce:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	3301      	adds	r3, #1
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	3b01      	subs	r3, #1
 80083da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1dd      	bne.n	800839e <USB_WritePMA+0x3a>
  }
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	3734      	adds	r7, #52	; 0x34
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr

080083ee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b08b      	sub	sp, #44	; 0x2c
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	60b9      	str	r1, [r7, #8]
 80083f8:	4611      	mov	r1, r2
 80083fa:	461a      	mov	r2, r3
 80083fc:	460b      	mov	r3, r1
 80083fe:	80fb      	strh	r3, [r7, #6]
 8008400:	4613      	mov	r3, r2
 8008402:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008404:	88bb      	ldrh	r3, [r7, #4]
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	b29b      	uxth	r3, r3
 800840a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008414:	88fb      	ldrh	r3, [r7, #6]
 8008416:	005a      	lsls	r2, r3, #1
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008420:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
 8008426:	e01b      	b.n	8008460 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	3302      	adds	r3, #2
 8008434:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	b2da      	uxtb	r2, r3
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	3301      	adds	r3, #1
 8008442:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	0a1b      	lsrs	r3, r3, #8
 8008448:	b2da      	uxtb	r2, r3
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	3301      	adds	r3, #1
 8008452:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	3302      	adds	r3, #2
 8008458:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	3b01      	subs	r3, #1
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e0      	bne.n	8008428 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008466:	88bb      	ldrh	r3, [r7, #4]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	b29b      	uxth	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d007      	beq.n	8008482 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	b29b      	uxth	r3, r3
 8008478:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	b2da      	uxtb	r2, r3
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	701a      	strb	r2, [r3, #0]
  }
}
 8008482:	bf00      	nop
 8008484:	372c      	adds	r7, #44	; 0x2c
 8008486:	46bd      	mov	sp, r7
 8008488:	bc80      	pop	{r7}
 800848a:	4770      	bx	lr

0800848c <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800849c:	2340      	movs	r3, #64	; 0x40
 800849e:	2203      	movs	r2, #3
 80084a0:	2181      	movs	r1, #129	; 0x81
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fd47 	bl	8009f36 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80084ae:	2340      	movs	r3, #64	; 0x40
 80084b0:	2203      	movs	r2, #3
 80084b2:	2101      	movs	r1, #1
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 fd3e 	bl	8009f36 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80084c2:	2054      	movs	r0, #84	; 0x54
 80084c4:	f001 fe4c 	bl	800a160 <USBD_static_malloc>
 80084c8:	4602      	mov	r2, r0
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d102      	bne.n	80084e0 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80084da:	2301      	movs	r3, #1
 80084dc:	73fb      	strb	r3, [r7, #15]
 80084de:	e012      	b.n	8008506 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e6:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	2340      	movs	r3, #64	; 0x40
 80084fe:	2101      	movs	r1, #1
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 fe09 	bl	800a118 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800851c:	2181      	movs	r1, #129	; 0x81
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f001 fd2f 	bl	8009f82 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800852a:	2101      	movs	r1, #1
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 fd28 	bl	8009f82 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00e      	beq.n	8008562 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008554:	4618      	mov	r0, r3
 8008556:	f001 fe0f 	bl	800a178 <USBD_static_free>
    pdev->pClassData = NULL;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008596:	2b00      	cmp	r3, #0
 8008598:	d051      	beq.n	800863e <USBD_CUSTOM_HID_Setup+0xd2>
 800859a:	2b20      	cmp	r3, #32
 800859c:	f040 80d8 	bne.w	8008750 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	3b02      	subs	r3, #2
 80085a6:	2b09      	cmp	r3, #9
 80085a8:	d841      	bhi.n	800862e <USBD_CUSTOM_HID_Setup+0xc2>
 80085aa:	a201      	add	r2, pc, #4	; (adr r2, 80085b0 <USBD_CUSTOM_HID_Setup+0x44>)
 80085ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b0:	08008609 	.word	0x08008609
 80085b4:	080085e7 	.word	0x080085e7
 80085b8:	0800862f 	.word	0x0800862f
 80085bc:	0800862f 	.word	0x0800862f
 80085c0:	0800862f 	.word	0x0800862f
 80085c4:	0800862f 	.word	0x0800862f
 80085c8:	0800862f 	.word	0x0800862f
 80085cc:	08008619 	.word	0x08008619
 80085d0:	080085f7 	.word	0x080085f7
 80085d4:	080085d9 	.word	0x080085d9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	885b      	ldrh	r3, [r3, #2]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80085e4:	e02a      	b.n	800863c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	3340      	adds	r3, #64	; 0x40
 80085ea:	2201      	movs	r2, #1
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 f999 	bl	8009926 <USBD_CtlSendData>
          break;
 80085f4:	e022      	b.n	800863c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	885b      	ldrh	r3, [r3, #2]
 80085fa:	0a1b      	lsrs	r3, r3, #8
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8008606:	e019      	b.n	800863c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	3344      	adds	r3, #68	; 0x44
 800860c:	2201      	movs	r2, #1
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 f988 	bl	8009926 <USBD_CtlSendData>
          break;
 8008616:	e011      	b.n	800863c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	2201      	movs	r2, #1
 800861c:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800861e:	6939      	ldr	r1, [r7, #16]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	88db      	ldrh	r3, [r3, #6]
 8008624:	461a      	mov	r2, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 f9ab 	bl	8009982 <USBD_CtlPrepareRx>
          break;
 800862c:	e006      	b.n	800863c <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f90e 	bl	8009852 <USBD_CtlError>
          ret = USBD_FAIL;
 8008636:	2302      	movs	r3, #2
 8008638:	75fb      	strb	r3, [r7, #23]
          break;
 800863a:	bf00      	nop
      }
      break;
 800863c:	e08f      	b.n	800875e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	785b      	ldrb	r3, [r3, #1]
 8008642:	2b0b      	cmp	r3, #11
 8008644:	d87c      	bhi.n	8008740 <USBD_CUSTOM_HID_Setup+0x1d4>
 8008646:	a201      	add	r2, pc, #4	; (adr r2, 800864c <USBD_CUSTOM_HID_Setup+0xe0>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	0800867d 	.word	0x0800867d
 8008650:	08008741 	.word	0x08008741
 8008654:	08008741 	.word	0x08008741
 8008658:	08008741 	.word	0x08008741
 800865c:	08008741 	.word	0x08008741
 8008660:	08008741 	.word	0x08008741
 8008664:	080086a5 	.word	0x080086a5
 8008668:	08008741 	.word	0x08008741
 800866c:	08008741 	.word	0x08008741
 8008670:	08008741 	.word	0x08008741
 8008674:	080086f3 	.word	0x080086f3
 8008678:	0800871b 	.word	0x0800871b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008682:	2b03      	cmp	r3, #3
 8008684:	d107      	bne.n	8008696 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008686:	f107 030e 	add.w	r3, r7, #14
 800868a:	2202      	movs	r2, #2
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 f949 	bl	8009926 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008694:	e05b      	b.n	800874e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 f8da 	bl	8009852 <USBD_CtlError>
            ret = USBD_FAIL;
 800869e:	2302      	movs	r3, #2
 80086a0:	75fb      	strb	r3, [r7, #23]
          break;
 80086a2:	e054      	b.n	800874e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	885b      	ldrh	r3, [r3, #2]
 80086a8:	0a1b      	lsrs	r3, r3, #8
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b22      	cmp	r3, #34	; 0x22
 80086ae:	d10b      	bne.n	80086c8 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	88db      	ldrh	r3, [r3, #6]
 80086b4:	2b1d      	cmp	r3, #29
 80086b6:	bf28      	it	cs
 80086b8:	231d      	movcs	r3, #29
 80086ba:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	61bb      	str	r3, [r7, #24]
 80086c6:	e00d      	b.n	80086e4 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	885b      	ldrh	r3, [r3, #2]
 80086cc:	0a1b      	lsrs	r3, r3, #8
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	2b21      	cmp	r3, #33	; 0x21
 80086d2:	d107      	bne.n	80086e4 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80086d4:	4b24      	ldr	r3, [pc, #144]	; (8008768 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80086d6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	88db      	ldrh	r3, [r3, #6]
 80086dc:	2b09      	cmp	r3, #9
 80086de:	bf28      	it	cs
 80086e0:	2309      	movcs	r3, #9
 80086e2:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80086e4:	8bfb      	ldrh	r3, [r7, #30]
 80086e6:	461a      	mov	r2, r3
 80086e8:	69b9      	ldr	r1, [r7, #24]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f001 f91b 	bl	8009926 <USBD_CtlSendData>
          break;
 80086f0:	e02d      	b.n	800874e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d107      	bne.n	800870c <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	3348      	adds	r3, #72	; 0x48
 8008700:	2201      	movs	r2, #1
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 f90e 	bl	8009926 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800870a:	e020      	b.n	800874e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 f89f 	bl	8009852 <USBD_CtlError>
            ret = USBD_FAIL;
 8008714:	2302      	movs	r3, #2
 8008716:	75fb      	strb	r3, [r7, #23]
          break;
 8008718:	e019      	b.n	800874e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008720:	2b03      	cmp	r3, #3
 8008722:	d106      	bne.n	8008732 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	885b      	ldrh	r3, [r3, #2]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008730:	e00d      	b.n	800874e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 f88c 	bl	8009852 <USBD_CtlError>
            ret = USBD_FAIL;
 800873a:	2302      	movs	r3, #2
 800873c:	75fb      	strb	r3, [r7, #23]
          break;
 800873e:	e006      	b.n	800874e <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 f885 	bl	8009852 <USBD_CtlError>
          ret = USBD_FAIL;
 8008748:	2302      	movs	r3, #2
 800874a:	75fb      	strb	r3, [r7, #23]
          break;
 800874c:	bf00      	nop
      }
      break;
 800874e:	e006      	b.n	800875e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 f87d 	bl	8009852 <USBD_CtlError>
      ret = USBD_FAIL;
 8008758:	2302      	movs	r3, #2
 800875a:	75fb      	strb	r3, [r7, #23]
      break;
 800875c:	bf00      	nop
  }
  return ret;
 800875e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3720      	adds	r7, #32
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	200000d4 	.word	0x200000d4

0800876c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008780:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008788:	2b03      	cmp	r3, #3
 800878a:	d111      	bne.n	80087b0 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10a      	bne.n	80087ac <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800879e:	88fb      	ldrh	r3, [r7, #6]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	2181      	movs	r1, #129	; 0x81
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f001 fc94 	bl	800a0d2 <USBD_LL_Transmit>
 80087aa:	e001      	b.n	80087b0 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2229      	movs	r2, #41	; 0x29
 80087c8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80087ca:	4b03      	ldr	r3, [pc, #12]	; (80087d8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	20000050 	.word	0x20000050

080087dc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2229      	movs	r2, #41	; 0x29
 80087e8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80087ea:	4b03      	ldr	r3, [pc, #12]	; (80087f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	2000007c 	.word	0x2000007c

080087fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2229      	movs	r2, #41	; 0x29
 8008808:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800880a:	4b03      	ldr	r3, [pc, #12]	; (8008818 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	200000a8 	.word	0x200000a8

0800881c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	bc80      	pop	{r7}
 800883e:	4770      	bx	lr

08008840 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008852:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4610      	mov	r0, r2
 8008860:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	2101      	movs	r1, #1
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f001 fc55 	bl	800a118 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008886:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888c:	2b01      	cmp	r3, #1
 800888e:	d109      	bne.n	80088a4 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4610      	mov	r0, r2
 800889c:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	220a      	movs	r2, #10
 80088bc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80088be:	4b03      	ldr	r3, [pc, #12]	; (80088cc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	200000e0 	.word	0x200000e0

080088d0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80088da:	2302      	movs	r3, #2
 80088dc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bc80      	pop	{r7}
 80088fa:	4770      	bx	lr

080088fc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4613      	mov	r3, r2
 8008908:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008910:	2302      	movs	r3, #2
 8008912:	e01a      	b.n	800894a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	79fa      	ldrb	r2, [r7, #7]
 8008940:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f001 fa8c 	bl	8009e60 <USBD_LL_Init>

  return USBD_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008952:	b480      	push	{r7}
 8008954:	b085      	sub	sp, #20
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d006      	beq.n	8008974 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]
 8008972:	e001      	b.n	8008978 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008974:	2302      	movs	r3, #2
 8008976:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	bc80      	pop	{r7}
 8008982:	4770      	bx	lr

08008984 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 fab7 	bl	8009f00 <USBD_LL_Start>

  return USBD_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr

080089b0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	460b      	mov	r3, r1
 80089ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089bc:	2302      	movs	r3, #2
 80089be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00c      	beq.n	80089e4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	78fa      	ldrb	r2, [r7, #3]
 80089d4:	4611      	mov	r1, r2
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	78fa      	ldrb	r2, [r7, #3]
 8008a04:	4611      	mov	r1, r2
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3

  return USBD_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fed7 	bl	80097da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008a48:	f003 031f 	and.w	r3, r3, #31
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d016      	beq.n	8008a7e <USBD_LL_SetupStage+0x6a>
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d81c      	bhi.n	8008a8e <USBD_LL_SetupStage+0x7a>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <USBD_LL_SetupStage+0x4a>
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d008      	beq.n	8008a6e <USBD_LL_SetupStage+0x5a>
 8008a5c:	e017      	b.n	8008a8e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f9ca 	bl	8008e00 <USBD_StdDevReq>
      break;
 8008a6c:	e01a      	b.n	8008aa4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa2c 	bl	8008ed4 <USBD_StdItfReq>
      break;
 8008a7c:	e012      	b.n	8008aa4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa6c 	bl	8008f64 <USBD_StdEPReq>
      break;
 8008a8c:	e00a      	b.n	8008aa4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008a94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f001 fa8f 	bl	8009fc0 <USBD_LL_StallEP>
      break;
 8008aa2:	bf00      	nop
  }

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d14b      	bne.n	8008b5a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ac8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d134      	bne.n	8008b3e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d919      	bls.n	8008b14 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	1ad2      	subs	r2, r2, r3
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d203      	bcs.n	8008b02 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	e002      	b.n	8008b08 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 ff56 	bl	80099be <USBD_CtlContinueRx>
 8008b12:	e038      	b.n	8008b86 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d105      	bne.n	8008b36 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 ff53 	bl	80099e2 <USBD_CtlSendStatus>
 8008b3c:	e023      	b.n	8008b86 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b44:	2b05      	cmp	r3, #5
 8008b46:	d11e      	bne.n	8008b86 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008b50:	2100      	movs	r1, #0
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f001 fa34 	bl	8009fc0 <USBD_LL_StallEP>
 8008b58:	e015      	b.n	8008b86 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00d      	beq.n	8008b82 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d108      	bne.n	8008b82 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	7afa      	ldrb	r2, [r7, #11]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	4798      	blx	r3
 8008b80:	e001      	b.n	8008b86 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b82:	2302      	movs	r3, #2
 8008b84:	e000      	b.n	8008b88 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d17f      	bne.n	8008ca4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d15c      	bne.n	8008c6e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d915      	bls.n	8008bec <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	1ad2      	subs	r2, r2, r3
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 fec0 	bl	800995e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bde:	2300      	movs	r3, #0
 8008be0:	2200      	movs	r2, #0
 8008be2:	2100      	movs	r1, #0
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f001 fa97 	bl	800a118 <USBD_LL_PrepareReceive>
 8008bea:	e04e      	b.n	8008c8a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	6912      	ldr	r2, [r2, #16]
 8008bf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bf8:	fb01 f202 	mul.w	r2, r1, r2
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d11c      	bne.n	8008c3c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d316      	bcc.n	8008c3c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d20f      	bcs.n	8008c3c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	2100      	movs	r1, #0
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 fe9c 	bl	800995e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2200      	movs	r2, #0
 8008c32:	2100      	movs	r1, #0
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f001 fa6f 	bl	800a118 <USBD_LL_PrepareReceive>
 8008c3a:	e026      	b.n	8008c8a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00a      	beq.n	8008c5e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d105      	bne.n	8008c5e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008c5e:	2180      	movs	r1, #128	; 0x80
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f001 f9ad 	bl	8009fc0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 fece 	bl	8009a08 <USBD_CtlReceiveStatus>
 8008c6c:	e00d      	b.n	8008c8a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d004      	beq.n	8008c82 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008c82:	2180      	movs	r1, #128	; 0x80
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f001 f99b 	bl	8009fc0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d11d      	bne.n	8008cd0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f7ff fe81 	bl	800899c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ca2:	e015      	b.n	8008cd0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00d      	beq.n	8008ccc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d108      	bne.n	8008ccc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	7afa      	ldrb	r2, [r7, #11]
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	4798      	blx	r3
 8008cca:	e001      	b.n	8008cd0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e000      	b.n	8008cd2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ce2:	2340      	movs	r3, #64	; 0x40
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 f924 	bl	8009f36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2240      	movs	r2, #64	; 0x40
 8008cfa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cfe:	2340      	movs	r3, #64	; 0x40
 8008d00:	2200      	movs	r2, #0
 8008d02:	2180      	movs	r1, #128	; 0x80
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 f916 	bl	8009f36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2240      	movs	r2, #64	; 0x40
 8008d14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d009      	beq.n	8008d52 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6852      	ldr	r2, [r2, #4]
 8008d4a:	b2d2      	uxtb	r2, r2
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
  }

  return USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	460b      	mov	r3, r1
 8008d66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr

08008d7a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2204      	movs	r2, #4
 8008d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bc80      	pop	{r7}
 8008da0:	4770      	bx	lr

08008da2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d105      	bne.n	8008dc0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bc80      	pop	{r7}
 8008dca:	4770      	bx	lr

08008dcc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d10b      	bne.n	8008df6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d005      	beq.n	8008df6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e16:	2b40      	cmp	r3, #64	; 0x40
 8008e18:	d005      	beq.n	8008e26 <USBD_StdDevReq+0x26>
 8008e1a:	2b40      	cmp	r3, #64	; 0x40
 8008e1c:	d84f      	bhi.n	8008ebe <USBD_StdDevReq+0xbe>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d009      	beq.n	8008e36 <USBD_StdDevReq+0x36>
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	d14b      	bne.n	8008ebe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	4798      	blx	r3
      break;
 8008e34:	e048      	b.n	8008ec8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	785b      	ldrb	r3, [r3, #1]
 8008e3a:	2b09      	cmp	r3, #9
 8008e3c:	d839      	bhi.n	8008eb2 <USBD_StdDevReq+0xb2>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <USBD_StdDevReq+0x44>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e95 	.word	0x08008e95
 8008e48:	08008ea9 	.word	0x08008ea9
 8008e4c:	08008eb3 	.word	0x08008eb3
 8008e50:	08008e9f 	.word	0x08008e9f
 8008e54:	08008eb3 	.word	0x08008eb3
 8008e58:	08008e77 	.word	0x08008e77
 8008e5c:	08008e6d 	.word	0x08008e6d
 8008e60:	08008eb3 	.word	0x08008eb3
 8008e64:	08008e8b 	.word	0x08008e8b
 8008e68:	08008e81 	.word	0x08008e81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f9dc 	bl	800922c <USBD_GetDescriptor>
          break;
 8008e74:	e022      	b.n	8008ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fb3f 	bl	80094fc <USBD_SetAddress>
          break;
 8008e7e:	e01d      	b.n	8008ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fb7e 	bl	8009584 <USBD_SetConfig>
          break;
 8008e88:	e018      	b.n	8008ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fc07 	bl	80096a0 <USBD_GetConfig>
          break;
 8008e92:	e013      	b.n	8008ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fc37 	bl	800970a <USBD_GetStatus>
          break;
 8008e9c:	e00e      	b.n	8008ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fc65 	bl	8009770 <USBD_SetFeature>
          break;
 8008ea6:	e009      	b.n	8008ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fc74 	bl	8009798 <USBD_ClrFeature>
          break;
 8008eb0:	e004      	b.n	8008ebc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fccc 	bl	8009852 <USBD_CtlError>
          break;
 8008eba:	bf00      	nop
      }
      break;
 8008ebc:	e004      	b.n	8008ec8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fcc6 	bl	8009852 <USBD_CtlError>
      break;
 8008ec6:	bf00      	nop
  }

  return ret;
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop

08008ed4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eea:	2b40      	cmp	r3, #64	; 0x40
 8008eec:	d005      	beq.n	8008efa <USBD_StdItfReq+0x26>
 8008eee:	2b40      	cmp	r3, #64	; 0x40
 8008ef0:	d82e      	bhi.n	8008f50 <USBD_StdItfReq+0x7c>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <USBD_StdItfReq+0x26>
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d12a      	bne.n	8008f50 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f00:	3b01      	subs	r3, #1
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d81d      	bhi.n	8008f42 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	889b      	ldrh	r3, [r3, #4]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d813      	bhi.n	8008f38 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	4798      	blx	r3
 8008f1e:	4603      	mov	r3, r0
 8008f20:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	88db      	ldrh	r3, [r3, #6]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d110      	bne.n	8008f4c <USBD_StdItfReq+0x78>
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10d      	bne.n	8008f4c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fd56 	bl	80099e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f36:	e009      	b.n	8008f4c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fc89 	bl	8009852 <USBD_CtlError>
          break;
 8008f40:	e004      	b.n	8008f4c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fc84 	bl	8009852 <USBD_CtlError>
          break;
 8008f4a:	e000      	b.n	8008f4e <USBD_StdItfReq+0x7a>
          break;
 8008f4c:	bf00      	nop
      }
      break;
 8008f4e:	e004      	b.n	8008f5a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fc7d 	bl	8009852 <USBD_CtlError>
      break;
 8008f58:	bf00      	nop
  }

  return USBD_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	889b      	ldrh	r3, [r3, #4]
 8008f76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f80:	2b40      	cmp	r3, #64	; 0x40
 8008f82:	d007      	beq.n	8008f94 <USBD_StdEPReq+0x30>
 8008f84:	2b40      	cmp	r3, #64	; 0x40
 8008f86:	f200 8146 	bhi.w	8009216 <USBD_StdEPReq+0x2b2>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <USBD_StdEPReq+0x40>
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	f040 8141 	bne.w	8009216 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	4798      	blx	r3
      break;
 8008fa2:	e13d      	b.n	8009220 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	d10a      	bne.n	8008fc6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	4798      	blx	r3
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	e12d      	b.n	8009222 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	785b      	ldrb	r3, [r3, #1]
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d007      	beq.n	8008fde <USBD_StdEPReq+0x7a>
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	f300 811b 	bgt.w	800920a <USBD_StdEPReq+0x2a6>
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d072      	beq.n	80090be <USBD_StdEPReq+0x15a>
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d03a      	beq.n	8009052 <USBD_StdEPReq+0xee>
 8008fdc:	e115      	b.n	800920a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d002      	beq.n	8008fee <USBD_StdEPReq+0x8a>
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d015      	beq.n	8009018 <USBD_StdEPReq+0xb4>
 8008fec:	e02b      	b.n	8009046 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00c      	beq.n	800900e <USBD_StdEPReq+0xaa>
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	2b80      	cmp	r3, #128	; 0x80
 8008ff8:	d009      	beq.n	800900e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 ffde 	bl	8009fc0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009004:	2180      	movs	r1, #128	; 0x80
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 ffda 	bl	8009fc0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800900c:	e020      	b.n	8009050 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fc1e 	bl	8009852 <USBD_CtlError>
              break;
 8009016:	e01b      	b.n	8009050 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	885b      	ldrh	r3, [r3, #2]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10e      	bne.n	800903e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <USBD_StdEPReq+0xda>
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b80      	cmp	r3, #128	; 0x80
 800902a:	d008      	beq.n	800903e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	88db      	ldrh	r3, [r3, #6]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 ffc1 	bl	8009fc0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fccf 	bl	80099e2 <USBD_CtlSendStatus>

              break;
 8009044:	e004      	b.n	8009050 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fc02 	bl	8009852 <USBD_CtlError>
              break;
 800904e:	bf00      	nop
          }
          break;
 8009050:	e0e0      	b.n	8009214 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009058:	2b02      	cmp	r3, #2
 800905a:	d002      	beq.n	8009062 <USBD_StdEPReq+0xfe>
 800905c:	2b03      	cmp	r3, #3
 800905e:	d015      	beq.n	800908c <USBD_StdEPReq+0x128>
 8009060:	e026      	b.n	80090b0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00c      	beq.n	8009082 <USBD_StdEPReq+0x11e>
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	2b80      	cmp	r3, #128	; 0x80
 800906c:	d009      	beq.n	8009082 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800906e:	7bbb      	ldrb	r3, [r7, #14]
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 ffa4 	bl	8009fc0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009078:	2180      	movs	r1, #128	; 0x80
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 ffa0 	bl	8009fc0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009080:	e01c      	b.n	80090bc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fbe4 	bl	8009852 <USBD_CtlError>
              break;
 800908a:	e017      	b.n	80090bc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d112      	bne.n	80090ba <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800909a:	2b00      	cmp	r3, #0
 800909c:	d004      	beq.n	80090a8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800909e:	7bbb      	ldrb	r3, [r7, #14]
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 ffab 	bl	8009ffe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fc9a 	bl	80099e2 <USBD_CtlSendStatus>
              }
              break;
 80090ae:	e004      	b.n	80090ba <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fbcd 	bl	8009852 <USBD_CtlError>
              break;
 80090b8:	e000      	b.n	80090bc <USBD_StdEPReq+0x158>
              break;
 80090ba:	bf00      	nop
          }
          break;
 80090bc:	e0aa      	b.n	8009214 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d002      	beq.n	80090ce <USBD_StdEPReq+0x16a>
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d032      	beq.n	8009132 <USBD_StdEPReq+0x1ce>
 80090cc:	e097      	b.n	80091fe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d007      	beq.n	80090e4 <USBD_StdEPReq+0x180>
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	2b80      	cmp	r3, #128	; 0x80
 80090d8:	d004      	beq.n	80090e4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fbb8 	bl	8009852 <USBD_CtlError>
                break;
 80090e2:	e091      	b.n	8009208 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	da0b      	bge.n	8009104 <USBD_StdEPReq+0x1a0>
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
 80090ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090f2:	4613      	mov	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	3310      	adds	r3, #16
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	4413      	add	r3, r2
 8009100:	3304      	adds	r3, #4
 8009102:	e00b      	b.n	800911c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	4413      	add	r3, r2
 800911a:	3304      	adds	r3, #4
 800911c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2202      	movs	r2, #2
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fbfb 	bl	8009926 <USBD_CtlSendData>
              break;
 8009130:	e06a      	b.n	8009208 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009136:	2b00      	cmp	r3, #0
 8009138:	da11      	bge.n	800915e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	f003 020f 	and.w	r2, r3, #15
 8009140:	6879      	ldr	r1, [r7, #4]
 8009142:	4613      	mov	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	440b      	add	r3, r1
 800914c:	3318      	adds	r3, #24
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d117      	bne.n	8009184 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fb7b 	bl	8009852 <USBD_CtlError>
                  break;
 800915c:	e054      	b.n	8009208 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	f003 020f 	and.w	r2, r3, #15
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	440b      	add	r3, r1
 8009170:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d104      	bne.n	8009184 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fb68 	bl	8009852 <USBD_CtlError>
                  break;
 8009182:	e041      	b.n	8009208 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009188:	2b00      	cmp	r3, #0
 800918a:	da0b      	bge.n	80091a4 <USBD_StdEPReq+0x240>
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009192:	4613      	mov	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	3310      	adds	r3, #16
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	4413      	add	r3, r2
 80091a0:	3304      	adds	r3, #4
 80091a2:	e00b      	b.n	80091bc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091aa:	4613      	mov	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	4413      	add	r3, r2
 80091ba:	3304      	adds	r3, #4
 80091bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091be:	7bbb      	ldrb	r3, [r7, #14]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <USBD_StdEPReq+0x266>
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	2b80      	cmp	r3, #128	; 0x80
 80091c8:	d103      	bne.n	80091d2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	e00e      	b.n	80091f0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 ff30 	bl	800a03c <USBD_LL_IsStallEP>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2201      	movs	r2, #1
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	e002      	b.n	80091f0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2200      	movs	r2, #0
 80091ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2202      	movs	r2, #2
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fb95 	bl	8009926 <USBD_CtlSendData>
              break;
 80091fc:	e004      	b.n	8009208 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fb26 	bl	8009852 <USBD_CtlError>
              break;
 8009206:	bf00      	nop
          }
          break;
 8009208:	e004      	b.n	8009214 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb20 	bl	8009852 <USBD_CtlError>
          break;
 8009212:	bf00      	nop
      }
      break;
 8009214:	e004      	b.n	8009220 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fb1a 	bl	8009852 <USBD_CtlError>
      break;
 800921e:	bf00      	nop
  }

  return ret;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800923a:	2300      	movs	r3, #0
 800923c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	2b06      	cmp	r3, #6
 800924e:	f200 8128 	bhi.w	80094a2 <USBD_GetDescriptor+0x276>
 8009252:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <USBD_GetDescriptor+0x2c>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009275 	.word	0x08009275
 800925c:	0800928d 	.word	0x0800928d
 8009260:	080092cd 	.word	0x080092cd
 8009264:	080094a3 	.word	0x080094a3
 8009268:	080094a3 	.word	0x080094a3
 800926c:	08009443 	.word	0x08009443
 8009270:	0800946f 	.word	0x0800946f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	7c12      	ldrb	r2, [r2, #16]
 8009280:	f107 0108 	add.w	r1, r7, #8
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
      break;
 800928a:	e112      	b.n	80094b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7c1b      	ldrb	r3, [r3, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10d      	bne.n	80092b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929c:	f107 0208 	add.w	r2, r7, #8
 80092a0:	4610      	mov	r0, r2
 80092a2:	4798      	blx	r3
 80092a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3301      	adds	r3, #1
 80092aa:	2202      	movs	r2, #2
 80092ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092ae:	e100      	b.n	80094b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	f107 0208 	add.w	r2, r7, #8
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
 80092c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3301      	adds	r3, #1
 80092c6:	2202      	movs	r2, #2
 80092c8:	701a      	strb	r2, [r3, #0]
      break;
 80092ca:	e0f2      	b.n	80094b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	885b      	ldrh	r3, [r3, #2]
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	f200 80ac 	bhi.w	8009430 <USBD_GetDescriptor+0x204>
 80092d8:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <USBD_GetDescriptor+0xb4>)
 80092da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092de:	bf00      	nop
 80092e0:	080092f9 	.word	0x080092f9
 80092e4:	0800932d 	.word	0x0800932d
 80092e8:	08009361 	.word	0x08009361
 80092ec:	08009395 	.word	0x08009395
 80092f0:	080093c9 	.word	0x080093c9
 80092f4:	080093fd 	.word	0x080093fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00b      	beq.n	800931c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	7c12      	ldrb	r2, [r2, #16]
 8009310:	f107 0108 	add.w	r1, r7, #8
 8009314:	4610      	mov	r0, r2
 8009316:	4798      	blx	r3
 8009318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800931a:	e091      	b.n	8009440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa97 	bl	8009852 <USBD_CtlError>
            err++;
 8009324:	7afb      	ldrb	r3, [r7, #11]
 8009326:	3301      	adds	r3, #1
 8009328:	72fb      	strb	r3, [r7, #11]
          break;
 800932a:	e089      	b.n	8009440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00b      	beq.n	8009350 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	7c12      	ldrb	r2, [r2, #16]
 8009344:	f107 0108 	add.w	r1, r7, #8
 8009348:	4610      	mov	r0, r2
 800934a:	4798      	blx	r3
 800934c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800934e:	e077      	b.n	8009440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fa7d 	bl	8009852 <USBD_CtlError>
            err++;
 8009358:	7afb      	ldrb	r3, [r7, #11]
 800935a:	3301      	adds	r3, #1
 800935c:	72fb      	strb	r3, [r7, #11]
          break;
 800935e:	e06f      	b.n	8009440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00b      	beq.n	8009384 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	7c12      	ldrb	r2, [r2, #16]
 8009378:	f107 0108 	add.w	r1, r7, #8
 800937c:	4610      	mov	r0, r2
 800937e:	4798      	blx	r3
 8009380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009382:	e05d      	b.n	8009440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fa63 	bl	8009852 <USBD_CtlError>
            err++;
 800938c:	7afb      	ldrb	r3, [r7, #11]
 800938e:	3301      	adds	r3, #1
 8009390:	72fb      	strb	r3, [r7, #11]
          break;
 8009392:	e055      	b.n	8009440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00b      	beq.n	80093b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	7c12      	ldrb	r2, [r2, #16]
 80093ac:	f107 0108 	add.w	r1, r7, #8
 80093b0:	4610      	mov	r0, r2
 80093b2:	4798      	blx	r3
 80093b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b6:	e043      	b.n	8009440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fa49 	bl	8009852 <USBD_CtlError>
            err++;
 80093c0:	7afb      	ldrb	r3, [r7, #11]
 80093c2:	3301      	adds	r3, #1
 80093c4:	72fb      	strb	r3, [r7, #11]
          break;
 80093c6:	e03b      	b.n	8009440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 0108 	add.w	r1, r7, #8
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ea:	e029      	b.n	8009440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa2f 	bl	8009852 <USBD_CtlError>
            err++;
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	3301      	adds	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
          break;
 80093fa:	e021      	b.n	8009440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	7c12      	ldrb	r2, [r2, #16]
 8009414:	f107 0108 	add.w	r1, r7, #8
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
 800941c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941e:	e00f      	b.n	8009440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa15 	bl	8009852 <USBD_CtlError>
            err++;
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	3301      	adds	r3, #1
 800942c:	72fb      	strb	r3, [r7, #11]
          break;
 800942e:	e007      	b.n	8009440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fa0d 	bl	8009852 <USBD_CtlError>
          err++;
 8009438:	7afb      	ldrb	r3, [r7, #11]
 800943a:	3301      	adds	r3, #1
 800943c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800943e:	e038      	b.n	80094b2 <USBD_GetDescriptor+0x286>
 8009440:	e037      	b.n	80094b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7c1b      	ldrb	r3, [r3, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d109      	bne.n	800945e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009452:	f107 0208 	add.w	r2, r7, #8
 8009456:	4610      	mov	r0, r2
 8009458:	4798      	blx	r3
 800945a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800945c:	e029      	b.n	80094b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f9f6 	bl	8009852 <USBD_CtlError>
        err++;
 8009466:	7afb      	ldrb	r3, [r7, #11]
 8009468:	3301      	adds	r3, #1
 800946a:	72fb      	strb	r3, [r7, #11]
      break;
 800946c:	e021      	b.n	80094b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	7c1b      	ldrb	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10d      	bne.n	8009492 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947e:	f107 0208 	add.w	r2, r7, #8
 8009482:	4610      	mov	r0, r2
 8009484:	4798      	blx	r3
 8009486:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3301      	adds	r3, #1
 800948c:	2207      	movs	r2, #7
 800948e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009490:	e00f      	b.n	80094b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f9dc 	bl	8009852 <USBD_CtlError>
        err++;
 800949a:	7afb      	ldrb	r3, [r7, #11]
 800949c:	3301      	adds	r3, #1
 800949e:	72fb      	strb	r3, [r7, #11]
      break;
 80094a0:	e007      	b.n	80094b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f9d4 	bl	8009852 <USBD_CtlError>
      err++;
 80094aa:	7afb      	ldrb	r3, [r7, #11]
 80094ac:	3301      	adds	r3, #1
 80094ae:	72fb      	strb	r3, [r7, #11]
      break;
 80094b0:	bf00      	nop
  }

  if (err != 0U)
 80094b2:	7afb      	ldrb	r3, [r7, #11]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d11c      	bne.n	80094f2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80094b8:	893b      	ldrh	r3, [r7, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d011      	beq.n	80094e2 <USBD_GetDescriptor+0x2b6>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	88db      	ldrh	r3, [r3, #6]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00d      	beq.n	80094e2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	88da      	ldrh	r2, [r3, #6]
 80094ca:	893b      	ldrh	r3, [r7, #8]
 80094cc:	4293      	cmp	r3, r2
 80094ce:	bf28      	it	cs
 80094d0:	4613      	movcs	r3, r2
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094d6:	893b      	ldrh	r3, [r7, #8]
 80094d8:	461a      	mov	r2, r3
 80094da:	68f9      	ldr	r1, [r7, #12]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fa22 	bl	8009926 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	88db      	ldrh	r3, [r3, #6]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d104      	bne.n	80094f4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fa79 	bl	80099e2 <USBD_CtlSendStatus>
 80094f0:	e000      	b.n	80094f4 <USBD_GetDescriptor+0x2c8>
    return;
 80094f2:	bf00      	nop
    }
  }
}
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop

080094fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	889b      	ldrh	r3, [r3, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d130      	bne.n	8009570 <USBD_SetAddress+0x74>
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	88db      	ldrh	r3, [r3, #6]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d12c      	bne.n	8009570 <USBD_SetAddress+0x74>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	885b      	ldrh	r3, [r3, #2]
 800951a:	2b7f      	cmp	r3, #127	; 0x7f
 800951c:	d828      	bhi.n	8009570 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	885b      	ldrh	r3, [r3, #2]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009528:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009530:	2b03      	cmp	r3, #3
 8009532:	d104      	bne.n	800953e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f98b 	bl	8009852 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953c:	e01d      	b.n	800957a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7bfa      	ldrb	r2, [r7, #15]
 8009542:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fda2 	bl	800a094 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fa46 	bl	80099e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d004      	beq.n	8009566 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009564:	e009      	b.n	800957a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956e:	e004      	b.n	800957a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f96d 	bl	8009852 <USBD_CtlError>
  }
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	885b      	ldrh	r3, [r3, #2]
 8009592:	b2da      	uxtb	r2, r3
 8009594:	4b41      	ldr	r3, [pc, #260]	; (800969c <USBD_SetConfig+0x118>)
 8009596:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009598:	4b40      	ldr	r3, [pc, #256]	; (800969c <USBD_SetConfig+0x118>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d904      	bls.n	80095aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f955 	bl	8009852 <USBD_CtlError>
 80095a8:	e075      	b.n	8009696 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d002      	beq.n	80095ba <USBD_SetConfig+0x36>
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d023      	beq.n	8009600 <USBD_SetConfig+0x7c>
 80095b8:	e062      	b.n	8009680 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80095ba:	4b38      	ldr	r3, [pc, #224]	; (800969c <USBD_SetConfig+0x118>)
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d01a      	beq.n	80095f8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80095c2:	4b36      	ldr	r3, [pc, #216]	; (800969c <USBD_SetConfig+0x118>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2203      	movs	r2, #3
 80095d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095d4:	4b31      	ldr	r3, [pc, #196]	; (800969c <USBD_SetConfig+0x118>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff f9e8 	bl	80089b0 <USBD_SetClassConfig>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d104      	bne.n	80095f0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f932 	bl	8009852 <USBD_CtlError>
            return;
 80095ee:	e052      	b.n	8009696 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f9f6 	bl	80099e2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80095f6:	e04e      	b.n	8009696 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f9f2 	bl	80099e2 <USBD_CtlSendStatus>
        break;
 80095fe:	e04a      	b.n	8009696 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009600:	4b26      	ldr	r3, [pc, #152]	; (800969c <USBD_SetConfig+0x118>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d112      	bne.n	800962e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009610:	4b22      	ldr	r3, [pc, #136]	; (800969c <USBD_SetConfig+0x118>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	461a      	mov	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800961a:	4b20      	ldr	r3, [pc, #128]	; (800969c <USBD_SetConfig+0x118>)
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff f9e4 	bl	80089ee <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f9db 	bl	80099e2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800962c:	e033      	b.n	8009696 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800962e:	4b1b      	ldr	r3, [pc, #108]	; (800969c <USBD_SetConfig+0x118>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	429a      	cmp	r2, r3
 800963a:	d01d      	beq.n	8009678 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff f9d2 	bl	80089ee <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800964a:	4b14      	ldr	r3, [pc, #80]	; (800969c <USBD_SetConfig+0x118>)
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009654:	4b11      	ldr	r3, [pc, #68]	; (800969c <USBD_SetConfig+0x118>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff f9a8 	bl	80089b0 <USBD_SetClassConfig>
 8009660:	4603      	mov	r3, r0
 8009662:	2b02      	cmp	r3, #2
 8009664:	d104      	bne.n	8009670 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f8f2 	bl	8009852 <USBD_CtlError>
            return;
 800966e:	e012      	b.n	8009696 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f9b6 	bl	80099e2 <USBD_CtlSendStatus>
        break;
 8009676:	e00e      	b.n	8009696 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f9b2 	bl	80099e2 <USBD_CtlSendStatus>
        break;
 800967e:	e00a      	b.n	8009696 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f8e5 	bl	8009852 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009688:	4b04      	ldr	r3, [pc, #16]	; (800969c <USBD_SetConfig+0x118>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff f9ad 	bl	80089ee <USBD_ClrClassConfig>
        break;
 8009694:	bf00      	nop
    }
  }
}
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	20000398 	.word	0x20000398

080096a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	88db      	ldrh	r3, [r3, #6]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d004      	beq.n	80096bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f8cc 	bl	8009852 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096ba:	e022      	b.n	8009702 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	dc02      	bgt.n	80096cc <USBD_GetConfig+0x2c>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	dc03      	bgt.n	80096d2 <USBD_GetConfig+0x32>
 80096ca:	e015      	b.n	80096f8 <USBD_GetConfig+0x58>
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d00b      	beq.n	80096e8 <USBD_GetConfig+0x48>
 80096d0:	e012      	b.n	80096f8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	3308      	adds	r3, #8
 80096dc:	2201      	movs	r2, #1
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f920 	bl	8009926 <USBD_CtlSendData>
        break;
 80096e6:	e00c      	b.n	8009702 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	3304      	adds	r3, #4
 80096ec:	2201      	movs	r2, #1
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f918 	bl	8009926 <USBD_CtlSendData>
        break;
 80096f6:	e004      	b.n	8009702 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f8a9 	bl	8009852 <USBD_CtlError>
        break;
 8009700:	bf00      	nop
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b082      	sub	sp, #8
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971a:	3b01      	subs	r3, #1
 800971c:	2b02      	cmp	r3, #2
 800971e:	d81e      	bhi.n	800975e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	88db      	ldrh	r3, [r3, #6]
 8009724:	2b02      	cmp	r3, #2
 8009726:	d004      	beq.n	8009732 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f891 	bl	8009852 <USBD_CtlError>
        break;
 8009730:	e01a      	b.n	8009768 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f043 0202 	orr.w	r2, r3, #2
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	330c      	adds	r3, #12
 8009752:	2202      	movs	r2, #2
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f8e5 	bl	8009926 <USBD_CtlSendData>
      break;
 800975c:	e004      	b.n	8009768 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f876 	bl	8009852 <USBD_CtlError>
      break;
 8009766:	bf00      	nop
  }
}
 8009768:	bf00      	nop
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	885b      	ldrh	r3, [r3, #2]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d106      	bne.n	8009790 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f929 	bl	80099e2 <USBD_CtlSendStatus>
  }
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a8:	3b01      	subs	r3, #1
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d80b      	bhi.n	80097c6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	885b      	ldrh	r3, [r3, #2]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d10c      	bne.n	80097d0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f90f 	bl	80099e2 <USBD_CtlSendStatus>
      }
      break;
 80097c4:	e004      	b.n	80097d0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f842 	bl	8009852 <USBD_CtlError>
      break;
 80097ce:	e000      	b.n	80097d2 <USBD_ClrFeature+0x3a>
      break;
 80097d0:	bf00      	nop
  }
}
 80097d2:	bf00      	nop
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	785a      	ldrb	r2, [r3, #1]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	3302      	adds	r3, #2
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	3303      	adds	r3, #3
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	b29b      	uxth	r3, r3
 8009804:	021b      	lsls	r3, r3, #8
 8009806:	b29b      	uxth	r3, r3
 8009808:	4413      	add	r3, r2
 800980a:	b29a      	uxth	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	3304      	adds	r3, #4
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	b29a      	uxth	r2, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	3305      	adds	r3, #5
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	021b      	lsls	r3, r3, #8
 8009822:	b29b      	uxth	r3, r3
 8009824:	4413      	add	r3, r2
 8009826:	b29a      	uxth	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	3306      	adds	r3, #6
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	b29a      	uxth	r2, r3
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	3307      	adds	r3, #7
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	b29b      	uxth	r3, r3
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	b29b      	uxth	r3, r3
 8009840:	4413      	add	r3, r2
 8009842:	b29a      	uxth	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	80da      	strh	r2, [r3, #6]

}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	bc80      	pop	{r7}
 8009850:	4770      	bx	lr

08009852 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800985c:	2180      	movs	r1, #128	; 0x80
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fbae 	bl	8009fc0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009864:	2100      	movs	r1, #0
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fbaa 	bl	8009fc0 <USBD_LL_StallEP>
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d032      	beq.n	80098f0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f000 f834 	bl	80098f8 <USBD_GetLen>
 8009890:	4603      	mov	r3, r0
 8009892:	3301      	adds	r3, #1
 8009894:	b29b      	uxth	r3, r3
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	b29a      	uxth	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	75fa      	strb	r2, [r7, #23]
 80098a4:	461a      	mov	r2, r3
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	4413      	add	r3, r2
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	7812      	ldrb	r2, [r2, #0]
 80098ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	75fa      	strb	r2, [r7, #23]
 80098b6:	461a      	mov	r2, r3
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4413      	add	r3, r2
 80098bc:	2203      	movs	r2, #3
 80098be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80098c0:	e012      	b.n	80098e8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	60fa      	str	r2, [r7, #12]
 80098c8:	7dfa      	ldrb	r2, [r7, #23]
 80098ca:	1c51      	adds	r1, r2, #1
 80098cc:	75f9      	strb	r1, [r7, #23]
 80098ce:	4611      	mov	r1, r2
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	440a      	add	r2, r1
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
 80098da:	1c5a      	adds	r2, r3, #1
 80098dc:	75fa      	strb	r2, [r7, #23]
 80098de:	461a      	mov	r2, r3
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	4413      	add	r3, r2
 80098e4:	2200      	movs	r2, #0
 80098e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e8      	bne.n	80098c2 <USBD_GetString+0x4e>
    }
  }
}
 80098f0:	bf00      	nop
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009904:	e005      	b.n	8009912 <USBD_GetLen+0x1a>
  {
    len++;
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	3301      	adds	r3, #1
 800990a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3301      	adds	r3, #1
 8009910:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1f5      	bne.n	8009906 <USBD_GetLen+0xe>
  }

  return len;
 800991a:	7bfb      	ldrb	r3, [r7, #15]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	bc80      	pop	{r7}
 8009924:	4770      	bx	lr

08009926 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	60f8      	str	r0, [r7, #12]
 800992e:	60b9      	str	r1, [r7, #8]
 8009930:	4613      	mov	r3, r2
 8009932:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2202      	movs	r2, #2
 8009938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800993c:	88fa      	ldrh	r2, [r7, #6]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009942:	88fa      	ldrh	r2, [r7, #6]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009948:	88fb      	ldrh	r3, [r7, #6]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	2100      	movs	r1, #0
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 fbbf 	bl	800a0d2 <USBD_LL_Transmit>

  return USBD_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	60b9      	str	r1, [r7, #8]
 8009968:	4613      	mov	r3, r2
 800996a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800996c:	88fb      	ldrh	r3, [r7, #6]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	2100      	movs	r1, #0
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 fbad 	bl	800a0d2 <USBD_LL_Transmit>

  return USBD_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	60b9      	str	r1, [r7, #8]
 800998c:	4613      	mov	r3, r2
 800998e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2203      	movs	r2, #3
 8009994:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009998:	88fa      	ldrh	r2, [r7, #6]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80099a0:	88fa      	ldrh	r2, [r7, #6]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099a8:	88fb      	ldrh	r3, [r7, #6]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	2100      	movs	r1, #0
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f000 fbb2 	bl	800a118 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	60f8      	str	r0, [r7, #12]
 80099c6:	60b9      	str	r1, [r7, #8]
 80099c8:	4613      	mov	r3, r2
 80099ca:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	2100      	movs	r1, #0
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 fba0 	bl	800a118 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2204      	movs	r2, #4
 80099ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099f2:	2300      	movs	r3, #0
 80099f4:	2200      	movs	r2, #0
 80099f6:	2100      	movs	r1, #0
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fb6a 	bl	800a0d2 <USBD_LL_Transmit>

  return USBD_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2205      	movs	r2, #5
 8009a14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fb7a 	bl	800a118 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a34:	2200      	movs	r2, #0
 8009a36:	4912      	ldr	r1, [pc, #72]	; (8009a80 <MX_USB_DEVICE_Init+0x50>)
 8009a38:	4812      	ldr	r0, [pc, #72]	; (8009a84 <MX_USB_DEVICE_Init+0x54>)
 8009a3a:	f7fe ff5f 	bl	80088fc <USBD_Init>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a44:	f7f7 fa16 	bl	8000e74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009a48:	490f      	ldr	r1, [pc, #60]	; (8009a88 <MX_USB_DEVICE_Init+0x58>)
 8009a4a:	480e      	ldr	r0, [pc, #56]	; (8009a84 <MX_USB_DEVICE_Init+0x54>)
 8009a4c:	f7fe ff81 	bl	8008952 <USBD_RegisterClass>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a56:	f7f7 fa0d 	bl	8000e74 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009a5a:	490c      	ldr	r1, [pc, #48]	; (8009a8c <MX_USB_DEVICE_Init+0x5c>)
 8009a5c:	4809      	ldr	r0, [pc, #36]	; (8009a84 <MX_USB_DEVICE_Init+0x54>)
 8009a5e:	f7fe ff37 	bl	80088d0 <USBD_CUSTOM_HID_RegisterInterface>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a68:	f7f7 fa04 	bl	8000e74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a6c:	4805      	ldr	r0, [pc, #20]	; (8009a84 <MX_USB_DEVICE_Init+0x54>)
 8009a6e:	f7fe ff89 	bl	8008984 <USBD_Start>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a78:	f7f7 f9fc 	bl	8000e74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a7c:	bf00      	nop
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	2000011c 	.word	0x2000011c
 8009a84:	2000039c 	.word	0x2000039c
 8009a88:	20000018 	.word	0x20000018
 8009a8c:	2000010c 	.word	0x2000010c

08009a90 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009a90:	b480      	push	{r7}
 8009a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bc80      	pop	{r7}
 8009a9c:	4770      	bx	lr

08009a9e <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009aa2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bc80      	pop	{r7}
 8009aaa:	4770      	bx	lr

08009aac <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009ab4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bc80      	pop	{r7}
 8009abe:	4770      	bx	lr

08009ac0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	6039      	str	r1, [r7, #0]
 8009aca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	2212      	movs	r2, #18
 8009ad0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ad2:	4b03      	ldr	r3, [pc, #12]	; (8009ae0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bc80      	pop	{r7}
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	20000138 	.word	0x20000138

08009ae4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	6039      	str	r1, [r7, #0]
 8009aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2204      	movs	r2, #4
 8009af4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009af6:	4b03      	ldr	r3, [pc, #12]	; (8009b04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bc80      	pop	{r7}
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	2000014c 	.word	0x2000014c

08009b08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	6039      	str	r1, [r7, #0]
 8009b12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d105      	bne.n	8009b26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	4907      	ldr	r1, [pc, #28]	; (8009b3c <USBD_FS_ProductStrDescriptor+0x34>)
 8009b1e:	4808      	ldr	r0, [pc, #32]	; (8009b40 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b20:	f7ff fea8 	bl	8009874 <USBD_GetString>
 8009b24:	e004      	b.n	8009b30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	4904      	ldr	r1, [pc, #16]	; (8009b3c <USBD_FS_ProductStrDescriptor+0x34>)
 8009b2a:	4805      	ldr	r0, [pc, #20]	; (8009b40 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b2c:	f7ff fea2 	bl	8009874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b30:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20000660 	.word	0x20000660
 8009b40:	0800b82c 	.word	0x0800b82c

08009b44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	4904      	ldr	r1, [pc, #16]	; (8009b64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b54:	4804      	ldr	r0, [pc, #16]	; (8009b68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b56:	f7ff fe8d 	bl	8009874 <USBD_GetString>
  return USBD_StrDesc;
 8009b5a:	4b02      	ldr	r3, [pc, #8]	; (8009b64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	20000660 	.word	0x20000660
 8009b68:	0800b83c 	.word	0x0800b83c

08009b6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	6039      	str	r1, [r7, #0]
 8009b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	221a      	movs	r2, #26
 8009b7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b7e:	f000 f843 	bl	8009c08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b82:	4b02      	ldr	r3, [pc, #8]	; (8009b8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	20000150 	.word	0x20000150

08009b90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d105      	bne.n	8009bae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	4907      	ldr	r1, [pc, #28]	; (8009bc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ba6:	4808      	ldr	r0, [pc, #32]	; (8009bc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ba8:	f7ff fe64 	bl	8009874 <USBD_GetString>
 8009bac:	e004      	b.n	8009bb8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	4904      	ldr	r1, [pc, #16]	; (8009bc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bb2:	4805      	ldr	r0, [pc, #20]	; (8009bc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bb4:	f7ff fe5e 	bl	8009874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bb8:	4b02      	ldr	r3, [pc, #8]	; (8009bc4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20000660 	.word	0x20000660
 8009bc8:	0800b848 	.word	0x0800b848

08009bcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	6039      	str	r1, [r7, #0]
 8009bd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bd8:	79fb      	ldrb	r3, [r7, #7]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d105      	bne.n	8009bea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	4907      	ldr	r1, [pc, #28]	; (8009c00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009be2:	4808      	ldr	r0, [pc, #32]	; (8009c04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009be4:	f7ff fe46 	bl	8009874 <USBD_GetString>
 8009be8:	e004      	b.n	8009bf4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	4904      	ldr	r1, [pc, #16]	; (8009c00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bee:	4805      	ldr	r0, [pc, #20]	; (8009c04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bf0:	f7ff fe40 	bl	8009874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bf4:	4b02      	ldr	r3, [pc, #8]	; (8009c00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	20000660 	.word	0x20000660
 8009c04:	0800b85c 	.word	0x0800b85c

08009c08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c0e:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <Get_SerialNum+0x44>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c14:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <Get_SerialNum+0x48>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c1a:	4b0e      	ldr	r3, [pc, #56]	; (8009c54 <Get_SerialNum+0x4c>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4413      	add	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d009      	beq.n	8009c42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c2e:	2208      	movs	r2, #8
 8009c30:	4909      	ldr	r1, [pc, #36]	; (8009c58 <Get_SerialNum+0x50>)
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 f814 	bl	8009c60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c38:	2204      	movs	r2, #4
 8009c3a:	4908      	ldr	r1, [pc, #32]	; (8009c5c <Get_SerialNum+0x54>)
 8009c3c:	68b8      	ldr	r0, [r7, #8]
 8009c3e:	f000 f80f 	bl	8009c60 <IntToUnicode>
  }
}
 8009c42:	bf00      	nop
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	1ffff7e8 	.word	0x1ffff7e8
 8009c50:	1ffff7ec 	.word	0x1ffff7ec
 8009c54:	1ffff7f0 	.word	0x1ffff7f0
 8009c58:	20000152 	.word	0x20000152
 8009c5c:	20000162 	.word	0x20000162

08009c60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
 8009c76:	e027      	b.n	8009cc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	0f1b      	lsrs	r3, r3, #28
 8009c7c:	2b09      	cmp	r3, #9
 8009c7e:	d80b      	bhi.n	8009c98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	0f1b      	lsrs	r3, r3, #28
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	7dfb      	ldrb	r3, [r7, #23]
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	440b      	add	r3, r1
 8009c90:	3230      	adds	r2, #48	; 0x30
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	701a      	strb	r2, [r3, #0]
 8009c96:	e00a      	b.n	8009cae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	0f1b      	lsrs	r3, r3, #28
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	440b      	add	r3, r1
 8009ca8:	3237      	adds	r2, #55	; 0x37
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	011b      	lsls	r3, r3, #4
 8009cb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	3301      	adds	r3, #1
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	75fb      	strb	r3, [r7, #23]
 8009cc8:	7dfa      	ldrb	r2, [r7, #23]
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d3d3      	bcc.n	8009c78 <IntToUnicode+0x18>
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bc80      	pop	{r7}
 8009cda:	4770      	bx	lr

08009cdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a0d      	ldr	r2, [pc, #52]	; (8009d20 <HAL_PCD_MspInit+0x44>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d113      	bne.n	8009d16 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009cee:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <HAL_PCD_MspInit+0x48>)
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	4a0c      	ldr	r2, [pc, #48]	; (8009d24 <HAL_PCD_MspInit+0x48>)
 8009cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cf8:	61d3      	str	r3, [r2, #28]
 8009cfa:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <HAL_PCD_MspInit+0x48>)
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009d06:	2200      	movs	r2, #0
 8009d08:	2100      	movs	r1, #0
 8009d0a:	2014      	movs	r0, #20
 8009d0c:	f7f8 f871 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009d10:	2014      	movs	r0, #20
 8009d12:	f7f8 f88a 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009d16:	bf00      	nop
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	40005c00 	.word	0x40005c00
 8009d24:	40021000 	.word	0x40021000

08009d28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4610      	mov	r0, r2
 8009d40:	f7fe fe68 	bl	8008a14 <USBD_LL_SetupStage>
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	00db      	lsls	r3, r3, #3
 8009d6a:	440b      	add	r3, r1
 8009d6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	78fb      	ldrb	r3, [r7, #3]
 8009d74:	4619      	mov	r1, r3
 8009d76:	f7fe fe9a 	bl	8008aae <USBD_LL_DataOutStage>
}
 8009d7a:	bf00      	nop
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009d94:	78fa      	ldrb	r2, [r7, #3]
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	00db      	lsls	r3, r3, #3
 8009da0:	440b      	add	r3, r1
 8009da2:	333c      	adds	r3, #60	; 0x3c
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	78fb      	ldrb	r3, [r7, #3]
 8009da8:	4619      	mov	r1, r3
 8009daa:	f7fe fef1 	bl	8008b90 <USBD_LL_DataInStage>
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b082      	sub	sp, #8
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7ff f801 	bl	8008dcc <USBD_LL_SOF>
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b084      	sub	sp, #16
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d001      	beq.n	8009dea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009de6:	f7f7 f845 	bl	8000e74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009df0:	7bfa      	ldrb	r2, [r7, #15]
 8009df2:	4611      	mov	r1, r2
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe ffb1 	bl	8008d5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe ff6a 	bl	8008cda <USBD_LL_Reset>
}
 8009e06:	bf00      	nop
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
	...

08009e10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe ffab 	bl	8008d7a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d005      	beq.n	8009e38 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e2c:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <HAL_PCD_SuspendCallback+0x30>)
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	4a03      	ldr	r2, [pc, #12]	; (8009e40 <HAL_PCD_SuspendCallback+0x30>)
 8009e32:	f043 0306 	orr.w	r3, r3, #6
 8009e36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e38:	bf00      	nop
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	e000ed00 	.word	0xe000ed00

08009e44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe ffa5 	bl	8008da2 <USBD_LL_Resume>
}
 8009e58:	bf00      	nop
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009e68:	4a23      	ldr	r2, [pc, #140]	; (8009ef8 <USBD_LL_Init+0x98>)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a21      	ldr	r2, [pc, #132]	; (8009ef8 <USBD_LL_Init+0x98>)
 8009e74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009e78:	4b1f      	ldr	r3, [pc, #124]	; (8009ef8 <USBD_LL_Init+0x98>)
 8009e7a:	4a20      	ldr	r2, [pc, #128]	; (8009efc <USBD_LL_Init+0x9c>)
 8009e7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009e7e:	4b1e      	ldr	r3, [pc, #120]	; (8009ef8 <USBD_LL_Init+0x98>)
 8009e80:	2208      	movs	r2, #8
 8009e82:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009e84:	4b1c      	ldr	r3, [pc, #112]	; (8009ef8 <USBD_LL_Init+0x98>)
 8009e86:	2202      	movs	r2, #2
 8009e88:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009e8a:	4b1b      	ldr	r3, [pc, #108]	; (8009ef8 <USBD_LL_Init+0x98>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009e90:	4b19      	ldr	r3, [pc, #100]	; (8009ef8 <USBD_LL_Init+0x98>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009e96:	4b18      	ldr	r3, [pc, #96]	; (8009ef8 <USBD_LL_Init+0x98>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009e9c:	4816      	ldr	r0, [pc, #88]	; (8009ef8 <USBD_LL_Init+0x98>)
 8009e9e:	f7f8 fdc5 	bl	8002a2c <HAL_PCD_Init>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009ea8:	f7f6 ffe4 	bl	8000e74 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009eb2:	2318      	movs	r3, #24
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	f7fa fa22 	bl	8004300 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ec2:	2358      	movs	r3, #88	; 0x58
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2180      	movs	r1, #128	; 0x80
 8009ec8:	f7fa fa1a 	bl	8004300 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ed2:	2398      	movs	r3, #152	; 0x98
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2181      	movs	r1, #129	; 0x81
 8009ed8:	f7fa fa12 	bl	8004300 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ee2:	23d8      	movs	r3, #216	; 0xd8
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	f7fa fa0a 	bl	8004300 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20000860 	.word	0x20000860
 8009efc:	40005c00 	.word	0x40005c00

08009f00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7f8 fe93 	bl	8002c42 <HAL_PCD_Start>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 f93c 	bl	800a1a0 <USBD_Get_USB_Status>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	4608      	mov	r0, r1
 8009f40:	4611      	mov	r1, r2
 8009f42:	461a      	mov	r2, r3
 8009f44:	4603      	mov	r3, r0
 8009f46:	70fb      	strb	r3, [r7, #3]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70bb      	strb	r3, [r7, #2]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f5e:	78bb      	ldrb	r3, [r7, #2]
 8009f60:	883a      	ldrh	r2, [r7, #0]
 8009f62:	78f9      	ldrb	r1, [r7, #3]
 8009f64:	f7f9 f80b 	bl	8002f7e <HAL_PCD_EP_Open>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 f916 	bl	800a1a0 <USBD_Get_USB_Status>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b084      	sub	sp, #16
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f9c:	78fa      	ldrb	r2, [r7, #3]
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7f9 f852 	bl	800304a <HAL_PCD_EP_Close>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 f8f7 	bl	800a1a0 <USBD_Get_USB_Status>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fda:	78fa      	ldrb	r2, [r7, #3]
 8009fdc:	4611      	mov	r1, r2
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7f9 f8fb 	bl	80031da <HAL_PCD_EP_SetStall>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 f8d8 	bl	800a1a0 <USBD_Get_USB_Status>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	460b      	mov	r3, r1
 800a008:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a018:	78fa      	ldrb	r2, [r7, #3]
 800a01a:	4611      	mov	r1, r2
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7f9 f93c 	bl	800329a <HAL_PCD_EP_ClrStall>
 800a022:	4603      	mov	r3, r0
 800a024:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a026:	7bfb      	ldrb	r3, [r7, #15]
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 f8b9 	bl	800a1a0 <USBD_Get_USB_Status>
 800a02e:	4603      	mov	r3, r0
 800a030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a032:	7bbb      	ldrb	r3, [r7, #14]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a04e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a054:	2b00      	cmp	r3, #0
 800a056:	da0c      	bge.n	800a072 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a05e:	68f9      	ldr	r1, [r7, #12]
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	00db      	lsls	r3, r3, #3
 800a06a:	440b      	add	r3, r1
 800a06c:	3302      	adds	r3, #2
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	e00b      	b.n	800a08a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a072:	78fb      	ldrb	r3, [r7, #3]
 800a074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a078:	68f9      	ldr	r1, [r7, #12]
 800a07a:	4613      	mov	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	00db      	lsls	r3, r3, #3
 800a082:	440b      	add	r3, r1
 800a084:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a088:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	bc80      	pop	{r7}
 800a092:	4770      	bx	lr

0800a094 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0ae:	78fa      	ldrb	r2, [r7, #3]
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7f8 ff3e 	bl	8002f34 <HAL_PCD_SetAddress>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 f86e 	bl	800a1a0 <USBD_Get_USB_Status>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	460b      	mov	r3, r1
 800a0e0:	72fb      	strb	r3, [r7, #11]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0f4:	893b      	ldrh	r3, [r7, #8]
 800a0f6:	7af9      	ldrb	r1, [r7, #11]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	f7f9 f82b 	bl	8003154 <HAL_PCD_EP_Transmit>
 800a0fe:	4603      	mov	r3, r0
 800a100:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a102:	7dfb      	ldrb	r3, [r7, #23]
 800a104:	4618      	mov	r0, r3
 800a106:	f000 f84b 	bl	800a1a0 <USBD_Get_USB_Status>
 800a10a:	4603      	mov	r3, r0
 800a10c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a10e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3718      	adds	r7, #24
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	607a      	str	r2, [r7, #4]
 800a122:	461a      	mov	r2, r3
 800a124:	460b      	mov	r3, r1
 800a126:	72fb      	strb	r3, [r7, #11]
 800a128:	4613      	mov	r3, r2
 800a12a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a13a:	893b      	ldrh	r3, [r7, #8]
 800a13c:	7af9      	ldrb	r1, [r7, #11]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	f7f8 ffcb 	bl	80030da <HAL_PCD_EP_Receive>
 800a144:	4603      	mov	r3, r0
 800a146:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a148:	7dfb      	ldrb	r3, [r7, #23]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f828 	bl	800a1a0 <USBD_Get_USB_Status>
 800a150:	4603      	mov	r3, r0
 800a152:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a154:	7dbb      	ldrb	r3, [r7, #22]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a168:	4b02      	ldr	r3, [pc, #8]	; (800a174 <USBD_static_malloc+0x14>)
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc80      	pop	{r7}
 800a172:	4770      	bx	lr
 800a174:	20000b4c 	.word	0x20000b4c

0800a178 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]

}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	bc80      	pop	{r7}
 800a188:	4770      	bx	lr

0800a18a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a18a:	b480      	push	{r7}
 800a18c:	b083      	sub	sp, #12
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	460b      	mov	r3, r1
 800a194:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a196:	bf00      	nop
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bc80      	pop	{r7}
 800a19e:	4770      	bx	lr

0800a1a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	2b03      	cmp	r3, #3
 800a1b2:	d817      	bhi.n	800a1e4 <USBD_Get_USB_Status+0x44>
 800a1b4:	a201      	add	r2, pc, #4	; (adr r2, 800a1bc <USBD_Get_USB_Status+0x1c>)
 800a1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ba:	bf00      	nop
 800a1bc:	0800a1cd 	.word	0x0800a1cd
 800a1c0:	0800a1d3 	.word	0x0800a1d3
 800a1c4:	0800a1d9 	.word	0x0800a1d9
 800a1c8:	0800a1df 	.word	0x0800a1df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d0:	e00b      	b.n	800a1ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d6:	e008      	b.n	800a1ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	73fb      	strb	r3, [r7, #15]
    break;
 800a1dc:	e005      	b.n	800a1ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e2:	e002      	b.n	800a1ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e8:	bf00      	nop
  }
  return usb_status;
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bc80      	pop	{r7}
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop

0800a1f8 <atoi>:
 800a1f8:	220a      	movs	r2, #10
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	f000 b932 	b.w	800a464 <strtol>

0800a200 <__errno>:
 800a200:	4b01      	ldr	r3, [pc, #4]	; (800a208 <__errno+0x8>)
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	2000016c 	.word	0x2000016c

0800a20c <__libc_init_array>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	2600      	movs	r6, #0
 800a210:	4d0c      	ldr	r5, [pc, #48]	; (800a244 <__libc_init_array+0x38>)
 800a212:	4c0d      	ldr	r4, [pc, #52]	; (800a248 <__libc_init_array+0x3c>)
 800a214:	1b64      	subs	r4, r4, r5
 800a216:	10a4      	asrs	r4, r4, #2
 800a218:	42a6      	cmp	r6, r4
 800a21a:	d109      	bne.n	800a230 <__libc_init_array+0x24>
 800a21c:	f001 fae8 	bl	800b7f0 <_init>
 800a220:	2600      	movs	r6, #0
 800a222:	4d0a      	ldr	r5, [pc, #40]	; (800a24c <__libc_init_array+0x40>)
 800a224:	4c0a      	ldr	r4, [pc, #40]	; (800a250 <__libc_init_array+0x44>)
 800a226:	1b64      	subs	r4, r4, r5
 800a228:	10a4      	asrs	r4, r4, #2
 800a22a:	42a6      	cmp	r6, r4
 800a22c:	d105      	bne.n	800a23a <__libc_init_array+0x2e>
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	f855 3b04 	ldr.w	r3, [r5], #4
 800a234:	4798      	blx	r3
 800a236:	3601      	adds	r6, #1
 800a238:	e7ee      	b.n	800a218 <__libc_init_array+0xc>
 800a23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a23e:	4798      	blx	r3
 800a240:	3601      	adds	r6, #1
 800a242:	e7f2      	b.n	800a22a <__libc_init_array+0x1e>
 800a244:	0800bad4 	.word	0x0800bad4
 800a248:	0800bad4 	.word	0x0800bad4
 800a24c:	0800bad4 	.word	0x0800bad4
 800a250:	0800bad8 	.word	0x0800bad8

0800a254 <memset>:
 800a254:	4603      	mov	r3, r0
 800a256:	4402      	add	r2, r0
 800a258:	4293      	cmp	r3, r2
 800a25a:	d100      	bne.n	800a25e <memset+0xa>
 800a25c:	4770      	bx	lr
 800a25e:	f803 1b01 	strb.w	r1, [r3], #1
 800a262:	e7f9      	b.n	800a258 <memset+0x4>

0800a264 <siprintf>:
 800a264:	b40e      	push	{r1, r2, r3}
 800a266:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a26a:	b500      	push	{lr}
 800a26c:	b09c      	sub	sp, #112	; 0x70
 800a26e:	ab1d      	add	r3, sp, #116	; 0x74
 800a270:	9002      	str	r0, [sp, #8]
 800a272:	9006      	str	r0, [sp, #24]
 800a274:	9107      	str	r1, [sp, #28]
 800a276:	9104      	str	r1, [sp, #16]
 800a278:	4808      	ldr	r0, [pc, #32]	; (800a29c <siprintf+0x38>)
 800a27a:	4909      	ldr	r1, [pc, #36]	; (800a2a0 <siprintf+0x3c>)
 800a27c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a280:	9105      	str	r1, [sp, #20]
 800a282:	6800      	ldr	r0, [r0, #0]
 800a284:	a902      	add	r1, sp, #8
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	f000 fa66 	bl	800a758 <_svfiprintf_r>
 800a28c:	2200      	movs	r2, #0
 800a28e:	9b02      	ldr	r3, [sp, #8]
 800a290:	701a      	strb	r2, [r3, #0]
 800a292:	b01c      	add	sp, #112	; 0x70
 800a294:	f85d eb04 	ldr.w	lr, [sp], #4
 800a298:	b003      	add	sp, #12
 800a29a:	4770      	bx	lr
 800a29c:	2000016c 	.word	0x2000016c
 800a2a0:	ffff0208 	.word	0xffff0208

0800a2a4 <strcpy>:
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2aa:	f803 2b01 	strb.w	r2, [r3], #1
 800a2ae:	2a00      	cmp	r2, #0
 800a2b0:	d1f9      	bne.n	800a2a6 <strcpy+0x2>
 800a2b2:	4770      	bx	lr

0800a2b4 <strtok>:
 800a2b4:	4b16      	ldr	r3, [pc, #88]	; (800a310 <strtok+0x5c>)
 800a2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ba:	681f      	ldr	r7, [r3, #0]
 800a2bc:	4605      	mov	r5, r0
 800a2be:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a2c0:	460e      	mov	r6, r1
 800a2c2:	b9ec      	cbnz	r4, 800a300 <strtok+0x4c>
 800a2c4:	2050      	movs	r0, #80	; 0x50
 800a2c6:	f000 f907 	bl	800a4d8 <malloc>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	65b8      	str	r0, [r7, #88]	; 0x58
 800a2ce:	b920      	cbnz	r0, 800a2da <strtok+0x26>
 800a2d0:	2157      	movs	r1, #87	; 0x57
 800a2d2:	4b10      	ldr	r3, [pc, #64]	; (800a314 <strtok+0x60>)
 800a2d4:	4810      	ldr	r0, [pc, #64]	; (800a318 <strtok+0x64>)
 800a2d6:	f000 f8cf 	bl	800a478 <__assert_func>
 800a2da:	e9c0 4400 	strd	r4, r4, [r0]
 800a2de:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a2e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a2e6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a2ea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a2ee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a2f2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a2f6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a2fa:	6184      	str	r4, [r0, #24]
 800a2fc:	7704      	strb	r4, [r0, #28]
 800a2fe:	6244      	str	r4, [r0, #36]	; 0x24
 800a300:	4631      	mov	r1, r6
 800a302:	4628      	mov	r0, r5
 800a304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a306:	2301      	movs	r3, #1
 800a308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a30c:	f000 b806 	b.w	800a31c <__strtok_r>
 800a310:	2000016c 	.word	0x2000016c
 800a314:	0800b890 	.word	0x0800b890
 800a318:	0800b8a7 	.word	0x0800b8a7

0800a31c <__strtok_r>:
 800a31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a31e:	b908      	cbnz	r0, 800a324 <__strtok_r+0x8>
 800a320:	6810      	ldr	r0, [r2, #0]
 800a322:	b188      	cbz	r0, 800a348 <__strtok_r+0x2c>
 800a324:	4604      	mov	r4, r0
 800a326:	460f      	mov	r7, r1
 800a328:	4620      	mov	r0, r4
 800a32a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a32e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a332:	b91e      	cbnz	r6, 800a33c <__strtok_r+0x20>
 800a334:	b965      	cbnz	r5, 800a350 <__strtok_r+0x34>
 800a336:	4628      	mov	r0, r5
 800a338:	6015      	str	r5, [r2, #0]
 800a33a:	e005      	b.n	800a348 <__strtok_r+0x2c>
 800a33c:	42b5      	cmp	r5, r6
 800a33e:	d1f6      	bne.n	800a32e <__strtok_r+0x12>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1f0      	bne.n	800a326 <__strtok_r+0xa>
 800a344:	6014      	str	r4, [r2, #0]
 800a346:	7003      	strb	r3, [r0, #0]
 800a348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a34a:	461c      	mov	r4, r3
 800a34c:	e00c      	b.n	800a368 <__strtok_r+0x4c>
 800a34e:	b915      	cbnz	r5, 800a356 <__strtok_r+0x3a>
 800a350:	460e      	mov	r6, r1
 800a352:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a356:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a35a:	42ab      	cmp	r3, r5
 800a35c:	d1f7      	bne.n	800a34e <__strtok_r+0x32>
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d0f3      	beq.n	800a34a <__strtok_r+0x2e>
 800a362:	2300      	movs	r3, #0
 800a364:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a368:	6014      	str	r4, [r2, #0]
 800a36a:	e7ed      	b.n	800a348 <__strtok_r+0x2c>

0800a36c <_strtol_l.constprop.0>:
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a372:	4680      	mov	r8, r0
 800a374:	d001      	beq.n	800a37a <_strtol_l.constprop.0+0xe>
 800a376:	2b24      	cmp	r3, #36	; 0x24
 800a378:	d906      	bls.n	800a388 <_strtol_l.constprop.0+0x1c>
 800a37a:	f7ff ff41 	bl	800a200 <__errno>
 800a37e:	2316      	movs	r3, #22
 800a380:	6003      	str	r3, [r0, #0]
 800a382:	2000      	movs	r0, #0
 800a384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a388:	460d      	mov	r5, r1
 800a38a:	4f35      	ldr	r7, [pc, #212]	; (800a460 <_strtol_l.constprop.0+0xf4>)
 800a38c:	4628      	mov	r0, r5
 800a38e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a392:	5de6      	ldrb	r6, [r4, r7]
 800a394:	f016 0608 	ands.w	r6, r6, #8
 800a398:	d1f8      	bne.n	800a38c <_strtol_l.constprop.0+0x20>
 800a39a:	2c2d      	cmp	r4, #45	; 0x2d
 800a39c:	d12f      	bne.n	800a3fe <_strtol_l.constprop.0+0x92>
 800a39e:	2601      	movs	r6, #1
 800a3a0:	782c      	ldrb	r4, [r5, #0]
 800a3a2:	1c85      	adds	r5, r0, #2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d057      	beq.n	800a458 <_strtol_l.constprop.0+0xec>
 800a3a8:	2b10      	cmp	r3, #16
 800a3aa:	d109      	bne.n	800a3c0 <_strtol_l.constprop.0+0x54>
 800a3ac:	2c30      	cmp	r4, #48	; 0x30
 800a3ae:	d107      	bne.n	800a3c0 <_strtol_l.constprop.0+0x54>
 800a3b0:	7828      	ldrb	r0, [r5, #0]
 800a3b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a3b6:	2858      	cmp	r0, #88	; 0x58
 800a3b8:	d149      	bne.n	800a44e <_strtol_l.constprop.0+0xe2>
 800a3ba:	2310      	movs	r3, #16
 800a3bc:	786c      	ldrb	r4, [r5, #1]
 800a3be:	3502      	adds	r5, #2
 800a3c0:	2700      	movs	r7, #0
 800a3c2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a3c6:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a3ca:	fbbe f9f3 	udiv	r9, lr, r3
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	fb03 ea19 	mls	sl, r3, r9, lr
 800a3d4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a3d8:	f1bc 0f09 	cmp.w	ip, #9
 800a3dc:	d814      	bhi.n	800a408 <_strtol_l.constprop.0+0x9c>
 800a3de:	4664      	mov	r4, ip
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	dd22      	ble.n	800a42a <_strtol_l.constprop.0+0xbe>
 800a3e4:	2f00      	cmp	r7, #0
 800a3e6:	db1d      	blt.n	800a424 <_strtol_l.constprop.0+0xb8>
 800a3e8:	4581      	cmp	r9, r0
 800a3ea:	d31b      	bcc.n	800a424 <_strtol_l.constprop.0+0xb8>
 800a3ec:	d101      	bne.n	800a3f2 <_strtol_l.constprop.0+0x86>
 800a3ee:	45a2      	cmp	sl, r4
 800a3f0:	db18      	blt.n	800a424 <_strtol_l.constprop.0+0xb8>
 800a3f2:	2701      	movs	r7, #1
 800a3f4:	fb00 4003 	mla	r0, r0, r3, r4
 800a3f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3fc:	e7ea      	b.n	800a3d4 <_strtol_l.constprop.0+0x68>
 800a3fe:	2c2b      	cmp	r4, #43	; 0x2b
 800a400:	bf04      	itt	eq
 800a402:	782c      	ldrbeq	r4, [r5, #0]
 800a404:	1c85      	addeq	r5, r0, #2
 800a406:	e7cd      	b.n	800a3a4 <_strtol_l.constprop.0+0x38>
 800a408:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a40c:	f1bc 0f19 	cmp.w	ip, #25
 800a410:	d801      	bhi.n	800a416 <_strtol_l.constprop.0+0xaa>
 800a412:	3c37      	subs	r4, #55	; 0x37
 800a414:	e7e4      	b.n	800a3e0 <_strtol_l.constprop.0+0x74>
 800a416:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a41a:	f1bc 0f19 	cmp.w	ip, #25
 800a41e:	d804      	bhi.n	800a42a <_strtol_l.constprop.0+0xbe>
 800a420:	3c57      	subs	r4, #87	; 0x57
 800a422:	e7dd      	b.n	800a3e0 <_strtol_l.constprop.0+0x74>
 800a424:	f04f 37ff 	mov.w	r7, #4294967295
 800a428:	e7e6      	b.n	800a3f8 <_strtol_l.constprop.0+0x8c>
 800a42a:	2f00      	cmp	r7, #0
 800a42c:	da07      	bge.n	800a43e <_strtol_l.constprop.0+0xd2>
 800a42e:	2322      	movs	r3, #34	; 0x22
 800a430:	4670      	mov	r0, lr
 800a432:	f8c8 3000 	str.w	r3, [r8]
 800a436:	2a00      	cmp	r2, #0
 800a438:	d0a4      	beq.n	800a384 <_strtol_l.constprop.0+0x18>
 800a43a:	1e69      	subs	r1, r5, #1
 800a43c:	e005      	b.n	800a44a <_strtol_l.constprop.0+0xde>
 800a43e:	b106      	cbz	r6, 800a442 <_strtol_l.constprop.0+0xd6>
 800a440:	4240      	negs	r0, r0
 800a442:	2a00      	cmp	r2, #0
 800a444:	d09e      	beq.n	800a384 <_strtol_l.constprop.0+0x18>
 800a446:	2f00      	cmp	r7, #0
 800a448:	d1f7      	bne.n	800a43a <_strtol_l.constprop.0+0xce>
 800a44a:	6011      	str	r1, [r2, #0]
 800a44c:	e79a      	b.n	800a384 <_strtol_l.constprop.0+0x18>
 800a44e:	2430      	movs	r4, #48	; 0x30
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1b5      	bne.n	800a3c0 <_strtol_l.constprop.0+0x54>
 800a454:	2308      	movs	r3, #8
 800a456:	e7b3      	b.n	800a3c0 <_strtol_l.constprop.0+0x54>
 800a458:	2c30      	cmp	r4, #48	; 0x30
 800a45a:	d0a9      	beq.n	800a3b0 <_strtol_l.constprop.0+0x44>
 800a45c:	230a      	movs	r3, #10
 800a45e:	e7af      	b.n	800a3c0 <_strtol_l.constprop.0+0x54>
 800a460:	0800b941 	.word	0x0800b941

0800a464 <strtol>:
 800a464:	4613      	mov	r3, r2
 800a466:	460a      	mov	r2, r1
 800a468:	4601      	mov	r1, r0
 800a46a:	4802      	ldr	r0, [pc, #8]	; (800a474 <strtol+0x10>)
 800a46c:	6800      	ldr	r0, [r0, #0]
 800a46e:	f7ff bf7d 	b.w	800a36c <_strtol_l.constprop.0>
 800a472:	bf00      	nop
 800a474:	2000016c 	.word	0x2000016c

0800a478 <__assert_func>:
 800a478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a47a:	4614      	mov	r4, r2
 800a47c:	461a      	mov	r2, r3
 800a47e:	4b09      	ldr	r3, [pc, #36]	; (800a4a4 <__assert_func+0x2c>)
 800a480:	4605      	mov	r5, r0
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68d8      	ldr	r0, [r3, #12]
 800a486:	b14c      	cbz	r4, 800a49c <__assert_func+0x24>
 800a488:	4b07      	ldr	r3, [pc, #28]	; (800a4a8 <__assert_func+0x30>)
 800a48a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a48e:	9100      	str	r1, [sp, #0]
 800a490:	462b      	mov	r3, r5
 800a492:	4906      	ldr	r1, [pc, #24]	; (800a4ac <__assert_func+0x34>)
 800a494:	f000 f80e 	bl	800a4b4 <fiprintf>
 800a498:	f000 fe1c 	bl	800b0d4 <abort>
 800a49c:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <__assert_func+0x38>)
 800a49e:	461c      	mov	r4, r3
 800a4a0:	e7f3      	b.n	800a48a <__assert_func+0x12>
 800a4a2:	bf00      	nop
 800a4a4:	2000016c 	.word	0x2000016c
 800a4a8:	0800b904 	.word	0x0800b904
 800a4ac:	0800b911 	.word	0x0800b911
 800a4b0:	0800b93f 	.word	0x0800b93f

0800a4b4 <fiprintf>:
 800a4b4:	b40e      	push	{r1, r2, r3}
 800a4b6:	b503      	push	{r0, r1, lr}
 800a4b8:	4601      	mov	r1, r0
 800a4ba:	ab03      	add	r3, sp, #12
 800a4bc:	4805      	ldr	r0, [pc, #20]	; (800a4d4 <fiprintf+0x20>)
 800a4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c2:	6800      	ldr	r0, [r0, #0]
 800a4c4:	9301      	str	r3, [sp, #4]
 800a4c6:	f000 fa6f 	bl	800a9a8 <_vfiprintf_r>
 800a4ca:	b002      	add	sp, #8
 800a4cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4d0:	b003      	add	sp, #12
 800a4d2:	4770      	bx	lr
 800a4d4:	2000016c 	.word	0x2000016c

0800a4d8 <malloc>:
 800a4d8:	4b02      	ldr	r3, [pc, #8]	; (800a4e4 <malloc+0xc>)
 800a4da:	4601      	mov	r1, r0
 800a4dc:	6818      	ldr	r0, [r3, #0]
 800a4de:	f000 b86b 	b.w	800a5b8 <_malloc_r>
 800a4e2:	bf00      	nop
 800a4e4:	2000016c 	.word	0x2000016c

0800a4e8 <_free_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	d040      	beq.n	800a572 <_free_r+0x8a>
 800a4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4f4:	1f0c      	subs	r4, r1, #4
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bfb8      	it	lt
 800a4fa:	18e4      	addlt	r4, r4, r3
 800a4fc:	f001 f844 	bl	800b588 <__malloc_lock>
 800a500:	4a1c      	ldr	r2, [pc, #112]	; (800a574 <_free_r+0x8c>)
 800a502:	6813      	ldr	r3, [r2, #0]
 800a504:	b933      	cbnz	r3, 800a514 <_free_r+0x2c>
 800a506:	6063      	str	r3, [r4, #4]
 800a508:	6014      	str	r4, [r2, #0]
 800a50a:	4628      	mov	r0, r5
 800a50c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a510:	f001 b840 	b.w	800b594 <__malloc_unlock>
 800a514:	42a3      	cmp	r3, r4
 800a516:	d908      	bls.n	800a52a <_free_r+0x42>
 800a518:	6820      	ldr	r0, [r4, #0]
 800a51a:	1821      	adds	r1, r4, r0
 800a51c:	428b      	cmp	r3, r1
 800a51e:	bf01      	itttt	eq
 800a520:	6819      	ldreq	r1, [r3, #0]
 800a522:	685b      	ldreq	r3, [r3, #4]
 800a524:	1809      	addeq	r1, r1, r0
 800a526:	6021      	streq	r1, [r4, #0]
 800a528:	e7ed      	b.n	800a506 <_free_r+0x1e>
 800a52a:	461a      	mov	r2, r3
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	b10b      	cbz	r3, 800a534 <_free_r+0x4c>
 800a530:	42a3      	cmp	r3, r4
 800a532:	d9fa      	bls.n	800a52a <_free_r+0x42>
 800a534:	6811      	ldr	r1, [r2, #0]
 800a536:	1850      	adds	r0, r2, r1
 800a538:	42a0      	cmp	r0, r4
 800a53a:	d10b      	bne.n	800a554 <_free_r+0x6c>
 800a53c:	6820      	ldr	r0, [r4, #0]
 800a53e:	4401      	add	r1, r0
 800a540:	1850      	adds	r0, r2, r1
 800a542:	4283      	cmp	r3, r0
 800a544:	6011      	str	r1, [r2, #0]
 800a546:	d1e0      	bne.n	800a50a <_free_r+0x22>
 800a548:	6818      	ldr	r0, [r3, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	4401      	add	r1, r0
 800a54e:	6011      	str	r1, [r2, #0]
 800a550:	6053      	str	r3, [r2, #4]
 800a552:	e7da      	b.n	800a50a <_free_r+0x22>
 800a554:	d902      	bls.n	800a55c <_free_r+0x74>
 800a556:	230c      	movs	r3, #12
 800a558:	602b      	str	r3, [r5, #0]
 800a55a:	e7d6      	b.n	800a50a <_free_r+0x22>
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	1821      	adds	r1, r4, r0
 800a560:	428b      	cmp	r3, r1
 800a562:	bf01      	itttt	eq
 800a564:	6819      	ldreq	r1, [r3, #0]
 800a566:	685b      	ldreq	r3, [r3, #4]
 800a568:	1809      	addeq	r1, r1, r0
 800a56a:	6021      	streq	r1, [r4, #0]
 800a56c:	6063      	str	r3, [r4, #4]
 800a56e:	6054      	str	r4, [r2, #4]
 800a570:	e7cb      	b.n	800a50a <_free_r+0x22>
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	20000ba4 	.word	0x20000ba4

0800a578 <sbrk_aligned>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4e0e      	ldr	r6, [pc, #56]	; (800a5b4 <sbrk_aligned+0x3c>)
 800a57c:	460c      	mov	r4, r1
 800a57e:	6831      	ldr	r1, [r6, #0]
 800a580:	4605      	mov	r5, r0
 800a582:	b911      	cbnz	r1, 800a58a <sbrk_aligned+0x12>
 800a584:	f000 fcd6 	bl	800af34 <_sbrk_r>
 800a588:	6030      	str	r0, [r6, #0]
 800a58a:	4621      	mov	r1, r4
 800a58c:	4628      	mov	r0, r5
 800a58e:	f000 fcd1 	bl	800af34 <_sbrk_r>
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	d00a      	beq.n	800a5ac <sbrk_aligned+0x34>
 800a596:	1cc4      	adds	r4, r0, #3
 800a598:	f024 0403 	bic.w	r4, r4, #3
 800a59c:	42a0      	cmp	r0, r4
 800a59e:	d007      	beq.n	800a5b0 <sbrk_aligned+0x38>
 800a5a0:	1a21      	subs	r1, r4, r0
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	f000 fcc6 	bl	800af34 <_sbrk_r>
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d101      	bne.n	800a5b0 <sbrk_aligned+0x38>
 800a5ac:	f04f 34ff 	mov.w	r4, #4294967295
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
 800a5b4:	20000ba8 	.word	0x20000ba8

0800a5b8 <_malloc_r>:
 800a5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5bc:	1ccd      	adds	r5, r1, #3
 800a5be:	f025 0503 	bic.w	r5, r5, #3
 800a5c2:	3508      	adds	r5, #8
 800a5c4:	2d0c      	cmp	r5, #12
 800a5c6:	bf38      	it	cc
 800a5c8:	250c      	movcc	r5, #12
 800a5ca:	2d00      	cmp	r5, #0
 800a5cc:	4607      	mov	r7, r0
 800a5ce:	db01      	blt.n	800a5d4 <_malloc_r+0x1c>
 800a5d0:	42a9      	cmp	r1, r5
 800a5d2:	d905      	bls.n	800a5e0 <_malloc_r+0x28>
 800a5d4:	230c      	movs	r3, #12
 800a5d6:	2600      	movs	r6, #0
 800a5d8:	603b      	str	r3, [r7, #0]
 800a5da:	4630      	mov	r0, r6
 800a5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e0:	4e2e      	ldr	r6, [pc, #184]	; (800a69c <_malloc_r+0xe4>)
 800a5e2:	f000 ffd1 	bl	800b588 <__malloc_lock>
 800a5e6:	6833      	ldr	r3, [r6, #0]
 800a5e8:	461c      	mov	r4, r3
 800a5ea:	bb34      	cbnz	r4, 800a63a <_malloc_r+0x82>
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f7ff ffc2 	bl	800a578 <sbrk_aligned>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	d14d      	bne.n	800a696 <_malloc_r+0xde>
 800a5fa:	6834      	ldr	r4, [r6, #0]
 800a5fc:	4626      	mov	r6, r4
 800a5fe:	2e00      	cmp	r6, #0
 800a600:	d140      	bne.n	800a684 <_malloc_r+0xcc>
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	4631      	mov	r1, r6
 800a606:	4638      	mov	r0, r7
 800a608:	eb04 0803 	add.w	r8, r4, r3
 800a60c:	f000 fc92 	bl	800af34 <_sbrk_r>
 800a610:	4580      	cmp	r8, r0
 800a612:	d13a      	bne.n	800a68a <_malloc_r+0xd2>
 800a614:	6821      	ldr	r1, [r4, #0]
 800a616:	3503      	adds	r5, #3
 800a618:	1a6d      	subs	r5, r5, r1
 800a61a:	f025 0503 	bic.w	r5, r5, #3
 800a61e:	3508      	adds	r5, #8
 800a620:	2d0c      	cmp	r5, #12
 800a622:	bf38      	it	cc
 800a624:	250c      	movcc	r5, #12
 800a626:	4638      	mov	r0, r7
 800a628:	4629      	mov	r1, r5
 800a62a:	f7ff ffa5 	bl	800a578 <sbrk_aligned>
 800a62e:	3001      	adds	r0, #1
 800a630:	d02b      	beq.n	800a68a <_malloc_r+0xd2>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	442b      	add	r3, r5
 800a636:	6023      	str	r3, [r4, #0]
 800a638:	e00e      	b.n	800a658 <_malloc_r+0xa0>
 800a63a:	6822      	ldr	r2, [r4, #0]
 800a63c:	1b52      	subs	r2, r2, r5
 800a63e:	d41e      	bmi.n	800a67e <_malloc_r+0xc6>
 800a640:	2a0b      	cmp	r2, #11
 800a642:	d916      	bls.n	800a672 <_malloc_r+0xba>
 800a644:	1961      	adds	r1, r4, r5
 800a646:	42a3      	cmp	r3, r4
 800a648:	6025      	str	r5, [r4, #0]
 800a64a:	bf18      	it	ne
 800a64c:	6059      	strne	r1, [r3, #4]
 800a64e:	6863      	ldr	r3, [r4, #4]
 800a650:	bf08      	it	eq
 800a652:	6031      	streq	r1, [r6, #0]
 800a654:	5162      	str	r2, [r4, r5]
 800a656:	604b      	str	r3, [r1, #4]
 800a658:	4638      	mov	r0, r7
 800a65a:	f104 060b 	add.w	r6, r4, #11
 800a65e:	f000 ff99 	bl	800b594 <__malloc_unlock>
 800a662:	f026 0607 	bic.w	r6, r6, #7
 800a666:	1d23      	adds	r3, r4, #4
 800a668:	1af2      	subs	r2, r6, r3
 800a66a:	d0b6      	beq.n	800a5da <_malloc_r+0x22>
 800a66c:	1b9b      	subs	r3, r3, r6
 800a66e:	50a3      	str	r3, [r4, r2]
 800a670:	e7b3      	b.n	800a5da <_malloc_r+0x22>
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	42a3      	cmp	r3, r4
 800a676:	bf0c      	ite	eq
 800a678:	6032      	streq	r2, [r6, #0]
 800a67a:	605a      	strne	r2, [r3, #4]
 800a67c:	e7ec      	b.n	800a658 <_malloc_r+0xa0>
 800a67e:	4623      	mov	r3, r4
 800a680:	6864      	ldr	r4, [r4, #4]
 800a682:	e7b2      	b.n	800a5ea <_malloc_r+0x32>
 800a684:	4634      	mov	r4, r6
 800a686:	6876      	ldr	r6, [r6, #4]
 800a688:	e7b9      	b.n	800a5fe <_malloc_r+0x46>
 800a68a:	230c      	movs	r3, #12
 800a68c:	4638      	mov	r0, r7
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	f000 ff80 	bl	800b594 <__malloc_unlock>
 800a694:	e7a1      	b.n	800a5da <_malloc_r+0x22>
 800a696:	6025      	str	r5, [r4, #0]
 800a698:	e7de      	b.n	800a658 <_malloc_r+0xa0>
 800a69a:	bf00      	nop
 800a69c:	20000ba4 	.word	0x20000ba4

0800a6a0 <__ssputs_r>:
 800a6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a4:	688e      	ldr	r6, [r1, #8]
 800a6a6:	4682      	mov	sl, r0
 800a6a8:	429e      	cmp	r6, r3
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	4690      	mov	r8, r2
 800a6ae:	461f      	mov	r7, r3
 800a6b0:	d838      	bhi.n	800a724 <__ssputs_r+0x84>
 800a6b2:	898a      	ldrh	r2, [r1, #12]
 800a6b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6b8:	d032      	beq.n	800a720 <__ssputs_r+0x80>
 800a6ba:	6825      	ldr	r5, [r4, #0]
 800a6bc:	6909      	ldr	r1, [r1, #16]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	eba5 0901 	sub.w	r9, r5, r1
 800a6c4:	6965      	ldr	r5, [r4, #20]
 800a6c6:	444b      	add	r3, r9
 800a6c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6d0:	106d      	asrs	r5, r5, #1
 800a6d2:	429d      	cmp	r5, r3
 800a6d4:	bf38      	it	cc
 800a6d6:	461d      	movcc	r5, r3
 800a6d8:	0553      	lsls	r3, r2, #21
 800a6da:	d531      	bpl.n	800a740 <__ssputs_r+0xa0>
 800a6dc:	4629      	mov	r1, r5
 800a6de:	f7ff ff6b 	bl	800a5b8 <_malloc_r>
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	b950      	cbnz	r0, 800a6fc <__ssputs_r+0x5c>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	f8ca 3000 	str.w	r3, [sl]
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f6:	81a3      	strh	r3, [r4, #12]
 800a6f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fc:	464a      	mov	r2, r9
 800a6fe:	6921      	ldr	r1, [r4, #16]
 800a700:	f000 ff1a 	bl	800b538 <memcpy>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a70a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	6126      	str	r6, [r4, #16]
 800a712:	444e      	add	r6, r9
 800a714:	6026      	str	r6, [r4, #0]
 800a716:	463e      	mov	r6, r7
 800a718:	6165      	str	r5, [r4, #20]
 800a71a:	eba5 0509 	sub.w	r5, r5, r9
 800a71e:	60a5      	str	r5, [r4, #8]
 800a720:	42be      	cmp	r6, r7
 800a722:	d900      	bls.n	800a726 <__ssputs_r+0x86>
 800a724:	463e      	mov	r6, r7
 800a726:	4632      	mov	r2, r6
 800a728:	4641      	mov	r1, r8
 800a72a:	6820      	ldr	r0, [r4, #0]
 800a72c:	f000 ff12 	bl	800b554 <memmove>
 800a730:	68a3      	ldr	r3, [r4, #8]
 800a732:	2000      	movs	r0, #0
 800a734:	1b9b      	subs	r3, r3, r6
 800a736:	60a3      	str	r3, [r4, #8]
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	4433      	add	r3, r6
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	e7db      	b.n	800a6f8 <__ssputs_r+0x58>
 800a740:	462a      	mov	r2, r5
 800a742:	f000 ff2d 	bl	800b5a0 <_realloc_r>
 800a746:	4606      	mov	r6, r0
 800a748:	2800      	cmp	r0, #0
 800a74a:	d1e1      	bne.n	800a710 <__ssputs_r+0x70>
 800a74c:	4650      	mov	r0, sl
 800a74e:	6921      	ldr	r1, [r4, #16]
 800a750:	f7ff feca 	bl	800a4e8 <_free_r>
 800a754:	e7c7      	b.n	800a6e6 <__ssputs_r+0x46>
	...

0800a758 <_svfiprintf_r>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	4698      	mov	r8, r3
 800a75e:	898b      	ldrh	r3, [r1, #12]
 800a760:	4607      	mov	r7, r0
 800a762:	061b      	lsls	r3, r3, #24
 800a764:	460d      	mov	r5, r1
 800a766:	4614      	mov	r4, r2
 800a768:	b09d      	sub	sp, #116	; 0x74
 800a76a:	d50e      	bpl.n	800a78a <_svfiprintf_r+0x32>
 800a76c:	690b      	ldr	r3, [r1, #16]
 800a76e:	b963      	cbnz	r3, 800a78a <_svfiprintf_r+0x32>
 800a770:	2140      	movs	r1, #64	; 0x40
 800a772:	f7ff ff21 	bl	800a5b8 <_malloc_r>
 800a776:	6028      	str	r0, [r5, #0]
 800a778:	6128      	str	r0, [r5, #16]
 800a77a:	b920      	cbnz	r0, 800a786 <_svfiprintf_r+0x2e>
 800a77c:	230c      	movs	r3, #12
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	e0d1      	b.n	800a92a <_svfiprintf_r+0x1d2>
 800a786:	2340      	movs	r3, #64	; 0x40
 800a788:	616b      	str	r3, [r5, #20]
 800a78a:	2300      	movs	r3, #0
 800a78c:	9309      	str	r3, [sp, #36]	; 0x24
 800a78e:	2320      	movs	r3, #32
 800a790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a794:	2330      	movs	r3, #48	; 0x30
 800a796:	f04f 0901 	mov.w	r9, #1
 800a79a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a79e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a944 <_svfiprintf_r+0x1ec>
 800a7a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7a6:	4623      	mov	r3, r4
 800a7a8:	469a      	mov	sl, r3
 800a7aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ae:	b10a      	cbz	r2, 800a7b4 <_svfiprintf_r+0x5c>
 800a7b0:	2a25      	cmp	r2, #37	; 0x25
 800a7b2:	d1f9      	bne.n	800a7a8 <_svfiprintf_r+0x50>
 800a7b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7b8:	d00b      	beq.n	800a7d2 <_svfiprintf_r+0x7a>
 800a7ba:	465b      	mov	r3, fp
 800a7bc:	4622      	mov	r2, r4
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f7ff ff6d 	bl	800a6a0 <__ssputs_r>
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f000 80aa 	beq.w	800a920 <_svfiprintf_r+0x1c8>
 800a7cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ce:	445a      	add	r2, fp
 800a7d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a7d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 80a2 	beq.w	800a920 <_svfiprintf_r+0x1c8>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7e6:	f10a 0a01 	add.w	sl, sl, #1
 800a7ea:	9304      	str	r3, [sp, #16]
 800a7ec:	9307      	str	r3, [sp, #28]
 800a7ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a7f4:	4654      	mov	r4, sl
 800a7f6:	2205      	movs	r2, #5
 800a7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fc:	4851      	ldr	r0, [pc, #324]	; (800a944 <_svfiprintf_r+0x1ec>)
 800a7fe:	f000 fe8d 	bl	800b51c <memchr>
 800a802:	9a04      	ldr	r2, [sp, #16]
 800a804:	b9d8      	cbnz	r0, 800a83e <_svfiprintf_r+0xe6>
 800a806:	06d0      	lsls	r0, r2, #27
 800a808:	bf44      	itt	mi
 800a80a:	2320      	movmi	r3, #32
 800a80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a810:	0711      	lsls	r1, r2, #28
 800a812:	bf44      	itt	mi
 800a814:	232b      	movmi	r3, #43	; 0x2b
 800a816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a81a:	f89a 3000 	ldrb.w	r3, [sl]
 800a81e:	2b2a      	cmp	r3, #42	; 0x2a
 800a820:	d015      	beq.n	800a84e <_svfiprintf_r+0xf6>
 800a822:	4654      	mov	r4, sl
 800a824:	2000      	movs	r0, #0
 800a826:	f04f 0c0a 	mov.w	ip, #10
 800a82a:	9a07      	ldr	r2, [sp, #28]
 800a82c:	4621      	mov	r1, r4
 800a82e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a832:	3b30      	subs	r3, #48	; 0x30
 800a834:	2b09      	cmp	r3, #9
 800a836:	d94e      	bls.n	800a8d6 <_svfiprintf_r+0x17e>
 800a838:	b1b0      	cbz	r0, 800a868 <_svfiprintf_r+0x110>
 800a83a:	9207      	str	r2, [sp, #28]
 800a83c:	e014      	b.n	800a868 <_svfiprintf_r+0x110>
 800a83e:	eba0 0308 	sub.w	r3, r0, r8
 800a842:	fa09 f303 	lsl.w	r3, r9, r3
 800a846:	4313      	orrs	r3, r2
 800a848:	46a2      	mov	sl, r4
 800a84a:	9304      	str	r3, [sp, #16]
 800a84c:	e7d2      	b.n	800a7f4 <_svfiprintf_r+0x9c>
 800a84e:	9b03      	ldr	r3, [sp, #12]
 800a850:	1d19      	adds	r1, r3, #4
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	9103      	str	r1, [sp, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	bfbb      	ittet	lt
 800a85a:	425b      	neglt	r3, r3
 800a85c:	f042 0202 	orrlt.w	r2, r2, #2
 800a860:	9307      	strge	r3, [sp, #28]
 800a862:	9307      	strlt	r3, [sp, #28]
 800a864:	bfb8      	it	lt
 800a866:	9204      	strlt	r2, [sp, #16]
 800a868:	7823      	ldrb	r3, [r4, #0]
 800a86a:	2b2e      	cmp	r3, #46	; 0x2e
 800a86c:	d10c      	bne.n	800a888 <_svfiprintf_r+0x130>
 800a86e:	7863      	ldrb	r3, [r4, #1]
 800a870:	2b2a      	cmp	r3, #42	; 0x2a
 800a872:	d135      	bne.n	800a8e0 <_svfiprintf_r+0x188>
 800a874:	9b03      	ldr	r3, [sp, #12]
 800a876:	3402      	adds	r4, #2
 800a878:	1d1a      	adds	r2, r3, #4
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	9203      	str	r2, [sp, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bfb8      	it	lt
 800a882:	f04f 33ff 	movlt.w	r3, #4294967295
 800a886:	9305      	str	r3, [sp, #20]
 800a888:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a948 <_svfiprintf_r+0x1f0>
 800a88c:	2203      	movs	r2, #3
 800a88e:	4650      	mov	r0, sl
 800a890:	7821      	ldrb	r1, [r4, #0]
 800a892:	f000 fe43 	bl	800b51c <memchr>
 800a896:	b140      	cbz	r0, 800a8aa <_svfiprintf_r+0x152>
 800a898:	2340      	movs	r3, #64	; 0x40
 800a89a:	eba0 000a 	sub.w	r0, r0, sl
 800a89e:	fa03 f000 	lsl.w	r0, r3, r0
 800a8a2:	9b04      	ldr	r3, [sp, #16]
 800a8a4:	3401      	adds	r4, #1
 800a8a6:	4303      	orrs	r3, r0
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ae:	2206      	movs	r2, #6
 800a8b0:	4826      	ldr	r0, [pc, #152]	; (800a94c <_svfiprintf_r+0x1f4>)
 800a8b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8b6:	f000 fe31 	bl	800b51c <memchr>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d038      	beq.n	800a930 <_svfiprintf_r+0x1d8>
 800a8be:	4b24      	ldr	r3, [pc, #144]	; (800a950 <_svfiprintf_r+0x1f8>)
 800a8c0:	bb1b      	cbnz	r3, 800a90a <_svfiprintf_r+0x1b2>
 800a8c2:	9b03      	ldr	r3, [sp, #12]
 800a8c4:	3307      	adds	r3, #7
 800a8c6:	f023 0307 	bic.w	r3, r3, #7
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	9303      	str	r3, [sp, #12]
 800a8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d0:	4433      	add	r3, r6
 800a8d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d4:	e767      	b.n	800a7a6 <_svfiprintf_r+0x4e>
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	2001      	movs	r0, #1
 800a8da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8de:	e7a5      	b.n	800a82c <_svfiprintf_r+0xd4>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f04f 0c0a 	mov.w	ip, #10
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	3401      	adds	r4, #1
 800a8ea:	9305      	str	r3, [sp, #20]
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8f2:	3a30      	subs	r2, #48	; 0x30
 800a8f4:	2a09      	cmp	r2, #9
 800a8f6:	d903      	bls.n	800a900 <_svfiprintf_r+0x1a8>
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0c5      	beq.n	800a888 <_svfiprintf_r+0x130>
 800a8fc:	9105      	str	r1, [sp, #20]
 800a8fe:	e7c3      	b.n	800a888 <_svfiprintf_r+0x130>
 800a900:	4604      	mov	r4, r0
 800a902:	2301      	movs	r3, #1
 800a904:	fb0c 2101 	mla	r1, ip, r1, r2
 800a908:	e7f0      	b.n	800a8ec <_svfiprintf_r+0x194>
 800a90a:	ab03      	add	r3, sp, #12
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	462a      	mov	r2, r5
 800a910:	4638      	mov	r0, r7
 800a912:	4b10      	ldr	r3, [pc, #64]	; (800a954 <_svfiprintf_r+0x1fc>)
 800a914:	a904      	add	r1, sp, #16
 800a916:	f3af 8000 	nop.w
 800a91a:	1c42      	adds	r2, r0, #1
 800a91c:	4606      	mov	r6, r0
 800a91e:	d1d6      	bne.n	800a8ce <_svfiprintf_r+0x176>
 800a920:	89ab      	ldrh	r3, [r5, #12]
 800a922:	065b      	lsls	r3, r3, #25
 800a924:	f53f af2c 	bmi.w	800a780 <_svfiprintf_r+0x28>
 800a928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a92a:	b01d      	add	sp, #116	; 0x74
 800a92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a930:	ab03      	add	r3, sp, #12
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	462a      	mov	r2, r5
 800a936:	4638      	mov	r0, r7
 800a938:	4b06      	ldr	r3, [pc, #24]	; (800a954 <_svfiprintf_r+0x1fc>)
 800a93a:	a904      	add	r1, sp, #16
 800a93c:	f000 f9d4 	bl	800ace8 <_printf_i>
 800a940:	e7eb      	b.n	800a91a <_svfiprintf_r+0x1c2>
 800a942:	bf00      	nop
 800a944:	0800ba41 	.word	0x0800ba41
 800a948:	0800ba47 	.word	0x0800ba47
 800a94c:	0800ba4b 	.word	0x0800ba4b
 800a950:	00000000 	.word	0x00000000
 800a954:	0800a6a1 	.word	0x0800a6a1

0800a958 <__sfputc_r>:
 800a958:	6893      	ldr	r3, [r2, #8]
 800a95a:	b410      	push	{r4}
 800a95c:	3b01      	subs	r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	6093      	str	r3, [r2, #8]
 800a962:	da07      	bge.n	800a974 <__sfputc_r+0x1c>
 800a964:	6994      	ldr	r4, [r2, #24]
 800a966:	42a3      	cmp	r3, r4
 800a968:	db01      	blt.n	800a96e <__sfputc_r+0x16>
 800a96a:	290a      	cmp	r1, #10
 800a96c:	d102      	bne.n	800a974 <__sfputc_r+0x1c>
 800a96e:	bc10      	pop	{r4}
 800a970:	f000 baf0 	b.w	800af54 <__swbuf_r>
 800a974:	6813      	ldr	r3, [r2, #0]
 800a976:	1c58      	adds	r0, r3, #1
 800a978:	6010      	str	r0, [r2, #0]
 800a97a:	7019      	strb	r1, [r3, #0]
 800a97c:	4608      	mov	r0, r1
 800a97e:	bc10      	pop	{r4}
 800a980:	4770      	bx	lr

0800a982 <__sfputs_r>:
 800a982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a984:	4606      	mov	r6, r0
 800a986:	460f      	mov	r7, r1
 800a988:	4614      	mov	r4, r2
 800a98a:	18d5      	adds	r5, r2, r3
 800a98c:	42ac      	cmp	r4, r5
 800a98e:	d101      	bne.n	800a994 <__sfputs_r+0x12>
 800a990:	2000      	movs	r0, #0
 800a992:	e007      	b.n	800a9a4 <__sfputs_r+0x22>
 800a994:	463a      	mov	r2, r7
 800a996:	4630      	mov	r0, r6
 800a998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99c:	f7ff ffdc 	bl	800a958 <__sfputc_r>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d1f3      	bne.n	800a98c <__sfputs_r+0xa>
 800a9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9a8 <_vfiprintf_r>:
 800a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	460d      	mov	r5, r1
 800a9ae:	4614      	mov	r4, r2
 800a9b0:	4698      	mov	r8, r3
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	b09d      	sub	sp, #116	; 0x74
 800a9b6:	b118      	cbz	r0, 800a9c0 <_vfiprintf_r+0x18>
 800a9b8:	6983      	ldr	r3, [r0, #24]
 800a9ba:	b90b      	cbnz	r3, 800a9c0 <_vfiprintf_r+0x18>
 800a9bc:	f000 fca8 	bl	800b310 <__sinit>
 800a9c0:	4b89      	ldr	r3, [pc, #548]	; (800abe8 <_vfiprintf_r+0x240>)
 800a9c2:	429d      	cmp	r5, r3
 800a9c4:	d11b      	bne.n	800a9fe <_vfiprintf_r+0x56>
 800a9c6:	6875      	ldr	r5, [r6, #4]
 800a9c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ca:	07d9      	lsls	r1, r3, #31
 800a9cc:	d405      	bmi.n	800a9da <_vfiprintf_r+0x32>
 800a9ce:	89ab      	ldrh	r3, [r5, #12]
 800a9d0:	059a      	lsls	r2, r3, #22
 800a9d2:	d402      	bmi.n	800a9da <_vfiprintf_r+0x32>
 800a9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9d6:	f000 fd39 	bl	800b44c <__retarget_lock_acquire_recursive>
 800a9da:	89ab      	ldrh	r3, [r5, #12]
 800a9dc:	071b      	lsls	r3, r3, #28
 800a9de:	d501      	bpl.n	800a9e4 <_vfiprintf_r+0x3c>
 800a9e0:	692b      	ldr	r3, [r5, #16]
 800a9e2:	b9eb      	cbnz	r3, 800aa20 <_vfiprintf_r+0x78>
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f000 fb06 	bl	800aff8 <__swsetup_r>
 800a9ec:	b1c0      	cbz	r0, 800aa20 <_vfiprintf_r+0x78>
 800a9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f0:	07dc      	lsls	r4, r3, #31
 800a9f2:	d50e      	bpl.n	800aa12 <_vfiprintf_r+0x6a>
 800a9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f8:	b01d      	add	sp, #116	; 0x74
 800a9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fe:	4b7b      	ldr	r3, [pc, #492]	; (800abec <_vfiprintf_r+0x244>)
 800aa00:	429d      	cmp	r5, r3
 800aa02:	d101      	bne.n	800aa08 <_vfiprintf_r+0x60>
 800aa04:	68b5      	ldr	r5, [r6, #8]
 800aa06:	e7df      	b.n	800a9c8 <_vfiprintf_r+0x20>
 800aa08:	4b79      	ldr	r3, [pc, #484]	; (800abf0 <_vfiprintf_r+0x248>)
 800aa0a:	429d      	cmp	r5, r3
 800aa0c:	bf08      	it	eq
 800aa0e:	68f5      	ldreq	r5, [r6, #12]
 800aa10:	e7da      	b.n	800a9c8 <_vfiprintf_r+0x20>
 800aa12:	89ab      	ldrh	r3, [r5, #12]
 800aa14:	0598      	lsls	r0, r3, #22
 800aa16:	d4ed      	bmi.n	800a9f4 <_vfiprintf_r+0x4c>
 800aa18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa1a:	f000 fd18 	bl	800b44e <__retarget_lock_release_recursive>
 800aa1e:	e7e9      	b.n	800a9f4 <_vfiprintf_r+0x4c>
 800aa20:	2300      	movs	r3, #0
 800aa22:	9309      	str	r3, [sp, #36]	; 0x24
 800aa24:	2320      	movs	r3, #32
 800aa26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa2a:	2330      	movs	r3, #48	; 0x30
 800aa2c:	f04f 0901 	mov.w	r9, #1
 800aa30:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa34:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800abf4 <_vfiprintf_r+0x24c>
 800aa38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa3c:	4623      	mov	r3, r4
 800aa3e:	469a      	mov	sl, r3
 800aa40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa44:	b10a      	cbz	r2, 800aa4a <_vfiprintf_r+0xa2>
 800aa46:	2a25      	cmp	r2, #37	; 0x25
 800aa48:	d1f9      	bne.n	800aa3e <_vfiprintf_r+0x96>
 800aa4a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa4e:	d00b      	beq.n	800aa68 <_vfiprintf_r+0xc0>
 800aa50:	465b      	mov	r3, fp
 800aa52:	4622      	mov	r2, r4
 800aa54:	4629      	mov	r1, r5
 800aa56:	4630      	mov	r0, r6
 800aa58:	f7ff ff93 	bl	800a982 <__sfputs_r>
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	f000 80aa 	beq.w	800abb6 <_vfiprintf_r+0x20e>
 800aa62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa64:	445a      	add	r2, fp
 800aa66:	9209      	str	r2, [sp, #36]	; 0x24
 800aa68:	f89a 3000 	ldrb.w	r3, [sl]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 80a2 	beq.w	800abb6 <_vfiprintf_r+0x20e>
 800aa72:	2300      	movs	r3, #0
 800aa74:	f04f 32ff 	mov.w	r2, #4294967295
 800aa78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa7c:	f10a 0a01 	add.w	sl, sl, #1
 800aa80:	9304      	str	r3, [sp, #16]
 800aa82:	9307      	str	r3, [sp, #28]
 800aa84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa88:	931a      	str	r3, [sp, #104]	; 0x68
 800aa8a:	4654      	mov	r4, sl
 800aa8c:	2205      	movs	r2, #5
 800aa8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa92:	4858      	ldr	r0, [pc, #352]	; (800abf4 <_vfiprintf_r+0x24c>)
 800aa94:	f000 fd42 	bl	800b51c <memchr>
 800aa98:	9a04      	ldr	r2, [sp, #16]
 800aa9a:	b9d8      	cbnz	r0, 800aad4 <_vfiprintf_r+0x12c>
 800aa9c:	06d1      	lsls	r1, r2, #27
 800aa9e:	bf44      	itt	mi
 800aaa0:	2320      	movmi	r3, #32
 800aaa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaa6:	0713      	lsls	r3, r2, #28
 800aaa8:	bf44      	itt	mi
 800aaaa:	232b      	movmi	r3, #43	; 0x2b
 800aaac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab0:	f89a 3000 	ldrb.w	r3, [sl]
 800aab4:	2b2a      	cmp	r3, #42	; 0x2a
 800aab6:	d015      	beq.n	800aae4 <_vfiprintf_r+0x13c>
 800aab8:	4654      	mov	r4, sl
 800aaba:	2000      	movs	r0, #0
 800aabc:	f04f 0c0a 	mov.w	ip, #10
 800aac0:	9a07      	ldr	r2, [sp, #28]
 800aac2:	4621      	mov	r1, r4
 800aac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aac8:	3b30      	subs	r3, #48	; 0x30
 800aaca:	2b09      	cmp	r3, #9
 800aacc:	d94e      	bls.n	800ab6c <_vfiprintf_r+0x1c4>
 800aace:	b1b0      	cbz	r0, 800aafe <_vfiprintf_r+0x156>
 800aad0:	9207      	str	r2, [sp, #28]
 800aad2:	e014      	b.n	800aafe <_vfiprintf_r+0x156>
 800aad4:	eba0 0308 	sub.w	r3, r0, r8
 800aad8:	fa09 f303 	lsl.w	r3, r9, r3
 800aadc:	4313      	orrs	r3, r2
 800aade:	46a2      	mov	sl, r4
 800aae0:	9304      	str	r3, [sp, #16]
 800aae2:	e7d2      	b.n	800aa8a <_vfiprintf_r+0xe2>
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	1d19      	adds	r1, r3, #4
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	9103      	str	r1, [sp, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	bfbb      	ittet	lt
 800aaf0:	425b      	neglt	r3, r3
 800aaf2:	f042 0202 	orrlt.w	r2, r2, #2
 800aaf6:	9307      	strge	r3, [sp, #28]
 800aaf8:	9307      	strlt	r3, [sp, #28]
 800aafa:	bfb8      	it	lt
 800aafc:	9204      	strlt	r2, [sp, #16]
 800aafe:	7823      	ldrb	r3, [r4, #0]
 800ab00:	2b2e      	cmp	r3, #46	; 0x2e
 800ab02:	d10c      	bne.n	800ab1e <_vfiprintf_r+0x176>
 800ab04:	7863      	ldrb	r3, [r4, #1]
 800ab06:	2b2a      	cmp	r3, #42	; 0x2a
 800ab08:	d135      	bne.n	800ab76 <_vfiprintf_r+0x1ce>
 800ab0a:	9b03      	ldr	r3, [sp, #12]
 800ab0c:	3402      	adds	r4, #2
 800ab0e:	1d1a      	adds	r2, r3, #4
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	9203      	str	r2, [sp, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bfb8      	it	lt
 800ab18:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab1c:	9305      	str	r3, [sp, #20]
 800ab1e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800abf8 <_vfiprintf_r+0x250>
 800ab22:	2203      	movs	r2, #3
 800ab24:	4650      	mov	r0, sl
 800ab26:	7821      	ldrb	r1, [r4, #0]
 800ab28:	f000 fcf8 	bl	800b51c <memchr>
 800ab2c:	b140      	cbz	r0, 800ab40 <_vfiprintf_r+0x198>
 800ab2e:	2340      	movs	r3, #64	; 0x40
 800ab30:	eba0 000a 	sub.w	r0, r0, sl
 800ab34:	fa03 f000 	lsl.w	r0, r3, r0
 800ab38:	9b04      	ldr	r3, [sp, #16]
 800ab3a:	3401      	adds	r4, #1
 800ab3c:	4303      	orrs	r3, r0
 800ab3e:	9304      	str	r3, [sp, #16]
 800ab40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab44:	2206      	movs	r2, #6
 800ab46:	482d      	ldr	r0, [pc, #180]	; (800abfc <_vfiprintf_r+0x254>)
 800ab48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab4c:	f000 fce6 	bl	800b51c <memchr>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d03f      	beq.n	800abd4 <_vfiprintf_r+0x22c>
 800ab54:	4b2a      	ldr	r3, [pc, #168]	; (800ac00 <_vfiprintf_r+0x258>)
 800ab56:	bb1b      	cbnz	r3, 800aba0 <_vfiprintf_r+0x1f8>
 800ab58:	9b03      	ldr	r3, [sp, #12]
 800ab5a:	3307      	adds	r3, #7
 800ab5c:	f023 0307 	bic.w	r3, r3, #7
 800ab60:	3308      	adds	r3, #8
 800ab62:	9303      	str	r3, [sp, #12]
 800ab64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab66:	443b      	add	r3, r7
 800ab68:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6a:	e767      	b.n	800aa3c <_vfiprintf_r+0x94>
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	2001      	movs	r0, #1
 800ab70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab74:	e7a5      	b.n	800aac2 <_vfiprintf_r+0x11a>
 800ab76:	2300      	movs	r3, #0
 800ab78:	f04f 0c0a 	mov.w	ip, #10
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	3401      	adds	r4, #1
 800ab80:	9305      	str	r3, [sp, #20]
 800ab82:	4620      	mov	r0, r4
 800ab84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab88:	3a30      	subs	r2, #48	; 0x30
 800ab8a:	2a09      	cmp	r2, #9
 800ab8c:	d903      	bls.n	800ab96 <_vfiprintf_r+0x1ee>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d0c5      	beq.n	800ab1e <_vfiprintf_r+0x176>
 800ab92:	9105      	str	r1, [sp, #20]
 800ab94:	e7c3      	b.n	800ab1e <_vfiprintf_r+0x176>
 800ab96:	4604      	mov	r4, r0
 800ab98:	2301      	movs	r3, #1
 800ab9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab9e:	e7f0      	b.n	800ab82 <_vfiprintf_r+0x1da>
 800aba0:	ab03      	add	r3, sp, #12
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	462a      	mov	r2, r5
 800aba6:	4630      	mov	r0, r6
 800aba8:	4b16      	ldr	r3, [pc, #88]	; (800ac04 <_vfiprintf_r+0x25c>)
 800abaa:	a904      	add	r1, sp, #16
 800abac:	f3af 8000 	nop.w
 800abb0:	4607      	mov	r7, r0
 800abb2:	1c78      	adds	r0, r7, #1
 800abb4:	d1d6      	bne.n	800ab64 <_vfiprintf_r+0x1bc>
 800abb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abb8:	07d9      	lsls	r1, r3, #31
 800abba:	d405      	bmi.n	800abc8 <_vfiprintf_r+0x220>
 800abbc:	89ab      	ldrh	r3, [r5, #12]
 800abbe:	059a      	lsls	r2, r3, #22
 800abc0:	d402      	bmi.n	800abc8 <_vfiprintf_r+0x220>
 800abc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abc4:	f000 fc43 	bl	800b44e <__retarget_lock_release_recursive>
 800abc8:	89ab      	ldrh	r3, [r5, #12]
 800abca:	065b      	lsls	r3, r3, #25
 800abcc:	f53f af12 	bmi.w	800a9f4 <_vfiprintf_r+0x4c>
 800abd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abd2:	e711      	b.n	800a9f8 <_vfiprintf_r+0x50>
 800abd4:	ab03      	add	r3, sp, #12
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	462a      	mov	r2, r5
 800abda:	4630      	mov	r0, r6
 800abdc:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <_vfiprintf_r+0x25c>)
 800abde:	a904      	add	r1, sp, #16
 800abe0:	f000 f882 	bl	800ace8 <_printf_i>
 800abe4:	e7e4      	b.n	800abb0 <_vfiprintf_r+0x208>
 800abe6:	bf00      	nop
 800abe8:	0800ba94 	.word	0x0800ba94
 800abec:	0800bab4 	.word	0x0800bab4
 800abf0:	0800ba74 	.word	0x0800ba74
 800abf4:	0800ba41 	.word	0x0800ba41
 800abf8:	0800ba47 	.word	0x0800ba47
 800abfc:	0800ba4b 	.word	0x0800ba4b
 800ac00:	00000000 	.word	0x00000000
 800ac04:	0800a983 	.word	0x0800a983

0800ac08 <_printf_common>:
 800ac08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac0c:	4616      	mov	r6, r2
 800ac0e:	4699      	mov	r9, r3
 800ac10:	688a      	ldr	r2, [r1, #8]
 800ac12:	690b      	ldr	r3, [r1, #16]
 800ac14:	4607      	mov	r7, r0
 800ac16:	4293      	cmp	r3, r2
 800ac18:	bfb8      	it	lt
 800ac1a:	4613      	movlt	r3, r2
 800ac1c:	6033      	str	r3, [r6, #0]
 800ac1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac22:	460c      	mov	r4, r1
 800ac24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac28:	b10a      	cbz	r2, 800ac2e <_printf_common+0x26>
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	6033      	str	r3, [r6, #0]
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	0699      	lsls	r1, r3, #26
 800ac32:	bf42      	ittt	mi
 800ac34:	6833      	ldrmi	r3, [r6, #0]
 800ac36:	3302      	addmi	r3, #2
 800ac38:	6033      	strmi	r3, [r6, #0]
 800ac3a:	6825      	ldr	r5, [r4, #0]
 800ac3c:	f015 0506 	ands.w	r5, r5, #6
 800ac40:	d106      	bne.n	800ac50 <_printf_common+0x48>
 800ac42:	f104 0a19 	add.w	sl, r4, #25
 800ac46:	68e3      	ldr	r3, [r4, #12]
 800ac48:	6832      	ldr	r2, [r6, #0]
 800ac4a:	1a9b      	subs	r3, r3, r2
 800ac4c:	42ab      	cmp	r3, r5
 800ac4e:	dc28      	bgt.n	800aca2 <_printf_common+0x9a>
 800ac50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac54:	1e13      	subs	r3, r2, #0
 800ac56:	6822      	ldr	r2, [r4, #0]
 800ac58:	bf18      	it	ne
 800ac5a:	2301      	movne	r3, #1
 800ac5c:	0692      	lsls	r2, r2, #26
 800ac5e:	d42d      	bmi.n	800acbc <_printf_common+0xb4>
 800ac60:	4649      	mov	r1, r9
 800ac62:	4638      	mov	r0, r7
 800ac64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac68:	47c0      	blx	r8
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	d020      	beq.n	800acb0 <_printf_common+0xa8>
 800ac6e:	6823      	ldr	r3, [r4, #0]
 800ac70:	68e5      	ldr	r5, [r4, #12]
 800ac72:	f003 0306 	and.w	r3, r3, #6
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	bf18      	it	ne
 800ac7a:	2500      	movne	r5, #0
 800ac7c:	6832      	ldr	r2, [r6, #0]
 800ac7e:	f04f 0600 	mov.w	r6, #0
 800ac82:	68a3      	ldr	r3, [r4, #8]
 800ac84:	bf08      	it	eq
 800ac86:	1aad      	subeq	r5, r5, r2
 800ac88:	6922      	ldr	r2, [r4, #16]
 800ac8a:	bf08      	it	eq
 800ac8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac90:	4293      	cmp	r3, r2
 800ac92:	bfc4      	itt	gt
 800ac94:	1a9b      	subgt	r3, r3, r2
 800ac96:	18ed      	addgt	r5, r5, r3
 800ac98:	341a      	adds	r4, #26
 800ac9a:	42b5      	cmp	r5, r6
 800ac9c:	d11a      	bne.n	800acd4 <_printf_common+0xcc>
 800ac9e:	2000      	movs	r0, #0
 800aca0:	e008      	b.n	800acb4 <_printf_common+0xac>
 800aca2:	2301      	movs	r3, #1
 800aca4:	4652      	mov	r2, sl
 800aca6:	4649      	mov	r1, r9
 800aca8:	4638      	mov	r0, r7
 800acaa:	47c0      	blx	r8
 800acac:	3001      	adds	r0, #1
 800acae:	d103      	bne.n	800acb8 <_printf_common+0xb0>
 800acb0:	f04f 30ff 	mov.w	r0, #4294967295
 800acb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb8:	3501      	adds	r5, #1
 800acba:	e7c4      	b.n	800ac46 <_printf_common+0x3e>
 800acbc:	2030      	movs	r0, #48	; 0x30
 800acbe:	18e1      	adds	r1, r4, r3
 800acc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acc4:	1c5a      	adds	r2, r3, #1
 800acc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acca:	4422      	add	r2, r4
 800accc:	3302      	adds	r3, #2
 800acce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acd2:	e7c5      	b.n	800ac60 <_printf_common+0x58>
 800acd4:	2301      	movs	r3, #1
 800acd6:	4622      	mov	r2, r4
 800acd8:	4649      	mov	r1, r9
 800acda:	4638      	mov	r0, r7
 800acdc:	47c0      	blx	r8
 800acde:	3001      	adds	r0, #1
 800ace0:	d0e6      	beq.n	800acb0 <_printf_common+0xa8>
 800ace2:	3601      	adds	r6, #1
 800ace4:	e7d9      	b.n	800ac9a <_printf_common+0x92>
	...

0800ace8 <_printf_i>:
 800ace8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acec:	7e0f      	ldrb	r7, [r1, #24]
 800acee:	4691      	mov	r9, r2
 800acf0:	2f78      	cmp	r7, #120	; 0x78
 800acf2:	4680      	mov	r8, r0
 800acf4:	460c      	mov	r4, r1
 800acf6:	469a      	mov	sl, r3
 800acf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acfe:	d807      	bhi.n	800ad10 <_printf_i+0x28>
 800ad00:	2f62      	cmp	r7, #98	; 0x62
 800ad02:	d80a      	bhi.n	800ad1a <_printf_i+0x32>
 800ad04:	2f00      	cmp	r7, #0
 800ad06:	f000 80d9 	beq.w	800aebc <_printf_i+0x1d4>
 800ad0a:	2f58      	cmp	r7, #88	; 0x58
 800ad0c:	f000 80a4 	beq.w	800ae58 <_printf_i+0x170>
 800ad10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad18:	e03a      	b.n	800ad90 <_printf_i+0xa8>
 800ad1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad1e:	2b15      	cmp	r3, #21
 800ad20:	d8f6      	bhi.n	800ad10 <_printf_i+0x28>
 800ad22:	a101      	add	r1, pc, #4	; (adr r1, 800ad28 <_printf_i+0x40>)
 800ad24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad28:	0800ad81 	.word	0x0800ad81
 800ad2c:	0800ad95 	.word	0x0800ad95
 800ad30:	0800ad11 	.word	0x0800ad11
 800ad34:	0800ad11 	.word	0x0800ad11
 800ad38:	0800ad11 	.word	0x0800ad11
 800ad3c:	0800ad11 	.word	0x0800ad11
 800ad40:	0800ad95 	.word	0x0800ad95
 800ad44:	0800ad11 	.word	0x0800ad11
 800ad48:	0800ad11 	.word	0x0800ad11
 800ad4c:	0800ad11 	.word	0x0800ad11
 800ad50:	0800ad11 	.word	0x0800ad11
 800ad54:	0800aea3 	.word	0x0800aea3
 800ad58:	0800adc5 	.word	0x0800adc5
 800ad5c:	0800ae85 	.word	0x0800ae85
 800ad60:	0800ad11 	.word	0x0800ad11
 800ad64:	0800ad11 	.word	0x0800ad11
 800ad68:	0800aec5 	.word	0x0800aec5
 800ad6c:	0800ad11 	.word	0x0800ad11
 800ad70:	0800adc5 	.word	0x0800adc5
 800ad74:	0800ad11 	.word	0x0800ad11
 800ad78:	0800ad11 	.word	0x0800ad11
 800ad7c:	0800ae8d 	.word	0x0800ae8d
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	1d1a      	adds	r2, r3, #4
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	602a      	str	r2, [r5, #0]
 800ad88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad90:	2301      	movs	r3, #1
 800ad92:	e0a4      	b.n	800aede <_printf_i+0x1f6>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	6829      	ldr	r1, [r5, #0]
 800ad98:	0606      	lsls	r6, r0, #24
 800ad9a:	f101 0304 	add.w	r3, r1, #4
 800ad9e:	d50a      	bpl.n	800adb6 <_printf_i+0xce>
 800ada0:	680e      	ldr	r6, [r1, #0]
 800ada2:	602b      	str	r3, [r5, #0]
 800ada4:	2e00      	cmp	r6, #0
 800ada6:	da03      	bge.n	800adb0 <_printf_i+0xc8>
 800ada8:	232d      	movs	r3, #45	; 0x2d
 800adaa:	4276      	negs	r6, r6
 800adac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb0:	230a      	movs	r3, #10
 800adb2:	485e      	ldr	r0, [pc, #376]	; (800af2c <_printf_i+0x244>)
 800adb4:	e019      	b.n	800adea <_printf_i+0x102>
 800adb6:	680e      	ldr	r6, [r1, #0]
 800adb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800adbc:	602b      	str	r3, [r5, #0]
 800adbe:	bf18      	it	ne
 800adc0:	b236      	sxthne	r6, r6
 800adc2:	e7ef      	b.n	800ada4 <_printf_i+0xbc>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	6820      	ldr	r0, [r4, #0]
 800adc8:	1d19      	adds	r1, r3, #4
 800adca:	6029      	str	r1, [r5, #0]
 800adcc:	0601      	lsls	r1, r0, #24
 800adce:	d501      	bpl.n	800add4 <_printf_i+0xec>
 800add0:	681e      	ldr	r6, [r3, #0]
 800add2:	e002      	b.n	800adda <_printf_i+0xf2>
 800add4:	0646      	lsls	r6, r0, #25
 800add6:	d5fb      	bpl.n	800add0 <_printf_i+0xe8>
 800add8:	881e      	ldrh	r6, [r3, #0]
 800adda:	2f6f      	cmp	r7, #111	; 0x6f
 800addc:	bf0c      	ite	eq
 800adde:	2308      	moveq	r3, #8
 800ade0:	230a      	movne	r3, #10
 800ade2:	4852      	ldr	r0, [pc, #328]	; (800af2c <_printf_i+0x244>)
 800ade4:	2100      	movs	r1, #0
 800ade6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adea:	6865      	ldr	r5, [r4, #4]
 800adec:	2d00      	cmp	r5, #0
 800adee:	bfa8      	it	ge
 800adf0:	6821      	ldrge	r1, [r4, #0]
 800adf2:	60a5      	str	r5, [r4, #8]
 800adf4:	bfa4      	itt	ge
 800adf6:	f021 0104 	bicge.w	r1, r1, #4
 800adfa:	6021      	strge	r1, [r4, #0]
 800adfc:	b90e      	cbnz	r6, 800ae02 <_printf_i+0x11a>
 800adfe:	2d00      	cmp	r5, #0
 800ae00:	d04d      	beq.n	800ae9e <_printf_i+0x1b6>
 800ae02:	4615      	mov	r5, r2
 800ae04:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae08:	fb03 6711 	mls	r7, r3, r1, r6
 800ae0c:	5dc7      	ldrb	r7, [r0, r7]
 800ae0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae12:	4637      	mov	r7, r6
 800ae14:	42bb      	cmp	r3, r7
 800ae16:	460e      	mov	r6, r1
 800ae18:	d9f4      	bls.n	800ae04 <_printf_i+0x11c>
 800ae1a:	2b08      	cmp	r3, #8
 800ae1c:	d10b      	bne.n	800ae36 <_printf_i+0x14e>
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	07de      	lsls	r6, r3, #31
 800ae22:	d508      	bpl.n	800ae36 <_printf_i+0x14e>
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	6861      	ldr	r1, [r4, #4]
 800ae28:	4299      	cmp	r1, r3
 800ae2a:	bfde      	ittt	le
 800ae2c:	2330      	movle	r3, #48	; 0x30
 800ae2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae32:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae36:	1b52      	subs	r2, r2, r5
 800ae38:	6122      	str	r2, [r4, #16]
 800ae3a:	464b      	mov	r3, r9
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4640      	mov	r0, r8
 800ae40:	f8cd a000 	str.w	sl, [sp]
 800ae44:	aa03      	add	r2, sp, #12
 800ae46:	f7ff fedf 	bl	800ac08 <_printf_common>
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	d14c      	bne.n	800aee8 <_printf_i+0x200>
 800ae4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae52:	b004      	add	sp, #16
 800ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae58:	4834      	ldr	r0, [pc, #208]	; (800af2c <_printf_i+0x244>)
 800ae5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae5e:	6829      	ldr	r1, [r5, #0]
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae66:	6029      	str	r1, [r5, #0]
 800ae68:	061d      	lsls	r5, r3, #24
 800ae6a:	d514      	bpl.n	800ae96 <_printf_i+0x1ae>
 800ae6c:	07df      	lsls	r7, r3, #31
 800ae6e:	bf44      	itt	mi
 800ae70:	f043 0320 	orrmi.w	r3, r3, #32
 800ae74:	6023      	strmi	r3, [r4, #0]
 800ae76:	b91e      	cbnz	r6, 800ae80 <_printf_i+0x198>
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	f023 0320 	bic.w	r3, r3, #32
 800ae7e:	6023      	str	r3, [r4, #0]
 800ae80:	2310      	movs	r3, #16
 800ae82:	e7af      	b.n	800ade4 <_printf_i+0xfc>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	f043 0320 	orr.w	r3, r3, #32
 800ae8a:	6023      	str	r3, [r4, #0]
 800ae8c:	2378      	movs	r3, #120	; 0x78
 800ae8e:	4828      	ldr	r0, [pc, #160]	; (800af30 <_printf_i+0x248>)
 800ae90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae94:	e7e3      	b.n	800ae5e <_printf_i+0x176>
 800ae96:	0659      	lsls	r1, r3, #25
 800ae98:	bf48      	it	mi
 800ae9a:	b2b6      	uxthmi	r6, r6
 800ae9c:	e7e6      	b.n	800ae6c <_printf_i+0x184>
 800ae9e:	4615      	mov	r5, r2
 800aea0:	e7bb      	b.n	800ae1a <_printf_i+0x132>
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	6826      	ldr	r6, [r4, #0]
 800aea6:	1d18      	adds	r0, r3, #4
 800aea8:	6961      	ldr	r1, [r4, #20]
 800aeaa:	6028      	str	r0, [r5, #0]
 800aeac:	0635      	lsls	r5, r6, #24
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	d501      	bpl.n	800aeb6 <_printf_i+0x1ce>
 800aeb2:	6019      	str	r1, [r3, #0]
 800aeb4:	e002      	b.n	800aebc <_printf_i+0x1d4>
 800aeb6:	0670      	lsls	r0, r6, #25
 800aeb8:	d5fb      	bpl.n	800aeb2 <_printf_i+0x1ca>
 800aeba:	8019      	strh	r1, [r3, #0]
 800aebc:	2300      	movs	r3, #0
 800aebe:	4615      	mov	r5, r2
 800aec0:	6123      	str	r3, [r4, #16]
 800aec2:	e7ba      	b.n	800ae3a <_printf_i+0x152>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	2100      	movs	r1, #0
 800aec8:	1d1a      	adds	r2, r3, #4
 800aeca:	602a      	str	r2, [r5, #0]
 800aecc:	681d      	ldr	r5, [r3, #0]
 800aece:	6862      	ldr	r2, [r4, #4]
 800aed0:	4628      	mov	r0, r5
 800aed2:	f000 fb23 	bl	800b51c <memchr>
 800aed6:	b108      	cbz	r0, 800aedc <_printf_i+0x1f4>
 800aed8:	1b40      	subs	r0, r0, r5
 800aeda:	6060      	str	r0, [r4, #4]
 800aedc:	6863      	ldr	r3, [r4, #4]
 800aede:	6123      	str	r3, [r4, #16]
 800aee0:	2300      	movs	r3, #0
 800aee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aee6:	e7a8      	b.n	800ae3a <_printf_i+0x152>
 800aee8:	462a      	mov	r2, r5
 800aeea:	4649      	mov	r1, r9
 800aeec:	4640      	mov	r0, r8
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	47d0      	blx	sl
 800aef2:	3001      	adds	r0, #1
 800aef4:	d0ab      	beq.n	800ae4e <_printf_i+0x166>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	079b      	lsls	r3, r3, #30
 800aefa:	d413      	bmi.n	800af24 <_printf_i+0x23c>
 800aefc:	68e0      	ldr	r0, [r4, #12]
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	4298      	cmp	r0, r3
 800af02:	bfb8      	it	lt
 800af04:	4618      	movlt	r0, r3
 800af06:	e7a4      	b.n	800ae52 <_printf_i+0x16a>
 800af08:	2301      	movs	r3, #1
 800af0a:	4632      	mov	r2, r6
 800af0c:	4649      	mov	r1, r9
 800af0e:	4640      	mov	r0, r8
 800af10:	47d0      	blx	sl
 800af12:	3001      	adds	r0, #1
 800af14:	d09b      	beq.n	800ae4e <_printf_i+0x166>
 800af16:	3501      	adds	r5, #1
 800af18:	68e3      	ldr	r3, [r4, #12]
 800af1a:	9903      	ldr	r1, [sp, #12]
 800af1c:	1a5b      	subs	r3, r3, r1
 800af1e:	42ab      	cmp	r3, r5
 800af20:	dcf2      	bgt.n	800af08 <_printf_i+0x220>
 800af22:	e7eb      	b.n	800aefc <_printf_i+0x214>
 800af24:	2500      	movs	r5, #0
 800af26:	f104 0619 	add.w	r6, r4, #25
 800af2a:	e7f5      	b.n	800af18 <_printf_i+0x230>
 800af2c:	0800ba52 	.word	0x0800ba52
 800af30:	0800ba63 	.word	0x0800ba63

0800af34 <_sbrk_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	2300      	movs	r3, #0
 800af38:	4d05      	ldr	r5, [pc, #20]	; (800af50 <_sbrk_r+0x1c>)
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	602b      	str	r3, [r5, #0]
 800af40:	f7f6 f9c0 	bl	80012c4 <_sbrk>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_sbrk_r+0x1a>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_sbrk_r+0x1a>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	20000bb0 	.word	0x20000bb0

0800af54 <__swbuf_r>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	460e      	mov	r6, r1
 800af58:	4614      	mov	r4, r2
 800af5a:	4605      	mov	r5, r0
 800af5c:	b118      	cbz	r0, 800af66 <__swbuf_r+0x12>
 800af5e:	6983      	ldr	r3, [r0, #24]
 800af60:	b90b      	cbnz	r3, 800af66 <__swbuf_r+0x12>
 800af62:	f000 f9d5 	bl	800b310 <__sinit>
 800af66:	4b21      	ldr	r3, [pc, #132]	; (800afec <__swbuf_r+0x98>)
 800af68:	429c      	cmp	r4, r3
 800af6a:	d12b      	bne.n	800afc4 <__swbuf_r+0x70>
 800af6c:	686c      	ldr	r4, [r5, #4]
 800af6e:	69a3      	ldr	r3, [r4, #24]
 800af70:	60a3      	str	r3, [r4, #8]
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	071a      	lsls	r2, r3, #28
 800af76:	d52f      	bpl.n	800afd8 <__swbuf_r+0x84>
 800af78:	6923      	ldr	r3, [r4, #16]
 800af7a:	b36b      	cbz	r3, 800afd8 <__swbuf_r+0x84>
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	6820      	ldr	r0, [r4, #0]
 800af80:	b2f6      	uxtb	r6, r6
 800af82:	1ac0      	subs	r0, r0, r3
 800af84:	6963      	ldr	r3, [r4, #20]
 800af86:	4637      	mov	r7, r6
 800af88:	4283      	cmp	r3, r0
 800af8a:	dc04      	bgt.n	800af96 <__swbuf_r+0x42>
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	f000 f92a 	bl	800b1e8 <_fflush_r>
 800af94:	bb30      	cbnz	r0, 800afe4 <__swbuf_r+0x90>
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	3001      	adds	r0, #1
 800af9a:	3b01      	subs	r3, #1
 800af9c:	60a3      	str	r3, [r4, #8]
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	6022      	str	r2, [r4, #0]
 800afa4:	701e      	strb	r6, [r3, #0]
 800afa6:	6963      	ldr	r3, [r4, #20]
 800afa8:	4283      	cmp	r3, r0
 800afaa:	d004      	beq.n	800afb6 <__swbuf_r+0x62>
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	07db      	lsls	r3, r3, #31
 800afb0:	d506      	bpl.n	800afc0 <__swbuf_r+0x6c>
 800afb2:	2e0a      	cmp	r6, #10
 800afb4:	d104      	bne.n	800afc0 <__swbuf_r+0x6c>
 800afb6:	4621      	mov	r1, r4
 800afb8:	4628      	mov	r0, r5
 800afba:	f000 f915 	bl	800b1e8 <_fflush_r>
 800afbe:	b988      	cbnz	r0, 800afe4 <__swbuf_r+0x90>
 800afc0:	4638      	mov	r0, r7
 800afc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc4:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <__swbuf_r+0x9c>)
 800afc6:	429c      	cmp	r4, r3
 800afc8:	d101      	bne.n	800afce <__swbuf_r+0x7a>
 800afca:	68ac      	ldr	r4, [r5, #8]
 800afcc:	e7cf      	b.n	800af6e <__swbuf_r+0x1a>
 800afce:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <__swbuf_r+0xa0>)
 800afd0:	429c      	cmp	r4, r3
 800afd2:	bf08      	it	eq
 800afd4:	68ec      	ldreq	r4, [r5, #12]
 800afd6:	e7ca      	b.n	800af6e <__swbuf_r+0x1a>
 800afd8:	4621      	mov	r1, r4
 800afda:	4628      	mov	r0, r5
 800afdc:	f000 f80c 	bl	800aff8 <__swsetup_r>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d0cb      	beq.n	800af7c <__swbuf_r+0x28>
 800afe4:	f04f 37ff 	mov.w	r7, #4294967295
 800afe8:	e7ea      	b.n	800afc0 <__swbuf_r+0x6c>
 800afea:	bf00      	nop
 800afec:	0800ba94 	.word	0x0800ba94
 800aff0:	0800bab4 	.word	0x0800bab4
 800aff4:	0800ba74 	.word	0x0800ba74

0800aff8 <__swsetup_r>:
 800aff8:	4b32      	ldr	r3, [pc, #200]	; (800b0c4 <__swsetup_r+0xcc>)
 800affa:	b570      	push	{r4, r5, r6, lr}
 800affc:	681d      	ldr	r5, [r3, #0]
 800affe:	4606      	mov	r6, r0
 800b000:	460c      	mov	r4, r1
 800b002:	b125      	cbz	r5, 800b00e <__swsetup_r+0x16>
 800b004:	69ab      	ldr	r3, [r5, #24]
 800b006:	b913      	cbnz	r3, 800b00e <__swsetup_r+0x16>
 800b008:	4628      	mov	r0, r5
 800b00a:	f000 f981 	bl	800b310 <__sinit>
 800b00e:	4b2e      	ldr	r3, [pc, #184]	; (800b0c8 <__swsetup_r+0xd0>)
 800b010:	429c      	cmp	r4, r3
 800b012:	d10f      	bne.n	800b034 <__swsetup_r+0x3c>
 800b014:	686c      	ldr	r4, [r5, #4]
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b01c:	0719      	lsls	r1, r3, #28
 800b01e:	d42c      	bmi.n	800b07a <__swsetup_r+0x82>
 800b020:	06dd      	lsls	r5, r3, #27
 800b022:	d411      	bmi.n	800b048 <__swsetup_r+0x50>
 800b024:	2309      	movs	r3, #9
 800b026:	6033      	str	r3, [r6, #0]
 800b028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	81a3      	strh	r3, [r4, #12]
 800b032:	e03e      	b.n	800b0b2 <__swsetup_r+0xba>
 800b034:	4b25      	ldr	r3, [pc, #148]	; (800b0cc <__swsetup_r+0xd4>)
 800b036:	429c      	cmp	r4, r3
 800b038:	d101      	bne.n	800b03e <__swsetup_r+0x46>
 800b03a:	68ac      	ldr	r4, [r5, #8]
 800b03c:	e7eb      	b.n	800b016 <__swsetup_r+0x1e>
 800b03e:	4b24      	ldr	r3, [pc, #144]	; (800b0d0 <__swsetup_r+0xd8>)
 800b040:	429c      	cmp	r4, r3
 800b042:	bf08      	it	eq
 800b044:	68ec      	ldreq	r4, [r5, #12]
 800b046:	e7e6      	b.n	800b016 <__swsetup_r+0x1e>
 800b048:	0758      	lsls	r0, r3, #29
 800b04a:	d512      	bpl.n	800b072 <__swsetup_r+0x7a>
 800b04c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b04e:	b141      	cbz	r1, 800b062 <__swsetup_r+0x6a>
 800b050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b054:	4299      	cmp	r1, r3
 800b056:	d002      	beq.n	800b05e <__swsetup_r+0x66>
 800b058:	4630      	mov	r0, r6
 800b05a:	f7ff fa45 	bl	800a4e8 <_free_r>
 800b05e:	2300      	movs	r3, #0
 800b060:	6363      	str	r3, [r4, #52]	; 0x34
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b068:	81a3      	strh	r3, [r4, #12]
 800b06a:	2300      	movs	r3, #0
 800b06c:	6063      	str	r3, [r4, #4]
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f043 0308 	orr.w	r3, r3, #8
 800b078:	81a3      	strh	r3, [r4, #12]
 800b07a:	6923      	ldr	r3, [r4, #16]
 800b07c:	b94b      	cbnz	r3, 800b092 <__swsetup_r+0x9a>
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b088:	d003      	beq.n	800b092 <__swsetup_r+0x9a>
 800b08a:	4621      	mov	r1, r4
 800b08c:	4630      	mov	r0, r6
 800b08e:	f000 fa05 	bl	800b49c <__smakebuf_r>
 800b092:	89a0      	ldrh	r0, [r4, #12]
 800b094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b098:	f010 0301 	ands.w	r3, r0, #1
 800b09c:	d00a      	beq.n	800b0b4 <__swsetup_r+0xbc>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60a3      	str	r3, [r4, #8]
 800b0a2:	6963      	ldr	r3, [r4, #20]
 800b0a4:	425b      	negs	r3, r3
 800b0a6:	61a3      	str	r3, [r4, #24]
 800b0a8:	6923      	ldr	r3, [r4, #16]
 800b0aa:	b943      	cbnz	r3, 800b0be <__swsetup_r+0xc6>
 800b0ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0b0:	d1ba      	bne.n	800b028 <__swsetup_r+0x30>
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}
 800b0b4:	0781      	lsls	r1, r0, #30
 800b0b6:	bf58      	it	pl
 800b0b8:	6963      	ldrpl	r3, [r4, #20]
 800b0ba:	60a3      	str	r3, [r4, #8]
 800b0bc:	e7f4      	b.n	800b0a8 <__swsetup_r+0xb0>
 800b0be:	2000      	movs	r0, #0
 800b0c0:	e7f7      	b.n	800b0b2 <__swsetup_r+0xba>
 800b0c2:	bf00      	nop
 800b0c4:	2000016c 	.word	0x2000016c
 800b0c8:	0800ba94 	.word	0x0800ba94
 800b0cc:	0800bab4 	.word	0x0800bab4
 800b0d0:	0800ba74 	.word	0x0800ba74

0800b0d4 <abort>:
 800b0d4:	2006      	movs	r0, #6
 800b0d6:	b508      	push	{r3, lr}
 800b0d8:	f000 faba 	bl	800b650 <raise>
 800b0dc:	2001      	movs	r0, #1
 800b0de:	f7f6 f87e 	bl	80011de <_exit>
	...

0800b0e4 <__sflush_r>:
 800b0e4:	898a      	ldrh	r2, [r1, #12]
 800b0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	0710      	lsls	r0, r2, #28
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	d457      	bmi.n	800b1a0 <__sflush_r+0xbc>
 800b0f0:	684b      	ldr	r3, [r1, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dc04      	bgt.n	800b100 <__sflush_r+0x1c>
 800b0f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	dc01      	bgt.n	800b100 <__sflush_r+0x1c>
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b102:	2e00      	cmp	r6, #0
 800b104:	d0fa      	beq.n	800b0fc <__sflush_r+0x18>
 800b106:	2300      	movs	r3, #0
 800b108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b10c:	682f      	ldr	r7, [r5, #0]
 800b10e:	602b      	str	r3, [r5, #0]
 800b110:	d032      	beq.n	800b178 <__sflush_r+0x94>
 800b112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	075a      	lsls	r2, r3, #29
 800b118:	d505      	bpl.n	800b126 <__sflush_r+0x42>
 800b11a:	6863      	ldr	r3, [r4, #4]
 800b11c:	1ac0      	subs	r0, r0, r3
 800b11e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b120:	b10b      	cbz	r3, 800b126 <__sflush_r+0x42>
 800b122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b124:	1ac0      	subs	r0, r0, r3
 800b126:	2300      	movs	r3, #0
 800b128:	4602      	mov	r2, r0
 800b12a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b12c:	4628      	mov	r0, r5
 800b12e:	6a21      	ldr	r1, [r4, #32]
 800b130:	47b0      	blx	r6
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	d106      	bne.n	800b146 <__sflush_r+0x62>
 800b138:	6829      	ldr	r1, [r5, #0]
 800b13a:	291d      	cmp	r1, #29
 800b13c:	d82c      	bhi.n	800b198 <__sflush_r+0xb4>
 800b13e:	4a29      	ldr	r2, [pc, #164]	; (800b1e4 <__sflush_r+0x100>)
 800b140:	40ca      	lsrs	r2, r1
 800b142:	07d6      	lsls	r6, r2, #31
 800b144:	d528      	bpl.n	800b198 <__sflush_r+0xb4>
 800b146:	2200      	movs	r2, #0
 800b148:	6062      	str	r2, [r4, #4]
 800b14a:	6922      	ldr	r2, [r4, #16]
 800b14c:	04d9      	lsls	r1, r3, #19
 800b14e:	6022      	str	r2, [r4, #0]
 800b150:	d504      	bpl.n	800b15c <__sflush_r+0x78>
 800b152:	1c42      	adds	r2, r0, #1
 800b154:	d101      	bne.n	800b15a <__sflush_r+0x76>
 800b156:	682b      	ldr	r3, [r5, #0]
 800b158:	b903      	cbnz	r3, 800b15c <__sflush_r+0x78>
 800b15a:	6560      	str	r0, [r4, #84]	; 0x54
 800b15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b15e:	602f      	str	r7, [r5, #0]
 800b160:	2900      	cmp	r1, #0
 800b162:	d0cb      	beq.n	800b0fc <__sflush_r+0x18>
 800b164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b168:	4299      	cmp	r1, r3
 800b16a:	d002      	beq.n	800b172 <__sflush_r+0x8e>
 800b16c:	4628      	mov	r0, r5
 800b16e:	f7ff f9bb 	bl	800a4e8 <_free_r>
 800b172:	2000      	movs	r0, #0
 800b174:	6360      	str	r0, [r4, #52]	; 0x34
 800b176:	e7c2      	b.n	800b0fe <__sflush_r+0x1a>
 800b178:	6a21      	ldr	r1, [r4, #32]
 800b17a:	2301      	movs	r3, #1
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b0      	blx	r6
 800b180:	1c41      	adds	r1, r0, #1
 800b182:	d1c7      	bne.n	800b114 <__sflush_r+0x30>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0c4      	beq.n	800b114 <__sflush_r+0x30>
 800b18a:	2b1d      	cmp	r3, #29
 800b18c:	d001      	beq.n	800b192 <__sflush_r+0xae>
 800b18e:	2b16      	cmp	r3, #22
 800b190:	d101      	bne.n	800b196 <__sflush_r+0xb2>
 800b192:	602f      	str	r7, [r5, #0]
 800b194:	e7b2      	b.n	800b0fc <__sflush_r+0x18>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b19c:	81a3      	strh	r3, [r4, #12]
 800b19e:	e7ae      	b.n	800b0fe <__sflush_r+0x1a>
 800b1a0:	690f      	ldr	r7, [r1, #16]
 800b1a2:	2f00      	cmp	r7, #0
 800b1a4:	d0aa      	beq.n	800b0fc <__sflush_r+0x18>
 800b1a6:	0793      	lsls	r3, r2, #30
 800b1a8:	bf18      	it	ne
 800b1aa:	2300      	movne	r3, #0
 800b1ac:	680e      	ldr	r6, [r1, #0]
 800b1ae:	bf08      	it	eq
 800b1b0:	694b      	ldreq	r3, [r1, #20]
 800b1b2:	1bf6      	subs	r6, r6, r7
 800b1b4:	600f      	str	r7, [r1, #0]
 800b1b6:	608b      	str	r3, [r1, #8]
 800b1b8:	2e00      	cmp	r6, #0
 800b1ba:	dd9f      	ble.n	800b0fc <__sflush_r+0x18>
 800b1bc:	4633      	mov	r3, r6
 800b1be:	463a      	mov	r2, r7
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	6a21      	ldr	r1, [r4, #32]
 800b1c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b1c8:	47e0      	blx	ip
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	dc06      	bgt.n	800b1dc <__sflush_r+0xf8>
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d8:	81a3      	strh	r3, [r4, #12]
 800b1da:	e790      	b.n	800b0fe <__sflush_r+0x1a>
 800b1dc:	4407      	add	r7, r0
 800b1de:	1a36      	subs	r6, r6, r0
 800b1e0:	e7ea      	b.n	800b1b8 <__sflush_r+0xd4>
 800b1e2:	bf00      	nop
 800b1e4:	20400001 	.word	0x20400001

0800b1e8 <_fflush_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	690b      	ldr	r3, [r1, #16]
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	b913      	cbnz	r3, 800b1f8 <_fflush_r+0x10>
 800b1f2:	2500      	movs	r5, #0
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	b118      	cbz	r0, 800b202 <_fflush_r+0x1a>
 800b1fa:	6983      	ldr	r3, [r0, #24]
 800b1fc:	b90b      	cbnz	r3, 800b202 <_fflush_r+0x1a>
 800b1fe:	f000 f887 	bl	800b310 <__sinit>
 800b202:	4b14      	ldr	r3, [pc, #80]	; (800b254 <_fflush_r+0x6c>)
 800b204:	429c      	cmp	r4, r3
 800b206:	d11b      	bne.n	800b240 <_fflush_r+0x58>
 800b208:	686c      	ldr	r4, [r5, #4]
 800b20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d0ef      	beq.n	800b1f2 <_fflush_r+0xa>
 800b212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b214:	07d0      	lsls	r0, r2, #31
 800b216:	d404      	bmi.n	800b222 <_fflush_r+0x3a>
 800b218:	0599      	lsls	r1, r3, #22
 800b21a:	d402      	bmi.n	800b222 <_fflush_r+0x3a>
 800b21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b21e:	f000 f915 	bl	800b44c <__retarget_lock_acquire_recursive>
 800b222:	4628      	mov	r0, r5
 800b224:	4621      	mov	r1, r4
 800b226:	f7ff ff5d 	bl	800b0e4 <__sflush_r>
 800b22a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b22c:	4605      	mov	r5, r0
 800b22e:	07da      	lsls	r2, r3, #31
 800b230:	d4e0      	bmi.n	800b1f4 <_fflush_r+0xc>
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	059b      	lsls	r3, r3, #22
 800b236:	d4dd      	bmi.n	800b1f4 <_fflush_r+0xc>
 800b238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b23a:	f000 f908 	bl	800b44e <__retarget_lock_release_recursive>
 800b23e:	e7d9      	b.n	800b1f4 <_fflush_r+0xc>
 800b240:	4b05      	ldr	r3, [pc, #20]	; (800b258 <_fflush_r+0x70>)
 800b242:	429c      	cmp	r4, r3
 800b244:	d101      	bne.n	800b24a <_fflush_r+0x62>
 800b246:	68ac      	ldr	r4, [r5, #8]
 800b248:	e7df      	b.n	800b20a <_fflush_r+0x22>
 800b24a:	4b04      	ldr	r3, [pc, #16]	; (800b25c <_fflush_r+0x74>)
 800b24c:	429c      	cmp	r4, r3
 800b24e:	bf08      	it	eq
 800b250:	68ec      	ldreq	r4, [r5, #12]
 800b252:	e7da      	b.n	800b20a <_fflush_r+0x22>
 800b254:	0800ba94 	.word	0x0800ba94
 800b258:	0800bab4 	.word	0x0800bab4
 800b25c:	0800ba74 	.word	0x0800ba74

0800b260 <std>:
 800b260:	2300      	movs	r3, #0
 800b262:	b510      	push	{r4, lr}
 800b264:	4604      	mov	r4, r0
 800b266:	e9c0 3300 	strd	r3, r3, [r0]
 800b26a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b26e:	6083      	str	r3, [r0, #8]
 800b270:	8181      	strh	r1, [r0, #12]
 800b272:	6643      	str	r3, [r0, #100]	; 0x64
 800b274:	81c2      	strh	r2, [r0, #14]
 800b276:	6183      	str	r3, [r0, #24]
 800b278:	4619      	mov	r1, r3
 800b27a:	2208      	movs	r2, #8
 800b27c:	305c      	adds	r0, #92	; 0x5c
 800b27e:	f7fe ffe9 	bl	800a254 <memset>
 800b282:	4b05      	ldr	r3, [pc, #20]	; (800b298 <std+0x38>)
 800b284:	6224      	str	r4, [r4, #32]
 800b286:	6263      	str	r3, [r4, #36]	; 0x24
 800b288:	4b04      	ldr	r3, [pc, #16]	; (800b29c <std+0x3c>)
 800b28a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b28c:	4b04      	ldr	r3, [pc, #16]	; (800b2a0 <std+0x40>)
 800b28e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b290:	4b04      	ldr	r3, [pc, #16]	; (800b2a4 <std+0x44>)
 800b292:	6323      	str	r3, [r4, #48]	; 0x30
 800b294:	bd10      	pop	{r4, pc}
 800b296:	bf00      	nop
 800b298:	0800b689 	.word	0x0800b689
 800b29c:	0800b6ab 	.word	0x0800b6ab
 800b2a0:	0800b6e3 	.word	0x0800b6e3
 800b2a4:	0800b707 	.word	0x0800b707

0800b2a8 <_cleanup_r>:
 800b2a8:	4901      	ldr	r1, [pc, #4]	; (800b2b0 <_cleanup_r+0x8>)
 800b2aa:	f000 b8af 	b.w	800b40c <_fwalk_reent>
 800b2ae:	bf00      	nop
 800b2b0:	0800b1e9 	.word	0x0800b1e9

0800b2b4 <__sfmoreglue>:
 800b2b4:	2268      	movs	r2, #104	; 0x68
 800b2b6:	b570      	push	{r4, r5, r6, lr}
 800b2b8:	1e4d      	subs	r5, r1, #1
 800b2ba:	4355      	muls	r5, r2
 800b2bc:	460e      	mov	r6, r1
 800b2be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2c2:	f7ff f979 	bl	800a5b8 <_malloc_r>
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	b140      	cbz	r0, 800b2dc <__sfmoreglue+0x28>
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	e9c0 1600 	strd	r1, r6, [r0]
 800b2d0:	300c      	adds	r0, #12
 800b2d2:	60a0      	str	r0, [r4, #8]
 800b2d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2d8:	f7fe ffbc 	bl	800a254 <memset>
 800b2dc:	4620      	mov	r0, r4
 800b2de:	bd70      	pop	{r4, r5, r6, pc}

0800b2e0 <__sfp_lock_acquire>:
 800b2e0:	4801      	ldr	r0, [pc, #4]	; (800b2e8 <__sfp_lock_acquire+0x8>)
 800b2e2:	f000 b8b3 	b.w	800b44c <__retarget_lock_acquire_recursive>
 800b2e6:	bf00      	nop
 800b2e8:	20000bad 	.word	0x20000bad

0800b2ec <__sfp_lock_release>:
 800b2ec:	4801      	ldr	r0, [pc, #4]	; (800b2f4 <__sfp_lock_release+0x8>)
 800b2ee:	f000 b8ae 	b.w	800b44e <__retarget_lock_release_recursive>
 800b2f2:	bf00      	nop
 800b2f4:	20000bad 	.word	0x20000bad

0800b2f8 <__sinit_lock_acquire>:
 800b2f8:	4801      	ldr	r0, [pc, #4]	; (800b300 <__sinit_lock_acquire+0x8>)
 800b2fa:	f000 b8a7 	b.w	800b44c <__retarget_lock_acquire_recursive>
 800b2fe:	bf00      	nop
 800b300:	20000bae 	.word	0x20000bae

0800b304 <__sinit_lock_release>:
 800b304:	4801      	ldr	r0, [pc, #4]	; (800b30c <__sinit_lock_release+0x8>)
 800b306:	f000 b8a2 	b.w	800b44e <__retarget_lock_release_recursive>
 800b30a:	bf00      	nop
 800b30c:	20000bae 	.word	0x20000bae

0800b310 <__sinit>:
 800b310:	b510      	push	{r4, lr}
 800b312:	4604      	mov	r4, r0
 800b314:	f7ff fff0 	bl	800b2f8 <__sinit_lock_acquire>
 800b318:	69a3      	ldr	r3, [r4, #24]
 800b31a:	b11b      	cbz	r3, 800b324 <__sinit+0x14>
 800b31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b320:	f7ff bff0 	b.w	800b304 <__sinit_lock_release>
 800b324:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b328:	6523      	str	r3, [r4, #80]	; 0x50
 800b32a:	4b13      	ldr	r3, [pc, #76]	; (800b378 <__sinit+0x68>)
 800b32c:	4a13      	ldr	r2, [pc, #76]	; (800b37c <__sinit+0x6c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	62a2      	str	r2, [r4, #40]	; 0x28
 800b332:	42a3      	cmp	r3, r4
 800b334:	bf08      	it	eq
 800b336:	2301      	moveq	r3, #1
 800b338:	4620      	mov	r0, r4
 800b33a:	bf08      	it	eq
 800b33c:	61a3      	streq	r3, [r4, #24]
 800b33e:	f000 f81f 	bl	800b380 <__sfp>
 800b342:	6060      	str	r0, [r4, #4]
 800b344:	4620      	mov	r0, r4
 800b346:	f000 f81b 	bl	800b380 <__sfp>
 800b34a:	60a0      	str	r0, [r4, #8]
 800b34c:	4620      	mov	r0, r4
 800b34e:	f000 f817 	bl	800b380 <__sfp>
 800b352:	2200      	movs	r2, #0
 800b354:	2104      	movs	r1, #4
 800b356:	60e0      	str	r0, [r4, #12]
 800b358:	6860      	ldr	r0, [r4, #4]
 800b35a:	f7ff ff81 	bl	800b260 <std>
 800b35e:	2201      	movs	r2, #1
 800b360:	2109      	movs	r1, #9
 800b362:	68a0      	ldr	r0, [r4, #8]
 800b364:	f7ff ff7c 	bl	800b260 <std>
 800b368:	2202      	movs	r2, #2
 800b36a:	2112      	movs	r1, #18
 800b36c:	68e0      	ldr	r0, [r4, #12]
 800b36e:	f7ff ff77 	bl	800b260 <std>
 800b372:	2301      	movs	r3, #1
 800b374:	61a3      	str	r3, [r4, #24]
 800b376:	e7d1      	b.n	800b31c <__sinit+0xc>
 800b378:	0800b88c 	.word	0x0800b88c
 800b37c:	0800b2a9 	.word	0x0800b2a9

0800b380 <__sfp>:
 800b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b382:	4607      	mov	r7, r0
 800b384:	f7ff ffac 	bl	800b2e0 <__sfp_lock_acquire>
 800b388:	4b1e      	ldr	r3, [pc, #120]	; (800b404 <__sfp+0x84>)
 800b38a:	681e      	ldr	r6, [r3, #0]
 800b38c:	69b3      	ldr	r3, [r6, #24]
 800b38e:	b913      	cbnz	r3, 800b396 <__sfp+0x16>
 800b390:	4630      	mov	r0, r6
 800b392:	f7ff ffbd 	bl	800b310 <__sinit>
 800b396:	3648      	adds	r6, #72	; 0x48
 800b398:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	d503      	bpl.n	800b3a8 <__sfp+0x28>
 800b3a0:	6833      	ldr	r3, [r6, #0]
 800b3a2:	b30b      	cbz	r3, 800b3e8 <__sfp+0x68>
 800b3a4:	6836      	ldr	r6, [r6, #0]
 800b3a6:	e7f7      	b.n	800b398 <__sfp+0x18>
 800b3a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3ac:	b9d5      	cbnz	r5, 800b3e4 <__sfp+0x64>
 800b3ae:	4b16      	ldr	r3, [pc, #88]	; (800b408 <__sfp+0x88>)
 800b3b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3b4:	60e3      	str	r3, [r4, #12]
 800b3b6:	6665      	str	r5, [r4, #100]	; 0x64
 800b3b8:	f000 f847 	bl	800b44a <__retarget_lock_init_recursive>
 800b3bc:	f7ff ff96 	bl	800b2ec <__sfp_lock_release>
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3cc:	6025      	str	r5, [r4, #0]
 800b3ce:	61a5      	str	r5, [r4, #24]
 800b3d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3d4:	f7fe ff3e 	bl	800a254 <memset>
 800b3d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e4:	3468      	adds	r4, #104	; 0x68
 800b3e6:	e7d9      	b.n	800b39c <__sfp+0x1c>
 800b3e8:	2104      	movs	r1, #4
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f7ff ff62 	bl	800b2b4 <__sfmoreglue>
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	6030      	str	r0, [r6, #0]
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d1d5      	bne.n	800b3a4 <__sfp+0x24>
 800b3f8:	f7ff ff78 	bl	800b2ec <__sfp_lock_release>
 800b3fc:	230c      	movs	r3, #12
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	e7ee      	b.n	800b3e0 <__sfp+0x60>
 800b402:	bf00      	nop
 800b404:	0800b88c 	.word	0x0800b88c
 800b408:	ffff0001 	.word	0xffff0001

0800b40c <_fwalk_reent>:
 800b40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b410:	4606      	mov	r6, r0
 800b412:	4688      	mov	r8, r1
 800b414:	2700      	movs	r7, #0
 800b416:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b41a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b41e:	f1b9 0901 	subs.w	r9, r9, #1
 800b422:	d505      	bpl.n	800b430 <_fwalk_reent+0x24>
 800b424:	6824      	ldr	r4, [r4, #0]
 800b426:	2c00      	cmp	r4, #0
 800b428:	d1f7      	bne.n	800b41a <_fwalk_reent+0xe>
 800b42a:	4638      	mov	r0, r7
 800b42c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b430:	89ab      	ldrh	r3, [r5, #12]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d907      	bls.n	800b446 <_fwalk_reent+0x3a>
 800b436:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b43a:	3301      	adds	r3, #1
 800b43c:	d003      	beq.n	800b446 <_fwalk_reent+0x3a>
 800b43e:	4629      	mov	r1, r5
 800b440:	4630      	mov	r0, r6
 800b442:	47c0      	blx	r8
 800b444:	4307      	orrs	r7, r0
 800b446:	3568      	adds	r5, #104	; 0x68
 800b448:	e7e9      	b.n	800b41e <_fwalk_reent+0x12>

0800b44a <__retarget_lock_init_recursive>:
 800b44a:	4770      	bx	lr

0800b44c <__retarget_lock_acquire_recursive>:
 800b44c:	4770      	bx	lr

0800b44e <__retarget_lock_release_recursive>:
 800b44e:	4770      	bx	lr

0800b450 <__swhatbuf_r>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	460e      	mov	r6, r1
 800b454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b458:	4614      	mov	r4, r2
 800b45a:	2900      	cmp	r1, #0
 800b45c:	461d      	mov	r5, r3
 800b45e:	b096      	sub	sp, #88	; 0x58
 800b460:	da08      	bge.n	800b474 <__swhatbuf_r+0x24>
 800b462:	2200      	movs	r2, #0
 800b464:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b468:	602a      	str	r2, [r5, #0]
 800b46a:	061a      	lsls	r2, r3, #24
 800b46c:	d410      	bmi.n	800b490 <__swhatbuf_r+0x40>
 800b46e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b472:	e00e      	b.n	800b492 <__swhatbuf_r+0x42>
 800b474:	466a      	mov	r2, sp
 800b476:	f000 f96d 	bl	800b754 <_fstat_r>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	dbf1      	blt.n	800b462 <__swhatbuf_r+0x12>
 800b47e:	9a01      	ldr	r2, [sp, #4]
 800b480:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b484:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b488:	425a      	negs	r2, r3
 800b48a:	415a      	adcs	r2, r3
 800b48c:	602a      	str	r2, [r5, #0]
 800b48e:	e7ee      	b.n	800b46e <__swhatbuf_r+0x1e>
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	2000      	movs	r0, #0
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	b016      	add	sp, #88	; 0x58
 800b498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b49c <__smakebuf_r>:
 800b49c:	898b      	ldrh	r3, [r1, #12]
 800b49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4a0:	079d      	lsls	r5, r3, #30
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	d507      	bpl.n	800b4b8 <__smakebuf_r+0x1c>
 800b4a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	6123      	str	r3, [r4, #16]
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	6163      	str	r3, [r4, #20]
 800b4b4:	b002      	add	sp, #8
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
 800b4b8:	466a      	mov	r2, sp
 800b4ba:	ab01      	add	r3, sp, #4
 800b4bc:	f7ff ffc8 	bl	800b450 <__swhatbuf_r>
 800b4c0:	9900      	ldr	r1, [sp, #0]
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f7ff f877 	bl	800a5b8 <_malloc_r>
 800b4ca:	b948      	cbnz	r0, 800b4e0 <__smakebuf_r+0x44>
 800b4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d0:	059a      	lsls	r2, r3, #22
 800b4d2:	d4ef      	bmi.n	800b4b4 <__smakebuf_r+0x18>
 800b4d4:	f023 0303 	bic.w	r3, r3, #3
 800b4d8:	f043 0302 	orr.w	r3, r3, #2
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	e7e3      	b.n	800b4a8 <__smakebuf_r+0xc>
 800b4e0:	4b0d      	ldr	r3, [pc, #52]	; (800b518 <__smakebuf_r+0x7c>)
 800b4e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	6020      	str	r0, [r4, #0]
 800b4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	9b00      	ldr	r3, [sp, #0]
 800b4f0:	6120      	str	r0, [r4, #16]
 800b4f2:	6163      	str	r3, [r4, #20]
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	b15b      	cbz	r3, 800b510 <__smakebuf_r+0x74>
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4fe:	f000 f93b 	bl	800b778 <_isatty_r>
 800b502:	b128      	cbz	r0, 800b510 <__smakebuf_r+0x74>
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	f023 0303 	bic.w	r3, r3, #3
 800b50a:	f043 0301 	orr.w	r3, r3, #1
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	89a0      	ldrh	r0, [r4, #12]
 800b512:	4305      	orrs	r5, r0
 800b514:	81a5      	strh	r5, [r4, #12]
 800b516:	e7cd      	b.n	800b4b4 <__smakebuf_r+0x18>
 800b518:	0800b2a9 	.word	0x0800b2a9

0800b51c <memchr>:
 800b51c:	4603      	mov	r3, r0
 800b51e:	b510      	push	{r4, lr}
 800b520:	b2c9      	uxtb	r1, r1
 800b522:	4402      	add	r2, r0
 800b524:	4293      	cmp	r3, r2
 800b526:	4618      	mov	r0, r3
 800b528:	d101      	bne.n	800b52e <memchr+0x12>
 800b52a:	2000      	movs	r0, #0
 800b52c:	e003      	b.n	800b536 <memchr+0x1a>
 800b52e:	7804      	ldrb	r4, [r0, #0]
 800b530:	3301      	adds	r3, #1
 800b532:	428c      	cmp	r4, r1
 800b534:	d1f6      	bne.n	800b524 <memchr+0x8>
 800b536:	bd10      	pop	{r4, pc}

0800b538 <memcpy>:
 800b538:	440a      	add	r2, r1
 800b53a:	4291      	cmp	r1, r2
 800b53c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b540:	d100      	bne.n	800b544 <memcpy+0xc>
 800b542:	4770      	bx	lr
 800b544:	b510      	push	{r4, lr}
 800b546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b54a:	4291      	cmp	r1, r2
 800b54c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b550:	d1f9      	bne.n	800b546 <memcpy+0xe>
 800b552:	bd10      	pop	{r4, pc}

0800b554 <memmove>:
 800b554:	4288      	cmp	r0, r1
 800b556:	b510      	push	{r4, lr}
 800b558:	eb01 0402 	add.w	r4, r1, r2
 800b55c:	d902      	bls.n	800b564 <memmove+0x10>
 800b55e:	4284      	cmp	r4, r0
 800b560:	4623      	mov	r3, r4
 800b562:	d807      	bhi.n	800b574 <memmove+0x20>
 800b564:	1e43      	subs	r3, r0, #1
 800b566:	42a1      	cmp	r1, r4
 800b568:	d008      	beq.n	800b57c <memmove+0x28>
 800b56a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b56e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b572:	e7f8      	b.n	800b566 <memmove+0x12>
 800b574:	4601      	mov	r1, r0
 800b576:	4402      	add	r2, r0
 800b578:	428a      	cmp	r2, r1
 800b57a:	d100      	bne.n	800b57e <memmove+0x2a>
 800b57c:	bd10      	pop	{r4, pc}
 800b57e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b586:	e7f7      	b.n	800b578 <memmove+0x24>

0800b588 <__malloc_lock>:
 800b588:	4801      	ldr	r0, [pc, #4]	; (800b590 <__malloc_lock+0x8>)
 800b58a:	f7ff bf5f 	b.w	800b44c <__retarget_lock_acquire_recursive>
 800b58e:	bf00      	nop
 800b590:	20000bac 	.word	0x20000bac

0800b594 <__malloc_unlock>:
 800b594:	4801      	ldr	r0, [pc, #4]	; (800b59c <__malloc_unlock+0x8>)
 800b596:	f7ff bf5a 	b.w	800b44e <__retarget_lock_release_recursive>
 800b59a:	bf00      	nop
 800b59c:	20000bac 	.word	0x20000bac

0800b5a0 <_realloc_r>:
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	4614      	mov	r4, r2
 800b5a8:	460e      	mov	r6, r1
 800b5aa:	b921      	cbnz	r1, 800b5b6 <_realloc_r+0x16>
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b2:	f7ff b801 	b.w	800a5b8 <_malloc_r>
 800b5b6:	b92a      	cbnz	r2, 800b5c4 <_realloc_r+0x24>
 800b5b8:	f7fe ff96 	bl	800a4e8 <_free_r>
 800b5bc:	4625      	mov	r5, r4
 800b5be:	4628      	mov	r0, r5
 800b5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c4:	f000 f8fa 	bl	800b7bc <_malloc_usable_size_r>
 800b5c8:	4284      	cmp	r4, r0
 800b5ca:	4607      	mov	r7, r0
 800b5cc:	d802      	bhi.n	800b5d4 <_realloc_r+0x34>
 800b5ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5d2:	d812      	bhi.n	800b5fa <_realloc_r+0x5a>
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	f7fe ffee 	bl	800a5b8 <_malloc_r>
 800b5dc:	4605      	mov	r5, r0
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d0ed      	beq.n	800b5be <_realloc_r+0x1e>
 800b5e2:	42bc      	cmp	r4, r7
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	bf28      	it	cs
 800b5ea:	463a      	movcs	r2, r7
 800b5ec:	f7ff ffa4 	bl	800b538 <memcpy>
 800b5f0:	4631      	mov	r1, r6
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	f7fe ff78 	bl	800a4e8 <_free_r>
 800b5f8:	e7e1      	b.n	800b5be <_realloc_r+0x1e>
 800b5fa:	4635      	mov	r5, r6
 800b5fc:	e7df      	b.n	800b5be <_realloc_r+0x1e>

0800b5fe <_raise_r>:
 800b5fe:	291f      	cmp	r1, #31
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4604      	mov	r4, r0
 800b604:	460d      	mov	r5, r1
 800b606:	d904      	bls.n	800b612 <_raise_r+0x14>
 800b608:	2316      	movs	r3, #22
 800b60a:	6003      	str	r3, [r0, #0]
 800b60c:	f04f 30ff 	mov.w	r0, #4294967295
 800b610:	bd38      	pop	{r3, r4, r5, pc}
 800b612:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b614:	b112      	cbz	r2, 800b61c <_raise_r+0x1e>
 800b616:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b61a:	b94b      	cbnz	r3, 800b630 <_raise_r+0x32>
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 f831 	bl	800b684 <_getpid_r>
 800b622:	462a      	mov	r2, r5
 800b624:	4601      	mov	r1, r0
 800b626:	4620      	mov	r0, r4
 800b628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b62c:	f000 b818 	b.w	800b660 <_kill_r>
 800b630:	2b01      	cmp	r3, #1
 800b632:	d00a      	beq.n	800b64a <_raise_r+0x4c>
 800b634:	1c59      	adds	r1, r3, #1
 800b636:	d103      	bne.n	800b640 <_raise_r+0x42>
 800b638:	2316      	movs	r3, #22
 800b63a:	6003      	str	r3, [r0, #0]
 800b63c:	2001      	movs	r0, #1
 800b63e:	e7e7      	b.n	800b610 <_raise_r+0x12>
 800b640:	2400      	movs	r4, #0
 800b642:	4628      	mov	r0, r5
 800b644:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b648:	4798      	blx	r3
 800b64a:	2000      	movs	r0, #0
 800b64c:	e7e0      	b.n	800b610 <_raise_r+0x12>
	...

0800b650 <raise>:
 800b650:	4b02      	ldr	r3, [pc, #8]	; (800b65c <raise+0xc>)
 800b652:	4601      	mov	r1, r0
 800b654:	6818      	ldr	r0, [r3, #0]
 800b656:	f7ff bfd2 	b.w	800b5fe <_raise_r>
 800b65a:	bf00      	nop
 800b65c:	2000016c 	.word	0x2000016c

0800b660 <_kill_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	2300      	movs	r3, #0
 800b664:	4d06      	ldr	r5, [pc, #24]	; (800b680 <_kill_r+0x20>)
 800b666:	4604      	mov	r4, r0
 800b668:	4608      	mov	r0, r1
 800b66a:	4611      	mov	r1, r2
 800b66c:	602b      	str	r3, [r5, #0]
 800b66e:	f7f5 fda6 	bl	80011be <_kill>
 800b672:	1c43      	adds	r3, r0, #1
 800b674:	d102      	bne.n	800b67c <_kill_r+0x1c>
 800b676:	682b      	ldr	r3, [r5, #0]
 800b678:	b103      	cbz	r3, 800b67c <_kill_r+0x1c>
 800b67a:	6023      	str	r3, [r4, #0]
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	bf00      	nop
 800b680:	20000bb0 	.word	0x20000bb0

0800b684 <_getpid_r>:
 800b684:	f7f5 bd94 	b.w	80011b0 <_getpid>

0800b688 <__sread>:
 800b688:	b510      	push	{r4, lr}
 800b68a:	460c      	mov	r4, r1
 800b68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b690:	f000 f89c 	bl	800b7cc <_read_r>
 800b694:	2800      	cmp	r0, #0
 800b696:	bfab      	itete	ge
 800b698:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b69a:	89a3      	ldrhlt	r3, [r4, #12]
 800b69c:	181b      	addge	r3, r3, r0
 800b69e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6a2:	bfac      	ite	ge
 800b6a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6a6:	81a3      	strhlt	r3, [r4, #12]
 800b6a8:	bd10      	pop	{r4, pc}

0800b6aa <__swrite>:
 800b6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ae:	461f      	mov	r7, r3
 800b6b0:	898b      	ldrh	r3, [r1, #12]
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	05db      	lsls	r3, r3, #23
 800b6b6:	460c      	mov	r4, r1
 800b6b8:	4616      	mov	r6, r2
 800b6ba:	d505      	bpl.n	800b6c8 <__swrite+0x1e>
 800b6bc:	2302      	movs	r3, #2
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c4:	f000 f868 	bl	800b798 <_lseek_r>
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	4632      	mov	r2, r6
 800b6cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	463b      	mov	r3, r7
 800b6d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6de:	f000 b817 	b.w	800b710 <_write_r>

0800b6e2 <__sseek>:
 800b6e2:	b510      	push	{r4, lr}
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ea:	f000 f855 	bl	800b798 <_lseek_r>
 800b6ee:	1c43      	adds	r3, r0, #1
 800b6f0:	89a3      	ldrh	r3, [r4, #12]
 800b6f2:	bf15      	itete	ne
 800b6f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6fe:	81a3      	strheq	r3, [r4, #12]
 800b700:	bf18      	it	ne
 800b702:	81a3      	strhne	r3, [r4, #12]
 800b704:	bd10      	pop	{r4, pc}

0800b706 <__sclose>:
 800b706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b70a:	f000 b813 	b.w	800b734 <_close_r>
	...

0800b710 <_write_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4604      	mov	r4, r0
 800b714:	4608      	mov	r0, r1
 800b716:	4611      	mov	r1, r2
 800b718:	2200      	movs	r2, #0
 800b71a:	4d05      	ldr	r5, [pc, #20]	; (800b730 <_write_r+0x20>)
 800b71c:	602a      	str	r2, [r5, #0]
 800b71e:	461a      	mov	r2, r3
 800b720:	f7f5 fd84 	bl	800122c <_write>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	d102      	bne.n	800b72e <_write_r+0x1e>
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	b103      	cbz	r3, 800b72e <_write_r+0x1e>
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	20000bb0 	.word	0x20000bb0

0800b734 <_close_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	2300      	movs	r3, #0
 800b738:	4d05      	ldr	r5, [pc, #20]	; (800b750 <_close_r+0x1c>)
 800b73a:	4604      	mov	r4, r0
 800b73c:	4608      	mov	r0, r1
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	f7f5 fd90 	bl	8001264 <_close>
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d102      	bne.n	800b74e <_close_r+0x1a>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	b103      	cbz	r3, 800b74e <_close_r+0x1a>
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	20000bb0 	.word	0x20000bb0

0800b754 <_fstat_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	2300      	movs	r3, #0
 800b758:	4d06      	ldr	r5, [pc, #24]	; (800b774 <_fstat_r+0x20>)
 800b75a:	4604      	mov	r4, r0
 800b75c:	4608      	mov	r0, r1
 800b75e:	4611      	mov	r1, r2
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	f7f5 fd8a 	bl	800127a <_fstat>
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	d102      	bne.n	800b770 <_fstat_r+0x1c>
 800b76a:	682b      	ldr	r3, [r5, #0]
 800b76c:	b103      	cbz	r3, 800b770 <_fstat_r+0x1c>
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	bd38      	pop	{r3, r4, r5, pc}
 800b772:	bf00      	nop
 800b774:	20000bb0 	.word	0x20000bb0

0800b778 <_isatty_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	2300      	movs	r3, #0
 800b77c:	4d05      	ldr	r5, [pc, #20]	; (800b794 <_isatty_r+0x1c>)
 800b77e:	4604      	mov	r4, r0
 800b780:	4608      	mov	r0, r1
 800b782:	602b      	str	r3, [r5, #0]
 800b784:	f7f5 fd88 	bl	8001298 <_isatty>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	d102      	bne.n	800b792 <_isatty_r+0x1a>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b103      	cbz	r3, 800b792 <_isatty_r+0x1a>
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	20000bb0 	.word	0x20000bb0

0800b798 <_lseek_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4604      	mov	r4, r0
 800b79c:	4608      	mov	r0, r1
 800b79e:	4611      	mov	r1, r2
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	4d05      	ldr	r5, [pc, #20]	; (800b7b8 <_lseek_r+0x20>)
 800b7a4:	602a      	str	r2, [r5, #0]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	f7f5 fd80 	bl	80012ac <_lseek>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d102      	bne.n	800b7b6 <_lseek_r+0x1e>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	b103      	cbz	r3, 800b7b6 <_lseek_r+0x1e>
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	bd38      	pop	{r3, r4, r5, pc}
 800b7b8:	20000bb0 	.word	0x20000bb0

0800b7bc <_malloc_usable_size_r>:
 800b7bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7c0:	1f18      	subs	r0, r3, #4
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	bfbc      	itt	lt
 800b7c6:	580b      	ldrlt	r3, [r1, r0]
 800b7c8:	18c0      	addlt	r0, r0, r3
 800b7ca:	4770      	bx	lr

0800b7cc <_read_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	4608      	mov	r0, r1
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4d05      	ldr	r5, [pc, #20]	; (800b7ec <_read_r+0x20>)
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f5 fd09 	bl	80011f2 <_read>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_read_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_read_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20000bb0 	.word	0x20000bb0

0800b7f0 <_init>:
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	bf00      	nop
 800b7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f6:	bc08      	pop	{r3}
 800b7f8:	469e      	mov	lr, r3
 800b7fa:	4770      	bx	lr

0800b7fc <_fini>:
 800b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fe:	bf00      	nop
 800b800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b802:	bc08      	pop	{r3}
 800b804:	469e      	mov	lr, r3
 800b806:	4770      	bx	lr
