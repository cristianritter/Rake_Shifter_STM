
SHIFTER_RAKE_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c234  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800c344  0800c344  0001c344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c638  0800c638  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c638  0800c638  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c638  0800c638  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c638  0800c638  0001c638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c63c  0800c63c  0001c63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800c640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ec  200001d0  0800c810  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  0800c810  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137ae  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003972  00000000  00000000  000339a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00037320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00038518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbfd  00000000  00000000  00039578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161e0  00000000  00000000  00055175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8d2  00000000  00000000  0006b355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fac27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000557c  00000000  00000000  000fac78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c32c 	.word	0x0800c32c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800c32c 	.word	0x0800c32c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800077e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078c:	d020      	beq.n	80007d0 <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 800078e:	68f9      	ldr	r1, [r7, #12]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	b2ca      	uxtb	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	0a19      	lsrs	r1, r3, #8
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3301      	adds	r3, #1
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	0c19      	lsrs	r1, r3, #16
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3302      	adds	r3, #2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	0e19      	lsrs	r1, r3, #24
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3303      	adds	r3, #3
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	3304      	adds	r3, #4
 80007ce:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d6:	d1cf      	bne.n	8000778 <read_flash+0xc>
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <save_to_flash>:

void save_to_flash(uint8_t *data){
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e8:	b08f      	sub	sp, #60	; 0x3c
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	466b      	mov	r3, sp
 80007f0:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcac 	bl	8000150 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	089e      	lsrs	r6, r3, #2
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fca7 	bl	8000150 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	18f1      	adds	r1, r6, r3
 8000814:	460b      	mov	r3, r1
 8000816:	3b01      	subs	r3, #1
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
 800081a:	2300      	movs	r3, #0
 800081c:	4688      	mov	r8, r1
 800081e:	4699      	mov	r9, r3
 8000820:	f04f 0200 	mov.w	r2, #0
 8000824:	f04f 0300 	mov.w	r3, #0
 8000828:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800082c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000830:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000834:	2300      	movs	r3, #0
 8000836:	460c      	mov	r4, r1
 8000838:	461d      	mov	r5, r3
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	016b      	lsls	r3, r5, #5
 8000844:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000848:	0162      	lsls	r2, r4, #5
 800084a:	008b      	lsls	r3, r1, #2
 800084c:	3307      	adds	r3, #7
 800084e:	08db      	lsrs	r3, r3, #3
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	ebad 0d03 	sub.w	sp, sp, r3
 8000856:	466b      	mov	r3, sp
 8000858:	3303      	adds	r3, #3
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8000860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000862:	f7ff fc75 	bl	8000150 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800086e:	f00a fa8f 	bl	800ad90 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000876:	f00a fab3 	bl	800ade0 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800087a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800087c:	f7ff fc68 	bl	8000150 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8000884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000886:	f7ff fc63 	bl	8000150 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff fc56 	bl	8000150 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 80008a8:	b29c      	uxth	r4, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fc50 	bl	8000150 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4423      	add	r3, r4
 80008c4:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80008c6:	857b      	strh	r3, [r7, #42]	; 0x2a
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80008c8:	f002 f9c2 	bl	8002c50 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 80008cc:	f002 f9f6 	bl	8002cbc <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.PageAddress = FLASH_STORAGE;
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <save_to_flash+0x178>)
 80008d6:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbPages = pages;
 80008d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008da:	b29b      	uxth	r3, r3
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError;

	volatile uint32_t write_cnt=0, index=0;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]

	volatile HAL_StatusTypeDef status;
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80008e6:	f107 0214 	add.w	r2, r7, #20
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 fac1 	bl	8002e78 <HAL_FLASHEx_Erase>
 80008f6:	4603      	mov	r3, r0
 80008f8:	72fb      	strb	r3, [r7, #11]
	while(index < data_length)
 80008fa:	e020      	b.n	800093e <save_to_flash+0x15a>
	{
		if (status == HAL_OK){
 80008fc:	7afb      	ldrb	r3, [r7, #11]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11c      	bne.n	800093e <save_to_flash+0x15a>
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800090a:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000916:	2200      	movs	r2, #0
 8000918:	469a      	mov	sl, r3
 800091a:	4693      	mov	fp, r2
 800091c:	4652      	mov	r2, sl
 800091e:	465b      	mov	r3, fp
 8000920:	2002      	movs	r0, #2
 8000922:	f002 f925 	bl	8002b70 <HAL_FLASH_Program>
 8000926:	4603      	mov	r3, r0
 8000928:	72fb      	strb	r3, [r7, #11]
			if(status == HAL_OK){
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d105      	bne.n	800093e <save_to_flash+0x15a>
				write_cnt += 4;
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	3304      	adds	r3, #4
 8000936:	613b      	str	r3, [r7, #16]
				index++;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
	while(index < data_length)
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000942:	429a      	cmp	r2, r3
 8000944:	d3da      	bcc.n	80008fc <save_to_flash+0x118>
			}
		}
	}

	HAL_FLASH_OB_Lock();
 8000946:	f002 f9d5 	bl	8002cf4 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 800094a:	f002 f9a7 	bl	8002c9c <HAL_FLASH_Lock>
 800094e:	f8d7 d000 	ldr.w	sp, [r7]
}
 8000952:	bf00      	nop
 8000954:	373c      	adds	r7, #60	; 0x3c
 8000956:	46bd      	mov	sp, r7
 8000958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800095c:	08019000 	.word	0x08019000

08000960 <LerADCS>:
uint16_t speed_div_y[2] = {1117, 2824};					//  -		-		-		-		-		-		-		-  y
uint16_t ADCValue[3] = {0, 0, 0};
int8_t buffer2[6];
uint8_t rx_buffer[2];

void LerADCS(){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	//Este trecho testa somente um spi por round, evitando perca de tempo
	if (spi_detection == 1){
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <LerADCS+0x70>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d10c      	bne.n	8000986 <LerADCS+0x26>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);  //descarga para seleção do G27
 800096c:	2301      	movs	r3, #1
 800096e:	2202      	movs	r2, #2
 8000970:	4918      	ldr	r1, [pc, #96]	; (80009d4 <LerADCS+0x74>)
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <LerADCS+0x78>)
 8000974:	f004 fef4 	bl	8005760 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);
 8000978:	2301      	movs	r3, #1
 800097a:	2202      	movs	r2, #2
 800097c:	4915      	ldr	r1, [pc, #84]	; (80009d4 <LerADCS+0x74>)
 800097e:	4816      	ldr	r0, [pc, #88]	; (80009d8 <LerADCS+0x78>)
 8000980:	f004 feee 	bl	8005760 <HAL_SPI_Receive>
 8000984:	e00b      	b.n	800099e <LerADCS+0x3e>
		 }
	else {
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);  // descarga para seleção do G25
 8000986:	2301      	movs	r3, #1
 8000988:	2202      	movs	r2, #2
 800098a:	4912      	ldr	r1, [pc, #72]	; (80009d4 <LerADCS+0x74>)
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <LerADCS+0x7c>)
 800098e:	f004 fee7 	bl	8005760 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);
 8000992:	2301      	movs	r3, #1
 8000994:	2202      	movs	r2, #2
 8000996:	490f      	ldr	r1, [pc, #60]	; (80009d4 <LerADCS+0x74>)
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <LerADCS+0x7c>)
 800099a:	f004 fee1 	bl	8005760 <HAL_SPI_Receive>
	 }
	//Este trecho salva o valor da tensao do capacitor em cada teste
	if (spi_detection == 1){						// se estiver conectado g25 este valor reduz, pois o jumper entre os pinos 1 [spi1] e 9 [cap] faz isso.
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <LerADCS+0x70>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d107      	bne.n	80009b6 <LerADCS+0x56>
	  spi_values[0] = ADCValue[2];
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <LerADCS+0x80>)
 80009a8:	889a      	ldrh	r2, [r3, #4]
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <LerADCS+0x84>)
 80009ac:	801a      	strh	r2, [r3, #0]
	  spi_detection = 2;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <LerADCS+0x70>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e006      	b.n	80009c4 <LerADCS+0x64>
	}
	else{											// se estiver conectado g27 este valor reduz, pois o jumper entre os pinos 7 [spi2] e 9 [cap] faz isso.
	  spi_values[1] = ADCValue[2];									// quando excitado spi2 gera reducao na tensao do cap caso esteja conectado o g25
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <LerADCS+0x80>)
 80009b8:	889a      	ldrh	r2, [r3, #4]
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <LerADCS+0x84>)
 80009bc:	805a      	strh	r2, [r3, #2]
	  spi_detection = 1;
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <LerADCS+0x70>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[0]), 100);
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[1]), 100);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", ADCValue[2]), 100);
  //HAL_UART_Transmit(&huart1, "      ", 6, 100);
  //HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  HAL_Delay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f001 f971 	bl	8001cac <HAL_Delay>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000370 	.word	0x20000370
 80009d8:	20000260 	.word	0x20000260
 80009dc:	200002b8 	.word	0x200002b8
 80009e0:	20000360 	.word	0x20000360
 80009e4:	2000035c 	.word	0x2000035c

080009e8 <LerSPI>:

void LerSPI(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	4839      	ldr	r0, [pc, #228]	; (8000ad8 <LerSPI+0xf0>)
 80009f4:	f002 fc83 	bl	80032fe <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f001 f957 	bl	8001cac <HAL_Delay>
//  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 50);
  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", spi_values[0]), 100);
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <LerSPI+0xf4>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4936      	ldr	r1, [pc, #216]	; (8000ae0 <LerSPI+0xf8>)
 8000a06:	4837      	ldr	r0, [pc, #220]	; (8000ae4 <LerSPI+0xfc>)
 8000a08:	f00a f9ca 	bl	800ada0 <siprintf>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	2364      	movs	r3, #100	; 0x64
 8000a12:	4934      	ldr	r1, [pc, #208]	; (8000ae4 <LerSPI+0xfc>)
 8000a14:	4834      	ldr	r0, [pc, #208]	; (8000ae8 <LerSPI+0x100>)
 8000a16:	f005 fba0 	bl	800615a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", spi_values[1]), 100);
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <LerSPI+0xf4>)
 8000a1c:	885b      	ldrh	r3, [r3, #2]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	492f      	ldr	r1, [pc, #188]	; (8000ae0 <LerSPI+0xf8>)
 8000a22:	4830      	ldr	r0, [pc, #192]	; (8000ae4 <LerSPI+0xfc>)
 8000a24:	f00a f9bc 	bl	800ada0 <siprintf>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	2364      	movs	r3, #100	; 0x64
 8000a2e:	492d      	ldr	r1, [pc, #180]	; (8000ae4 <LerSPI+0xfc>)
 8000a30:	482d      	ldr	r0, [pc, #180]	; (8000ae8 <LerSPI+0x100>)
 8000a32:	f005 fb92 	bl	800615a <HAL_UART_Transmit>

  if (spi_values[0] - spi_values[1] > -10 && spi_values[0] - spi_values[1] < 10){
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <LerSPI+0xf4>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b27      	ldr	r3, [pc, #156]	; (8000adc <LerSPI+0xf4>)
 8000a3e:	885b      	ldrh	r3, [r3, #2]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	f113 0f09 	cmn.w	r3, #9
 8000a46:	db0e      	blt.n	8000a66 <LerSPI+0x7e>
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <LerSPI+0xf4>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <LerSPI+0xf4>)
 8000a50:	885b      	ldrh	r3, [r3, #2]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	dc06      	bgt.n	8000a66 <LerSPI+0x7e>
	  HAL_UART_Transmit(&huart1, "DESCON", 6, 100);
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	2206      	movs	r2, #6
 8000a5c:	4923      	ldr	r1, [pc, #140]	; (8000aec <LerSPI+0x104>)
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <LerSPI+0x100>)
 8000a60:	f005 fb7b 	bl	800615a <HAL_UART_Transmit>
 8000a64:	e01e      	b.n	8000aa4 <LerSPI+0xbc>
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
	//  return;
  }
  else if (spi_values[0] < spi_values[1]){ 					// significa que está conectado o G27
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <LerSPI+0xf4>)
 8000a68:	881a      	ldrh	r2, [r3, #0]
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <LerSPI+0xf4>)
 8000a6c:	885b      	ldrh	r3, [r3, #2]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d20c      	bcs.n	8000a8c <LerSPI+0xa4>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 50);
 8000a72:	2332      	movs	r3, #50	; 0x32
 8000a74:	2202      	movs	r2, #2
 8000a76:	491e      	ldr	r1, [pc, #120]	; (8000af0 <LerSPI+0x108>)
 8000a78:	481e      	ldr	r0, [pc, #120]	; (8000af4 <LerSPI+0x10c>)
 8000a7a:	f004 fe71 	bl	8005760 <HAL_SPI_Receive>
	  HAL_UART_Transmit(&huart1, "G25   ", 6, 100);
 8000a7e:	2364      	movs	r3, #100	; 0x64
 8000a80:	2206      	movs	r2, #6
 8000a82:	491d      	ldr	r1, [pc, #116]	; (8000af8 <LerSPI+0x110>)
 8000a84:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <LerSPI+0x100>)
 8000a86:	f005 fb68 	bl	800615a <HAL_UART_Transmit>
 8000a8a:	e00b      	b.n	8000aa4 <LerSPI+0xbc>
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  }
  else{													// significa que está conectado o G25
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 50);
 8000a8c:	2332      	movs	r3, #50	; 0x32
 8000a8e:	2202      	movs	r2, #2
 8000a90:	4917      	ldr	r1, [pc, #92]	; (8000af0 <LerSPI+0x108>)
 8000a92:	481a      	ldr	r0, [pc, #104]	; (8000afc <LerSPI+0x114>)
 8000a94:	f004 fe64 	bl	8005760 <HAL_SPI_Receive>
	  HAL_UART_Transmit(&huart1, "G27   ", 6, 100);
 8000a98:	2364      	movs	r3, #100	; 0x64
 8000a9a:	2206      	movs	r2, #6
 8000a9c:	4918      	ldr	r1, [pc, #96]	; (8000b00 <LerSPI+0x118>)
 8000a9e:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <LerSPI+0x100>)
 8000aa0:	f005 fb5b 	bl	800615a <HAL_UART_Transmit>
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  }

  HAL_Delay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f001 f901 	bl	8001cac <HAL_Delay>
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <LerSPI+0xf0>)
 8000ab2:	f002 fc24 	bl	80032fe <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f001 f8f8 	bl	8001cac <HAL_Delay>

//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[0]), 100);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[1]), 100);
  HAL_UART_Transmit(&huart1, "      ", 6, 100);
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	2206      	movs	r2, #6
 8000ac0:	4910      	ldr	r1, [pc, #64]	; (8000b04 <LerSPI+0x11c>)
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <LerSPI+0x100>)
 8000ac4:	f005 fb49 	bl	800615a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	2202      	movs	r2, #2
 8000acc:	490e      	ldr	r1, [pc, #56]	; (8000b08 <LerSPI+0x120>)
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <LerSPI+0x100>)
 8000ad0:	f005 fb43 	bl	800615a <HAL_UART_Transmit>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40010c00 	.word	0x40010c00
 8000adc:	2000035c 	.word	0x2000035c
 8000ae0:	0800c344 	.word	0x0800c344
 8000ae4:	20000368 	.word	0x20000368
 8000ae8:	20000310 	.word	0x20000310
 8000aec:	0800c348 	.word	0x0800c348
 8000af0:	20000370 	.word	0x20000370
 8000af4:	200002b8 	.word	0x200002b8
 8000af8:	0800c350 	.word	0x0800c350
 8000afc:	20000260 	.word	0x20000260
 8000b00:	0800c358 	.word	0x0800c358
 8000b04:	0800c360 	.word	0x0800c360
 8000b08:	0800c368 	.word	0x0800c368
 8000b0c:	00000000 	.word	0x00000000

08000b10 <Calibrar>:

void Calibrar(void)
{
 8000b10:	b5b0      	push	{r4, r5, r7, lr}
 8000b12:	b092      	sub	sp, #72	; 0x48
 8000b14:	af02      	add	r7, sp, #8
	if (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){			// se botão de calibração pressionado
 8000b16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1a:	4885      	ldr	r0, [pc, #532]	; (8000d30 <Calibrar+0x220>)
 8000b1c:	f002 fbd8 	bl	80032d0 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 80fa 	bne.w	8000d1c <Calibrar+0x20c>
		HAL_Delay(500);
 8000b28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2c:	f001 f8be 	bl	8001cac <HAL_Delay>
		char params_to_save[50];
		uint16_t axis_x_min_max[2] = {9999, 0};
 8000b30:	f242 730f 	movw	r3, #9999	; 0x270f
 8000b34:	873b      	strh	r3, [r7, #56]	; 0x38
 8000b36:	2300      	movs	r3, #0
 8000b38:	877b      	strh	r3, [r7, #58]	; 0x3a
		uint16_t axis_y_min_max[2] = {9999, 0};
 8000b3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8000b3e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000b40:	2300      	movs	r3, #0
 8000b42:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000b44:	e029      	b.n	8000b9a <Calibrar+0x8a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4a:	487a      	ldr	r0, [pc, #488]	; (8000d34 <Calibrar+0x224>)
 8000b4c:	f002 fbef 	bl	800332e <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8000b50:	2032      	movs	r0, #50	; 0x32
 8000b52:	f001 f8ab 	bl	8001cac <HAL_Delay>
			LerADCS();  									//le posicao dos eixos
 8000b56:	f7ff ff03 	bl	8000960 <LerADCS>
			if (ADCValue[0] < axis_x_min_max[0]){			// define o menor valor detectado no eixo x
 8000b5a:	4b77      	ldr	r3, [pc, #476]	; (8000d38 <Calibrar+0x228>)
 8000b5c:	881a      	ldrh	r2, [r3, #0]
 8000b5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d202      	bcs.n	8000b6a <Calibrar+0x5a>
				axis_x_min_max[0] = ADCValue[0];
 8000b64:	4b74      	ldr	r3, [pc, #464]	; (8000d38 <Calibrar+0x228>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	873b      	strh	r3, [r7, #56]	; 0x38
			}
			if (ADCValue[0] > axis_x_min_max[1]){			// define o maior valor detectado no eixo x
 8000b6a:	4b73      	ldr	r3, [pc, #460]	; (8000d38 <Calibrar+0x228>)
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d902      	bls.n	8000b7a <Calibrar+0x6a>
				axis_x_min_max[1] = ADCValue[0];
 8000b74:	4b70      	ldr	r3, [pc, #448]	; (8000d38 <Calibrar+0x228>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	877b      	strh	r3, [r7, #58]	; 0x3a
			}
			if (ADCValue[1] < axis_y_min_max[0]){			// define o menor valor detectado no eixo y
 8000b7a:	4b6f      	ldr	r3, [pc, #444]	; (8000d38 <Calibrar+0x228>)
 8000b7c:	885a      	ldrh	r2, [r3, #2]
 8000b7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d202      	bcs.n	8000b8a <Calibrar+0x7a>
				axis_y_min_max[0] = ADCValue[1];
 8000b84:	4b6c      	ldr	r3, [pc, #432]	; (8000d38 <Calibrar+0x228>)
 8000b86:	885b      	ldrh	r3, [r3, #2]
 8000b88:	86bb      	strh	r3, [r7, #52]	; 0x34
			}
			if (ADCValue[1] > axis_y_min_max[1]){			// define o maior valor detectado no eixo y
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	; (8000d38 <Calibrar+0x228>)
 8000b8c:	885a      	ldrh	r2, [r3, #2]
 8000b8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d902      	bls.n	8000b9a <Calibrar+0x8a>
				axis_y_min_max[1] = ADCValue[1];
 8000b94:	4b68      	ldr	r3, [pc, #416]	; (8000d38 <Calibrar+0x228>)
 8000b96:	885b      	ldrh	r3, [r3, #2]
 8000b98:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9e:	4864      	ldr	r0, [pc, #400]	; (8000d30 <Calibrar+0x220>)
 8000ba0:	f002 fb96 	bl	80032d0 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0cd      	beq.n	8000b46 <Calibrar+0x36>
			}
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	4860      	ldr	r0, [pc, #384]	; (8000d34 <Calibrar+0x224>)
 8000bb2:	f002 fba4 	bl	80032fe <HAL_GPIO_WritePin>

		uint16_t space_x = (axis_x_min_max[1]-axis_x_min_max[0])/3;
 8000bb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000bb8:	461a      	mov	r2, r3
 8000bba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	4a5f      	ldr	r2, [pc, #380]	; (8000d3c <Calibrar+0x22c>)
 8000bc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc4:	17db      	asrs	r3, r3, #31
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
		speed_div_x[0] = axis_x_min_max[0] + (space_x*0.8); 					//calcula as linhas de calibracao do eixo x
 8000bca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fd43 	bl	8000658 <__aeabi_i2d>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	460d      	mov	r5, r1
 8000bd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fd3d 	bl	8000658 <__aeabi_i2d>
 8000bde:	a352      	add	r3, pc, #328	; (adr r3, 8000d28 <Calibrar+0x218>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	f7ff fabc 	bl	8000160 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4620      	mov	r0, r4
 8000bee:	4629      	mov	r1, r5
 8000bf0:	f7ff fbe6 	bl	80003c0 <__adddf3>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fd96 	bl	800072c <__aeabi_d2uiz>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b4e      	ldr	r3, [pc, #312]	; (8000d40 <Calibrar+0x230>)
 8000c06:	801a      	strh	r2, [r3, #0]

		speed_div_x[1] = axis_x_min_max[1] - (space_x*0.8);
 8000c08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fd24 	bl	8000658 <__aeabi_i2d>
 8000c10:	4604      	mov	r4, r0
 8000c12:	460d      	mov	r5, r1
 8000c14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fd1e 	bl	8000658 <__aeabi_i2d>
 8000c1c:	a342      	add	r3, pc, #264	; (adr r3, 8000d28 <Calibrar+0x218>)
 8000c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c22:	f7ff fa9d 	bl	8000160 <__aeabi_dmul>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	4629      	mov	r1, r5
 8000c2e:	f7ff fbc5 	bl	80003bc <__aeabi_dsub>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f7ff fd77 	bl	800072c <__aeabi_d2uiz>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b3f      	ldr	r3, [pc, #252]	; (8000d40 <Calibrar+0x230>)
 8000c44:	805a      	strh	r2, [r3, #2]

		uint16_t space_y = (axis_y_min_max[1]-axis_y_min_max[0])/3;
 8000c46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c48:	461a      	mov	r2, r3
 8000c4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	4a3b      	ldr	r2, [pc, #236]	; (8000d3c <Calibrar+0x22c>)
 8000c50:	fb82 1203 	smull	r1, r2, r2, r3
 8000c54:	17db      	asrs	r3, r3, #31
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	87bb      	strh	r3, [r7, #60]	; 0x3c
		speed_div_y[0] = axis_y_min_max[0] + (space_y*0.8); 					//calcula as linhas de calibracao do eixo y
 8000c5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fcfb 	bl	8000658 <__aeabi_i2d>
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fcf5 	bl	8000658 <__aeabi_i2d>
 8000c6e:	a32e      	add	r3, pc, #184	; (adr r3, 8000d28 <Calibrar+0x218>)
 8000c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c74:	f7ff fa74 	bl	8000160 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	4629      	mov	r1, r5
 8000c80:	f7ff fb9e 	bl	80003c0 <__adddf3>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4610      	mov	r0, r2
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f7ff fd4e 	bl	800072c <__aeabi_d2uiz>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <Calibrar+0x234>)
 8000c96:	801a      	strh	r2, [r3, #0]

		speed_div_y[1] = axis_y_min_max[1] - (space_y*0.8);
 8000c98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fcdc 	bl	8000658 <__aeabi_i2d>
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460d      	mov	r5, r1
 8000ca4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fcd6 	bl	8000658 <__aeabi_i2d>
 8000cac:	a31e      	add	r3, pc, #120	; (adr r3, 8000d28 <Calibrar+0x218>)
 8000cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb2:	f7ff fa55 	bl	8000160 <__aeabi_dmul>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4620      	mov	r0, r4
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	f7ff fb7d 	bl	80003bc <__aeabi_dsub>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f7ff fd2f 	bl	800072c <__aeabi_d2uiz>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <Calibrar+0x234>)
 8000cd4:	805a      	strh	r2, [r3, #2]

		sprintf(params_to_save, "%u,%u,%u,%u,", speed_div_x[0], speed_div_x[1], speed_div_y[0], speed_div_y[1]);
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <Calibrar+0x230>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <Calibrar+0x230>)
 8000cde:	885b      	ldrh	r3, [r3, #2]
 8000ce0:	461c      	mov	r4, r3
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <Calibrar+0x234>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <Calibrar+0x234>)
 8000cea:	885b      	ldrh	r3, [r3, #2]
 8000cec:	4638      	mov	r0, r7
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	9200      	str	r2, [sp, #0]
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	4914      	ldr	r1, [pc, #80]	; (8000d48 <Calibrar+0x238>)
 8000cf8:	f00a f852 	bl	800ada0 <siprintf>
		save_to_flash((uint8_t *)params_to_save);
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fd70 	bl	80007e4 <save_to_flash>
		HAL_UART_Transmit(&huart1, (uint8_t *)params_to_save, (int)sizeof(params_to_save), 100);
 8000d04:	4639      	mov	r1, r7
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	2232      	movs	r2, #50	; 0x32
 8000d0a:	4810      	ldr	r0, [pc, #64]	; (8000d4c <Calibrar+0x23c>)
 8000d0c:	f005 fa25 	bl	800615a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n ", 2, 100);
 8000d10:	2364      	movs	r3, #100	; 0x64
 8000d12:	2202      	movs	r2, #2
 8000d14:	490e      	ldr	r1, [pc, #56]	; (8000d50 <Calibrar+0x240>)
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <Calibrar+0x23c>)
 8000d18:	f005 fa1f 	bl	800615a <HAL_UART_Transmit>

	}
}
 8000d1c:	bf00      	nop
 8000d1e:	3740      	adds	r7, #64	; 0x40
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bdb0      	pop	{r4, r5, r7, pc}
 8000d24:	f3af 8000 	nop.w
 8000d28:	9999999a 	.word	0x9999999a
 8000d2c:	3fe99999 	.word	0x3fe99999
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40010c00 	.word	0x40010c00
 8000d38:	20000360 	.word	0x20000360
 8000d3c:	55555556 	.word	0x55555556
 8000d40:	20000004 	.word	0x20000004
 8000d44:	20000008 	.word	0x20000008
 8000d48:	0800c36c 	.word	0x0800c36c
 8000d4c:	20000310 	.word	0x20000310
 8000d50:	0800c368 	.word	0x0800c368

08000d54 <update_data_from_flash>:

void update_data_from_flash(uint16_t (* speed_div_x), uint16_t (* speed_div_y)){									// PRECISA FINALIZAR ANTES DE TESTAR
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0b4      	sub	sp, #208	; 0xd0
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	char data[0xC0];
	read_flash((uint8_t *)data);
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fd02 	bl	800076c <read_flash>
	char * token = strtok(data,",");				//first strtok go to variable directly
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4922      	ldr	r1, [pc, #136]	; (8000df8 <update_data_from_flash+0xa4>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00a f83e 	bl	800adf0 <strtok>
 8000d74:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if (atoi(token)==0){
 8000d78:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000d7c:	f009 ffda 	bl	800ad34 <atoi>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d034      	beq.n	8000df0 <update_data_from_flash+0x9c>
    	return;
    }
	speed_div_x[0] = atoi(token);
 8000d86:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000d8a:	f009 ffd3 	bl	800ad34 <atoi>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000d96:	4918      	ldr	r1, [pc, #96]	; (8000df8 <update_data_from_flash+0xa4>)
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f00a f829 	bl	800adf0 <strtok>
 8000d9e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_x[1] = atoi(token);
 8000da2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000da6:	f009 ffc5 	bl	800ad34 <atoi>
 8000daa:	4602      	mov	r2, r0
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3302      	adds	r3, #2
 8000db0:	b292      	uxth	r2, r2
 8000db2:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000db4:	4910      	ldr	r1, [pc, #64]	; (8000df8 <update_data_from_flash+0xa4>)
 8000db6:	2000      	movs	r0, #0
 8000db8:	f00a f81a 	bl	800adf0 <strtok>
 8000dbc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_y[0] = atoi(token);
 8000dc0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000dc4:	f009 ffb6 	bl	800ad34 <atoi>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000dd0:	4909      	ldr	r1, [pc, #36]	; (8000df8 <update_data_from_flash+0xa4>)
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f00a f80c 	bl	800adf0 <strtok>
 8000dd8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_y[1] = atoi(token);
 8000ddc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000de0:	f009 ffa8 	bl	800ad34 <atoi>
 8000de4:	4602      	mov	r2, r0
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	3302      	adds	r3, #2
 8000dea:	b292      	uxth	r2, r2
 8000dec:	801a      	strh	r2, [r3, #0]
 8000dee:	e000      	b.n	8000df2 <update_data_from_flash+0x9e>
    	return;
 8000df0:	bf00      	nop

}
 8000df2:	37d0      	adds	r7, #208	; 0xd0
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	0800c37c 	.word	0x0800c37c

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e02:	f000 fef1 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e06:	f000 fa6f 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0a:	f000 fbdb 	bl	80015c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0e:	f000 fbbb 	bl	8001588 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000e12:	f009 fbab 	bl	800a56c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000e16:	f000 fac5 	bl	80013a4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000e1a:	f000 fb1f 	bl	800145c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e1e:	f000 fb53 	bl	80014c8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000e22:	f000 fb87 	bl	8001534 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 8000e26:	2203      	movs	r2, #3
 8000e28:	4994      	ldr	r1, [pc, #592]	; (800107c <main+0x280>)
 8000e2a:	4895      	ldr	r0, [pc, #596]	; (8001080 <main+0x284>)
 8000e2c:	f001 f83a 	bl	8001ea4 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); 		//liga led
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e36:	4893      	ldr	r0, [pc, #588]	; (8001084 <main+0x288>)
 8000e38:	f002 fa61 	bl	80032fe <HAL_GPIO_WritePin>
  update_data_from_flash(speed_div_x, speed_div_y);				//atualiza valores com os dados da memoria flash
 8000e3c:	4992      	ldr	r1, [pc, #584]	; (8001088 <main+0x28c>)
 8000e3e:	4893      	ldr	r0, [pc, #588]	; (800108c <main+0x290>)
 8000e40:	f7ff ff88 	bl	8000d54 <update_data_from_flash>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Calibrar();
 8000e44:	f7ff fe64 	bl	8000b10 <Calibrar>
	  LerADCS();
 8000e48:	f7ff fd8a 	bl	8000960 <LerADCS>
	  LerSPI();
 8000e4c:	f7ff fdcc 	bl	80009e8 <LerSPI>
	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_x[0]), 100);
 8000e50:	4b8e      	ldr	r3, [pc, #568]	; (800108c <main+0x290>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	498e      	ldr	r1, [pc, #568]	; (8001090 <main+0x294>)
 8000e58:	488e      	ldr	r0, [pc, #568]	; (8001094 <main+0x298>)
 8000e5a:	f009 ffa1 	bl	800ada0 <siprintf>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	2364      	movs	r3, #100	; 0x64
 8000e64:	498b      	ldr	r1, [pc, #556]	; (8001094 <main+0x298>)
 8000e66:	488c      	ldr	r0, [pc, #560]	; (8001098 <main+0x29c>)
 8000e68:	f005 f977 	bl	800615a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_x[1]), 100);
 8000e6c:	4b87      	ldr	r3, [pc, #540]	; (800108c <main+0x290>)
 8000e6e:	885b      	ldrh	r3, [r3, #2]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4987      	ldr	r1, [pc, #540]	; (8001090 <main+0x294>)
 8000e74:	4887      	ldr	r0, [pc, #540]	; (8001094 <main+0x298>)
 8000e76:	f009 ff93 	bl	800ada0 <siprintf>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	2364      	movs	r3, #100	; 0x64
 8000e80:	4984      	ldr	r1, [pc, #528]	; (8001094 <main+0x298>)
 8000e82:	4885      	ldr	r0, [pc, #532]	; (8001098 <main+0x29c>)
 8000e84:	f005 f969 	bl	800615a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_y[0]), 100);
 8000e88:	4b7f      	ldr	r3, [pc, #508]	; (8001088 <main+0x28c>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4980      	ldr	r1, [pc, #512]	; (8001090 <main+0x294>)
 8000e90:	4880      	ldr	r0, [pc, #512]	; (8001094 <main+0x298>)
 8000e92:	f009 ff85 	bl	800ada0 <siprintf>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	2364      	movs	r3, #100	; 0x64
 8000e9c:	497d      	ldr	r1, [pc, #500]	; (8001094 <main+0x298>)
 8000e9e:	487e      	ldr	r0, [pc, #504]	; (8001098 <main+0x29c>)
 8000ea0:	f005 f95b 	bl	800615a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_y[1]), 100);
 8000ea4:	4b78      	ldr	r3, [pc, #480]	; (8001088 <main+0x28c>)
 8000ea6:	885b      	ldrh	r3, [r3, #2]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4979      	ldr	r1, [pc, #484]	; (8001090 <main+0x294>)
 8000eac:	4879      	ldr	r0, [pc, #484]	; (8001094 <main+0x298>)
 8000eae:	f009 ff77 	bl	800ada0 <siprintf>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	4976      	ldr	r1, [pc, #472]	; (8001094 <main+0x298>)
 8000eba:	4877      	ldr	r0, [pc, #476]	; (8001098 <main+0x29c>)
 8000ebc:	f005 f94d 	bl	800615a <HAL_UART_Transmit>

	  uint16_t cambio_x_axis = (uint16_t) ADCValue[0];  //manopla x
 8000ec0:	4b6e      	ldr	r3, [pc, #440]	; (800107c <main+0x280>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	80fb      	strh	r3, [r7, #6]
	  uint16_t cambio_y_axis = (uint16_t) ADCValue[1];  //manopla y
 8000ec6:	4b6d      	ldr	r3, [pc, #436]	; (800107c <main+0x280>)
 8000ec8:	885b      	ldrh	r3, [r3, #2]
 8000eca:	80bb      	strh	r3, [r7, #4]

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis > speed_div_y[1]){  //speed 1
 8000ecc:	4b6f      	ldr	r3, [pc, #444]	; (800108c <main+0x290>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	88fa      	ldrh	r2, [r7, #6]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d20c      	bcs.n	8000ef0 <main+0xf4>
 8000ed6:	4b6c      	ldr	r3, [pc, #432]	; (8001088 <main+0x28c>)
 8000ed8:	885b      	ldrh	r3, [r3, #2]
 8000eda:	88ba      	ldrh	r2, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d907      	bls.n	8000ef0 <main+0xf4>
		  joystickhid.botoes0 |= (uint8_t)(1<<0);	// SETA BOTAO 1
 8000ee0:	4b6e      	ldr	r3, [pc, #440]	; (800109c <main+0x2a0>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b6c      	ldr	r3, [pc, #432]	; (800109c <main+0x2a0>)
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e006      	b.n	8000efe <main+0x102>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<0);	// RESETA BOTAO 1
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <main+0x2a0>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b68      	ldr	r3, [pc, #416]	; (800109c <main+0x2a0>)
 8000efc:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis < speed_div_y[0]){  //speed2
 8000efe:	4b63      	ldr	r3, [pc, #396]	; (800108c <main+0x290>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d20c      	bcs.n	8000f22 <main+0x126>
 8000f08:	4b5f      	ldr	r3, [pc, #380]	; (8001088 <main+0x28c>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	88ba      	ldrh	r2, [r7, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d207      	bcs.n	8000f22 <main+0x126>
		  joystickhid.botoes0 |= (uint8_t)(1<<1);	// SETA BOTAO 2
 8000f12:	4b62      	ldr	r3, [pc, #392]	; (800109c <main+0x2a0>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b5f      	ldr	r3, [pc, #380]	; (800109c <main+0x2a0>)
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e006      	b.n	8000f30 <main+0x134>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<1);	// RESETA BOTAO 2
 8000f22:	4b5e      	ldr	r3, [pc, #376]	; (800109c <main+0x2a0>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f023 0302 	bic.w	r3, r3, #2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b5b      	ldr	r3, [pc, #364]	; (800109c <main+0x2a0>)
 8000f2e:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis > speed_div_y[1]){  //speed 3
 8000f30:	4b56      	ldr	r3, [pc, #344]	; (800108c <main+0x290>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	88fa      	ldrh	r2, [r7, #6]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d911      	bls.n	8000f5e <main+0x162>
 8000f3a:	4b54      	ldr	r3, [pc, #336]	; (800108c <main+0x290>)
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d20c      	bcs.n	8000f5e <main+0x162>
 8000f44:	4b50      	ldr	r3, [pc, #320]	; (8001088 <main+0x28c>)
 8000f46:	885b      	ldrh	r3, [r3, #2]
 8000f48:	88ba      	ldrh	r2, [r7, #4]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d907      	bls.n	8000f5e <main+0x162>
		  joystickhid.botoes0 |= (uint8_t)(1<<2);	// SETA BOTAO 3
 8000f4e:	4b53      	ldr	r3, [pc, #332]	; (800109c <main+0x2a0>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b50      	ldr	r3, [pc, #320]	; (800109c <main+0x2a0>)
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e006      	b.n	8000f6c <main+0x170>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<2);	// RESETA BOTAO 3
 8000f5e:	4b4f      	ldr	r3, [pc, #316]	; (800109c <main+0x2a0>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	f023 0304 	bic.w	r3, r3, #4
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b4c      	ldr	r3, [pc, #304]	; (800109c <main+0x2a0>)
 8000f6a:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis < speed_div_y[0]){  //speed 4
 8000f6c:	4b47      	ldr	r3, [pc, #284]	; (800108c <main+0x290>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	88fa      	ldrh	r2, [r7, #6]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d911      	bls.n	8000f9a <main+0x19e>
 8000f76:	4b45      	ldr	r3, [pc, #276]	; (800108c <main+0x290>)
 8000f78:	885b      	ldrh	r3, [r3, #2]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d20c      	bcs.n	8000f9a <main+0x19e>
 8000f80:	4b41      	ldr	r3, [pc, #260]	; (8001088 <main+0x28c>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	88ba      	ldrh	r2, [r7, #4]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d207      	bcs.n	8000f9a <main+0x19e>
		  joystickhid.botoes0 |= (uint8_t)(1<<3);	// SETA BOTAO 4
 8000f8a:	4b44      	ldr	r3, [pc, #272]	; (800109c <main+0x2a0>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b41      	ldr	r3, [pc, #260]	; (800109c <main+0x2a0>)
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e006      	b.n	8000fa8 <main+0x1ac>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<3);	// RESETA BOTAO 4
 8000f9a:	4b40      	ldr	r3, [pc, #256]	; (800109c <main+0x2a0>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f023 0308 	bic.w	r3, r3, #8
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b3d      	ldr	r3, [pc, #244]	; (800109c <main+0x2a0>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis > speed_div_y[1]){    //speed5
 8000fa8:	4b38      	ldr	r3, [pc, #224]	; (800108c <main+0x290>)
 8000faa:	885b      	ldrh	r3, [r3, #2]
 8000fac:	88fa      	ldrh	r2, [r7, #6]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d90c      	bls.n	8000fcc <main+0x1d0>
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <main+0x28c>)
 8000fb4:	885b      	ldrh	r3, [r3, #2]
 8000fb6:	88ba      	ldrh	r2, [r7, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d907      	bls.n	8000fcc <main+0x1d0>
		  joystickhid.botoes0 |= (uint8_t)(1<<4);	// SETA BOTAO 5
 8000fbc:	4b37      	ldr	r3, [pc, #220]	; (800109c <main+0x2a0>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b35      	ldr	r3, [pc, #212]	; (800109c <main+0x2a0>)
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e006      	b.n	8000fda <main+0x1de>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<4);	// RESETA BOTAO 5
 8000fcc:	4b33      	ldr	r3, [pc, #204]	; (800109c <main+0x2a0>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f023 0310 	bic.w	r3, r3, #16
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <main+0x2a0>)
 8000fd8:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0]){    // speed 6
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <main+0x290>)
 8000fdc:	885b      	ldrh	r3, [r3, #2]
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d90c      	bls.n	8000ffe <main+0x202>
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <main+0x28c>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	88ba      	ldrh	r2, [r7, #4]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d207      	bcs.n	8000ffe <main+0x202>
		  joystickhid.botoes0 |= (uint8_t)(1<<5);	// SETA BOTAO 6
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <main+0x2a0>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	f043 0320 	orr.w	r3, r3, #32
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <main+0x2a0>)
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	e006      	b.n	800100c <main+0x210>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5);	// RESETA BOTAO 6
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <main+0x2a0>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f023 0320 	bic.w	r3, r3, #32
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <main+0x2a0>)
 800100a:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<0))  {
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <main+0x2a4>)
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d007      	beq.n	8001028 <main+0x22c>
		  joystickhid.botoes0 |= (uint16_t) (1<<6);  // SETA BOTAO 7
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <main+0x2a0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <main+0x2a0>)
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e006      	b.n	8001036 <main+0x23a>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 7
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <main+0x2a0>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <main+0x2a0>)
 8001034:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<1))  {
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <main+0x2a4>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <main+0x256>
		  joystickhid.botoes0 |= (uint16_t)(1<<7);	// SETA BOTAO 8
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <main+0x2a0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <main+0x2a0>)
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e006      	b.n	8001060 <main+0x264>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 8
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <main+0x2a0>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <main+0x2a0>)
 800105e:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<2))  {
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <main+0x2a4>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d01b      	beq.n	80010a4 <main+0x2a8>
		  joystickhid.botoes1 |= (uint16_t)(1<<0);	// SETA BOTAO 9
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <main+0x2a0>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <main+0x2a0>)
 8001078:	705a      	strb	r2, [r3, #1]
 800107a:	e01a      	b.n	80010b2 <main+0x2b6>
 800107c:	20000360 	.word	0x20000360
 8001080:	200001ec 	.word	0x200001ec
 8001084:	40010c00 	.word	0x40010c00
 8001088:	20000008 	.word	0x20000008
 800108c:	20000004 	.word	0x20000004
 8001090:	0800c344 	.word	0x0800c344
 8001094:	20000368 	.word	0x20000368
 8001098:	20000310 	.word	0x20000310
 800109c:	20000354 	.word	0x20000354
 80010a0:	20000370 	.word	0x20000370
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 9
 80010a4:	4b8a      	ldr	r3, [pc, #552]	; (80012d0 <main+0x4d4>)
 80010a6:	785b      	ldrb	r3, [r3, #1]
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b88      	ldr	r3, [pc, #544]	; (80012d0 <main+0x4d4>)
 80010b0:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<3))  {
 80010b2:	4b88      	ldr	r3, [pc, #544]	; (80012d4 <main+0x4d8>)
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <main+0x2d2>
		  joystickhid.botoes1 |= (uint16_t)(1<<1);	// SETA BOTAO 10
 80010be:	4b84      	ldr	r3, [pc, #528]	; (80012d0 <main+0x4d4>)
 80010c0:	785b      	ldrb	r3, [r3, #1]
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b81      	ldr	r3, [pc, #516]	; (80012d0 <main+0x4d4>)
 80010ca:	705a      	strb	r2, [r3, #1]
 80010cc:	e006      	b.n	80010dc <main+0x2e0>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 10
 80010ce:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <main+0x4d4>)
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	f023 0302 	bic.w	r3, r3, #2
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <main+0x4d4>)
 80010da:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<4))  {
 80010dc:	4b7d      	ldr	r3, [pc, #500]	; (80012d4 <main+0x4d8>)
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d007      	beq.n	80010f8 <main+0x2fc>
		  joystickhid.botoes1 |= (uint16_t)(1<<2);	// SETA BOTAO 11
 80010e8:	4b79      	ldr	r3, [pc, #484]	; (80012d0 <main+0x4d4>)
 80010ea:	785b      	ldrb	r3, [r3, #1]
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b77      	ldr	r3, [pc, #476]	; (80012d0 <main+0x4d4>)
 80010f4:	705a      	strb	r2, [r3, #1]
 80010f6:	e006      	b.n	8001106 <main+0x30a>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<2);	// RESETA BOTAO 11
 80010f8:	4b75      	ldr	r3, [pc, #468]	; (80012d0 <main+0x4d4>)
 80010fa:	785b      	ldrb	r3, [r3, #1]
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b73      	ldr	r3, [pc, #460]	; (80012d0 <main+0x4d4>)
 8001104:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<5))  {
 8001106:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <main+0x4d8>)
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <main+0x326>
		  joystickhid.botoes1 |= (uint16_t)(1<<3);	// SETA BOTAO 12
 8001112:	4b6f      	ldr	r3, [pc, #444]	; (80012d0 <main+0x4d4>)
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b6c      	ldr	r3, [pc, #432]	; (80012d0 <main+0x4d4>)
 800111e:	705a      	strb	r2, [r3, #1]
 8001120:	e006      	b.n	8001130 <main+0x334>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<3);	// RESETA BOTAO 12
 8001122:	4b6b      	ldr	r3, [pc, #428]	; (80012d0 <main+0x4d4>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	f023 0308 	bic.w	r3, r3, #8
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <main+0x4d4>)
 800112e:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<6))  {
 8001130:	4b68      	ldr	r3, [pc, #416]	; (80012d4 <main+0x4d8>)
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001138:	2b00      	cmp	r3, #0
 800113a:	d007      	beq.n	800114c <main+0x350>
		  joystickhid.botoes1 |= (uint16_t)(1<<4);	// SETA BOTAO 13
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <main+0x4d4>)
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b62      	ldr	r3, [pc, #392]	; (80012d0 <main+0x4d4>)
 8001148:	705a      	strb	r2, [r3, #1]
 800114a:	e006      	b.n	800115a <main+0x35e>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<4);	// RESETA BOTAO 13
 800114c:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <main+0x4d4>)
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	f023 0310 	bic.w	r3, r3, #16
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <main+0x4d4>)
 8001158:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<7))  {
 800115a:	4b5e      	ldr	r3, [pc, #376]	; (80012d4 <main+0x4d8>)
 800115c:	785b      	ldrb	r3, [r3, #1]
 800115e:	b25b      	sxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	da07      	bge.n	8001174 <main+0x378>
		  joystickhid.botoes1 |= (uint16_t)(1<<5);	// SETA BOTAO 14
 8001164:	4b5a      	ldr	r3, [pc, #360]	; (80012d0 <main+0x4d4>)
 8001166:	785b      	ldrb	r3, [r3, #1]
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b58      	ldr	r3, [pc, #352]	; (80012d0 <main+0x4d4>)
 8001170:	705a      	strb	r2, [r3, #1]
 8001172:	e006      	b.n	8001182 <main+0x386>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<5);	// RESETA BOTAO 14
 8001174:	4b56      	ldr	r3, [pc, #344]	; (80012d0 <main+0x4d4>)
 8001176:	785b      	ldrb	r3, [r3, #1]
 8001178:	f023 0320 	bic.w	r3, r3, #32
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b54      	ldr	r3, [pc, #336]	; (80012d0 <main+0x4d4>)
 8001180:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<0))  {
 8001182:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <main+0x4d8>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <main+0x3a2>
		  joystickhid.botoes1 |= (uint16_t)(1<<6);	// SETA BOTAO 15
 800118e:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <main+0x4d4>)
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <main+0x4d4>)
 800119a:	705a      	strb	r2, [r3, #1]
 800119c:	e006      	b.n	80011ac <main+0x3b0>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 15
 800119e:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <main+0x4d4>)
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <main+0x4d4>)
 80011aa:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<1))  {
 80011ac:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <main+0x4d8>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d007      	beq.n	80011c8 <main+0x3cc>
		  joystickhid.botoes1 |= (uint32_t)(1<<7);	// SETA BOTAO 16
 80011b8:	4b45      	ldr	r3, [pc, #276]	; (80012d0 <main+0x4d4>)
 80011ba:	785b      	ldrb	r3, [r3, #1]
 80011bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <main+0x4d4>)
 80011c4:	705a      	strb	r2, [r3, #1]
 80011c6:	e006      	b.n	80011d6 <main+0x3da>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 16
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <main+0x4d4>)
 80011ca:	785b      	ldrb	r3, [r3, #1]
 80011cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <main+0x4d4>)
 80011d4:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<2))  {
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <main+0x4d8>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <main+0x3f6>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<0);	// SETA BOTAO 17
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <main+0x4d4>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <main+0x4d4>)
 80011ee:	709a      	strb	r2, [r3, #2]
 80011f0:	e006      	b.n	8001200 <main+0x404>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 17
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <main+0x4d4>)
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <main+0x4d4>)
 80011fe:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<3))  {
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <main+0x4d8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <main+0x420>
		  joystickhid.botoes_freio0 |= (uint32_t)(1<<1);	// SETA BOTAO 18
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <main+0x4d4>)
 800120e:	789b      	ldrb	r3, [r3, #2]
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <main+0x4d4>)
 8001218:	709a      	strb	r2, [r3, #2]
 800121a:	e006      	b.n	800122a <main+0x42e>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 18
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <main+0x4d4>)
 800121e:	789b      	ldrb	r3, [r3, #2]
 8001220:	f023 0302 	bic.w	r3, r3, #2
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <main+0x4d4>)
 8001228:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[1] & (uint16_t)(11111111)){ //desativa botoes ao engatar reversa no g29
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <main+0x4d8>)
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	461a      	mov	r2, r3
 8001230:	f648 23c7 	movw	r3, #35527	; 0x8ac7
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d008      	beq.n	800124c <main+0x450>
		  joystickhid.botoes0 = 0;
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <main+0x4d4>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		  joystickhid.botoes1 = 0;
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <main+0x4d4>)
 8001242:	2200      	movs	r2, #0
 8001244:	705a      	strb	r2, [r3, #1]
		  joystickhid.botoes_freio0 = 0;
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <main+0x4d4>)
 8001248:	2200      	movs	r2, #0
 800124a:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<6) && cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0])  {
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <main+0x4d8>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d018      	beq.n	800128a <main+0x48e>
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <main+0x4dc>)
 800125a:	885b      	ldrh	r3, [r3, #2]
 800125c:	88fa      	ldrh	r2, [r7, #6]
 800125e:	429a      	cmp	r2, r3
 8001260:	d913      	bls.n	800128a <main+0x48e>
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <main+0x4e0>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	88ba      	ldrh	r2, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d20e      	bcs.n	800128a <main+0x48e>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<2);	// SETA BOTAO 19 SPEED REVERSA
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <main+0x4d4>)
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <main+0x4d4>)
 8001278:	709a      	strb	r2, [r3, #2]
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5); 			// RESETA BOTAO SPEED 6 QUANDO ATIVA A REVERSA
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <main+0x4d4>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	f023 0320 	bic.w	r3, r3, #32
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <main+0x4d4>)
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e006      	b.n	8001298 <main+0x49c>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint32_t)(1<<2);	// RESETA BOTAO 19 SPEED REVERSA
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <main+0x4d4>)
 800128c:	789b      	ldrb	r3, [r3, #2]
 800128e:	f023 0304 	bic.w	r3, r3, #4
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <main+0x4d4>)
 8001296:	709a      	strb	r2, [r3, #2]
	  }


	  if (spi_values[0] > 4000 && spi_values[1] > 4000){  //se volante desconectado
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <main+0x4e4>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80012a0:	d90d      	bls.n	80012be <main+0x4c2>
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <main+0x4e4>)
 80012a4:	885b      	ldrh	r3, [r3, #2]
 80012a6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80012aa:	d908      	bls.n	80012be <main+0x4c2>
		  joystickhid.botoes0 = 0;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <main+0x4d4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	  	  joystickhid.botoes1 = 0;
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <main+0x4d4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	705a      	strb	r2, [r3, #1]
	  	  joystickhid.botoes_freio0 = 0;
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <main+0x4d4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	709a      	strb	r2, [r3, #2]
	  }

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80012be:	2208      	movs	r2, #8
 80012c0:	4903      	ldr	r1, [pc, #12]	; (80012d0 <main+0x4d4>)
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <main+0x4e8>)
 80012c4:	f007 fff0 	bl	80092a8 <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f000 fcef 	bl	8001cac <HAL_Delay>
  {
 80012ce:	e5b9      	b.n	8000e44 <main+0x48>
 80012d0:	20000354 	.word	0x20000354
 80012d4:	20000370 	.word	0x20000370
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000008 	.word	0x20000008
 80012e0:	2000035c 	.word	0x2000035c
 80012e4:	200003a4 	.word	0x200003a4

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f2:	2228      	movs	r2, #40	; 0x28
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f009 fd4a 	bl	800ad90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001318:	2301      	movs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800131c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001326:	2301      	movs	r3, #1
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2302      	movs	r3, #2
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001334:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fcba 	bl	8004cb8 <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800134a:	f000 f9b1 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134e:	230f      	movs	r3, #15
 8001350:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2101      	movs	r1, #1
 800136a:	4618      	mov	r0, r3
 800136c:	f003 ff26 	bl	80051bc <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001376:	f000 f99b 	bl	80016b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800137a:	2312      	movs	r3, #18
 800137c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800137e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001384:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4618      	mov	r0, r3
 800138e:	f004 f8ad 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001398:	f000 f98a 	bl	80016b0 <Error_Handler>
  }
}
 800139c:	bf00      	nop
 800139e:	3750      	adds	r7, #80	; 0x50
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <MX_ADC1_Init+0xb0>)
 80013b6:	4a28      	ldr	r2, [pc, #160]	; (8001458 <MX_ADC1_Init+0xb4>)
 80013b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_ADC1_Init+0xb0>)
 80013bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <MX_ADC1_Init+0xb0>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_ADC1_Init+0xb0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_ADC1_Init+0xb0>)
 80013d0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_ADC1_Init+0xb0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_ADC1_Init+0xb0>)
 80013de:	2203      	movs	r2, #3
 80013e0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e2:	481c      	ldr	r0, [pc, #112]	; (8001454 <MX_ADC1_Init+0xb0>)
 80013e4:	f000 fc86 	bl	8001cf4 <HAL_ADC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80013ee:	f000 f95f 	bl	80016b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013fa:	2307      	movs	r3, #7
 80013fc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_ADC1_Init+0xb0>)
 8001404:	f000 fe48 	bl	8002098 <HAL_ADC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800140e:	f000 f94f 	bl	80016b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001412:	2301      	movs	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001416:	2302      	movs	r3, #2
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_ADC1_Init+0xb0>)
 8001420:	f000 fe3a 	bl	8002098 <HAL_ADC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800142a:	f000 f941 	bl	80016b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800142e:	2302      	movs	r3, #2
 8001430:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001432:	2303      	movs	r3, #3
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_ADC1_Init+0xb0>)
 800143c:	f000 fe2c 	bl	8002098 <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001446:	f000 f933 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200001ec 	.word	0x200001ec
 8001458:	40012400 	.word	0x40012400

0800145c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001462:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <MX_SPI1_Init+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800146c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_SPI1_Init+0x64>)
 800147c:	2202      	movs	r2, #2
 800147e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001490:	2228      	movs	r2, #40	; 0x28
 8001492:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_SPI1_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MX_SPI1_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_SPI1_Init+0x64>)
 80014a8:	220a      	movs	r2, #10
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <MX_SPI1_Init+0x64>)
 80014ae:	f004 f8d3 	bl	8005658 <HAL_SPI_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014b8:	f000 f8fa 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000260 	.word	0x20000260
 80014c4:	40013000 	.word	0x40013000

080014c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <MX_SPI2_Init+0x64>)
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <MX_SPI2_Init+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_SPI2_Init+0x64>)
 80014d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_SPI2_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_SPI2_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_SPI2_Init+0x64>)
 80014e8:	2202      	movs	r2, #2
 80014ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_SPI2_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_SPI2_Init+0x64>)
 80014f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_SPI2_Init+0x64>)
 80014fc:	2220      	movs	r2, #32
 80014fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_SPI2_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_SPI2_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <MX_SPI2_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_SPI2_Init+0x64>)
 8001514:	220a      	movs	r2, #10
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_SPI2_Init+0x64>)
 800151a:	f004 f89d 	bl	8005658 <HAL_SPI_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001524:	f000 f8c4 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200002b8 	.word	0x200002b8
 8001530:	40003800 	.word	0x40003800

08001534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <MX_USART1_UART_Init+0x50>)
 800153c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 800156c:	f004 fda8 	bl	80060c0 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001576:	f000 f89b 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000310 	.word	0x20000310
 8001584:	40013800 	.word	0x40013800

08001588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_DMA_Init+0x38>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <MX_DMA_Init+0x38>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6153      	str	r3, [r2, #20]
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_DMA_Init+0x38>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	200b      	movs	r0, #11
 80015ac:	f001 f845 	bl	800263a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015b0:	200b      	movs	r0, #11
 80015b2:	f001 f85e 	bl	8002672 <HAL_NVIC_EnableIRQ>

}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <MX_GPIO_Init+0xe0>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a31      	ldr	r2, [pc, #196]	; (80016a4 <MX_GPIO_Init+0xe0>)
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <MX_GPIO_Init+0xe0>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f0:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <MX_GPIO_Init+0xe0>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a2b      	ldr	r2, [pc, #172]	; (80016a4 <MX_GPIO_Init+0xe0>)
 80015f6:	f043 0320 	orr.w	r3, r3, #32
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <MX_GPIO_Init+0xe0>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <MX_GPIO_Init+0xe0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a25      	ldr	r2, [pc, #148]	; (80016a4 <MX_GPIO_Init+0xe0>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <MX_GPIO_Init+0xe0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <MX_GPIO_Init+0xe0>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a1f      	ldr	r2, [pc, #124]	; (80016a4 <MX_GPIO_Init+0xe0>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_GPIO_Init+0xe0>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFTER_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800163e:	481a      	ldr	r0, [pc, #104]	; (80016a8 <MX_GPIO_Init+0xe4>)
 8001640:	f001 fe5d 	bl	80032fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CALIB_BUTTON_Pin */
  GPIO_InitStruct.Pin = CALIB_BUTTON_Pin;
 8001644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CALIB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	4619      	mov	r1, r3
 8001658:	4814      	ldr	r0, [pc, #80]	; (80016ac <MX_GPIO_Init+0xe8>)
 800165a:	f001 fcb5 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFTER_CS_Pin */
  GPIO_InitStruct.Pin = SHIFTER_CS_Pin;
 800165e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001668:	2301      	movs	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHIFTER_CS_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <MX_GPIO_Init+0xe4>)
 8001678:	f001 fca6 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800167c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001682:	2311      	movs	r3, #17
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001686:	2301      	movs	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2302      	movs	r3, #2
 800168c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4619      	mov	r1, r3
 8001694:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_GPIO_Init+0xe4>)
 8001696:	f001 fc97 	bl	8002fc8 <HAL_GPIO_Init>

}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40011000 	.word	0x40011000

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <Error_Handler+0x8>
	...

080016bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_MspInit+0x40>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <HAL_MspInit+0x40>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6193      	str	r3, [r2, #24]
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_MspInit+0x40>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_MspInit+0x40>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_MspInit+0x40>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_MspInit+0x40>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a28      	ldr	r2, [pc, #160]	; (80017bc <HAL_ADC_MspInit+0xbc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d149      	bne.n	80017b4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <HAL_ADC_MspInit+0xc0>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <HAL_ADC_MspInit+0xc0>)
 8001726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_ADC_MspInit+0xc0>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_ADC_MspInit+0xc0>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a20      	ldr	r2, [pc, #128]	; (80017c0 <HAL_ADC_MspInit+0xc0>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_ADC_MspInit+0xc0>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001750:	2307      	movs	r3, #7
 8001752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001754:	2303      	movs	r3, #3
 8001756:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	4819      	ldr	r0, [pc, #100]	; (80017c4 <HAL_ADC_MspInit+0xc4>)
 8001760:	f001 fc32 	bl	8002fc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 8001766:	4a19      	ldr	r2, [pc, #100]	; (80017cc <HAL_ADC_MspInit+0xcc>)
 8001768:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 800177e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001782:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 8001786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 800178e:	2220      	movs	r2, #32
 8001790:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 800179a:	f000 ff85 	bl	80026a8 <HAL_DMA_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80017a4:	f7ff ff84 	bl	80016b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 80017ac:	621a      	str	r2, [r3, #32]
 80017ae:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_ADC_MspInit+0xc8>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40012400 	.word	0x40012400
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010800 	.word	0x40010800
 80017c8:	2000021c 	.word	0x2000021c
 80017cc:	40020008 	.word	0x40020008

080017d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0318 	add.w	r3, r7, #24
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a3b      	ldr	r2, [pc, #236]	; (80018d8 <HAL_SPI_MspInit+0x108>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d138      	bne.n	8001862 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f0:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a39      	ldr	r2, [pc, #228]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 80017f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a33      	ldr	r2, [pc, #204]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001820:	23a0      	movs	r3, #160	; 0xa0
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0318 	add.w	r3, r7, #24
 8001830:	4619      	mov	r1, r3
 8001832:	482b      	ldr	r0, [pc, #172]	; (80018e0 <HAL_SPI_MspInit+0x110>)
 8001834:	f001 fbc8 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001838:	2340      	movs	r3, #64	; 0x40
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	4619      	mov	r1, r3
 800184a:	4825      	ldr	r0, [pc, #148]	; (80018e0 <HAL_SPI_MspInit+0x110>)
 800184c:	f001 fbbc 	bl	8002fc8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2023      	movs	r0, #35	; 0x23
 8001856:	f000 fef0 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800185a:	2023      	movs	r0, #35	; 0x23
 800185c:	f000 ff09 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001860:	e036      	b.n	80018d0 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI2)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <HAL_SPI_MspInit+0x114>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d131      	bne.n	80018d0 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 8001872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001876:	61d3      	str	r3, [r2, #28]
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800189c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 0318 	add.w	r3, r7, #24
 80018ae:	4619      	mov	r1, r3
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <HAL_SPI_MspInit+0x118>)
 80018b2:	f001 fb89 	bl	8002fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	4619      	mov	r1, r3
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <HAL_SPI_MspInit+0x118>)
 80018cc:	f001 fb7c 	bl	8002fc8 <HAL_GPIO_Init>
}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40013000 	.word	0x40013000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010800 	.word	0x40010800
 80018e4:	40003800 	.word	0x40003800
 80018e8:	40010c00 	.word	0x40010c00

080018ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_UART_MspInit+0x8c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d131      	bne.n	8001970 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_UART_MspInit+0x90>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a1a      	ldr	r2, [pc, #104]	; (800197c <HAL_UART_MspInit+0x90>)
 8001912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_UART_MspInit+0x90>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_UART_MspInit+0x90>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_UART_MspInit+0x90>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_UART_MspInit+0x90>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800193c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001940:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4619      	mov	r1, r3
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <HAL_UART_MspInit+0x94>)
 8001952:	f001 fb39 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4619      	mov	r1, r3
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <HAL_UART_MspInit+0x94>)
 800196c:	f001 fb2c 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001970:	bf00      	nop
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40013800 	.word	0x40013800
 800197c:	40021000 	.word	0x40021000
 8001980:	40010800 	.word	0x40010800

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler+0x4>

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ca:	f000 f953 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <DMA1_Channel1_IRQHandler+0x10>)
 80019da:	f000 ff95 	bl	8002908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000021c 	.word	0x2000021c

080019e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019ee:	f001 fde8 	bl	80035c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000868 	.word	0x20000868

080019fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <SPI1_IRQHandler+0x10>)
 8001a02:	f004 f961 	bl	8005cc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000260 	.word	0x20000260

08001a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return 1;
 8001a14:	2301      	movs	r3, #1
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <_kill>:

int _kill(int pid, int sig)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a28:	f009 f988 	bl	800ad3c <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2216      	movs	r2, #22
 8001a30:	601a      	str	r2, [r3, #0]
	return -1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_exit>:

void _exit (int status)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a46:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffe7 	bl	8001a1e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a50:	e7fe      	b.n	8001a50 <_exit+0x12>

08001a52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e00a      	b.n	8001a7a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a64:	f3af 8000 	nop.w
 8001a68:	4601      	mov	r1, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	60ba      	str	r2, [r7, #8]
 8001a70:	b2ca      	uxtb	r2, r1
 8001a72:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dbf0      	blt.n	8001a64 <_read+0x12>
	}

return len;
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e009      	b.n	8001ab2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	60ba      	str	r2, [r7, #8]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbf1      	blt.n	8001a9e <_write+0x12>
	}
	return len;
 8001aba:	687b      	ldr	r3, [r7, #4]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_close>:

int _close(int file)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	return -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aea:	605a      	str	r2, [r3, #4]
	return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <_isatty>:

int _isatty(int file)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	return 1;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d207      	bcs.n	8001b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b54:	f009 f8f2 	bl	800ad3c <__errno>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <_sbrk+0x64>)
 8001b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20005000 	.word	0x20005000
 8001b84:	00000400 	.word	0x00000400
 8001b88:	20000374 	.word	0x20000374
 8001b8c:	20000bc0 	.word	0x20000bc0

08001b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc2:	f7ff ffe5 	bl	8001b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f009 f8bf 	bl	800ad48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bca:	f7ff f917 	bl	8000dfc <main>
  bx lr
 8001bce:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001bd8:	0800c640 	.word	0x0800c640
  ldr r2, =_sbss
 8001bdc:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001be0:	20000bbc 	.word	0x20000bbc

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_Init+0x28>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_Init+0x28>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 fd13 	bl	8002624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff fd5a 	bl	80016bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fd2b 	bl	800268e <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 fcf3 	bl	800263a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	20000014 	.word	0x20000014
 8001c70:	20000010 	.word	0x20000010

08001c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x1c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_IncTick+0x20>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a03      	ldr	r2, [pc, #12]	; (8001c94 <HAL_IncTick+0x20>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000014 	.word	0x20000014
 8001c94:	20000378 	.word	0x20000378

08001c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_GetTick+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000378 	.word	0x20000378

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffe0 	bl	8001c98 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000014 	.word	0x20000014

08001cf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0be      	b.n	8001e94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fce4 	bl	8001700 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 faff 	bl	800233c <ADC_ConversionStop_Disable>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 8099 	bne.w	8001e82 <HAL_ADC_Init+0x18e>
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 8095 	bne.w	8001e82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d60:	f023 0302 	bic.w	r3, r3, #2
 8001d64:	f043 0202 	orr.w	r2, r3, #2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7b1b      	ldrb	r3, [r3, #12]
 8001d7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d8c:	d003      	beq.n	8001d96 <HAL_ADC_Init+0xa2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_ADC_Init+0xa8>
 8001d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9a:	e000      	b.n	8001d9e <HAL_ADC_Init+0xaa>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7d1b      	ldrb	r3, [r3, #20]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d119      	bne.n	8001de0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7b1b      	ldrb	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	035a      	lsls	r2, r3, #13
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	e00b      	b.n	8001de0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	f043 0220 	orr.w	r2, r3, #32
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_ADC_Init+0x1a8>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e10:	d003      	beq.n	8001e1a <HAL_ADC_Init+0x126>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d104      	bne.n	8001e24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	051b      	lsls	r3, r3, #20
 8001e22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_ADC_Init+0x1ac>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d10b      	bne.n	8001e60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	f023 0303 	bic.w	r3, r3, #3
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e5e:	e018      	b.n	8001e92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	f023 0312 	bic.w	r3, r3, #18
 8001e68:	f043 0210 	orr.w	r2, r3, #16
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	f043 0201 	orr.w	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e80:	e007      	b.n	8001e92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	f043 0210 	orr.w	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	ffe1f7fd 	.word	0xffe1f7fd
 8001ea0:	ff1f0efe 	.word	0xff1f0efe

08001ea4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a64      	ldr	r2, [pc, #400]	; (800204c <HAL_ADC_Start_DMA+0x1a8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_ADC_Start_DMA+0x24>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a63      	ldr	r2, [pc, #396]	; (8002050 <HAL_ADC_Start_DMA+0x1ac>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d106      	bne.n	8001ed6 <HAL_ADC_Start_DMA+0x32>
 8001ec8:	4b60      	ldr	r3, [pc, #384]	; (800204c <HAL_ADC_Start_DMA+0x1a8>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f040 80b3 	bne.w	800203c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_Start_DMA+0x40>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e0ae      	b.n	8002042 <HAL_ADC_Start_DMA+0x19e>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f9cb 	bl	8002288 <ADC_Enable>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f040 809a 	bne.w	8002032 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a4e      	ldr	r2, [pc, #312]	; (8002050 <HAL_ADC_Start_DMA+0x1ac>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d105      	bne.n	8001f28 <HAL_ADC_Start_DMA+0x84>
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	; (800204c <HAL_ADC_Start_DMA+0x1a8>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d115      	bne.n	8001f54 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d026      	beq.n	8001f90 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f52:	e01d      	b.n	8001f90 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a39      	ldr	r2, [pc, #228]	; (800204c <HAL_ADC_Start_DMA+0x1a8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d004      	beq.n	8001f74 <HAL_ADC_Start_DMA+0xd0>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a38      	ldr	r2, [pc, #224]	; (8002050 <HAL_ADC_Start_DMA+0x1ac>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10d      	bne.n	8001f90 <HAL_ADC_Start_DMA+0xec>
 8001f74:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_ADC_Start_DMA+0x1a8>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	f023 0206 	bic.w	r2, r3, #6
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fa8:	e002      	b.n	8001fb0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a25      	ldr	r2, [pc, #148]	; (8002054 <HAL_ADC_Start_DMA+0x1b0>)
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a24      	ldr	r2, [pc, #144]	; (8002058 <HAL_ADC_Start_DMA+0x1b4>)
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a23      	ldr	r2, [pc, #140]	; (800205c <HAL_ADC_Start_DMA+0x1b8>)
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0202 	mvn.w	r2, #2
 8001fd8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a18      	ldr	r0, [r3, #32]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	334c      	adds	r3, #76	; 0x4c
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f000 fbaf 	bl	800275c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002008:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800200c:	d108      	bne.n	8002020 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800201c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800201e:	e00f      	b.n	8002040 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800202e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002030:	e006      	b.n	8002040 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800203a:	e001      	b.n	8002040 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002040:	7dfb      	ldrb	r3, [r7, #23]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40012400 	.word	0x40012400
 8002050:	40012800 	.word	0x40012800
 8002054:	080023bf 	.word	0x080023bf
 8002058:	0800243b 	.word	0x0800243b
 800205c:	08002457 	.word	0x08002457

08002060 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
	...

08002098 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x20>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e0dc      	b.n	8002272 <HAL_ADC_ConfigChannel+0x1da>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d81c      	bhi.n	8002102 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	3b05      	subs	r3, #5
 80020da:	221f      	movs	r2, #31
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4019      	ands	r1, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	3b05      	subs	r3, #5
 80020f4:	fa00 f203 	lsl.w	r2, r0, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002100:	e03c      	b.n	800217c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d81c      	bhi.n	8002144 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	3b23      	subs	r3, #35	; 0x23
 800211c:	221f      	movs	r2, #31
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	4019      	ands	r1, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b23      	subs	r3, #35	; 0x23
 8002136:	fa00 f203 	lsl.w	r2, r0, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
 8002142:	e01b      	b.n	800217c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b41      	subs	r3, #65	; 0x41
 8002156:	221f      	movs	r2, #31
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	4019      	ands	r1, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b41      	subs	r3, #65	; 0x41
 8002170:	fa00 f203 	lsl.w	r2, r0, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b09      	cmp	r3, #9
 8002182:	d91c      	bls.n	80021be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68d9      	ldr	r1, [r3, #12]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	3b1e      	subs	r3, #30
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	4019      	ands	r1, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6898      	ldr	r0, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	3b1e      	subs	r3, #30
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	e019      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6919      	ldr	r1, [r3, #16]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	2207      	movs	r2, #7
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6898      	ldr	r0, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d003      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021fe:	2b11      	cmp	r3, #17
 8002200:	d132      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_ADC_ConfigChannel+0x1e4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d125      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d126      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002228:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b10      	cmp	r3, #16
 8002230:	d11a      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_ADC_ConfigChannel+0x1e8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <HAL_ADC_ConfigChannel+0x1ec>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	0c9a      	lsrs	r2, r3, #18
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002248:	e002      	b.n	8002250 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3b01      	subs	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f9      	bne.n	800224a <HAL_ADC_ConfigChannel+0x1b2>
 8002256:	e007      	b.n	8002268 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	40012400 	.word	0x40012400
 8002280:	2000000c 	.word	0x2000000c
 8002284:	431bde83 	.word	0x431bde83

08002288 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d040      	beq.n	8002328 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <ADC_Enable+0xac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <ADC_Enable+0xb0>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	0c9b      	lsrs	r3, r3, #18
 80022c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022c4:	e002      	b.n	80022cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f9      	bne.n	80022c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022d2:	f7ff fce1 	bl	8001c98 <HAL_GetTick>
 80022d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022d8:	e01f      	b.n	800231a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022da:	f7ff fcdd 	bl	8001c98 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d918      	bls.n	800231a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d011      	beq.n	800231a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	f043 0210 	orr.w	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e007      	b.n	800232a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d1d8      	bne.n	80022da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000000c 	.word	0x2000000c
 8002338:	431bde83 	.word	0x431bde83

0800233c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d12e      	bne.n	80023b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002366:	f7ff fc97 	bl	8001c98 <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800236c:	e01b      	b.n	80023a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800236e:	f7ff fc93 	bl	8001c98 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d914      	bls.n	80023a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10d      	bne.n	80023a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	f043 0210 	orr.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e007      	b.n	80023b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d0dc      	beq.n	800236e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d127      	bne.n	8002428 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023f2:	d115      	bne.n	8002420 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d111      	bne.n	8002420 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7ff fe1d 	bl	8002060 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002426:	e004      	b.n	8002432 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4798      	blx	r3
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff fe12 	bl	8002072 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f043 0204 	orr.w	r2, r3, #4
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7ff fe01 	bl	8002084 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4906      	ldr	r1, [pc, #24]	; (8002524 <__NVIC_EnableIRQ+0x34>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	; (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	; (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f0:	d301      	bcc.n	80025f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00f      	b.n	8002616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <SysTick_Config+0x40>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fe:	210f      	movs	r1, #15
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f7ff ff90 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <SysTick_Config+0x40>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <SysTick_Config+0x40>)
 8002610:	2207      	movs	r2, #7
 8002612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	e000e010 	.word	0xe000e010

08002624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff2d 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800264c:	f7ff ff42 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7ff ff90 	bl	800257c <NVIC_EncodePriority>
 800265c:	4602      	mov	r2, r0
 800265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff5f 	bl	8002528 <__NVIC_SetPriority>
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff35 	bl	80024f0 <__NVIC_EnableIRQ>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ffa2 	bl	80025e0 <SysTick_Config>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e043      	b.n	8002746 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_DMA_Init+0xa8>)
 80026c6:	4413      	add	r3, r2
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <HAL_DMA_Init+0xac>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	009a      	lsls	r2, r3, #2
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_DMA_Init+0xb0>)
 80026da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	bffdfff8 	.word	0xbffdfff8
 8002754:	cccccccd 	.word	0xcccccccd
 8002758:	40020000 	.word	0x40020000

0800275c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_DMA_Start_IT+0x20>
 8002778:	2302      	movs	r3, #2
 800277a:	e04a      	b.n	8002812 <HAL_DMA_Start_IT+0xb6>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800278a:	2b01      	cmp	r3, #1
 800278c:	d13a      	bne.n	8002804 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f9ae 	bl	8002b14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 020e 	orr.w	r2, r2, #14
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	e00f      	b.n	80027f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0204 	bic.w	r2, r2, #4
 80027e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 020a 	orr.w	r2, r2, #10
 80027f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e005      	b.n	8002810 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800280c:	2302      	movs	r3, #2
 800280e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002810:	7dfb      	ldrb	r3, [r7, #23]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800282e:	2b02      	cmp	r3, #2
 8002830:	d005      	beq.n	800283e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2204      	movs	r2, #4
 8002836:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e051      	b.n	80028e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 020e 	bic.w	r2, r2, #14
 800284c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a22      	ldr	r2, [pc, #136]	; (80028ec <HAL_DMA_Abort_IT+0xd0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d029      	beq.n	80028bc <HAL_DMA_Abort_IT+0xa0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a20      	ldr	r2, [pc, #128]	; (80028f0 <HAL_DMA_Abort_IT+0xd4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d022      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x9c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <HAL_DMA_Abort_IT+0xd8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d01a      	beq.n	80028b2 <HAL_DMA_Abort_IT+0x96>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <HAL_DMA_Abort_IT+0xdc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d012      	beq.n	80028ac <HAL_DMA_Abort_IT+0x90>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <HAL_DMA_Abort_IT+0xe0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00a      	beq.n	80028a6 <HAL_DMA_Abort_IT+0x8a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_DMA_Abort_IT+0xe4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d102      	bne.n	80028a0 <HAL_DMA_Abort_IT+0x84>
 800289a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800289e:	e00e      	b.n	80028be <HAL_DMA_Abort_IT+0xa2>
 80028a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a4:	e00b      	b.n	80028be <HAL_DMA_Abort_IT+0xa2>
 80028a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028aa:	e008      	b.n	80028be <HAL_DMA_Abort_IT+0xa2>
 80028ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b0:	e005      	b.n	80028be <HAL_DMA_Abort_IT+0xa2>
 80028b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b6:	e002      	b.n	80028be <HAL_DMA_Abort_IT+0xa2>
 80028b8:	2310      	movs	r3, #16
 80028ba:	e000      	b.n	80028be <HAL_DMA_Abort_IT+0xa2>
 80028bc:	2301      	movs	r3, #1
 80028be:	4a11      	ldr	r2, [pc, #68]	; (8002904 <HAL_DMA_Abort_IT+0xe8>)
 80028c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
    } 
  }
  return status;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40020008 	.word	0x40020008
 80028f0:	4002001c 	.word	0x4002001c
 80028f4:	40020030 	.word	0x40020030
 80028f8:	40020044 	.word	0x40020044
 80028fc:	40020058 	.word	0x40020058
 8002900:	4002006c 	.word	0x4002006c
 8002904:	40020000 	.word	0x40020000

08002908 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	2204      	movs	r2, #4
 8002926:	409a      	lsls	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d04f      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xc8>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d04a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0204 	bic.w	r2, r2, #4
 8002956:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a66      	ldr	r2, [pc, #408]	; (8002af8 <HAL_DMA_IRQHandler+0x1f0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d029      	beq.n	80029b6 <HAL_DMA_IRQHandler+0xae>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a65      	ldr	r2, [pc, #404]	; (8002afc <HAL_DMA_IRQHandler+0x1f4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xaa>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a63      	ldr	r2, [pc, #396]	; (8002b00 <HAL_DMA_IRQHandler+0x1f8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01a      	beq.n	80029ac <HAL_DMA_IRQHandler+0xa4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a62      	ldr	r2, [pc, #392]	; (8002b04 <HAL_DMA_IRQHandler+0x1fc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d012      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x9e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a60      	ldr	r2, [pc, #384]	; (8002b08 <HAL_DMA_IRQHandler+0x200>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00a      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x98>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5f      	ldr	r2, [pc, #380]	; (8002b0c <HAL_DMA_IRQHandler+0x204>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d102      	bne.n	800299a <HAL_DMA_IRQHandler+0x92>
 8002994:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002998:	e00e      	b.n	80029b8 <HAL_DMA_IRQHandler+0xb0>
 800299a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800299e:	e00b      	b.n	80029b8 <HAL_DMA_IRQHandler+0xb0>
 80029a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029a4:	e008      	b.n	80029b8 <HAL_DMA_IRQHandler+0xb0>
 80029a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029aa:	e005      	b.n	80029b8 <HAL_DMA_IRQHandler+0xb0>
 80029ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b0:	e002      	b.n	80029b8 <HAL_DMA_IRQHandler+0xb0>
 80029b2:	2340      	movs	r3, #64	; 0x40
 80029b4:	e000      	b.n	80029b8 <HAL_DMA_IRQHandler+0xb0>
 80029b6:	2304      	movs	r3, #4
 80029b8:	4a55      	ldr	r2, [pc, #340]	; (8002b10 <HAL_DMA_IRQHandler+0x208>)
 80029ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8094 	beq.w	8002aee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029ce:	e08e      	b.n	8002aee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2202      	movs	r2, #2
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d056      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x186>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d051      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10b      	bne.n	8002a10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 020a 	bic.w	r2, r2, #10
 8002a06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a38      	ldr	r2, [pc, #224]	; (8002af8 <HAL_DMA_IRQHandler+0x1f0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d029      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x166>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a37      	ldr	r2, [pc, #220]	; (8002afc <HAL_DMA_IRQHandler+0x1f4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x162>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a35      	ldr	r2, [pc, #212]	; (8002b00 <HAL_DMA_IRQHandler+0x1f8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01a      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x15c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <HAL_DMA_IRQHandler+0x1fc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d012      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x156>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a32      	ldr	r2, [pc, #200]	; (8002b08 <HAL_DMA_IRQHandler+0x200>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00a      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x150>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a31      	ldr	r2, [pc, #196]	; (8002b0c <HAL_DMA_IRQHandler+0x204>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d102      	bne.n	8002a52 <HAL_DMA_IRQHandler+0x14a>
 8002a4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a50:	e00e      	b.n	8002a70 <HAL_DMA_IRQHandler+0x168>
 8002a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a56:	e00b      	b.n	8002a70 <HAL_DMA_IRQHandler+0x168>
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	e008      	b.n	8002a70 <HAL_DMA_IRQHandler+0x168>
 8002a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a62:	e005      	b.n	8002a70 <HAL_DMA_IRQHandler+0x168>
 8002a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a68:	e002      	b.n	8002a70 <HAL_DMA_IRQHandler+0x168>
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e000      	b.n	8002a70 <HAL_DMA_IRQHandler+0x168>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	4a27      	ldr	r2, [pc, #156]	; (8002b10 <HAL_DMA_IRQHandler+0x208>)
 8002a72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d034      	beq.n	8002aee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a8c:	e02f      	b.n	8002aee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2208      	movs	r2, #8
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d028      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x1e8>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 020e 	bic.w	r2, r2, #14
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d004      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
    }
  }
  return;
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
}
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40020008 	.word	0x40020008
 8002afc:	4002001c 	.word	0x4002001c
 8002b00:	40020030 	.word	0x40020030
 8002b04:	40020044 	.word	0x40020044
 8002b08:	40020058 	.word	0x40020058
 8002b0c:	4002006c 	.word	0x4002006c
 8002b10:	40020000 	.word	0x40020000

08002b14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d108      	bne.n	8002b54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b52:	e007      	b.n	8002b64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	60da      	str	r2, [r3, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <HAL_FLASH_Program+0xd8>)
 8002b8c:	7e1b      	ldrb	r3, [r3, #24]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_FLASH_Program+0x26>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e054      	b.n	8002c40 <HAL_FLASH_Program+0xd0>
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <HAL_FLASH_Program+0xd8>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ba0:	f000 f8d4 	bl	8002d4c <FLASH_WaitForLastOperation>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d144      	bne.n	8002c38 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d102      	bne.n	8002bba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	757b      	strb	r3, [r7, #21]
 8002bb8:	e007      	b.n	8002bca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	757b      	strb	r3, [r7, #21]
 8002bc4:	e001      	b.n	8002bca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75bb      	strb	r3, [r7, #22]
 8002bce:	e02d      	b.n	8002c2c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002bd0:	7dbb      	ldrb	r3, [r7, #22]
 8002bd2:	005a      	lsls	r2, r3, #1
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	eb02 0c03 	add.w	ip, r2, r3
 8002bda:	7dbb      	ldrb	r3, [r7, #22]
 8002bdc:	0119      	lsls	r1, r3, #4
 8002bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002be2:	f1c1 0620 	rsb	r6, r1, #32
 8002be6:	f1a1 0020 	sub.w	r0, r1, #32
 8002bea:	fa22 f401 	lsr.w	r4, r2, r1
 8002bee:	fa03 f606 	lsl.w	r6, r3, r6
 8002bf2:	4334      	orrs	r4, r6
 8002bf4:	fa23 f000 	lsr.w	r0, r3, r0
 8002bf8:	4304      	orrs	r4, r0
 8002bfa:	fa23 f501 	lsr.w	r5, r3, r1
 8002bfe:	b2a3      	uxth	r3, r4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4660      	mov	r0, ip
 8002c04:	f000 f886 	bl	8002d14 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c0c:	f000 f89e 	bl	8002d4c <FLASH_WaitForLastOperation>
 8002c10:	4603      	mov	r3, r0
 8002c12:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002c14:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_FLASH_Program+0xdc>)
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <HAL_FLASH_Program+0xdc>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002c26:	7dbb      	ldrb	r3, [r7, #22]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	75bb      	strb	r3, [r7, #22]
 8002c2c:	7dba      	ldrb	r2, [r7, #22]
 8002c2e:	7d7b      	ldrb	r3, [r7, #21]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d3cd      	bcc.n	8002bd0 <HAL_FLASH_Program+0x60>
 8002c34:	e000      	b.n	8002c38 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002c36:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_FLASH_Program+0xd8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	761a      	strb	r2, [r3, #24]

  return status;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c48:	20000380 	.word	0x20000380
 8002c4c:	40022000 	.word	0x40022000

08002c50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_FLASH_Unlock+0x40>)
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_FLASH_Unlock+0x40>)
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <HAL_FLASH_Unlock+0x44>)
 8002c6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_FLASH_Unlock+0x40>)
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_FLASH_Unlock+0x48>)
 8002c70:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_FLASH_Unlock+0x40>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002c82:	79fb      	ldrb	r3, [r7, #7]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40022000 	.word	0x40022000
 8002c94:	45670123 	.word	0x45670123
 8002c98:	cdef89ab 	.word	0xcdef89ab

08002c9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_FLASH_Lock+0x1c>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_FLASH_Lock+0x1c>)
 8002ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002caa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40022000 	.word	0x40022000

08002cbc <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_FLASH_OB_Unlock+0x2c>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_FLASH_OB_Unlock+0x2c>)
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <HAL_FLASH_OB_Unlock+0x30>)
 8002cd0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_FLASH_OB_Unlock+0x2c>)
 8002cd4:	4a06      	ldr	r2, [pc, #24]	; (8002cf0 <HAL_FLASH_OB_Unlock+0x34>)
 8002cd6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e000      	b.n	8002cde <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40022000 	.word	0x40022000
 8002cec:	45670123 	.word	0x45670123
 8002cf0:	cdef89ab 	.word	0xcdef89ab

08002cf4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_FLASH_OB_Lock+0x1c>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <HAL_FLASH_OB_Lock+0x1c>)
 8002cfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d02:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40022000 	.word	0x40022000

08002d14 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <FLASH_Program_HalfWord+0x30>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <FLASH_Program_HalfWord+0x34>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <FLASH_Program_HalfWord+0x34>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	887a      	ldrh	r2, [r7, #2]
 8002d36:	801a      	strh	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000380 	.word	0x20000380
 8002d48:	40022000 	.word	0x40022000

08002d4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002d54:	f7fe ffa0 	bl	8001c98 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d5a:	e010      	b.n	8002d7e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d00c      	beq.n	8002d7e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <FLASH_WaitForLastOperation+0x2e>
 8002d6a:	f7fe ff95 	bl	8001c98 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d201      	bcs.n	8002d7e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e025      	b.n	8002dca <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <FLASH_WaitForLastOperation+0x88>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e8      	bne.n	8002d5c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <FLASH_WaitForLastOperation+0x88>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <FLASH_WaitForLastOperation+0x88>)
 8002d98:	2220      	movs	r2, #32
 8002d9a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <FLASH_WaitForLastOperation+0x88>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <FLASH_WaitForLastOperation+0x88>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <FLASH_WaitForLastOperation+0x88>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002dc0:	f000 f80a 	bl	8002dd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40022000 	.word	0x40022000

08002dd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <FLASH_SetErrorCode+0x98>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002dee:	4b21      	ldr	r3, [pc, #132]	; (8002e74 <FLASH_SetErrorCode+0x9c>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f043 0302 	orr.w	r3, r3, #2
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <FLASH_SetErrorCode+0x9c>)
 8002df8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f043 0310 	orr.w	r3, r3, #16
 8002e00:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <FLASH_SetErrorCode+0x98>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d009      	beq.n	8002e22 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <FLASH_SetErrorCode+0x9c>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <FLASH_SetErrorCode+0x9c>)
 8002e18:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002e22:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <FLASH_SetErrorCode+0x98>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <FLASH_SetErrorCode+0x9c>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	4a0f      	ldr	r2, [pc, #60]	; (8002e74 <FLASH_SetErrorCode+0x9c>)
 8002e38:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <FLASH_SetErrorCode+0x98>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <FLASH_SetErrorCode+0x98>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f240 1201 	movw	r2, #257	; 0x101
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d106      	bne.n	8002e5e <FLASH_SetErrorCode+0x86>
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <FLASH_SetErrorCode+0x98>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4a06      	ldr	r2, [pc, #24]	; (8002e70 <FLASH_SetErrorCode+0x98>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	61d3      	str	r3, [r2, #28]
}  
 8002e5c:	e002      	b.n	8002e64 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e5e:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <FLASH_SetErrorCode+0x98>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	60d3      	str	r3, [r2, #12]
}  
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40022000 	.word	0x40022000
 8002e74:	20000380 	.word	0x20000380

08002e78 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_FLASHEx_Erase+0xd0>)
 8002e8c:	7e1b      	ldrb	r3, [r3, #24]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_FLASHEx_Erase+0x1e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e053      	b.n	8002f3e <HAL_FLASHEx_Erase+0xc6>
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_FLASHEx_Erase+0xd0>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d116      	bne.n	8002ed2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002ea4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ea8:	f7ff ff50 	bl	8002d4c <FLASH_WaitForLastOperation>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d141      	bne.n	8002f36 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f000 f84c 	bl	8002f50 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002eb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ebc:	f7ff ff46 	bl	8002d4c <FLASH_WaitForLastOperation>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002ec4:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <HAL_FLASHEx_Erase+0xd4>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <HAL_FLASHEx_Erase+0xd4>)
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	6113      	str	r3, [r2, #16]
 8002ed0:	e031      	b.n	8002f36 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002ed2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ed6:	f7ff ff39 	bl	8002d4c <FLASH_WaitForLastOperation>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d12a      	bne.n	8002f36 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	e019      	b.n	8002f24 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002ef0:	68b8      	ldr	r0, [r7, #8]
 8002ef2:	f000 f849 	bl	8002f88 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ef6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002efa:	f7ff ff27 	bl	8002d4c <FLASH_WaitForLastOperation>
 8002efe:	4603      	mov	r3, r0
 8002f00:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_FLASHEx_Erase+0xd4>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_FLASHEx_Erase+0xd4>)
 8002f08:	f023 0302 	bic.w	r3, r3, #2
 8002f0c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	601a      	str	r2, [r3, #0]
            break;
 8002f1a:	e00c      	b.n	8002f36 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f22:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	029a      	lsls	r2, r3, #10
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d3dc      	bcc.n	8002ef0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <HAL_FLASHEx_Erase+0xd0>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	761a      	strb	r2, [r3, #24]

  return status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000380 	.word	0x20000380
 8002f4c:	40022000 	.word	0x40022000

08002f50 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <FLASH_MassErase+0x30>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <FLASH_MassErase+0x34>)
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <FLASH_MassErase+0x34>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <FLASH_MassErase+0x34>)
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <FLASH_MassErase+0x34>)
 8002f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f74:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	20000380 	.word	0x20000380
 8002f84:	40022000 	.word	0x40022000

08002f88 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <FLASH_PageErase+0x38>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <FLASH_PageErase+0x3c>)
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <FLASH_PageErase+0x3c>)
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <FLASH_PageErase+0x3c>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <FLASH_PageErase+0x3c>)
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	4a05      	ldr	r2, [pc, #20]	; (8002fc4 <FLASH_PageErase+0x3c>)
 8002fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000380 	.word	0x20000380
 8002fc4:	40022000 	.word	0x40022000

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b08b      	sub	sp, #44	; 0x2c
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fda:	e169      	b.n	80032b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f040 8158 	bne.w	80032aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a9a      	ldr	r2, [pc, #616]	; (8003268 <HAL_GPIO_Init+0x2a0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d05e      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003004:	4a98      	ldr	r2, [pc, #608]	; (8003268 <HAL_GPIO_Init+0x2a0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d875      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800300a:	4a98      	ldr	r2, [pc, #608]	; (800326c <HAL_GPIO_Init+0x2a4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d058      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003010:	4a96      	ldr	r2, [pc, #600]	; (800326c <HAL_GPIO_Init+0x2a4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d86f      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003016:	4a96      	ldr	r2, [pc, #600]	; (8003270 <HAL_GPIO_Init+0x2a8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d052      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 800301c:	4a94      	ldr	r2, [pc, #592]	; (8003270 <HAL_GPIO_Init+0x2a8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d869      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003022:	4a94      	ldr	r2, [pc, #592]	; (8003274 <HAL_GPIO_Init+0x2ac>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04c      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003028:	4a92      	ldr	r2, [pc, #584]	; (8003274 <HAL_GPIO_Init+0x2ac>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d863      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800302e:	4a92      	ldr	r2, [pc, #584]	; (8003278 <HAL_GPIO_Init+0x2b0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d046      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003034:	4a90      	ldr	r2, [pc, #576]	; (8003278 <HAL_GPIO_Init+0x2b0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d85d      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800303a:	2b12      	cmp	r3, #18
 800303c:	d82a      	bhi.n	8003094 <HAL_GPIO_Init+0xcc>
 800303e:	2b12      	cmp	r3, #18
 8003040:	d859      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003042:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <HAL_GPIO_Init+0x80>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	080030c3 	.word	0x080030c3
 800304c:	0800309d 	.word	0x0800309d
 8003050:	080030af 	.word	0x080030af
 8003054:	080030f1 	.word	0x080030f1
 8003058:	080030f7 	.word	0x080030f7
 800305c:	080030f7 	.word	0x080030f7
 8003060:	080030f7 	.word	0x080030f7
 8003064:	080030f7 	.word	0x080030f7
 8003068:	080030f7 	.word	0x080030f7
 800306c:	080030f7 	.word	0x080030f7
 8003070:	080030f7 	.word	0x080030f7
 8003074:	080030f7 	.word	0x080030f7
 8003078:	080030f7 	.word	0x080030f7
 800307c:	080030f7 	.word	0x080030f7
 8003080:	080030f7 	.word	0x080030f7
 8003084:	080030f7 	.word	0x080030f7
 8003088:	080030f7 	.word	0x080030f7
 800308c:	080030a5 	.word	0x080030a5
 8003090:	080030b9 	.word	0x080030b9
 8003094:	4a79      	ldr	r2, [pc, #484]	; (800327c <HAL_GPIO_Init+0x2b4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800309a:	e02c      	b.n	80030f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	623b      	str	r3, [r7, #32]
          break;
 80030a2:	e029      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	3304      	adds	r3, #4
 80030aa:	623b      	str	r3, [r7, #32]
          break;
 80030ac:	e024      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	3308      	adds	r3, #8
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e01f      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	330c      	adds	r3, #12
 80030be:	623b      	str	r3, [r7, #32]
          break;
 80030c0:	e01a      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ca:	2304      	movs	r3, #4
 80030cc:	623b      	str	r3, [r7, #32]
          break;
 80030ce:	e013      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d8:	2308      	movs	r3, #8
 80030da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	611a      	str	r2, [r3, #16]
          break;
 80030e2:	e009      	b.n	80030f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030e4:	2308      	movs	r3, #8
 80030e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	615a      	str	r2, [r3, #20]
          break;
 80030ee:	e003      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030f0:	2300      	movs	r3, #0
 80030f2:	623b      	str	r3, [r7, #32]
          break;
 80030f4:	e000      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          break;
 80030f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	d801      	bhi.n	8003102 <HAL_GPIO_Init+0x13a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	e001      	b.n	8003106 <HAL_GPIO_Init+0x13e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2bff      	cmp	r3, #255	; 0xff
 800310c:	d802      	bhi.n	8003114 <HAL_GPIO_Init+0x14c>
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	e002      	b.n	800311a <HAL_GPIO_Init+0x152>
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	3b08      	subs	r3, #8
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	210f      	movs	r1, #15
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80b1 	beq.w	80032aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4a4c      	ldr	r2, [pc, #304]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6193      	str	r3, [r2, #24]
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003160:	4a48      	ldr	r2, [pc, #288]	; (8003284 <HAL_GPIO_Init+0x2bc>)
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	220f      	movs	r2, #15
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a40      	ldr	r2, [pc, #256]	; (8003288 <HAL_GPIO_Init+0x2c0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_GPIO_Init+0x1ec>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3f      	ldr	r2, [pc, #252]	; (800328c <HAL_GPIO_Init+0x2c4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00d      	beq.n	80031b0 <HAL_GPIO_Init+0x1e8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a3e      	ldr	r2, [pc, #248]	; (8003290 <HAL_GPIO_Init+0x2c8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <HAL_GPIO_Init+0x1e4>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a3d      	ldr	r2, [pc, #244]	; (8003294 <HAL_GPIO_Init+0x2cc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_GPIO_Init+0x1e0>
 80031a4:	2303      	movs	r3, #3
 80031a6:	e006      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031a8:	2304      	movs	r3, #4
 80031aa:	e004      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e002      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031b4:	2300      	movs	r3, #0
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	f002 0203 	and.w	r2, r2, #3
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	4093      	lsls	r3, r2
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031c6:	492f      	ldr	r1, [pc, #188]	; (8003284 <HAL_GPIO_Init+0x2bc>)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	492c      	ldr	r1, [pc, #176]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	4928      	ldr	r1, [pc, #160]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4922      	ldr	r1, [pc, #136]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	43db      	mvns	r3, r3
 800321e:	491e      	ldr	r1, [pc, #120]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003220:	4013      	ands	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4918      	ldr	r1, [pc, #96]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	43db      	mvns	r3, r3
 8003246:	4914      	ldr	r1, [pc, #80]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003248:	4013      	ands	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	60cb      	str	r3, [r1, #12]
 8003264:	e021      	b.n	80032aa <HAL_GPIO_Init+0x2e2>
 8003266:	bf00      	nop
 8003268:	10320000 	.word	0x10320000
 800326c:	10310000 	.word	0x10310000
 8003270:	10220000 	.word	0x10220000
 8003274:	10210000 	.word	0x10210000
 8003278:	10120000 	.word	0x10120000
 800327c:	10110000 	.word	0x10110000
 8003280:	40021000 	.word	0x40021000
 8003284:	40010000 	.word	0x40010000
 8003288:	40010800 	.word	0x40010800
 800328c:	40010c00 	.word	0x40010c00
 8003290:	40011000 	.word	0x40011000
 8003294:	40011400 	.word	0x40011400
 8003298:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_GPIO_Init+0x304>)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4909      	ldr	r1, [pc, #36]	; (80032cc <HAL_GPIO_Init+0x304>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	3301      	adds	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f47f ae8e 	bne.w	8002fdc <HAL_GPIO_Init+0x14>
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	372c      	adds	r7, #44	; 0x2c
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40010400 	.word	0x40010400

080032d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
 80032ec:	e001      	b.n	80032f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	807b      	strh	r3, [r7, #2]
 800330a:	4613      	mov	r3, r2
 800330c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800330e:	787b      	ldrb	r3, [r7, #1]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003314:	887a      	ldrh	r2, [r7, #2]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800331a:	e003      	b.n	8003324 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	041a      	lsls	r2, r3, #16
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	611a      	str	r2, [r3, #16]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003340:	887a      	ldrh	r2, [r7, #2]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4013      	ands	r3, r2
 8003346:	041a      	lsls	r2, r3, #16
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	43d9      	mvns	r1, r3
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	400b      	ands	r3, r1
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	611a      	str	r2, [r3, #16]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003362:	b08b      	sub	sp, #44	; 0x2c
 8003364:	af06      	add	r7, sp, #24
 8003366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0fd      	b.n	800356e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f007 fa46 	bl	800a818 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2203      	movs	r2, #3
 8003390:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f003 f86f 	bl	800647c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	687e      	ldr	r6, [r7, #4]
 80033a6:	466d      	mov	r5, sp
 80033a8:	f106 0410 	add.w	r4, r6, #16
 80033ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	602b      	str	r3, [r5, #0]
 80033b4:	1d33      	adds	r3, r6, #4
 80033b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b8:	6838      	ldr	r0, [r7, #0]
 80033ba:	f003 f839 	bl	8006430 <USB_CoreInit>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0ce      	b.n	800356e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 f86a 	bl	80064b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]
 80033e0:	e04c      	b.n	800347c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	3301      	adds	r3, #1
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	b298      	uxth	r0, r3
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	3336      	adds	r3, #54	; 0x36
 8003420:	4602      	mov	r2, r0
 8003422:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	440b      	add	r3, r1
 8003434:	3303      	adds	r3, #3
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	440b      	add	r3, r1
 8003448:	3338      	adds	r3, #56	; 0x38
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	440b      	add	r3, r1
 800345c:	333c      	adds	r3, #60	; 0x3c
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	440b      	add	r3, r1
 8003470:	3340      	adds	r3, #64	; 0x40
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	3301      	adds	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d3ad      	bcc.n	80033e2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	e044      	b.n	8003516 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	440b      	add	r3, r1
 800349a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	440b      	add	r3, r1
 80034f2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	3301      	adds	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	d3b5      	bcc.n	800348c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	687e      	ldr	r6, [r7, #4]
 8003528:	466d      	mov	r5, sp
 800352a:	f106 0410 	add.w	r4, r6, #16
 800352e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	602b      	str	r3, [r5, #0]
 8003536:	1d33      	adds	r3, r6, #4
 8003538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800353a:	6838      	ldr	r0, [r7, #0]
 800353c:	f002 ffc4 	bl	80064c8 <USB_DevInit>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e00d      	b.n	800356e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f005 fc76 	bl	8008e58 <USB_DevDisconnect>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003576 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_PCD_Start+0x16>
 8003588:	2302      	movs	r3, #2
 800358a:	e016      	b.n	80035ba <HAL_PCD_Start+0x44>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f002 ff59 	bl	8006450 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800359e:	2101      	movs	r1, #1
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f007 fb90 	bl	800acc6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f005 fc4a 	bl	8008e44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b088      	sub	sp, #32
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f005 fc4c 	bl	8008e6c <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035de:	d102      	bne.n	80035e6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fb48 	bl	8003c76 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f005 fc3e 	bl	8008e6c <USB_ReadInterrupts>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fa:	d112      	bne.n	8003622 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003604:	b29a      	uxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360e:	b292      	uxth	r2, r2
 8003610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f007 f97a 	bl	800a90e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800361a:	2100      	movs	r1, #0
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f923 	bl	8003868 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f005 fc20 	bl	8008e6c <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003636:	d10b      	bne.n	8003650 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800364a:	b292      	uxth	r2, r2
 800364c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f005 fc09 	bl	8008e6c <USB_ReadInterrupts>
 800365a:	4603      	mov	r3, r0
 800365c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003664:	d10b      	bne.n	800367e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800366e:	b29a      	uxth	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003678:	b292      	uxth	r2, r2
 800367a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f005 fbf2 	bl	8008e6c <USB_ReadInterrupts>
 8003688:	4603      	mov	r3, r0
 800368a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003692:	d126      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0204 	bic.w	r2, r2, #4
 80036a6:	b292      	uxth	r2, r2
 80036a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0208 	bic.w	r2, r2, #8
 80036be:	b292      	uxth	r2, r2
 80036c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f007 f95b 	bl	800a980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036dc:	b292      	uxth	r2, r2
 80036de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f005 fbc0 	bl	8008e6c <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f6:	f040 8082 	bne.w	80037fe <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	77fb      	strb	r3, [r7, #31]
 80036fe:	e010      	b.n	8003722 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	7ffb      	ldrb	r3, [r7, #31]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	441a      	add	r2, r3
 800370c:	7ffb      	ldrb	r3, [r7, #31]
 800370e:	8812      	ldrh	r2, [r2, #0]
 8003710:	b292      	uxth	r2, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	3320      	adds	r3, #32
 8003716:	443b      	add	r3, r7
 8003718:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800371c:	7ffb      	ldrb	r3, [r7, #31]
 800371e:	3301      	adds	r3, #1
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	7ffb      	ldrb	r3, [r7, #31]
 8003724:	2b07      	cmp	r3, #7
 8003726:	d9eb      	bls.n	8003700 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003730:	b29a      	uxth	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	b292      	uxth	r2, r2
 800373c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003748:	b29a      	uxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	b292      	uxth	r2, r2
 8003754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003758:	bf00      	nop
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003762:	b29b      	uxth	r3, r3
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f6      	beq.n	800375a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003774:	b29a      	uxth	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377e:	b292      	uxth	r2, r2
 8003780:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003784:	2300      	movs	r3, #0
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e00f      	b.n	80037aa <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	4611      	mov	r1, r2
 8003792:	7ffa      	ldrb	r2, [r7, #31]
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	440a      	add	r2, r1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	3320      	adds	r3, #32
 800379c:	443b      	add	r3, r7
 800379e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80037a2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80037a4:	7ffb      	ldrb	r3, [r7, #31]
 80037a6:	3301      	adds	r3, #1
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	7ffb      	ldrb	r3, [r7, #31]
 80037ac:	2b07      	cmp	r3, #7
 80037ae:	d9ec      	bls.n	800378a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0208 	orr.w	r2, r2, #8
 80037c2:	b292      	uxth	r2, r2
 80037c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037da:	b292      	uxth	r2, r2
 80037dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0204 	orr.w	r2, r2, #4
 80037f2:	b292      	uxth	r2, r2
 80037f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f007 f8a7 	bl	800a94c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f005 fb32 	bl	8008e6c <USB_ReadInterrupts>
 8003808:	4603      	mov	r3, r0
 800380a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d10e      	bne.n	8003832 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003826:	b292      	uxth	r2, r2
 8003828:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f007 f860 	bl	800a8f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f005 fb18 	bl	8008e6c <USB_ReadInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003846:	d10b      	bne.n	8003860 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800385a:	b292      	uxth	r2, r2
 800385c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003860:	bf00      	nop
 8003862:	3720      	adds	r7, #32
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_PCD_SetAddress+0x1a>
 800387e:	2302      	movs	r3, #2
 8003880:	e013      	b.n	80038aa <HAL_PCD_SetAddress+0x42>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f005 fabf 	bl	8008e1e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	4608      	mov	r0, r1
 80038bc:	4611      	mov	r1, r2
 80038be:	461a      	mov	r2, r3
 80038c0:	4603      	mov	r3, r0
 80038c2:	70fb      	strb	r3, [r7, #3]
 80038c4:	460b      	mov	r3, r1
 80038c6:	803b      	strh	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	da0e      	bge.n	80038f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	705a      	strb	r2, [r3, #1]
 80038f4:	e00e      	b.n	8003914 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 0207 	and.w	r2, r3, #7
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	b2da      	uxtb	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003920:	883a      	ldrh	r2, [r7, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	78ba      	ldrb	r2, [r7, #2]
 800392a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	785b      	ldrb	r3, [r3, #1]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800393e:	78bb      	ldrb	r3, [r7, #2]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d102      	bne.n	800394a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_PCD_EP_Open+0xa6>
 8003954:	2302      	movs	r3, #2
 8003956:	e00e      	b.n	8003976 <HAL_PCD_EP_Open+0xc4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68f9      	ldr	r1, [r7, #12]
 8003966:	4618      	mov	r0, r3
 8003968:	f002 fdce 	bl	8006508 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003974:	7afb      	ldrb	r3, [r7, #11]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800398a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800398e:	2b00      	cmp	r3, #0
 8003990:	da0e      	bge.n	80039b0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	705a      	strb	r2, [r3, #1]
 80039ae:	e00e      	b.n	80039ce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 0207 	and.w	r2, r3, #7
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_PCD_EP_Close+0x6a>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e00e      	b.n	8003a06 <HAL_PCD_EP_Close+0x88>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68f9      	ldr	r1, [r7, #12]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 f8f0 	bl	8006bdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a1e:	7afb      	ldrb	r3, [r7, #11]
 8003a20:	f003 0207 	and.w	r2, r3, #7
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6979      	ldr	r1, [r7, #20]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f003 faa2 	bl	8006fb4 <USB_EPStartXfer>
 8003a70:	e005      	b.n	8003a7e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6979      	ldr	r1, [r7, #20]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f003 fa9b 	bl	8006fb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	460b      	mov	r3, r1
 8003a96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a98:	7afb      	ldrb	r3, [r7, #11]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad4:	7afb      	ldrb	r3, [r7, #11]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f003 fa5f 	bl	8006fb4 <USB_EPStartXfer>
 8003af6:	e005      	b.n	8003b04 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6979      	ldr	r1, [r7, #20]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f003 fa58 	bl	8006fb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 0207 	and.w	r2, r3, #7
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d901      	bls.n	8003b2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e04c      	b.n	8003bc6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	da0e      	bge.n	8003b52 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4413      	add	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	705a      	strb	r2, [r3, #1]
 8003b50:	e00c      	b.n	8003b6c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4413      	add	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_PCD_EP_SetStall+0x7e>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e01c      	b.n	8003bc6 <HAL_PCD_EP_SetStall+0xb8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68f9      	ldr	r1, [r7, #12]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f005 f842 	bl	8008c24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f005 f967 	bl	8008e8a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d901      	bls.n	8003bec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e040      	b.n	8003c6e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	da0e      	bge.n	8003c12 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	705a      	strb	r2, [r3, #1]
 8003c10:	e00e      	b.n	8003c30 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f003 0207 	and.w	r2, r3, #7
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_PCD_EP_ClrStall+0x82>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e00e      	b.n	8003c6e <HAL_PCD_EP_ClrStall+0xa0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68f9      	ldr	r1, [r7, #12]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f005 f830 	bl	8008cc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b08e      	sub	sp, #56	; 0x38
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c7e:	e2ec      	b.n	800425a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c88:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003c96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 8161 	bne.w	8003f62 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003ca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d152      	bne.n	8003d50 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	81fb      	strh	r3, [r7, #14]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	89fb      	ldrh	r3, [r7, #14]
 8003cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3328      	adds	r3, #40	; 0x28
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	441a      	add	r2, r3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d0e:	2100      	movs	r1, #0
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f006 fdd4 	bl	800a8be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 829b 	beq.w	800425a <PCD_EP_ISR_Handler+0x5e4>
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f040 8296 	bne.w	800425a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	b292      	uxth	r2, r2
 8003d42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d4e:	e284      	b.n	800425a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d034      	beq.n	8003dd4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3306      	adds	r3, #6
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f005 f8be 	bl	8008f2a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003dba:	4013      	ands	r3, r2
 8003dbc:	823b      	strh	r3, [r7, #16]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	8a3a      	ldrh	r2, [r7, #16]
 8003dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dc8:	b292      	uxth	r2, r2
 8003dca:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f006 fd49 	bl	800a864 <HAL_PCD_SetupStageCallback>
 8003dd2:	e242      	b.n	800425a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003dd4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f280 823e 	bge.w	800425a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003dea:	4013      	ands	r3, r2
 8003dec:	83bb      	strh	r3, [r7, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	8bba      	ldrh	r2, [r7, #28]
 8003df4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003df8:	b292      	uxth	r2, r2
 8003dfa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3306      	adds	r3, #6
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d019      	beq.n	8003e64 <PCD_EP_ISR_Handler+0x1ee>
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d015      	beq.n	8003e64 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	6959      	ldr	r1, [r3, #20]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f005 f86e 	bl	8008f2a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	441a      	add	r2, r3
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f006 fd12 	bl	800a888 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 81f2 	bne.w	800425a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d112      	bne.n	8003ec4 <PCD_EP_ISR_Handler+0x24e>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	801a      	strh	r2, [r3, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	801a      	strh	r2, [r3, #0]
 8003ec2:	e02f      	b.n	8003f24 <PCD_EP_ISR_Handler+0x2ae>
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b3e      	cmp	r3, #62	; 0x3e
 8003eca:	d813      	bhi.n	8003ef4 <PCD_EP_ISR_Handler+0x27e>
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <PCD_EP_ISR_Handler+0x270>
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	029b      	lsls	r3, r3, #10
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	e017      	b.n	8003f24 <PCD_EP_ISR_Handler+0x2ae>
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	633b      	str	r3, [r7, #48]	; 0x30
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <PCD_EP_ISR_Handler+0x298>
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	029b      	lsls	r3, r3, #10
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f34:	827b      	strh	r3, [r7, #18]
 8003f36:	8a7b      	ldrh	r3, [r7, #18]
 8003f38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f3c:	827b      	strh	r3, [r7, #18]
 8003f3e:	8a7b      	ldrh	r3, [r7, #18]
 8003f40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f44:	827b      	strh	r3, [r7, #18]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	8a7b      	ldrh	r3, [r7, #18]
 8003f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	8013      	strh	r3, [r2, #0]
 8003f60:	e17b      	b.n	800425a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f74:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f280 80ea 	bge.w	8004152 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f94:	4013      	ands	r3, r2
 8003f96:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003fa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fac:	b292      	uxth	r2, r2
 8003fae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003fb0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	7b1b      	ldrb	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d122      	bne.n	8004014 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3306      	adds	r3, #6
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003ff8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8087 	beq.w	800410e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	6959      	ldr	r1, [r3, #20]
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	88da      	ldrh	r2, [r3, #6]
 800400c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800400e:	f004 ff8c 	bl	8008f2a <USB_ReadPMA>
 8004012:	e07c      	b.n	800410e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	78db      	ldrb	r3, [r3, #3]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d108      	bne.n	800402e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800401c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800401e:	461a      	mov	r2, r3
 8004020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f927 	bl	8004276 <HAL_PCD_EP_DB_Receive>
 8004028:	4603      	mov	r3, r0
 800402a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800402c:	e06f      	b.n	800410e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004048:	847b      	strh	r3, [r7, #34]	; 0x22
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800405a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800405e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004066:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800406a:	b29b      	uxth	r3, r3
 800406c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d021      	beq.n	80040cc <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004090:	b29b      	uxth	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4413      	add	r3, r2
 800409c:	3302      	adds	r3, #2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80040b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02a      	beq.n	800410e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	6959      	ldr	r1, [r3, #20]
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	891a      	ldrh	r2, [r3, #8]
 80040c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040c6:	f004 ff30 	bl	8008f2a <USB_ReadPMA>
 80040ca:	e020      	b.n	800410e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4413      	add	r3, r2
 80040e0:	3306      	adds	r3, #6
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80040f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	6959      	ldr	r1, [r3, #20]
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	895a      	ldrh	r2, [r3, #10]
 8004108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800410a:	f004 ff0e 	bl	8008f2a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004114:	441a      	add	r2, r3
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004120:	441a      	add	r2, r3
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d004      	beq.n	8004138 <PCD_EP_ISR_Handler+0x4c2>
 800412e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	429a      	cmp	r2, r3
 8004136:	d206      	bcs.n	8004146 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	4619      	mov	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f006 fba2 	bl	800a888 <HAL_PCD_DataOutStageCallback>
 8004144:	e005      	b.n	8004152 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800414c:	4618      	mov	r0, r3
 800414e:	f002 ff31 	bl	8006fb4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004152:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b00      	cmp	r3, #0
 800415a:	d07e      	beq.n	800425a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800415c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	843b      	strh	r3, [r7, #32]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	8c3b      	ldrh	r3, [r7, #32]
 800419c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	78db      	ldrb	r3, [r3, #3]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d00c      	beq.n	80041ca <PCD_EP_ISR_Handler+0x554>
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	78db      	ldrb	r3, [r3, #3]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d146      	bne.n	800424e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80041c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d141      	bne.n	800424e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	3302      	adds	r3, #2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	8bfb      	ldrh	r3, [r7, #30]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d906      	bls.n	800420c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	8bfb      	ldrh	r3, [r7, #30]
 8004204:	1ad2      	subs	r2, r2, r3
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	619a      	str	r2, [r3, #24]
 800420a:	e002      	b.n	8004212 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	2200      	movs	r2, #0
 8004210:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f006 fb4c 	bl	800a8be <HAL_PCD_DataInStageCallback>
 8004226:	e018      	b.n	800425a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	8bfb      	ldrh	r3, [r7, #30]
 800422e:	441a      	add	r2, r3
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	8bfb      	ldrh	r3, [r7, #30]
 800423a:	441a      	add	r2, r3
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004246:	4618      	mov	r0, r3
 8004248:	f002 feb4 	bl	8006fb4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800424c:	e005      	b.n	800425a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800424e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004250:	461a      	mov	r2, r3
 8004252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f91b 	bl	8004490 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004262:	b29b      	uxth	r3, r3
 8004264:	b21b      	sxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	f6ff ad0a 	blt.w	8003c80 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3738      	adds	r7, #56	; 0x38
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b088      	sub	sp, #32
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	4613      	mov	r3, r2
 8004282:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d07e      	beq.n	800438c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004296:	b29b      	uxth	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	3302      	adds	r3, #2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	8b7b      	ldrh	r3, [r7, #26]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d306      	bcc.n	80042d0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	8b7b      	ldrh	r3, [r7, #26]
 80042c8:	1ad2      	subs	r2, r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	619a      	str	r2, [r3, #24]
 80042ce:	e002      	b.n	80042d6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2200      	movs	r2, #0
 80042d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d123      	bne.n	8004326 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f8:	833b      	strh	r3, [r7, #24]
 80042fa:	8b3b      	ldrh	r3, [r7, #24]
 80042fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004300:	833b      	strh	r3, [r7, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	441a      	add	r2, r3
 8004310:	8b3b      	ldrh	r3, [r7, #24]
 8004312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004322:	b29b      	uxth	r3, r3
 8004324:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01f      	beq.n	8004370 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	82fb      	strh	r3, [r7, #22]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	8afb      	ldrh	r3, [r7, #22]
 800435c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004368:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800436c:	b29b      	uxth	r3, r3
 800436e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004370:	8b7b      	ldrh	r3, [r7, #26]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8087 	beq.w	8004486 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6959      	ldr	r1, [r3, #20]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	891a      	ldrh	r2, [r3, #8]
 8004384:	8b7b      	ldrh	r3, [r7, #26]
 8004386:	f004 fdd0 	bl	8008f2a <USB_ReadPMA>
 800438a:	e07c      	b.n	8004486 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004394:	b29b      	uxth	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	3306      	adds	r3, #6
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	8b7b      	ldrh	r3, [r7, #26]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d306      	bcc.n	80043ce <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	699a      	ldr	r2, [r3, #24]
 80043c4:	8b7b      	ldrh	r3, [r7, #26]
 80043c6:	1ad2      	subs	r2, r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	619a      	str	r2, [r3, #24]
 80043cc:	e002      	b.n	80043d4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d123      	bne.n	8004424 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	83fb      	strh	r3, [r7, #30]
 80043f8:	8bfb      	ldrh	r3, [r7, #30]
 80043fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043fe:	83fb      	strh	r3, [r7, #30]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	441a      	add	r2, r3
 800440e:	8bfb      	ldrh	r3, [r7, #30]
 8004410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004420:	b29b      	uxth	r3, r3
 8004422:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11f      	bne.n	800446e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004448:	83bb      	strh	r3, [r7, #28]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	441a      	add	r2, r3
 8004458:	8bbb      	ldrh	r3, [r7, #28]
 800445a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800445e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004466:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800446a:	b29b      	uxth	r3, r3
 800446c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800446e:	8b7b      	ldrh	r3, [r7, #26]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6959      	ldr	r1, [r3, #20]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	895a      	ldrh	r2, [r3, #10]
 8004480:	8b7b      	ldrh	r3, [r7, #26]
 8004482:	f004 fd52 	bl	8008f2a <USB_ReadPMA>
    }
  }

  return count;
 8004486:	8b7b      	ldrh	r3, [r7, #26]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b0a2      	sub	sp, #136	; 0x88
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 81c7 	beq.w	8004838 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	3302      	adds	r3, #2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044de:	429a      	cmp	r2, r3
 80044e0:	d907      	bls.n	80044f2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044ea:	1ad2      	subs	r2, r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	619a      	str	r2, [r3, #24]
 80044f0:	e002      	b.n	80044f8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2200      	movs	r2, #0
 80044f6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 80b9 	bne.w	8004674 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d126      	bne.n	8004558 <HAL_PCD_EP_DB_Transmit+0xc8>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004518:	b29b      	uxth	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	4413      	add	r3, r2
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	011a      	lsls	r2, r3, #4
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	4413      	add	r3, r2
 800452c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800453c:	b29a      	uxth	r2, r3
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	801a      	strh	r2, [r3, #0]
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004550:	b29a      	uxth	r2, r3
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	801a      	strh	r2, [r3, #0]
 8004556:	e01a      	b.n	800458e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d116      	bne.n	800458e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456e:	b29b      	uxth	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	4413      	add	r3, r2
 8004576:	633b      	str	r3, [r7, #48]	; 0x30
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	011a      	lsls	r2, r3, #4
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	4413      	add	r3, r2
 8004582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	2200      	movs	r2, #0
 800458c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	623b      	str	r3, [r7, #32]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d126      	bne.n	80045ea <HAL_PCD_EP_DB_Transmit+0x15a>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	4413      	add	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	011a      	lsls	r2, r3, #4
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4413      	add	r3, r2
 80045be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	e017      	b.n	800461a <HAL_PCD_EP_DB_Transmit+0x18a>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d113      	bne.n	800461a <HAL_PCD_EP_DB_Transmit+0x18a>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	4413      	add	r3, r2
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	011a      	lsls	r2, r3, #4
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	4413      	add	r3, r2
 800460e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	2200      	movs	r2, #0
 8004618:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	4619      	mov	r1, r3
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f006 f94c 	bl	800a8be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 82d4 	beq.w	8004bda <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464c:	827b      	strh	r3, [r7, #18]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	8a7b      	ldrh	r3, [r7, #18]
 800465e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466e:	b29b      	uxth	r3, r3
 8004670:	8013      	strh	r3, [r2, #0]
 8004672:	e2b2      	b.n	8004bda <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d021      	beq.n	80046c2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80046ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046be:	b29b      	uxth	r3, r3
 80046c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	f040 8286 	bne.w	8004bda <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046d6:	441a      	add	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046e4:	441a      	add	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d309      	bcc.n	800470a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004702:	1ad2      	subs	r2, r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	621a      	str	r2, [r3, #32]
 8004708:	e015      	b.n	8004736 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004712:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004716:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004720:	e009      	b.n	8004736 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2200      	movs	r2, #0
 8004734:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	785b      	ldrb	r3, [r3, #1]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d155      	bne.n	80047ea <HAL_PCD_EP_DB_Transmit+0x35a>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	63bb      	str	r3, [r7, #56]	; 0x38
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	4413      	add	r3, r2
 8004754:	63bb      	str	r3, [r7, #56]	; 0x38
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	011a      	lsls	r2, r3, #4
 800475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475e:	4413      	add	r3, r2
 8004760:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
 8004766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004768:	2b00      	cmp	r3, #0
 800476a:	d112      	bne.n	8004792 <HAL_PCD_EP_DB_Transmit+0x302>
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004776:	b29a      	uxth	r2, r3
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477a:	801a      	strh	r2, [r3, #0]
 800477c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	b29b      	uxth	r3, r3
 8004782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478a:	b29a      	uxth	r2, r3
 800478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	e047      	b.n	8004822 <HAL_PCD_EP_DB_Transmit+0x392>
 8004792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004794:	2b3e      	cmp	r3, #62	; 0x3e
 8004796:	d811      	bhi.n	80047bc <HAL_PCD_EP_DB_Transmit+0x32c>
 8004798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	64bb      	str	r3, [r7, #72]	; 0x48
 800479e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_PCD_EP_DB_Transmit+0x31e>
 80047a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047aa:	3301      	adds	r3, #1
 80047ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	029b      	lsls	r3, r3, #10
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	e032      	b.n	8004822 <HAL_PCD_EP_DB_Transmit+0x392>
 80047bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <HAL_PCD_EP_DB_Transmit+0x342>
 80047cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ce:	3b01      	subs	r3, #1
 80047d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	029b      	lsls	r3, r3, #10
 80047d8:	b29b      	uxth	r3, r3
 80047da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e6:	801a      	strh	r2, [r3, #0]
 80047e8:	e01b      	b.n	8004822 <HAL_PCD_EP_DB_Transmit+0x392>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	785b      	ldrb	r3, [r3, #1]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d117      	bne.n	8004822 <HAL_PCD_EP_DB_Transmit+0x392>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004800:	b29b      	uxth	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004806:	4413      	add	r3, r2
 8004808:	643b      	str	r3, [r7, #64]	; 0x40
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	011a      	lsls	r2, r3, #4
 8004810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004812:	4413      	add	r3, r2
 8004814:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800481a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800481c:	b29a      	uxth	r2, r3
 800481e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004820:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6959      	ldr	r1, [r3, #20]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	891a      	ldrh	r2, [r3, #8]
 800482e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004830:	b29b      	uxth	r3, r3
 8004832:	f004 fb35 	bl	8008ea0 <USB_WritePMA>
 8004836:	e1d0      	b.n	8004bda <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004840:	b29b      	uxth	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	3306      	adds	r3, #6
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004860:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800486c:	429a      	cmp	r2, r3
 800486e:	d307      	bcc.n	8004880 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004878:	1ad2      	subs	r2, r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	619a      	str	r2, [r3, #24]
 800487e:	e002      	b.n	8004886 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2200      	movs	r2, #0
 8004884:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f040 80c4 	bne.w	8004a18 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d126      	bne.n	80048e6 <HAL_PCD_EP_DB_Transmit+0x456>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ac:	4413      	add	r3, r2
 80048ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	011a      	lsls	r2, r3, #4
 80048b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b8:	4413      	add	r3, r2
 80048ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048be:	66bb      	str	r3, [r7, #104]	; 0x68
 80048c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048de:	b29a      	uxth	r2, r3
 80048e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	e01a      	b.n	800491c <HAL_PCD_EP_DB_Transmit+0x48c>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	785b      	ldrb	r3, [r3, #1]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d116      	bne.n	800491c <HAL_PCD_EP_DB_Transmit+0x48c>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	677b      	str	r3, [r7, #116]	; 0x74
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004902:	4413      	add	r3, r2
 8004904:	677b      	str	r3, [r7, #116]	; 0x74
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	011a      	lsls	r2, r3, #4
 800490c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490e:	4413      	add	r3, r2
 8004910:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004914:	673b      	str	r3, [r7, #112]	; 0x70
 8004916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004918:	2200      	movs	r2, #0
 800491a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	67bb      	str	r3, [r7, #120]	; 0x78
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	785b      	ldrb	r3, [r3, #1]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d12f      	bne.n	800498a <HAL_PCD_EP_DB_Transmit+0x4fa>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493a:	b29b      	uxth	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004942:	4413      	add	r3, r2
 8004944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	011a      	lsls	r2, r3, #4
 800494e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004952:	4413      	add	r3, r2
 8004954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800495c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004968:	b29a      	uxth	r2, r3
 800496a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	b29b      	uxth	r3, r3
 8004978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800497c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004980:	b29a      	uxth	r2, r3
 8004982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	e017      	b.n	80049ba <HAL_PCD_EP_DB_Transmit+0x52a>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	785b      	ldrb	r3, [r3, #1]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d113      	bne.n	80049ba <HAL_PCD_EP_DB_Transmit+0x52a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a0:	4413      	add	r3, r2
 80049a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	011a      	lsls	r2, r3, #4
 80049aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ac:	4413      	add	r3, r2
 80049ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049b6:	2200      	movs	r2, #0
 80049b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	4619      	mov	r1, r3
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f005 ff7c 	bl	800a8be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f040 8104 	bne.w	8004bda <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	441a      	add	r2, r3
 80049fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8013      	strh	r3, [r2, #0]
 8004a16:	e0e0      	b.n	8004bda <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d121      	bne.n	8004a66 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	441a      	add	r2, r3
 8004a4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	f040 80b4 	bne.w	8004bda <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a7a:	441a      	add	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a88:	441a      	add	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d309      	bcc.n	8004aae <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	6a1a      	ldr	r2, [r3, #32]
 8004aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	621a      	str	r2, [r3, #32]
 8004aac:	e015      	b.n	8004ada <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d107      	bne.n	8004ac6 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004ab6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004aba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004ac4:	e009      	b.n	8004ada <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	667b      	str	r3, [r7, #100]	; 0x64
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d155      	bne.n	8004b94 <HAL_PCD_EP_DB_Transmit+0x704>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afc:	4413      	add	r3, r2
 8004afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	011a      	lsls	r2, r3, #4
 8004b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b08:	4413      	add	r3, r2
 8004b0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d112      	bne.n	8004b3c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b24:	801a      	strh	r2, [r3, #0]
 8004b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b38:	801a      	strh	r2, [r3, #0]
 8004b3a:	e044      	b.n	8004bc6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b3e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b40:	d811      	bhi.n	8004b66 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	657b      	str	r3, [r7, #84]	; 0x54
 8004b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b54:	3301      	adds	r3, #1
 8004b56:	657b      	str	r3, [r7, #84]	; 0x54
 8004b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	029b      	lsls	r3, r3, #10
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	e02f      	b.n	8004bc6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	029b      	lsls	r3, r3, #10
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b90:	801a      	strh	r2, [r3, #0]
 8004b92:	e018      	b.n	8004bc6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d114      	bne.n	8004bc6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004baa:	4413      	add	r3, r2
 8004bac:	667b      	str	r3, [r7, #100]	; 0x64
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	011a      	lsls	r2, r3, #4
 8004bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8004bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	6959      	ldr	r1, [r3, #20]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	895a      	ldrh	r2, [r3, #10]
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f004 f963 	bl	8008ea0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf4:	823b      	strh	r3, [r7, #16]
 8004bf6:	8a3b      	ldrh	r3, [r7, #16]
 8004bf8:	f083 0310 	eor.w	r3, r3, #16
 8004bfc:	823b      	strh	r3, [r7, #16]
 8004bfe:	8a3b      	ldrh	r3, [r7, #16]
 8004c00:	f083 0320 	eor.w	r3, r3, #32
 8004c04:	823b      	strh	r3, [r7, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	441a      	add	r2, r3
 8004c14:	8a3b      	ldrh	r3, [r7, #16]
 8004c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3788      	adds	r7, #136	; 0x88
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	817b      	strh	r3, [r7, #10]
 8004c42:	4613      	mov	r3, r2
 8004c44:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c46:	897b      	ldrh	r3, [r7, #10]
 8004c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c52:	897b      	ldrh	r3, [r7, #10]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e009      	b.n	8004c7e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c6a:	897a      	ldrh	r2, [r7, #10]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004c7e:	893b      	ldrh	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d107      	bne.n	8004c94 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2200      	movs	r2, #0
 8004c88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	80da      	strh	r2, [r3, #6]
 8004c92:	e00b      	b.n	8004cac <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2201      	movs	r2, #1
 8004c98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e272      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8087 	beq.w	8004de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd8:	4b92      	ldr	r3, [pc, #584]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d00c      	beq.n	8004cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ce4:	4b8f      	ldr	r3, [pc, #572]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d112      	bne.n	8004d16 <HAL_RCC_OscConfig+0x5e>
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfc:	d10b      	bne.n	8004d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfe:	4b89      	ldr	r3, [pc, #548]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d06c      	beq.n	8004de4 <HAL_RCC_OscConfig+0x12c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d168      	bne.n	8004de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e24c      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCC_OscConfig+0x76>
 8004d20:	4b80      	ldr	r3, [pc, #512]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a7f      	ldr	r2, [pc, #508]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	e02e      	b.n	8004d8c <HAL_RCC_OscConfig+0xd4>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x98>
 8004d36:	4b7b      	ldr	r3, [pc, #492]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a7a      	ldr	r2, [pc, #488]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b78      	ldr	r3, [pc, #480]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a77      	ldr	r2, [pc, #476]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e01d      	b.n	8004d8c <HAL_RCC_OscConfig+0xd4>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCC_OscConfig+0xbc>
 8004d5a:	4b72      	ldr	r3, [pc, #456]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a71      	ldr	r2, [pc, #452]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	4b6f      	ldr	r3, [pc, #444]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a6e      	ldr	r2, [pc, #440]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	e00b      	b.n	8004d8c <HAL_RCC_OscConfig+0xd4>
 8004d74:	4b6b      	ldr	r3, [pc, #428]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a6a      	ldr	r2, [pc, #424]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	4b68      	ldr	r3, [pc, #416]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a67      	ldr	r2, [pc, #412]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d013      	beq.n	8004dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fc ff80 	bl	8001c98 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fc ff7c 	bl	8001c98 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e200      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dae:	4b5d      	ldr	r3, [pc, #372]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0xe4>
 8004dba:	e014      	b.n	8004de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbc:	f7fc ff6c 	bl	8001c98 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc4:	f7fc ff68 	bl	8001c98 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b64      	cmp	r3, #100	; 0x64
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e1ec      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dd6:	4b53      	ldr	r3, [pc, #332]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x10c>
 8004de2:	e000      	b.n	8004de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d063      	beq.n	8004eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004df2:	4b4c      	ldr	r3, [pc, #304]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dfe:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d11c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x18c>
 8004e0a:	4b46      	ldr	r3, [pc, #280]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d116      	bne.n	8004e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e16:	4b43      	ldr	r3, [pc, #268]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_RCC_OscConfig+0x176>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d001      	beq.n	8004e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e1c0      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2e:	4b3d      	ldr	r3, [pc, #244]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4939      	ldr	r1, [pc, #228]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e42:	e03a      	b.n	8004eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d020      	beq.n	8004e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e4c:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <HAL_RCC_OscConfig+0x270>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fc ff21 	bl	8001c98 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5a:	f7fc ff1d 	bl	8001c98 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e1a1      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6c:	4b2d      	ldr	r3, [pc, #180]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e78:	4b2a      	ldr	r3, [pc, #168]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4927      	ldr	r1, [pc, #156]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	600b      	str	r3, [r1, #0]
 8004e8c:	e015      	b.n	8004eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e8e:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <HAL_RCC_OscConfig+0x270>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fc ff00 	bl	8001c98 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9c:	f7fc fefc 	bl	8001c98 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e180      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eae:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d03a      	beq.n	8004f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d019      	beq.n	8004f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ece:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <HAL_RCC_OscConfig+0x274>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed4:	f7fc fee0 	bl	8001c98 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004edc:	f7fc fedc 	bl	8001c98 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e160      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004efa:	2001      	movs	r0, #1
 8004efc:	f000 fad8 	bl	80054b0 <RCC_Delay>
 8004f00:	e01c      	b.n	8004f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_RCC_OscConfig+0x274>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f08:	f7fc fec6 	bl	8001c98 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0e:	e00f      	b.n	8004f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f10:	f7fc fec2 	bl	8001c98 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d908      	bls.n	8004f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e146      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
 8004f28:	42420000 	.word	0x42420000
 8004f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f30:	4b92      	ldr	r3, [pc, #584]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e9      	bne.n	8004f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80a6 	beq.w	8005096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4e:	4b8b      	ldr	r3, [pc, #556]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10d      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	4b88      	ldr	r3, [pc, #544]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	4a87      	ldr	r2, [pc, #540]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f64:	61d3      	str	r3, [r2, #28]
 8004f66:	4b85      	ldr	r3, [pc, #532]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f76:	4b82      	ldr	r3, [pc, #520]	; (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d118      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f82:	4b7f      	ldr	r3, [pc, #508]	; (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a7e      	ldr	r2, [pc, #504]	; (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8e:	f7fc fe83 	bl	8001c98 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f96:	f7fc fe7f 	bl	8001c98 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b64      	cmp	r3, #100	; 0x64
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e103      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa8:	4b75      	ldr	r3, [pc, #468]	; (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <HAL_RCC_OscConfig+0x312>
 8004fbc:	4b6f      	ldr	r3, [pc, #444]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4a6e      	ldr	r2, [pc, #440]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6213      	str	r3, [r2, #32]
 8004fc8:	e02d      	b.n	8005026 <HAL_RCC_OscConfig+0x36e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x334>
 8004fd2:	4b6a      	ldr	r3, [pc, #424]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	4a69      	ldr	r2, [pc, #420]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6213      	str	r3, [r2, #32]
 8004fde:	4b67      	ldr	r3, [pc, #412]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	4a66      	ldr	r2, [pc, #408]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	f023 0304 	bic.w	r3, r3, #4
 8004fe8:	6213      	str	r3, [r2, #32]
 8004fea:	e01c      	b.n	8005026 <HAL_RCC_OscConfig+0x36e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b05      	cmp	r3, #5
 8004ff2:	d10c      	bne.n	800500e <HAL_RCC_OscConfig+0x356>
 8004ff4:	4b61      	ldr	r3, [pc, #388]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	4a60      	ldr	r2, [pc, #384]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	f043 0304 	orr.w	r3, r3, #4
 8004ffe:	6213      	str	r3, [r2, #32]
 8005000:	4b5e      	ldr	r3, [pc, #376]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	4a5d      	ldr	r2, [pc, #372]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6213      	str	r3, [r2, #32]
 800500c:	e00b      	b.n	8005026 <HAL_RCC_OscConfig+0x36e>
 800500e:	4b5b      	ldr	r3, [pc, #364]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	4a5a      	ldr	r2, [pc, #360]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6213      	str	r3, [r2, #32]
 800501a:	4b58      	ldr	r3, [pc, #352]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	4a57      	ldr	r2, [pc, #348]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d015      	beq.n	800505a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502e:	f7fc fe33 	bl	8001c98 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005034:	e00a      	b.n	800504c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fc fe2f 	bl	8001c98 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f241 3288 	movw	r2, #5000	; 0x1388
 8005044:	4293      	cmp	r3, r2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e0b1      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504c:	4b4b      	ldr	r3, [pc, #300]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ee      	beq.n	8005036 <HAL_RCC_OscConfig+0x37e>
 8005058:	e014      	b.n	8005084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505a:	f7fc fe1d 	bl	8001c98 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005060:	e00a      	b.n	8005078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005062:	f7fc fe19 	bl	8001c98 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e09b      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005078:	4b40      	ldr	r3, [pc, #256]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1ee      	bne.n	8005062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d105      	bne.n	8005096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800508a:	4b3c      	ldr	r3, [pc, #240]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4a3b      	ldr	r2, [pc, #236]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8087 	beq.w	80051ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a0:	4b36      	ldr	r3, [pc, #216]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 030c 	and.w	r3, r3, #12
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d061      	beq.n	8005170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d146      	bne.n	8005142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <HAL_RCC_OscConfig+0x4cc>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ba:	f7fc fded 	bl	8001c98 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c2:	f7fc fde9 	bl	8001c98 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e06d      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d4:	4b29      	ldr	r3, [pc, #164]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f0      	bne.n	80050c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e8:	d108      	bne.n	80050fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050ea:	4b24      	ldr	r3, [pc, #144]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4921      	ldr	r1, [pc, #132]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a19      	ldr	r1, [r3, #32]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	430b      	orrs	r3, r1
 800510e:	491b      	ldr	r1, [pc, #108]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005114:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <HAL_RCC_OscConfig+0x4cc>)
 8005116:	2201      	movs	r2, #1
 8005118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511a:	f7fc fdbd 	bl	8001c98 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005122:	f7fc fdb9 	bl	8001c98 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e03d      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005134:	4b11      	ldr	r3, [pc, #68]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x46a>
 8005140:	e035      	b.n	80051ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b10      	ldr	r3, [pc, #64]	; (8005184 <HAL_RCC_OscConfig+0x4cc>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fc fda6 	bl	8001c98 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005150:	f7fc fda2 	bl	8001c98 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e026      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x498>
 800516e:	e01e      	b.n	80051ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d107      	bne.n	8005188 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e019      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
 800517c:	40021000 	.word	0x40021000
 8005180:	40007000 	.word	0x40007000
 8005184:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_OscConfig+0x500>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	429a      	cmp	r2, r3
 800519a:	d106      	bne.n	80051aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40021000 	.word	0x40021000

080051bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0d0      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d0:	4b6a      	ldr	r3, [pc, #424]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d910      	bls.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051de:	4b67      	ldr	r3, [pc, #412]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 0207 	bic.w	r2, r3, #7
 80051e6:	4965      	ldr	r1, [pc, #404]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b63      	ldr	r3, [pc, #396]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0b8      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005218:	4b59      	ldr	r3, [pc, #356]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4a58      	ldr	r2, [pc, #352]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005230:	4b53      	ldr	r3, [pc, #332]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4a52      	ldr	r2, [pc, #328]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005236:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800523a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523c:	4b50      	ldr	r3, [pc, #320]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	494d      	ldr	r1, [pc, #308]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800524a:	4313      	orrs	r3, r2
 800524c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d040      	beq.n	80052dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005262:	4b47      	ldr	r3, [pc, #284]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d115      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e07f      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d107      	bne.n	800528a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527a:	4b41      	ldr	r3, [pc, #260]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e073      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528a:	4b3d      	ldr	r3, [pc, #244]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e06b      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529a:	4b39      	ldr	r3, [pc, #228]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f023 0203 	bic.w	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4936      	ldr	r1, [pc, #216]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052ac:	f7fc fcf4 	bl	8001c98 <HAL_GetTick>
 80052b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b4:	f7fc fcf0 	bl	8001c98 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e053      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ca:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 020c 	and.w	r2, r3, #12
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	429a      	cmp	r2, r3
 80052da:	d1eb      	bne.n	80052b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d210      	bcs.n	800530c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b24      	ldr	r3, [pc, #144]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 0207 	bic.w	r2, r3, #7
 80052f2:	4922      	ldr	r1, [pc, #136]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fa:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e032      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005318:	4b19      	ldr	r3, [pc, #100]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4916      	ldr	r1, [pc, #88]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005336:	4b12      	ldr	r3, [pc, #72]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	490e      	ldr	r1, [pc, #56]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	4313      	orrs	r3, r2
 8005348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800534a:	f000 f821 	bl	8005390 <HAL_RCC_GetSysClockFreq>
 800534e:	4602      	mov	r2, r0
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	490a      	ldr	r1, [pc, #40]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800535c:	5ccb      	ldrb	r3, [r1, r3]
 800535e:	fa22 f303 	lsr.w	r3, r2, r3
 8005362:	4a09      	ldr	r2, [pc, #36]	; (8005388 <HAL_RCC_ClockConfig+0x1cc>)
 8005364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005366:	4b09      	ldr	r3, [pc, #36]	; (800538c <HAL_RCC_ClockConfig+0x1d0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fc fc52 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40022000 	.word	0x40022000
 8005380:	40021000 	.word	0x40021000
 8005384:	0800c3d8 	.word	0x0800c3d8
 8005388:	2000000c 	.word	0x2000000c
 800538c:	20000010 	.word	0x20000010

08005390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005390:	b490      	push	{r4, r7}
 8005392:	b08a      	sub	sp, #40	; 0x28
 8005394:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005396:	4b29      	ldr	r3, [pc, #164]	; (800543c <HAL_RCC_GetSysClockFreq+0xac>)
 8005398:	1d3c      	adds	r4, r7, #4
 800539a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800539c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80053a0:	f240 2301 	movw	r3, #513	; 0x201
 80053a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	2300      	movs	r3, #0
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053ba:	4b21      	ldr	r3, [pc, #132]	; (8005440 <HAL_RCC_GetSysClockFreq+0xb0>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 030c 	and.w	r3, r3, #12
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d002      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0x40>
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d003      	beq.n	80053d6 <HAL_RCC_GetSysClockFreq+0x46>
 80053ce:	e02b      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053d0:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053d2:	623b      	str	r3, [r7, #32]
      break;
 80053d4:	e02b      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	0c9b      	lsrs	r3, r3, #18
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	3328      	adds	r3, #40	; 0x28
 80053e0:	443b      	add	r3, r7
 80053e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d012      	beq.n	8005418 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053f2:	4b13      	ldr	r3, [pc, #76]	; (8005440 <HAL_RCC_GetSysClockFreq+0xb0>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	0c5b      	lsrs	r3, r3, #17
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	3328      	adds	r3, #40	; 0x28
 80053fe:	443b      	add	r3, r7
 8005400:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005404:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	4a0e      	ldr	r2, [pc, #56]	; (8005444 <HAL_RCC_GetSysClockFreq+0xb4>)
 800540a:	fb03 f202 	mul.w	r2, r3, r2
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
 8005416:	e004      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	4a0b      	ldr	r2, [pc, #44]	; (8005448 <HAL_RCC_GetSysClockFreq+0xb8>)
 800541c:	fb02 f303 	mul.w	r3, r2, r3
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	623b      	str	r3, [r7, #32]
      break;
 8005426:	e002      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HAL_RCC_GetSysClockFreq+0xb4>)
 800542a:	623b      	str	r3, [r7, #32]
      break;
 800542c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800542e:	6a3b      	ldr	r3, [r7, #32]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3728      	adds	r7, #40	; 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	bc90      	pop	{r4, r7}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	0800c380 	.word	0x0800c380
 8005440:	40021000 	.word	0x40021000
 8005444:	007a1200 	.word	0x007a1200
 8005448:	003d0900 	.word	0x003d0900

0800544c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005450:	4b02      	ldr	r3, [pc, #8]	; (800545c <HAL_RCC_GetHCLKFreq+0x10>)
 8005452:	681b      	ldr	r3, [r3, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	2000000c 	.word	0x2000000c

08005460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005464:	f7ff fff2 	bl	800544c <HAL_RCC_GetHCLKFreq>
 8005468:	4602      	mov	r2, r0
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	4903      	ldr	r1, [pc, #12]	; (8005484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005476:	5ccb      	ldrb	r3, [r1, r3]
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40021000 	.word	0x40021000
 8005484:	0800c3e8 	.word	0x0800c3e8

08005488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800548c:	f7ff ffde 	bl	800544c <HAL_RCC_GetHCLKFreq>
 8005490:	4602      	mov	r2, r0
 8005492:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	0adb      	lsrs	r3, r3, #11
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	4903      	ldr	r1, [pc, #12]	; (80054ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800549e:	5ccb      	ldrb	r3, [r1, r3]
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40021000 	.word	0x40021000
 80054ac:	0800c3e8 	.word	0x0800c3e8

080054b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <RCC_Delay+0x34>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a0a      	ldr	r2, [pc, #40]	; (80054e8 <RCC_Delay+0x38>)
 80054be:	fba2 2303 	umull	r2, r3, r2, r3
 80054c2:	0a5b      	lsrs	r3, r3, #9
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054cc:	bf00      	nop
  }
  while (Delay --);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1e5a      	subs	r2, r3, #1
 80054d2:	60fa      	str	r2, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f9      	bne.n	80054cc <RCC_Delay+0x1c>
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr
 80054e4:	2000000c 	.word	0x2000000c
 80054e8:	10624dd3 	.word	0x10624dd3

080054ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d07d      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005508:	2300      	movs	r3, #0
 800550a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800550c:	4b4f      	ldr	r3, [pc, #316]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10d      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005518:	4b4c      	ldr	r3, [pc, #304]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	4a4b      	ldr	r2, [pc, #300]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800551e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005522:	61d3      	str	r3, [r2, #28]
 8005524:	4b49      	ldr	r3, [pc, #292]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005530:	2301      	movs	r3, #1
 8005532:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005534:	4b46      	ldr	r3, [pc, #280]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d118      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005540:	4b43      	ldr	r3, [pc, #268]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a42      	ldr	r2, [pc, #264]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800554c:	f7fc fba4 	bl	8001c98 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005552:	e008      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005554:	f7fc fba0 	bl	8001c98 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	; 0x64
 8005560:	d901      	bls.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e06d      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005566:	4b3a      	ldr	r3, [pc, #232]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005572:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d02e      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	429a      	cmp	r2, r3
 800558e:	d027      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005590:	4b2e      	ldr	r3, [pc, #184]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005598:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800559a:	4b2e      	ldr	r3, [pc, #184]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800559c:	2201      	movs	r2, #1
 800559e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055a0:	4b2c      	ldr	r3, [pc, #176]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055a6:	4a29      	ldr	r2, [pc, #164]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d014      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fc fb6f 	bl	8001c98 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055bc:	e00a      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fc fb6b 	bl	8001c98 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e036      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d4:	4b1d      	ldr	r3, [pc, #116]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ee      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	4917      	ldr	r1, [pc, #92]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d105      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f8:	4b14      	ldr	r3, [pc, #80]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	4a13      	ldr	r2, [pc, #76]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005602:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005610:	4b0e      	ldr	r3, [pc, #56]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	490b      	ldr	r1, [pc, #44]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561e:	4313      	orrs	r3, r2
 8005620:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800562e:	4b07      	ldr	r3, [pc, #28]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	4904      	ldr	r1, [pc, #16]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563c:	4313      	orrs	r3, r2
 800563e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40021000 	.word	0x40021000
 8005650:	40007000 	.word	0x40007000
 8005654:	42420440 	.word	0x42420440

08005658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e076      	b.n	8005758 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d108      	bne.n	8005684 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800567a:	d009      	beq.n	8005690 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	61da      	str	r2, [r3, #28]
 8005682:	e005      	b.n	8005690 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fc f890 	bl	80017d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005714:	ea42 0103 	orr.w	r1, r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	0c1a      	lsrs	r2, r3, #16
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f002 0204 	and.w	r2, r2, #4
 8005736:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005746:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577c:	d112      	bne.n	80057a4 <HAL_SPI_Receive+0x44>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10e      	bne.n	80057a4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2204      	movs	r2, #4
 800578a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800578e:	88fa      	ldrh	r2, [r7, #6]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	4613      	mov	r3, r2
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f8f1 	bl	8005982 <HAL_SPI_TransmitReceive>
 80057a0:	4603      	mov	r3, r0
 80057a2:	e0ea      	b.n	800597a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_SPI_Receive+0x52>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e0e3      	b.n	800597a <HAL_SPI_Receive+0x21a>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ba:	f7fc fa6d 	bl	8001c98 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d002      	beq.n	80057d2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057cc:	2302      	movs	r3, #2
 80057ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057d0:	e0ca      	b.n	8005968 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_Receive+0x7e>
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d102      	bne.n	80057e4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057e2:	e0c1      	b.n	8005968 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2204      	movs	r2, #4
 80057e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	88fa      	ldrh	r2, [r7, #6]
 80057fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582a:	d10f      	bne.n	800584c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800584a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d007      	beq.n	800586a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005868:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d162      	bne.n	8005938 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005872:	e02e      	b.n	80058d2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b01      	cmp	r3, #1
 8005880:	d115      	bne.n	80058ae <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f103 020c 	add.w	r2, r3, #12
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	7812      	ldrb	r2, [r2, #0]
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ac:	e011      	b.n	80058d2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ae:	f7fc f9f3 	bl	8001c98 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d803      	bhi.n	80058c6 <HAL_SPI_Receive+0x166>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d102      	bne.n	80058cc <HAL_SPI_Receive+0x16c>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058d0:	e04a      	b.n	8005968 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1cb      	bne.n	8005874 <HAL_SPI_Receive+0x114>
 80058dc:	e031      	b.n	8005942 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d113      	bne.n	8005914 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	b292      	uxth	r2, r2
 80058f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	1c9a      	adds	r2, r3, #2
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005912:	e011      	b.n	8005938 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005914:	f7fc f9c0 	bl	8001c98 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d803      	bhi.n	800592c <HAL_SPI_Receive+0x1cc>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d102      	bne.n	8005932 <HAL_SPI_Receive+0x1d2>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d102      	bne.n	8005938 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005936:	e017      	b.n	8005968 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1cd      	bne.n	80058de <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 fb4a 	bl	8005fe0 <SPI_EndRxTransaction>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	75fb      	strb	r3, [r7, #23]
 8005964:	e000      	b.n	8005968 <HAL_SPI_Receive+0x208>
  }

error :
 8005966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005978:	7dfb      	ldrb	r3, [r7, #23]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b08c      	sub	sp, #48	; 0x30
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005990:	2301      	movs	r3, #1
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x26>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e18a      	b.n	8005cbe <HAL_SPI_TransmitReceive+0x33c>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059b0:	f7fc f972 	bl	8001c98 <HAL_GetTick>
 80059b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059c6:	887b      	ldrh	r3, [r7, #2]
 80059c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d00f      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0x70>
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059d8:	d107      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x68>
 80059e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d003      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059ea:	2302      	movs	r3, #2
 80059ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059f0:	e15b      	b.n	8005caa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_SPI_TransmitReceive+0x82>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <HAL_SPI_TransmitReceive+0x82>
 80059fe:	887b      	ldrh	r3, [r7, #2]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a0a:	e14e      	b.n	8005caa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d003      	beq.n	8005a20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2205      	movs	r2, #5
 8005a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	887a      	ldrh	r2, [r7, #2]
 8005a30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	887a      	ldrh	r2, [r7, #2]
 8005a36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	887a      	ldrh	r2, [r7, #2]
 8005a42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	887a      	ldrh	r2, [r7, #2]
 8005a48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d007      	beq.n	8005a74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7c:	d178      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_SPI_TransmitReceive+0x10a>
 8005a86:	8b7b      	ldrh	r3, [r7, #26]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d166      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	881a      	ldrh	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	1c9a      	adds	r2, r3, #2
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ab0:	e053      	b.n	8005b5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d11b      	bne.n	8005af8 <HAL_SPI_TransmitReceive+0x176>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d016      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x176>
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d113      	bne.n	8005af8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	881a      	ldrh	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	1c9a      	adds	r2, r3, #2
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d119      	bne.n	8005b3a <HAL_SPI_TransmitReceive+0x1b8>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d014      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	b292      	uxth	r2, r2
 8005b1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	1c9a      	adds	r2, r3, #2
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b36:	2301      	movs	r3, #1
 8005b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b3a:	f7fc f8ad 	bl	8001c98 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d807      	bhi.n	8005b5a <HAL_SPI_TransmitReceive+0x1d8>
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d003      	beq.n	8005b5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b58:	e0a7      	b.n	8005caa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1a6      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x130>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1a1      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x130>
 8005b6e:	e07c      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <HAL_SPI_TransmitReceive+0x1fc>
 8005b78:	8b7b      	ldrh	r3, [r7, #26]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d16b      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	7812      	ldrb	r2, [r2, #0]
 8005b8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ba4:	e057      	b.n	8005c56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d11c      	bne.n	8005bee <HAL_SPI_TransmitReceive+0x26c>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d017      	beq.n	8005bee <HAL_SPI_TransmitReceive+0x26c>
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d114      	bne.n	8005bee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d119      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x2ae>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d014      	beq.n	8005c30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c30:	f7fc f832 	bl	8001c98 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d803      	bhi.n	8005c48 <HAL_SPI_TransmitReceive+0x2c6>
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d102      	bne.n	8005c4e <HAL_SPI_TransmitReceive+0x2cc>
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c54:	e029      	b.n	8005caa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1a2      	bne.n	8005ba6 <HAL_SPI_TransmitReceive+0x224>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d19d      	bne.n	8005ba6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fa08 	bl	8006084 <SPI_EndRxTxTransaction>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c86:	e010      	b.n	8005caa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	e000      	b.n	8005caa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ca8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3730      	adds	r7, #48	; 0x30
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	099b      	lsrs	r3, r3, #6
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10f      	bne.n	8005d0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	099b      	lsrs	r3, r3, #6
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	4798      	blx	r3
    return;
 8005d0a:	e0be      	b.n	8005e8a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <HAL_SPI_IRQHandler+0x66>
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	09db      	lsrs	r3, r3, #7
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4798      	blx	r3
    return;
 8005d2c:	e0ad      	b.n	8005e8a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <HAL_SPI_IRQHandler+0x80>
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	099b      	lsrs	r3, r3, #6
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80a1 	beq.w	8005e8a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 809a 	beq.w	8005e8a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	099b      	lsrs	r3, r3, #6
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d023      	beq.n	8005daa <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d011      	beq.n	8005d92 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d72:	f043 0204 	orr.w	r2, r3, #4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	e00b      	b.n	8005daa <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d92:	2300      	movs	r3, #0
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	693b      	ldr	r3, [r7, #16]
        return;
 8005da8:	e06f      	b.n	8005e8a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d014      	beq.n	8005de0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dba:	f043 0201 	orr.w	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d04f      	beq.n	8005e88 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005df6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d104      	bne.n	8005e14 <HAL_SPI_IRQHandler+0x14c>
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d034      	beq.n	8005e7e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0203 	bic.w	r2, r2, #3
 8005e22:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d011      	beq.n	8005e50 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e30:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <HAL_SPI_IRQHandler+0x1c8>)
 8005e32:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fc fcef 	bl	800281c <HAL_DMA_Abort_IT>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d016      	beq.n	8005e86 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5c:	4a0c      	ldr	r2, [pc, #48]	; (8005e90 <HAL_SPI_IRQHandler+0x1c8>)
 8005e5e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fc fcd9 	bl	800281c <HAL_DMA_Abort_IT>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005e7c:	e003      	b.n	8005e86 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f808 	bl	8005e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e84:	e000      	b.n	8005e88 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005e86:	bf00      	nop
    return;
 8005e88:	bf00      	nop
  }
}
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	08005ea7 	.word	0x08005ea7

08005e94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr

08005ea6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff ffe7 	bl	8005e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ee0:	f7fb feda 	bl	8001c98 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	4413      	add	r3, r2
 8005eee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ef0:	f7fb fed2 	bl	8001c98 <HAL_GetTick>
 8005ef4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ef6:	4b39      	ldr	r3, [pc, #228]	; (8005fdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	015b      	lsls	r3, r3, #5
 8005efc:	0d1b      	lsrs	r3, r3, #20
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f06:	e054      	b.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d050      	beq.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f10:	f7fb fec2 	bl	8001c98 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d902      	bls.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d13d      	bne.n	8005fa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f3e:	d111      	bne.n	8005f64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f48:	d004      	beq.n	8005f54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f52:	d107      	bne.n	8005f64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6c:	d10f      	bne.n	8005f8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e017      	b.n	8005fd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	bf0c      	ite	eq
 8005fc2:	2301      	moveq	r3, #1
 8005fc4:	2300      	movne	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d19b      	bne.n	8005f08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	2000000c 	.word	0x2000000c

08005fe0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff4:	d111      	bne.n	800601a <SPI_EndRxTransaction+0x3a>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffe:	d004      	beq.n	800600a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d107      	bne.n	800601a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006018:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006022:	d117      	bne.n	8006054 <SPI_EndRxTransaction+0x74>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602c:	d112      	bne.n	8006054 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2200      	movs	r2, #0
 8006036:	2101      	movs	r1, #1
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff ff49 	bl	8005ed0 <SPI_WaitFlagStateUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01a      	beq.n	800607a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006048:	f043 0220 	orr.w	r2, r3, #32
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e013      	b.n	800607c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2200      	movs	r2, #0
 800605c:	2180      	movs	r1, #128	; 0x80
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff ff36 	bl	8005ed0 <SPI_WaitFlagStateUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606e:	f043 0220 	orr.w	r2, r3, #32
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e000      	b.n	800607c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2200      	movs	r2, #0
 8006098:	2180      	movs	r1, #128	; 0x80
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f7ff ff18 	bl	8005ed0 <SPI_WaitFlagStateUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d007      	beq.n	80060b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	f043 0220 	orr.w	r2, r3, #32
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e000      	b.n	80060b8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e03f      	b.n	8006152 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fb fc00 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2224      	movs	r2, #36	; 0x24
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f905 	bl	8006314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b08a      	sub	sp, #40	; 0x28
 800615e:	af02      	add	r7, sp, #8
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	603b      	str	r3, [r7, #0]
 8006166:	4613      	mov	r3, r2
 8006168:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b20      	cmp	r3, #32
 8006178:	d17c      	bne.n	8006274 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_UART_Transmit+0x2c>
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e075      	b.n	8006276 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_UART_Transmit+0x3e>
 8006194:	2302      	movs	r3, #2
 8006196:	e06e      	b.n	8006276 <HAL_UART_Transmit+0x11c>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2221      	movs	r2, #33	; 0x21
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061ae:	f7fb fd73 	bl	8001c98 <HAL_GetTick>
 80061b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	88fa      	ldrh	r2, [r7, #6]
 80061be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d108      	bne.n	80061dc <HAL_UART_Transmit+0x82>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	e003      	b.n	80061e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061ec:	e02a      	b.n	8006244 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	2180      	movs	r1, #128	; 0x80
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f840 	bl	800627e <UART_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e036      	b.n	8006276 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800621c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	3302      	adds	r3, #2
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	e007      	b.n	8006236 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	781a      	ldrb	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	3301      	adds	r3, #1
 8006234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1cf      	bne.n	80061ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2200      	movs	r2, #0
 8006256:	2140      	movs	r1, #64	; 0x40
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f810 	bl	800627e <UART_WaitOnFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e006      	b.n	8006276 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	e000      	b.n	8006276 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628e:	e02c      	b.n	80062ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d028      	beq.n	80062ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <UART_WaitOnFlagUntilTimeout+0x30>
 800629e:	f7fb fcfb 	bl	8001c98 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d21d      	bcs.n	80062ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e00f      	b.n	800630a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4013      	ands	r3, r2
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	bf0c      	ite	eq
 80062fa:	2301      	moveq	r3, #1
 80062fc:	2300      	movne	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	429a      	cmp	r2, r3
 8006306:	d0c3      	beq.n	8006290 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800634e:	f023 030c 	bic.w	r3, r3, #12
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	430b      	orrs	r3, r1
 800635a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a2c      	ldr	r2, [pc, #176]	; (8006428 <UART_SetConfig+0x114>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d103      	bne.n	8006384 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7ff f884 	bl	8005488 <HAL_RCC_GetPCLK2Freq>
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	e002      	b.n	800638a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006384:	f7ff f86c 	bl	8005460 <HAL_RCC_GetPCLK1Freq>
 8006388:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	009a      	lsls	r2, r3, #2
 8006394:	441a      	add	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a0:	4a22      	ldr	r2, [pc, #136]	; (800642c <UART_SetConfig+0x118>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	0119      	lsls	r1, r3, #4
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	009a      	lsls	r2, r3, #2
 80063b4:	441a      	add	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80063c0:	4b1a      	ldr	r3, [pc, #104]	; (800642c <UART_SetConfig+0x118>)
 80063c2:	fba3 0302 	umull	r0, r3, r3, r2
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	2064      	movs	r0, #100	; 0x64
 80063ca:	fb00 f303 	mul.w	r3, r0, r3
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	3332      	adds	r3, #50	; 0x32
 80063d4:	4a15      	ldr	r2, [pc, #84]	; (800642c <UART_SetConfig+0x118>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e0:	4419      	add	r1, r3
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	009a      	lsls	r2, r3, #2
 80063ec:	441a      	add	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063f8:	4b0c      	ldr	r3, [pc, #48]	; (800642c <UART_SetConfig+0x118>)
 80063fa:	fba3 0302 	umull	r0, r3, r3, r2
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	2064      	movs	r0, #100	; 0x64
 8006402:	fb00 f303 	mul.w	r3, r0, r3
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	3332      	adds	r3, #50	; 0x32
 800640c:	4a07      	ldr	r2, [pc, #28]	; (800642c <UART_SetConfig+0x118>)
 800640e:	fba2 2303 	umull	r2, r3, r2, r3
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	f003 020f 	and.w	r2, r3, #15
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	440a      	add	r2, r1
 800641e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40013800 	.word	0x40013800
 800642c:	51eb851f 	.word	0x51eb851f

08006430 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006430:	b084      	sub	sp, #16
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	f107 0014 	add.w	r0, r7, #20
 800643e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	bc80      	pop	{r7}
 800644c:	b004      	add	sp, #16
 800644e:	4770      	bx	lr

08006450 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006460:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006464:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006484:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006488:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	b29b      	uxth	r3, r3
 8006496:	43db      	mvns	r3, r3
 8006498:	b29b      	uxth	r3, r3
 800649a:	4013      	ands	r3, r2
 800649c:	b29a      	uxth	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064c8:	b084      	sub	sp, #16
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	f107 0014 	add.w	r0, r7, #20
 80064d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	b004      	add	sp, #16
 8006506:	4770      	bx	lr

08006508 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006508:	b480      	push	{r7}
 800650a:	b09b      	sub	sp, #108	; 0x6c
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800652a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	78db      	ldrb	r3, [r3, #3]
 8006536:	2b03      	cmp	r3, #3
 8006538:	d81f      	bhi.n	800657a <USB_ActivateEndpoint+0x72>
 800653a:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <USB_ActivateEndpoint+0x38>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006551 	.word	0x08006551
 8006544:	0800656d 	.word	0x0800656d
 8006548:	08006583 	.word	0x08006583
 800654c:	0800655f 	.word	0x0800655f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006550:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006558:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800655c:	e012      	b.n	8006584 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800655e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006562:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006566:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800656a:	e00b      	b.n	8006584 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800656c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006574:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006578:	e004      	b.n	8006584 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006580:	e000      	b.n	8006584 <USB_ActivateEndpoint+0x7c>
      break;
 8006582:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	441a      	add	r2, r3
 800658e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065bc:	b29a      	uxth	r2, r3
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	441a      	add	r2, r3
 80065d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80065d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	7b1b      	ldrb	r3, [r3, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 8149 	bne.w	8006888 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8084 	beq.w	8006708 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	4413      	add	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	011a      	lsls	r2, r3, #4
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	88db      	ldrh	r3, [r3, #6]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	b29b      	uxth	r3, r3
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	81fb      	strh	r3, [r7, #14]
 8006642:	89fb      	ldrh	r3, [r7, #14]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01b      	beq.n	8006684 <USB_ActivateEndpoint+0x17c>
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	81bb      	strh	r3, [r7, #12]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	441a      	add	r2, r3
 800666e:	89bb      	ldrh	r3, [r7, #12]
 8006670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006680:	b29b      	uxth	r3, r3
 8006682:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	78db      	ldrb	r3, [r3, #3]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d020      	beq.n	80066ce <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a2:	813b      	strh	r3, [r7, #8]
 80066a4:	893b      	ldrh	r3, [r7, #8]
 80066a6:	f083 0320 	eor.w	r3, r3, #32
 80066aa:	813b      	strh	r3, [r7, #8]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	893b      	ldrh	r3, [r7, #8]
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]
 80066cc:	e27f      	b.n	8006bce <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e4:	817b      	strh	r3, [r7, #10]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	897b      	ldrh	r3, [r7, #10]
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]
 8006706:	e262      	b.n	8006bce <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006712:	b29b      	uxth	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	4413      	add	r3, r2
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	011a      	lsls	r2, r3, #4
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	4413      	add	r3, r2
 8006726:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	88db      	ldrh	r3, [r3, #6]
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	b29b      	uxth	r3, r3
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006746:	b29b      	uxth	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	4413      	add	r3, r2
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	011a      	lsls	r2, r3, #4
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	4413      	add	r3, r2
 800675a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800675e:	623b      	str	r3, [r7, #32]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d112      	bne.n	800678e <USB_ActivateEndpoint+0x286>
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006772:	b29a      	uxth	r2, r3
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006786:	b29a      	uxth	r2, r3
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	801a      	strh	r2, [r3, #0]
 800678c:	e02f      	b.n	80067ee <USB_ActivateEndpoint+0x2e6>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b3e      	cmp	r3, #62	; 0x3e
 8006794:	d813      	bhi.n	80067be <USB_ActivateEndpoint+0x2b6>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	663b      	str	r3, [r7, #96]	; 0x60
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <USB_ActivateEndpoint+0x2a8>
 80067aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067ac:	3301      	adds	r3, #1
 80067ae:	663b      	str	r3, [r7, #96]	; 0x60
 80067b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	029b      	lsls	r3, r3, #10
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	e017      	b.n	80067ee <USB_ActivateEndpoint+0x2e6>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	663b      	str	r3, [r7, #96]	; 0x60
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d102      	bne.n	80067d8 <USB_ActivateEndpoint+0x2d0>
 80067d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d4:	3b01      	subs	r3, #1
 80067d6:	663b      	str	r3, [r7, #96]	; 0x60
 80067d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067da:	b29b      	uxth	r3, r3
 80067dc:	029b      	lsls	r3, r3, #10
 80067de:	b29b      	uxth	r3, r3
 80067e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	83fb      	strh	r3, [r7, #30]
 80067fc:	8bfb      	ldrh	r3, [r7, #30]
 80067fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d01b      	beq.n	800683e <USB_ActivateEndpoint+0x336>
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681c:	83bb      	strh	r3, [r7, #28]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	8bbb      	ldrh	r3, [r7, #28]
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	837b      	strh	r3, [r7, #26]
 8006856:	8b7b      	ldrh	r3, [r7, #26]
 8006858:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800685c:	837b      	strh	r3, [r7, #26]
 800685e:	8b7b      	ldrh	r3, [r7, #26]
 8006860:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006864:	837b      	strh	r3, [r7, #26]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	441a      	add	r2, r3
 8006870:	8b7b      	ldrh	r3, [r7, #26]
 8006872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006882:	b29b      	uxth	r3, r3
 8006884:	8013      	strh	r3, [r2, #0]
 8006886:	e1a2      	b.n	8006bce <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	441a      	add	r2, r3
 80068ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80068b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068d4:	4413      	add	r3, r2
 80068d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	011a      	lsls	r2, r3, #4
 80068de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068e6:	657b      	str	r3, [r7, #84]	; 0x54
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	891b      	ldrh	r3, [r3, #8]
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	653b      	str	r3, [r7, #80]	; 0x50
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006902:	b29b      	uxth	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006908:	4413      	add	r3, r2
 800690a:	653b      	str	r3, [r7, #80]	; 0x50
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	011a      	lsls	r2, r3, #4
 8006912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006914:	4413      	add	r3, r2
 8006916:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	895b      	ldrh	r3, [r3, #10]
 8006920:	085b      	lsrs	r3, r3, #1
 8006922:	b29b      	uxth	r3, r3
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	785b      	ldrb	r3, [r3, #1]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f040 8091 	bne.w	8006a58 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006944:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01b      	beq.n	8006986 <USB_ActivateEndpoint+0x47e>
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800697e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006982:	b29b      	uxth	r3, r3
 8006984:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	873b      	strh	r3, [r7, #56]	; 0x38
 8006994:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d01b      	beq.n	80069d6 <USB_ActivateEndpoint+0x4ce>
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	441a      	add	r2, r3
 80069c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	441a      	add	r2, r3
 8006a08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a34:	867b      	strh	r3, [r7, #50]	; 0x32
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8013      	strh	r3, [r2, #0]
 8006a56:	e0ba      	b.n	8006bce <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01d      	beq.n	8006ab0 <USB_ActivateEndpoint+0x5a8>
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	441a      	add	r2, r3
 8006a98:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006ac0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01d      	beq.n	8006b08 <USB_ActivateEndpoint+0x600>
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	441a      	add	r2, r3
 8006af0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	78db      	ldrb	r3, [r3, #3]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d024      	beq.n	8006b5a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b2e:	f083 0320 	eor.w	r3, r3, #32
 8006b32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	441a      	add	r2, r3
 8006b40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	8013      	strh	r3, [r2, #0]
 8006b58:	e01d      	b.n	8006b96 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	441a      	add	r2, r3
 8006b7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	441a      	add	r2, r3
 8006bb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006bce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	376c      	adds	r7, #108	; 0x6c
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr

08006bdc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b08d      	sub	sp, #52	; 0x34
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	7b1b      	ldrb	r3, [r3, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f040 808e 	bne.w	8006d0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d044      	beq.n	8006c82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	81bb      	strh	r3, [r7, #12]
 8006c06:	89bb      	ldrh	r3, [r7, #12]
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01b      	beq.n	8006c48 <USB_DeactivateEndpoint+0x6c>
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c26:	817b      	strh	r3, [r7, #10]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	441a      	add	r2, r3
 8006c32:	897b      	ldrh	r3, [r7, #10]
 8006c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5e:	813b      	strh	r3, [r7, #8]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	893b      	ldrh	r3, [r7, #8]
 8006c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	8013      	strh	r3, [r2, #0]
 8006c80:	e192      	b.n	8006fa8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	827b      	strh	r3, [r7, #18]
 8006c90:	8a7b      	ldrh	r3, [r7, #18]
 8006c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01b      	beq.n	8006cd2 <USB_DeactivateEndpoint+0xf6>
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb0:	823b      	strh	r3, [r7, #16]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	441a      	add	r2, r3
 8006cbc:	8a3b      	ldrh	r3, [r7, #16]
 8006cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce8:	81fb      	strh	r3, [r7, #14]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	441a      	add	r2, r3
 8006cf4:	89fb      	ldrh	r3, [r7, #14]
 8006cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	8013      	strh	r3, [r2, #0]
 8006d0a:	e14d      	b.n	8006fa8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f040 80a5 	bne.w	8006e60 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	843b      	strh	r3, [r7, #32]
 8006d24:	8c3b      	ldrh	r3, [r7, #32]
 8006d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01b      	beq.n	8006d66 <USB_DeactivateEndpoint+0x18a>
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d44:	83fb      	strh	r3, [r7, #30]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	441a      	add	r2, r3
 8006d50:	8bfb      	ldrh	r3, [r7, #30]
 8006d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	83bb      	strh	r3, [r7, #28]
 8006d74:	8bbb      	ldrh	r3, [r7, #28]
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01b      	beq.n	8006db6 <USB_DeactivateEndpoint+0x1da>
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d94:	837b      	strh	r3, [r7, #26]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	441a      	add	r2, r3
 8006da0:	8b7b      	ldrh	r3, [r7, #26]
 8006da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dcc:	833b      	strh	r3, [r7, #24]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	441a      	add	r2, r3
 8006dd8:	8b3b      	ldrh	r3, [r7, #24]
 8006dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e04:	82fb      	strh	r3, [r7, #22]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	441a      	add	r2, r3
 8006e10:	8afb      	ldrh	r3, [r7, #22]
 8006e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e3c:	82bb      	strh	r3, [r7, #20]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	441a      	add	r2, r3
 8006e48:	8abb      	ldrh	r3, [r7, #20]
 8006e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	8013      	strh	r3, [r2, #0]
 8006e5e:	e0a3      	b.n	8006fa8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01b      	beq.n	8006eb0 <USB_DeactivateEndpoint+0x2d4>
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	441a      	add	r2, r3
 8006e9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ebe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01b      	beq.n	8006f00 <USB_DeactivateEndpoint+0x324>
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ede:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	441a      	add	r2, r3
 8006eea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	441a      	add	r2, r3
 8006f22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	441a      	add	r2, r3
 8006f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f86:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	441a      	add	r2, r3
 8006f92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3734      	adds	r7, #52	; 0x34
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr

08006fb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b0cc      	sub	sp, #304	; 0x130
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fc2:	6018      	str	r0, [r3, #0]
 8006fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fcc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	f041 817d 	bne.w	80082da <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d908      	bls.n	800700e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800700c:	e007      	b.n	800701e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800700e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800701e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	7b1b      	ldrb	r3, [r3, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d152      	bne.n	80070d4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800702e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6959      	ldr	r1, [r3, #20]
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	88da      	ldrh	r2, [r3, #6]
 8007046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704a:	b29b      	uxth	r3, r3
 800704c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007050:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007054:	6800      	ldr	r0, [r0, #0]
 8007056:	f001 ff23 	bl	8008ea0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800705a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007062:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007066:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800706a:	6812      	ldr	r2, [r2, #0]
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707c:	b29b      	uxth	r3, r3
 800707e:	4619      	mov	r1, r3
 8007080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007084:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007088:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800708c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007090:	6812      	ldr	r2, [r2, #0]
 8007092:	440a      	add	r2, r1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	011a      	lsls	r2, r3, #4
 80070a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4413      	add	r3, r2
 80070b0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80070b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	801a      	strh	r2, [r3, #0]
 80070d0:	f001 b8b5 	b.w	800823e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80070d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	f040 84c6 	bne.w	8007a72 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80070e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6a1a      	ldr	r2, [r3, #32]
 80070f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	429a      	cmp	r2, r3
 8007100:	f240 8443 	bls.w	800798a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007108:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800712e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007132:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	441a      	add	r2, r3
 8007148:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800714c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007154:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800715c:	b29b      	uxth	r3, r3
 800715e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6a1a      	ldr	r2, [r3, #32]
 800716c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007170:	1ad2      	subs	r2, r2, r3
 8007172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800717e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 823e 	beq.w	8007622 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	785b      	ldrb	r3, [r3, #1]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f040 809a 	bne.w	8007300 <USB_EPStartXfer+0x34c>
 80071cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071d8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80071dc:	6812      	ldr	r2, [r2, #0]
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	4619      	mov	r1, r3
 80071f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071fe:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	440a      	add	r2, r1
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	011a      	lsls	r2, r3, #4
 8007216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4413      	add	r3, r2
 8007222:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d122      	bne.n	800727e <USB_EPStartXfer+0x2ca>
 8007238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800724a:	b29a      	uxth	r2, r3
 800724c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007250:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	801a      	strh	r2, [r3, #0]
 8007258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726e:	b29a      	uxth	r2, r3
 8007270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007274:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	e079      	b.n	8007372 <USB_EPStartXfer+0x3be>
 800727e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007282:	2b3e      	cmp	r3, #62	; 0x3e
 8007284:	d81b      	bhi.n	80072be <USB_EPStartXfer+0x30a>
 8007286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728a:	085b      	lsrs	r3, r3, #1
 800728c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <USB_EPStartXfer+0x2f2>
 800729c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072a0:	3301      	adds	r3, #1
 80072a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	029b      	lsls	r3, r3, #10
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	e059      	b.n	8007372 <USB_EPStartXfer+0x3be>
 80072be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072cc:	f003 031f 	and.w	r3, r3, #31
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d104      	bne.n	80072de <USB_EPStartXfer+0x32a>
 80072d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072d8:	3b01      	subs	r3, #1
 80072da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	029b      	lsls	r3, r3, #10
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	801a      	strh	r2, [r3, #0]
 80072fe:	e038      	b.n	8007372 <USB_EPStartXfer+0x3be>
 8007300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d130      	bne.n	8007372 <USB_EPStartXfer+0x3be>
 8007310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007314:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731e:	b29b      	uxth	r3, r3
 8007320:	4619      	mov	r1, r3
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800732a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800732e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007332:	6812      	ldr	r2, [r2, #0]
 8007334:	440a      	add	r2, r1
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	011a      	lsls	r2, r3, #4
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4413      	add	r3, r2
 8007352:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007364:	b29a      	uxth	r2, r3
 8007366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	895b      	ldrh	r3, [r3, #10]
 800737e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6959      	ldr	r1, [r3, #20]
 800738e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007392:	b29b      	uxth	r3, r3
 8007394:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007398:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800739c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073a0:	6800      	ldr	r0, [r0, #0]
 80073a2:	f001 fd7d 	bl	8008ea0 <USB_WritePMA>
            ep->xfer_buff += len;
 80073a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695a      	ldr	r2, [r3, #20]
 80073b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b6:	441a      	add	r2, r3
 80073b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6a1a      	ldr	r2, [r3, #32]
 80073d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d90f      	bls.n	8007400 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6a1a      	ldr	r2, [r3, #32]
 80073ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f0:	1ad2      	subs	r2, r2, r3
 80073f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	621a      	str	r2, [r3, #32]
 80073fe:	e00e      	b.n	800741e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2200      	movs	r2, #0
 800741c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	785b      	ldrb	r3, [r3, #1]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f040 809a 	bne.w	8007564 <USB_EPStartXfer+0x5b0>
 8007430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007434:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007438:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800743c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007452:	b29b      	uxth	r3, r3
 8007454:	4619      	mov	r1, r3
 8007456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800745e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007462:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	440a      	add	r2, r1
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	011a      	lsls	r2, r3, #4
 800747a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4413      	add	r3, r2
 8007486:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800748a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d122      	bne.n	80074e2 <USB_EPStartXfer+0x52e>
 800749c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	801a      	strh	r2, [r3, #0]
 80074bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	801a      	strh	r2, [r3, #0]
 80074e0:	e083      	b.n	80075ea <USB_EPStartXfer+0x636>
 80074e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e6:	2b3e      	cmp	r3, #62	; 0x3e
 80074e8:	d81b      	bhi.n	8007522 <USB_EPStartXfer+0x56e>
 80074ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d004      	beq.n	800750a <USB_EPStartXfer+0x556>
 8007500:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007504:	3301      	adds	r3, #1
 8007506:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800750a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800750e:	b29b      	uxth	r3, r3
 8007510:	029b      	lsls	r3, r3, #10
 8007512:	b29a      	uxth	r2, r3
 8007514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007518:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	801a      	strh	r2, [r3, #0]
 8007520:	e063      	b.n	80075ea <USB_EPStartXfer+0x636>
 8007522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800752c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007530:	f003 031f 	and.w	r3, r3, #31
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <USB_EPStartXfer+0x58e>
 8007538:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800753c:	3b01      	subs	r3, #1
 800753e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007542:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007546:	b29b      	uxth	r3, r3
 8007548:	029b      	lsls	r3, r3, #10
 800754a:	b29b      	uxth	r3, r3
 800754c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007554:	b29a      	uxth	r2, r3
 8007556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	801a      	strh	r2, [r3, #0]
 8007562:	e042      	b.n	80075ea <USB_EPStartXfer+0x636>
 8007564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d13a      	bne.n	80075ea <USB_EPStartXfer+0x636>
 8007574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007578:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800757c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007580:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007584:	6812      	ldr	r2, [r2, #0]
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007596:	b29b      	uxth	r3, r3
 8007598:	4619      	mov	r1, r3
 800759a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075a6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	440a      	add	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	011a      	lsls	r2, r3, #4
 80075be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4413      	add	r3, r2
 80075ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80075ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	891b      	ldrh	r3, [r3, #8]
 80075f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6959      	ldr	r1, [r3, #20]
 8007606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760a:	b29b      	uxth	r3, r3
 800760c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007610:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007614:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007618:	6800      	ldr	r0, [r0, #0]
 800761a:	f001 fc41 	bl	8008ea0 <USB_WritePMA>
 800761e:	f000 be0e 	b.w	800823e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d16d      	bne.n	800770e <USB_EPStartXfer+0x75a>
 8007632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007636:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	64bb      	str	r3, [r7, #72]	; 0x48
 800763e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007642:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800764c:	b29b      	uxth	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007652:	4413      	add	r3, r2
 8007654:	64bb      	str	r3, [r7, #72]	; 0x48
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	011a      	lsls	r2, r3, #4
 8007664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007666:	4413      	add	r3, r2
 8007668:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800766c:	647b      	str	r3, [r7, #68]	; 0x44
 800766e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007672:	2b00      	cmp	r3, #0
 8007674:	d112      	bne.n	800769c <USB_EPStartXfer+0x6e8>
 8007676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007680:	b29a      	uxth	r2, r3
 8007682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007694:	b29a      	uxth	r2, r3
 8007696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	e063      	b.n	8007764 <USB_EPStartXfer+0x7b0>
 800769c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a0:	2b3e      	cmp	r3, #62	; 0x3e
 80076a2:	d817      	bhi.n	80076d4 <USB_EPStartXfer+0x720>
 80076a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d004      	beq.n	80076c4 <USB_EPStartXfer+0x710>
 80076ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076be:	3301      	adds	r3, #1
 80076c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	029b      	lsls	r3, r3, #10
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076d0:	801a      	strh	r2, [r3, #0]
 80076d2:	e047      	b.n	8007764 <USB_EPStartXfer+0x7b0>
 80076d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d104      	bne.n	80076f4 <USB_EPStartXfer+0x740>
 80076ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076ee:	3b01      	subs	r3, #1
 80076f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	029b      	lsls	r3, r3, #10
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007706:	b29a      	uxth	r2, r3
 8007708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	e02a      	b.n	8007764 <USB_EPStartXfer+0x7b0>
 800770e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d122      	bne.n	8007764 <USB_EPStartXfer+0x7b0>
 800771e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	653b      	str	r3, [r7, #80]	; 0x50
 800772a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007738:	b29b      	uxth	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800773e:	4413      	add	r3, r2
 8007740:	653b      	str	r3, [r7, #80]	; 0x50
 8007742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	011a      	lsls	r2, r3, #4
 8007750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007752:	4413      	add	r3, r2
 8007754:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007758:	64fb      	str	r3, [r7, #76]	; 0x4c
 800775a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800775e:	b29a      	uxth	r2, r3
 8007760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007762:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	891b      	ldrh	r3, [r3, #8]
 8007770:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6959      	ldr	r1, [r3, #20]
 8007780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007784:	b29b      	uxth	r3, r3
 8007786:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800778a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800778e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007792:	6800      	ldr	r0, [r0, #0]
 8007794:	f001 fb84 	bl	8008ea0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a8:	441a      	add	r2, r3
 80077aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6a1a      	ldr	r2, [r3, #32]
 80077c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d90f      	bls.n	80077f2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80077d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6a1a      	ldr	r2, [r3, #32]
 80077de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e2:	1ad2      	subs	r2, r2, r3
 80077e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	621a      	str	r2, [r3, #32]
 80077f0:	e00e      	b.n	8007810 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80077f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2200      	movs	r2, #0
 800780e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	643b      	str	r3, [r7, #64]	; 0x40
 800781c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d16d      	bne.n	8007908 <USB_EPStartXfer+0x954>
 800782c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007830:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	63bb      	str	r3, [r7, #56]	; 0x38
 8007838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007846:	b29b      	uxth	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	4413      	add	r3, r2
 800784e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	011a      	lsls	r2, r3, #4
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	4413      	add	r3, r2
 8007862:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007866:	637b      	str	r3, [r7, #52]	; 0x34
 8007868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d112      	bne.n	8007896 <USB_EPStartXfer+0x8e2>
 8007870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800787a:	b29a      	uxth	r2, r3
 800787c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787e:	801a      	strh	r2, [r3, #0]
 8007880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788e:	b29a      	uxth	r2, r3
 8007890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	e05d      	b.n	8007952 <USB_EPStartXfer+0x99e>
 8007896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789a:	2b3e      	cmp	r3, #62	; 0x3e
 800789c:	d817      	bhi.n	80078ce <USB_EPStartXfer+0x91a>
 800789e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <USB_EPStartXfer+0x90a>
 80078b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078b8:	3301      	adds	r3, #1
 80078ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	029b      	lsls	r3, r3, #10
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	e041      	b.n	8007952 <USB_EPStartXfer+0x99e>
 80078ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078dc:	f003 031f 	and.w	r3, r3, #31
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <USB_EPStartXfer+0x93a>
 80078e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078e8:	3b01      	subs	r3, #1
 80078ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	029b      	lsls	r3, r3, #10
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007900:	b29a      	uxth	r2, r3
 8007902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	e024      	b.n	8007952 <USB_EPStartXfer+0x99e>
 8007908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	785b      	ldrb	r3, [r3, #1]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d11c      	bne.n	8007952 <USB_EPStartXfer+0x99e>
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007926:	b29b      	uxth	r3, r3
 8007928:	461a      	mov	r2, r3
 800792a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800792c:	4413      	add	r3, r2
 800792e:	643b      	str	r3, [r7, #64]	; 0x40
 8007930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	011a      	lsls	r2, r3, #4
 800793e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007940:	4413      	add	r3, r2
 8007942:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800794c:	b29a      	uxth	r2, r3
 800794e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007950:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	895b      	ldrh	r3, [r3, #10]
 800795e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6959      	ldr	r1, [r3, #20]
 800796e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007972:	b29b      	uxth	r3, r3
 8007974:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007978:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800797c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007980:	6800      	ldr	r0, [r0, #0]
 8007982:	f001 fa8d 	bl	8008ea0 <USB_WritePMA>
 8007986:	f000 bc5a 	b.w	800823e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800798a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800799a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80079bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80079c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	441a      	add	r2, r3
 80079de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80079e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80079f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	461a      	mov	r2, r3
 8007a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a16:	4413      	add	r3, r2
 8007a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	011a      	lsls	r2, r3, #4
 8007a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a30:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	891b      	ldrh	r3, [r3, #8]
 8007a48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6959      	ldr	r1, [r3, #20]
 8007a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a62:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a66:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	f001 fa18 	bl	8008ea0 <USB_WritePMA>
 8007a70:	e3e5      	b.n	800823e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a98:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	441a      	add	r2, r3
 8007ab6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6a1a      	ldr	r2, [r3, #32]
 8007ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 81bc 	beq.w	8007e8c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d16d      	bne.n	8007c0e <USB_EPStartXfer+0xc5a>
 8007b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b52:	4413      	add	r3, r2
 8007b54:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	011a      	lsls	r2, r3, #4
 8007b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b66:	4413      	add	r3, r2
 8007b68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b6c:	677b      	str	r3, [r7, #116]	; 0x74
 8007b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d112      	bne.n	8007b9c <USB_EPStartXfer+0xbe8>
 8007b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b84:	801a      	strh	r2, [r3, #0]
 8007b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b98:	801a      	strh	r2, [r3, #0]
 8007b9a:	e060      	b.n	8007c5e <USB_EPStartXfer+0xcaa>
 8007b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ba2:	d817      	bhi.n	8007bd4 <USB_EPStartXfer+0xc20>
 8007ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba8:	085b      	lsrs	r3, r3, #1
 8007baa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d004      	beq.n	8007bc4 <USB_EPStartXfer+0xc10>
 8007bba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	029b      	lsls	r3, r3, #10
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	e044      	b.n	8007c5e <USB_EPStartXfer+0xcaa>
 8007bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d104      	bne.n	8007bf4 <USB_EPStartXfer+0xc40>
 8007bea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bf4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	029b      	lsls	r3, r3, #10
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c0a:	801a      	strh	r2, [r3, #0]
 8007c0c:	e027      	b.n	8007c5e <USB_EPStartXfer+0xcaa>
 8007c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d11f      	bne.n	8007c5e <USB_EPStartXfer+0xcaa>
 8007c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c34:	4413      	add	r3, r2
 8007c36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	011a      	lsls	r2, r3, #4
 8007c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	895b      	ldrh	r3, [r3, #10]
 8007c6a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6959      	ldr	r1, [r3, #20]
 8007c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c8c:	6800      	ldr	r0, [r0, #0]
 8007c8e:	f001 f907 	bl	8008ea0 <USB_WritePMA>
          ep->xfer_buff += len;
 8007c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695a      	ldr	r2, [r3, #20]
 8007c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca2:	441a      	add	r2, r3
 8007ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6a1a      	ldr	r2, [r3, #32]
 8007cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d90f      	bls.n	8007cec <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6a1a      	ldr	r2, [r3, #32]
 8007cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cdc:	1ad2      	subs	r2, r2, r3
 8007cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	621a      	str	r2, [r3, #32]
 8007cea:	e00e      	b.n	8007d0a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2200      	movs	r2, #0
 8007d08:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 8295 	beq.w	800823e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	785b      	ldrb	r3, [r3, #1]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d16d      	bne.n	8007e00 <USB_EPStartXfer+0xe4c>
 8007d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	461a      	mov	r2, r3
 8007d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d44:	4413      	add	r3, r2
 8007d46:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	011a      	lsls	r2, r3, #4
 8007d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d58:	4413      	add	r3, r2
 8007d5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d5e:	667b      	str	r3, [r7, #100]	; 0x64
 8007d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d112      	bne.n	8007d8e <USB_EPStartXfer+0xdda>
 8007d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d8a:	801a      	strh	r2, [r3, #0]
 8007d8c:	e063      	b.n	8007e56 <USB_EPStartXfer+0xea2>
 8007d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d92:	2b3e      	cmp	r3, #62	; 0x3e
 8007d94:	d817      	bhi.n	8007dc6 <USB_EPStartXfer+0xe12>
 8007d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d9a:	085b      	lsrs	r3, r3, #1
 8007d9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <USB_EPStartXfer+0xe02>
 8007dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db0:	3301      	adds	r3, #1
 8007db2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	029b      	lsls	r3, r3, #10
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dc2:	801a      	strh	r2, [r3, #0]
 8007dc4:	e047      	b.n	8007e56 <USB_EPStartXfer+0xea2>
 8007dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dca:	095b      	lsrs	r3, r3, #5
 8007dcc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd4:	f003 031f 	and.w	r3, r3, #31
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d104      	bne.n	8007de6 <USB_EPStartXfer+0xe32>
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de0:	3b01      	subs	r3, #1
 8007de2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	029b      	lsls	r3, r3, #10
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dfc:	801a      	strh	r2, [r3, #0]
 8007dfe:	e02a      	b.n	8007e56 <USB_EPStartXfer+0xea2>
 8007e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	785b      	ldrb	r3, [r3, #1]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d122      	bne.n	8007e56 <USB_EPStartXfer+0xea2>
 8007e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e30:	4413      	add	r3, r2
 8007e32:	673b      	str	r3, [r7, #112]	; 0x70
 8007e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	011a      	lsls	r2, r3, #4
 8007e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e44:	4413      	add	r3, r2
 8007e46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	891b      	ldrh	r3, [r3, #8]
 8007e62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6959      	ldr	r1, [r3, #20]
 8007e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e84:	6800      	ldr	r0, [r0, #0]
 8007e86:	f001 f80b 	bl	8008ea0 <USB_WritePMA>
 8007e8a:	e1d8      	b.n	800823e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	785b      	ldrb	r3, [r3, #1]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d178      	bne.n	8007f8e <USB_EPStartXfer+0xfda>
 8007e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	011a      	lsls	r2, r3, #4
 8007ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ed8:	4413      	add	r3, r2
 8007eda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ede:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d116      	bne.n	8007f18 <USB_EPStartXfer+0xf64>
 8007eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f14:	801a      	strh	r2, [r3, #0]
 8007f16:	e06b      	b.n	8007ff0 <USB_EPStartXfer+0x103c>
 8007f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f1e:	d818      	bhi.n	8007f52 <USB_EPStartXfer+0xf9e>
 8007f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f24:	085b      	lsrs	r3, r3, #1
 8007f26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <USB_EPStartXfer+0xf8c>
 8007f36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	029b      	lsls	r3, r3, #10
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f4e:	801a      	strh	r2, [r3, #0]
 8007f50:	e04e      	b.n	8007ff0 <USB_EPStartXfer+0x103c>
 8007f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f60:	f003 031f 	and.w	r3, r3, #31
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d104      	bne.n	8007f72 <USB_EPStartXfer+0xfbe>
 8007f68:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	029b      	lsls	r3, r3, #10
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f8a:	801a      	strh	r2, [r3, #0]
 8007f8c:	e030      	b.n	8007ff0 <USB_EPStartXfer+0x103c>
 8007f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d128      	bne.n	8007ff0 <USB_EPStartXfer+0x103c>
 8007f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	011a      	lsls	r2, r3, #4
 8007fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fda:	4413      	add	r3, r2
 8007fdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fe0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	891b      	ldrh	r3, [r3, #8]
 8007ffc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6959      	ldr	r1, [r3, #20]
 800800c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008010:	b29b      	uxth	r3, r3
 8008012:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008016:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800801a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800801e:	6800      	ldr	r0, [r0, #0]
 8008020:	f000 ff3e 	bl	8008ea0 <USB_WritePMA>
          ep->xfer_buff += len;
 8008024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	695a      	ldr	r2, [r3, #20]
 8008030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008034:	441a      	add	r2, r3
 8008036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6a1a      	ldr	r2, [r3, #32]
 800804e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	429a      	cmp	r2, r3
 800805c:	d90f      	bls.n	800807e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800805e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6a1a      	ldr	r2, [r3, #32]
 800806a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	621a      	str	r2, [r3, #32]
 800807c:	e00e      	b.n	800809c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800807e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800808e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2200      	movs	r2, #0
 800809a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800809c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80cc 	beq.w	800823e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d178      	bne.n	80081b6 <USB_EPStartXfer+0x1202>
 80080c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080e8:	4413      	add	r3, r2
 80080ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	011a      	lsls	r2, r3, #4
 80080fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008100:	4413      	add	r3, r2
 8008102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008106:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800810a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d116      	bne.n	8008140 <USB_EPStartXfer+0x118c>
 8008112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800811e:	b29a      	uxth	r2, r3
 8008120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008124:	801a      	strh	r2, [r3, #0]
 8008126:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008136:	b29a      	uxth	r2, r3
 8008138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800813c:	801a      	strh	r2, [r3, #0]
 800813e:	e064      	b.n	800820a <USB_EPStartXfer+0x1256>
 8008140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008144:	2b3e      	cmp	r3, #62	; 0x3e
 8008146:	d818      	bhi.n	800817a <USB_EPStartXfer+0x11c6>
 8008148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800814c:	085b      	lsrs	r3, r3, #1
 800814e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d004      	beq.n	8008168 <USB_EPStartXfer+0x11b4>
 800815e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008162:	3301      	adds	r3, #1
 8008164:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800816c:	b29b      	uxth	r3, r3
 800816e:	029b      	lsls	r3, r3, #10
 8008170:	b29a      	uxth	r2, r3
 8008172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008176:	801a      	strh	r2, [r3, #0]
 8008178:	e047      	b.n	800820a <USB_EPStartXfer+0x1256>
 800817a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817e:	095b      	lsrs	r3, r3, #5
 8008180:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008188:	f003 031f 	and.w	r3, r3, #31
 800818c:	2b00      	cmp	r3, #0
 800818e:	d104      	bne.n	800819a <USB_EPStartXfer+0x11e6>
 8008190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008194:	3b01      	subs	r3, #1
 8008196:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800819a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800819e:	b29b      	uxth	r3, r3
 80081a0:	029b      	lsls	r3, r3, #10
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	e029      	b.n	800820a <USB_EPStartXfer+0x1256>
 80081b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d121      	bne.n	800820a <USB_EPStartXfer+0x1256>
 80081c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	461a      	mov	r2, r3
 80081d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081dc:	4413      	add	r3, r2
 80081de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	011a      	lsls	r2, r3, #4
 80081f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081f4:	4413      	add	r3, r2
 80081f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008202:	b29a      	uxth	r2, r3
 8008204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008208:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800820a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	895b      	ldrh	r3, [r3, #10]
 8008216:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800821a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6959      	ldr	r1, [r3, #20]
 8008226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800822a:	b29b      	uxth	r3, r3
 800822c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008230:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008234:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008238:	6800      	ldr	r0, [r0, #0]
 800823a:	f000 fe31 	bl	8008ea0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800823e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008260:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800826c:	8013      	strh	r3, [r2, #0]
 800826e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008272:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008276:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800827a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800827e:	8812      	ldrh	r2, [r2, #0]
 8008280:	f082 0210 	eor.w	r2, r2, #16
 8008284:	801a      	strh	r2, [r3, #0]
 8008286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800828e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008292:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008296:	8812      	ldrh	r2, [r2, #0]
 8008298:	f082 0220 	eor.w	r2, r2, #32
 800829c:	801a      	strh	r2, [r3, #0]
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	441a      	add	r2, r3
 80082b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082bc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	8013      	strh	r3, [r2, #0]
 80082d6:	f000 bc9f 	b.w	8008c18 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	7b1b      	ldrb	r3, [r3, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f040 80ae 	bne.w	8008448 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80082ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	429a      	cmp	r2, r3
 8008306:	d917      	bls.n	8008338 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699a      	ldr	r2, [r3, #24]
 8008324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008328:	1ad2      	subs	r2, r2, r3
 800832a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	619a      	str	r2, [r3, #24]
 8008336:	e00e      	b.n	8008356 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2200      	movs	r2, #0
 8008354:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008368:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008372:	b29b      	uxth	r3, r3
 8008374:	461a      	mov	r2, r3
 8008376:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800837a:	4413      	add	r3, r2
 800837c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	011a      	lsls	r2, r3, #4
 800838e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008392:	4413      	add	r3, r2
 8008394:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800839c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d116      	bne.n	80083d2 <USB_EPStartXfer+0x141e>
 80083a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ce:	801a      	strh	r2, [r3, #0]
 80083d0:	e3e8      	b.n	8008ba4 <USB_EPStartXfer+0x1bf0>
 80083d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d6:	2b3e      	cmp	r3, #62	; 0x3e
 80083d8:	d818      	bhi.n	800840c <USB_EPStartXfer+0x1458>
 80083da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083de:	085b      	lsrs	r3, r3, #1
 80083e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d004      	beq.n	80083fa <USB_EPStartXfer+0x1446>
 80083f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083f4:	3301      	adds	r3, #1
 80083f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083fe:	b29b      	uxth	r3, r3
 8008400:	029b      	lsls	r3, r3, #10
 8008402:	b29a      	uxth	r2, r3
 8008404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008408:	801a      	strh	r2, [r3, #0]
 800840a:	e3cb      	b.n	8008ba4 <USB_EPStartXfer+0x1bf0>
 800840c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008410:	095b      	lsrs	r3, r3, #5
 8008412:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800841a:	f003 031f 	and.w	r3, r3, #31
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <USB_EPStartXfer+0x1478>
 8008422:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008426:	3b01      	subs	r3, #1
 8008428:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800842c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008430:	b29b      	uxth	r3, r3
 8008432:	029b      	lsls	r3, r3, #10
 8008434:	b29b      	uxth	r3, r3
 8008436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800843a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800843e:	b29a      	uxth	r2, r3
 8008440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008444:	801a      	strh	r2, [r3, #0]
 8008446:	e3ad      	b.n	8008ba4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	78db      	ldrb	r3, [r3, #3]
 8008454:	2b02      	cmp	r3, #2
 8008456:	f040 8200 	bne.w	800885a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800845a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f040 8091 	bne.w	800858e <USB_EPStartXfer+0x15da>
 800846c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800847a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008488:	b29b      	uxth	r3, r3
 800848a:	461a      	mov	r2, r3
 800848c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008490:	4413      	add	r3, r2
 8008492:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	011a      	lsls	r2, r3, #4
 80084a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80084a8:	4413      	add	r3, r2
 80084aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d116      	bne.n	80084f0 <USB_EPStartXfer+0x153c>
 80084c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084d4:	801a      	strh	r2, [r3, #0]
 80084d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084ec:	801a      	strh	r2, [r3, #0]
 80084ee:	e083      	b.n	80085f8 <USB_EPStartXfer+0x1644>
 80084f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b3e      	cmp	r3, #62	; 0x3e
 80084fe:	d820      	bhi.n	8008542 <USB_EPStartXfer+0x158e>
 8008500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	085b      	lsrs	r3, r3, #1
 800850e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <USB_EPStartXfer+0x157c>
 8008526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800852a:	3301      	adds	r3, #1
 800852c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008534:	b29b      	uxth	r3, r3
 8008536:	029b      	lsls	r3, r3, #10
 8008538:	b29a      	uxth	r2, r3
 800853a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e05a      	b.n	80085f8 <USB_EPStartXfer+0x1644>
 8008542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	095b      	lsrs	r3, r3, #5
 8008550:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	2b00      	cmp	r3, #0
 8008566:	d104      	bne.n	8008572 <USB_EPStartXfer+0x15be>
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856c:	3b01      	subs	r3, #1
 800856e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008576:	b29b      	uxth	r3, r3
 8008578:	029b      	lsls	r3, r3, #10
 800857a:	b29b      	uxth	r3, r3
 800857c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008584:	b29a      	uxth	r2, r3
 8008586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800858a:	801a      	strh	r2, [r3, #0]
 800858c:	e034      	b.n	80085f8 <USB_EPStartXfer+0x1644>
 800858e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	785b      	ldrb	r3, [r3, #1]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d12c      	bne.n	80085f8 <USB_EPStartXfer+0x1644>
 800859e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	461a      	mov	r2, r3
 80085be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085c2:	4413      	add	r3, r2
 80085c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	011a      	lsls	r2, r3, #4
 80085d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085da:	4413      	add	r3, r2
 80085dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80085f6:	801a      	strh	r2, [r3, #0]
 80085f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	2b00      	cmp	r3, #0
 8008614:	f040 8091 	bne.w	800873a <USB_EPStartXfer+0x1786>
 8008618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008634:	b29b      	uxth	r3, r3
 8008636:	461a      	mov	r2, r3
 8008638:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800863c:	4413      	add	r3, r2
 800863e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	011a      	lsls	r2, r3, #4
 8008650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008654:	4413      	add	r3, r2
 8008656:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800865a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800865e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d116      	bne.n	800869c <USB_EPStartXfer+0x16e8>
 800866e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	b29b      	uxth	r3, r3
 8008676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800867a:	b29a      	uxth	r2, r3
 800867c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008680:	801a      	strh	r2, [r3, #0]
 8008682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	b29b      	uxth	r3, r3
 800868a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800868e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008692:	b29a      	uxth	r2, r3
 8008694:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008698:	801a      	strh	r2, [r3, #0]
 800869a:	e07c      	b.n	8008796 <USB_EPStartXfer+0x17e2>
 800869c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	2b3e      	cmp	r3, #62	; 0x3e
 80086aa:	d820      	bhi.n	80086ee <USB_EPStartXfer+0x173a>
 80086ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	085b      	lsrs	r3, r3, #1
 80086ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d004      	beq.n	80086dc <USB_EPStartXfer+0x1728>
 80086d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086d6:	3301      	adds	r3, #1
 80086d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	029b      	lsls	r3, r3, #10
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	e053      	b.n	8008796 <USB_EPStartXfer+0x17e2>
 80086ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	095b      	lsrs	r3, r3, #5
 80086fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	f003 031f 	and.w	r3, r3, #31
 8008710:	2b00      	cmp	r3, #0
 8008712:	d104      	bne.n	800871e <USB_EPStartXfer+0x176a>
 8008714:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008718:	3b01      	subs	r3, #1
 800871a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800871e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008722:	b29b      	uxth	r3, r3
 8008724:	029b      	lsls	r3, r3, #10
 8008726:	b29b      	uxth	r3, r3
 8008728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800872c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008730:	b29a      	uxth	r2, r3
 8008732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008736:	801a      	strh	r2, [r3, #0]
 8008738:	e02d      	b.n	8008796 <USB_EPStartXfer+0x17e2>
 800873a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d125      	bne.n	8008796 <USB_EPStartXfer+0x17e2>
 800874a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008758:	b29b      	uxth	r3, r3
 800875a:	461a      	mov	r2, r3
 800875c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008760:	4413      	add	r3, r2
 8008762:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	011a      	lsls	r2, r3, #4
 8008774:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008778:	4413      	add	r3, r2
 800877a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800877e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	b29a      	uxth	r2, r3
 8008790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008794:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 81fe 	beq.w	8008ba4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80087a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087c8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <USB_EPStartXfer+0x182c>
 80087d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10d      	bne.n	80087fc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f040 81db 	bne.w	8008ba4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087ee:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f040 81d4 	bne.w	8008ba4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80087fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	b29b      	uxth	r3, r3
 800881a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008822:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	441a      	add	r2, r3
 8008840:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800884c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008850:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008854:	b29b      	uxth	r3, r3
 8008856:	8013      	strh	r3, [r2, #0]
 8008858:	e1a4      	b.n	8008ba4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800885a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	78db      	ldrb	r3, [r3, #3]
 8008866:	2b01      	cmp	r3, #1
 8008868:	f040 819a 	bne.w	8008ba0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800886c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	699a      	ldr	r2, [r3, #24]
 8008878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	429a      	cmp	r2, r3
 8008886:	d917      	bls.n	80088b8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	699a      	ldr	r2, [r3, #24]
 80088a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a8:	1ad2      	subs	r2, r2, r3
 80088aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	619a      	str	r2, [r3, #24]
 80088b6:	e00e      	b.n	80088d6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80088b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80088c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80088d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	785b      	ldrb	r3, [r3, #1]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d178      	bne.n	80089d8 <USB_EPStartXfer+0x1a24>
 80088e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008902:	b29b      	uxth	r3, r3
 8008904:	461a      	mov	r2, r3
 8008906:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800890a:	4413      	add	r3, r2
 800890c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	011a      	lsls	r2, r3, #4
 800891e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008922:	4413      	add	r3, r2
 8008924:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800892c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d116      	bne.n	8008962 <USB_EPStartXfer+0x19ae>
 8008934:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	b29b      	uxth	r3, r3
 800893c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008940:	b29a      	uxth	r2, r3
 8008942:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008946:	801a      	strh	r2, [r3, #0]
 8008948:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008958:	b29a      	uxth	r2, r3
 800895a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800895e:	801a      	strh	r2, [r3, #0]
 8008960:	e06b      	b.n	8008a3a <USB_EPStartXfer+0x1a86>
 8008962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008966:	2b3e      	cmp	r3, #62	; 0x3e
 8008968:	d818      	bhi.n	800899c <USB_EPStartXfer+0x19e8>
 800896a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896e:	085b      	lsrs	r3, r3, #1
 8008970:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <USB_EPStartXfer+0x19d6>
 8008980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008984:	3301      	adds	r3, #1
 8008986:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800898a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800898e:	b29b      	uxth	r3, r3
 8008990:	029b      	lsls	r3, r3, #10
 8008992:	b29a      	uxth	r2, r3
 8008994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008998:	801a      	strh	r2, [r3, #0]
 800899a:	e04e      	b.n	8008a3a <USB_EPStartXfer+0x1a86>
 800899c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089aa:	f003 031f 	and.w	r3, r3, #31
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d104      	bne.n	80089bc <USB_EPStartXfer+0x1a08>
 80089b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089b6:	3b01      	subs	r3, #1
 80089b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	029b      	lsls	r3, r3, #10
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089d4:	801a      	strh	r2, [r3, #0]
 80089d6:	e030      	b.n	8008a3a <USB_EPStartXfer+0x1a86>
 80089d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	785b      	ldrb	r3, [r3, #1]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d128      	bne.n	8008a3a <USB_EPStartXfer+0x1a86>
 80089e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	461a      	mov	r2, r3
 8008a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	011a      	lsls	r2, r3, #4
 8008a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a24:	4413      	add	r3, r2
 8008a26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a38:	801a      	strh	r2, [r3, #0]
 8008a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	785b      	ldrb	r3, [r3, #1]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d178      	bne.n	8008b4a <USB_EPStartXfer+0x1b96>
 8008a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	461a      	mov	r2, r3
 8008a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	011a      	lsls	r2, r3, #4
 8008a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a94:	4413      	add	r3, r2
 8008a96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d116      	bne.n	8008ad4 <USB_EPStartXfer+0x1b20>
 8008aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ab8:	801a      	strh	r2, [r3, #0]
 8008aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ad0:	801a      	strh	r2, [r3, #0]
 8008ad2:	e067      	b.n	8008ba4 <USB_EPStartXfer+0x1bf0>
 8008ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8008ada:	d818      	bhi.n	8008b0e <USB_EPStartXfer+0x1b5a>
 8008adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae0:	085b      	lsrs	r3, r3, #1
 8008ae2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <USB_EPStartXfer+0x1b48>
 8008af2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008af6:	3301      	adds	r3, #1
 8008af8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008afc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	029b      	lsls	r3, r3, #10
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b0a:	801a      	strh	r2, [r3, #0]
 8008b0c:	e04a      	b.n	8008ba4 <USB_EPStartXfer+0x1bf0>
 8008b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b12:	095b      	lsrs	r3, r3, #5
 8008b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b1c:	f003 031f 	and.w	r3, r3, #31
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d104      	bne.n	8008b2e <USB_EPStartXfer+0x1b7a>
 8008b24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	029b      	lsls	r3, r3, #10
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b46:	801a      	strh	r2, [r3, #0]
 8008b48:	e02c      	b.n	8008ba4 <USB_EPStartXfer+0x1bf0>
 8008b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d124      	bne.n	8008ba4 <USB_EPStartXfer+0x1bf0>
 8008b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b70:	4413      	add	r3, r2
 8008b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	011a      	lsls	r2, r3, #4
 8008b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b88:	4413      	add	r3, r2
 8008b8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	e001      	b.n	8008ba4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e03a      	b.n	8008c1a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008bd2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bda:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008bde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008be2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	441a      	add	r2, r3
 8008c00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d020      	beq.n	8008c78 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c4c:	81bb      	strh	r3, [r7, #12]
 8008c4e:	89bb      	ldrh	r3, [r7, #12]
 8008c50:	f083 0310 	eor.w	r3, r3, #16
 8008c54:	81bb      	strh	r3, [r7, #12]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	441a      	add	r2, r3
 8008c60:	89bb      	ldrh	r3, [r7, #12]
 8008c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	8013      	strh	r3, [r2, #0]
 8008c76:	e01f      	b.n	8008cb8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8e:	81fb      	strh	r3, [r7, #14]
 8008c90:	89fb      	ldrh	r3, [r7, #14]
 8008c92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c96:	81fb      	strh	r3, [r7, #14]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	441a      	add	r2, r3
 8008ca2:	89fb      	ldrh	r3, [r7, #14]
 8008ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bc80      	pop	{r7}
 8008cc2:	4770      	bx	lr

08008cc4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	7b1b      	ldrb	r3, [r3, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f040 809d 	bne.w	8008e12 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	785b      	ldrb	r3, [r3, #1]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d04c      	beq.n	8008d7a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	823b      	strh	r3, [r7, #16]
 8008cee:	8a3b      	ldrh	r3, [r7, #16]
 8008cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d01b      	beq.n	8008d30 <USB_EPClearStall+0x6c>
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0e:	81fb      	strh	r3, [r7, #14]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	441a      	add	r2, r3
 8008d1a:	89fb      	ldrh	r3, [r7, #14]
 8008d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	78db      	ldrb	r3, [r3, #3]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d06c      	beq.n	8008e12 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d4e:	81bb      	strh	r3, [r7, #12]
 8008d50:	89bb      	ldrh	r3, [r7, #12]
 8008d52:	f083 0320 	eor.w	r3, r3, #32
 8008d56:	81bb      	strh	r3, [r7, #12]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	441a      	add	r2, r3
 8008d62:	89bb      	ldrh	r3, [r7, #12]
 8008d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	8013      	strh	r3, [r2, #0]
 8008d78:	e04b      	b.n	8008e12 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	82fb      	strh	r3, [r7, #22]
 8008d88:	8afb      	ldrh	r3, [r7, #22]
 8008d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d01b      	beq.n	8008dca <USB_EPClearStall+0x106>
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da8:	82bb      	strh	r3, [r7, #20]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	441a      	add	r2, r3
 8008db4:	8abb      	ldrh	r3, [r7, #20]
 8008db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de0:	827b      	strh	r3, [r7, #18]
 8008de2:	8a7b      	ldrh	r3, [r7, #18]
 8008de4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008de8:	827b      	strh	r3, [r7, #18]
 8008dea:	8a7b      	ldrh	r3, [r7, #18]
 8008dec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008df0:	827b      	strh	r3, [r7, #18]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	441a      	add	r2, r3
 8008dfc:	8a7b      	ldrh	r3, [r7, #18]
 8008dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	371c      	adds	r7, #28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr

08008e1e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e2a:	78fb      	ldrb	r3, [r7, #3]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d103      	bne.n	8008e38 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2280      	movs	r2, #128	; 0x80
 8008e34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc80      	pop	{r7}
 8008e42:	4770      	bx	lr

08008e44 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bc80      	pop	{r7}
 8008e56:	4770      	bx	lr

08008e58 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bc80      	pop	{r7}
 8008e6a:	4770      	bx	lr

08008e6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bc80      	pop	{r7}
 8008e88:	4770      	bx	lr

08008e8a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	4770      	bx	lr

08008ea0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b08d      	sub	sp, #52	; 0x34
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4611      	mov	r1, r2
 8008eac:	461a      	mov	r2, r3
 8008eae:	460b      	mov	r3, r1
 8008eb0:	80fb      	strh	r3, [r7, #6]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008eb6:	88bb      	ldrh	r3, [r7, #4]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	085b      	lsrs	r3, r3, #1
 8008ebc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ec6:	88fb      	ldrh	r3, [r7, #6]
 8008ec8:	005a      	lsls	r2, r3, #1
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ed2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed8:	e01e      	b.n	8008f18 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	3302      	adds	r3, #2
 8008f04:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f08:	3302      	adds	r3, #2
 8008f0a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	3301      	adds	r3, #1
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	3b01      	subs	r3, #1
 8008f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1dd      	bne.n	8008eda <USB_WritePMA+0x3a>
  }
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	3734      	adds	r7, #52	; 0x34
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bc80      	pop	{r7}
 8008f28:	4770      	bx	lr

08008f2a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b08b      	sub	sp, #44	; 0x2c
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	4611      	mov	r1, r2
 8008f36:	461a      	mov	r2, r3
 8008f38:	460b      	mov	r3, r1
 8008f3a:	80fb      	strh	r3, [r7, #6]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f40:	88bb      	ldrh	r3, [r7, #4]
 8008f42:	085b      	lsrs	r3, r3, #1
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f50:	88fb      	ldrh	r3, [r7, #6]
 8008f52:	005a      	lsls	r2, r3, #1
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f5c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
 8008f62:	e01b      	b.n	8008f9c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	3302      	adds	r3, #2
 8008f70:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	0a1b      	lsrs	r3, r3, #8
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	3302      	adds	r3, #2
 8008f94:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e0      	bne.n	8008f64 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008fa2:	88bb      	ldrh	r3, [r7, #4]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d007      	beq.n	8008fbe <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	701a      	strb	r2, [r3, #0]
  }
}
 8008fbe:	bf00      	nop
 8008fc0:	372c      	adds	r7, #44	; 0x2c
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bc80      	pop	{r7}
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008fd8:	2340      	movs	r3, #64	; 0x40
 8008fda:	2203      	movs	r2, #3
 8008fdc:	2181      	movs	r1, #129	; 0x81
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 fd47 	bl	800aa72 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008fea:	2340      	movs	r3, #64	; 0x40
 8008fec:	2203      	movs	r2, #3
 8008fee:	2101      	movs	r1, #1
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 fd3e 	bl	800aa72 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008ffe:	2054      	movs	r0, #84	; 0x54
 8009000:	f001 fe4c 	bl	800ac9c <USBD_static_malloc>
 8009004:	4602      	mov	r2, r0
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009012:	2b00      	cmp	r3, #0
 8009014:	d102      	bne.n	800901c <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8009016:	2301      	movs	r3, #1
 8009018:	73fb      	strb	r3, [r7, #15]
 800901a:	e012      	b.n	8009042 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009022:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	2340      	movs	r3, #64	; 0x40
 800903a:	2101      	movs	r1, #1
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 fe09 	bl	800ac54 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8009058:	2181      	movs	r1, #129	; 0x81
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f001 fd2f 	bl	800aabe <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8009066:	2101      	movs	r1, #1
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 fd28 	bl	800aabe <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00e      	beq.n	800909e <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009090:	4618      	mov	r0, r3
 8009092:	f001 fe0f 	bl	800acb4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80090be:	2300      	movs	r3, #0
 80090c0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d051      	beq.n	800917a <USBD_CUSTOM_HID_Setup+0xd2>
 80090d6:	2b20      	cmp	r3, #32
 80090d8:	f040 80d8 	bne.w	800928c <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	3b02      	subs	r3, #2
 80090e2:	2b09      	cmp	r3, #9
 80090e4:	d841      	bhi.n	800916a <USBD_CUSTOM_HID_Setup+0xc2>
 80090e6:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <USBD_CUSTOM_HID_Setup+0x44>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	08009145 	.word	0x08009145
 80090f0:	08009123 	.word	0x08009123
 80090f4:	0800916b 	.word	0x0800916b
 80090f8:	0800916b 	.word	0x0800916b
 80090fc:	0800916b 	.word	0x0800916b
 8009100:	0800916b 	.word	0x0800916b
 8009104:	0800916b 	.word	0x0800916b
 8009108:	08009155 	.word	0x08009155
 800910c:	08009133 	.word	0x08009133
 8009110:	08009115 	.word	0x08009115
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	885b      	ldrh	r3, [r3, #2]
 8009118:	b2db      	uxtb	r3, r3
 800911a:	461a      	mov	r2, r3
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8009120:	e02a      	b.n	8009178 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	3340      	adds	r3, #64	; 0x40
 8009126:	2201      	movs	r2, #1
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f001 f999 	bl	800a462 <USBD_CtlSendData>
          break;
 8009130:	e022      	b.n	8009178 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	885b      	ldrh	r3, [r3, #2]
 8009136:	0a1b      	lsrs	r3, r3, #8
 8009138:	b29b      	uxth	r3, r3
 800913a:	b2db      	uxtb	r3, r3
 800913c:	461a      	mov	r2, r3
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8009142:	e019      	b.n	8009178 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	3344      	adds	r3, #68	; 0x44
 8009148:	2201      	movs	r2, #1
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f988 	bl	800a462 <USBD_CtlSendData>
          break;
 8009152:	e011      	b.n	8009178 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	2201      	movs	r2, #1
 8009158:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800915a:	6939      	ldr	r1, [r7, #16]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	88db      	ldrh	r3, [r3, #6]
 8009160:	461a      	mov	r2, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 f9ab 	bl	800a4be <USBD_CtlPrepareRx>
          break;
 8009168:	e006      	b.n	8009178 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 f90e 	bl	800a38e <USBD_CtlError>
          ret = USBD_FAIL;
 8009172:	2302      	movs	r3, #2
 8009174:	75fb      	strb	r3, [r7, #23]
          break;
 8009176:	bf00      	nop
      }
      break;
 8009178:	e08f      	b.n	800929a <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	2b0b      	cmp	r3, #11
 8009180:	d87c      	bhi.n	800927c <USBD_CUSTOM_HID_Setup+0x1d4>
 8009182:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <USBD_CUSTOM_HID_Setup+0xe0>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091b9 	.word	0x080091b9
 800918c:	0800927d 	.word	0x0800927d
 8009190:	0800927d 	.word	0x0800927d
 8009194:	0800927d 	.word	0x0800927d
 8009198:	0800927d 	.word	0x0800927d
 800919c:	0800927d 	.word	0x0800927d
 80091a0:	080091e1 	.word	0x080091e1
 80091a4:	0800927d 	.word	0x0800927d
 80091a8:	0800927d 	.word	0x0800927d
 80091ac:	0800927d 	.word	0x0800927d
 80091b0:	0800922f 	.word	0x0800922f
 80091b4:	08009257 	.word	0x08009257
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d107      	bne.n	80091d2 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80091c2:	f107 030e 	add.w	r3, r7, #14
 80091c6:	2202      	movs	r2, #2
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f001 f949 	bl	800a462 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091d0:	e05b      	b.n	800928a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 f8da 	bl	800a38e <USBD_CtlError>
            ret = USBD_FAIL;
 80091da:	2302      	movs	r3, #2
 80091dc:	75fb      	strb	r3, [r7, #23]
          break;
 80091de:	e054      	b.n	800928a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	885b      	ldrh	r3, [r3, #2]
 80091e4:	0a1b      	lsrs	r3, r3, #8
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	2b22      	cmp	r3, #34	; 0x22
 80091ea:	d10b      	bne.n	8009204 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	88db      	ldrh	r3, [r3, #6]
 80091f0:	2b1d      	cmp	r3, #29
 80091f2:	bf28      	it	cs
 80091f4:	231d      	movcs	r3, #29
 80091f6:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	61bb      	str	r3, [r7, #24]
 8009202:	e00d      	b.n	8009220 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	885b      	ldrh	r3, [r3, #2]
 8009208:	0a1b      	lsrs	r3, r3, #8
 800920a:	b29b      	uxth	r3, r3
 800920c:	2b21      	cmp	r3, #33	; 0x21
 800920e:	d107      	bne.n	8009220 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8009210:	4b24      	ldr	r3, [pc, #144]	; (80092a4 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8009212:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	88db      	ldrh	r3, [r3, #6]
 8009218:	2b09      	cmp	r3, #9
 800921a:	bf28      	it	cs
 800921c:	2309      	movcs	r3, #9
 800921e:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8009220:	8bfb      	ldrh	r3, [r7, #30]
 8009222:	461a      	mov	r2, r3
 8009224:	69b9      	ldr	r1, [r7, #24]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 f91b 	bl	800a462 <USBD_CtlSendData>
          break;
 800922c:	e02d      	b.n	800928a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009234:	2b03      	cmp	r3, #3
 8009236:	d107      	bne.n	8009248 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	3348      	adds	r3, #72	; 0x48
 800923c:	2201      	movs	r2, #1
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 f90e 	bl	800a462 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009246:	e020      	b.n	800928a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 f89f 	bl	800a38e <USBD_CtlError>
            ret = USBD_FAIL;
 8009250:	2302      	movs	r3, #2
 8009252:	75fb      	strb	r3, [r7, #23]
          break;
 8009254:	e019      	b.n	800928a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800925c:	2b03      	cmp	r3, #3
 800925e:	d106      	bne.n	800926e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	885b      	ldrh	r3, [r3, #2]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	461a      	mov	r2, r3
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800926c:	e00d      	b.n	800928a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 f88c 	bl	800a38e <USBD_CtlError>
            ret = USBD_FAIL;
 8009276:	2302      	movs	r3, #2
 8009278:	75fb      	strb	r3, [r7, #23]
          break;
 800927a:	e006      	b.n	800928a <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 f885 	bl	800a38e <USBD_CtlError>
          ret = USBD_FAIL;
 8009284:	2302      	movs	r3, #2
 8009286:	75fb      	strb	r3, [r7, #23]
          break;
 8009288:	bf00      	nop
      }
      break;
 800928a:	e006      	b.n	800929a <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f001 f87d 	bl	800a38e <USBD_CtlError>
      ret = USBD_FAIL;
 8009294:	2302      	movs	r3, #2
 8009296:	75fb      	strb	r3, [r7, #23]
      break;
 8009298:	bf00      	nop
  }
  return ret;
 800929a:	7dfb      	ldrb	r3, [r7, #23]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3720      	adds	r7, #32
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	200000d4 	.word	0x200000d4

080092a8 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092bc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d111      	bne.n	80092ec <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10a      	bne.n	80092e8 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80092da:	88fb      	ldrh	r3, [r7, #6]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	2181      	movs	r1, #129	; 0x81
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f001 fc94 	bl	800ac0e <USBD_LL_Transmit>
 80092e6:	e001      	b.n	80092ec <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2229      	movs	r2, #41	; 0x29
 8009304:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8009306:	4b03      	ldr	r3, [pc, #12]	; (8009314 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	20000050 	.word	0x20000050

08009318 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2229      	movs	r2, #41	; 0x29
 8009324:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8009326:	4b03      	ldr	r3, [pc, #12]	; (8009334 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	2000007c 	.word	0x2000007c

08009338 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2229      	movs	r2, #41	; 0x29
 8009344:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8009346:	4b03      	ldr	r3, [pc, #12]	; (8009354 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	200000a8 	.word	0x200000a8

08009358 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr

0800937c <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938e:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	4610      	mov	r0, r2
 800939c:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	2340      	movs	r3, #64	; 0x40
 80093a2:	2101      	movs	r1, #1
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 fc55 	bl	800ac54 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c2:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d109      	bne.n	80093e0 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4610      	mov	r0, r2
 80093d8:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	220a      	movs	r2, #10
 80093f8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80093fa:	4b03      	ldr	r3, [pc, #12]	; (8009408 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	200000e0 	.word	0x200000e0

0800940c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009416:	2302      	movs	r3, #2
 8009418:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800942c:	7bfb      	ldrb	r3, [r7, #15]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr

08009438 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800944c:	2302      	movs	r3, #2
 800944e:	e01a      	b.n	8009486 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	79fa      	ldrb	r2, [r7, #7]
 800947c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f001 fa8c 	bl	800a99c <USBD_LL_Init>

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d006      	beq.n	80094b0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
 80094ae:	e001      	b.n	80094b4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80094b0:	2302      	movs	r3, #2
 80094b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bc80      	pop	{r7}
 80094be:	4770      	bx	lr

080094c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 fab7 	bl	800aa3c <USBD_LL_Start>

  return USBD_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bc80      	pop	{r7}
 80094ea:	4770      	bx	lr

080094ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80094f8:	2302      	movs	r3, #2
 80094fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00c      	beq.n	8009520 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	78fa      	ldrb	r2, [r7, #3]
 8009510:	4611      	mov	r1, r2
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	460b      	mov	r3, r1
 8009534:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	78fa      	ldrb	r2, [r7, #3]
 8009540:	4611      	mov	r1, r2
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	4798      	blx	r3

  return USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	4618      	mov	r0, r3
 8009564:	f000 fed7 	bl	800a316 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009576:	461a      	mov	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009584:	f003 031f 	and.w	r3, r3, #31
 8009588:	2b02      	cmp	r3, #2
 800958a:	d016      	beq.n	80095ba <USBD_LL_SetupStage+0x6a>
 800958c:	2b02      	cmp	r3, #2
 800958e:	d81c      	bhi.n	80095ca <USBD_LL_SetupStage+0x7a>
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <USBD_LL_SetupStage+0x4a>
 8009594:	2b01      	cmp	r3, #1
 8009596:	d008      	beq.n	80095aa <USBD_LL_SetupStage+0x5a>
 8009598:	e017      	b.n	80095ca <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f9ca 	bl	800993c <USBD_StdDevReq>
      break;
 80095a8:	e01a      	b.n	80095e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fa2c 	bl	8009a10 <USBD_StdItfReq>
      break;
 80095b8:	e012      	b.n	80095e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fa6c 	bl	8009aa0 <USBD_StdEPReq>
      break;
 80095c8:	e00a      	b.n	80095e0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 fa8f 	bl	800aafc <USBD_LL_StallEP>
      break;
 80095de:	bf00      	nop
  }

  return USBD_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	460b      	mov	r3, r1
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d14b      	bne.n	8009696 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009604:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800960c:	2b03      	cmp	r3, #3
 800960e:	d134      	bne.n	800967a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	68da      	ldr	r2, [r3, #12]
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	429a      	cmp	r2, r3
 800961a:	d919      	bls.n	8009650 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	1ad2      	subs	r2, r2, r3
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	68da      	ldr	r2, [r3, #12]
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009632:	429a      	cmp	r2, r3
 8009634:	d203      	bcs.n	800963e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800963a:	b29b      	uxth	r3, r3
 800963c:	e002      	b.n	8009644 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009642:	b29b      	uxth	r3, r3
 8009644:	461a      	mov	r2, r3
 8009646:	6879      	ldr	r1, [r7, #4]
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 ff56 	bl	800a4fa <USBD_CtlContinueRx>
 800964e:	e038      	b.n	80096c2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00a      	beq.n	8009672 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009662:	2b03      	cmp	r3, #3
 8009664:	d105      	bne.n	8009672 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 ff53 	bl	800a51e <USBD_CtlSendStatus>
 8009678:	e023      	b.n	80096c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009680:	2b05      	cmp	r3, #5
 8009682:	d11e      	bne.n	80096c2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800968c:	2100      	movs	r1, #0
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f001 fa34 	bl	800aafc <USBD_LL_StallEP>
 8009694:	e015      	b.n	80096c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00d      	beq.n	80096be <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80096a8:	2b03      	cmp	r3, #3
 80096aa:	d108      	bne.n	80096be <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	7afa      	ldrb	r2, [r7, #11]
 80096b6:	4611      	mov	r1, r2
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	4798      	blx	r3
 80096bc:	e001      	b.n	80096c2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80096be:	2302      	movs	r3, #2
 80096c0:	e000      	b.n	80096c4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	460b      	mov	r3, r1
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d17f      	bne.n	80097e0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3314      	adds	r3, #20
 80096e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d15c      	bne.n	80097aa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	68da      	ldr	r2, [r3, #12]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d915      	bls.n	8009728 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	1ad2      	subs	r2, r2, r3
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	b29b      	uxth	r3, r3
 8009710:	461a      	mov	r2, r3
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 fec0 	bl	800a49a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800971a:	2300      	movs	r3, #0
 800971c:	2200      	movs	r2, #0
 800971e:	2100      	movs	r1, #0
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f001 fa97 	bl	800ac54 <USBD_LL_PrepareReceive>
 8009726:	e04e      	b.n	80097c6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	6912      	ldr	r2, [r2, #16]
 8009730:	fbb3 f1f2 	udiv	r1, r3, r2
 8009734:	fb01 f202 	mul.w	r2, r1, r2
 8009738:	1a9b      	subs	r3, r3, r2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d11c      	bne.n	8009778 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009746:	429a      	cmp	r2, r3
 8009748:	d316      	bcc.n	8009778 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009754:	429a      	cmp	r2, r3
 8009756:	d20f      	bcs.n	8009778 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009758:	2200      	movs	r2, #0
 800975a:	2100      	movs	r1, #0
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 fe9c 	bl	800a49a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800976a:	2300      	movs	r3, #0
 800976c:	2200      	movs	r2, #0
 800976e:	2100      	movs	r1, #0
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f001 fa6f 	bl	800ac54 <USBD_LL_PrepareReceive>
 8009776:	e026      	b.n	80097c6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00a      	beq.n	800979a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800978a:	2b03      	cmp	r3, #3
 800978c:	d105      	bne.n	800979a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800979a:	2180      	movs	r1, #128	; 0x80
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f001 f9ad 	bl	800aafc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 fece 	bl	800a544 <USBD_CtlReceiveStatus>
 80097a8:	e00d      	b.n	80097c6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	d004      	beq.n	80097be <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d103      	bne.n	80097c6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80097be:	2180      	movs	r1, #128	; 0x80
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f001 f99b 	bl	800aafc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d11d      	bne.n	800980c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f7ff fe81 	bl	80094d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80097de:	e015      	b.n	800980c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00d      	beq.n	8009808 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d108      	bne.n	8009808 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	7afa      	ldrb	r2, [r7, #11]
 8009800:	4611      	mov	r1, r2
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	4798      	blx	r3
 8009806:	e001      	b.n	800980c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009808:	2302      	movs	r3, #2
 800980a:	e000      	b.n	800980e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800981e:	2340      	movs	r3, #64	; 0x40
 8009820:	2200      	movs	r2, #0
 8009822:	2100      	movs	r1, #0
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 f924 	bl	800aa72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2240      	movs	r2, #64	; 0x40
 8009836:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800983a:	2340      	movs	r3, #64	; 0x40
 800983c:	2200      	movs	r2, #0
 800983e:	2180      	movs	r1, #128	; 0x80
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f001 f916 	bl	800aa72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2240      	movs	r2, #64	; 0x40
 8009850:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009876:	2b00      	cmp	r3, #0
 8009878:	d009      	beq.n	800988e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	6852      	ldr	r2, [r2, #4]
 8009886:	b2d2      	uxtb	r2, r2
 8009888:	4611      	mov	r1, r2
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
  }

  return USBD_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	78fa      	ldrb	r2, [r7, #3]
 80098a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bc80      	pop	{r7}
 80098b4:	4770      	bx	lr

080098b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2204      	movs	r2, #4
 80098ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	bc80      	pop	{r7}
 80098dc:	4770      	bx	lr

080098de <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d105      	bne.n	80098fc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	bc80      	pop	{r7}
 8009906:	4770      	bx	lr

08009908 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009916:	2b03      	cmp	r3, #3
 8009918:	d10b      	bne.n	8009932 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009952:	2b40      	cmp	r3, #64	; 0x40
 8009954:	d005      	beq.n	8009962 <USBD_StdDevReq+0x26>
 8009956:	2b40      	cmp	r3, #64	; 0x40
 8009958:	d84f      	bhi.n	80099fa <USBD_StdDevReq+0xbe>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <USBD_StdDevReq+0x36>
 800995e:	2b20      	cmp	r3, #32
 8009960:	d14b      	bne.n	80099fa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	4798      	blx	r3
      break;
 8009970:	e048      	b.n	8009a04 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	785b      	ldrb	r3, [r3, #1]
 8009976:	2b09      	cmp	r3, #9
 8009978:	d839      	bhi.n	80099ee <USBD_StdDevReq+0xb2>
 800997a:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <USBD_StdDevReq+0x44>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	080099d1 	.word	0x080099d1
 8009984:	080099e5 	.word	0x080099e5
 8009988:	080099ef 	.word	0x080099ef
 800998c:	080099db 	.word	0x080099db
 8009990:	080099ef 	.word	0x080099ef
 8009994:	080099b3 	.word	0x080099b3
 8009998:	080099a9 	.word	0x080099a9
 800999c:	080099ef 	.word	0x080099ef
 80099a0:	080099c7 	.word	0x080099c7
 80099a4:	080099bd 	.word	0x080099bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f9dc 	bl	8009d68 <USBD_GetDescriptor>
          break;
 80099b0:	e022      	b.n	80099f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fb3f 	bl	800a038 <USBD_SetAddress>
          break;
 80099ba:	e01d      	b.n	80099f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fb7e 	bl	800a0c0 <USBD_SetConfig>
          break;
 80099c4:	e018      	b.n	80099f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fc07 	bl	800a1dc <USBD_GetConfig>
          break;
 80099ce:	e013      	b.n	80099f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fc37 	bl	800a246 <USBD_GetStatus>
          break;
 80099d8:	e00e      	b.n	80099f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fc65 	bl	800a2ac <USBD_SetFeature>
          break;
 80099e2:	e009      	b.n	80099f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fc74 	bl	800a2d4 <USBD_ClrFeature>
          break;
 80099ec:	e004      	b.n	80099f8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fccc 	bl	800a38e <USBD_CtlError>
          break;
 80099f6:	bf00      	nop
      }
      break;
 80099f8:	e004      	b.n	8009a04 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fcc6 	bl	800a38e <USBD_CtlError>
      break;
 8009a02:	bf00      	nop
  }

  return ret;
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop

08009a10 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a26:	2b40      	cmp	r3, #64	; 0x40
 8009a28:	d005      	beq.n	8009a36 <USBD_StdItfReq+0x26>
 8009a2a:	2b40      	cmp	r3, #64	; 0x40
 8009a2c:	d82e      	bhi.n	8009a8c <USBD_StdItfReq+0x7c>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <USBD_StdItfReq+0x26>
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	d12a      	bne.n	8009a8c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d81d      	bhi.n	8009a7e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	889b      	ldrh	r3, [r3, #4]
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d813      	bhi.n	8009a74 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	4798      	blx	r3
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	88db      	ldrh	r3, [r3, #6]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d110      	bne.n	8009a88 <USBD_StdItfReq+0x78>
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10d      	bne.n	8009a88 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fd56 	bl	800a51e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a72:	e009      	b.n	8009a88 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fc89 	bl	800a38e <USBD_CtlError>
          break;
 8009a7c:	e004      	b.n	8009a88 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fc84 	bl	800a38e <USBD_CtlError>
          break;
 8009a86:	e000      	b.n	8009a8a <USBD_StdItfReq+0x7a>
          break;
 8009a88:	bf00      	nop
      }
      break;
 8009a8a:	e004      	b.n	8009a96 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fc7d 	bl	800a38e <USBD_CtlError>
      break;
 8009a94:	bf00      	nop
  }

  return USBD_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	889b      	ldrh	r3, [r3, #4]
 8009ab2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009abc:	2b40      	cmp	r3, #64	; 0x40
 8009abe:	d007      	beq.n	8009ad0 <USBD_StdEPReq+0x30>
 8009ac0:	2b40      	cmp	r3, #64	; 0x40
 8009ac2:	f200 8146 	bhi.w	8009d52 <USBD_StdEPReq+0x2b2>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <USBD_StdEPReq+0x40>
 8009aca:	2b20      	cmp	r3, #32
 8009acc:	f040 8141 	bne.w	8009d52 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	4798      	blx	r3
      break;
 8009ade:	e13d      	b.n	8009d5c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ae8:	2b20      	cmp	r3, #32
 8009aea:	d10a      	bne.n	8009b02 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	4798      	blx	r3
 8009afa:	4603      	mov	r3, r0
 8009afc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	e12d      	b.n	8009d5e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d007      	beq.n	8009b1a <USBD_StdEPReq+0x7a>
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	f300 811b 	bgt.w	8009d46 <USBD_StdEPReq+0x2a6>
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d072      	beq.n	8009bfa <USBD_StdEPReq+0x15a>
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d03a      	beq.n	8009b8e <USBD_StdEPReq+0xee>
 8009b18:	e115      	b.n	8009d46 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d002      	beq.n	8009b2a <USBD_StdEPReq+0x8a>
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d015      	beq.n	8009b54 <USBD_StdEPReq+0xb4>
 8009b28:	e02b      	b.n	8009b82 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00c      	beq.n	8009b4a <USBD_StdEPReq+0xaa>
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b80      	cmp	r3, #128	; 0x80
 8009b34:	d009      	beq.n	8009b4a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b36:	7bbb      	ldrb	r3, [r7, #14]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 ffde 	bl	800aafc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b40:	2180      	movs	r1, #128	; 0x80
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 ffda 	bl	800aafc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b48:	e020      	b.n	8009b8c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fc1e 	bl	800a38e <USBD_CtlError>
              break;
 8009b52:	e01b      	b.n	8009b8c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	885b      	ldrh	r3, [r3, #2]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10e      	bne.n	8009b7a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00b      	beq.n	8009b7a <USBD_StdEPReq+0xda>
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	2b80      	cmp	r3, #128	; 0x80
 8009b66:	d008      	beq.n	8009b7a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	88db      	ldrh	r3, [r3, #6]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d104      	bne.n	8009b7a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 ffc1 	bl	800aafc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fccf 	bl	800a51e <USBD_CtlSendStatus>

              break;
 8009b80:	e004      	b.n	8009b8c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fc02 	bl	800a38e <USBD_CtlError>
              break;
 8009b8a:	bf00      	nop
          }
          break;
 8009b8c:	e0e0      	b.n	8009d50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d002      	beq.n	8009b9e <USBD_StdEPReq+0xfe>
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d015      	beq.n	8009bc8 <USBD_StdEPReq+0x128>
 8009b9c:	e026      	b.n	8009bec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00c      	beq.n	8009bbe <USBD_StdEPReq+0x11e>
 8009ba4:	7bbb      	ldrb	r3, [r7, #14]
 8009ba6:	2b80      	cmp	r3, #128	; 0x80
 8009ba8:	d009      	beq.n	8009bbe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 ffa4 	bl	800aafc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009bb4:	2180      	movs	r1, #128	; 0x80
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 ffa0 	bl	800aafc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bbc:	e01c      	b.n	8009bf8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fbe4 	bl	800a38e <USBD_CtlError>
              break;
 8009bc6:	e017      	b.n	8009bf8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	885b      	ldrh	r3, [r3, #2]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d112      	bne.n	8009bf6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 ffab 	bl	800ab3a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fc9a 	bl	800a51e <USBD_CtlSendStatus>
              }
              break;
 8009bea:	e004      	b.n	8009bf6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fbcd 	bl	800a38e <USBD_CtlError>
              break;
 8009bf4:	e000      	b.n	8009bf8 <USBD_StdEPReq+0x158>
              break;
 8009bf6:	bf00      	nop
          }
          break;
 8009bf8:	e0aa      	b.n	8009d50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d002      	beq.n	8009c0a <USBD_StdEPReq+0x16a>
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d032      	beq.n	8009c6e <USBD_StdEPReq+0x1ce>
 8009c08:	e097      	b.n	8009d3a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d007      	beq.n	8009c20 <USBD_StdEPReq+0x180>
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
 8009c12:	2b80      	cmp	r3, #128	; 0x80
 8009c14:	d004      	beq.n	8009c20 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fbb8 	bl	800a38e <USBD_CtlError>
                break;
 8009c1e:	e091      	b.n	8009d44 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	da0b      	bge.n	8009c40 <USBD_StdEPReq+0x1a0>
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
 8009c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c2e:	4613      	mov	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	3310      	adds	r3, #16
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	e00b      	b.n	8009c58 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
 8009c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c46:	4613      	mov	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	4413      	add	r3, r2
 8009c56:	3304      	adds	r3, #4
 8009c58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2202      	movs	r2, #2
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fbfb 	bl	800a462 <USBD_CtlSendData>
              break;
 8009c6c:	e06a      	b.n	8009d44 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	da11      	bge.n	8009c9a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	f003 020f 	and.w	r2, r3, #15
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	440b      	add	r3, r1
 8009c88:	3318      	adds	r3, #24
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d117      	bne.n	8009cc0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fb7b 	bl	800a38e <USBD_CtlError>
                  break;
 8009c98:	e054      	b.n	8009d44 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	f003 020f 	and.w	r2, r3, #15
 8009ca0:	6879      	ldr	r1, [r7, #4]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	440b      	add	r3, r1
 8009cac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d104      	bne.n	8009cc0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fb68 	bl	800a38e <USBD_CtlError>
                  break;
 8009cbe:	e041      	b.n	8009d44 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	da0b      	bge.n	8009ce0 <USBD_StdEPReq+0x240>
 8009cc8:	7bbb      	ldrb	r3, [r7, #14]
 8009cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cce:	4613      	mov	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	3310      	adds	r3, #16
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	4413      	add	r3, r2
 8009cdc:	3304      	adds	r3, #4
 8009cde:	e00b      	b.n	8009cf8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <USBD_StdEPReq+0x266>
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	2b80      	cmp	r3, #128	; 0x80
 8009d04:	d103      	bne.n	8009d0e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	e00e      	b.n	8009d2c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 ff30 	bl	800ab78 <USBD_LL_IsStallEP>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2201      	movs	r2, #1
 8009d22:	601a      	str	r2, [r3, #0]
 8009d24:	e002      	b.n	8009d2c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fb95 	bl	800a462 <USBD_CtlSendData>
              break;
 8009d38:	e004      	b.n	8009d44 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fb26 	bl	800a38e <USBD_CtlError>
              break;
 8009d42:	bf00      	nop
          }
          break;
 8009d44:	e004      	b.n	8009d50 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fb20 	bl	800a38e <USBD_CtlError>
          break;
 8009d4e:	bf00      	nop
      }
      break;
 8009d50:	e004      	b.n	8009d5c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fb1a 	bl	800a38e <USBD_CtlError>
      break;
 8009d5a:	bf00      	nop
  }

  return ret;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d76:	2300      	movs	r3, #0
 8009d78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	885b      	ldrh	r3, [r3, #2]
 8009d82:	0a1b      	lsrs	r3, r3, #8
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	3b01      	subs	r3, #1
 8009d88:	2b06      	cmp	r3, #6
 8009d8a:	f200 8128 	bhi.w	8009fde <USBD_GetDescriptor+0x276>
 8009d8e:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <USBD_GetDescriptor+0x2c>)
 8009d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d94:	08009db1 	.word	0x08009db1
 8009d98:	08009dc9 	.word	0x08009dc9
 8009d9c:	08009e09 	.word	0x08009e09
 8009da0:	08009fdf 	.word	0x08009fdf
 8009da4:	08009fdf 	.word	0x08009fdf
 8009da8:	08009f7f 	.word	0x08009f7f
 8009dac:	08009fab 	.word	0x08009fab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	7c12      	ldrb	r2, [r2, #16]
 8009dbc:	f107 0108 	add.w	r1, r7, #8
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	4798      	blx	r3
 8009dc4:	60f8      	str	r0, [r7, #12]
      break;
 8009dc6:	e112      	b.n	8009fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7c1b      	ldrb	r3, [r3, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10d      	bne.n	8009dec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd8:	f107 0208 	add.w	r2, r7, #8
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
 8009de0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	2202      	movs	r2, #2
 8009de8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dea:	e100      	b.n	8009fee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	f107 0208 	add.w	r2, r7, #8
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4798      	blx	r3
 8009dfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3301      	adds	r3, #1
 8009e02:	2202      	movs	r2, #2
 8009e04:	701a      	strb	r2, [r3, #0]
      break;
 8009e06:	e0f2      	b.n	8009fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	885b      	ldrh	r3, [r3, #2]
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b05      	cmp	r3, #5
 8009e10:	f200 80ac 	bhi.w	8009f6c <USBD_GetDescriptor+0x204>
 8009e14:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <USBD_GetDescriptor+0xb4>)
 8009e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1a:	bf00      	nop
 8009e1c:	08009e35 	.word	0x08009e35
 8009e20:	08009e69 	.word	0x08009e69
 8009e24:	08009e9d 	.word	0x08009e9d
 8009e28:	08009ed1 	.word	0x08009ed1
 8009e2c:	08009f05 	.word	0x08009f05
 8009e30:	08009f39 	.word	0x08009f39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00b      	beq.n	8009e58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	7c12      	ldrb	r2, [r2, #16]
 8009e4c:	f107 0108 	add.w	r1, r7, #8
 8009e50:	4610      	mov	r0, r2
 8009e52:	4798      	blx	r3
 8009e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e56:	e091      	b.n	8009f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fa97 	bl	800a38e <USBD_CtlError>
            err++;
 8009e60:	7afb      	ldrb	r3, [r7, #11]
 8009e62:	3301      	adds	r3, #1
 8009e64:	72fb      	strb	r3, [r7, #11]
          break;
 8009e66:	e089      	b.n	8009f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00b      	beq.n	8009e8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	7c12      	ldrb	r2, [r2, #16]
 8009e80:	f107 0108 	add.w	r1, r7, #8
 8009e84:	4610      	mov	r0, r2
 8009e86:	4798      	blx	r3
 8009e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e8a:	e077      	b.n	8009f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fa7d 	bl	800a38e <USBD_CtlError>
            err++;
 8009e94:	7afb      	ldrb	r3, [r7, #11]
 8009e96:	3301      	adds	r3, #1
 8009e98:	72fb      	strb	r3, [r7, #11]
          break;
 8009e9a:	e06f      	b.n	8009f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	7c12      	ldrb	r2, [r2, #16]
 8009eb4:	f107 0108 	add.w	r1, r7, #8
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4798      	blx	r3
 8009ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ebe:	e05d      	b.n	8009f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa63 	bl	800a38e <USBD_CtlError>
            err++;
 8009ec8:	7afb      	ldrb	r3, [r7, #11]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ece:	e055      	b.n	8009f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	7c12      	ldrb	r2, [r2, #16]
 8009ee8:	f107 0108 	add.w	r1, r7, #8
 8009eec:	4610      	mov	r0, r2
 8009eee:	4798      	blx	r3
 8009ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef2:	e043      	b.n	8009f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa49 	bl	800a38e <USBD_CtlError>
            err++;
 8009efc:	7afb      	ldrb	r3, [r7, #11]
 8009efe:	3301      	adds	r3, #1
 8009f00:	72fb      	strb	r3, [r7, #11]
          break;
 8009f02:	e03b      	b.n	8009f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	7c12      	ldrb	r2, [r2, #16]
 8009f1c:	f107 0108 	add.w	r1, r7, #8
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f26:	e029      	b.n	8009f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fa2f 	bl	800a38e <USBD_CtlError>
            err++;
 8009f30:	7afb      	ldrb	r3, [r7, #11]
 8009f32:	3301      	adds	r3, #1
 8009f34:	72fb      	strb	r3, [r7, #11]
          break;
 8009f36:	e021      	b.n	8009f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	7c12      	ldrb	r2, [r2, #16]
 8009f50:	f107 0108 	add.w	r1, r7, #8
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
 8009f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f5a:	e00f      	b.n	8009f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fa15 	bl	800a38e <USBD_CtlError>
            err++;
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	3301      	adds	r3, #1
 8009f68:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6a:	e007      	b.n	8009f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fa0d 	bl	800a38e <USBD_CtlError>
          err++;
 8009f74:	7afb      	ldrb	r3, [r7, #11]
 8009f76:	3301      	adds	r3, #1
 8009f78:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f7a:	e038      	b.n	8009fee <USBD_GetDescriptor+0x286>
 8009f7c:	e037      	b.n	8009fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7c1b      	ldrb	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d109      	bne.n	8009f9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f8e:	f107 0208 	add.w	r2, r7, #8
 8009f92:	4610      	mov	r0, r2
 8009f94:	4798      	blx	r3
 8009f96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f98:	e029      	b.n	8009fee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f9f6 	bl	800a38e <USBD_CtlError>
        err++;
 8009fa2:	7afb      	ldrb	r3, [r7, #11]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	72fb      	strb	r3, [r7, #11]
      break;
 8009fa8:	e021      	b.n	8009fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	7c1b      	ldrb	r3, [r3, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10d      	bne.n	8009fce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fba:	f107 0208 	add.w	r2, r7, #8
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	4798      	blx	r3
 8009fc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	2207      	movs	r2, #7
 8009fca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fcc:	e00f      	b.n	8009fee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f9dc 	bl	800a38e <USBD_CtlError>
        err++;
 8009fd6:	7afb      	ldrb	r3, [r7, #11]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	72fb      	strb	r3, [r7, #11]
      break;
 8009fdc:	e007      	b.n	8009fee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f9d4 	bl	800a38e <USBD_CtlError>
      err++;
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	72fb      	strb	r3, [r7, #11]
      break;
 8009fec:	bf00      	nop
  }

  if (err != 0U)
 8009fee:	7afb      	ldrb	r3, [r7, #11]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d11c      	bne.n	800a02e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009ff4:	893b      	ldrh	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d011      	beq.n	800a01e <USBD_GetDescriptor+0x2b6>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	88db      	ldrh	r3, [r3, #6]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00d      	beq.n	800a01e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	88da      	ldrh	r2, [r3, #6]
 800a006:	893b      	ldrh	r3, [r7, #8]
 800a008:	4293      	cmp	r3, r2
 800a00a:	bf28      	it	cs
 800a00c:	4613      	movcs	r3, r2
 800a00e:	b29b      	uxth	r3, r3
 800a010:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a012:	893b      	ldrh	r3, [r7, #8]
 800a014:	461a      	mov	r2, r3
 800a016:	68f9      	ldr	r1, [r7, #12]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fa22 	bl	800a462 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	88db      	ldrh	r3, [r3, #6]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d104      	bne.n	800a030 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa79 	bl	800a51e <USBD_CtlSendStatus>
 800a02c:	e000      	b.n	800a030 <USBD_GetDescriptor+0x2c8>
    return;
 800a02e:	bf00      	nop
    }
  }
}
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop

0800a038 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	889b      	ldrh	r3, [r3, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d130      	bne.n	800a0ac <USBD_SetAddress+0x74>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	88db      	ldrh	r3, [r3, #6]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d12c      	bne.n	800a0ac <USBD_SetAddress+0x74>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	885b      	ldrh	r3, [r3, #2]
 800a056:	2b7f      	cmp	r3, #127	; 0x7f
 800a058:	d828      	bhi.n	800a0ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	885b      	ldrh	r3, [r3, #2]
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a064:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d104      	bne.n	800a07a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f98b 	bl	800a38e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a078:	e01d      	b.n	800a0b6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	7bfa      	ldrb	r2, [r7, #15]
 800a07e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	4619      	mov	r1, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fda2 	bl	800abd0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fa46 	bl	800a51e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d004      	beq.n	800a0a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2202      	movs	r2, #2
 800a09c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a0:	e009      	b.n	800a0b6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0aa:	e004      	b.n	800a0b6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f96d 	bl	800a38e <USBD_CtlError>
  }
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	885b      	ldrh	r3, [r3, #2]
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	4b41      	ldr	r3, [pc, #260]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a0d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0d4:	4b40      	ldr	r3, [pc, #256]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d904      	bls.n	800a0e6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f955 	bl	800a38e <USBD_CtlError>
 800a0e4:	e075      	b.n	800a1d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d002      	beq.n	800a0f6 <USBD_SetConfig+0x36>
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d023      	beq.n	800a13c <USBD_SetConfig+0x7c>
 800a0f4:	e062      	b.n	800a1bc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a0f6:	4b38      	ldr	r3, [pc, #224]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d01a      	beq.n	800a134 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a0fe:	4b36      	ldr	r3, [pc, #216]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2203      	movs	r2, #3
 800a10c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a110:	4b31      	ldr	r3, [pc, #196]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7ff f9e8 	bl	80094ec <USBD_SetClassConfig>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d104      	bne.n	800a12c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f932 	bl	800a38e <USBD_CtlError>
            return;
 800a12a:	e052      	b.n	800a1d2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f9f6 	bl	800a51e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a132:	e04e      	b.n	800a1d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f9f2 	bl	800a51e <USBD_CtlSendStatus>
        break;
 800a13a:	e04a      	b.n	800a1d2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a13c:	4b26      	ldr	r3, [pc, #152]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d112      	bne.n	800a16a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a14c:	4b22      	ldr	r3, [pc, #136]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a156:	4b20      	ldr	r3, [pc, #128]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff f9e4 	bl	800952a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f9db 	bl	800a51e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a168:	e033      	b.n	800a1d2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a16a:	4b1b      	ldr	r3, [pc, #108]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d01d      	beq.n	800a1b4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff f9d2 	bl	800952a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a186:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a190:	4b11      	ldr	r3, [pc, #68]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff f9a8 	bl	80094ec <USBD_SetClassConfig>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d104      	bne.n	800a1ac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f8f2 	bl	800a38e <USBD_CtlError>
            return;
 800a1aa:	e012      	b.n	800a1d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f9b6 	bl	800a51e <USBD_CtlSendStatus>
        break;
 800a1b2:	e00e      	b.n	800a1d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f9b2 	bl	800a51e <USBD_CtlSendStatus>
        break;
 800a1ba:	e00a      	b.n	800a1d2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f8e5 	bl	800a38e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a1c4:	4b04      	ldr	r3, [pc, #16]	; (800a1d8 <USBD_SetConfig+0x118>)
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff f9ad 	bl	800952a <USBD_ClrClassConfig>
        break;
 800a1d0:	bf00      	nop
    }
  }
}
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	200003a0 	.word	0x200003a0

0800a1dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	88db      	ldrh	r3, [r3, #6]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d004      	beq.n	800a1f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f8cc 	bl	800a38e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1f6:	e022      	b.n	800a23e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	dc02      	bgt.n	800a208 <USBD_GetConfig+0x2c>
 800a202:	2b00      	cmp	r3, #0
 800a204:	dc03      	bgt.n	800a20e <USBD_GetConfig+0x32>
 800a206:	e015      	b.n	800a234 <USBD_GetConfig+0x58>
 800a208:	2b03      	cmp	r3, #3
 800a20a:	d00b      	beq.n	800a224 <USBD_GetConfig+0x48>
 800a20c:	e012      	b.n	800a234 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3308      	adds	r3, #8
 800a218:	2201      	movs	r2, #1
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f920 	bl	800a462 <USBD_CtlSendData>
        break;
 800a222:	e00c      	b.n	800a23e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3304      	adds	r3, #4
 800a228:	2201      	movs	r2, #1
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f918 	bl	800a462 <USBD_CtlSendData>
        break;
 800a232:	e004      	b.n	800a23e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f8a9 	bl	800a38e <USBD_CtlError>
        break;
 800a23c:	bf00      	nop
}
 800a23e:	bf00      	nop
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b082      	sub	sp, #8
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a256:	3b01      	subs	r3, #1
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d81e      	bhi.n	800a29a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	88db      	ldrh	r3, [r3, #6]
 800a260:	2b02      	cmp	r3, #2
 800a262:	d004      	beq.n	800a26e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f891 	bl	800a38e <USBD_CtlError>
        break;
 800a26c:	e01a      	b.n	800a2a4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d005      	beq.n	800a28a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	f043 0202 	orr.w	r2, r3, #2
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	330c      	adds	r3, #12
 800a28e:	2202      	movs	r2, #2
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f8e5 	bl	800a462 <USBD_CtlSendData>
      break;
 800a298:	e004      	b.n	800a2a4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f876 	bl	800a38e <USBD_CtlError>
      break;
 800a2a2:	bf00      	nop
  }
}
 800a2a4:	bf00      	nop
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	885b      	ldrh	r3, [r3, #2]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d106      	bne.n	800a2cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f929 	bl	800a51e <USBD_CtlSendStatus>
  }
}
 800a2cc:	bf00      	nop
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d80b      	bhi.n	800a302 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	885b      	ldrh	r3, [r3, #2]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d10c      	bne.n	800a30c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f90f 	bl	800a51e <USBD_CtlSendStatus>
      }
      break;
 800a300:	e004      	b.n	800a30c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f842 	bl	800a38e <USBD_CtlError>
      break;
 800a30a:	e000      	b.n	800a30e <USBD_ClrFeature+0x3a>
      break;
 800a30c:	bf00      	nop
  }
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	781a      	ldrb	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	785a      	ldrb	r2, [r3, #1]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	3302      	adds	r3, #2
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	b29a      	uxth	r2, r3
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	3303      	adds	r3, #3
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	021b      	lsls	r3, r3, #8
 800a342:	b29b      	uxth	r3, r3
 800a344:	4413      	add	r3, r2
 800a346:	b29a      	uxth	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	3304      	adds	r3, #4
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	b29a      	uxth	r2, r3
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	3305      	adds	r3, #5
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	b29b      	uxth	r3, r3
 800a360:	4413      	add	r3, r2
 800a362:	b29a      	uxth	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	3306      	adds	r3, #6
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	b29a      	uxth	r2, r3
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	3307      	adds	r3, #7
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	b29b      	uxth	r3, r3
 800a378:	021b      	lsls	r3, r3, #8
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	4413      	add	r3, r2
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	80da      	strh	r2, [r3, #6]

}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	bc80      	pop	{r7}
 800a38c:	4770      	bx	lr

0800a38e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a398:	2180      	movs	r1, #128	; 0x80
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fbae 	bl	800aafc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fbaa 	bl	800aafc <USBD_LL_StallEP>
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d032      	beq.n	800a42c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 f834 	bl	800a434 <USBD_GetLen>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	1c5a      	adds	r2, r3, #1
 800a3de:	75fa      	strb	r2, [r7, #23]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	7812      	ldrb	r2, [r2, #0]
 800a3ea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	75fa      	strb	r2, [r7, #23]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	2203      	movs	r2, #3
 800a3fa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a3fc:	e012      	b.n	800a424 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	60fa      	str	r2, [r7, #12]
 800a404:	7dfa      	ldrb	r2, [r7, #23]
 800a406:	1c51      	adds	r1, r2, #1
 800a408:	75f9      	strb	r1, [r7, #23]
 800a40a:	4611      	mov	r1, r2
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	440a      	add	r2, r1
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a414:	7dfb      	ldrb	r3, [r7, #23]
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	75fa      	strb	r2, [r7, #23]
 800a41a:	461a      	mov	r2, r3
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4413      	add	r3, r2
 800a420:	2200      	movs	r2, #0
 800a422:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e8      	bne.n	800a3fe <USBD_GetString+0x4e>
    }
  }
}
 800a42c:	bf00      	nop
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a440:	e005      	b.n	800a44e <USBD_GetLen+0x1a>
  {
    len++;
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	3301      	adds	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3301      	adds	r3, #1
 800a44c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1f5      	bne.n	800a442 <USBD_GetLen+0xe>
  }

  return len;
 800a456:	7bfb      	ldrb	r3, [r7, #15]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bc80      	pop	{r7}
 800a460:	4770      	bx	lr

0800a462 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	60f8      	str	r0, [r7, #12]
 800a46a:	60b9      	str	r1, [r7, #8]
 800a46c:	4613      	mov	r3, r2
 800a46e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2202      	movs	r2, #2
 800a474:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a478:	88fa      	ldrh	r2, [r7, #6]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a47e:	88fa      	ldrh	r2, [r7, #6]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a484:	88fb      	ldrh	r3, [r7, #6]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	2100      	movs	r1, #0
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 fbbf 	bl	800ac0e <USBD_LL_Transmit>

  return USBD_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4a8:	88fb      	ldrh	r3, [r7, #6]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f000 fbad 	bl	800ac0e <USBD_LL_Transmit>

  return USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	60f8      	str	r0, [r7, #12]
 800a4c6:	60b9      	str	r1, [r7, #8]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2203      	movs	r2, #3
 800a4d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4d4:	88fa      	ldrh	r2, [r7, #6]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a4dc:	88fa      	ldrh	r2, [r7, #6]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4e4:	88fb      	ldrh	r3, [r7, #6]
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fbb2 	bl	800ac54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	4613      	mov	r3, r2
 800a506:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a508:	88fb      	ldrh	r3, [r7, #6]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	2100      	movs	r1, #0
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 fba0 	bl	800ac54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2204      	movs	r2, #4
 800a52a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a52e:	2300      	movs	r3, #0
 800a530:	2200      	movs	r2, #0
 800a532:	2100      	movs	r1, #0
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fb6a 	bl	800ac0e <USBD_LL_Transmit>

  return USBD_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2205      	movs	r2, #5
 800a550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a554:	2300      	movs	r3, #0
 800a556:	2200      	movs	r2, #0
 800a558:	2100      	movs	r1, #0
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fb7a 	bl	800ac54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
	...

0800a56c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a570:	2200      	movs	r2, #0
 800a572:	4912      	ldr	r1, [pc, #72]	; (800a5bc <MX_USB_DEVICE_Init+0x50>)
 800a574:	4812      	ldr	r0, [pc, #72]	; (800a5c0 <MX_USB_DEVICE_Init+0x54>)
 800a576:	f7fe ff5f 	bl	8009438 <USBD_Init>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a580:	f7f7 f896 	bl	80016b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a584:	490f      	ldr	r1, [pc, #60]	; (800a5c4 <MX_USB_DEVICE_Init+0x58>)
 800a586:	480e      	ldr	r0, [pc, #56]	; (800a5c0 <MX_USB_DEVICE_Init+0x54>)
 800a588:	f7fe ff81 	bl	800948e <USBD_RegisterClass>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a592:	f7f7 f88d 	bl	80016b0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a596:	490c      	ldr	r1, [pc, #48]	; (800a5c8 <MX_USB_DEVICE_Init+0x5c>)
 800a598:	4809      	ldr	r0, [pc, #36]	; (800a5c0 <MX_USB_DEVICE_Init+0x54>)
 800a59a:	f7fe ff37 	bl	800940c <USBD_CUSTOM_HID_RegisterInterface>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5a4:	f7f7 f884 	bl	80016b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5a8:	4805      	ldr	r0, [pc, #20]	; (800a5c0 <MX_USB_DEVICE_Init+0x54>)
 800a5aa:	f7fe ff89 	bl	80094c0 <USBD_Start>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5b4:	f7f7 f87c 	bl	80016b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5b8:	bf00      	nop
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	2000011c 	.word	0x2000011c
 800a5c0:	200003a4 	.word	0x200003a4
 800a5c4:	20000018 	.word	0x20000018
 800a5c8:	2000010c 	.word	0x2000010c

0800a5cc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bc80      	pop	{r7}
 800a5d8:	4770      	bx	lr

0800a5da <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a5de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bc80      	pop	{r7}
 800a5e6:	4770      	bx	lr

0800a5e8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800a5f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bc80      	pop	{r7}
 800a5fa:	4770      	bx	lr

0800a5fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	4603      	mov	r3, r0
 800a604:	6039      	str	r1, [r7, #0]
 800a606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2212      	movs	r2, #18
 800a60c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a60e:	4b03      	ldr	r3, [pc, #12]	; (800a61c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	bc80      	pop	{r7}
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	20000138 	.word	0x20000138

0800a620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	6039      	str	r1, [r7, #0]
 800a62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2204      	movs	r2, #4
 800a630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a632:	4b03      	ldr	r3, [pc, #12]	; (800a640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a634:	4618      	mov	r0, r3
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	bc80      	pop	{r7}
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	2000014c 	.word	0x2000014c

0800a644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	6039      	str	r1, [r7, #0]
 800a64e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d105      	bne.n	800a662 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	4907      	ldr	r1, [pc, #28]	; (800a678 <USBD_FS_ProductStrDescriptor+0x34>)
 800a65a:	4808      	ldr	r0, [pc, #32]	; (800a67c <USBD_FS_ProductStrDescriptor+0x38>)
 800a65c:	f7ff fea8 	bl	800a3b0 <USBD_GetString>
 800a660:	e004      	b.n	800a66c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	4904      	ldr	r1, [pc, #16]	; (800a678 <USBD_FS_ProductStrDescriptor+0x34>)
 800a666:	4805      	ldr	r0, [pc, #20]	; (800a67c <USBD_FS_ProductStrDescriptor+0x38>)
 800a668:	f7ff fea2 	bl	800a3b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a66c:	4b02      	ldr	r3, [pc, #8]	; (800a678 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20000668 	.word	0x20000668
 800a67c:	0800c390 	.word	0x0800c390

0800a680 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	6039      	str	r1, [r7, #0]
 800a68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	4904      	ldr	r1, [pc, #16]	; (800a6a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a690:	4804      	ldr	r0, [pc, #16]	; (800a6a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a692:	f7ff fe8d 	bl	800a3b0 <USBD_GetString>
  return USBD_StrDesc;
 800a696:	4b02      	ldr	r3, [pc, #8]	; (800a6a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20000668 	.word	0x20000668
 800a6a4:	0800c3a0 	.word	0x0800c3a0

0800a6a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	6039      	str	r1, [r7, #0]
 800a6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	221a      	movs	r2, #26
 800a6b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6ba:	f000 f843 	bl	800a744 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6be:	4b02      	ldr	r3, [pc, #8]	; (800a6c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	20000150 	.word	0x20000150

0800a6cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	6039      	str	r1, [r7, #0]
 800a6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6d8:	79fb      	ldrb	r3, [r7, #7]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d105      	bne.n	800a6ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	4907      	ldr	r1, [pc, #28]	; (800a700 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6e2:	4808      	ldr	r0, [pc, #32]	; (800a704 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6e4:	f7ff fe64 	bl	800a3b0 <USBD_GetString>
 800a6e8:	e004      	b.n	800a6f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	4904      	ldr	r1, [pc, #16]	; (800a700 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6ee:	4805      	ldr	r0, [pc, #20]	; (800a704 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6f0:	f7ff fe5e 	bl	800a3b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6f4:	4b02      	ldr	r3, [pc, #8]	; (800a700 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000668 	.word	0x20000668
 800a704:	0800c3ac 	.word	0x0800c3ac

0800a708 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	6039      	str	r1, [r7, #0]
 800a712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d105      	bne.n	800a726 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	4907      	ldr	r1, [pc, #28]	; (800a73c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a71e:	4808      	ldr	r0, [pc, #32]	; (800a740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a720:	f7ff fe46 	bl	800a3b0 <USBD_GetString>
 800a724:	e004      	b.n	800a730 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	4904      	ldr	r1, [pc, #16]	; (800a73c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a72a:	4805      	ldr	r0, [pc, #20]	; (800a740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a72c:	f7ff fe40 	bl	800a3b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a730:	4b02      	ldr	r3, [pc, #8]	; (800a73c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000668 	.word	0x20000668
 800a740:	0800c3c0 	.word	0x0800c3c0

0800a744 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a74a:	4b0f      	ldr	r3, [pc, #60]	; (800a788 <Get_SerialNum+0x44>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a750:	4b0e      	ldr	r3, [pc, #56]	; (800a78c <Get_SerialNum+0x48>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a756:	4b0e      	ldr	r3, [pc, #56]	; (800a790 <Get_SerialNum+0x4c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4413      	add	r3, r2
 800a762:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a76a:	2208      	movs	r2, #8
 800a76c:	4909      	ldr	r1, [pc, #36]	; (800a794 <Get_SerialNum+0x50>)
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f000 f814 	bl	800a79c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a774:	2204      	movs	r2, #4
 800a776:	4908      	ldr	r1, [pc, #32]	; (800a798 <Get_SerialNum+0x54>)
 800a778:	68b8      	ldr	r0, [r7, #8]
 800a77a:	f000 f80f 	bl	800a79c <IntToUnicode>
  }
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	1ffff7e8 	.word	0x1ffff7e8
 800a78c:	1ffff7ec 	.word	0x1ffff7ec
 800a790:	1ffff7f0 	.word	0x1ffff7f0
 800a794:	20000152 	.word	0x20000152
 800a798:	20000162 	.word	0x20000162

0800a79c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	75fb      	strb	r3, [r7, #23]
 800a7b2:	e027      	b.n	800a804 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	0f1b      	lsrs	r3, r3, #28
 800a7b8:	2b09      	cmp	r3, #9
 800a7ba:	d80b      	bhi.n	800a7d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	0f1b      	lsrs	r3, r3, #28
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	440b      	add	r3, r1
 800a7cc:	3230      	adds	r2, #48	; 0x30
 800a7ce:	b2d2      	uxtb	r2, r2
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	e00a      	b.n	800a7ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	0f1b      	lsrs	r3, r3, #28
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	4619      	mov	r1, r3
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	440b      	add	r3, r1
 800a7e4:	3237      	adds	r2, #55	; 0x37
 800a7e6:	b2d2      	uxtb	r2, r2
 800a7e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	011b      	lsls	r3, r3, #4
 800a7ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	3301      	adds	r3, #1
 800a802:	75fb      	strb	r3, [r7, #23]
 800a804:	7dfa      	ldrb	r2, [r7, #23]
 800a806:	79fb      	ldrb	r3, [r7, #7]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d3d3      	bcc.n	800a7b4 <IntToUnicode+0x18>
  }
}
 800a80c:	bf00      	nop
 800a80e:	bf00      	nop
 800a810:	371c      	adds	r7, #28
 800a812:	46bd      	mov	sp, r7
 800a814:	bc80      	pop	{r7}
 800a816:	4770      	bx	lr

0800a818 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a0d      	ldr	r2, [pc, #52]	; (800a85c <HAL_PCD_MspInit+0x44>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d113      	bne.n	800a852 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a82a:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <HAL_PCD_MspInit+0x48>)
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	4a0c      	ldr	r2, [pc, #48]	; (800a860 <HAL_PCD_MspInit+0x48>)
 800a830:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a834:	61d3      	str	r3, [r2, #28]
 800a836:	4b0a      	ldr	r3, [pc, #40]	; (800a860 <HAL_PCD_MspInit+0x48>)
 800a838:	69db      	ldr	r3, [r3, #28]
 800a83a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a83e:	60fb      	str	r3, [r7, #12]
 800a840:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a842:	2200      	movs	r2, #0
 800a844:	2100      	movs	r1, #0
 800a846:	2014      	movs	r0, #20
 800a848:	f7f7 fef7 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a84c:	2014      	movs	r0, #20
 800a84e:	f7f7 ff10 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a852:	bf00      	nop
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	40005c00 	.word	0x40005c00
 800a860:	40021000 	.word	0x40021000

0800a864 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a878:	4619      	mov	r1, r3
 800a87a:	4610      	mov	r0, r2
 800a87c:	f7fe fe68 	bl	8009550 <USBD_LL_SetupStage>
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a89a:	78fa      	ldrb	r2, [r7, #3]
 800a89c:	6879      	ldr	r1, [r7, #4]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	440b      	add	r3, r1
 800a8a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	78fb      	ldrb	r3, [r7, #3]
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	f7fe fe9a 	bl	80095ea <USBD_LL_DataOutStage>
}
 800a8b6:	bf00      	nop
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a8d0:	78fa      	ldrb	r2, [r7, #3]
 800a8d2:	6879      	ldr	r1, [r7, #4]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	00db      	lsls	r3, r3, #3
 800a8dc:	440b      	add	r3, r1
 800a8de:	333c      	adds	r3, #60	; 0x3c
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	78fb      	ldrb	r3, [r7, #3]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	f7fe fef1 	bl	80096cc <USBD_LL_DataInStage>
}
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b082      	sub	sp, #8
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a900:	4618      	mov	r0, r3
 800a902:	f7ff f801 	bl	8009908 <USBD_LL_SOF>
}
 800a906:	bf00      	nop
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a916:	2301      	movs	r3, #1
 800a918:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d001      	beq.n	800a926 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a922:	f7f6 fec5 	bl	80016b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a92c:	7bfa      	ldrb	r2, [r7, #15]
 800a92e:	4611      	mov	r1, r2
 800a930:	4618      	mov	r0, r3
 800a932:	f7fe ffb1 	bl	8009898 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe ff6a 	bl	8009816 <USBD_LL_Reset>
}
 800a942:	bf00      	nop
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
	...

0800a94c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fe ffab 	bl	80098b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d005      	beq.n	800a974 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a968:	4b04      	ldr	r3, [pc, #16]	; (800a97c <HAL_PCD_SuspendCallback+0x30>)
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	4a03      	ldr	r2, [pc, #12]	; (800a97c <HAL_PCD_SuspendCallback+0x30>)
 800a96e:	f043 0306 	orr.w	r3, r3, #6
 800a972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	e000ed00 	.word	0xe000ed00

0800a980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe ffa5 	bl	80098de <USBD_LL_Resume>
}
 800a994:	bf00      	nop
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a9a4:	4a23      	ldr	r2, [pc, #140]	; (800aa34 <USBD_LL_Init+0x98>)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a21      	ldr	r2, [pc, #132]	; (800aa34 <USBD_LL_Init+0x98>)
 800a9b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a9b4:	4b1f      	ldr	r3, [pc, #124]	; (800aa34 <USBD_LL_Init+0x98>)
 800a9b6:	4a20      	ldr	r2, [pc, #128]	; (800aa38 <USBD_LL_Init+0x9c>)
 800a9b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a9ba:	4b1e      	ldr	r3, [pc, #120]	; (800aa34 <USBD_LL_Init+0x98>)
 800a9bc:	2208      	movs	r2, #8
 800a9be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a9c0:	4b1c      	ldr	r3, [pc, #112]	; (800aa34 <USBD_LL_Init+0x98>)
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a9c6:	4b1b      	ldr	r3, [pc, #108]	; (800aa34 <USBD_LL_Init+0x98>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a9cc:	4b19      	ldr	r3, [pc, #100]	; (800aa34 <USBD_LL_Init+0x98>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a9d2:	4b18      	ldr	r3, [pc, #96]	; (800aa34 <USBD_LL_Init+0x98>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a9d8:	4816      	ldr	r0, [pc, #88]	; (800aa34 <USBD_LL_Init+0x98>)
 800a9da:	f7f8 fcc1 	bl	8003360 <HAL_PCD_Init>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a9e4:	f7f6 fe64 	bl	80016b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9ee:	2318      	movs	r3, #24
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	f7fa f91e 	bl	8004c34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9fe:	2358      	movs	r3, #88	; 0x58
 800aa00:	2200      	movs	r2, #0
 800aa02:	2180      	movs	r1, #128	; 0x80
 800aa04:	f7fa f916 	bl	8004c34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa0e:	2398      	movs	r3, #152	; 0x98
 800aa10:	2200      	movs	r2, #0
 800aa12:	2181      	movs	r1, #129	; 0x81
 800aa14:	f7fa f90e 	bl	8004c34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa1e:	23d8      	movs	r3, #216	; 0xd8
 800aa20:	2200      	movs	r2, #0
 800aa22:	2101      	movs	r1, #1
 800aa24:	f7fa f906 	bl	8004c34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20000868 	.word	0x20000868
 800aa38:	40005c00 	.word	0x40005c00

0800aa3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7f8 fd8f 	bl	8003576 <HAL_PCD_Start>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 f93c 	bl	800acdc <USBD_Get_USB_Status>
 800aa64:	4603      	mov	r3, r0
 800aa66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	4608      	mov	r0, r1
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	461a      	mov	r2, r3
 800aa80:	4603      	mov	r3, r0
 800aa82:	70fb      	strb	r3, [r7, #3]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70bb      	strb	r3, [r7, #2]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa9a:	78bb      	ldrb	r3, [r7, #2]
 800aa9c:	883a      	ldrh	r2, [r7, #0]
 800aa9e:	78f9      	ldrb	r1, [r7, #3]
 800aaa0:	f7f8 ff07 	bl	80038b2 <HAL_PCD_EP_Open>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 f916 	bl	800acdc <USBD_Get_USB_Status>
 800aab0:	4603      	mov	r3, r0
 800aab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	460b      	mov	r3, r1
 800aac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aad8:	78fa      	ldrb	r2, [r7, #3]
 800aada:	4611      	mov	r1, r2
 800aadc:	4618      	mov	r0, r3
 800aade:	f7f8 ff4e 	bl	800397e <HAL_PCD_EP_Close>
 800aae2:	4603      	mov	r3, r0
 800aae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 f8f7 	bl	800acdc <USBD_Get_USB_Status>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab16:	78fa      	ldrb	r2, [r7, #3]
 800ab18:	4611      	mov	r1, r2
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7f8 fff7 	bl	8003b0e <HAL_PCD_EP_SetStall>
 800ab20:	4603      	mov	r3, r0
 800ab22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 f8d8 	bl	800acdc <USBD_Get_USB_Status>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b084      	sub	sp, #16
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	460b      	mov	r3, r1
 800ab44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab54:	78fa      	ldrb	r2, [r7, #3]
 800ab56:	4611      	mov	r1, r2
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7f9 f838 	bl	8003bce <HAL_PCD_EP_ClrStall>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 f8b9 	bl	800acdc <USBD_Get_USB_Status>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	da0c      	bge.n	800abae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab94:	78fb      	ldrb	r3, [r7, #3]
 800ab96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab9a:	68f9      	ldr	r1, [r7, #12]
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	440b      	add	r3, r1
 800aba8:	3302      	adds	r3, #2
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	e00b      	b.n	800abc6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800abae:	78fb      	ldrb	r3, [r7, #3]
 800abb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abb4:	68f9      	ldr	r1, [r7, #12]
 800abb6:	4613      	mov	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	440b      	add	r3, r1
 800abc0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800abc4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3714      	adds	r7, #20
 800abca:	46bd      	mov	sp, r7
 800abcc:	bc80      	pop	{r7}
 800abce:	4770      	bx	lr

0800abd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abea:	78fa      	ldrb	r2, [r7, #3]
 800abec:	4611      	mov	r1, r2
 800abee:	4618      	mov	r0, r3
 800abf0:	f7f8 fe3a 	bl	8003868 <HAL_PCD_SetAddress>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 f86e 	bl	800acdc <USBD_Get_USB_Status>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b086      	sub	sp, #24
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	60f8      	str	r0, [r7, #12]
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	461a      	mov	r2, r3
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	72fb      	strb	r3, [r7, #11]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac30:	893b      	ldrh	r3, [r7, #8]
 800ac32:	7af9      	ldrb	r1, [r7, #11]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	f7f8 ff27 	bl	8003a88 <HAL_PCD_EP_Transmit>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 f84b 	bl	800acdc <USBD_Get_USB_Status>
 800ac46:	4603      	mov	r3, r0
 800ac48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	607a      	str	r2, [r7, #4]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	460b      	mov	r3, r1
 800ac62:	72fb      	strb	r3, [r7, #11]
 800ac64:	4613      	mov	r3, r2
 800ac66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac76:	893b      	ldrh	r3, [r7, #8]
 800ac78:	7af9      	ldrb	r1, [r7, #11]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	f7f8 fec7 	bl	8003a0e <HAL_PCD_EP_Receive>
 800ac80:	4603      	mov	r3, r0
 800ac82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 f828 	bl	800acdc <USBD_Get_USB_Status>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac90:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
	...

0800ac9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800aca4:	4b02      	ldr	r3, [pc, #8]	; (800acb0 <USBD_static_malloc+0x14>)
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	bc80      	pop	{r7}
 800acae:	4770      	bx	lr
 800acb0:	20000b54 	.word	0x20000b54

0800acb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]

}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bc80      	pop	{r7}
 800acc4:	4770      	bx	lr

0800acc6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc6:	b480      	push	{r7}
 800acc8:	b083      	sub	sp, #12
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	460b      	mov	r3, r1
 800acd0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800acd2:	bf00      	nop
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bc80      	pop	{r7}
 800acda:	4770      	bx	lr

0800acdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	2b03      	cmp	r3, #3
 800acee:	d817      	bhi.n	800ad20 <USBD_Get_USB_Status+0x44>
 800acf0:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <USBD_Get_USB_Status+0x1c>)
 800acf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf6:	bf00      	nop
 800acf8:	0800ad09 	.word	0x0800ad09
 800acfc:	0800ad0f 	.word	0x0800ad0f
 800ad00:	0800ad15 	.word	0x0800ad15
 800ad04:	0800ad1b 	.word	0x0800ad1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad0c:	e00b      	b.n	800ad26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad0e:	2302      	movs	r3, #2
 800ad10:	73fb      	strb	r3, [r7, #15]
    break;
 800ad12:	e008      	b.n	800ad26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad14:	2301      	movs	r3, #1
 800ad16:	73fb      	strb	r3, [r7, #15]
    break;
 800ad18:	e005      	b.n	800ad26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad1a:	2302      	movs	r3, #2
 800ad1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad1e:	e002      	b.n	800ad26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad20:	2302      	movs	r3, #2
 800ad22:	73fb      	strb	r3, [r7, #15]
    break;
 800ad24:	bf00      	nop
  }
  return usb_status;
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bc80      	pop	{r7}
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop

0800ad34 <atoi>:
 800ad34:	220a      	movs	r2, #10
 800ad36:	2100      	movs	r1, #0
 800ad38:	f000 b932 	b.w	800afa0 <strtol>

0800ad3c <__errno>:
 800ad3c:	4b01      	ldr	r3, [pc, #4]	; (800ad44 <__errno+0x8>)
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	2000016c 	.word	0x2000016c

0800ad48 <__libc_init_array>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	2600      	movs	r6, #0
 800ad4c:	4d0c      	ldr	r5, [pc, #48]	; (800ad80 <__libc_init_array+0x38>)
 800ad4e:	4c0d      	ldr	r4, [pc, #52]	; (800ad84 <__libc_init_array+0x3c>)
 800ad50:	1b64      	subs	r4, r4, r5
 800ad52:	10a4      	asrs	r4, r4, #2
 800ad54:	42a6      	cmp	r6, r4
 800ad56:	d109      	bne.n	800ad6c <__libc_init_array+0x24>
 800ad58:	f001 fae8 	bl	800c32c <_init>
 800ad5c:	2600      	movs	r6, #0
 800ad5e:	4d0a      	ldr	r5, [pc, #40]	; (800ad88 <__libc_init_array+0x40>)
 800ad60:	4c0a      	ldr	r4, [pc, #40]	; (800ad8c <__libc_init_array+0x44>)
 800ad62:	1b64      	subs	r4, r4, r5
 800ad64:	10a4      	asrs	r4, r4, #2
 800ad66:	42a6      	cmp	r6, r4
 800ad68:	d105      	bne.n	800ad76 <__libc_init_array+0x2e>
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad70:	4798      	blx	r3
 800ad72:	3601      	adds	r6, #1
 800ad74:	e7ee      	b.n	800ad54 <__libc_init_array+0xc>
 800ad76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7a:	4798      	blx	r3
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	e7f2      	b.n	800ad66 <__libc_init_array+0x1e>
 800ad80:	0800c638 	.word	0x0800c638
 800ad84:	0800c638 	.word	0x0800c638
 800ad88:	0800c638 	.word	0x0800c638
 800ad8c:	0800c63c 	.word	0x0800c63c

0800ad90 <memset>:
 800ad90:	4603      	mov	r3, r0
 800ad92:	4402      	add	r2, r0
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d100      	bne.n	800ad9a <memset+0xa>
 800ad98:	4770      	bx	lr
 800ad9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad9e:	e7f9      	b.n	800ad94 <memset+0x4>

0800ada0 <siprintf>:
 800ada0:	b40e      	push	{r1, r2, r3}
 800ada2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ada6:	b500      	push	{lr}
 800ada8:	b09c      	sub	sp, #112	; 0x70
 800adaa:	ab1d      	add	r3, sp, #116	; 0x74
 800adac:	9002      	str	r0, [sp, #8]
 800adae:	9006      	str	r0, [sp, #24]
 800adb0:	9107      	str	r1, [sp, #28]
 800adb2:	9104      	str	r1, [sp, #16]
 800adb4:	4808      	ldr	r0, [pc, #32]	; (800add8 <siprintf+0x38>)
 800adb6:	4909      	ldr	r1, [pc, #36]	; (800addc <siprintf+0x3c>)
 800adb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adbc:	9105      	str	r1, [sp, #20]
 800adbe:	6800      	ldr	r0, [r0, #0]
 800adc0:	a902      	add	r1, sp, #8
 800adc2:	9301      	str	r3, [sp, #4]
 800adc4:	f000 fa66 	bl	800b294 <_svfiprintf_r>
 800adc8:	2200      	movs	r2, #0
 800adca:	9b02      	ldr	r3, [sp, #8]
 800adcc:	701a      	strb	r2, [r3, #0]
 800adce:	b01c      	add	sp, #112	; 0x70
 800add0:	f85d eb04 	ldr.w	lr, [sp], #4
 800add4:	b003      	add	sp, #12
 800add6:	4770      	bx	lr
 800add8:	2000016c 	.word	0x2000016c
 800addc:	ffff0208 	.word	0xffff0208

0800ade0 <strcpy>:
 800ade0:	4603      	mov	r3, r0
 800ade2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ade6:	f803 2b01 	strb.w	r2, [r3], #1
 800adea:	2a00      	cmp	r2, #0
 800adec:	d1f9      	bne.n	800ade2 <strcpy+0x2>
 800adee:	4770      	bx	lr

0800adf0 <strtok>:
 800adf0:	4b16      	ldr	r3, [pc, #88]	; (800ae4c <strtok+0x5c>)
 800adf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf6:	681f      	ldr	r7, [r3, #0]
 800adf8:	4605      	mov	r5, r0
 800adfa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800adfc:	460e      	mov	r6, r1
 800adfe:	b9ec      	cbnz	r4, 800ae3c <strtok+0x4c>
 800ae00:	2050      	movs	r0, #80	; 0x50
 800ae02:	f000 f907 	bl	800b014 <malloc>
 800ae06:	4602      	mov	r2, r0
 800ae08:	65b8      	str	r0, [r7, #88]	; 0x58
 800ae0a:	b920      	cbnz	r0, 800ae16 <strtok+0x26>
 800ae0c:	2157      	movs	r1, #87	; 0x57
 800ae0e:	4b10      	ldr	r3, [pc, #64]	; (800ae50 <strtok+0x60>)
 800ae10:	4810      	ldr	r0, [pc, #64]	; (800ae54 <strtok+0x64>)
 800ae12:	f000 f8cf 	bl	800afb4 <__assert_func>
 800ae16:	e9c0 4400 	strd	r4, r4, [r0]
 800ae1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ae1e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ae22:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ae26:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ae2a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ae2e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ae32:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ae36:	6184      	str	r4, [r0, #24]
 800ae38:	7704      	strb	r4, [r0, #28]
 800ae3a:	6244      	str	r4, [r0, #36]	; 0x24
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4628      	mov	r0, r5
 800ae40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae42:	2301      	movs	r3, #1
 800ae44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae48:	f000 b806 	b.w	800ae58 <__strtok_r>
 800ae4c:	2000016c 	.word	0x2000016c
 800ae50:	0800c3f4 	.word	0x0800c3f4
 800ae54:	0800c40b 	.word	0x0800c40b

0800ae58 <__strtok_r>:
 800ae58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae5a:	b908      	cbnz	r0, 800ae60 <__strtok_r+0x8>
 800ae5c:	6810      	ldr	r0, [r2, #0]
 800ae5e:	b188      	cbz	r0, 800ae84 <__strtok_r+0x2c>
 800ae60:	4604      	mov	r4, r0
 800ae62:	460f      	mov	r7, r1
 800ae64:	4620      	mov	r0, r4
 800ae66:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ae6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ae6e:	b91e      	cbnz	r6, 800ae78 <__strtok_r+0x20>
 800ae70:	b965      	cbnz	r5, 800ae8c <__strtok_r+0x34>
 800ae72:	4628      	mov	r0, r5
 800ae74:	6015      	str	r5, [r2, #0]
 800ae76:	e005      	b.n	800ae84 <__strtok_r+0x2c>
 800ae78:	42b5      	cmp	r5, r6
 800ae7a:	d1f6      	bne.n	800ae6a <__strtok_r+0x12>
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1f0      	bne.n	800ae62 <__strtok_r+0xa>
 800ae80:	6014      	str	r4, [r2, #0]
 800ae82:	7003      	strb	r3, [r0, #0]
 800ae84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae86:	461c      	mov	r4, r3
 800ae88:	e00c      	b.n	800aea4 <__strtok_r+0x4c>
 800ae8a:	b915      	cbnz	r5, 800ae92 <__strtok_r+0x3a>
 800ae8c:	460e      	mov	r6, r1
 800ae8e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae92:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ae96:	42ab      	cmp	r3, r5
 800ae98:	d1f7      	bne.n	800ae8a <__strtok_r+0x32>
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0f3      	beq.n	800ae86 <__strtok_r+0x2e>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aea4:	6014      	str	r4, [r2, #0]
 800aea6:	e7ed      	b.n	800ae84 <__strtok_r+0x2c>

0800aea8 <_strtol_l.constprop.0>:
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeae:	4680      	mov	r8, r0
 800aeb0:	d001      	beq.n	800aeb6 <_strtol_l.constprop.0+0xe>
 800aeb2:	2b24      	cmp	r3, #36	; 0x24
 800aeb4:	d906      	bls.n	800aec4 <_strtol_l.constprop.0+0x1c>
 800aeb6:	f7ff ff41 	bl	800ad3c <__errno>
 800aeba:	2316      	movs	r3, #22
 800aebc:	6003      	str	r3, [r0, #0]
 800aebe:	2000      	movs	r0, #0
 800aec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec4:	460d      	mov	r5, r1
 800aec6:	4f35      	ldr	r7, [pc, #212]	; (800af9c <_strtol_l.constprop.0+0xf4>)
 800aec8:	4628      	mov	r0, r5
 800aeca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aece:	5de6      	ldrb	r6, [r4, r7]
 800aed0:	f016 0608 	ands.w	r6, r6, #8
 800aed4:	d1f8      	bne.n	800aec8 <_strtol_l.constprop.0+0x20>
 800aed6:	2c2d      	cmp	r4, #45	; 0x2d
 800aed8:	d12f      	bne.n	800af3a <_strtol_l.constprop.0+0x92>
 800aeda:	2601      	movs	r6, #1
 800aedc:	782c      	ldrb	r4, [r5, #0]
 800aede:	1c85      	adds	r5, r0, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d057      	beq.n	800af94 <_strtol_l.constprop.0+0xec>
 800aee4:	2b10      	cmp	r3, #16
 800aee6:	d109      	bne.n	800aefc <_strtol_l.constprop.0+0x54>
 800aee8:	2c30      	cmp	r4, #48	; 0x30
 800aeea:	d107      	bne.n	800aefc <_strtol_l.constprop.0+0x54>
 800aeec:	7828      	ldrb	r0, [r5, #0]
 800aeee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aef2:	2858      	cmp	r0, #88	; 0x58
 800aef4:	d149      	bne.n	800af8a <_strtol_l.constprop.0+0xe2>
 800aef6:	2310      	movs	r3, #16
 800aef8:	786c      	ldrb	r4, [r5, #1]
 800aefa:	3502      	adds	r5, #2
 800aefc:	2700      	movs	r7, #0
 800aefe:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800af02:	f10e 3eff 	add.w	lr, lr, #4294967295
 800af06:	fbbe f9f3 	udiv	r9, lr, r3
 800af0a:	4638      	mov	r0, r7
 800af0c:	fb03 ea19 	mls	sl, r3, r9, lr
 800af10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800af14:	f1bc 0f09 	cmp.w	ip, #9
 800af18:	d814      	bhi.n	800af44 <_strtol_l.constprop.0+0x9c>
 800af1a:	4664      	mov	r4, ip
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	dd22      	ble.n	800af66 <_strtol_l.constprop.0+0xbe>
 800af20:	2f00      	cmp	r7, #0
 800af22:	db1d      	blt.n	800af60 <_strtol_l.constprop.0+0xb8>
 800af24:	4581      	cmp	r9, r0
 800af26:	d31b      	bcc.n	800af60 <_strtol_l.constprop.0+0xb8>
 800af28:	d101      	bne.n	800af2e <_strtol_l.constprop.0+0x86>
 800af2a:	45a2      	cmp	sl, r4
 800af2c:	db18      	blt.n	800af60 <_strtol_l.constprop.0+0xb8>
 800af2e:	2701      	movs	r7, #1
 800af30:	fb00 4003 	mla	r0, r0, r3, r4
 800af34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af38:	e7ea      	b.n	800af10 <_strtol_l.constprop.0+0x68>
 800af3a:	2c2b      	cmp	r4, #43	; 0x2b
 800af3c:	bf04      	itt	eq
 800af3e:	782c      	ldrbeq	r4, [r5, #0]
 800af40:	1c85      	addeq	r5, r0, #2
 800af42:	e7cd      	b.n	800aee0 <_strtol_l.constprop.0+0x38>
 800af44:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800af48:	f1bc 0f19 	cmp.w	ip, #25
 800af4c:	d801      	bhi.n	800af52 <_strtol_l.constprop.0+0xaa>
 800af4e:	3c37      	subs	r4, #55	; 0x37
 800af50:	e7e4      	b.n	800af1c <_strtol_l.constprop.0+0x74>
 800af52:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800af56:	f1bc 0f19 	cmp.w	ip, #25
 800af5a:	d804      	bhi.n	800af66 <_strtol_l.constprop.0+0xbe>
 800af5c:	3c57      	subs	r4, #87	; 0x57
 800af5e:	e7dd      	b.n	800af1c <_strtol_l.constprop.0+0x74>
 800af60:	f04f 37ff 	mov.w	r7, #4294967295
 800af64:	e7e6      	b.n	800af34 <_strtol_l.constprop.0+0x8c>
 800af66:	2f00      	cmp	r7, #0
 800af68:	da07      	bge.n	800af7a <_strtol_l.constprop.0+0xd2>
 800af6a:	2322      	movs	r3, #34	; 0x22
 800af6c:	4670      	mov	r0, lr
 800af6e:	f8c8 3000 	str.w	r3, [r8]
 800af72:	2a00      	cmp	r2, #0
 800af74:	d0a4      	beq.n	800aec0 <_strtol_l.constprop.0+0x18>
 800af76:	1e69      	subs	r1, r5, #1
 800af78:	e005      	b.n	800af86 <_strtol_l.constprop.0+0xde>
 800af7a:	b106      	cbz	r6, 800af7e <_strtol_l.constprop.0+0xd6>
 800af7c:	4240      	negs	r0, r0
 800af7e:	2a00      	cmp	r2, #0
 800af80:	d09e      	beq.n	800aec0 <_strtol_l.constprop.0+0x18>
 800af82:	2f00      	cmp	r7, #0
 800af84:	d1f7      	bne.n	800af76 <_strtol_l.constprop.0+0xce>
 800af86:	6011      	str	r1, [r2, #0]
 800af88:	e79a      	b.n	800aec0 <_strtol_l.constprop.0+0x18>
 800af8a:	2430      	movs	r4, #48	; 0x30
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1b5      	bne.n	800aefc <_strtol_l.constprop.0+0x54>
 800af90:	2308      	movs	r3, #8
 800af92:	e7b3      	b.n	800aefc <_strtol_l.constprop.0+0x54>
 800af94:	2c30      	cmp	r4, #48	; 0x30
 800af96:	d0a9      	beq.n	800aeec <_strtol_l.constprop.0+0x44>
 800af98:	230a      	movs	r3, #10
 800af9a:	e7af      	b.n	800aefc <_strtol_l.constprop.0+0x54>
 800af9c:	0800c4a5 	.word	0x0800c4a5

0800afa0 <strtol>:
 800afa0:	4613      	mov	r3, r2
 800afa2:	460a      	mov	r2, r1
 800afa4:	4601      	mov	r1, r0
 800afa6:	4802      	ldr	r0, [pc, #8]	; (800afb0 <strtol+0x10>)
 800afa8:	6800      	ldr	r0, [r0, #0]
 800afaa:	f7ff bf7d 	b.w	800aea8 <_strtol_l.constprop.0>
 800afae:	bf00      	nop
 800afb0:	2000016c 	.word	0x2000016c

0800afb4 <__assert_func>:
 800afb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afb6:	4614      	mov	r4, r2
 800afb8:	461a      	mov	r2, r3
 800afba:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <__assert_func+0x2c>)
 800afbc:	4605      	mov	r5, r0
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68d8      	ldr	r0, [r3, #12]
 800afc2:	b14c      	cbz	r4, 800afd8 <__assert_func+0x24>
 800afc4:	4b07      	ldr	r3, [pc, #28]	; (800afe4 <__assert_func+0x30>)
 800afc6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afca:	9100      	str	r1, [sp, #0]
 800afcc:	462b      	mov	r3, r5
 800afce:	4906      	ldr	r1, [pc, #24]	; (800afe8 <__assert_func+0x34>)
 800afd0:	f000 f80e 	bl	800aff0 <fiprintf>
 800afd4:	f000 fe1c 	bl	800bc10 <abort>
 800afd8:	4b04      	ldr	r3, [pc, #16]	; (800afec <__assert_func+0x38>)
 800afda:	461c      	mov	r4, r3
 800afdc:	e7f3      	b.n	800afc6 <__assert_func+0x12>
 800afde:	bf00      	nop
 800afe0:	2000016c 	.word	0x2000016c
 800afe4:	0800c468 	.word	0x0800c468
 800afe8:	0800c475 	.word	0x0800c475
 800afec:	0800c4a3 	.word	0x0800c4a3

0800aff0 <fiprintf>:
 800aff0:	b40e      	push	{r1, r2, r3}
 800aff2:	b503      	push	{r0, r1, lr}
 800aff4:	4601      	mov	r1, r0
 800aff6:	ab03      	add	r3, sp, #12
 800aff8:	4805      	ldr	r0, [pc, #20]	; (800b010 <fiprintf+0x20>)
 800affa:	f853 2b04 	ldr.w	r2, [r3], #4
 800affe:	6800      	ldr	r0, [r0, #0]
 800b000:	9301      	str	r3, [sp, #4]
 800b002:	f000 fa6f 	bl	800b4e4 <_vfiprintf_r>
 800b006:	b002      	add	sp, #8
 800b008:	f85d eb04 	ldr.w	lr, [sp], #4
 800b00c:	b003      	add	sp, #12
 800b00e:	4770      	bx	lr
 800b010:	2000016c 	.word	0x2000016c

0800b014 <malloc>:
 800b014:	4b02      	ldr	r3, [pc, #8]	; (800b020 <malloc+0xc>)
 800b016:	4601      	mov	r1, r0
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	f000 b86b 	b.w	800b0f4 <_malloc_r>
 800b01e:	bf00      	nop
 800b020:	2000016c 	.word	0x2000016c

0800b024 <_free_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	4605      	mov	r5, r0
 800b028:	2900      	cmp	r1, #0
 800b02a:	d040      	beq.n	800b0ae <_free_r+0x8a>
 800b02c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b030:	1f0c      	subs	r4, r1, #4
 800b032:	2b00      	cmp	r3, #0
 800b034:	bfb8      	it	lt
 800b036:	18e4      	addlt	r4, r4, r3
 800b038:	f001 f844 	bl	800c0c4 <__malloc_lock>
 800b03c:	4a1c      	ldr	r2, [pc, #112]	; (800b0b0 <_free_r+0x8c>)
 800b03e:	6813      	ldr	r3, [r2, #0]
 800b040:	b933      	cbnz	r3, 800b050 <_free_r+0x2c>
 800b042:	6063      	str	r3, [r4, #4]
 800b044:	6014      	str	r4, [r2, #0]
 800b046:	4628      	mov	r0, r5
 800b048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b04c:	f001 b840 	b.w	800c0d0 <__malloc_unlock>
 800b050:	42a3      	cmp	r3, r4
 800b052:	d908      	bls.n	800b066 <_free_r+0x42>
 800b054:	6820      	ldr	r0, [r4, #0]
 800b056:	1821      	adds	r1, r4, r0
 800b058:	428b      	cmp	r3, r1
 800b05a:	bf01      	itttt	eq
 800b05c:	6819      	ldreq	r1, [r3, #0]
 800b05e:	685b      	ldreq	r3, [r3, #4]
 800b060:	1809      	addeq	r1, r1, r0
 800b062:	6021      	streq	r1, [r4, #0]
 800b064:	e7ed      	b.n	800b042 <_free_r+0x1e>
 800b066:	461a      	mov	r2, r3
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	b10b      	cbz	r3, 800b070 <_free_r+0x4c>
 800b06c:	42a3      	cmp	r3, r4
 800b06e:	d9fa      	bls.n	800b066 <_free_r+0x42>
 800b070:	6811      	ldr	r1, [r2, #0]
 800b072:	1850      	adds	r0, r2, r1
 800b074:	42a0      	cmp	r0, r4
 800b076:	d10b      	bne.n	800b090 <_free_r+0x6c>
 800b078:	6820      	ldr	r0, [r4, #0]
 800b07a:	4401      	add	r1, r0
 800b07c:	1850      	adds	r0, r2, r1
 800b07e:	4283      	cmp	r3, r0
 800b080:	6011      	str	r1, [r2, #0]
 800b082:	d1e0      	bne.n	800b046 <_free_r+0x22>
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	4401      	add	r1, r0
 800b08a:	6011      	str	r1, [r2, #0]
 800b08c:	6053      	str	r3, [r2, #4]
 800b08e:	e7da      	b.n	800b046 <_free_r+0x22>
 800b090:	d902      	bls.n	800b098 <_free_r+0x74>
 800b092:	230c      	movs	r3, #12
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	e7d6      	b.n	800b046 <_free_r+0x22>
 800b098:	6820      	ldr	r0, [r4, #0]
 800b09a:	1821      	adds	r1, r4, r0
 800b09c:	428b      	cmp	r3, r1
 800b09e:	bf01      	itttt	eq
 800b0a0:	6819      	ldreq	r1, [r3, #0]
 800b0a2:	685b      	ldreq	r3, [r3, #4]
 800b0a4:	1809      	addeq	r1, r1, r0
 800b0a6:	6021      	streq	r1, [r4, #0]
 800b0a8:	6063      	str	r3, [r4, #4]
 800b0aa:	6054      	str	r4, [r2, #4]
 800b0ac:	e7cb      	b.n	800b046 <_free_r+0x22>
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	20000bac 	.word	0x20000bac

0800b0b4 <sbrk_aligned>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	4e0e      	ldr	r6, [pc, #56]	; (800b0f0 <sbrk_aligned+0x3c>)
 800b0b8:	460c      	mov	r4, r1
 800b0ba:	6831      	ldr	r1, [r6, #0]
 800b0bc:	4605      	mov	r5, r0
 800b0be:	b911      	cbnz	r1, 800b0c6 <sbrk_aligned+0x12>
 800b0c0:	f000 fcd6 	bl	800ba70 <_sbrk_r>
 800b0c4:	6030      	str	r0, [r6, #0]
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	f000 fcd1 	bl	800ba70 <_sbrk_r>
 800b0ce:	1c43      	adds	r3, r0, #1
 800b0d0:	d00a      	beq.n	800b0e8 <sbrk_aligned+0x34>
 800b0d2:	1cc4      	adds	r4, r0, #3
 800b0d4:	f024 0403 	bic.w	r4, r4, #3
 800b0d8:	42a0      	cmp	r0, r4
 800b0da:	d007      	beq.n	800b0ec <sbrk_aligned+0x38>
 800b0dc:	1a21      	subs	r1, r4, r0
 800b0de:	4628      	mov	r0, r5
 800b0e0:	f000 fcc6 	bl	800ba70 <_sbrk_r>
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d101      	bne.n	800b0ec <sbrk_aligned+0x38>
 800b0e8:	f04f 34ff 	mov.w	r4, #4294967295
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}
 800b0f0:	20000bb0 	.word	0x20000bb0

0800b0f4 <_malloc_r>:
 800b0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f8:	1ccd      	adds	r5, r1, #3
 800b0fa:	f025 0503 	bic.w	r5, r5, #3
 800b0fe:	3508      	adds	r5, #8
 800b100:	2d0c      	cmp	r5, #12
 800b102:	bf38      	it	cc
 800b104:	250c      	movcc	r5, #12
 800b106:	2d00      	cmp	r5, #0
 800b108:	4607      	mov	r7, r0
 800b10a:	db01      	blt.n	800b110 <_malloc_r+0x1c>
 800b10c:	42a9      	cmp	r1, r5
 800b10e:	d905      	bls.n	800b11c <_malloc_r+0x28>
 800b110:	230c      	movs	r3, #12
 800b112:	2600      	movs	r6, #0
 800b114:	603b      	str	r3, [r7, #0]
 800b116:	4630      	mov	r0, r6
 800b118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b11c:	4e2e      	ldr	r6, [pc, #184]	; (800b1d8 <_malloc_r+0xe4>)
 800b11e:	f000 ffd1 	bl	800c0c4 <__malloc_lock>
 800b122:	6833      	ldr	r3, [r6, #0]
 800b124:	461c      	mov	r4, r3
 800b126:	bb34      	cbnz	r4, 800b176 <_malloc_r+0x82>
 800b128:	4629      	mov	r1, r5
 800b12a:	4638      	mov	r0, r7
 800b12c:	f7ff ffc2 	bl	800b0b4 <sbrk_aligned>
 800b130:	1c43      	adds	r3, r0, #1
 800b132:	4604      	mov	r4, r0
 800b134:	d14d      	bne.n	800b1d2 <_malloc_r+0xde>
 800b136:	6834      	ldr	r4, [r6, #0]
 800b138:	4626      	mov	r6, r4
 800b13a:	2e00      	cmp	r6, #0
 800b13c:	d140      	bne.n	800b1c0 <_malloc_r+0xcc>
 800b13e:	6823      	ldr	r3, [r4, #0]
 800b140:	4631      	mov	r1, r6
 800b142:	4638      	mov	r0, r7
 800b144:	eb04 0803 	add.w	r8, r4, r3
 800b148:	f000 fc92 	bl	800ba70 <_sbrk_r>
 800b14c:	4580      	cmp	r8, r0
 800b14e:	d13a      	bne.n	800b1c6 <_malloc_r+0xd2>
 800b150:	6821      	ldr	r1, [r4, #0]
 800b152:	3503      	adds	r5, #3
 800b154:	1a6d      	subs	r5, r5, r1
 800b156:	f025 0503 	bic.w	r5, r5, #3
 800b15a:	3508      	adds	r5, #8
 800b15c:	2d0c      	cmp	r5, #12
 800b15e:	bf38      	it	cc
 800b160:	250c      	movcc	r5, #12
 800b162:	4638      	mov	r0, r7
 800b164:	4629      	mov	r1, r5
 800b166:	f7ff ffa5 	bl	800b0b4 <sbrk_aligned>
 800b16a:	3001      	adds	r0, #1
 800b16c:	d02b      	beq.n	800b1c6 <_malloc_r+0xd2>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	442b      	add	r3, r5
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	e00e      	b.n	800b194 <_malloc_r+0xa0>
 800b176:	6822      	ldr	r2, [r4, #0]
 800b178:	1b52      	subs	r2, r2, r5
 800b17a:	d41e      	bmi.n	800b1ba <_malloc_r+0xc6>
 800b17c:	2a0b      	cmp	r2, #11
 800b17e:	d916      	bls.n	800b1ae <_malloc_r+0xba>
 800b180:	1961      	adds	r1, r4, r5
 800b182:	42a3      	cmp	r3, r4
 800b184:	6025      	str	r5, [r4, #0]
 800b186:	bf18      	it	ne
 800b188:	6059      	strne	r1, [r3, #4]
 800b18a:	6863      	ldr	r3, [r4, #4]
 800b18c:	bf08      	it	eq
 800b18e:	6031      	streq	r1, [r6, #0]
 800b190:	5162      	str	r2, [r4, r5]
 800b192:	604b      	str	r3, [r1, #4]
 800b194:	4638      	mov	r0, r7
 800b196:	f104 060b 	add.w	r6, r4, #11
 800b19a:	f000 ff99 	bl	800c0d0 <__malloc_unlock>
 800b19e:	f026 0607 	bic.w	r6, r6, #7
 800b1a2:	1d23      	adds	r3, r4, #4
 800b1a4:	1af2      	subs	r2, r6, r3
 800b1a6:	d0b6      	beq.n	800b116 <_malloc_r+0x22>
 800b1a8:	1b9b      	subs	r3, r3, r6
 800b1aa:	50a3      	str	r3, [r4, r2]
 800b1ac:	e7b3      	b.n	800b116 <_malloc_r+0x22>
 800b1ae:	6862      	ldr	r2, [r4, #4]
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	bf0c      	ite	eq
 800b1b4:	6032      	streq	r2, [r6, #0]
 800b1b6:	605a      	strne	r2, [r3, #4]
 800b1b8:	e7ec      	b.n	800b194 <_malloc_r+0xa0>
 800b1ba:	4623      	mov	r3, r4
 800b1bc:	6864      	ldr	r4, [r4, #4]
 800b1be:	e7b2      	b.n	800b126 <_malloc_r+0x32>
 800b1c0:	4634      	mov	r4, r6
 800b1c2:	6876      	ldr	r6, [r6, #4]
 800b1c4:	e7b9      	b.n	800b13a <_malloc_r+0x46>
 800b1c6:	230c      	movs	r3, #12
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	603b      	str	r3, [r7, #0]
 800b1cc:	f000 ff80 	bl	800c0d0 <__malloc_unlock>
 800b1d0:	e7a1      	b.n	800b116 <_malloc_r+0x22>
 800b1d2:	6025      	str	r5, [r4, #0]
 800b1d4:	e7de      	b.n	800b194 <_malloc_r+0xa0>
 800b1d6:	bf00      	nop
 800b1d8:	20000bac 	.word	0x20000bac

0800b1dc <__ssputs_r>:
 800b1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e0:	688e      	ldr	r6, [r1, #8]
 800b1e2:	4682      	mov	sl, r0
 800b1e4:	429e      	cmp	r6, r3
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	4690      	mov	r8, r2
 800b1ea:	461f      	mov	r7, r3
 800b1ec:	d838      	bhi.n	800b260 <__ssputs_r+0x84>
 800b1ee:	898a      	ldrh	r2, [r1, #12]
 800b1f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1f4:	d032      	beq.n	800b25c <__ssputs_r+0x80>
 800b1f6:	6825      	ldr	r5, [r4, #0]
 800b1f8:	6909      	ldr	r1, [r1, #16]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	eba5 0901 	sub.w	r9, r5, r1
 800b200:	6965      	ldr	r5, [r4, #20]
 800b202:	444b      	add	r3, r9
 800b204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b20c:	106d      	asrs	r5, r5, #1
 800b20e:	429d      	cmp	r5, r3
 800b210:	bf38      	it	cc
 800b212:	461d      	movcc	r5, r3
 800b214:	0553      	lsls	r3, r2, #21
 800b216:	d531      	bpl.n	800b27c <__ssputs_r+0xa0>
 800b218:	4629      	mov	r1, r5
 800b21a:	f7ff ff6b 	bl	800b0f4 <_malloc_r>
 800b21e:	4606      	mov	r6, r0
 800b220:	b950      	cbnz	r0, 800b238 <__ssputs_r+0x5c>
 800b222:	230c      	movs	r3, #12
 800b224:	f04f 30ff 	mov.w	r0, #4294967295
 800b228:	f8ca 3000 	str.w	r3, [sl]
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b232:	81a3      	strh	r3, [r4, #12]
 800b234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b238:	464a      	mov	r2, r9
 800b23a:	6921      	ldr	r1, [r4, #16]
 800b23c:	f000 ff1a 	bl	800c074 <memcpy>
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	6126      	str	r6, [r4, #16]
 800b24e:	444e      	add	r6, r9
 800b250:	6026      	str	r6, [r4, #0]
 800b252:	463e      	mov	r6, r7
 800b254:	6165      	str	r5, [r4, #20]
 800b256:	eba5 0509 	sub.w	r5, r5, r9
 800b25a:	60a5      	str	r5, [r4, #8]
 800b25c:	42be      	cmp	r6, r7
 800b25e:	d900      	bls.n	800b262 <__ssputs_r+0x86>
 800b260:	463e      	mov	r6, r7
 800b262:	4632      	mov	r2, r6
 800b264:	4641      	mov	r1, r8
 800b266:	6820      	ldr	r0, [r4, #0]
 800b268:	f000 ff12 	bl	800c090 <memmove>
 800b26c:	68a3      	ldr	r3, [r4, #8]
 800b26e:	2000      	movs	r0, #0
 800b270:	1b9b      	subs	r3, r3, r6
 800b272:	60a3      	str	r3, [r4, #8]
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	4433      	add	r3, r6
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	e7db      	b.n	800b234 <__ssputs_r+0x58>
 800b27c:	462a      	mov	r2, r5
 800b27e:	f000 ff2d 	bl	800c0dc <_realloc_r>
 800b282:	4606      	mov	r6, r0
 800b284:	2800      	cmp	r0, #0
 800b286:	d1e1      	bne.n	800b24c <__ssputs_r+0x70>
 800b288:	4650      	mov	r0, sl
 800b28a:	6921      	ldr	r1, [r4, #16]
 800b28c:	f7ff feca 	bl	800b024 <_free_r>
 800b290:	e7c7      	b.n	800b222 <__ssputs_r+0x46>
	...

0800b294 <_svfiprintf_r>:
 800b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b298:	4698      	mov	r8, r3
 800b29a:	898b      	ldrh	r3, [r1, #12]
 800b29c:	4607      	mov	r7, r0
 800b29e:	061b      	lsls	r3, r3, #24
 800b2a0:	460d      	mov	r5, r1
 800b2a2:	4614      	mov	r4, r2
 800b2a4:	b09d      	sub	sp, #116	; 0x74
 800b2a6:	d50e      	bpl.n	800b2c6 <_svfiprintf_r+0x32>
 800b2a8:	690b      	ldr	r3, [r1, #16]
 800b2aa:	b963      	cbnz	r3, 800b2c6 <_svfiprintf_r+0x32>
 800b2ac:	2140      	movs	r1, #64	; 0x40
 800b2ae:	f7ff ff21 	bl	800b0f4 <_malloc_r>
 800b2b2:	6028      	str	r0, [r5, #0]
 800b2b4:	6128      	str	r0, [r5, #16]
 800b2b6:	b920      	cbnz	r0, 800b2c2 <_svfiprintf_r+0x2e>
 800b2b8:	230c      	movs	r3, #12
 800b2ba:	603b      	str	r3, [r7, #0]
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	e0d1      	b.n	800b466 <_svfiprintf_r+0x1d2>
 800b2c2:	2340      	movs	r3, #64	; 0x40
 800b2c4:	616b      	str	r3, [r5, #20]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ca:	2320      	movs	r3, #32
 800b2cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2d0:	2330      	movs	r3, #48	; 0x30
 800b2d2:	f04f 0901 	mov.w	r9, #1
 800b2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b480 <_svfiprintf_r+0x1ec>
 800b2de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2e2:	4623      	mov	r3, r4
 800b2e4:	469a      	mov	sl, r3
 800b2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ea:	b10a      	cbz	r2, 800b2f0 <_svfiprintf_r+0x5c>
 800b2ec:	2a25      	cmp	r2, #37	; 0x25
 800b2ee:	d1f9      	bne.n	800b2e4 <_svfiprintf_r+0x50>
 800b2f0:	ebba 0b04 	subs.w	fp, sl, r4
 800b2f4:	d00b      	beq.n	800b30e <_svfiprintf_r+0x7a>
 800b2f6:	465b      	mov	r3, fp
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f7ff ff6d 	bl	800b1dc <__ssputs_r>
 800b302:	3001      	adds	r0, #1
 800b304:	f000 80aa 	beq.w	800b45c <_svfiprintf_r+0x1c8>
 800b308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b30a:	445a      	add	r2, fp
 800b30c:	9209      	str	r2, [sp, #36]	; 0x24
 800b30e:	f89a 3000 	ldrb.w	r3, [sl]
 800b312:	2b00      	cmp	r3, #0
 800b314:	f000 80a2 	beq.w	800b45c <_svfiprintf_r+0x1c8>
 800b318:	2300      	movs	r3, #0
 800b31a:	f04f 32ff 	mov.w	r2, #4294967295
 800b31e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b322:	f10a 0a01 	add.w	sl, sl, #1
 800b326:	9304      	str	r3, [sp, #16]
 800b328:	9307      	str	r3, [sp, #28]
 800b32a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b32e:	931a      	str	r3, [sp, #104]	; 0x68
 800b330:	4654      	mov	r4, sl
 800b332:	2205      	movs	r2, #5
 800b334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b338:	4851      	ldr	r0, [pc, #324]	; (800b480 <_svfiprintf_r+0x1ec>)
 800b33a:	f000 fe8d 	bl	800c058 <memchr>
 800b33e:	9a04      	ldr	r2, [sp, #16]
 800b340:	b9d8      	cbnz	r0, 800b37a <_svfiprintf_r+0xe6>
 800b342:	06d0      	lsls	r0, r2, #27
 800b344:	bf44      	itt	mi
 800b346:	2320      	movmi	r3, #32
 800b348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b34c:	0711      	lsls	r1, r2, #28
 800b34e:	bf44      	itt	mi
 800b350:	232b      	movmi	r3, #43	; 0x2b
 800b352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b356:	f89a 3000 	ldrb.w	r3, [sl]
 800b35a:	2b2a      	cmp	r3, #42	; 0x2a
 800b35c:	d015      	beq.n	800b38a <_svfiprintf_r+0xf6>
 800b35e:	4654      	mov	r4, sl
 800b360:	2000      	movs	r0, #0
 800b362:	f04f 0c0a 	mov.w	ip, #10
 800b366:	9a07      	ldr	r2, [sp, #28]
 800b368:	4621      	mov	r1, r4
 800b36a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b36e:	3b30      	subs	r3, #48	; 0x30
 800b370:	2b09      	cmp	r3, #9
 800b372:	d94e      	bls.n	800b412 <_svfiprintf_r+0x17e>
 800b374:	b1b0      	cbz	r0, 800b3a4 <_svfiprintf_r+0x110>
 800b376:	9207      	str	r2, [sp, #28]
 800b378:	e014      	b.n	800b3a4 <_svfiprintf_r+0x110>
 800b37a:	eba0 0308 	sub.w	r3, r0, r8
 800b37e:	fa09 f303 	lsl.w	r3, r9, r3
 800b382:	4313      	orrs	r3, r2
 800b384:	46a2      	mov	sl, r4
 800b386:	9304      	str	r3, [sp, #16]
 800b388:	e7d2      	b.n	800b330 <_svfiprintf_r+0x9c>
 800b38a:	9b03      	ldr	r3, [sp, #12]
 800b38c:	1d19      	adds	r1, r3, #4
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	9103      	str	r1, [sp, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	bfbb      	ittet	lt
 800b396:	425b      	neglt	r3, r3
 800b398:	f042 0202 	orrlt.w	r2, r2, #2
 800b39c:	9307      	strge	r3, [sp, #28]
 800b39e:	9307      	strlt	r3, [sp, #28]
 800b3a0:	bfb8      	it	lt
 800b3a2:	9204      	strlt	r2, [sp, #16]
 800b3a4:	7823      	ldrb	r3, [r4, #0]
 800b3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800b3a8:	d10c      	bne.n	800b3c4 <_svfiprintf_r+0x130>
 800b3aa:	7863      	ldrb	r3, [r4, #1]
 800b3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ae:	d135      	bne.n	800b41c <_svfiprintf_r+0x188>
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	3402      	adds	r4, #2
 800b3b4:	1d1a      	adds	r2, r3, #4
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	9203      	str	r2, [sp, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	bfb8      	it	lt
 800b3be:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3c2:	9305      	str	r3, [sp, #20]
 800b3c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b484 <_svfiprintf_r+0x1f0>
 800b3c8:	2203      	movs	r2, #3
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	7821      	ldrb	r1, [r4, #0]
 800b3ce:	f000 fe43 	bl	800c058 <memchr>
 800b3d2:	b140      	cbz	r0, 800b3e6 <_svfiprintf_r+0x152>
 800b3d4:	2340      	movs	r3, #64	; 0x40
 800b3d6:	eba0 000a 	sub.w	r0, r0, sl
 800b3da:	fa03 f000 	lsl.w	r0, r3, r0
 800b3de:	9b04      	ldr	r3, [sp, #16]
 800b3e0:	3401      	adds	r4, #1
 800b3e2:	4303      	orrs	r3, r0
 800b3e4:	9304      	str	r3, [sp, #16]
 800b3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ea:	2206      	movs	r2, #6
 800b3ec:	4826      	ldr	r0, [pc, #152]	; (800b488 <_svfiprintf_r+0x1f4>)
 800b3ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3f2:	f000 fe31 	bl	800c058 <memchr>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d038      	beq.n	800b46c <_svfiprintf_r+0x1d8>
 800b3fa:	4b24      	ldr	r3, [pc, #144]	; (800b48c <_svfiprintf_r+0x1f8>)
 800b3fc:	bb1b      	cbnz	r3, 800b446 <_svfiprintf_r+0x1b2>
 800b3fe:	9b03      	ldr	r3, [sp, #12]
 800b400:	3307      	adds	r3, #7
 800b402:	f023 0307 	bic.w	r3, r3, #7
 800b406:	3308      	adds	r3, #8
 800b408:	9303      	str	r3, [sp, #12]
 800b40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b40c:	4433      	add	r3, r6
 800b40e:	9309      	str	r3, [sp, #36]	; 0x24
 800b410:	e767      	b.n	800b2e2 <_svfiprintf_r+0x4e>
 800b412:	460c      	mov	r4, r1
 800b414:	2001      	movs	r0, #1
 800b416:	fb0c 3202 	mla	r2, ip, r2, r3
 800b41a:	e7a5      	b.n	800b368 <_svfiprintf_r+0xd4>
 800b41c:	2300      	movs	r3, #0
 800b41e:	f04f 0c0a 	mov.w	ip, #10
 800b422:	4619      	mov	r1, r3
 800b424:	3401      	adds	r4, #1
 800b426:	9305      	str	r3, [sp, #20]
 800b428:	4620      	mov	r0, r4
 800b42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b42e:	3a30      	subs	r2, #48	; 0x30
 800b430:	2a09      	cmp	r2, #9
 800b432:	d903      	bls.n	800b43c <_svfiprintf_r+0x1a8>
 800b434:	2b00      	cmp	r3, #0
 800b436:	d0c5      	beq.n	800b3c4 <_svfiprintf_r+0x130>
 800b438:	9105      	str	r1, [sp, #20]
 800b43a:	e7c3      	b.n	800b3c4 <_svfiprintf_r+0x130>
 800b43c:	4604      	mov	r4, r0
 800b43e:	2301      	movs	r3, #1
 800b440:	fb0c 2101 	mla	r1, ip, r1, r2
 800b444:	e7f0      	b.n	800b428 <_svfiprintf_r+0x194>
 800b446:	ab03      	add	r3, sp, #12
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	462a      	mov	r2, r5
 800b44c:	4638      	mov	r0, r7
 800b44e:	4b10      	ldr	r3, [pc, #64]	; (800b490 <_svfiprintf_r+0x1fc>)
 800b450:	a904      	add	r1, sp, #16
 800b452:	f3af 8000 	nop.w
 800b456:	1c42      	adds	r2, r0, #1
 800b458:	4606      	mov	r6, r0
 800b45a:	d1d6      	bne.n	800b40a <_svfiprintf_r+0x176>
 800b45c:	89ab      	ldrh	r3, [r5, #12]
 800b45e:	065b      	lsls	r3, r3, #25
 800b460:	f53f af2c 	bmi.w	800b2bc <_svfiprintf_r+0x28>
 800b464:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b466:	b01d      	add	sp, #116	; 0x74
 800b468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46c:	ab03      	add	r3, sp, #12
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	462a      	mov	r2, r5
 800b472:	4638      	mov	r0, r7
 800b474:	4b06      	ldr	r3, [pc, #24]	; (800b490 <_svfiprintf_r+0x1fc>)
 800b476:	a904      	add	r1, sp, #16
 800b478:	f000 f9d4 	bl	800b824 <_printf_i>
 800b47c:	e7eb      	b.n	800b456 <_svfiprintf_r+0x1c2>
 800b47e:	bf00      	nop
 800b480:	0800c5a5 	.word	0x0800c5a5
 800b484:	0800c5ab 	.word	0x0800c5ab
 800b488:	0800c5af 	.word	0x0800c5af
 800b48c:	00000000 	.word	0x00000000
 800b490:	0800b1dd 	.word	0x0800b1dd

0800b494 <__sfputc_r>:
 800b494:	6893      	ldr	r3, [r2, #8]
 800b496:	b410      	push	{r4}
 800b498:	3b01      	subs	r3, #1
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	6093      	str	r3, [r2, #8]
 800b49e:	da07      	bge.n	800b4b0 <__sfputc_r+0x1c>
 800b4a0:	6994      	ldr	r4, [r2, #24]
 800b4a2:	42a3      	cmp	r3, r4
 800b4a4:	db01      	blt.n	800b4aa <__sfputc_r+0x16>
 800b4a6:	290a      	cmp	r1, #10
 800b4a8:	d102      	bne.n	800b4b0 <__sfputc_r+0x1c>
 800b4aa:	bc10      	pop	{r4}
 800b4ac:	f000 baf0 	b.w	800ba90 <__swbuf_r>
 800b4b0:	6813      	ldr	r3, [r2, #0]
 800b4b2:	1c58      	adds	r0, r3, #1
 800b4b4:	6010      	str	r0, [r2, #0]
 800b4b6:	7019      	strb	r1, [r3, #0]
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	bc10      	pop	{r4}
 800b4bc:	4770      	bx	lr

0800b4be <__sfputs_r>:
 800b4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	460f      	mov	r7, r1
 800b4c4:	4614      	mov	r4, r2
 800b4c6:	18d5      	adds	r5, r2, r3
 800b4c8:	42ac      	cmp	r4, r5
 800b4ca:	d101      	bne.n	800b4d0 <__sfputs_r+0x12>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e007      	b.n	800b4e0 <__sfputs_r+0x22>
 800b4d0:	463a      	mov	r2, r7
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d8:	f7ff ffdc 	bl	800b494 <__sfputc_r>
 800b4dc:	1c43      	adds	r3, r0, #1
 800b4de:	d1f3      	bne.n	800b4c8 <__sfputs_r+0xa>
 800b4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4e4 <_vfiprintf_r>:
 800b4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	4614      	mov	r4, r2
 800b4ec:	4698      	mov	r8, r3
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	b09d      	sub	sp, #116	; 0x74
 800b4f2:	b118      	cbz	r0, 800b4fc <_vfiprintf_r+0x18>
 800b4f4:	6983      	ldr	r3, [r0, #24]
 800b4f6:	b90b      	cbnz	r3, 800b4fc <_vfiprintf_r+0x18>
 800b4f8:	f000 fca8 	bl	800be4c <__sinit>
 800b4fc:	4b89      	ldr	r3, [pc, #548]	; (800b724 <_vfiprintf_r+0x240>)
 800b4fe:	429d      	cmp	r5, r3
 800b500:	d11b      	bne.n	800b53a <_vfiprintf_r+0x56>
 800b502:	6875      	ldr	r5, [r6, #4]
 800b504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b506:	07d9      	lsls	r1, r3, #31
 800b508:	d405      	bmi.n	800b516 <_vfiprintf_r+0x32>
 800b50a:	89ab      	ldrh	r3, [r5, #12]
 800b50c:	059a      	lsls	r2, r3, #22
 800b50e:	d402      	bmi.n	800b516 <_vfiprintf_r+0x32>
 800b510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b512:	f000 fd39 	bl	800bf88 <__retarget_lock_acquire_recursive>
 800b516:	89ab      	ldrh	r3, [r5, #12]
 800b518:	071b      	lsls	r3, r3, #28
 800b51a:	d501      	bpl.n	800b520 <_vfiprintf_r+0x3c>
 800b51c:	692b      	ldr	r3, [r5, #16]
 800b51e:	b9eb      	cbnz	r3, 800b55c <_vfiprintf_r+0x78>
 800b520:	4629      	mov	r1, r5
 800b522:	4630      	mov	r0, r6
 800b524:	f000 fb06 	bl	800bb34 <__swsetup_r>
 800b528:	b1c0      	cbz	r0, 800b55c <_vfiprintf_r+0x78>
 800b52a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b52c:	07dc      	lsls	r4, r3, #31
 800b52e:	d50e      	bpl.n	800b54e <_vfiprintf_r+0x6a>
 800b530:	f04f 30ff 	mov.w	r0, #4294967295
 800b534:	b01d      	add	sp, #116	; 0x74
 800b536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53a:	4b7b      	ldr	r3, [pc, #492]	; (800b728 <_vfiprintf_r+0x244>)
 800b53c:	429d      	cmp	r5, r3
 800b53e:	d101      	bne.n	800b544 <_vfiprintf_r+0x60>
 800b540:	68b5      	ldr	r5, [r6, #8]
 800b542:	e7df      	b.n	800b504 <_vfiprintf_r+0x20>
 800b544:	4b79      	ldr	r3, [pc, #484]	; (800b72c <_vfiprintf_r+0x248>)
 800b546:	429d      	cmp	r5, r3
 800b548:	bf08      	it	eq
 800b54a:	68f5      	ldreq	r5, [r6, #12]
 800b54c:	e7da      	b.n	800b504 <_vfiprintf_r+0x20>
 800b54e:	89ab      	ldrh	r3, [r5, #12]
 800b550:	0598      	lsls	r0, r3, #22
 800b552:	d4ed      	bmi.n	800b530 <_vfiprintf_r+0x4c>
 800b554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b556:	f000 fd18 	bl	800bf8a <__retarget_lock_release_recursive>
 800b55a:	e7e9      	b.n	800b530 <_vfiprintf_r+0x4c>
 800b55c:	2300      	movs	r3, #0
 800b55e:	9309      	str	r3, [sp, #36]	; 0x24
 800b560:	2320      	movs	r3, #32
 800b562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b566:	2330      	movs	r3, #48	; 0x30
 800b568:	f04f 0901 	mov.w	r9, #1
 800b56c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b570:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b730 <_vfiprintf_r+0x24c>
 800b574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b578:	4623      	mov	r3, r4
 800b57a:	469a      	mov	sl, r3
 800b57c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b580:	b10a      	cbz	r2, 800b586 <_vfiprintf_r+0xa2>
 800b582:	2a25      	cmp	r2, #37	; 0x25
 800b584:	d1f9      	bne.n	800b57a <_vfiprintf_r+0x96>
 800b586:	ebba 0b04 	subs.w	fp, sl, r4
 800b58a:	d00b      	beq.n	800b5a4 <_vfiprintf_r+0xc0>
 800b58c:	465b      	mov	r3, fp
 800b58e:	4622      	mov	r2, r4
 800b590:	4629      	mov	r1, r5
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ff93 	bl	800b4be <__sfputs_r>
 800b598:	3001      	adds	r0, #1
 800b59a:	f000 80aa 	beq.w	800b6f2 <_vfiprintf_r+0x20e>
 800b59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5a0:	445a      	add	r2, fp
 800b5a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 80a2 	beq.w	800b6f2 <_vfiprintf_r+0x20e>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5b8:	f10a 0a01 	add.w	sl, sl, #1
 800b5bc:	9304      	str	r3, [sp, #16]
 800b5be:	9307      	str	r3, [sp, #28]
 800b5c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5c4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5c6:	4654      	mov	r4, sl
 800b5c8:	2205      	movs	r2, #5
 800b5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ce:	4858      	ldr	r0, [pc, #352]	; (800b730 <_vfiprintf_r+0x24c>)
 800b5d0:	f000 fd42 	bl	800c058 <memchr>
 800b5d4:	9a04      	ldr	r2, [sp, #16]
 800b5d6:	b9d8      	cbnz	r0, 800b610 <_vfiprintf_r+0x12c>
 800b5d8:	06d1      	lsls	r1, r2, #27
 800b5da:	bf44      	itt	mi
 800b5dc:	2320      	movmi	r3, #32
 800b5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5e2:	0713      	lsls	r3, r2, #28
 800b5e4:	bf44      	itt	mi
 800b5e6:	232b      	movmi	r3, #43	; 0x2b
 800b5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b5f2:	d015      	beq.n	800b620 <_vfiprintf_r+0x13c>
 800b5f4:	4654      	mov	r4, sl
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	f04f 0c0a 	mov.w	ip, #10
 800b5fc:	9a07      	ldr	r2, [sp, #28]
 800b5fe:	4621      	mov	r1, r4
 800b600:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b604:	3b30      	subs	r3, #48	; 0x30
 800b606:	2b09      	cmp	r3, #9
 800b608:	d94e      	bls.n	800b6a8 <_vfiprintf_r+0x1c4>
 800b60a:	b1b0      	cbz	r0, 800b63a <_vfiprintf_r+0x156>
 800b60c:	9207      	str	r2, [sp, #28]
 800b60e:	e014      	b.n	800b63a <_vfiprintf_r+0x156>
 800b610:	eba0 0308 	sub.w	r3, r0, r8
 800b614:	fa09 f303 	lsl.w	r3, r9, r3
 800b618:	4313      	orrs	r3, r2
 800b61a:	46a2      	mov	sl, r4
 800b61c:	9304      	str	r3, [sp, #16]
 800b61e:	e7d2      	b.n	800b5c6 <_vfiprintf_r+0xe2>
 800b620:	9b03      	ldr	r3, [sp, #12]
 800b622:	1d19      	adds	r1, r3, #4
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	9103      	str	r1, [sp, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bfbb      	ittet	lt
 800b62c:	425b      	neglt	r3, r3
 800b62e:	f042 0202 	orrlt.w	r2, r2, #2
 800b632:	9307      	strge	r3, [sp, #28]
 800b634:	9307      	strlt	r3, [sp, #28]
 800b636:	bfb8      	it	lt
 800b638:	9204      	strlt	r2, [sp, #16]
 800b63a:	7823      	ldrb	r3, [r4, #0]
 800b63c:	2b2e      	cmp	r3, #46	; 0x2e
 800b63e:	d10c      	bne.n	800b65a <_vfiprintf_r+0x176>
 800b640:	7863      	ldrb	r3, [r4, #1]
 800b642:	2b2a      	cmp	r3, #42	; 0x2a
 800b644:	d135      	bne.n	800b6b2 <_vfiprintf_r+0x1ce>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	3402      	adds	r4, #2
 800b64a:	1d1a      	adds	r2, r3, #4
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	9203      	str	r2, [sp, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	bfb8      	it	lt
 800b654:	f04f 33ff 	movlt.w	r3, #4294967295
 800b658:	9305      	str	r3, [sp, #20]
 800b65a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b734 <_vfiprintf_r+0x250>
 800b65e:	2203      	movs	r2, #3
 800b660:	4650      	mov	r0, sl
 800b662:	7821      	ldrb	r1, [r4, #0]
 800b664:	f000 fcf8 	bl	800c058 <memchr>
 800b668:	b140      	cbz	r0, 800b67c <_vfiprintf_r+0x198>
 800b66a:	2340      	movs	r3, #64	; 0x40
 800b66c:	eba0 000a 	sub.w	r0, r0, sl
 800b670:	fa03 f000 	lsl.w	r0, r3, r0
 800b674:	9b04      	ldr	r3, [sp, #16]
 800b676:	3401      	adds	r4, #1
 800b678:	4303      	orrs	r3, r0
 800b67a:	9304      	str	r3, [sp, #16]
 800b67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b680:	2206      	movs	r2, #6
 800b682:	482d      	ldr	r0, [pc, #180]	; (800b738 <_vfiprintf_r+0x254>)
 800b684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b688:	f000 fce6 	bl	800c058 <memchr>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d03f      	beq.n	800b710 <_vfiprintf_r+0x22c>
 800b690:	4b2a      	ldr	r3, [pc, #168]	; (800b73c <_vfiprintf_r+0x258>)
 800b692:	bb1b      	cbnz	r3, 800b6dc <_vfiprintf_r+0x1f8>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	3307      	adds	r3, #7
 800b698:	f023 0307 	bic.w	r3, r3, #7
 800b69c:	3308      	adds	r3, #8
 800b69e:	9303      	str	r3, [sp, #12]
 800b6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6a2:	443b      	add	r3, r7
 800b6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a6:	e767      	b.n	800b578 <_vfiprintf_r+0x94>
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	2001      	movs	r0, #1
 800b6ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6b0:	e7a5      	b.n	800b5fe <_vfiprintf_r+0x11a>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	f04f 0c0a 	mov.w	ip, #10
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	3401      	adds	r4, #1
 800b6bc:	9305      	str	r3, [sp, #20]
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6c4:	3a30      	subs	r2, #48	; 0x30
 800b6c6:	2a09      	cmp	r2, #9
 800b6c8:	d903      	bls.n	800b6d2 <_vfiprintf_r+0x1ee>
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d0c5      	beq.n	800b65a <_vfiprintf_r+0x176>
 800b6ce:	9105      	str	r1, [sp, #20]
 800b6d0:	e7c3      	b.n	800b65a <_vfiprintf_r+0x176>
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6da:	e7f0      	b.n	800b6be <_vfiprintf_r+0x1da>
 800b6dc:	ab03      	add	r3, sp, #12
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	462a      	mov	r2, r5
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4b16      	ldr	r3, [pc, #88]	; (800b740 <_vfiprintf_r+0x25c>)
 800b6e6:	a904      	add	r1, sp, #16
 800b6e8:	f3af 8000 	nop.w
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	1c78      	adds	r0, r7, #1
 800b6f0:	d1d6      	bne.n	800b6a0 <_vfiprintf_r+0x1bc>
 800b6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6f4:	07d9      	lsls	r1, r3, #31
 800b6f6:	d405      	bmi.n	800b704 <_vfiprintf_r+0x220>
 800b6f8:	89ab      	ldrh	r3, [r5, #12]
 800b6fa:	059a      	lsls	r2, r3, #22
 800b6fc:	d402      	bmi.n	800b704 <_vfiprintf_r+0x220>
 800b6fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b700:	f000 fc43 	bl	800bf8a <__retarget_lock_release_recursive>
 800b704:	89ab      	ldrh	r3, [r5, #12]
 800b706:	065b      	lsls	r3, r3, #25
 800b708:	f53f af12 	bmi.w	800b530 <_vfiprintf_r+0x4c>
 800b70c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b70e:	e711      	b.n	800b534 <_vfiprintf_r+0x50>
 800b710:	ab03      	add	r3, sp, #12
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	462a      	mov	r2, r5
 800b716:	4630      	mov	r0, r6
 800b718:	4b09      	ldr	r3, [pc, #36]	; (800b740 <_vfiprintf_r+0x25c>)
 800b71a:	a904      	add	r1, sp, #16
 800b71c:	f000 f882 	bl	800b824 <_printf_i>
 800b720:	e7e4      	b.n	800b6ec <_vfiprintf_r+0x208>
 800b722:	bf00      	nop
 800b724:	0800c5f8 	.word	0x0800c5f8
 800b728:	0800c618 	.word	0x0800c618
 800b72c:	0800c5d8 	.word	0x0800c5d8
 800b730:	0800c5a5 	.word	0x0800c5a5
 800b734:	0800c5ab 	.word	0x0800c5ab
 800b738:	0800c5af 	.word	0x0800c5af
 800b73c:	00000000 	.word	0x00000000
 800b740:	0800b4bf 	.word	0x0800b4bf

0800b744 <_printf_common>:
 800b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	4616      	mov	r6, r2
 800b74a:	4699      	mov	r9, r3
 800b74c:	688a      	ldr	r2, [r1, #8]
 800b74e:	690b      	ldr	r3, [r1, #16]
 800b750:	4607      	mov	r7, r0
 800b752:	4293      	cmp	r3, r2
 800b754:	bfb8      	it	lt
 800b756:	4613      	movlt	r3, r2
 800b758:	6033      	str	r3, [r6, #0]
 800b75a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b75e:	460c      	mov	r4, r1
 800b760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b764:	b10a      	cbz	r2, 800b76a <_printf_common+0x26>
 800b766:	3301      	adds	r3, #1
 800b768:	6033      	str	r3, [r6, #0]
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	0699      	lsls	r1, r3, #26
 800b76e:	bf42      	ittt	mi
 800b770:	6833      	ldrmi	r3, [r6, #0]
 800b772:	3302      	addmi	r3, #2
 800b774:	6033      	strmi	r3, [r6, #0]
 800b776:	6825      	ldr	r5, [r4, #0]
 800b778:	f015 0506 	ands.w	r5, r5, #6
 800b77c:	d106      	bne.n	800b78c <_printf_common+0x48>
 800b77e:	f104 0a19 	add.w	sl, r4, #25
 800b782:	68e3      	ldr	r3, [r4, #12]
 800b784:	6832      	ldr	r2, [r6, #0]
 800b786:	1a9b      	subs	r3, r3, r2
 800b788:	42ab      	cmp	r3, r5
 800b78a:	dc28      	bgt.n	800b7de <_printf_common+0x9a>
 800b78c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b790:	1e13      	subs	r3, r2, #0
 800b792:	6822      	ldr	r2, [r4, #0]
 800b794:	bf18      	it	ne
 800b796:	2301      	movne	r3, #1
 800b798:	0692      	lsls	r2, r2, #26
 800b79a:	d42d      	bmi.n	800b7f8 <_printf_common+0xb4>
 800b79c:	4649      	mov	r1, r9
 800b79e:	4638      	mov	r0, r7
 800b7a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7a4:	47c0      	blx	r8
 800b7a6:	3001      	adds	r0, #1
 800b7a8:	d020      	beq.n	800b7ec <_printf_common+0xa8>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	68e5      	ldr	r5, [r4, #12]
 800b7ae:	f003 0306 	and.w	r3, r3, #6
 800b7b2:	2b04      	cmp	r3, #4
 800b7b4:	bf18      	it	ne
 800b7b6:	2500      	movne	r5, #0
 800b7b8:	6832      	ldr	r2, [r6, #0]
 800b7ba:	f04f 0600 	mov.w	r6, #0
 800b7be:	68a3      	ldr	r3, [r4, #8]
 800b7c0:	bf08      	it	eq
 800b7c2:	1aad      	subeq	r5, r5, r2
 800b7c4:	6922      	ldr	r2, [r4, #16]
 800b7c6:	bf08      	it	eq
 800b7c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	bfc4      	itt	gt
 800b7d0:	1a9b      	subgt	r3, r3, r2
 800b7d2:	18ed      	addgt	r5, r5, r3
 800b7d4:	341a      	adds	r4, #26
 800b7d6:	42b5      	cmp	r5, r6
 800b7d8:	d11a      	bne.n	800b810 <_printf_common+0xcc>
 800b7da:	2000      	movs	r0, #0
 800b7dc:	e008      	b.n	800b7f0 <_printf_common+0xac>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	4652      	mov	r2, sl
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	47c0      	blx	r8
 800b7e8:	3001      	adds	r0, #1
 800b7ea:	d103      	bne.n	800b7f4 <_printf_common+0xb0>
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f4:	3501      	adds	r5, #1
 800b7f6:	e7c4      	b.n	800b782 <_printf_common+0x3e>
 800b7f8:	2030      	movs	r0, #48	; 0x30
 800b7fa:	18e1      	adds	r1, r4, r3
 800b7fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b806:	4422      	add	r2, r4
 800b808:	3302      	adds	r3, #2
 800b80a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b80e:	e7c5      	b.n	800b79c <_printf_common+0x58>
 800b810:	2301      	movs	r3, #1
 800b812:	4622      	mov	r2, r4
 800b814:	4649      	mov	r1, r9
 800b816:	4638      	mov	r0, r7
 800b818:	47c0      	blx	r8
 800b81a:	3001      	adds	r0, #1
 800b81c:	d0e6      	beq.n	800b7ec <_printf_common+0xa8>
 800b81e:	3601      	adds	r6, #1
 800b820:	e7d9      	b.n	800b7d6 <_printf_common+0x92>
	...

0800b824 <_printf_i>:
 800b824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b828:	7e0f      	ldrb	r7, [r1, #24]
 800b82a:	4691      	mov	r9, r2
 800b82c:	2f78      	cmp	r7, #120	; 0x78
 800b82e:	4680      	mov	r8, r0
 800b830:	460c      	mov	r4, r1
 800b832:	469a      	mov	sl, r3
 800b834:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b83a:	d807      	bhi.n	800b84c <_printf_i+0x28>
 800b83c:	2f62      	cmp	r7, #98	; 0x62
 800b83e:	d80a      	bhi.n	800b856 <_printf_i+0x32>
 800b840:	2f00      	cmp	r7, #0
 800b842:	f000 80d9 	beq.w	800b9f8 <_printf_i+0x1d4>
 800b846:	2f58      	cmp	r7, #88	; 0x58
 800b848:	f000 80a4 	beq.w	800b994 <_printf_i+0x170>
 800b84c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b854:	e03a      	b.n	800b8cc <_printf_i+0xa8>
 800b856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b85a:	2b15      	cmp	r3, #21
 800b85c:	d8f6      	bhi.n	800b84c <_printf_i+0x28>
 800b85e:	a101      	add	r1, pc, #4	; (adr r1, 800b864 <_printf_i+0x40>)
 800b860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b864:	0800b8bd 	.word	0x0800b8bd
 800b868:	0800b8d1 	.word	0x0800b8d1
 800b86c:	0800b84d 	.word	0x0800b84d
 800b870:	0800b84d 	.word	0x0800b84d
 800b874:	0800b84d 	.word	0x0800b84d
 800b878:	0800b84d 	.word	0x0800b84d
 800b87c:	0800b8d1 	.word	0x0800b8d1
 800b880:	0800b84d 	.word	0x0800b84d
 800b884:	0800b84d 	.word	0x0800b84d
 800b888:	0800b84d 	.word	0x0800b84d
 800b88c:	0800b84d 	.word	0x0800b84d
 800b890:	0800b9df 	.word	0x0800b9df
 800b894:	0800b901 	.word	0x0800b901
 800b898:	0800b9c1 	.word	0x0800b9c1
 800b89c:	0800b84d 	.word	0x0800b84d
 800b8a0:	0800b84d 	.word	0x0800b84d
 800b8a4:	0800ba01 	.word	0x0800ba01
 800b8a8:	0800b84d 	.word	0x0800b84d
 800b8ac:	0800b901 	.word	0x0800b901
 800b8b0:	0800b84d 	.word	0x0800b84d
 800b8b4:	0800b84d 	.word	0x0800b84d
 800b8b8:	0800b9c9 	.word	0x0800b9c9
 800b8bc:	682b      	ldr	r3, [r5, #0]
 800b8be:	1d1a      	adds	r2, r3, #4
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	602a      	str	r2, [r5, #0]
 800b8c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e0a4      	b.n	800ba1a <_printf_i+0x1f6>
 800b8d0:	6820      	ldr	r0, [r4, #0]
 800b8d2:	6829      	ldr	r1, [r5, #0]
 800b8d4:	0606      	lsls	r6, r0, #24
 800b8d6:	f101 0304 	add.w	r3, r1, #4
 800b8da:	d50a      	bpl.n	800b8f2 <_printf_i+0xce>
 800b8dc:	680e      	ldr	r6, [r1, #0]
 800b8de:	602b      	str	r3, [r5, #0]
 800b8e0:	2e00      	cmp	r6, #0
 800b8e2:	da03      	bge.n	800b8ec <_printf_i+0xc8>
 800b8e4:	232d      	movs	r3, #45	; 0x2d
 800b8e6:	4276      	negs	r6, r6
 800b8e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8ec:	230a      	movs	r3, #10
 800b8ee:	485e      	ldr	r0, [pc, #376]	; (800ba68 <_printf_i+0x244>)
 800b8f0:	e019      	b.n	800b926 <_printf_i+0x102>
 800b8f2:	680e      	ldr	r6, [r1, #0]
 800b8f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8f8:	602b      	str	r3, [r5, #0]
 800b8fa:	bf18      	it	ne
 800b8fc:	b236      	sxthne	r6, r6
 800b8fe:	e7ef      	b.n	800b8e0 <_printf_i+0xbc>
 800b900:	682b      	ldr	r3, [r5, #0]
 800b902:	6820      	ldr	r0, [r4, #0]
 800b904:	1d19      	adds	r1, r3, #4
 800b906:	6029      	str	r1, [r5, #0]
 800b908:	0601      	lsls	r1, r0, #24
 800b90a:	d501      	bpl.n	800b910 <_printf_i+0xec>
 800b90c:	681e      	ldr	r6, [r3, #0]
 800b90e:	e002      	b.n	800b916 <_printf_i+0xf2>
 800b910:	0646      	lsls	r6, r0, #25
 800b912:	d5fb      	bpl.n	800b90c <_printf_i+0xe8>
 800b914:	881e      	ldrh	r6, [r3, #0]
 800b916:	2f6f      	cmp	r7, #111	; 0x6f
 800b918:	bf0c      	ite	eq
 800b91a:	2308      	moveq	r3, #8
 800b91c:	230a      	movne	r3, #10
 800b91e:	4852      	ldr	r0, [pc, #328]	; (800ba68 <_printf_i+0x244>)
 800b920:	2100      	movs	r1, #0
 800b922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b926:	6865      	ldr	r5, [r4, #4]
 800b928:	2d00      	cmp	r5, #0
 800b92a:	bfa8      	it	ge
 800b92c:	6821      	ldrge	r1, [r4, #0]
 800b92e:	60a5      	str	r5, [r4, #8]
 800b930:	bfa4      	itt	ge
 800b932:	f021 0104 	bicge.w	r1, r1, #4
 800b936:	6021      	strge	r1, [r4, #0]
 800b938:	b90e      	cbnz	r6, 800b93e <_printf_i+0x11a>
 800b93a:	2d00      	cmp	r5, #0
 800b93c:	d04d      	beq.n	800b9da <_printf_i+0x1b6>
 800b93e:	4615      	mov	r5, r2
 800b940:	fbb6 f1f3 	udiv	r1, r6, r3
 800b944:	fb03 6711 	mls	r7, r3, r1, r6
 800b948:	5dc7      	ldrb	r7, [r0, r7]
 800b94a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b94e:	4637      	mov	r7, r6
 800b950:	42bb      	cmp	r3, r7
 800b952:	460e      	mov	r6, r1
 800b954:	d9f4      	bls.n	800b940 <_printf_i+0x11c>
 800b956:	2b08      	cmp	r3, #8
 800b958:	d10b      	bne.n	800b972 <_printf_i+0x14e>
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	07de      	lsls	r6, r3, #31
 800b95e:	d508      	bpl.n	800b972 <_printf_i+0x14e>
 800b960:	6923      	ldr	r3, [r4, #16]
 800b962:	6861      	ldr	r1, [r4, #4]
 800b964:	4299      	cmp	r1, r3
 800b966:	bfde      	ittt	le
 800b968:	2330      	movle	r3, #48	; 0x30
 800b96a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b96e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b972:	1b52      	subs	r2, r2, r5
 800b974:	6122      	str	r2, [r4, #16]
 800b976:	464b      	mov	r3, r9
 800b978:	4621      	mov	r1, r4
 800b97a:	4640      	mov	r0, r8
 800b97c:	f8cd a000 	str.w	sl, [sp]
 800b980:	aa03      	add	r2, sp, #12
 800b982:	f7ff fedf 	bl	800b744 <_printf_common>
 800b986:	3001      	adds	r0, #1
 800b988:	d14c      	bne.n	800ba24 <_printf_i+0x200>
 800b98a:	f04f 30ff 	mov.w	r0, #4294967295
 800b98e:	b004      	add	sp, #16
 800b990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b994:	4834      	ldr	r0, [pc, #208]	; (800ba68 <_printf_i+0x244>)
 800b996:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b99a:	6829      	ldr	r1, [r5, #0]
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9a2:	6029      	str	r1, [r5, #0]
 800b9a4:	061d      	lsls	r5, r3, #24
 800b9a6:	d514      	bpl.n	800b9d2 <_printf_i+0x1ae>
 800b9a8:	07df      	lsls	r7, r3, #31
 800b9aa:	bf44      	itt	mi
 800b9ac:	f043 0320 	orrmi.w	r3, r3, #32
 800b9b0:	6023      	strmi	r3, [r4, #0]
 800b9b2:	b91e      	cbnz	r6, 800b9bc <_printf_i+0x198>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	f023 0320 	bic.w	r3, r3, #32
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	2310      	movs	r3, #16
 800b9be:	e7af      	b.n	800b920 <_printf_i+0xfc>
 800b9c0:	6823      	ldr	r3, [r4, #0]
 800b9c2:	f043 0320 	orr.w	r3, r3, #32
 800b9c6:	6023      	str	r3, [r4, #0]
 800b9c8:	2378      	movs	r3, #120	; 0x78
 800b9ca:	4828      	ldr	r0, [pc, #160]	; (800ba6c <_printf_i+0x248>)
 800b9cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9d0:	e7e3      	b.n	800b99a <_printf_i+0x176>
 800b9d2:	0659      	lsls	r1, r3, #25
 800b9d4:	bf48      	it	mi
 800b9d6:	b2b6      	uxthmi	r6, r6
 800b9d8:	e7e6      	b.n	800b9a8 <_printf_i+0x184>
 800b9da:	4615      	mov	r5, r2
 800b9dc:	e7bb      	b.n	800b956 <_printf_i+0x132>
 800b9de:	682b      	ldr	r3, [r5, #0]
 800b9e0:	6826      	ldr	r6, [r4, #0]
 800b9e2:	1d18      	adds	r0, r3, #4
 800b9e4:	6961      	ldr	r1, [r4, #20]
 800b9e6:	6028      	str	r0, [r5, #0]
 800b9e8:	0635      	lsls	r5, r6, #24
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	d501      	bpl.n	800b9f2 <_printf_i+0x1ce>
 800b9ee:	6019      	str	r1, [r3, #0]
 800b9f0:	e002      	b.n	800b9f8 <_printf_i+0x1d4>
 800b9f2:	0670      	lsls	r0, r6, #25
 800b9f4:	d5fb      	bpl.n	800b9ee <_printf_i+0x1ca>
 800b9f6:	8019      	strh	r1, [r3, #0]
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4615      	mov	r5, r2
 800b9fc:	6123      	str	r3, [r4, #16]
 800b9fe:	e7ba      	b.n	800b976 <_printf_i+0x152>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	2100      	movs	r1, #0
 800ba04:	1d1a      	adds	r2, r3, #4
 800ba06:	602a      	str	r2, [r5, #0]
 800ba08:	681d      	ldr	r5, [r3, #0]
 800ba0a:	6862      	ldr	r2, [r4, #4]
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	f000 fb23 	bl	800c058 <memchr>
 800ba12:	b108      	cbz	r0, 800ba18 <_printf_i+0x1f4>
 800ba14:	1b40      	subs	r0, r0, r5
 800ba16:	6060      	str	r0, [r4, #4]
 800ba18:	6863      	ldr	r3, [r4, #4]
 800ba1a:	6123      	str	r3, [r4, #16]
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba22:	e7a8      	b.n	800b976 <_printf_i+0x152>
 800ba24:	462a      	mov	r2, r5
 800ba26:	4649      	mov	r1, r9
 800ba28:	4640      	mov	r0, r8
 800ba2a:	6923      	ldr	r3, [r4, #16]
 800ba2c:	47d0      	blx	sl
 800ba2e:	3001      	adds	r0, #1
 800ba30:	d0ab      	beq.n	800b98a <_printf_i+0x166>
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	079b      	lsls	r3, r3, #30
 800ba36:	d413      	bmi.n	800ba60 <_printf_i+0x23c>
 800ba38:	68e0      	ldr	r0, [r4, #12]
 800ba3a:	9b03      	ldr	r3, [sp, #12]
 800ba3c:	4298      	cmp	r0, r3
 800ba3e:	bfb8      	it	lt
 800ba40:	4618      	movlt	r0, r3
 800ba42:	e7a4      	b.n	800b98e <_printf_i+0x16a>
 800ba44:	2301      	movs	r3, #1
 800ba46:	4632      	mov	r2, r6
 800ba48:	4649      	mov	r1, r9
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	47d0      	blx	sl
 800ba4e:	3001      	adds	r0, #1
 800ba50:	d09b      	beq.n	800b98a <_printf_i+0x166>
 800ba52:	3501      	adds	r5, #1
 800ba54:	68e3      	ldr	r3, [r4, #12]
 800ba56:	9903      	ldr	r1, [sp, #12]
 800ba58:	1a5b      	subs	r3, r3, r1
 800ba5a:	42ab      	cmp	r3, r5
 800ba5c:	dcf2      	bgt.n	800ba44 <_printf_i+0x220>
 800ba5e:	e7eb      	b.n	800ba38 <_printf_i+0x214>
 800ba60:	2500      	movs	r5, #0
 800ba62:	f104 0619 	add.w	r6, r4, #25
 800ba66:	e7f5      	b.n	800ba54 <_printf_i+0x230>
 800ba68:	0800c5b6 	.word	0x0800c5b6
 800ba6c:	0800c5c7 	.word	0x0800c5c7

0800ba70 <_sbrk_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	2300      	movs	r3, #0
 800ba74:	4d05      	ldr	r5, [pc, #20]	; (800ba8c <_sbrk_r+0x1c>)
 800ba76:	4604      	mov	r4, r0
 800ba78:	4608      	mov	r0, r1
 800ba7a:	602b      	str	r3, [r5, #0]
 800ba7c:	f7f6 f852 	bl	8001b24 <_sbrk>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_sbrk_r+0x1a>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_sbrk_r+0x1a>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	20000bb8 	.word	0x20000bb8

0800ba90 <__swbuf_r>:
 800ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba92:	460e      	mov	r6, r1
 800ba94:	4614      	mov	r4, r2
 800ba96:	4605      	mov	r5, r0
 800ba98:	b118      	cbz	r0, 800baa2 <__swbuf_r+0x12>
 800ba9a:	6983      	ldr	r3, [r0, #24]
 800ba9c:	b90b      	cbnz	r3, 800baa2 <__swbuf_r+0x12>
 800ba9e:	f000 f9d5 	bl	800be4c <__sinit>
 800baa2:	4b21      	ldr	r3, [pc, #132]	; (800bb28 <__swbuf_r+0x98>)
 800baa4:	429c      	cmp	r4, r3
 800baa6:	d12b      	bne.n	800bb00 <__swbuf_r+0x70>
 800baa8:	686c      	ldr	r4, [r5, #4]
 800baaa:	69a3      	ldr	r3, [r4, #24]
 800baac:	60a3      	str	r3, [r4, #8]
 800baae:	89a3      	ldrh	r3, [r4, #12]
 800bab0:	071a      	lsls	r2, r3, #28
 800bab2:	d52f      	bpl.n	800bb14 <__swbuf_r+0x84>
 800bab4:	6923      	ldr	r3, [r4, #16]
 800bab6:	b36b      	cbz	r3, 800bb14 <__swbuf_r+0x84>
 800bab8:	6923      	ldr	r3, [r4, #16]
 800baba:	6820      	ldr	r0, [r4, #0]
 800babc:	b2f6      	uxtb	r6, r6
 800babe:	1ac0      	subs	r0, r0, r3
 800bac0:	6963      	ldr	r3, [r4, #20]
 800bac2:	4637      	mov	r7, r6
 800bac4:	4283      	cmp	r3, r0
 800bac6:	dc04      	bgt.n	800bad2 <__swbuf_r+0x42>
 800bac8:	4621      	mov	r1, r4
 800baca:	4628      	mov	r0, r5
 800bacc:	f000 f92a 	bl	800bd24 <_fflush_r>
 800bad0:	bb30      	cbnz	r0, 800bb20 <__swbuf_r+0x90>
 800bad2:	68a3      	ldr	r3, [r4, #8]
 800bad4:	3001      	adds	r0, #1
 800bad6:	3b01      	subs	r3, #1
 800bad8:	60a3      	str	r3, [r4, #8]
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	6022      	str	r2, [r4, #0]
 800bae0:	701e      	strb	r6, [r3, #0]
 800bae2:	6963      	ldr	r3, [r4, #20]
 800bae4:	4283      	cmp	r3, r0
 800bae6:	d004      	beq.n	800baf2 <__swbuf_r+0x62>
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	07db      	lsls	r3, r3, #31
 800baec:	d506      	bpl.n	800bafc <__swbuf_r+0x6c>
 800baee:	2e0a      	cmp	r6, #10
 800baf0:	d104      	bne.n	800bafc <__swbuf_r+0x6c>
 800baf2:	4621      	mov	r1, r4
 800baf4:	4628      	mov	r0, r5
 800baf6:	f000 f915 	bl	800bd24 <_fflush_r>
 800bafa:	b988      	cbnz	r0, 800bb20 <__swbuf_r+0x90>
 800bafc:	4638      	mov	r0, r7
 800bafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb00:	4b0a      	ldr	r3, [pc, #40]	; (800bb2c <__swbuf_r+0x9c>)
 800bb02:	429c      	cmp	r4, r3
 800bb04:	d101      	bne.n	800bb0a <__swbuf_r+0x7a>
 800bb06:	68ac      	ldr	r4, [r5, #8]
 800bb08:	e7cf      	b.n	800baaa <__swbuf_r+0x1a>
 800bb0a:	4b09      	ldr	r3, [pc, #36]	; (800bb30 <__swbuf_r+0xa0>)
 800bb0c:	429c      	cmp	r4, r3
 800bb0e:	bf08      	it	eq
 800bb10:	68ec      	ldreq	r4, [r5, #12]
 800bb12:	e7ca      	b.n	800baaa <__swbuf_r+0x1a>
 800bb14:	4621      	mov	r1, r4
 800bb16:	4628      	mov	r0, r5
 800bb18:	f000 f80c 	bl	800bb34 <__swsetup_r>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d0cb      	beq.n	800bab8 <__swbuf_r+0x28>
 800bb20:	f04f 37ff 	mov.w	r7, #4294967295
 800bb24:	e7ea      	b.n	800bafc <__swbuf_r+0x6c>
 800bb26:	bf00      	nop
 800bb28:	0800c5f8 	.word	0x0800c5f8
 800bb2c:	0800c618 	.word	0x0800c618
 800bb30:	0800c5d8 	.word	0x0800c5d8

0800bb34 <__swsetup_r>:
 800bb34:	4b32      	ldr	r3, [pc, #200]	; (800bc00 <__swsetup_r+0xcc>)
 800bb36:	b570      	push	{r4, r5, r6, lr}
 800bb38:	681d      	ldr	r5, [r3, #0]
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	460c      	mov	r4, r1
 800bb3e:	b125      	cbz	r5, 800bb4a <__swsetup_r+0x16>
 800bb40:	69ab      	ldr	r3, [r5, #24]
 800bb42:	b913      	cbnz	r3, 800bb4a <__swsetup_r+0x16>
 800bb44:	4628      	mov	r0, r5
 800bb46:	f000 f981 	bl	800be4c <__sinit>
 800bb4a:	4b2e      	ldr	r3, [pc, #184]	; (800bc04 <__swsetup_r+0xd0>)
 800bb4c:	429c      	cmp	r4, r3
 800bb4e:	d10f      	bne.n	800bb70 <__swsetup_r+0x3c>
 800bb50:	686c      	ldr	r4, [r5, #4]
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb58:	0719      	lsls	r1, r3, #28
 800bb5a:	d42c      	bmi.n	800bbb6 <__swsetup_r+0x82>
 800bb5c:	06dd      	lsls	r5, r3, #27
 800bb5e:	d411      	bmi.n	800bb84 <__swsetup_r+0x50>
 800bb60:	2309      	movs	r3, #9
 800bb62:	6033      	str	r3, [r6, #0]
 800bb64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb68:	f04f 30ff 	mov.w	r0, #4294967295
 800bb6c:	81a3      	strh	r3, [r4, #12]
 800bb6e:	e03e      	b.n	800bbee <__swsetup_r+0xba>
 800bb70:	4b25      	ldr	r3, [pc, #148]	; (800bc08 <__swsetup_r+0xd4>)
 800bb72:	429c      	cmp	r4, r3
 800bb74:	d101      	bne.n	800bb7a <__swsetup_r+0x46>
 800bb76:	68ac      	ldr	r4, [r5, #8]
 800bb78:	e7eb      	b.n	800bb52 <__swsetup_r+0x1e>
 800bb7a:	4b24      	ldr	r3, [pc, #144]	; (800bc0c <__swsetup_r+0xd8>)
 800bb7c:	429c      	cmp	r4, r3
 800bb7e:	bf08      	it	eq
 800bb80:	68ec      	ldreq	r4, [r5, #12]
 800bb82:	e7e6      	b.n	800bb52 <__swsetup_r+0x1e>
 800bb84:	0758      	lsls	r0, r3, #29
 800bb86:	d512      	bpl.n	800bbae <__swsetup_r+0x7a>
 800bb88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb8a:	b141      	cbz	r1, 800bb9e <__swsetup_r+0x6a>
 800bb8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb90:	4299      	cmp	r1, r3
 800bb92:	d002      	beq.n	800bb9a <__swsetup_r+0x66>
 800bb94:	4630      	mov	r0, r6
 800bb96:	f7ff fa45 	bl	800b024 <_free_r>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bba4:	81a3      	strh	r3, [r4, #12]
 800bba6:	2300      	movs	r3, #0
 800bba8:	6063      	str	r3, [r4, #4]
 800bbaa:	6923      	ldr	r3, [r4, #16]
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	f043 0308 	orr.w	r3, r3, #8
 800bbb4:	81a3      	strh	r3, [r4, #12]
 800bbb6:	6923      	ldr	r3, [r4, #16]
 800bbb8:	b94b      	cbnz	r3, 800bbce <__swsetup_r+0x9a>
 800bbba:	89a3      	ldrh	r3, [r4, #12]
 800bbbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbc4:	d003      	beq.n	800bbce <__swsetup_r+0x9a>
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	4630      	mov	r0, r6
 800bbca:	f000 fa05 	bl	800bfd8 <__smakebuf_r>
 800bbce:	89a0      	ldrh	r0, [r4, #12]
 800bbd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbd4:	f010 0301 	ands.w	r3, r0, #1
 800bbd8:	d00a      	beq.n	800bbf0 <__swsetup_r+0xbc>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60a3      	str	r3, [r4, #8]
 800bbde:	6963      	ldr	r3, [r4, #20]
 800bbe0:	425b      	negs	r3, r3
 800bbe2:	61a3      	str	r3, [r4, #24]
 800bbe4:	6923      	ldr	r3, [r4, #16]
 800bbe6:	b943      	cbnz	r3, 800bbfa <__swsetup_r+0xc6>
 800bbe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbec:	d1ba      	bne.n	800bb64 <__swsetup_r+0x30>
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	0781      	lsls	r1, r0, #30
 800bbf2:	bf58      	it	pl
 800bbf4:	6963      	ldrpl	r3, [r4, #20]
 800bbf6:	60a3      	str	r3, [r4, #8]
 800bbf8:	e7f4      	b.n	800bbe4 <__swsetup_r+0xb0>
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	e7f7      	b.n	800bbee <__swsetup_r+0xba>
 800bbfe:	bf00      	nop
 800bc00:	2000016c 	.word	0x2000016c
 800bc04:	0800c5f8 	.word	0x0800c5f8
 800bc08:	0800c618 	.word	0x0800c618
 800bc0c:	0800c5d8 	.word	0x0800c5d8

0800bc10 <abort>:
 800bc10:	2006      	movs	r0, #6
 800bc12:	b508      	push	{r3, lr}
 800bc14:	f000 faba 	bl	800c18c <raise>
 800bc18:	2001      	movs	r0, #1
 800bc1a:	f7f5 ff10 	bl	8001a3e <_exit>
	...

0800bc20 <__sflush_r>:
 800bc20:	898a      	ldrh	r2, [r1, #12]
 800bc22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc24:	4605      	mov	r5, r0
 800bc26:	0710      	lsls	r0, r2, #28
 800bc28:	460c      	mov	r4, r1
 800bc2a:	d457      	bmi.n	800bcdc <__sflush_r+0xbc>
 800bc2c:	684b      	ldr	r3, [r1, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	dc04      	bgt.n	800bc3c <__sflush_r+0x1c>
 800bc32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dc01      	bgt.n	800bc3c <__sflush_r+0x1c>
 800bc38:	2000      	movs	r0, #0
 800bc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc3e:	2e00      	cmp	r6, #0
 800bc40:	d0fa      	beq.n	800bc38 <__sflush_r+0x18>
 800bc42:	2300      	movs	r3, #0
 800bc44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc48:	682f      	ldr	r7, [r5, #0]
 800bc4a:	602b      	str	r3, [r5, #0]
 800bc4c:	d032      	beq.n	800bcb4 <__sflush_r+0x94>
 800bc4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc50:	89a3      	ldrh	r3, [r4, #12]
 800bc52:	075a      	lsls	r2, r3, #29
 800bc54:	d505      	bpl.n	800bc62 <__sflush_r+0x42>
 800bc56:	6863      	ldr	r3, [r4, #4]
 800bc58:	1ac0      	subs	r0, r0, r3
 800bc5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc5c:	b10b      	cbz	r3, 800bc62 <__sflush_r+0x42>
 800bc5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc60:	1ac0      	subs	r0, r0, r3
 800bc62:	2300      	movs	r3, #0
 800bc64:	4602      	mov	r2, r0
 800bc66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc68:	4628      	mov	r0, r5
 800bc6a:	6a21      	ldr	r1, [r4, #32]
 800bc6c:	47b0      	blx	r6
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	d106      	bne.n	800bc82 <__sflush_r+0x62>
 800bc74:	6829      	ldr	r1, [r5, #0]
 800bc76:	291d      	cmp	r1, #29
 800bc78:	d82c      	bhi.n	800bcd4 <__sflush_r+0xb4>
 800bc7a:	4a29      	ldr	r2, [pc, #164]	; (800bd20 <__sflush_r+0x100>)
 800bc7c:	40ca      	lsrs	r2, r1
 800bc7e:	07d6      	lsls	r6, r2, #31
 800bc80:	d528      	bpl.n	800bcd4 <__sflush_r+0xb4>
 800bc82:	2200      	movs	r2, #0
 800bc84:	6062      	str	r2, [r4, #4]
 800bc86:	6922      	ldr	r2, [r4, #16]
 800bc88:	04d9      	lsls	r1, r3, #19
 800bc8a:	6022      	str	r2, [r4, #0]
 800bc8c:	d504      	bpl.n	800bc98 <__sflush_r+0x78>
 800bc8e:	1c42      	adds	r2, r0, #1
 800bc90:	d101      	bne.n	800bc96 <__sflush_r+0x76>
 800bc92:	682b      	ldr	r3, [r5, #0]
 800bc94:	b903      	cbnz	r3, 800bc98 <__sflush_r+0x78>
 800bc96:	6560      	str	r0, [r4, #84]	; 0x54
 800bc98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc9a:	602f      	str	r7, [r5, #0]
 800bc9c:	2900      	cmp	r1, #0
 800bc9e:	d0cb      	beq.n	800bc38 <__sflush_r+0x18>
 800bca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bca4:	4299      	cmp	r1, r3
 800bca6:	d002      	beq.n	800bcae <__sflush_r+0x8e>
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f7ff f9bb 	bl	800b024 <_free_r>
 800bcae:	2000      	movs	r0, #0
 800bcb0:	6360      	str	r0, [r4, #52]	; 0x34
 800bcb2:	e7c2      	b.n	800bc3a <__sflush_r+0x1a>
 800bcb4:	6a21      	ldr	r1, [r4, #32]
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4628      	mov	r0, r5
 800bcba:	47b0      	blx	r6
 800bcbc:	1c41      	adds	r1, r0, #1
 800bcbe:	d1c7      	bne.n	800bc50 <__sflush_r+0x30>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d0c4      	beq.n	800bc50 <__sflush_r+0x30>
 800bcc6:	2b1d      	cmp	r3, #29
 800bcc8:	d001      	beq.n	800bcce <__sflush_r+0xae>
 800bcca:	2b16      	cmp	r3, #22
 800bccc:	d101      	bne.n	800bcd2 <__sflush_r+0xb2>
 800bcce:	602f      	str	r7, [r5, #0]
 800bcd0:	e7b2      	b.n	800bc38 <__sflush_r+0x18>
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	e7ae      	b.n	800bc3a <__sflush_r+0x1a>
 800bcdc:	690f      	ldr	r7, [r1, #16]
 800bcde:	2f00      	cmp	r7, #0
 800bce0:	d0aa      	beq.n	800bc38 <__sflush_r+0x18>
 800bce2:	0793      	lsls	r3, r2, #30
 800bce4:	bf18      	it	ne
 800bce6:	2300      	movne	r3, #0
 800bce8:	680e      	ldr	r6, [r1, #0]
 800bcea:	bf08      	it	eq
 800bcec:	694b      	ldreq	r3, [r1, #20]
 800bcee:	1bf6      	subs	r6, r6, r7
 800bcf0:	600f      	str	r7, [r1, #0]
 800bcf2:	608b      	str	r3, [r1, #8]
 800bcf4:	2e00      	cmp	r6, #0
 800bcf6:	dd9f      	ble.n	800bc38 <__sflush_r+0x18>
 800bcf8:	4633      	mov	r3, r6
 800bcfa:	463a      	mov	r2, r7
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	6a21      	ldr	r1, [r4, #32]
 800bd00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bd04:	47e0      	blx	ip
 800bd06:	2800      	cmp	r0, #0
 800bd08:	dc06      	bgt.n	800bd18 <__sflush_r+0xf8>
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	e790      	b.n	800bc3a <__sflush_r+0x1a>
 800bd18:	4407      	add	r7, r0
 800bd1a:	1a36      	subs	r6, r6, r0
 800bd1c:	e7ea      	b.n	800bcf4 <__sflush_r+0xd4>
 800bd1e:	bf00      	nop
 800bd20:	20400001 	.word	0x20400001

0800bd24 <_fflush_r>:
 800bd24:	b538      	push	{r3, r4, r5, lr}
 800bd26:	690b      	ldr	r3, [r1, #16]
 800bd28:	4605      	mov	r5, r0
 800bd2a:	460c      	mov	r4, r1
 800bd2c:	b913      	cbnz	r3, 800bd34 <_fflush_r+0x10>
 800bd2e:	2500      	movs	r5, #0
 800bd30:	4628      	mov	r0, r5
 800bd32:	bd38      	pop	{r3, r4, r5, pc}
 800bd34:	b118      	cbz	r0, 800bd3e <_fflush_r+0x1a>
 800bd36:	6983      	ldr	r3, [r0, #24]
 800bd38:	b90b      	cbnz	r3, 800bd3e <_fflush_r+0x1a>
 800bd3a:	f000 f887 	bl	800be4c <__sinit>
 800bd3e:	4b14      	ldr	r3, [pc, #80]	; (800bd90 <_fflush_r+0x6c>)
 800bd40:	429c      	cmp	r4, r3
 800bd42:	d11b      	bne.n	800bd7c <_fflush_r+0x58>
 800bd44:	686c      	ldr	r4, [r5, #4]
 800bd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d0ef      	beq.n	800bd2e <_fflush_r+0xa>
 800bd4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd50:	07d0      	lsls	r0, r2, #31
 800bd52:	d404      	bmi.n	800bd5e <_fflush_r+0x3a>
 800bd54:	0599      	lsls	r1, r3, #22
 800bd56:	d402      	bmi.n	800bd5e <_fflush_r+0x3a>
 800bd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd5a:	f000 f915 	bl	800bf88 <__retarget_lock_acquire_recursive>
 800bd5e:	4628      	mov	r0, r5
 800bd60:	4621      	mov	r1, r4
 800bd62:	f7ff ff5d 	bl	800bc20 <__sflush_r>
 800bd66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd68:	4605      	mov	r5, r0
 800bd6a:	07da      	lsls	r2, r3, #31
 800bd6c:	d4e0      	bmi.n	800bd30 <_fflush_r+0xc>
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	059b      	lsls	r3, r3, #22
 800bd72:	d4dd      	bmi.n	800bd30 <_fflush_r+0xc>
 800bd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd76:	f000 f908 	bl	800bf8a <__retarget_lock_release_recursive>
 800bd7a:	e7d9      	b.n	800bd30 <_fflush_r+0xc>
 800bd7c:	4b05      	ldr	r3, [pc, #20]	; (800bd94 <_fflush_r+0x70>)
 800bd7e:	429c      	cmp	r4, r3
 800bd80:	d101      	bne.n	800bd86 <_fflush_r+0x62>
 800bd82:	68ac      	ldr	r4, [r5, #8]
 800bd84:	e7df      	b.n	800bd46 <_fflush_r+0x22>
 800bd86:	4b04      	ldr	r3, [pc, #16]	; (800bd98 <_fflush_r+0x74>)
 800bd88:	429c      	cmp	r4, r3
 800bd8a:	bf08      	it	eq
 800bd8c:	68ec      	ldreq	r4, [r5, #12]
 800bd8e:	e7da      	b.n	800bd46 <_fflush_r+0x22>
 800bd90:	0800c5f8 	.word	0x0800c5f8
 800bd94:	0800c618 	.word	0x0800c618
 800bd98:	0800c5d8 	.word	0x0800c5d8

0800bd9c <std>:
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	b510      	push	{r4, lr}
 800bda0:	4604      	mov	r4, r0
 800bda2:	e9c0 3300 	strd	r3, r3, [r0]
 800bda6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdaa:	6083      	str	r3, [r0, #8]
 800bdac:	8181      	strh	r1, [r0, #12]
 800bdae:	6643      	str	r3, [r0, #100]	; 0x64
 800bdb0:	81c2      	strh	r2, [r0, #14]
 800bdb2:	6183      	str	r3, [r0, #24]
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	2208      	movs	r2, #8
 800bdb8:	305c      	adds	r0, #92	; 0x5c
 800bdba:	f7fe ffe9 	bl	800ad90 <memset>
 800bdbe:	4b05      	ldr	r3, [pc, #20]	; (800bdd4 <std+0x38>)
 800bdc0:	6224      	str	r4, [r4, #32]
 800bdc2:	6263      	str	r3, [r4, #36]	; 0x24
 800bdc4:	4b04      	ldr	r3, [pc, #16]	; (800bdd8 <std+0x3c>)
 800bdc6:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdc8:	4b04      	ldr	r3, [pc, #16]	; (800bddc <std+0x40>)
 800bdca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdcc:	4b04      	ldr	r3, [pc, #16]	; (800bde0 <std+0x44>)
 800bdce:	6323      	str	r3, [r4, #48]	; 0x30
 800bdd0:	bd10      	pop	{r4, pc}
 800bdd2:	bf00      	nop
 800bdd4:	0800c1c5 	.word	0x0800c1c5
 800bdd8:	0800c1e7 	.word	0x0800c1e7
 800bddc:	0800c21f 	.word	0x0800c21f
 800bde0:	0800c243 	.word	0x0800c243

0800bde4 <_cleanup_r>:
 800bde4:	4901      	ldr	r1, [pc, #4]	; (800bdec <_cleanup_r+0x8>)
 800bde6:	f000 b8af 	b.w	800bf48 <_fwalk_reent>
 800bdea:	bf00      	nop
 800bdec:	0800bd25 	.word	0x0800bd25

0800bdf0 <__sfmoreglue>:
 800bdf0:	2268      	movs	r2, #104	; 0x68
 800bdf2:	b570      	push	{r4, r5, r6, lr}
 800bdf4:	1e4d      	subs	r5, r1, #1
 800bdf6:	4355      	muls	r5, r2
 800bdf8:	460e      	mov	r6, r1
 800bdfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdfe:	f7ff f979 	bl	800b0f4 <_malloc_r>
 800be02:	4604      	mov	r4, r0
 800be04:	b140      	cbz	r0, 800be18 <__sfmoreglue+0x28>
 800be06:	2100      	movs	r1, #0
 800be08:	e9c0 1600 	strd	r1, r6, [r0]
 800be0c:	300c      	adds	r0, #12
 800be0e:	60a0      	str	r0, [r4, #8]
 800be10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be14:	f7fe ffbc 	bl	800ad90 <memset>
 800be18:	4620      	mov	r0, r4
 800be1a:	bd70      	pop	{r4, r5, r6, pc}

0800be1c <__sfp_lock_acquire>:
 800be1c:	4801      	ldr	r0, [pc, #4]	; (800be24 <__sfp_lock_acquire+0x8>)
 800be1e:	f000 b8b3 	b.w	800bf88 <__retarget_lock_acquire_recursive>
 800be22:	bf00      	nop
 800be24:	20000bb5 	.word	0x20000bb5

0800be28 <__sfp_lock_release>:
 800be28:	4801      	ldr	r0, [pc, #4]	; (800be30 <__sfp_lock_release+0x8>)
 800be2a:	f000 b8ae 	b.w	800bf8a <__retarget_lock_release_recursive>
 800be2e:	bf00      	nop
 800be30:	20000bb5 	.word	0x20000bb5

0800be34 <__sinit_lock_acquire>:
 800be34:	4801      	ldr	r0, [pc, #4]	; (800be3c <__sinit_lock_acquire+0x8>)
 800be36:	f000 b8a7 	b.w	800bf88 <__retarget_lock_acquire_recursive>
 800be3a:	bf00      	nop
 800be3c:	20000bb6 	.word	0x20000bb6

0800be40 <__sinit_lock_release>:
 800be40:	4801      	ldr	r0, [pc, #4]	; (800be48 <__sinit_lock_release+0x8>)
 800be42:	f000 b8a2 	b.w	800bf8a <__retarget_lock_release_recursive>
 800be46:	bf00      	nop
 800be48:	20000bb6 	.word	0x20000bb6

0800be4c <__sinit>:
 800be4c:	b510      	push	{r4, lr}
 800be4e:	4604      	mov	r4, r0
 800be50:	f7ff fff0 	bl	800be34 <__sinit_lock_acquire>
 800be54:	69a3      	ldr	r3, [r4, #24]
 800be56:	b11b      	cbz	r3, 800be60 <__sinit+0x14>
 800be58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be5c:	f7ff bff0 	b.w	800be40 <__sinit_lock_release>
 800be60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be64:	6523      	str	r3, [r4, #80]	; 0x50
 800be66:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <__sinit+0x68>)
 800be68:	4a13      	ldr	r2, [pc, #76]	; (800beb8 <__sinit+0x6c>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800be6e:	42a3      	cmp	r3, r4
 800be70:	bf08      	it	eq
 800be72:	2301      	moveq	r3, #1
 800be74:	4620      	mov	r0, r4
 800be76:	bf08      	it	eq
 800be78:	61a3      	streq	r3, [r4, #24]
 800be7a:	f000 f81f 	bl	800bebc <__sfp>
 800be7e:	6060      	str	r0, [r4, #4]
 800be80:	4620      	mov	r0, r4
 800be82:	f000 f81b 	bl	800bebc <__sfp>
 800be86:	60a0      	str	r0, [r4, #8]
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 f817 	bl	800bebc <__sfp>
 800be8e:	2200      	movs	r2, #0
 800be90:	2104      	movs	r1, #4
 800be92:	60e0      	str	r0, [r4, #12]
 800be94:	6860      	ldr	r0, [r4, #4]
 800be96:	f7ff ff81 	bl	800bd9c <std>
 800be9a:	2201      	movs	r2, #1
 800be9c:	2109      	movs	r1, #9
 800be9e:	68a0      	ldr	r0, [r4, #8]
 800bea0:	f7ff ff7c 	bl	800bd9c <std>
 800bea4:	2202      	movs	r2, #2
 800bea6:	2112      	movs	r1, #18
 800bea8:	68e0      	ldr	r0, [r4, #12]
 800beaa:	f7ff ff77 	bl	800bd9c <std>
 800beae:	2301      	movs	r3, #1
 800beb0:	61a3      	str	r3, [r4, #24]
 800beb2:	e7d1      	b.n	800be58 <__sinit+0xc>
 800beb4:	0800c3f0 	.word	0x0800c3f0
 800beb8:	0800bde5 	.word	0x0800bde5

0800bebc <__sfp>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	4607      	mov	r7, r0
 800bec0:	f7ff ffac 	bl	800be1c <__sfp_lock_acquire>
 800bec4:	4b1e      	ldr	r3, [pc, #120]	; (800bf40 <__sfp+0x84>)
 800bec6:	681e      	ldr	r6, [r3, #0]
 800bec8:	69b3      	ldr	r3, [r6, #24]
 800beca:	b913      	cbnz	r3, 800bed2 <__sfp+0x16>
 800becc:	4630      	mov	r0, r6
 800bece:	f7ff ffbd 	bl	800be4c <__sinit>
 800bed2:	3648      	adds	r6, #72	; 0x48
 800bed4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bed8:	3b01      	subs	r3, #1
 800beda:	d503      	bpl.n	800bee4 <__sfp+0x28>
 800bedc:	6833      	ldr	r3, [r6, #0]
 800bede:	b30b      	cbz	r3, 800bf24 <__sfp+0x68>
 800bee0:	6836      	ldr	r6, [r6, #0]
 800bee2:	e7f7      	b.n	800bed4 <__sfp+0x18>
 800bee4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bee8:	b9d5      	cbnz	r5, 800bf20 <__sfp+0x64>
 800beea:	4b16      	ldr	r3, [pc, #88]	; (800bf44 <__sfp+0x88>)
 800beec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bef0:	60e3      	str	r3, [r4, #12]
 800bef2:	6665      	str	r5, [r4, #100]	; 0x64
 800bef4:	f000 f847 	bl	800bf86 <__retarget_lock_init_recursive>
 800bef8:	f7ff ff96 	bl	800be28 <__sfp_lock_release>
 800befc:	2208      	movs	r2, #8
 800befe:	4629      	mov	r1, r5
 800bf00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf08:	6025      	str	r5, [r4, #0]
 800bf0a:	61a5      	str	r5, [r4, #24]
 800bf0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf10:	f7fe ff3e 	bl	800ad90 <memset>
 800bf14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf20:	3468      	adds	r4, #104	; 0x68
 800bf22:	e7d9      	b.n	800bed8 <__sfp+0x1c>
 800bf24:	2104      	movs	r1, #4
 800bf26:	4638      	mov	r0, r7
 800bf28:	f7ff ff62 	bl	800bdf0 <__sfmoreglue>
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	6030      	str	r0, [r6, #0]
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d1d5      	bne.n	800bee0 <__sfp+0x24>
 800bf34:	f7ff ff78 	bl	800be28 <__sfp_lock_release>
 800bf38:	230c      	movs	r3, #12
 800bf3a:	603b      	str	r3, [r7, #0]
 800bf3c:	e7ee      	b.n	800bf1c <__sfp+0x60>
 800bf3e:	bf00      	nop
 800bf40:	0800c3f0 	.word	0x0800c3f0
 800bf44:	ffff0001 	.word	0xffff0001

0800bf48 <_fwalk_reent>:
 800bf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	4688      	mov	r8, r1
 800bf50:	2700      	movs	r7, #0
 800bf52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf5a:	f1b9 0901 	subs.w	r9, r9, #1
 800bf5e:	d505      	bpl.n	800bf6c <_fwalk_reent+0x24>
 800bf60:	6824      	ldr	r4, [r4, #0]
 800bf62:	2c00      	cmp	r4, #0
 800bf64:	d1f7      	bne.n	800bf56 <_fwalk_reent+0xe>
 800bf66:	4638      	mov	r0, r7
 800bf68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf6c:	89ab      	ldrh	r3, [r5, #12]
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d907      	bls.n	800bf82 <_fwalk_reent+0x3a>
 800bf72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf76:	3301      	adds	r3, #1
 800bf78:	d003      	beq.n	800bf82 <_fwalk_reent+0x3a>
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	47c0      	blx	r8
 800bf80:	4307      	orrs	r7, r0
 800bf82:	3568      	adds	r5, #104	; 0x68
 800bf84:	e7e9      	b.n	800bf5a <_fwalk_reent+0x12>

0800bf86 <__retarget_lock_init_recursive>:
 800bf86:	4770      	bx	lr

0800bf88 <__retarget_lock_acquire_recursive>:
 800bf88:	4770      	bx	lr

0800bf8a <__retarget_lock_release_recursive>:
 800bf8a:	4770      	bx	lr

0800bf8c <__swhatbuf_r>:
 800bf8c:	b570      	push	{r4, r5, r6, lr}
 800bf8e:	460e      	mov	r6, r1
 800bf90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf94:	4614      	mov	r4, r2
 800bf96:	2900      	cmp	r1, #0
 800bf98:	461d      	mov	r5, r3
 800bf9a:	b096      	sub	sp, #88	; 0x58
 800bf9c:	da08      	bge.n	800bfb0 <__swhatbuf_r+0x24>
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bfa4:	602a      	str	r2, [r5, #0]
 800bfa6:	061a      	lsls	r2, r3, #24
 800bfa8:	d410      	bmi.n	800bfcc <__swhatbuf_r+0x40>
 800bfaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfae:	e00e      	b.n	800bfce <__swhatbuf_r+0x42>
 800bfb0:	466a      	mov	r2, sp
 800bfb2:	f000 f96d 	bl	800c290 <_fstat_r>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	dbf1      	blt.n	800bf9e <__swhatbuf_r+0x12>
 800bfba:	9a01      	ldr	r2, [sp, #4]
 800bfbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bfc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bfc4:	425a      	negs	r2, r3
 800bfc6:	415a      	adcs	r2, r3
 800bfc8:	602a      	str	r2, [r5, #0]
 800bfca:	e7ee      	b.n	800bfaa <__swhatbuf_r+0x1e>
 800bfcc:	2340      	movs	r3, #64	; 0x40
 800bfce:	2000      	movs	r0, #0
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	b016      	add	sp, #88	; 0x58
 800bfd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bfd8 <__smakebuf_r>:
 800bfd8:	898b      	ldrh	r3, [r1, #12]
 800bfda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfdc:	079d      	lsls	r5, r3, #30
 800bfde:	4606      	mov	r6, r0
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	d507      	bpl.n	800bff4 <__smakebuf_r+0x1c>
 800bfe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	6123      	str	r3, [r4, #16]
 800bfec:	2301      	movs	r3, #1
 800bfee:	6163      	str	r3, [r4, #20]
 800bff0:	b002      	add	sp, #8
 800bff2:	bd70      	pop	{r4, r5, r6, pc}
 800bff4:	466a      	mov	r2, sp
 800bff6:	ab01      	add	r3, sp, #4
 800bff8:	f7ff ffc8 	bl	800bf8c <__swhatbuf_r>
 800bffc:	9900      	ldr	r1, [sp, #0]
 800bffe:	4605      	mov	r5, r0
 800c000:	4630      	mov	r0, r6
 800c002:	f7ff f877 	bl	800b0f4 <_malloc_r>
 800c006:	b948      	cbnz	r0, 800c01c <__smakebuf_r+0x44>
 800c008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c00c:	059a      	lsls	r2, r3, #22
 800c00e:	d4ef      	bmi.n	800bff0 <__smakebuf_r+0x18>
 800c010:	f023 0303 	bic.w	r3, r3, #3
 800c014:	f043 0302 	orr.w	r3, r3, #2
 800c018:	81a3      	strh	r3, [r4, #12]
 800c01a:	e7e3      	b.n	800bfe4 <__smakebuf_r+0xc>
 800c01c:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <__smakebuf_r+0x7c>)
 800c01e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	6020      	str	r0, [r4, #0]
 800c024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c028:	81a3      	strh	r3, [r4, #12]
 800c02a:	9b00      	ldr	r3, [sp, #0]
 800c02c:	6120      	str	r0, [r4, #16]
 800c02e:	6163      	str	r3, [r4, #20]
 800c030:	9b01      	ldr	r3, [sp, #4]
 800c032:	b15b      	cbz	r3, 800c04c <__smakebuf_r+0x74>
 800c034:	4630      	mov	r0, r6
 800c036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c03a:	f000 f93b 	bl	800c2b4 <_isatty_r>
 800c03e:	b128      	cbz	r0, 800c04c <__smakebuf_r+0x74>
 800c040:	89a3      	ldrh	r3, [r4, #12]
 800c042:	f023 0303 	bic.w	r3, r3, #3
 800c046:	f043 0301 	orr.w	r3, r3, #1
 800c04a:	81a3      	strh	r3, [r4, #12]
 800c04c:	89a0      	ldrh	r0, [r4, #12]
 800c04e:	4305      	orrs	r5, r0
 800c050:	81a5      	strh	r5, [r4, #12]
 800c052:	e7cd      	b.n	800bff0 <__smakebuf_r+0x18>
 800c054:	0800bde5 	.word	0x0800bde5

0800c058 <memchr>:
 800c058:	4603      	mov	r3, r0
 800c05a:	b510      	push	{r4, lr}
 800c05c:	b2c9      	uxtb	r1, r1
 800c05e:	4402      	add	r2, r0
 800c060:	4293      	cmp	r3, r2
 800c062:	4618      	mov	r0, r3
 800c064:	d101      	bne.n	800c06a <memchr+0x12>
 800c066:	2000      	movs	r0, #0
 800c068:	e003      	b.n	800c072 <memchr+0x1a>
 800c06a:	7804      	ldrb	r4, [r0, #0]
 800c06c:	3301      	adds	r3, #1
 800c06e:	428c      	cmp	r4, r1
 800c070:	d1f6      	bne.n	800c060 <memchr+0x8>
 800c072:	bd10      	pop	{r4, pc}

0800c074 <memcpy>:
 800c074:	440a      	add	r2, r1
 800c076:	4291      	cmp	r1, r2
 800c078:	f100 33ff 	add.w	r3, r0, #4294967295
 800c07c:	d100      	bne.n	800c080 <memcpy+0xc>
 800c07e:	4770      	bx	lr
 800c080:	b510      	push	{r4, lr}
 800c082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c086:	4291      	cmp	r1, r2
 800c088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c08c:	d1f9      	bne.n	800c082 <memcpy+0xe>
 800c08e:	bd10      	pop	{r4, pc}

0800c090 <memmove>:
 800c090:	4288      	cmp	r0, r1
 800c092:	b510      	push	{r4, lr}
 800c094:	eb01 0402 	add.w	r4, r1, r2
 800c098:	d902      	bls.n	800c0a0 <memmove+0x10>
 800c09a:	4284      	cmp	r4, r0
 800c09c:	4623      	mov	r3, r4
 800c09e:	d807      	bhi.n	800c0b0 <memmove+0x20>
 800c0a0:	1e43      	subs	r3, r0, #1
 800c0a2:	42a1      	cmp	r1, r4
 800c0a4:	d008      	beq.n	800c0b8 <memmove+0x28>
 800c0a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0ae:	e7f8      	b.n	800c0a2 <memmove+0x12>
 800c0b0:	4601      	mov	r1, r0
 800c0b2:	4402      	add	r2, r0
 800c0b4:	428a      	cmp	r2, r1
 800c0b6:	d100      	bne.n	800c0ba <memmove+0x2a>
 800c0b8:	bd10      	pop	{r4, pc}
 800c0ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0c2:	e7f7      	b.n	800c0b4 <memmove+0x24>

0800c0c4 <__malloc_lock>:
 800c0c4:	4801      	ldr	r0, [pc, #4]	; (800c0cc <__malloc_lock+0x8>)
 800c0c6:	f7ff bf5f 	b.w	800bf88 <__retarget_lock_acquire_recursive>
 800c0ca:	bf00      	nop
 800c0cc:	20000bb4 	.word	0x20000bb4

0800c0d0 <__malloc_unlock>:
 800c0d0:	4801      	ldr	r0, [pc, #4]	; (800c0d8 <__malloc_unlock+0x8>)
 800c0d2:	f7ff bf5a 	b.w	800bf8a <__retarget_lock_release_recursive>
 800c0d6:	bf00      	nop
 800c0d8:	20000bb4 	.word	0x20000bb4

0800c0dc <_realloc_r>:
 800c0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e0:	4680      	mov	r8, r0
 800c0e2:	4614      	mov	r4, r2
 800c0e4:	460e      	mov	r6, r1
 800c0e6:	b921      	cbnz	r1, 800c0f2 <_realloc_r+0x16>
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ee:	f7ff b801 	b.w	800b0f4 <_malloc_r>
 800c0f2:	b92a      	cbnz	r2, 800c100 <_realloc_r+0x24>
 800c0f4:	f7fe ff96 	bl	800b024 <_free_r>
 800c0f8:	4625      	mov	r5, r4
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c100:	f000 f8fa 	bl	800c2f8 <_malloc_usable_size_r>
 800c104:	4284      	cmp	r4, r0
 800c106:	4607      	mov	r7, r0
 800c108:	d802      	bhi.n	800c110 <_realloc_r+0x34>
 800c10a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c10e:	d812      	bhi.n	800c136 <_realloc_r+0x5a>
 800c110:	4621      	mov	r1, r4
 800c112:	4640      	mov	r0, r8
 800c114:	f7fe ffee 	bl	800b0f4 <_malloc_r>
 800c118:	4605      	mov	r5, r0
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d0ed      	beq.n	800c0fa <_realloc_r+0x1e>
 800c11e:	42bc      	cmp	r4, r7
 800c120:	4622      	mov	r2, r4
 800c122:	4631      	mov	r1, r6
 800c124:	bf28      	it	cs
 800c126:	463a      	movcs	r2, r7
 800c128:	f7ff ffa4 	bl	800c074 <memcpy>
 800c12c:	4631      	mov	r1, r6
 800c12e:	4640      	mov	r0, r8
 800c130:	f7fe ff78 	bl	800b024 <_free_r>
 800c134:	e7e1      	b.n	800c0fa <_realloc_r+0x1e>
 800c136:	4635      	mov	r5, r6
 800c138:	e7df      	b.n	800c0fa <_realloc_r+0x1e>

0800c13a <_raise_r>:
 800c13a:	291f      	cmp	r1, #31
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4604      	mov	r4, r0
 800c140:	460d      	mov	r5, r1
 800c142:	d904      	bls.n	800c14e <_raise_r+0x14>
 800c144:	2316      	movs	r3, #22
 800c146:	6003      	str	r3, [r0, #0]
 800c148:	f04f 30ff 	mov.w	r0, #4294967295
 800c14c:	bd38      	pop	{r3, r4, r5, pc}
 800c14e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c150:	b112      	cbz	r2, 800c158 <_raise_r+0x1e>
 800c152:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c156:	b94b      	cbnz	r3, 800c16c <_raise_r+0x32>
 800c158:	4620      	mov	r0, r4
 800c15a:	f000 f831 	bl	800c1c0 <_getpid_r>
 800c15e:	462a      	mov	r2, r5
 800c160:	4601      	mov	r1, r0
 800c162:	4620      	mov	r0, r4
 800c164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c168:	f000 b818 	b.w	800c19c <_kill_r>
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d00a      	beq.n	800c186 <_raise_r+0x4c>
 800c170:	1c59      	adds	r1, r3, #1
 800c172:	d103      	bne.n	800c17c <_raise_r+0x42>
 800c174:	2316      	movs	r3, #22
 800c176:	6003      	str	r3, [r0, #0]
 800c178:	2001      	movs	r0, #1
 800c17a:	e7e7      	b.n	800c14c <_raise_r+0x12>
 800c17c:	2400      	movs	r4, #0
 800c17e:	4628      	mov	r0, r5
 800c180:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c184:	4798      	blx	r3
 800c186:	2000      	movs	r0, #0
 800c188:	e7e0      	b.n	800c14c <_raise_r+0x12>
	...

0800c18c <raise>:
 800c18c:	4b02      	ldr	r3, [pc, #8]	; (800c198 <raise+0xc>)
 800c18e:	4601      	mov	r1, r0
 800c190:	6818      	ldr	r0, [r3, #0]
 800c192:	f7ff bfd2 	b.w	800c13a <_raise_r>
 800c196:	bf00      	nop
 800c198:	2000016c 	.word	0x2000016c

0800c19c <_kill_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	2300      	movs	r3, #0
 800c1a0:	4d06      	ldr	r5, [pc, #24]	; (800c1bc <_kill_r+0x20>)
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	4611      	mov	r1, r2
 800c1a8:	602b      	str	r3, [r5, #0]
 800c1aa:	f7f5 fc38 	bl	8001a1e <_kill>
 800c1ae:	1c43      	adds	r3, r0, #1
 800c1b0:	d102      	bne.n	800c1b8 <_kill_r+0x1c>
 800c1b2:	682b      	ldr	r3, [r5, #0]
 800c1b4:	b103      	cbz	r3, 800c1b8 <_kill_r+0x1c>
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20000bb8 	.word	0x20000bb8

0800c1c0 <_getpid_r>:
 800c1c0:	f7f5 bc26 	b.w	8001a10 <_getpid>

0800c1c4 <__sread>:
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	460c      	mov	r4, r1
 800c1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1cc:	f000 f89c 	bl	800c308 <_read_r>
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	bfab      	itete	ge
 800c1d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c1d8:	181b      	addge	r3, r3, r0
 800c1da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1de:	bfac      	ite	ge
 800c1e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1e2:	81a3      	strhlt	r3, [r4, #12]
 800c1e4:	bd10      	pop	{r4, pc}

0800c1e6 <__swrite>:
 800c1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ea:	461f      	mov	r7, r3
 800c1ec:	898b      	ldrh	r3, [r1, #12]
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	05db      	lsls	r3, r3, #23
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	4616      	mov	r6, r2
 800c1f6:	d505      	bpl.n	800c204 <__swrite+0x1e>
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	f000 f868 	bl	800c2d4 <_lseek_r>
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	4632      	mov	r2, r6
 800c208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c20c:	81a3      	strh	r3, [r4, #12]
 800c20e:	4628      	mov	r0, r5
 800c210:	463b      	mov	r3, r7
 800c212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c21a:	f000 b817 	b.w	800c24c <_write_r>

0800c21e <__sseek>:
 800c21e:	b510      	push	{r4, lr}
 800c220:	460c      	mov	r4, r1
 800c222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c226:	f000 f855 	bl	800c2d4 <_lseek_r>
 800c22a:	1c43      	adds	r3, r0, #1
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	bf15      	itete	ne
 800c230:	6560      	strne	r0, [r4, #84]	; 0x54
 800c232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c23a:	81a3      	strheq	r3, [r4, #12]
 800c23c:	bf18      	it	ne
 800c23e:	81a3      	strhne	r3, [r4, #12]
 800c240:	bd10      	pop	{r4, pc}

0800c242 <__sclose>:
 800c242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c246:	f000 b813 	b.w	800c270 <_close_r>
	...

0800c24c <_write_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4604      	mov	r4, r0
 800c250:	4608      	mov	r0, r1
 800c252:	4611      	mov	r1, r2
 800c254:	2200      	movs	r2, #0
 800c256:	4d05      	ldr	r5, [pc, #20]	; (800c26c <_write_r+0x20>)
 800c258:	602a      	str	r2, [r5, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	f7f5 fc16 	bl	8001a8c <_write>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d102      	bne.n	800c26a <_write_r+0x1e>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	b103      	cbz	r3, 800c26a <_write_r+0x1e>
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	20000bb8 	.word	0x20000bb8

0800c270 <_close_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	2300      	movs	r3, #0
 800c274:	4d05      	ldr	r5, [pc, #20]	; (800c28c <_close_r+0x1c>)
 800c276:	4604      	mov	r4, r0
 800c278:	4608      	mov	r0, r1
 800c27a:	602b      	str	r3, [r5, #0]
 800c27c:	f7f5 fc22 	bl	8001ac4 <_close>
 800c280:	1c43      	adds	r3, r0, #1
 800c282:	d102      	bne.n	800c28a <_close_r+0x1a>
 800c284:	682b      	ldr	r3, [r5, #0]
 800c286:	b103      	cbz	r3, 800c28a <_close_r+0x1a>
 800c288:	6023      	str	r3, [r4, #0]
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
 800c28c:	20000bb8 	.word	0x20000bb8

0800c290 <_fstat_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	2300      	movs	r3, #0
 800c294:	4d06      	ldr	r5, [pc, #24]	; (800c2b0 <_fstat_r+0x20>)
 800c296:	4604      	mov	r4, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	4611      	mov	r1, r2
 800c29c:	602b      	str	r3, [r5, #0]
 800c29e:	f7f5 fc1c 	bl	8001ada <_fstat>
 800c2a2:	1c43      	adds	r3, r0, #1
 800c2a4:	d102      	bne.n	800c2ac <_fstat_r+0x1c>
 800c2a6:	682b      	ldr	r3, [r5, #0]
 800c2a8:	b103      	cbz	r3, 800c2ac <_fstat_r+0x1c>
 800c2aa:	6023      	str	r3, [r4, #0]
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20000bb8 	.word	0x20000bb8

0800c2b4 <_isatty_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	4d05      	ldr	r5, [pc, #20]	; (800c2d0 <_isatty_r+0x1c>)
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	4608      	mov	r0, r1
 800c2be:	602b      	str	r3, [r5, #0]
 800c2c0:	f7f5 fc1a 	bl	8001af8 <_isatty>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	d102      	bne.n	800c2ce <_isatty_r+0x1a>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	b103      	cbz	r3, 800c2ce <_isatty_r+0x1a>
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	20000bb8 	.word	0x20000bb8

0800c2d4 <_lseek_r>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	4611      	mov	r1, r2
 800c2dc:	2200      	movs	r2, #0
 800c2de:	4d05      	ldr	r5, [pc, #20]	; (800c2f4 <_lseek_r+0x20>)
 800c2e0:	602a      	str	r2, [r5, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f7f5 fc12 	bl	8001b0c <_lseek>
 800c2e8:	1c43      	adds	r3, r0, #1
 800c2ea:	d102      	bne.n	800c2f2 <_lseek_r+0x1e>
 800c2ec:	682b      	ldr	r3, [r5, #0]
 800c2ee:	b103      	cbz	r3, 800c2f2 <_lseek_r+0x1e>
 800c2f0:	6023      	str	r3, [r4, #0]
 800c2f2:	bd38      	pop	{r3, r4, r5, pc}
 800c2f4:	20000bb8 	.word	0x20000bb8

0800c2f8 <_malloc_usable_size_r>:
 800c2f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2fc:	1f18      	subs	r0, r3, #4
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	bfbc      	itt	lt
 800c302:	580b      	ldrlt	r3, [r1, r0]
 800c304:	18c0      	addlt	r0, r0, r3
 800c306:	4770      	bx	lr

0800c308 <_read_r>:
 800c308:	b538      	push	{r3, r4, r5, lr}
 800c30a:	4604      	mov	r4, r0
 800c30c:	4608      	mov	r0, r1
 800c30e:	4611      	mov	r1, r2
 800c310:	2200      	movs	r2, #0
 800c312:	4d05      	ldr	r5, [pc, #20]	; (800c328 <_read_r+0x20>)
 800c314:	602a      	str	r2, [r5, #0]
 800c316:	461a      	mov	r2, r3
 800c318:	f7f5 fb9b 	bl	8001a52 <_read>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	d102      	bne.n	800c326 <_read_r+0x1e>
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	b103      	cbz	r3, 800c326 <_read_r+0x1e>
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	20000bb8 	.word	0x20000bb8

0800c32c <_init>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	bf00      	nop
 800c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c332:	bc08      	pop	{r3}
 800c334:	469e      	mov	lr, r3
 800c336:	4770      	bx	lr

0800c338 <_fini>:
 800c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33a:	bf00      	nop
 800c33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c33e:	bc08      	pop	{r3}
 800c340:	469e      	mov	lr, r3
 800c342:	4770      	bx	lr
