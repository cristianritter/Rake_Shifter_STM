
SHIFTER_RAKE_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800b3ec  0800b3ec  0001b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b510  0800b510  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b510  0800b510  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b510  0800b510  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b510  0800b510  0001b510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b514  0800b514  0001b514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800b518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ec  200001d0  0800b6e8  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  0800b6e8  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ed  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bf  00000000  00000000  000332e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00036aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00037c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1ff  00000000  00000000  00038bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158e9  00000000  00000000  00053dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e719  00000000  00000000  000696b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7dd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c28  00000000  00000000  000f7e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b3d4 	.word	0x0800b3d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800b3d4 	.word	0x0800b3d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <save_to_flash>:
			read_cnt += 4;
		}
	}while(read_data != 0xFFFFFFFF);
}

void save_to_flash(uint8_t *data){
 800076c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000770:	b08f      	sub	sp, #60	; 0x3c
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	466b      	mov	r3, sp
 8000778:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff fce8 	bl	8000150 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	089e      	lsrs	r6, r3, #2
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fce3 	bl	8000150 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	f003 0303 	and.w	r3, r3, #3
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	18f1      	adds	r1, r6, r3
 800079c:	460b      	mov	r3, r1
 800079e:	3b01      	subs	r3, #1
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
 80007a2:	2300      	movs	r3, #0
 80007a4:	4688      	mov	r8, r1
 80007a6:	4699      	mov	r9, r3
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80007b4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80007b8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80007bc:	2300      	movs	r3, #0
 80007be:	460c      	mov	r4, r1
 80007c0:	461d      	mov	r5, r3
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	f04f 0300 	mov.w	r3, #0
 80007ca:	016b      	lsls	r3, r5, #5
 80007cc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80007d0:	0162      	lsls	r2, r4, #5
 80007d2:	008b      	lsls	r3, r1, #2
 80007d4:	3307      	adds	r3, #7
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	ebad 0d03 	sub.w	sp, sp, r3
 80007de:	466b      	mov	r3, sp
 80007e0:	3303      	adds	r3, #3
 80007e2:	089b      	lsrs	r3, r3, #2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 80007e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007ea:	f7ff fcb1 	bl	8000150 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007f6:	f00a f963 	bl	800aac0 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007fe:	f00a f987 	bl	800ab10 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8000802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000804:	f7ff fca4 	bl	8000150 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 800080c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800080e:	f7ff fc9f 	bl	8000150 <strlen>
 8000812:	4603      	mov	r3, r0
 8000814:	f003 0303 	and.w	r3, r3, #3
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf14      	ite	ne
 800081c:	2301      	movne	r3, #1
 800081e:	2300      	moveq	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fc92 	bl	8000150 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 8000830:	b29c      	uxth	r4, r3
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff fc8c 	bl	8000150 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800083e:	2b00      	cmp	r3, #0
 8000840:	bf14      	ite	ne
 8000842:	2301      	movne	r3, #1
 8000844:	2300      	moveq	r3, #0
 8000846:	b2db      	uxtb	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	4423      	add	r3, r4
 800084c:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 800084e:	857b      	strh	r3, [r7, #42]	; 0x2a
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000850:	f002 f89a 	bl	8002988 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 8000854:	f002 f8ce 	bl	80029f4 <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.PageAddress = FLASH_STORAGE;
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <save_to_flash+0x178>)
 800085e:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbPages = pages;
 8000860:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000862:	b29b      	uxth	r3, r3
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError;

	volatile uint32_t write_cnt=0, index=0;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]

	volatile HAL_StatusTypeDef status;
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800086e:	f107 0214 	add.w	r2, r7, #20
 8000872:	f107 0318 	add.w	r3, r7, #24
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f999 	bl	8002bb0 <HAL_FLASHEx_Erase>
 800087e:	4603      	mov	r3, r0
 8000880:	72fb      	strb	r3, [r7, #11]
	while(index < data_length)
 8000882:	e020      	b.n	80008c6 <save_to_flash+0x15a>
	{
		if (status == HAL_OK){
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d11c      	bne.n	80008c6 <save_to_flash+0x15a>
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000892:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089e:	2200      	movs	r2, #0
 80008a0:	469a      	mov	sl, r3
 80008a2:	4693      	mov	fp, r2
 80008a4:	4652      	mov	r2, sl
 80008a6:	465b      	mov	r3, fp
 80008a8:	2002      	movs	r0, #2
 80008aa:	f001 fffd 	bl	80028a8 <HAL_FLASH_Program>
 80008ae:	4603      	mov	r3, r0
 80008b0:	72fb      	strb	r3, [r7, #11]
			if(status == HAL_OK){
 80008b2:	7afb      	ldrb	r3, [r7, #11]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d105      	bne.n	80008c6 <save_to_flash+0x15a>
				write_cnt += 4;
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	3304      	adds	r3, #4
 80008be:	613b      	str	r3, [r7, #16]
				index++;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3301      	adds	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
	while(index < data_length)
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d3da      	bcc.n	8000884 <save_to_flash+0x118>
			}
		}
	}

	HAL_FLASH_OB_Lock();
 80008ce:	f002 f8ad 	bl	8002a2c <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80008d2:	f002 f87f 	bl	80029d4 <HAL_FLASH_Lock>
 80008d6:	f8d7 d000 	ldr.w	sp, [r7]
}
 80008da:	bf00      	nop
 80008dc:	373c      	adds	r7, #60	; 0x3c
 80008de:	46bd      	mov	sp, r7
 80008e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008e4:	08019000 	.word	0x08019000

080008e8 <LerADCS>:
uint16_t speed_div_y[2] = {1117, 2824};					//  -		-		-		-		-		-		-		-  y
uint16_t ADCValue[3] = {0, 0, 0};
int8_t buffer2[6];
uint8_t rx_buffer[2];

void LerADCS(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  if (spi_detection == 1){
 80008ec:	4b39      	ldr	r3, [pc, #228]	; (80009d4 <LerADCS+0xec>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d124      	bne.n	800093e <LerADCS+0x56>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);  //descarga para seleção do G27
 80008f4:	2301      	movs	r3, #1
 80008f6:	2202      	movs	r2, #2
 80008f8:	4937      	ldr	r1, [pc, #220]	; (80009d8 <LerADCS+0xf0>)
 80008fa:	4838      	ldr	r0, [pc, #224]	; (80009dc <LerADCS+0xf4>)
 80008fc:	f004 fdcc 	bl	8005498 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);
 8000900:	2301      	movs	r3, #1
 8000902:	2202      	movs	r2, #2
 8000904:	4934      	ldr	r1, [pc, #208]	; (80009d8 <LerADCS+0xf0>)
 8000906:	4835      	ldr	r0, [pc, #212]	; (80009dc <LerADCS+0xf4>)
 8000908:	f004 fdc6 	bl	8005498 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);
 800090c:	2301      	movs	r3, #1
 800090e:	2202      	movs	r2, #2
 8000910:	4931      	ldr	r1, [pc, #196]	; (80009d8 <LerADCS+0xf0>)
 8000912:	4832      	ldr	r0, [pc, #200]	; (80009dc <LerADCS+0xf4>)
 8000914:	f004 fdc0 	bl	8005498 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);
 8000918:	2301      	movs	r3, #1
 800091a:	2202      	movs	r2, #2
 800091c:	492e      	ldr	r1, [pc, #184]	; (80009d8 <LerADCS+0xf0>)
 800091e:	482f      	ldr	r0, [pc, #188]	; (80009dc <LerADCS+0xf4>)
 8000920:	f004 fdba 	bl	8005498 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);
 8000924:	2301      	movs	r3, #1
 8000926:	2202      	movs	r2, #2
 8000928:	492b      	ldr	r1, [pc, #172]	; (80009d8 <LerADCS+0xf0>)
 800092a:	482c      	ldr	r0, [pc, #176]	; (80009dc <LerADCS+0xf4>)
 800092c:	f004 fdb4 	bl	8005498 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);
 8000930:	2301      	movs	r3, #1
 8000932:	2202      	movs	r2, #2
 8000934:	4928      	ldr	r1, [pc, #160]	; (80009d8 <LerADCS+0xf0>)
 8000936:	4829      	ldr	r0, [pc, #164]	; (80009dc <LerADCS+0xf4>)
 8000938:	f004 fdae 	bl	8005498 <HAL_SPI_Receive>
 800093c:	e023      	b.n	8000986 <LerADCS+0x9e>
  }
  else {
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);  // descarga para seleção do G25
 800093e:	2301      	movs	r3, #1
 8000940:	2202      	movs	r2, #2
 8000942:	4925      	ldr	r1, [pc, #148]	; (80009d8 <LerADCS+0xf0>)
 8000944:	4826      	ldr	r0, [pc, #152]	; (80009e0 <LerADCS+0xf8>)
 8000946:	f004 fda7 	bl	8005498 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);
 800094a:	2301      	movs	r3, #1
 800094c:	2202      	movs	r2, #2
 800094e:	4922      	ldr	r1, [pc, #136]	; (80009d8 <LerADCS+0xf0>)
 8000950:	4823      	ldr	r0, [pc, #140]	; (80009e0 <LerADCS+0xf8>)
 8000952:	f004 fda1 	bl	8005498 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);
 8000956:	2301      	movs	r3, #1
 8000958:	2202      	movs	r2, #2
 800095a:	491f      	ldr	r1, [pc, #124]	; (80009d8 <LerADCS+0xf0>)
 800095c:	4820      	ldr	r0, [pc, #128]	; (80009e0 <LerADCS+0xf8>)
 800095e:	f004 fd9b 	bl	8005498 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);
 8000962:	2301      	movs	r3, #1
 8000964:	2202      	movs	r2, #2
 8000966:	491c      	ldr	r1, [pc, #112]	; (80009d8 <LerADCS+0xf0>)
 8000968:	481d      	ldr	r0, [pc, #116]	; (80009e0 <LerADCS+0xf8>)
 800096a:	f004 fd95 	bl	8005498 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);
 800096e:	2301      	movs	r3, #1
 8000970:	2202      	movs	r2, #2
 8000972:	4919      	ldr	r1, [pc, #100]	; (80009d8 <LerADCS+0xf0>)
 8000974:	481a      	ldr	r0, [pc, #104]	; (80009e0 <LerADCS+0xf8>)
 8000976:	f004 fd8f 	bl	8005498 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);
 800097a:	2301      	movs	r3, #1
 800097c:	2202      	movs	r2, #2
 800097e:	4916      	ldr	r1, [pc, #88]	; (80009d8 <LerADCS+0xf0>)
 8000980:	4817      	ldr	r0, [pc, #92]	; (80009e0 <LerADCS+0xf8>)
 8000982:	f004 fd89 	bl	8005498 <HAL_SPI_Receive>
  }
  if (spi_detection == 1){											// quando excitado spi1 gera reducao na tensao do cap caso esteja conectado o g27
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <LerADCS+0xec>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d107      	bne.n	800099e <LerADCS+0xb6>
	  spi_values[0] = ADCValue[2];
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <LerADCS+0xfc>)
 8000990:	889a      	ldrh	r2, [r3, #4]
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <LerADCS+0x100>)
 8000994:	801a      	strh	r2, [r3, #0]
	  spi_detection = 2;
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <LerADCS+0xec>)
 8000998:	2202      	movs	r2, #2
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e006      	b.n	80009ac <LerADCS+0xc4>
  }
  else{
	  spi_values[1] = ADCValue[2];									// quando excitado spi2 gera reducao na tensao do cap caso esteja conectado o g25
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <LerADCS+0xfc>)
 80009a0:	889a      	ldrh	r2, [r3, #4]
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <LerADCS+0x100>)
 80009a4:	805a      	strh	r2, [r3, #2]
	  spi_detection = 1;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <LerADCS+0xec>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
  }

  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[0]), 100);
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[1]), 100);
  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", ADCValue[2]), 100);
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <LerADCS+0xfc>)
 80009ae:	889b      	ldrh	r3, [r3, #4]
 80009b0:	461a      	mov	r2, r3
 80009b2:	490e      	ldr	r1, [pc, #56]	; (80009ec <LerADCS+0x104>)
 80009b4:	480e      	ldr	r0, [pc, #56]	; (80009f0 <LerADCS+0x108>)
 80009b6:	f00a f88b 	bl	800aad0 <siprintf>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b29a      	uxth	r2, r3
 80009be:	2364      	movs	r3, #100	; 0x64
 80009c0:	490b      	ldr	r1, [pc, #44]	; (80009f0 <LerADCS+0x108>)
 80009c2:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LerADCS+0x10c>)
 80009c4:	f005 fa65 	bl	8005e92 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart1, "      ", 6, 100);
  //HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  HAL_Delay(100);
 80009c8:	2064      	movs	r0, #100	; 0x64
 80009ca:	f001 f80b 	bl	80019e4 <HAL_Delay>
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000370 	.word	0x20000370
 80009dc:	20000260 	.word	0x20000260
 80009e0:	200002b8 	.word	0x200002b8
 80009e4:	20000360 	.word	0x20000360
 80009e8:	2000035c 	.word	0x2000035c
 80009ec:	0800b3ec 	.word	0x0800b3ec
 80009f0:	20000368 	.word	0x20000368
 80009f4:	20000310 	.word	0x20000310

080009f8 <LerSPI>:

void LerSPI(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a02:	4821      	ldr	r0, [pc, #132]	; (8000a88 <LerSPI+0x90>)
 8000a04:	f002 fb17 	bl	8003036 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f000 ffeb 	bl	80019e4 <HAL_Delay>
  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 50);
 8000a0e:	2332      	movs	r3, #50	; 0x32
 8000a10:	2202      	movs	r2, #2
 8000a12:	491e      	ldr	r1, [pc, #120]	; (8000a8c <LerSPI+0x94>)
 8000a14:	481e      	ldr	r0, [pc, #120]	; (8000a90 <LerSPI+0x98>)
 8000a16:	f004 fd3f 	bl	8005498 <HAL_SPI_Receive>
//	  HAL_SPI_Receive(&hspi2, rx_buffer, 3, 50);
//	  HAL_UART_Transmit(&huart1, "G25   ", 6, 100);
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
 // }

  HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 ffe2 	bl	80019e4 <HAL_Delay>
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <LerSPI+0x90>)
 8000a28:	f002 fb05 	bl	8003036 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 ffd9 	bl	80019e4 <HAL_Delay>

  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[0]), 100);
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <LerSPI+0x94>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	4916      	ldr	r1, [pc, #88]	; (8000a94 <LerSPI+0x9c>)
 8000a3a:	4817      	ldr	r0, [pc, #92]	; (8000a98 <LerSPI+0xa0>)
 8000a3c:	f00a f848 	bl	800aad0 <siprintf>
 8000a40:	4603      	mov	r3, r0
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	4914      	ldr	r1, [pc, #80]	; (8000a98 <LerSPI+0xa0>)
 8000a48:	4814      	ldr	r0, [pc, #80]	; (8000a9c <LerSPI+0xa4>)
 8000a4a:	f005 fa22 	bl	8005e92 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[1]), 100);
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <LerSPI+0x94>)
 8000a50:	785b      	ldrb	r3, [r3, #1]
 8000a52:	461a      	mov	r2, r3
 8000a54:	490f      	ldr	r1, [pc, #60]	; (8000a94 <LerSPI+0x9c>)
 8000a56:	4810      	ldr	r0, [pc, #64]	; (8000a98 <LerSPI+0xa0>)
 8000a58:	f00a f83a 	bl	800aad0 <siprintf>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	2364      	movs	r3, #100	; 0x64
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LerSPI+0xa0>)
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <LerSPI+0xa4>)
 8000a66:	f005 fa14 	bl	8005e92 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "      ", 6, 100);
 8000a6a:	2364      	movs	r3, #100	; 0x64
 8000a6c:	2206      	movs	r2, #6
 8000a6e:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <LerSPI+0xa8>)
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <LerSPI+0xa4>)
 8000a72:	f005 fa0e 	bl	8005e92 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
 8000a76:	2364      	movs	r3, #100	; 0x64
 8000a78:	2202      	movs	r2, #2
 8000a7a:	490a      	ldr	r1, [pc, #40]	; (8000aa4 <LerSPI+0xac>)
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <LerSPI+0xa4>)
 8000a7e:	f005 fa08 	bl	8005e92 <HAL_UART_Transmit>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40010c00 	.word	0x40010c00
 8000a8c:	20000370 	.word	0x20000370
 8000a90:	20000260 	.word	0x20000260
 8000a94:	0800b3ec 	.word	0x0800b3ec
 8000a98:	20000368 	.word	0x20000368
 8000a9c:	20000310 	.word	0x20000310
 8000aa0:	0800b3f0 	.word	0x0800b3f0
 8000aa4:	0800b3f8 	.word	0x0800b3f8

08000aa8 <Calibrar>:

void Calibrar(void)
{
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b092      	sub	sp, #72	; 0x48
 8000aac:	af02      	add	r7, sp, #8
	if (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){			// se botão de calibração pressionado
 8000aae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab2:	4885      	ldr	r0, [pc, #532]	; (8000cc8 <Calibrar+0x220>)
 8000ab4:	f002 faa8 	bl	8003008 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f040 80fa 	bne.w	8000cb4 <Calibrar+0x20c>
		HAL_Delay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac4:	f000 ff8e 	bl	80019e4 <HAL_Delay>
		char params_to_save[50];
		uint16_t axis_x_min_max[2] = {9999, 0};
 8000ac8:	f242 730f 	movw	r3, #9999	; 0x270f
 8000acc:	873b      	strh	r3, [r7, #56]	; 0x38
 8000ace:	2300      	movs	r3, #0
 8000ad0:	877b      	strh	r3, [r7, #58]	; 0x3a
		uint16_t axis_y_min_max[2] = {9999, 0};
 8000ad2:	f242 730f 	movw	r3, #9999	; 0x270f
 8000ad6:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000ad8:	2300      	movs	r3, #0
 8000ada:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000adc:	e029      	b.n	8000b32 <Calibrar+0x8a>
			HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8000ade:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae2:	487a      	ldr	r0, [pc, #488]	; (8000ccc <Calibrar+0x224>)
 8000ae4:	f002 fabf 	bl	8003066 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8000ae8:	2032      	movs	r0, #50	; 0x32
 8000aea:	f000 ff7b 	bl	80019e4 <HAL_Delay>
			LerADCS();  									//le posicao dos eixos
 8000aee:	f7ff fefb 	bl	80008e8 <LerADCS>
			if (ADCValue[0] < axis_x_min_max[0]){			// define o menor valor detectado no eixo x
 8000af2:	4b77      	ldr	r3, [pc, #476]	; (8000cd0 <Calibrar+0x228>)
 8000af4:	881a      	ldrh	r2, [r3, #0]
 8000af6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d202      	bcs.n	8000b02 <Calibrar+0x5a>
				axis_x_min_max[0] = ADCValue[0];
 8000afc:	4b74      	ldr	r3, [pc, #464]	; (8000cd0 <Calibrar+0x228>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	873b      	strh	r3, [r7, #56]	; 0x38
			}
			if (ADCValue[0] > axis_x_min_max[1]){			// define o maior valor detectado no eixo x
 8000b02:	4b73      	ldr	r3, [pc, #460]	; (8000cd0 <Calibrar+0x228>)
 8000b04:	881a      	ldrh	r2, [r3, #0]
 8000b06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d902      	bls.n	8000b12 <Calibrar+0x6a>
				axis_x_min_max[1] = ADCValue[0];
 8000b0c:	4b70      	ldr	r3, [pc, #448]	; (8000cd0 <Calibrar+0x228>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	877b      	strh	r3, [r7, #58]	; 0x3a
			}
			if (ADCValue[1] < axis_y_min_max[0]){			// define o menor valor detectado no eixo y
 8000b12:	4b6f      	ldr	r3, [pc, #444]	; (8000cd0 <Calibrar+0x228>)
 8000b14:	885a      	ldrh	r2, [r3, #2]
 8000b16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d202      	bcs.n	8000b22 <Calibrar+0x7a>
				axis_y_min_max[0] = ADCValue[1];
 8000b1c:	4b6c      	ldr	r3, [pc, #432]	; (8000cd0 <Calibrar+0x228>)
 8000b1e:	885b      	ldrh	r3, [r3, #2]
 8000b20:	86bb      	strh	r3, [r7, #52]	; 0x34
			}
			if (ADCValue[1] > axis_y_min_max[1]){			// define o maior valor detectado no eixo y
 8000b22:	4b6b      	ldr	r3, [pc, #428]	; (8000cd0 <Calibrar+0x228>)
 8000b24:	885a      	ldrh	r2, [r3, #2]
 8000b26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d902      	bls.n	8000b32 <Calibrar+0x8a>
				axis_y_min_max[1] = ADCValue[1];
 8000b2c:	4b68      	ldr	r3, [pc, #416]	; (8000cd0 <Calibrar+0x228>)
 8000b2e:	885b      	ldrh	r3, [r3, #2]
 8000b30:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b36:	4864      	ldr	r0, [pc, #400]	; (8000cc8 <Calibrar+0x220>)
 8000b38:	f002 fa66 	bl	8003008 <HAL_GPIO_ReadPin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0cd      	beq.n	8000ade <Calibrar+0x36>
			}
		}
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b48:	4860      	ldr	r0, [pc, #384]	; (8000ccc <Calibrar+0x224>)
 8000b4a:	f002 fa74 	bl	8003036 <HAL_GPIO_WritePin>

		uint16_t space_x = (axis_x_min_max[1]-axis_x_min_max[0])/3;
 8000b4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b50:	461a      	mov	r2, r3
 8000b52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	4a5f      	ldr	r2, [pc, #380]	; (8000cd4 <Calibrar+0x22c>)
 8000b58:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5c:	17db      	asrs	r3, r3, #31
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	87fb      	strh	r3, [r7, #62]	; 0x3e
		speed_div_x[0] = axis_x_min_max[0] + (space_x*0.8); 					//calcula as linhas de calibracao do eixo x
 8000b62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fd77 	bl	8000658 <__aeabi_i2d>
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	460d      	mov	r5, r1
 8000b6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd71 	bl	8000658 <__aeabi_i2d>
 8000b76:	a352      	add	r3, pc, #328	; (adr r3, 8000cc0 <Calibrar+0x218>)
 8000b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7c:	f7ff faf0 	bl	8000160 <__aeabi_dmul>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4620      	mov	r0, r4
 8000b86:	4629      	mov	r1, r5
 8000b88:	f7ff fc1a 	bl	80003c0 <__adddf3>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	460b      	mov	r3, r1
 8000b90:	4610      	mov	r0, r2
 8000b92:	4619      	mov	r1, r3
 8000b94:	f7ff fdca 	bl	800072c <__aeabi_d2uiz>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <Calibrar+0x230>)
 8000b9e:	801a      	strh	r2, [r3, #0]

		speed_div_x[1] = axis_x_min_max[1] - (space_x*0.8);
 8000ba0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fd58 	bl	8000658 <__aeabi_i2d>
 8000ba8:	4604      	mov	r4, r0
 8000baa:	460d      	mov	r5, r1
 8000bac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fd52 	bl	8000658 <__aeabi_i2d>
 8000bb4:	a342      	add	r3, pc, #264	; (adr r3, 8000cc0 <Calibrar+0x218>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fad1 	bl	8000160 <__aeabi_dmul>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f7ff fbf9 	bl	80003bc <__aeabi_dsub>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f7ff fdab 	bl	800072c <__aeabi_d2uiz>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <Calibrar+0x230>)
 8000bdc:	805a      	strh	r2, [r3, #2]

		uint16_t space_y = (axis_y_min_max[1]-axis_y_min_max[0])/3;
 8000bde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000be0:	461a      	mov	r2, r3
 8000be2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	4a3b      	ldr	r2, [pc, #236]	; (8000cd4 <Calibrar+0x22c>)
 8000be8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bec:	17db      	asrs	r3, r3, #31
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	87bb      	strh	r3, [r7, #60]	; 0x3c
		speed_div_y[0] = axis_y_min_max[0] + (space_y*0.8); 					//calcula as linhas de calibracao do eixo y
 8000bf2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fd2f 	bl	8000658 <__aeabi_i2d>
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	460d      	mov	r5, r1
 8000bfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fd29 	bl	8000658 <__aeabi_i2d>
 8000c06:	a32e      	add	r3, pc, #184	; (adr r3, 8000cc0 <Calibrar+0x218>)
 8000c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0c:	f7ff faa8 	bl	8000160 <__aeabi_dmul>
 8000c10:	4602      	mov	r2, r0
 8000c12:	460b      	mov	r3, r1
 8000c14:	4620      	mov	r0, r4
 8000c16:	4629      	mov	r1, r5
 8000c18:	f7ff fbd2 	bl	80003c0 <__adddf3>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f7ff fd82 	bl	800072c <__aeabi_d2uiz>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <Calibrar+0x234>)
 8000c2e:	801a      	strh	r2, [r3, #0]

		speed_div_y[1] = axis_y_min_max[1] - (space_y*0.8);
 8000c30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fd10 	bl	8000658 <__aeabi_i2d>
 8000c38:	4604      	mov	r4, r0
 8000c3a:	460d      	mov	r5, r1
 8000c3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd0a 	bl	8000658 <__aeabi_i2d>
 8000c44:	a31e      	add	r3, pc, #120	; (adr r3, 8000cc0 <Calibrar+0x218>)
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	f7ff fa89 	bl	8000160 <__aeabi_dmul>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4620      	mov	r0, r4
 8000c54:	4629      	mov	r1, r5
 8000c56:	f7ff fbb1 	bl	80003bc <__aeabi_dsub>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	4610      	mov	r0, r2
 8000c60:	4619      	mov	r1, r3
 8000c62:	f7ff fd63 	bl	800072c <__aeabi_d2uiz>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <Calibrar+0x234>)
 8000c6c:	805a      	strh	r2, [r3, #2]

		sprintf(params_to_save, "%u,%u,%u,%u", speed_div_x[0], speed_div_x[1], speed_div_y[0], speed_div_y[1]);
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <Calibrar+0x230>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	4619      	mov	r1, r3
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <Calibrar+0x230>)
 8000c76:	885b      	ldrh	r3, [r3, #2]
 8000c78:	461c      	mov	r4, r3
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <Calibrar+0x234>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <Calibrar+0x234>)
 8000c82:	885b      	ldrh	r3, [r3, #2]
 8000c84:	4638      	mov	r0, r7
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	9200      	str	r2, [sp, #0]
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	4914      	ldr	r1, [pc, #80]	; (8000ce0 <Calibrar+0x238>)
 8000c90:	f009 ff1e 	bl	800aad0 <siprintf>
		save_to_flash((uint8_t *)params_to_save);
 8000c94:	463b      	mov	r3, r7
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fd68 	bl	800076c <save_to_flash>
		HAL_UART_Transmit(&huart1, (uint8_t *)params_to_save, (int)sizeof(params_to_save), 100);
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	2364      	movs	r3, #100	; 0x64
 8000ca0:	2232      	movs	r2, #50	; 0x32
 8000ca2:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <Calibrar+0x23c>)
 8000ca4:	f005 f8f5 	bl	8005e92 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n ", 2, 100);
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	2202      	movs	r2, #2
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <Calibrar+0x240>)
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <Calibrar+0x23c>)
 8000cb0:	f005 f8ef 	bl	8005e92 <HAL_UART_Transmit>

	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3740      	adds	r7, #64	; 0x40
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bdb0      	pop	{r4, r5, r7, pc}
 8000cbc:	f3af 8000 	nop.w
 8000cc0:	9999999a 	.word	0x9999999a
 8000cc4:	3fe99999 	.word	0x3fe99999
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	20000360 	.word	0x20000360
 8000cd4:	55555556 	.word	0x55555556
 8000cd8:	20000004 	.word	0x20000004
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	0800b3fc 	.word	0x0800b3fc
 8000ce4:	20000310 	.word	0x20000310
 8000ce8:	0800b3f8 	.word	0x0800b3f8

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 fe15 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 fa09 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 fb77 	bl	80013ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000cfe:	f000 fb57 	bl	80013b0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000d02:	f009 facf 	bl	800a2a4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000d06:	f000 fa5f 	bl	80011c8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000d0a:	f000 fab9 	bl	8001280 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d0e:	f000 faed 	bl	80012ec <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000d12:	f000 fb23 	bl	800135c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 8000d16:	2203      	movs	r2, #3
 8000d18:	4996      	ldr	r1, [pc, #600]	; (8000f74 <main+0x288>)
 8000d1a:	4897      	ldr	r0, [pc, #604]	; (8000f78 <main+0x28c>)
 8000d1c:	f000 ff5e 	bl	8001bdc <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0); 		//liga led
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d26:	4895      	ldr	r0, [pc, #596]	; (8000f7c <main+0x290>)
 8000d28:	f002 f985 	bl	8003036 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Calibrar();
 8000d2c:	f7ff febc 	bl	8000aa8 <Calibrar>
	  LerADCS();
 8000d30:	f7ff fdda 	bl	80008e8 <LerADCS>
	  LerSPI();
 8000d34:	f7ff fe60 	bl	80009f8 <LerSPI>

	  uint16_t cambio_x_axis = (uint16_t) ADCValue[0];  //manopla x
 8000d38:	4b8e      	ldr	r3, [pc, #568]	; (8000f74 <main+0x288>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	80fb      	strh	r3, [r7, #6]
	  uint16_t cambio_y_axis = (uint16_t) ADCValue[1];  //manopla y
 8000d3e:	4b8d      	ldr	r3, [pc, #564]	; (8000f74 <main+0x288>)
 8000d40:	885b      	ldrh	r3, [r3, #2]
 8000d42:	80bb      	strh	r3, [r7, #4]

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis > speed_div_y[1]){  //speed 1
 8000d44:	4b8e      	ldr	r3, [pc, #568]	; (8000f80 <main+0x294>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	88fa      	ldrh	r2, [r7, #6]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d20c      	bcs.n	8000d68 <main+0x7c>
 8000d4e:	4b8d      	ldr	r3, [pc, #564]	; (8000f84 <main+0x298>)
 8000d50:	885b      	ldrh	r3, [r3, #2]
 8000d52:	88ba      	ldrh	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d907      	bls.n	8000d68 <main+0x7c>
		  joystickhid.botoes0 |= (uint8_t)(1<<0);	// SETA BOTAO 1
 8000d58:	4b8b      	ldr	r3, [pc, #556]	; (8000f88 <main+0x29c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b89      	ldr	r3, [pc, #548]	; (8000f88 <main+0x29c>)
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e006      	b.n	8000d76 <main+0x8a>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<0);	// RESETA BOTAO 1
 8000d68:	4b87      	ldr	r3, [pc, #540]	; (8000f88 <main+0x29c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b85      	ldr	r3, [pc, #532]	; (8000f88 <main+0x29c>)
 8000d74:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis < speed_div_y[0]){  //speed2
 8000d76:	4b82      	ldr	r3, [pc, #520]	; (8000f80 <main+0x294>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	88fa      	ldrh	r2, [r7, #6]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d20c      	bcs.n	8000d9a <main+0xae>
 8000d80:	4b80      	ldr	r3, [pc, #512]	; (8000f84 <main+0x298>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	88ba      	ldrh	r2, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d207      	bcs.n	8000d9a <main+0xae>
		  joystickhid.botoes0 |= (uint8_t)(1<<1);	// SETA BOTAO 2
 8000d8a:	4b7f      	ldr	r3, [pc, #508]	; (8000f88 <main+0x29c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <main+0x29c>)
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e006      	b.n	8000da8 <main+0xbc>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<1);	// RESETA BOTAO 2
 8000d9a:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <main+0x29c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	f023 0302 	bic.w	r3, r3, #2
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b78      	ldr	r3, [pc, #480]	; (8000f88 <main+0x29c>)
 8000da6:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis > speed_div_y[1]){  //speed 3
 8000da8:	4b75      	ldr	r3, [pc, #468]	; (8000f80 <main+0x294>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	88fa      	ldrh	r2, [r7, #6]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d911      	bls.n	8000dd6 <main+0xea>
 8000db2:	4b73      	ldr	r3, [pc, #460]	; (8000f80 <main+0x294>)
 8000db4:	885b      	ldrh	r3, [r3, #2]
 8000db6:	88fa      	ldrh	r2, [r7, #6]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d20c      	bcs.n	8000dd6 <main+0xea>
 8000dbc:	4b71      	ldr	r3, [pc, #452]	; (8000f84 <main+0x298>)
 8000dbe:	885b      	ldrh	r3, [r3, #2]
 8000dc0:	88ba      	ldrh	r2, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <main+0xea>
		  joystickhid.botoes0 |= (uint8_t)(1<<2);	// SETA BOTAO 3
 8000dc6:	4b70      	ldr	r3, [pc, #448]	; (8000f88 <main+0x29c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b6d      	ldr	r3, [pc, #436]	; (8000f88 <main+0x29c>)
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	e006      	b.n	8000de4 <main+0xf8>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<2);	// RESETA BOTAO 3
 8000dd6:	4b6c      	ldr	r3, [pc, #432]	; (8000f88 <main+0x29c>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	f023 0304 	bic.w	r3, r3, #4
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b69      	ldr	r3, [pc, #420]	; (8000f88 <main+0x29c>)
 8000de2:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis < speed_div_y[0]){  //speed 4
 8000de4:	4b66      	ldr	r3, [pc, #408]	; (8000f80 <main+0x294>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	88fa      	ldrh	r2, [r7, #6]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d911      	bls.n	8000e12 <main+0x126>
 8000dee:	4b64      	ldr	r3, [pc, #400]	; (8000f80 <main+0x294>)
 8000df0:	885b      	ldrh	r3, [r3, #2]
 8000df2:	88fa      	ldrh	r2, [r7, #6]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d20c      	bcs.n	8000e12 <main+0x126>
 8000df8:	4b62      	ldr	r3, [pc, #392]	; (8000f84 <main+0x298>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	88ba      	ldrh	r2, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d207      	bcs.n	8000e12 <main+0x126>
		  joystickhid.botoes0 |= (uint8_t)(1<<3);	// SETA BOTAO 4
 8000e02:	4b61      	ldr	r3, [pc, #388]	; (8000f88 <main+0x29c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b5e      	ldr	r3, [pc, #376]	; (8000f88 <main+0x29c>)
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e006      	b.n	8000e20 <main+0x134>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<3);	// RESETA BOTAO 4
 8000e12:	4b5d      	ldr	r3, [pc, #372]	; (8000f88 <main+0x29c>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	f023 0308 	bic.w	r3, r3, #8
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b5a      	ldr	r3, [pc, #360]	; (8000f88 <main+0x29c>)
 8000e1e:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis > speed_div_y[1]){    //speed5
 8000e20:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <main+0x294>)
 8000e22:	885b      	ldrh	r3, [r3, #2]
 8000e24:	88fa      	ldrh	r2, [r7, #6]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d90c      	bls.n	8000e44 <main+0x158>
 8000e2a:	4b56      	ldr	r3, [pc, #344]	; (8000f84 <main+0x298>)
 8000e2c:	885b      	ldrh	r3, [r3, #2]
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d907      	bls.n	8000e44 <main+0x158>
		  joystickhid.botoes0 |= (uint8_t)(1<<4);	// SETA BOTAO 5
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <main+0x29c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b52      	ldr	r3, [pc, #328]	; (8000f88 <main+0x29c>)
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e006      	b.n	8000e52 <main+0x166>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<4);	// RESETA BOTAO 5
 8000e44:	4b50      	ldr	r3, [pc, #320]	; (8000f88 <main+0x29c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	f023 0310 	bic.w	r3, r3, #16
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b4e      	ldr	r3, [pc, #312]	; (8000f88 <main+0x29c>)
 8000e50:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0]){    // speed 6
 8000e52:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <main+0x294>)
 8000e54:	885b      	ldrh	r3, [r3, #2]
 8000e56:	88fa      	ldrh	r2, [r7, #6]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d90c      	bls.n	8000e76 <main+0x18a>
 8000e5c:	4b49      	ldr	r3, [pc, #292]	; (8000f84 <main+0x298>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	88ba      	ldrh	r2, [r7, #4]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d207      	bcs.n	8000e76 <main+0x18a>
		  joystickhid.botoes0 |= (uint8_t)(1<<5);	// SETA BOTAO 6
 8000e66:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <main+0x29c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	f043 0320 	orr.w	r3, r3, #32
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b45      	ldr	r3, [pc, #276]	; (8000f88 <main+0x29c>)
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e006      	b.n	8000e84 <main+0x198>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5);	// RESETA BOTAO 6
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <main+0x29c>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	f023 0320 	bic.w	r3, r3, #32
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <main+0x29c>)
 8000e82:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<0))  {
 8000e84:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <main+0x2a0>)
 8000e86:	785b      	ldrb	r3, [r3, #1]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <main+0x1b4>
		  joystickhid.botoes0 |= (uint16_t) (1<<6);  // SETA BOTAO 7
 8000e90:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <main+0x29c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <main+0x29c>)
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e006      	b.n	8000eae <main+0x1c2>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 7
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <main+0x29c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <main+0x29c>)
 8000eac:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<1))  {
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <main+0x2a0>)
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <main+0x1de>
		  joystickhid.botoes0 |= (uint16_t)(1<<7);	// SETA BOTAO 8
 8000eba:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <main+0x29c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <main+0x29c>)
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e006      	b.n	8000ed8 <main+0x1ec>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 8
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <main+0x29c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <main+0x29c>)
 8000ed6:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<2))  {
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <main+0x2a0>)
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d007      	beq.n	8000ef4 <main+0x208>
		  joystickhid.botoes1 |= (uint16_t)(1<<0);	// SETA BOTAO 9
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <main+0x29c>)
 8000ee6:	785b      	ldrb	r3, [r3, #1]
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <main+0x29c>)
 8000ef0:	705a      	strb	r2, [r3, #1]
 8000ef2:	e006      	b.n	8000f02 <main+0x216>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 9
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <main+0x29c>)
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <main+0x29c>)
 8000f00:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<3))  {
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <main+0x2a0>)
 8000f04:	785b      	ldrb	r3, [r3, #1]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <main+0x232>
		  joystickhid.botoes1 |= (uint16_t)(1<<1);	// SETA BOTAO 10
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <main+0x29c>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <main+0x29c>)
 8000f1a:	705a      	strb	r2, [r3, #1]
 8000f1c:	e006      	b.n	8000f2c <main+0x240>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 10
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <main+0x29c>)
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	f023 0302 	bic.w	r3, r3, #2
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <main+0x29c>)
 8000f2a:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<4))  {
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <main+0x2a0>)
 8000f2e:	785b      	ldrb	r3, [r3, #1]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <main+0x25c>
		  joystickhid.botoes1 |= (uint16_t)(1<<2);	// SETA BOTAO 11
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <main+0x29c>)
 8000f3a:	785b      	ldrb	r3, [r3, #1]
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <main+0x29c>)
 8000f44:	705a      	strb	r2, [r3, #1]
 8000f46:	e006      	b.n	8000f56 <main+0x26a>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<2);	// RESETA BOTAO 11
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <main+0x29c>)
 8000f4a:	785b      	ldrb	r3, [r3, #1]
 8000f4c:	f023 0304 	bic.w	r3, r3, #4
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <main+0x29c>)
 8000f54:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<5))  {
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <main+0x2a0>)
 8000f58:	785b      	ldrb	r3, [r3, #1]
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d016      	beq.n	8000f90 <main+0x2a4>
		  joystickhid.botoes1 |= (uint16_t)(1<<3);	// SETA BOTAO 12
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <main+0x29c>)
 8000f64:	785b      	ldrb	r3, [r3, #1]
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <main+0x29c>)
 8000f6e:	705a      	strb	r2, [r3, #1]
 8000f70:	e015      	b.n	8000f9e <main+0x2b2>
 8000f72:	bf00      	nop
 8000f74:	20000360 	.word	0x20000360
 8000f78:	200001ec 	.word	0x200001ec
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	20000004 	.word	0x20000004
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000354 	.word	0x20000354
 8000f8c:	20000370 	.word	0x20000370
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<3);	// RESETA BOTAO 12
 8000f90:	4b59      	ldr	r3, [pc, #356]	; (80010f8 <main+0x40c>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	f023 0308 	bic.w	r3, r3, #8
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b57      	ldr	r3, [pc, #348]	; (80010f8 <main+0x40c>)
 8000f9c:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<6))  {
 8000f9e:	4b57      	ldr	r3, [pc, #348]	; (80010fc <main+0x410>)
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <main+0x2ce>
		  joystickhid.botoes1 |= (uint16_t)(1<<4);	// SETA BOTAO 13
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <main+0x40c>)
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b50      	ldr	r3, [pc, #320]	; (80010f8 <main+0x40c>)
 8000fb6:	705a      	strb	r2, [r3, #1]
 8000fb8:	e006      	b.n	8000fc8 <main+0x2dc>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<4);	// RESETA BOTAO 13
 8000fba:	4b4f      	ldr	r3, [pc, #316]	; (80010f8 <main+0x40c>)
 8000fbc:	785b      	ldrb	r3, [r3, #1]
 8000fbe:	f023 0310 	bic.w	r3, r3, #16
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <main+0x40c>)
 8000fc6:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<7))  {
 8000fc8:	4b4c      	ldr	r3, [pc, #304]	; (80010fc <main+0x410>)
 8000fca:	785b      	ldrb	r3, [r3, #1]
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	da07      	bge.n	8000fe2 <main+0x2f6>
		  joystickhid.botoes1 |= (uint16_t)(1<<5);	// SETA BOTAO 14
 8000fd2:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <main+0x40c>)
 8000fd4:	785b      	ldrb	r3, [r3, #1]
 8000fd6:	f043 0320 	orr.w	r3, r3, #32
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <main+0x40c>)
 8000fde:	705a      	strb	r2, [r3, #1]
 8000fe0:	e006      	b.n	8000ff0 <main+0x304>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<5);	// RESETA BOTAO 14
 8000fe2:	4b45      	ldr	r3, [pc, #276]	; (80010f8 <main+0x40c>)
 8000fe4:	785b      	ldrb	r3, [r3, #1]
 8000fe6:	f023 0320 	bic.w	r3, r3, #32
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <main+0x40c>)
 8000fee:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<0))  {
 8000ff0:	4b42      	ldr	r3, [pc, #264]	; (80010fc <main+0x410>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d007      	beq.n	800100c <main+0x320>
		  joystickhid.botoes1 |= (uint16_t)(1<<6);	// SETA BOTAO 15
 8000ffc:	4b3e      	ldr	r3, [pc, #248]	; (80010f8 <main+0x40c>)
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <main+0x40c>)
 8001008:	705a      	strb	r2, [r3, #1]
 800100a:	e006      	b.n	800101a <main+0x32e>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 15
 800100c:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <main+0x40c>)
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <main+0x40c>)
 8001018:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<1))  {
 800101a:	4b38      	ldr	r3, [pc, #224]	; (80010fc <main+0x410>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <main+0x34a>
		  joystickhid.botoes1 |= (uint32_t)(1<<7);	// SETA BOTAO 16
 8001026:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <main+0x40c>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <main+0x40c>)
 8001032:	705a      	strb	r2, [r3, #1]
 8001034:	e006      	b.n	8001044 <main+0x358>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 16
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <main+0x40c>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <main+0x40c>)
 8001042:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<2))  {
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <main+0x410>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	d007      	beq.n	8001060 <main+0x374>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<0);	// SETA BOTAO 17
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <main+0x40c>)
 8001052:	789b      	ldrb	r3, [r3, #2]
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <main+0x40c>)
 800105c:	709a      	strb	r2, [r3, #2]
 800105e:	e006      	b.n	800106e <main+0x382>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 17
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <main+0x40c>)
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <main+0x40c>)
 800106c:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<3))  {
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <main+0x410>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <main+0x39e>
		  joystickhid.botoes_freio0 |= (uint32_t)(1<<1);	// SETA BOTAO 18
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <main+0x40c>)
 800107c:	789b      	ldrb	r3, [r3, #2]
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <main+0x40c>)
 8001086:	709a      	strb	r2, [r3, #2]
 8001088:	e006      	b.n	8001098 <main+0x3ac>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 18
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <main+0x40c>)
 800108c:	789b      	ldrb	r3, [r3, #2]
 800108e:	f023 0302 	bic.w	r3, r3, #2
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <main+0x40c>)
 8001096:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<6) && cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0])  {
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <main+0x410>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d018      	beq.n	80010d6 <main+0x3ea>
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <main+0x414>)
 80010a6:	885b      	ldrh	r3, [r3, #2]
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d913      	bls.n	80010d6 <main+0x3ea>
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <main+0x418>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	88ba      	ldrh	r2, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d20e      	bcs.n	80010d6 <main+0x3ea>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<2);	// SETA BOTAO 19 SPEED REVERSA
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <main+0x40c>)
 80010ba:	789b      	ldrb	r3, [r3, #2]
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <main+0x40c>)
 80010c4:	709a      	strb	r2, [r3, #2]
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5); 			// RESETA BOTAO SPEED 6 QUANDO ATIVA A REVERSA
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <main+0x40c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	f023 0320 	bic.w	r3, r3, #32
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <main+0x40c>)
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e006      	b.n	80010e4 <main+0x3f8>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint32_t)(1<<2);	// RESETA BOTAO 19 SPEED REVERSA
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <main+0x40c>)
 80010d8:	789b      	ldrb	r3, [r3, #2]
 80010da:	f023 0304 	bic.w	r3, r3, #4
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <main+0x40c>)
 80010e2:	709a      	strb	r2, [r3, #2]
	  //joystickhid.botoes0 = 0xff;
	  //	  joystickhid.botoes1 = 0;
	  	//  joystickhid.botoes_freio0 &= 0b11110000;
	 // }

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80010e4:	2208      	movs	r2, #8
 80010e6:	4904      	ldr	r1, [pc, #16]	; (80010f8 <main+0x40c>)
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <main+0x41c>)
 80010ea:	f007 ff79 	bl	8008fe0 <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f000 fc78 	bl	80019e4 <HAL_Delay>
  {
 80010f4:	e61a      	b.n	8000d2c <main+0x40>
 80010f6:	bf00      	nop
 80010f8:	20000354 	.word	0x20000354
 80010fc:	20000370 	.word	0x20000370
 8001100:	20000004 	.word	0x20000004
 8001104:	20000008 	.word	0x20000008
 8001108:	200003a4 	.word	0x200003a4

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	; 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001116:	2228      	movs	r2, #40	; 0x28
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f009 fcd0 	bl	800aac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113c:	2301      	movs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114a:	2301      	movs	r3, #1
 800114c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001158:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001162:	4618      	mov	r0, r3
 8001164:	f003 fc44 	bl	80049f0 <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800116e:	f000 f9b3 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001182:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2101      	movs	r1, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f003 feb0 	bl	8004ef4 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800119a:	f000 f99d 	bl	80014d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800119e:	2312      	movs	r3, #18
 80011a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80011a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 f837 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011bc:	f000 f98c 	bl	80014d8 <Error_Handler>
  }
}
 80011c0:	bf00      	nop
 80011c2:	3750      	adds	r7, #80	; 0x50
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <MX_ADC1_Init+0xb0>)
 80011da:	4a28      	ldr	r2, [pc, #160]	; (800127c <MX_ADC1_Init+0xb4>)
 80011dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_ADC1_Init+0xb0>)
 80011e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_ADC1_Init+0xb0>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_ADC1_Init+0xb0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_ADC1_Init+0xb0>)
 80011f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_ADC1_Init+0xb0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_ADC1_Init+0xb0>)
 8001202:	2203      	movs	r2, #3
 8001204:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001206:	481c      	ldr	r0, [pc, #112]	; (8001278 <MX_ADC1_Init+0xb0>)
 8001208:	f000 fc10 	bl	8001a2c <HAL_ADC_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001212:	f000 f961 	bl	80014d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121a:	2301      	movs	r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800121e:	2307      	movs	r3, #7
 8001220:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	4814      	ldr	r0, [pc, #80]	; (8001278 <MX_ADC1_Init+0xb0>)
 8001228:	f000 fdd2 	bl	8001dd0 <HAL_ADC_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001232:	f000 f951 	bl	80014d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001236:	2301      	movs	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800123a:	2302      	movs	r3, #2
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_ADC1_Init+0xb0>)
 8001244:	f000 fdc4 	bl	8001dd0 <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800124e:	f000 f943 	bl	80014d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001252:	2302      	movs	r3, #2
 8001254:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001256:	2303      	movs	r3, #3
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_ADC1_Init+0xb0>)
 8001260:	f000 fdb6 	bl	8001dd0 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800126a:	f000 f935 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001ec 	.word	0x200001ec
 800127c:	40012400 	.word	0x40012400

08001280 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_SPI1_Init+0x64>)
 8001286:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <MX_SPI1_Init+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_SPI1_Init+0x64>)
 800128c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001290:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_SPI1_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_SPI1_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012b4:	2228      	movs	r2, #40	; 0x28
 80012b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012cc:	220a      	movs	r2, #10
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012d2:	f004 f85d 	bl	8005390 <HAL_SPI_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012dc:	f000 f8fc 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000260 	.word	0x20000260
 80012e8:	40013000 	.word	0x40013000

080012ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_SPI2_Init+0x68>)
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <MX_SPI2_Init+0x6c>)
 80012f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_SPI2_Init+0x68>)
 80012f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_SPI2_Init+0x68>)
 8001300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001304:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_SPI2_Init+0x68>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_SPI2_Init+0x68>)
 800130e:	2202      	movs	r2, #2
 8001310:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_SPI2_Init+0x68>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_SPI2_Init+0x68>)
 800131a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_SPI2_Init+0x68>)
 8001322:	2220      	movs	r2, #32
 8001324:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_SPI2_Init+0x68>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_SPI2_Init+0x68>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_SPI2_Init+0x68>)
 8001334:	2200      	movs	r2, #0
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_SPI2_Init+0x68>)
 800133a:	220a      	movs	r2, #10
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_SPI2_Init+0x68>)
 8001340:	f004 f826 	bl	8005390 <HAL_SPI_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800134a:	f000 f8c5 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200002b8 	.word	0x200002b8
 8001358:	40003800 	.word	0x40003800

0800135c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <MX_USART1_UART_Init+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_USART1_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001394:	f004 fd30 	bl	8005df8 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f000 f89b 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000310 	.word	0x20000310
 80013ac:	40013800 	.word	0x40013800

080013b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_DMA_Init+0x38>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <MX_DMA_Init+0x38>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6153      	str	r3, [r2, #20]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_DMA_Init+0x38>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	200b      	movs	r0, #11
 80013d4:	f000 ffcd 	bl	8002372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013d8:	200b      	movs	r0, #11
 80013da:	f000 ffe6 	bl	80023aa <HAL_NVIC_EnableIRQ>

}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	4b32      	ldr	r3, [pc, #200]	; (80014cc <MX_GPIO_Init+0xe0>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a31      	ldr	r2, [pc, #196]	; (80014cc <MX_GPIO_Init+0xe0>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <MX_GPIO_Init+0xe0>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <MX_GPIO_Init+0xe0>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a2b      	ldr	r2, [pc, #172]	; (80014cc <MX_GPIO_Init+0xe0>)
 800141e:	f043 0320 	orr.w	r3, r3, #32
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <MX_GPIO_Init+0xe0>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_GPIO_Init+0xe0>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a25      	ldr	r2, [pc, #148]	; (80014cc <MX_GPIO_Init+0xe0>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <MX_GPIO_Init+0xe0>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b20      	ldr	r3, [pc, #128]	; (80014cc <MX_GPIO_Init+0xe0>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <MX_GPIO_Init+0xe0>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_GPIO_Init+0xe0>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFTER_CS_Pin|LED_PIN_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001466:	481a      	ldr	r0, [pc, #104]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001468:	f001 fde5 	bl	8003036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CALIB_BUTTON_Pin */
  GPIO_InitStruct.Pin = CALIB_BUTTON_Pin;
 800146c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CALIB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4619      	mov	r1, r3
 8001480:	4814      	ldr	r0, [pc, #80]	; (80014d4 <MX_GPIO_Init+0xe8>)
 8001482:	f001 fc3d 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFTER_CS_Pin */
  GPIO_InitStruct.Pin = SHIFTER_CS_Pin;
 8001486:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001490:	2301      	movs	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHIFTER_CS_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <MX_GPIO_Init+0xe4>)
 80014a0:	f001 fc2e 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80014a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	4619      	mov	r1, r3
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_GPIO_Init+0xe4>)
 80014be:	f001 fc1f 	bl	8002d00 <HAL_GPIO_Init>

}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010c00 	.word	0x40010c00
 80014d4:	40011000 	.word	0x40011000

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <Error_Handler+0x8>
	...

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_MspInit+0x40>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_MspInit+0x40>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_MspInit+0x40>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_MspInit+0x40>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_MspInit+0x40>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_MspInit+0x40>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <HAL_ADC_MspInit+0xbc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d149      	bne.n	80015dc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a26      	ldr	r2, [pc, #152]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a20      	ldr	r2, [pc, #128]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001578:	2307      	movs	r3, #7
 800157a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157c:	2303      	movs	r3, #3
 800157e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	4819      	ldr	r0, [pc, #100]	; (80015ec <HAL_ADC_MspInit+0xc4>)
 8001588:	f001 fbba 	bl	8002d00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 800158e:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_ADC_MspInit+0xcc>)
 8001590:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 80015a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 80015ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 80015b6:	2220      	movs	r2, #32
 80015b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 80015c2:	f000 ff0d 	bl	80023e0 <HAL_DMA_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80015cc:	f7ff ff84 	bl	80014d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 80015d4:	621a      	str	r2, [r3, #32]
 80015d6:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40012400 	.word	0x40012400
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010800 	.word	0x40010800
 80015f0:	2000021c 	.word	0x2000021c
 80015f4:	40020008 	.word	0x40020008

080015f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a3f      	ldr	r2, [pc, #252]	; (8001710 <HAL_SPI_MspInit+0x118>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d138      	bne.n	800168a <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001618:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a3d      	ldr	r2, [pc, #244]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 800161e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a37      	ldr	r2, [pc, #220]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	4619      	mov	r1, r3
 800165a:	482f      	ldr	r0, [pc, #188]	; (8001718 <HAL_SPI_MspInit+0x120>)
 800165c:	f001 fb50 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001660:	2340      	movs	r3, #64	; 0x40
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4619      	mov	r1, r3
 8001672:	4829      	ldr	r0, [pc, #164]	; (8001718 <HAL_SPI_MspInit+0x120>)
 8001674:	f001 fb44 	bl	8002d00 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2023      	movs	r0, #35	; 0x23
 800167e:	f000 fe78 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001682:	2023      	movs	r0, #35	; 0x23
 8001684:	f000 fe91 	bl	80023aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001688:	e03e      	b.n	8001708 <HAL_SPI_MspInit+0x110>
  else if(hspi->Instance==SPI2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a23      	ldr	r2, [pc, #140]	; (800171c <HAL_SPI_MspInit+0x124>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d139      	bne.n	8001708 <HAL_SPI_MspInit+0x110>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	61d3      	str	r3, [r2, #28]
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_SPI_MspInit+0x11c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	4619      	mov	r1, r3
 80016d8:	4811      	ldr	r0, [pc, #68]	; (8001720 <HAL_SPI_MspInit+0x128>)
 80016da:	f001 fb11 	bl	8002d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	4619      	mov	r1, r3
 80016f2:	480b      	ldr	r0, [pc, #44]	; (8001720 <HAL_SPI_MspInit+0x128>)
 80016f4:	f001 fb04 	bl	8002d00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	2024      	movs	r0, #36	; 0x24
 80016fe:	f000 fe38 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001702:	2024      	movs	r0, #36	; 0x24
 8001704:	f000 fe51 	bl	80023aa <HAL_NVIC_EnableIRQ>
}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40013000 	.word	0x40013000
 8001714:	40021000 	.word	0x40021000
 8001718:	40010800 	.word	0x40010800
 800171c:	40003800 	.word	0x40003800
 8001720:	40010c00 	.word	0x40010c00

08001724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <HAL_UART_MspInit+0x8c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d131      	bne.n	80017a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_UART_MspInit+0x90>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <HAL_UART_MspInit+0x90>)
 800174a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_UART_MspInit+0x90>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_UART_MspInit+0x90>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <HAL_UART_MspInit+0x90>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_UART_MspInit+0x90>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	4619      	mov	r1, r3
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <HAL_UART_MspInit+0x94>)
 800178a:	f001 fab9 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800178e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <HAL_UART_MspInit+0x94>)
 80017a4:	f001 faac 	bl	8002d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40013800 	.word	0x40013800
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010800 	.word	0x40010800

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler+0x4>

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001802:	f000 f8d3 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <DMA1_Channel1_IRQHandler+0x10>)
 8001812:	f000 ff15 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000021c 	.word	0x2000021c

08001820 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001826:	f001 fd68 	bl	80032fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000868 	.word	0x20000868

08001834 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <SPI1_IRQHandler+0x10>)
 800183a:	f004 f8e1 	bl	8005a00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000260 	.word	0x20000260

08001848 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <SPI2_IRQHandler+0x10>)
 800184e:	f004 f8d7 	bl	8005a00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200002b8 	.word	0x200002b8

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f009 f8ee 	bl	800aa6c <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20005000 	.word	0x20005000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	20000374 	.word	0x20000374
 80018c4:	20000bc0 	.word	0x20000bc0

080018c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018fa:	f7ff ffe5 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f009 f8bb 	bl	800aa78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001902:	f7ff f9f3 	bl	8000cec <main>
  bx lr
 8001906:	4770      	bx	lr
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001910:	0800b518 	.word	0x0800b518
  ldr r2, =_sbss
 8001914:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001918:	20000bbc 	.word	0x20000bbc

0800191c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC1_2_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_Init+0x28>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_Init+0x28>)
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 fd13 	bl	800235c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	200f      	movs	r0, #15
 8001938:	f000 f808 	bl	800194c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff fdd2 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x54>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_InitTick+0x58>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fd2b 	bl	80023c6 <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d80a      	bhi.n	8001996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f000 fcf3 	bl	8002372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <HAL_InitTick+0x5c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000000c 	.word	0x2000000c
 80019a4:	20000014 	.word	0x20000014
 80019a8:	20000010 	.word	0x20000010

080019ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_IncTick+0x1c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_IncTick+0x20>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_IncTick+0x20>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000014 	.word	0x20000014
 80019cc:	20000378 	.word	0x20000378

080019d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_GetTick+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000378 	.word	0x20000378

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff fff0 	bl	80019d0 <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_Delay+0x44>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffe0 	bl	80019d0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000014 	.word	0x20000014

08001a2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0be      	b.n	8001bcc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fd5c 	bl	8001528 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 faff 	bl	8002074 <ADC_ConversionStop_Disable>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 8099 	bne.w	8001bba <HAL_ADC_Init+0x18e>
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 8095 	bne.w	8001bba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a98:	f023 0302 	bic.w	r3, r3, #2
 8001a9c:	f043 0202 	orr.w	r2, r3, #2
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7b1b      	ldrb	r3, [r3, #12]
 8001ab2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ab4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac4:	d003      	beq.n	8001ace <HAL_ADC_Init+0xa2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d102      	bne.n	8001ad4 <HAL_ADC_Init+0xa8>
 8001ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad2:	e000      	b.n	8001ad6 <HAL_ADC_Init+0xaa>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7d1b      	ldrb	r3, [r3, #20]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d119      	bne.n	8001b18 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7b1b      	ldrb	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	035a      	lsls	r2, r3, #13
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	e00b      	b.n	8001b18 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	f043 0220 	orr.w	r2, r3, #32
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_ADC_Init+0x1a8>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b48:	d003      	beq.n	8001b52 <HAL_ADC_Init+0x126>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d104      	bne.n	8001b5c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	051b      	lsls	r3, r3, #20
 8001b5a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_ADC_Init+0x1ac>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d10b      	bne.n	8001b98 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	f023 0303 	bic.w	r3, r3, #3
 8001b8e:	f043 0201 	orr.w	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b96:	e018      	b.n	8001bca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	f023 0312 	bic.w	r3, r3, #18
 8001ba0:	f043 0210 	orr.w	r2, r3, #16
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bb8:	e007      	b.n	8001bca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	f043 0210 	orr.w	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	ffe1f7fd 	.word	0xffe1f7fd
 8001bd8:	ff1f0efe 	.word	0xff1f0efe

08001bdc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a64      	ldr	r2, [pc, #400]	; (8001d84 <HAL_ADC_Start_DMA+0x1a8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d004      	beq.n	8001c00 <HAL_ADC_Start_DMA+0x24>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a63      	ldr	r2, [pc, #396]	; (8001d88 <HAL_ADC_Start_DMA+0x1ac>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d106      	bne.n	8001c0e <HAL_ADC_Start_DMA+0x32>
 8001c00:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <HAL_ADC_Start_DMA+0x1a8>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 80b3 	bne.w	8001d74 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_Start_DMA+0x40>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e0ae      	b.n	8001d7a <HAL_ADC_Start_DMA+0x19e>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f9cb 	bl	8001fc0 <ADC_Enable>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 809a 	bne.w	8001d6a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <HAL_ADC_Start_DMA+0x1ac>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d105      	bne.n	8001c60 <HAL_ADC_Start_DMA+0x84>
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <HAL_ADC_Start_DMA+0x1a8>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d115      	bne.n	8001c8c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d026      	beq.n	8001cc8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c8a:	e01d      	b.n	8001cc8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a39      	ldr	r2, [pc, #228]	; (8001d84 <HAL_ADC_Start_DMA+0x1a8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_ADC_Start_DMA+0xd0>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a38      	ldr	r2, [pc, #224]	; (8001d88 <HAL_ADC_Start_DMA+0x1ac>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d10d      	bne.n	8001cc8 <HAL_ADC_Start_DMA+0xec>
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <HAL_ADC_Start_DMA+0x1a8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f023 0206 	bic.w	r2, r3, #6
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_ADC_Start_DMA+0x1b0>)
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_ADC_Start_DMA+0x1b4>)
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_ADC_Start_DMA+0x1b8>)
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0202 	mvn.w	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d20:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a18      	ldr	r0, [r3, #32]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	334c      	adds	r3, #76	; 0x4c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f000 fbaf 	bl	8002494 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d40:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d44:	d108      	bne.n	8001d58 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d54:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d56:	e00f      	b.n	8001d78 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d66:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d68:	e006      	b.n	8001d78 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001d72:	e001      	b.n	8001d78 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40012400 	.word	0x40012400
 8001d88:	40012800 	.word	0x40012800
 8001d8c:	080020f7 	.word	0x080020f7
 8001d90:	08002173 	.word	0x08002173
 8001d94:	0800218f 	.word	0x0800218f

08001d98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x20>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e0dc      	b.n	8001faa <HAL_ADC_ConfigChannel+0x1da>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b06      	cmp	r3, #6
 8001dfe:	d81c      	bhi.n	8001e3a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b05      	subs	r3, #5
 8001e12:	221f      	movs	r2, #31
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4019      	ands	r1, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b05      	subs	r3, #5
 8001e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
 8001e38:	e03c      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d81c      	bhi.n	8001e7c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b23      	subs	r3, #35	; 0x23
 8001e54:	221f      	movs	r2, #31
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	4019      	ands	r1, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b23      	subs	r3, #35	; 0x23
 8001e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7a:	e01b      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b41      	subs	r3, #65	; 0x41
 8001e8e:	221f      	movs	r2, #31
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4019      	ands	r1, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b41      	subs	r3, #65	; 0x41
 8001ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d91c      	bls.n	8001ef6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68d9      	ldr	r1, [r3, #12]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b1e      	subs	r3, #30
 8001ece:	2207      	movs	r2, #7
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6898      	ldr	r0, [r3, #8]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b1e      	subs	r3, #30
 8001ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	e019      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6919      	ldr	r1, [r3, #16]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	2207      	movs	r2, #7
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4019      	ands	r1, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6898      	ldr	r0, [r3, #8]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d003      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f36:	2b11      	cmp	r3, #17
 8001f38:	d132      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d125      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d126      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f60:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d11a      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <HAL_ADC_ConfigChannel+0x1ec>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	0c9a      	lsrs	r2, r3, #18
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f9      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x1b2>
 8001f8e:	e007      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40012400 	.word	0x40012400
 8001fb8:	2000000c 	.word	0x2000000c
 8001fbc:	431bde83 	.word	0x431bde83

08001fc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d040      	beq.n	8002060 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <ADC_Enable+0xac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <ADC_Enable+0xb0>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	0c9b      	lsrs	r3, r3, #18
 8001ffa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ffc:	e002      	b.n	8002004 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3b01      	subs	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800200a:	f7ff fce1 	bl	80019d0 <HAL_GetTick>
 800200e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002010:	e01f      	b.n	8002052 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002012:	f7ff fcdd 	bl	80019d0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d918      	bls.n	8002052 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d011      	beq.n	8002052 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	f043 0210 	orr.w	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e007      	b.n	8002062 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d1d8      	bne.n	8002012 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	2000000c 	.word	0x2000000c
 8002070:	431bde83 	.word	0x431bde83

08002074 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d12e      	bne.n	80020ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800209e:	f7ff fc97 	bl	80019d0 <HAL_GetTick>
 80020a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020a4:	e01b      	b.n	80020de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020a6:	f7ff fc93 	bl	80019d0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d914      	bls.n	80020de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10d      	bne.n	80020de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e007      	b.n	80020ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d0dc      	beq.n	80020a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800210c:	2b00      	cmp	r3, #0
 800210e:	d127      	bne.n	8002160 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002126:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800212a:	d115      	bne.n	8002158 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002130:	2b00      	cmp	r3, #0
 8002132:	d111      	bne.n	8002158 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7ff fe1d 	bl	8001d98 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800215e:	e004      	b.n	800216a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7ff fe12 	bl	8001daa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff fe01 	bl	8001dbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e0:	4013      	ands	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <__NVIC_GetPriorityGrouping+0x18>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	f003 0307 	and.w	r3, r3, #7
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	db0b      	blt.n	8002252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	4906      	ldr	r1, [pc, #24]	; (800225c <__NVIC_EnableIRQ+0x34>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2001      	movs	r0, #1
 800224a:	fa00 f202 	lsl.w	r2, r0, r2
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	; (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002328:	d301      	bcc.n	800232e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232a:	2301      	movs	r3, #1
 800232c:	e00f      	b.n	800234e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232e:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <SysTick_Config+0x40>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002336:	210f      	movs	r1, #15
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f7ff ff90 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <SysTick_Config+0x40>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002346:	4b04      	ldr	r3, [pc, #16]	; (8002358 <SysTick_Config+0x40>)
 8002348:	2207      	movs	r2, #7
 800234a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	e000e010 	.word	0xe000e010

0800235c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff2d 	bl	80021c4 <__NVIC_SetPriorityGrouping>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002384:	f7ff ff42 	bl	800220c <__NVIC_GetPriorityGrouping>
 8002388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	6978      	ldr	r0, [r7, #20]
 8002390:	f7ff ff90 	bl	80022b4 <NVIC_EncodePriority>
 8002394:	4602      	mov	r2, r0
 8002396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff5f 	bl	8002260 <__NVIC_SetPriority>
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff35 	bl	8002228 <__NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffa2 	bl	8002318 <SysTick_Config>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e043      	b.n	800247e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_DMA_Init+0xa8>)
 80023fe:	4413      	add	r3, r2
 8002400:	4a22      	ldr	r2, [pc, #136]	; (800248c <HAL_DMA_Init+0xac>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	009a      	lsls	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <HAL_DMA_Init+0xb0>)
 8002412:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800242a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800242e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	bffdfff8 	.word	0xbffdfff8
 800248c:	cccccccd 	.word	0xcccccccd
 8002490:	40020000 	.word	0x40020000

08002494 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_DMA_Start_IT+0x20>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e04a      	b.n	800254a <HAL_DMA_Start_IT+0xb6>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d13a      	bne.n	800253c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f9ae 	bl	800284c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 020e 	orr.w	r2, r2, #14
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e00f      	b.n	800252a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0204 	bic.w	r2, r2, #4
 8002518:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 020a 	orr.w	r2, r2, #10
 8002528:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e005      	b.n	8002548 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002544:	2302      	movs	r3, #2
 8002546:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002548:	7dfb      	ldrb	r3, [r7, #23]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002566:	2b02      	cmp	r3, #2
 8002568:	d005      	beq.n	8002576 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2204      	movs	r2, #4
 800256e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e051      	b.n	800261a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 020e 	bic.w	r2, r2, #14
 8002584:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a22      	ldr	r2, [pc, #136]	; (8002624 <HAL_DMA_Abort_IT+0xd0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d029      	beq.n	80025f4 <HAL_DMA_Abort_IT+0xa0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_DMA_Abort_IT+0xd4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d022      	beq.n	80025f0 <HAL_DMA_Abort_IT+0x9c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_DMA_Abort_IT+0xd8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d01a      	beq.n	80025ea <HAL_DMA_Abort_IT+0x96>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <HAL_DMA_Abort_IT+0xdc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d012      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x90>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_DMA_Abort_IT+0xe0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00a      	beq.n	80025de <HAL_DMA_Abort_IT+0x8a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_DMA_Abort_IT+0xe4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d102      	bne.n	80025d8 <HAL_DMA_Abort_IT+0x84>
 80025d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025d6:	e00e      	b.n	80025f6 <HAL_DMA_Abort_IT+0xa2>
 80025d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025dc:	e00b      	b.n	80025f6 <HAL_DMA_Abort_IT+0xa2>
 80025de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e2:	e008      	b.n	80025f6 <HAL_DMA_Abort_IT+0xa2>
 80025e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e8:	e005      	b.n	80025f6 <HAL_DMA_Abort_IT+0xa2>
 80025ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ee:	e002      	b.n	80025f6 <HAL_DMA_Abort_IT+0xa2>
 80025f0:	2310      	movs	r3, #16
 80025f2:	e000      	b.n	80025f6 <HAL_DMA_Abort_IT+0xa2>
 80025f4:	2301      	movs	r3, #1
 80025f6:	4a11      	ldr	r2, [pc, #68]	; (800263c <HAL_DMA_Abort_IT+0xe8>)
 80025f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
    } 
  }
  return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40020008 	.word	0x40020008
 8002628:	4002001c 	.word	0x4002001c
 800262c:	40020030 	.word	0x40020030
 8002630:	40020044 	.word	0x40020044
 8002634:	40020058 	.word	0x40020058
 8002638:	4002006c 	.word	0x4002006c
 800263c:	40020000 	.word	0x40020000

08002640 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	2204      	movs	r2, #4
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d04f      	beq.n	8002708 <HAL_DMA_IRQHandler+0xc8>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d04a      	beq.n	8002708 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0204 	bic.w	r2, r2, #4
 800268e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a66      	ldr	r2, [pc, #408]	; (8002830 <HAL_DMA_IRQHandler+0x1f0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d029      	beq.n	80026ee <HAL_DMA_IRQHandler+0xae>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a65      	ldr	r2, [pc, #404]	; (8002834 <HAL_DMA_IRQHandler+0x1f4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d022      	beq.n	80026ea <HAL_DMA_IRQHandler+0xaa>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a63      	ldr	r2, [pc, #396]	; (8002838 <HAL_DMA_IRQHandler+0x1f8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01a      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xa4>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a62      	ldr	r2, [pc, #392]	; (800283c <HAL_DMA_IRQHandler+0x1fc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d012      	beq.n	80026de <HAL_DMA_IRQHandler+0x9e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a60      	ldr	r2, [pc, #384]	; (8002840 <HAL_DMA_IRQHandler+0x200>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x98>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a5f      	ldr	r2, [pc, #380]	; (8002844 <HAL_DMA_IRQHandler+0x204>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d102      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x92>
 80026cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026d0:	e00e      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026d6:	e00b      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026dc:	e008      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026e2:	e005      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e8:	e002      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026ea:	2340      	movs	r3, #64	; 0x40
 80026ec:	e000      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026ee:	2304      	movs	r3, #4
 80026f0:	4a55      	ldr	r2, [pc, #340]	; (8002848 <HAL_DMA_IRQHandler+0x208>)
 80026f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8094 	beq.w	8002826 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002706:	e08e      	b.n	8002826 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	2202      	movs	r2, #2
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d056      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x186>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d051      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10b      	bne.n	8002748 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 020a 	bic.w	r2, r2, #10
 800273e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a38      	ldr	r2, [pc, #224]	; (8002830 <HAL_DMA_IRQHandler+0x1f0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d029      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x166>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a37      	ldr	r2, [pc, #220]	; (8002834 <HAL_DMA_IRQHandler+0x1f4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d022      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x162>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a35      	ldr	r2, [pc, #212]	; (8002838 <HAL_DMA_IRQHandler+0x1f8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01a      	beq.n	800279c <HAL_DMA_IRQHandler+0x15c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a34      	ldr	r2, [pc, #208]	; (800283c <HAL_DMA_IRQHandler+0x1fc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d012      	beq.n	8002796 <HAL_DMA_IRQHandler+0x156>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a32      	ldr	r2, [pc, #200]	; (8002840 <HAL_DMA_IRQHandler+0x200>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00a      	beq.n	8002790 <HAL_DMA_IRQHandler+0x150>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a31      	ldr	r2, [pc, #196]	; (8002844 <HAL_DMA_IRQHandler+0x204>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d102      	bne.n	800278a <HAL_DMA_IRQHandler+0x14a>
 8002784:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002788:	e00e      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 800278a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278e:	e00b      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 8002790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002794:	e008      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 8002796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279a:	e005      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 800279c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a0:	e002      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 80027a2:	2320      	movs	r3, #32
 80027a4:	e000      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 80027a6:	2302      	movs	r3, #2
 80027a8:	4a27      	ldr	r2, [pc, #156]	; (8002848 <HAL_DMA_IRQHandler+0x208>)
 80027aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d034      	beq.n	8002826 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027c4:	e02f      	b.n	8002826 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2208      	movs	r2, #8
 80027cc:	409a      	lsls	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d028      	beq.n	8002828 <HAL_DMA_IRQHandler+0x1e8>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d023      	beq.n	8002828 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020e 	bic.w	r2, r2, #14
 80027ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
    }
  }
  return;
 8002826:	bf00      	nop
 8002828:	bf00      	nop
}
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40020008 	.word	0x40020008
 8002834:	4002001c 	.word	0x4002001c
 8002838:	40020030 	.word	0x40020030
 800283c:	40020044 	.word	0x40020044
 8002840:	40020058 	.word	0x40020058
 8002844:	4002006c 	.word	0x4002006c
 8002848:	40020000 	.word	0x40020000

0800284c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b10      	cmp	r3, #16
 8002878:	d108      	bne.n	800288c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800288a:	e007      	b.n	800289c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80028a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80028c2:	4b2f      	ldr	r3, [pc, #188]	; (8002980 <HAL_FLASH_Program+0xd8>)
 80028c4:	7e1b      	ldrb	r3, [r3, #24]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_FLASH_Program+0x26>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e054      	b.n	8002978 <HAL_FLASH_Program+0xd0>
 80028ce:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_FLASH_Program+0xd8>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028d8:	f000 f8d4 	bl	8002a84 <FLASH_WaitForLastOperation>
 80028dc:	4603      	mov	r3, r0
 80028de:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d144      	bne.n	8002970 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d102      	bne.n	80028f2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80028ec:	2301      	movs	r3, #1
 80028ee:	757b      	strb	r3, [r7, #21]
 80028f0:	e007      	b.n	8002902 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d102      	bne.n	80028fe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80028f8:	2302      	movs	r3, #2
 80028fa:	757b      	strb	r3, [r7, #21]
 80028fc:	e001      	b.n	8002902 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80028fe:	2304      	movs	r3, #4
 8002900:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002902:	2300      	movs	r3, #0
 8002904:	75bb      	strb	r3, [r7, #22]
 8002906:	e02d      	b.n	8002964 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002908:	7dbb      	ldrb	r3, [r7, #22]
 800290a:	005a      	lsls	r2, r3, #1
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	eb02 0c03 	add.w	ip, r2, r3
 8002912:	7dbb      	ldrb	r3, [r7, #22]
 8002914:	0119      	lsls	r1, r3, #4
 8002916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800291a:	f1c1 0620 	rsb	r6, r1, #32
 800291e:	f1a1 0020 	sub.w	r0, r1, #32
 8002922:	fa22 f401 	lsr.w	r4, r2, r1
 8002926:	fa03 f606 	lsl.w	r6, r3, r6
 800292a:	4334      	orrs	r4, r6
 800292c:	fa23 f000 	lsr.w	r0, r3, r0
 8002930:	4304      	orrs	r4, r0
 8002932:	fa23 f501 	lsr.w	r5, r3, r1
 8002936:	b2a3      	uxth	r3, r4
 8002938:	4619      	mov	r1, r3
 800293a:	4660      	mov	r0, ip
 800293c:	f000 f886 	bl	8002a4c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002940:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002944:	f000 f89e 	bl	8002a84 <FLASH_WaitForLastOperation>
 8002948:	4603      	mov	r3, r0
 800294a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_FLASH_Program+0xdc>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <HAL_FLASH_Program+0xdc>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002958:	7dfb      	ldrb	r3, [r7, #23]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800295e:	7dbb      	ldrb	r3, [r7, #22]
 8002960:	3301      	adds	r3, #1
 8002962:	75bb      	strb	r3, [r7, #22]
 8002964:	7dba      	ldrb	r2, [r7, #22]
 8002966:	7d7b      	ldrb	r3, [r7, #21]
 8002968:	429a      	cmp	r2, r3
 800296a:	d3cd      	bcc.n	8002908 <HAL_FLASH_Program+0x60>
 800296c:	e000      	b.n	8002970 <HAL_FLASH_Program+0xc8>
      {
        break;
 800296e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_FLASH_Program+0xd8>)
 8002972:	2200      	movs	r2, #0
 8002974:	761a      	strb	r2, [r3, #24]

  return status;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
}
 8002978:	4618      	mov	r0, r3
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002980:	20000380 	.word	0x20000380
 8002984:	40022000 	.word	0x40022000

08002988 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <HAL_FLASH_Unlock+0x40>)
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00d      	beq.n	80029ba <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_FLASH_Unlock+0x40>)
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <HAL_FLASH_Unlock+0x44>)
 80029a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_FLASH_Unlock+0x40>)
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_FLASH_Unlock+0x48>)
 80029a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_FLASH_Unlock+0x40>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80029ba:	79fb      	ldrb	r3, [r7, #7]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000
 80029cc:	45670123 	.word	0x45670123
 80029d0:	cdef89ab 	.word	0xcdef89ab

080029d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_FLASH_Lock+0x1c>)
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_FLASH_Lock+0x1c>)
 80029de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40022000 	.word	0x40022000

080029f4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_FLASH_OB_Unlock+0x2c>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_FLASH_OB_Unlock+0x2c>)
 8002a06:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_FLASH_OB_Unlock+0x30>)
 8002a08:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_FLASH_OB_Unlock+0x2c>)
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <HAL_FLASH_OB_Unlock+0x34>)
 8002a0e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002a10:	2300      	movs	r3, #0
 8002a12:	e000      	b.n	8002a16 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40022000 	.word	0x40022000
 8002a24:	45670123 	.word	0x45670123
 8002a28:	cdef89ab 	.word	0xcdef89ab

08002a2c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_FLASH_OB_Lock+0x1c>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_FLASH_OB_Lock+0x1c>)
 8002a36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a3a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40022000 	.word	0x40022000

08002a4c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <FLASH_Program_HalfWord+0x30>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <FLASH_Program_HalfWord+0x34>)
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <FLASH_Program_HalfWord+0x34>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	887a      	ldrh	r2, [r7, #2]
 8002a6e:	801a      	strh	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000380 	.word	0x20000380
 8002a80:	40022000 	.word	0x40022000

08002a84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7fe ffa0 	bl	80019d0 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a92:	e010      	b.n	8002ab6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d00c      	beq.n	8002ab6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <FLASH_WaitForLastOperation+0x2e>
 8002aa2:	f7fe ff95 	bl	80019d0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d201      	bcs.n	8002ab6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e025      	b.n	8002b02 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <FLASH_WaitForLastOperation+0x88>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1e8      	bne.n	8002a94 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <FLASH_WaitForLastOperation+0x88>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <FLASH_WaitForLastOperation+0x88>)
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <FLASH_WaitForLastOperation+0x88>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <FLASH_WaitForLastOperation+0x88>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <FLASH_WaitForLastOperation+0x88>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002af8:	f000 f80a 	bl	8002b10 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40022000 	.word	0x40022000

08002b10 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002b1a:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <FLASH_SetErrorCode+0x98>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002b26:	4b21      	ldr	r3, [pc, #132]	; (8002bac <FLASH_SetErrorCode+0x9c>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <FLASH_SetErrorCode+0x9c>)
 8002b30:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f043 0310 	orr.w	r3, r3, #16
 8002b38:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <FLASH_SetErrorCode+0x98>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002b46:	4b19      	ldr	r3, [pc, #100]	; (8002bac <FLASH_SetErrorCode+0x9c>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <FLASH_SetErrorCode+0x9c>)
 8002b50:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <FLASH_SetErrorCode+0x98>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <FLASH_SetErrorCode+0x9c>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <FLASH_SetErrorCode+0x9c>)
 8002b70:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <FLASH_SetErrorCode+0x98>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <FLASH_SetErrorCode+0x98>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f240 1201 	movw	r2, #257	; 0x101
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d106      	bne.n	8002b96 <FLASH_SetErrorCode+0x86>
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <FLASH_SetErrorCode+0x98>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	4a06      	ldr	r2, [pc, #24]	; (8002ba8 <FLASH_SetErrorCode+0x98>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	61d3      	str	r3, [r2, #28]
}  
 8002b94:	e002      	b.n	8002b9c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <FLASH_SetErrorCode+0x98>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	60d3      	str	r3, [r2, #12]
}  
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	20000380 	.word	0x20000380

08002bb0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_FLASHEx_Erase+0xd0>)
 8002bc4:	7e1b      	ldrb	r3, [r3, #24]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_FLASHEx_Erase+0x1e>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e053      	b.n	8002c76 <HAL_FLASHEx_Erase+0xc6>
 8002bce:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <HAL_FLASHEx_Erase+0xd0>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d116      	bne.n	8002c0a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002bdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002be0:	f7ff ff50 	bl	8002a84 <FLASH_WaitForLastOperation>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d141      	bne.n	8002c6e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002bea:	2001      	movs	r0, #1
 8002bec:	f000 f84c 	bl	8002c88 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bf4:	f7ff ff46 	bl	8002a84 <FLASH_WaitForLastOperation>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002bfc:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <HAL_FLASHEx_Erase+0xd4>)
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <HAL_FLASHEx_Erase+0xd4>)
 8002c02:	f023 0304 	bic.w	r3, r3, #4
 8002c06:	6113      	str	r3, [r2, #16]
 8002c08:	e031      	b.n	8002c6e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002c0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c0e:	f7ff ff39 	bl	8002a84 <FLASH_WaitForLastOperation>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d12a      	bne.n	8002c6e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	e019      	b.n	8002c5c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002c28:	68b8      	ldr	r0, [r7, #8]
 8002c2a:	f000 f849 	bl	8002cc0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c32:	f7ff ff27 	bl	8002a84 <FLASH_WaitForLastOperation>
 8002c36:	4603      	mov	r3, r0
 8002c38:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_FLASHEx_Erase+0xd4>)
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <HAL_FLASHEx_Erase+0xd4>)
 8002c40:	f023 0302 	bic.w	r3, r3, #2
 8002c44:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	601a      	str	r2, [r3, #0]
            break;
 8002c52:	e00c      	b.n	8002c6e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c5a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	029a      	lsls	r2, r3, #10
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d3dc      	bcc.n	8002c28 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <HAL_FLASHEx_Erase+0xd0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	761a      	strb	r2, [r3, #24]

  return status;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000380 	.word	0x20000380
 8002c84:	40022000 	.word	0x40022000

08002c88 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <FLASH_MassErase+0x30>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <FLASH_MassErase+0x34>)
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <FLASH_MassErase+0x34>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <FLASH_MassErase+0x34>)
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	4a05      	ldr	r2, [pc, #20]	; (8002cbc <FLASH_MassErase+0x34>)
 8002ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cac:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	20000380 	.word	0x20000380
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <FLASH_PageErase+0x38>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <FLASH_PageErase+0x3c>)
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <FLASH_PageErase+0x3c>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <FLASH_PageErase+0x3c>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <FLASH_PageErase+0x3c>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <FLASH_PageErase+0x3c>)
 8002ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cea:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000380 	.word	0x20000380
 8002cfc:	40022000 	.word	0x40022000

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b08b      	sub	sp, #44	; 0x2c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d12:	e169      	b.n	8002fe8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d14:	2201      	movs	r2, #1
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f040 8158 	bne.w	8002fe2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a9a      	ldr	r2, [pc, #616]	; (8002fa0 <HAL_GPIO_Init+0x2a0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d05e      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d3c:	4a98      	ldr	r2, [pc, #608]	; (8002fa0 <HAL_GPIO_Init+0x2a0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d875      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d42:	4a98      	ldr	r2, [pc, #608]	; (8002fa4 <HAL_GPIO_Init+0x2a4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d058      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d48:	4a96      	ldr	r2, [pc, #600]	; (8002fa4 <HAL_GPIO_Init+0x2a4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d86f      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d4e:	4a96      	ldr	r2, [pc, #600]	; (8002fa8 <HAL_GPIO_Init+0x2a8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d052      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d54:	4a94      	ldr	r2, [pc, #592]	; (8002fa8 <HAL_GPIO_Init+0x2a8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d869      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d5a:	4a94      	ldr	r2, [pc, #592]	; (8002fac <HAL_GPIO_Init+0x2ac>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d04c      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d60:	4a92      	ldr	r2, [pc, #584]	; (8002fac <HAL_GPIO_Init+0x2ac>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d863      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d66:	4a92      	ldr	r2, [pc, #584]	; (8002fb0 <HAL_GPIO_Init+0x2b0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d046      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d6c:	4a90      	ldr	r2, [pc, #576]	; (8002fb0 <HAL_GPIO_Init+0x2b0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d85d      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d72:	2b12      	cmp	r3, #18
 8002d74:	d82a      	bhi.n	8002dcc <HAL_GPIO_Init+0xcc>
 8002d76:	2b12      	cmp	r3, #18
 8002d78:	d859      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_GPIO_Init+0x80>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002dfb 	.word	0x08002dfb
 8002d84:	08002dd5 	.word	0x08002dd5
 8002d88:	08002de7 	.word	0x08002de7
 8002d8c:	08002e29 	.word	0x08002e29
 8002d90:	08002e2f 	.word	0x08002e2f
 8002d94:	08002e2f 	.word	0x08002e2f
 8002d98:	08002e2f 	.word	0x08002e2f
 8002d9c:	08002e2f 	.word	0x08002e2f
 8002da0:	08002e2f 	.word	0x08002e2f
 8002da4:	08002e2f 	.word	0x08002e2f
 8002da8:	08002e2f 	.word	0x08002e2f
 8002dac:	08002e2f 	.word	0x08002e2f
 8002db0:	08002e2f 	.word	0x08002e2f
 8002db4:	08002e2f 	.word	0x08002e2f
 8002db8:	08002e2f 	.word	0x08002e2f
 8002dbc:	08002e2f 	.word	0x08002e2f
 8002dc0:	08002e2f 	.word	0x08002e2f
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002df1 	.word	0x08002df1
 8002dcc:	4a79      	ldr	r2, [pc, #484]	; (8002fb4 <HAL_GPIO_Init+0x2b4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dd2:	e02c      	b.n	8002e2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	623b      	str	r3, [r7, #32]
          break;
 8002dda:	e029      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	3304      	adds	r3, #4
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e024      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	3308      	adds	r3, #8
 8002dec:	623b      	str	r3, [r7, #32]
          break;
 8002dee:	e01f      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	330c      	adds	r3, #12
 8002df6:	623b      	str	r3, [r7, #32]
          break;
 8002df8:	e01a      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e02:	2304      	movs	r3, #4
 8002e04:	623b      	str	r3, [r7, #32]
          break;
 8002e06:	e013      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e10:	2308      	movs	r3, #8
 8002e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	611a      	str	r2, [r3, #16]
          break;
 8002e1a:	e009      	b.n	8002e30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	615a      	str	r2, [r3, #20]
          break;
 8002e26:	e003      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
          break;
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          break;
 8002e2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2bff      	cmp	r3, #255	; 0xff
 8002e34:	d801      	bhi.n	8002e3a <HAL_GPIO_Init+0x13a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_Init+0x13e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2bff      	cmp	r3, #255	; 0xff
 8002e44:	d802      	bhi.n	8002e4c <HAL_GPIO_Init+0x14c>
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x152>
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	3b08      	subs	r3, #8
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	210f      	movs	r1, #15
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	6a39      	ldr	r1, [r7, #32]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80b1 	beq.w	8002fe2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e80:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	4a4c      	ldr	r2, [pc, #304]	; (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6193      	str	r3, [r2, #24]
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e98:	4a48      	ldr	r2, [pc, #288]	; (8002fbc <HAL_GPIO_Init+0x2bc>)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	220f      	movs	r2, #15
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a40      	ldr	r2, [pc, #256]	; (8002fc0 <HAL_GPIO_Init+0x2c0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_GPIO_Init+0x1ec>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3f      	ldr	r2, [pc, #252]	; (8002fc4 <HAL_GPIO_Init+0x2c4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00d      	beq.n	8002ee8 <HAL_GPIO_Init+0x1e8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3e      	ldr	r2, [pc, #248]	; (8002fc8 <HAL_GPIO_Init+0x2c8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <HAL_GPIO_Init+0x1e4>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3d      	ldr	r2, [pc, #244]	; (8002fcc <HAL_GPIO_Init+0x2cc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d101      	bne.n	8002ee0 <HAL_GPIO_Init+0x1e0>
 8002edc:	2303      	movs	r3, #3
 8002ede:	e006      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	e004      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e002      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002eec:	2300      	movs	r3, #0
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	f002 0203 	and.w	r2, r2, #3
 8002ef4:	0092      	lsls	r2, r2, #2
 8002ef6:	4093      	lsls	r3, r2
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002efe:	492f      	ldr	r1, [pc, #188]	; (8002fbc <HAL_GPIO_Init+0x2bc>)
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	3302      	adds	r3, #2
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d006      	beq.n	8002f26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	492c      	ldr	r1, [pc, #176]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	4928      	ldr	r1, [pc, #160]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f40:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4922      	ldr	r1, [pc, #136]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
 8002f4c:	e006      	b.n	8002f5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	491e      	ldr	r1, [pc, #120]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	4918      	ldr	r1, [pc, #96]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	608b      	str	r3, [r1, #8]
 8002f74:	e006      	b.n	8002f84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	4914      	ldr	r1, [pc, #80]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d021      	beq.n	8002fd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
 8002f9c:	e021      	b.n	8002fe2 <HAL_GPIO_Init+0x2e2>
 8002f9e:	bf00      	nop
 8002fa0:	10320000 	.word	0x10320000
 8002fa4:	10310000 	.word	0x10310000
 8002fa8:	10220000 	.word	0x10220000
 8002fac:	10210000 	.word	0x10210000
 8002fb0:	10120000 	.word	0x10120000
 8002fb4:	10110000 	.word	0x10110000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40010000 	.word	0x40010000
 8002fc0:	40010800 	.word	0x40010800
 8002fc4:	40010c00 	.word	0x40010c00
 8002fc8:	40011000 	.word	0x40011000
 8002fcc:	40011400 	.word	0x40011400
 8002fd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	4909      	ldr	r1, [pc, #36]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f47f ae8e 	bne.w	8002d14 <HAL_GPIO_Init+0x14>
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	372c      	adds	r7, #44	; 0x2c
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40010400 	.word	0x40010400

08003008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	e001      	b.n	800302a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	807b      	strh	r3, [r7, #2]
 8003042:	4613      	mov	r3, r2
 8003044:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003046:	787b      	ldrb	r3, [r7, #1]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304c:	887a      	ldrh	r2, [r7, #2]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003052:	e003      	b.n	800305c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003054:	887b      	ldrh	r3, [r7, #2]
 8003056:	041a      	lsls	r2, r3, #16
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	611a      	str	r2, [r3, #16]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003078:	887a      	ldrh	r2, [r7, #2]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	041a      	lsls	r2, r3, #16
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	43d9      	mvns	r1, r3
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	400b      	ands	r3, r1
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	611a      	str	r2, [r3, #16]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	b08b      	sub	sp, #44	; 0x2c
 800309c:	af06      	add	r7, sp, #24
 800309e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0fd      	b.n	80032a6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f007 fa46 	bl	800a550 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2203      	movs	r2, #3
 80030c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 f86f 	bl	80061b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	687e      	ldr	r6, [r7, #4]
 80030de:	466d      	mov	r5, sp
 80030e0:	f106 0410 	add.w	r4, r6, #16
 80030e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	1d33      	adds	r3, r6, #4
 80030ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f0:	6838      	ldr	r0, [r7, #0]
 80030f2:	f003 f839 	bl	8006168 <USB_CoreInit>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0ce      	b.n	80032a6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f003 f86a 	bl	80061e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
 8003118:	e04c      	b.n	80031b4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	3301      	adds	r3, #1
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	b298      	uxth	r0, r3
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	440b      	add	r3, r1
 8003156:	3336      	adds	r3, #54	; 0x36
 8003158:	4602      	mov	r2, r0
 800315a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	3303      	adds	r3, #3
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	3338      	adds	r3, #56	; 0x38
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	440b      	add	r3, r1
 8003194:	333c      	adds	r3, #60	; 0x3c
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	440b      	add	r3, r1
 80031a8:	3340      	adds	r3, #64	; 0x40
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	3301      	adds	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d3ad      	bcc.n	800311a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	e044      	b.n	800324e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	440b      	add	r3, r1
 8003214:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	3301      	adds	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d3b5      	bcc.n	80031c4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	687e      	ldr	r6, [r7, #4]
 8003260:	466d      	mov	r5, sp
 8003262:	f106 0410 	add.w	r4, r6, #16
 8003266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	602b      	str	r3, [r5, #0]
 800326e:	1d33      	adds	r3, r6, #4
 8003270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003272:	6838      	ldr	r0, [r7, #0]
 8003274:	f002 ffc4 	bl	8006200 <USB_DevInit>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00d      	b.n	80032a6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f005 fc76 	bl	8008b90 <USB_DevDisconnect>

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_PCD_Start+0x16>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e016      	b.n	80032f2 <HAL_PCD_Start+0x44>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 ff59 	bl	8006188 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80032d6:	2101      	movs	r1, #1
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f007 fb90 	bl	800a9fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f005 fc4a 	bl	8008b7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b088      	sub	sp, #32
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f005 fc4c 	bl	8008ba4 <USB_ReadInterrupts>
 800330c:	4603      	mov	r3, r0
 800330e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003316:	d102      	bne.n	800331e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fb48 	bl	80039ae <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f005 fc3e 	bl	8008ba4 <USB_ReadInterrupts>
 8003328:	4603      	mov	r3, r0
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d112      	bne.n	800335a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800333c:	b29a      	uxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003346:	b292      	uxth	r2, r2
 8003348:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f007 f97a 	bl	800a646 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003352:	2100      	movs	r1, #0
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f923 	bl	80035a0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f005 fc20 	bl	8008ba4 <USB_ReadInterrupts>
 8003364:	4603      	mov	r3, r0
 8003366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800336e:	d10b      	bne.n	8003388 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003382:	b292      	uxth	r2, r2
 8003384:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f005 fc09 	bl	8008ba4 <USB_ReadInterrupts>
 8003392:	4603      	mov	r3, r0
 8003394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339c:	d10b      	bne.n	80033b6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b0:	b292      	uxth	r2, r2
 80033b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f005 fbf2 	bl	8008ba4 <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ca:	d126      	bne.n	800341a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0204 	bic.w	r2, r2, #4
 80033de:	b292      	uxth	r2, r2
 80033e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0208 	bic.w	r2, r2, #8
 80033f6:	b292      	uxth	r2, r2
 80033f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f007 f95b 	bl	800a6b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800340a:	b29a      	uxth	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003414:	b292      	uxth	r2, r2
 8003416:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f005 fbc0 	bl	8008ba4 <USB_ReadInterrupts>
 8003424:	4603      	mov	r3, r0
 8003426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800342e:	f040 8082 	bne.w	8003536 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003432:	2300      	movs	r3, #0
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e010      	b.n	800345a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	7ffb      	ldrb	r3, [r7, #31]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	441a      	add	r2, r3
 8003444:	7ffb      	ldrb	r3, [r7, #31]
 8003446:	8812      	ldrh	r2, [r2, #0]
 8003448:	b292      	uxth	r2, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	3320      	adds	r3, #32
 800344e:	443b      	add	r3, r7
 8003450:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003454:	7ffb      	ldrb	r3, [r7, #31]
 8003456:	3301      	adds	r3, #1
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	2b07      	cmp	r3, #7
 800345e:	d9eb      	bls.n	8003438 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	b292      	uxth	r2, r2
 8003474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003480:	b29a      	uxth	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	b292      	uxth	r2, r2
 800348c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003490:	bf00      	nop
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800349a:	b29b      	uxth	r3, r3
 800349c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f6      	beq.n	8003492 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b6:	b292      	uxth	r2, r2
 80034b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80034bc:	2300      	movs	r3, #0
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e00f      	b.n	80034e2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80034c2:	7ffb      	ldrb	r3, [r7, #31]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	4611      	mov	r1, r2
 80034ca:	7ffa      	ldrb	r2, [r7, #31]
 80034cc:	0092      	lsls	r2, r2, #2
 80034ce:	440a      	add	r2, r1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	3320      	adds	r3, #32
 80034d4:	443b      	add	r3, r7
 80034d6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80034da:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80034dc:	7ffb      	ldrb	r3, [r7, #31]
 80034de:	3301      	adds	r3, #1
 80034e0:	77fb      	strb	r3, [r7, #31]
 80034e2:	7ffb      	ldrb	r3, [r7, #31]
 80034e4:	2b07      	cmp	r3, #7
 80034e6:	d9ec      	bls.n	80034c2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0208 	orr.w	r2, r2, #8
 80034fa:	b292      	uxth	r2, r2
 80034fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003512:	b292      	uxth	r2, r2
 8003514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0204 	orr.w	r2, r2, #4
 800352a:	b292      	uxth	r2, r2
 800352c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f007 f8a7 	bl	800a684 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f005 fb32 	bl	8008ba4 <USB_ReadInterrupts>
 8003540:	4603      	mov	r3, r0
 8003542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354a:	d10e      	bne.n	800356a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003554:	b29a      	uxth	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800355e:	b292      	uxth	r2, r2
 8003560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f007 f860 	bl	800a62a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f005 fb18 	bl	8008ba4 <USB_ReadInterrupts>
 8003574:	4603      	mov	r3, r0
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357e:	d10b      	bne.n	8003598 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003588:	b29a      	uxth	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003592:	b292      	uxth	r2, r2
 8003594:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003598:	bf00      	nop
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_PCD_SetAddress+0x1a>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e013      	b.n	80035e2 <HAL_PCD_SetAddress+0x42>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f005 fabf 	bl	8008b56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	4608      	mov	r0, r1
 80035f4:	4611      	mov	r1, r2
 80035f6:	461a      	mov	r2, r3
 80035f8:	4603      	mov	r3, r0
 80035fa:	70fb      	strb	r3, [r7, #3]
 80035fc:	460b      	mov	r3, r1
 80035fe:	803b      	strh	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360c:	2b00      	cmp	r3, #0
 800360e:	da0e      	bge.n	800362e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	705a      	strb	r2, [r3, #1]
 800362c:	e00e      	b.n	800364c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 0207 	and.w	r2, r3, #7
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003658:	883a      	ldrh	r2, [r7, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	78ba      	ldrb	r2, [r7, #2]
 8003662:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d004      	beq.n	8003676 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003676:	78bb      	ldrb	r3, [r7, #2]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d102      	bne.n	8003682 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_PCD_EP_Open+0xa6>
 800368c:	2302      	movs	r3, #2
 800368e:	e00e      	b.n	80036ae <HAL_PCD_EP_Open+0xc4>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68f9      	ldr	r1, [r7, #12]
 800369e:	4618      	mov	r0, r3
 80036a0:	f002 fdce 	bl	8006240 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80036ac:	7afb      	ldrb	r3, [r7, #11]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	da0e      	bge.n	80036e8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	705a      	strb	r2, [r3, #1]
 80036e6:	e00e      	b.n	8003706 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 0207 	and.w	r2, r3, #7
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_PCD_EP_Close+0x6a>
 800371c:	2302      	movs	r3, #2
 800371e:	e00e      	b.n	800373e <HAL_PCD_EP_Close+0x88>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	4618      	mov	r0, r3
 8003730:	f003 f8f0 	bl	8006914 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	460b      	mov	r3, r1
 8003754:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003756:	7afb      	ldrb	r3, [r7, #11]
 8003758:	f003 0207 	and.w	r2, r3, #7
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2200      	movs	r2, #0
 800377e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2200      	movs	r2, #0
 8003784:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003786:	7afb      	ldrb	r3, [r7, #11]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	b2da      	uxtb	r2, r3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003792:	7afb      	ldrb	r3, [r7, #11]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6979      	ldr	r1, [r7, #20]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f003 faa2 	bl	8006cec <USB_EPStartXfer>
 80037a8:	e005      	b.n	80037b6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6979      	ldr	r1, [r7, #20]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f003 fa9b 	bl	8006cec <USB_EPStartXfer>
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	460b      	mov	r3, r1
 80037ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d0:	7afb      	ldrb	r3, [r7, #11]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2201      	movs	r2, #1
 800380a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800380c:	7afb      	ldrb	r3, [r7, #11]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	b2da      	uxtb	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003818:	7afb      	ldrb	r3, [r7, #11]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6979      	ldr	r1, [r7, #20]
 8003828:	4618      	mov	r0, r3
 800382a:	f003 fa5f 	bl	8006cec <USB_EPStartXfer>
 800382e:	e005      	b.n	800383c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6979      	ldr	r1, [r7, #20]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fa58 	bl	8006cec <USB_EPStartXfer>
  }

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 0207 	and.w	r2, r3, #7
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d901      	bls.n	8003864 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e04c      	b.n	80038fe <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003868:	2b00      	cmp	r3, #0
 800386a:	da0e      	bge.n	800388a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	705a      	strb	r2, [r3, #1]
 8003888:	e00c      	b.n	80038a4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4413      	add	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_PCD_EP_SetStall+0x7e>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e01c      	b.n	80038fe <HAL_PCD_EP_SetStall+0xb8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f005 f842 	bl	800895c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f005 f967 	bl	8008bc2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	f003 020f 	and.w	r2, r3, #15
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	429a      	cmp	r2, r3
 800391e:	d901      	bls.n	8003924 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e040      	b.n	80039a6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003928:	2b00      	cmp	r3, #0
 800392a:	da0e      	bge.n	800394a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	705a      	strb	r2, [r3, #1]
 8003948:	e00e      	b.n	8003968 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 0207 	and.w	r2, r3, #7
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_PCD_EP_ClrStall+0x82>
 8003984:	2302      	movs	r3, #2
 8003986:	e00e      	b.n	80039a6 <HAL_PCD_EP_ClrStall+0xa0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68f9      	ldr	r1, [r7, #12]
 8003996:	4618      	mov	r0, r3
 8003998:	f005 f830 	bl	80089fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b08e      	sub	sp, #56	; 0x38
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039b6:	e2ec      	b.n	8003f92 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80039c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80039ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 8161 	bne.w	8003c9a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80039d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d152      	bne.n	8003a88 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	81fb      	strh	r3, [r7, #14]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	89fb      	ldrh	r3, [r7, #14]
 80039fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3328      	adds	r3, #40	; 0x28
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	3302      	adds	r3, #2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	441a      	add	r2, r3
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a46:	2100      	movs	r1, #0
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f006 fdd4 	bl	800a5f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 829b 	beq.w	8003f92 <PCD_EP_ISR_Handler+0x5e4>
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f040 8296 	bne.w	8003f92 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a86:	e284      	b.n	8003f92 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d034      	beq.n	8003b0c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3306      	adds	r3, #6
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f005 f8be 	bl	8008c62 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003af2:	4013      	ands	r3, r2
 8003af4:	823b      	strh	r3, [r7, #16]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	8a3a      	ldrh	r2, [r7, #16]
 8003afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b00:	b292      	uxth	r2, r2
 8003b02:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f006 fd49 	bl	800a59c <HAL_PCD_SetupStageCallback>
 8003b0a:	e242      	b.n	8003f92 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b0c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f280 823e 	bge.w	8003f92 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b22:	4013      	ands	r3, r2
 8003b24:	83bb      	strh	r3, [r7, #28]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	8bba      	ldrh	r2, [r7, #28]
 8003b2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b30:	b292      	uxth	r2, r2
 8003b32:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	3306      	adds	r3, #6
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d019      	beq.n	8003b9c <PCD_EP_ISR_Handler+0x1ee>
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	6959      	ldr	r1, [r3, #20]
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f005 f86e 	bl	8008c62 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	441a      	add	r2, r3
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b94:	2100      	movs	r1, #0
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f006 fd12 	bl	800a5c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f040 81f2 	bne.w	8003f92 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d112      	bne.n	8003bfc <PCD_EP_ISR_Handler+0x24e>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	801a      	strh	r2, [r3, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	e02f      	b.n	8003c5c <PCD_EP_ISR_Handler+0x2ae>
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b3e      	cmp	r3, #62	; 0x3e
 8003c02:	d813      	bhi.n	8003c2c <PCD_EP_ISR_Handler+0x27e>
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <PCD_EP_ISR_Handler+0x270>
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	029b      	lsls	r3, r3, #10
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	e017      	b.n	8003c5c <PCD_EP_ISR_Handler+0x2ae>
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	633b      	str	r3, [r7, #48]	; 0x30
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <PCD_EP_ISR_Handler+0x298>
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	3b01      	subs	r3, #1
 8003c44:	633b      	str	r3, [r7, #48]	; 0x30
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	029b      	lsls	r3, r3, #10
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6c:	827b      	strh	r3, [r7, #18]
 8003c6e:	8a7b      	ldrh	r3, [r7, #18]
 8003c70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c74:	827b      	strh	r3, [r7, #18]
 8003c76:	8a7b      	ldrh	r3, [r7, #18]
 8003c78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c7c:	827b      	strh	r3, [r7, #18]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	8a7b      	ldrh	r3, [r7, #18]
 8003c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	8013      	strh	r3, [r2, #0]
 8003c98:	e17b      	b.n	8003f92 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f280 80ea 	bge.w	8003e8a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ccc:	4013      	ands	r3, r2
 8003cce:	853b      	strh	r3, [r7, #40]	; 0x28
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ce8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	7b1b      	ldrb	r3, [r3, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d122      	bne.n	8003d4c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	3306      	adds	r3, #6
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d2e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003d30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8087 	beq.w	8003e46 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	6959      	ldr	r1, [r3, #20]
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	88da      	ldrh	r2, [r3, #6]
 8003d44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d46:	f004 ff8c 	bl	8008c62 <USB_ReadPMA>
 8003d4a:	e07c      	b.n	8003e46 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	78db      	ldrb	r3, [r3, #3]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d108      	bne.n	8003d66 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003d54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d56:	461a      	mov	r2, r3
 8003d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f927 	bl	8003fae <HAL_PCD_EP_DB_Receive>
 8003d60:	4603      	mov	r3, r0
 8003d62:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d64:	e06f      	b.n	8003e46 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d80:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	441a      	add	r2, r3
 8003d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d021      	beq.n	8003e04 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003dea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d02a      	beq.n	8003e46 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	6959      	ldr	r1, [r3, #20]
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	891a      	ldrh	r2, [r3, #8]
 8003dfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dfe:	f004 ff30 	bl	8008c62 <USB_ReadPMA>
 8003e02:	e020      	b.n	8003e46 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	3306      	adds	r3, #6
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e2c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003e2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	6959      	ldr	r1, [r3, #20]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	895a      	ldrh	r2, [r3, #10]
 8003e40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e42:	f004 ff0e 	bl	8008c62 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	69da      	ldr	r2, [r3, #28]
 8003e4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e4c:	441a      	add	r2, r3
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e58:	441a      	add	r2, r3
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <PCD_EP_ISR_Handler+0x4c2>
 8003e66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d206      	bcs.n	8003e7e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f006 fba2 	bl	800a5c0 <HAL_PCD_DataOutStageCallback>
 8003e7c:	e005      	b.n	8003e8a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e84:	4618      	mov	r0, r3
 8003e86:	f002 ff31 	bl	8006cec <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003e8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d07e      	beq.n	8003f92 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003e94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	843b      	strh	r3, [r7, #32]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	441a      	add	r2, r3
 8003ed2:	8c3b      	ldrh	r3, [r7, #32]
 8003ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	78db      	ldrb	r3, [r3, #3]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d00c      	beq.n	8003f02 <PCD_EP_ISR_Handler+0x554>
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	78db      	ldrb	r3, [r3, #3]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d146      	bne.n	8003f86 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003ef8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d141      	bne.n	8003f86 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	3302      	adds	r3, #2
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f2a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	699a      	ldr	r2, [r3, #24]
 8003f30:	8bfb      	ldrh	r3, [r7, #30]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d906      	bls.n	8003f44 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	8bfb      	ldrh	r3, [r7, #30]
 8003f3c:	1ad2      	subs	r2, r2, r3
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	619a      	str	r2, [r3, #24]
 8003f42:	e002      	b.n	8003f4a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	2200      	movs	r2, #0
 8003f48:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f006 fb4c 	bl	800a5f6 <HAL_PCD_DataInStageCallback>
 8003f5e:	e018      	b.n	8003f92 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	8bfb      	ldrh	r3, [r7, #30]
 8003f66:	441a      	add	r2, r3
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	8bfb      	ldrh	r3, [r7, #30]
 8003f72:	441a      	add	r2, r3
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f002 feb4 	bl	8006cec <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003f84:	e005      	b.n	8003f92 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f91b 	bl	80041c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	b21b      	sxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f6ff ad0a 	blt.w	80039b8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3738      	adds	r7, #56	; 0x38
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b088      	sub	sp, #32
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d07e      	beq.n	80040c4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	8b7b      	ldrh	r3, [r7, #26]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d306      	bcc.n	8004008 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	8b7b      	ldrh	r3, [r7, #26]
 8004000:	1ad2      	subs	r2, r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	619a      	str	r2, [r3, #24]
 8004006:	e002      	b.n	800400e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d123      	bne.n	800405e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	b29b      	uxth	r3, r3
 8004028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800402c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004030:	833b      	strh	r3, [r7, #24]
 8004032:	8b3b      	ldrh	r3, [r7, #24]
 8004034:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004038:	833b      	strh	r3, [r7, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	8b3b      	ldrh	r3, [r7, #24]
 800404a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800404e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405a:	b29b      	uxth	r3, r3
 800405c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01f      	beq.n	80040a8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004082:	82fb      	strh	r3, [r7, #22]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	441a      	add	r2, r3
 8004092:	8afb      	ldrh	r3, [r7, #22]
 8004094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040a8:	8b7b      	ldrh	r3, [r7, #26]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8087 	beq.w	80041be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6959      	ldr	r1, [r3, #20]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	891a      	ldrh	r2, [r3, #8]
 80040bc:	8b7b      	ldrh	r3, [r7, #26]
 80040be:	f004 fdd0 	bl	8008c62 <USB_ReadPMA>
 80040c2:	e07c      	b.n	80041be <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	3306      	adds	r3, #6
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	8b7b      	ldrh	r3, [r7, #26]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d306      	bcc.n	8004106 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	699a      	ldr	r2, [r3, #24]
 80040fc:	8b7b      	ldrh	r3, [r7, #26]
 80040fe:	1ad2      	subs	r2, r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	619a      	str	r2, [r3, #24]
 8004104:	e002      	b.n	800410c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d123      	bne.n	800415c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	83fb      	strh	r3, [r7, #30]
 8004130:	8bfb      	ldrh	r3, [r7, #30]
 8004132:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004136:	83fb      	strh	r3, [r7, #30]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	441a      	add	r2, r3
 8004146:	8bfb      	ldrh	r3, [r7, #30]
 8004148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004158:	b29b      	uxth	r3, r3
 800415a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d11f      	bne.n	80041a6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004180:	83bb      	strh	r3, [r7, #28]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	441a      	add	r2, r3
 8004190:	8bbb      	ldrh	r3, [r7, #28]
 8004192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041a6:	8b7b      	ldrh	r3, [r7, #26]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	6959      	ldr	r1, [r3, #20]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	895a      	ldrh	r2, [r3, #10]
 80041b8:	8b7b      	ldrh	r3, [r7, #26]
 80041ba:	f004 fd52 	bl	8008c62 <USB_ReadPMA>
    }
  }

  return count;
 80041be:	8b7b      	ldrh	r3, [r7, #26]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b0a2      	sub	sp, #136	; 0x88
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 81c7 	beq.w	8004570 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4413      	add	r3, r2
 80041f6:	3302      	adds	r3, #2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800420a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004216:	429a      	cmp	r2, r3
 8004218:	d907      	bls.n	800422a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	619a      	str	r2, [r3, #24]
 8004228:	e002      	b.n	8004230 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f040 80b9 	bne.w	80043ac <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d126      	bne.n	8004290 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004250:	b29b      	uxth	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	4413      	add	r3, r2
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	011a      	lsls	r2, r3, #4
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	4413      	add	r3, r2
 8004264:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004274:	b29a      	uxth	r2, r3
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004288:	b29a      	uxth	r2, r3
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	e01a      	b.n	80042c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d116      	bne.n	80042c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	633b      	str	r3, [r7, #48]	; 0x30
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	4413      	add	r3, r2
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	011a      	lsls	r2, r3, #4
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	4413      	add	r3, r2
 80042ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c2:	2200      	movs	r2, #0
 80042c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d126      	bne.n	8004322 <HAL_PCD_EP_DB_Transmit+0x15a>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4413      	add	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	011a      	lsls	r2, r3, #4
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	4413      	add	r3, r2
 80042f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004306:	b29a      	uxth	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800431a:	b29a      	uxth	r2, r3
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	e017      	b.n	8004352 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	785b      	ldrb	r3, [r3, #1]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d113      	bne.n	8004352 <HAL_PCD_EP_DB_Transmit+0x18a>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004332:	b29b      	uxth	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	4413      	add	r3, r2
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	011a      	lsls	r2, r3, #4
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	4413      	add	r3, r2
 8004346:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2200      	movs	r2, #0
 8004350:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f006 f94c 	bl	800a5f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 82d4 	beq.w	8004912 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	827b      	strh	r3, [r7, #18]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	441a      	add	r2, r3
 8004394:	8a7b      	ldrh	r3, [r7, #18]
 8004396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	8013      	strh	r3, [r2, #0]
 80043aa:	e2b2      	b.n	8004912 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d021      	beq.n	80043fa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80043e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 8286 	bne.w	8004912 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800440e:	441a      	add	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800441c:	441a      	add	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6a1a      	ldr	r2, [r3, #32]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	429a      	cmp	r2, r3
 800442c:	d309      	bcc.n	8004442 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6a1a      	ldr	r2, [r3, #32]
 8004438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	621a      	str	r2, [r3, #32]
 8004440:	e015      	b.n	800446e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800444a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800444e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004458:	e009      	b.n	800446e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2200      	movs	r2, #0
 800446c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	785b      	ldrb	r3, [r3, #1]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d155      	bne.n	8004522 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	63bb      	str	r3, [r7, #56]	; 0x38
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004484:	b29b      	uxth	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448a:	4413      	add	r3, r2
 800448c:	63bb      	str	r3, [r7, #56]	; 0x38
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	011a      	lsls	r2, r3, #4
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	4413      	add	r3, r2
 8004498:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800449c:	637b      	str	r3, [r7, #52]	; 0x34
 800449e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d112      	bne.n	80044ca <HAL_PCD_EP_DB_Transmit+0x302>
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c6:	801a      	strh	r2, [r3, #0]
 80044c8:	e047      	b.n	800455a <HAL_PCD_EP_DB_Transmit+0x392>
 80044ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044cc:	2b3e      	cmp	r3, #62	; 0x3e
 80044ce:	d811      	bhi.n	80044f4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80044d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80044e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e2:	3301      	adds	r3, #1
 80044e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	029b      	lsls	r3, r3, #10
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f0:	801a      	strh	r2, [r3, #0]
 80044f2:	e032      	b.n	800455a <HAL_PCD_EP_DB_Transmit+0x392>
 80044f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <HAL_PCD_EP_DB_Transmit+0x342>
 8004504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004506:	3b01      	subs	r3, #1
 8004508:	64bb      	str	r3, [r7, #72]	; 0x48
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450c:	b29b      	uxth	r3, r3
 800450e:	029b      	lsls	r3, r3, #10
 8004510:	b29b      	uxth	r3, r3
 8004512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800451a:	b29a      	uxth	r2, r3
 800451c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451e:	801a      	strh	r2, [r3, #0]
 8004520:	e01b      	b.n	800455a <HAL_PCD_EP_DB_Transmit+0x392>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d117      	bne.n	800455a <HAL_PCD_EP_DB_Transmit+0x392>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	643b      	str	r3, [r7, #64]	; 0x40
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004538:	b29b      	uxth	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800453e:	4413      	add	r3, r2
 8004540:	643b      	str	r3, [r7, #64]	; 0x40
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	011a      	lsls	r2, r3, #4
 8004548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454a:	4413      	add	r3, r2
 800454c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004554:	b29a      	uxth	r2, r3
 8004556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004558:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6959      	ldr	r1, [r3, #20]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	891a      	ldrh	r2, [r3, #8]
 8004566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004568:	b29b      	uxth	r3, r3
 800456a:	f004 fb35 	bl	8008bd8 <USB_WritePMA>
 800456e:	e1d0      	b.n	8004912 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004578:	b29b      	uxth	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	3306      	adds	r3, #6
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004598:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d307      	bcc.n	80045b8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	699a      	ldr	r2, [r3, #24]
 80045ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045b0:	1ad2      	subs	r2, r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	619a      	str	r2, [r3, #24]
 80045b6:	e002      	b.n	80045be <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2200      	movs	r2, #0
 80045bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f040 80c4 	bne.w	8004750 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	785b      	ldrb	r3, [r3, #1]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d126      	bne.n	800461e <HAL_PCD_EP_DB_Transmit+0x456>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045de:	b29b      	uxth	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e4:	4413      	add	r3, r2
 80045e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	011a      	lsls	r2, r3, #4
 80045ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f0:	4413      	add	r3, r2
 80045f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004602:	b29a      	uxth	r2, r3
 8004604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004616:	b29a      	uxth	r2, r3
 8004618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	e01a      	b.n	8004654 <HAL_PCD_EP_DB_Transmit+0x48c>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d116      	bne.n	8004654 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	677b      	str	r3, [r7, #116]	; 0x74
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004634:	b29b      	uxth	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800463a:	4413      	add	r3, r2
 800463c:	677b      	str	r3, [r7, #116]	; 0x74
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	011a      	lsls	r2, r3, #4
 8004644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004646:	4413      	add	r3, r2
 8004648:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800464c:	673b      	str	r3, [r7, #112]	; 0x70
 800464e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004650:	2200      	movs	r2, #0
 8004652:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	67bb      	str	r3, [r7, #120]	; 0x78
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d12f      	bne.n	80046c2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004672:	b29b      	uxth	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800467a:	4413      	add	r3, r2
 800467c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	011a      	lsls	r2, r3, #4
 8004686:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800468a:	4413      	add	r3, r2
 800468c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046a6:	801a      	strh	r2, [r3, #0]
 80046a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	e017      	b.n	80046f2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	785b      	ldrb	r3, [r3, #1]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d113      	bne.n	80046f2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d8:	4413      	add	r3, r2
 80046da:	67bb      	str	r3, [r7, #120]	; 0x78
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	011a      	lsls	r2, r3, #4
 80046e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e4:	4413      	add	r3, r2
 80046e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046ee:	2200      	movs	r2, #0
 80046f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	4619      	mov	r1, r3
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f005 ff7c 	bl	800a5f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004704:	2b00      	cmp	r3, #0
 8004706:	f040 8104 	bne.w	8004912 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004724:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800473a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474a:	b29b      	uxth	r3, r3
 800474c:	8013      	strh	r3, [r2, #0]
 800474e:	e0e0      	b.n	8004912 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d121      	bne.n	800479e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004774:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	441a      	add	r2, r3
 8004786:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800478a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479a:	b29b      	uxth	r3, r3
 800479c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	f040 80b4 	bne.w	8004912 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047b2:	441a      	add	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047c0:	441a      	add	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d309      	bcc.n	80047e6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047de:	1ad2      	subs	r2, r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	621a      	str	r2, [r3, #32]
 80047e4:	e015      	b.n	8004812 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d107      	bne.n	80047fe <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80047ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80047fc:	e009      	b.n	8004812 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2200      	movs	r2, #0
 8004808:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	667b      	str	r3, [r7, #100]	; 0x64
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d155      	bne.n	80048cc <HAL_PCD_EP_DB_Transmit+0x704>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800482e:	b29b      	uxth	r3, r3
 8004830:	461a      	mov	r2, r3
 8004832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004834:	4413      	add	r3, r2
 8004836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	011a      	lsls	r2, r3, #4
 800483e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004840:	4413      	add	r3, r2
 8004842:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004846:	65bb      	str	r3, [r7, #88]	; 0x58
 8004848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800484a:	2b00      	cmp	r3, #0
 800484c:	d112      	bne.n	8004874 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800484e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004858:	b29a      	uxth	r2, r3
 800485a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486c:	b29a      	uxth	r2, r3
 800486e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	e044      	b.n	80048fe <HAL_PCD_EP_DB_Transmit+0x736>
 8004874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004876:	2b3e      	cmp	r3, #62	; 0x3e
 8004878:	d811      	bhi.n	800489e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800487a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	657b      	str	r3, [r7, #84]	; 0x54
 8004880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800488a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800488c:	3301      	adds	r3, #1
 800488e:	657b      	str	r3, [r7, #84]	; 0x54
 8004890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004892:	b29b      	uxth	r3, r3
 8004894:	029b      	lsls	r3, r3, #10
 8004896:	b29a      	uxth	r2, r3
 8004898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800489a:	801a      	strh	r2, [r3, #0]
 800489c:	e02f      	b.n	80048fe <HAL_PCD_EP_DB_Transmit+0x736>
 800489e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	657b      	str	r3, [r7, #84]	; 0x54
 80048a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80048ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b0:	3b01      	subs	r3, #1
 80048b2:	657b      	str	r3, [r7, #84]	; 0x54
 80048b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	029b      	lsls	r3, r3, #10
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c8:	801a      	strh	r2, [r3, #0]
 80048ca:	e018      	b.n	80048fe <HAL_PCD_EP_DB_Transmit+0x736>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d114      	bne.n	80048fe <HAL_PCD_EP_DB_Transmit+0x736>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048dc:	b29b      	uxth	r3, r3
 80048de:	461a      	mov	r2, r3
 80048e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e2:	4413      	add	r3, r2
 80048e4:	667b      	str	r3, [r7, #100]	; 0x64
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	011a      	lsls	r2, r3, #4
 80048ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ee:	4413      	add	r3, r2
 80048f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048f4:	663b      	str	r3, [r7, #96]	; 0x60
 80048f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048fc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	6959      	ldr	r1, [r3, #20]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	895a      	ldrh	r2, [r3, #10]
 800490a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490c:	b29b      	uxth	r3, r3
 800490e:	f004 f963 	bl	8008bd8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492c:	823b      	strh	r3, [r7, #16]
 800492e:	8a3b      	ldrh	r3, [r7, #16]
 8004930:	f083 0310 	eor.w	r3, r3, #16
 8004934:	823b      	strh	r3, [r7, #16]
 8004936:	8a3b      	ldrh	r3, [r7, #16]
 8004938:	f083 0320 	eor.w	r3, r3, #32
 800493c:	823b      	strh	r3, [r7, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	8a3b      	ldrh	r3, [r7, #16]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3788      	adds	r7, #136	; 0x88
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	817b      	strh	r3, [r7, #10]
 800497a:	4613      	mov	r3, r2
 800497c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800497e:	897b      	ldrh	r3, [r7, #10]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800498a:	897b      	ldrh	r3, [r7, #10]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	e009      	b.n	80049b6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049a2:	897a      	ldrh	r2, [r7, #10]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80049b6:	893b      	ldrh	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d107      	bne.n	80049cc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	80da      	strh	r2, [r3, #6]
 80049ca:	e00b      	b.n	80049e4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2201      	movs	r2, #1
 80049d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	b29a      	uxth	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e272      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8087 	beq.w	8004b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a10:	4b92      	ldr	r3, [pc, #584]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d00c      	beq.n	8004a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a1c:	4b8f      	ldr	r3, [pc, #572]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d112      	bne.n	8004a4e <HAL_RCC_OscConfig+0x5e>
 8004a28:	4b8c      	ldr	r3, [pc, #560]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a34:	d10b      	bne.n	8004a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a36:	4b89      	ldr	r3, [pc, #548]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d06c      	beq.n	8004b1c <HAL_RCC_OscConfig+0x12c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d168      	bne.n	8004b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e24c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_OscConfig+0x76>
 8004a58:	4b80      	ldr	r3, [pc, #512]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a7f      	ldr	r2, [pc, #508]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e02e      	b.n	8004ac4 <HAL_RCC_OscConfig+0xd4>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x98>
 8004a6e:	4b7b      	ldr	r3, [pc, #492]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a7a      	ldr	r2, [pc, #488]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	4b78      	ldr	r3, [pc, #480]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a77      	ldr	r2, [pc, #476]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e01d      	b.n	8004ac4 <HAL_RCC_OscConfig+0xd4>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0xbc>
 8004a92:	4b72      	ldr	r3, [pc, #456]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a71      	ldr	r2, [pc, #452]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b6f      	ldr	r3, [pc, #444]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a6e      	ldr	r2, [pc, #440]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0xd4>
 8004aac:	4b6b      	ldr	r3, [pc, #428]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a6a      	ldr	r2, [pc, #424]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b68      	ldr	r3, [pc, #416]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a67      	ldr	r2, [pc, #412]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d013      	beq.n	8004af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fc ff80 	bl	80019d0 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fc ff7c 	bl	80019d0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e200      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b5d      	ldr	r3, [pc, #372]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0xe4>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fc ff6c 	bl	80019d0 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fc ff68 	bl	80019d0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	; 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e1ec      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0e:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x10c>
 8004b1a:	e000      	b.n	8004b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d063      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b2a:	4b4c      	ldr	r3, [pc, #304]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b36:	4b49      	ldr	r3, [pc, #292]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d11c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x18c>
 8004b42:	4b46      	ldr	r3, [pc, #280]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d116      	bne.n	8004b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	4b43      	ldr	r3, [pc, #268]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_RCC_OscConfig+0x176>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e1c0      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b66:	4b3d      	ldr	r3, [pc, #244]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4939      	ldr	r1, [pc, #228]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	e03a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b84:	4b36      	ldr	r3, [pc, #216]	; (8004c60 <HAL_RCC_OscConfig+0x270>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fc ff21 	bl	80019d0 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fc ff1d 	bl	80019d0 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e1a1      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba4:	4b2d      	ldr	r3, [pc, #180]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b2a      	ldr	r3, [pc, #168]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4927      	ldr	r1, [pc, #156]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	600b      	str	r3, [r1, #0]
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc6:	4b26      	ldr	r3, [pc, #152]	; (8004c60 <HAL_RCC_OscConfig+0x270>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bcc:	f7fc ff00 	bl	80019d0 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd4:	f7fc fefc 	bl	80019d0 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e180      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d03a      	beq.n	8004c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d019      	beq.n	8004c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c06:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0c:	f7fc fee0 	bl	80019d0 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c14:	f7fc fedc 	bl	80019d0 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e160      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c26:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c32:	2001      	movs	r0, #1
 8004c34:	f000 fad8 	bl	80051e8 <RCC_Delay>
 8004c38:	e01c      	b.n	8004c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c40:	f7fc fec6 	bl	80019d0 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c46:	e00f      	b.n	8004c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c48:	f7fc fec2 	bl	80019d0 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d908      	bls.n	8004c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e146      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	42420000 	.word	0x42420000
 8004c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c68:	4b92      	ldr	r3, [pc, #584]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e9      	bne.n	8004c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80a6 	beq.w	8004dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c82:	2300      	movs	r3, #0
 8004c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c86:	4b8b      	ldr	r3, [pc, #556]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10d      	bne.n	8004cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	4b88      	ldr	r3, [pc, #544]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4a87      	ldr	r2, [pc, #540]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	61d3      	str	r3, [r2, #28]
 8004c9e:	4b85      	ldr	r3, [pc, #532]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	60bb      	str	r3, [r7, #8]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cae:	4b82      	ldr	r3, [pc, #520]	; (8004eb8 <HAL_RCC_OscConfig+0x4c8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d118      	bne.n	8004cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cba:	4b7f      	ldr	r3, [pc, #508]	; (8004eb8 <HAL_RCC_OscConfig+0x4c8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7e      	ldr	r2, [pc, #504]	; (8004eb8 <HAL_RCC_OscConfig+0x4c8>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc6:	f7fc fe83 	bl	80019d0 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cce:	f7fc fe7f 	bl	80019d0 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b64      	cmp	r3, #100	; 0x64
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e103      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce0:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <HAL_RCC_OscConfig+0x4c8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d106      	bne.n	8004d02 <HAL_RCC_OscConfig+0x312>
 8004cf4:	4b6f      	ldr	r3, [pc, #444]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	4a6e      	ldr	r2, [pc, #440]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6213      	str	r3, [r2, #32]
 8004d00:	e02d      	b.n	8004d5e <HAL_RCC_OscConfig+0x36e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x334>
 8004d0a:	4b6a      	ldr	r3, [pc, #424]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	4a69      	ldr	r2, [pc, #420]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	6213      	str	r3, [r2, #32]
 8004d16:	4b67      	ldr	r3, [pc, #412]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	4a66      	ldr	r2, [pc, #408]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d1c:	f023 0304 	bic.w	r3, r3, #4
 8004d20:	6213      	str	r3, [r2, #32]
 8004d22:	e01c      	b.n	8004d5e <HAL_RCC_OscConfig+0x36e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	2b05      	cmp	r3, #5
 8004d2a:	d10c      	bne.n	8004d46 <HAL_RCC_OscConfig+0x356>
 8004d2c:	4b61      	ldr	r3, [pc, #388]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	4a60      	ldr	r2, [pc, #384]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	6213      	str	r3, [r2, #32]
 8004d38:	4b5e      	ldr	r3, [pc, #376]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	4a5d      	ldr	r2, [pc, #372]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	6213      	str	r3, [r2, #32]
 8004d44:	e00b      	b.n	8004d5e <HAL_RCC_OscConfig+0x36e>
 8004d46:	4b5b      	ldr	r3, [pc, #364]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	4a5a      	ldr	r2, [pc, #360]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	6213      	str	r3, [r2, #32]
 8004d52:	4b58      	ldr	r3, [pc, #352]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	4a57      	ldr	r2, [pc, #348]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d58:	f023 0304 	bic.w	r3, r3, #4
 8004d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d015      	beq.n	8004d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d66:	f7fc fe33 	bl	80019d0 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fc fe2f 	bl	80019d0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e0b1      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d84:	4b4b      	ldr	r3, [pc, #300]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ee      	beq.n	8004d6e <HAL_RCC_OscConfig+0x37e>
 8004d90:	e014      	b.n	8004dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d92:	f7fc fe1d 	bl	80019d0 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d98:	e00a      	b.n	8004db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9a:	f7fc fe19 	bl	80019d0 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e09b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db0:	4b40      	ldr	r3, [pc, #256]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ee      	bne.n	8004d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d105      	bne.n	8004dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc2:	4b3c      	ldr	r3, [pc, #240]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4a3b      	ldr	r2, [pc, #236]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8087 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dd8:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 030c 	and.w	r3, r3, #12
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d061      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d146      	bne.n	8004e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dec:	4b33      	ldr	r3, [pc, #204]	; (8004ebc <HAL_RCC_OscConfig+0x4cc>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df2:	f7fc fded 	bl	80019d0 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfa:	f7fc fde9 	bl	80019d0 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e06d      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e0c:	4b29      	ldr	r3, [pc, #164]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f0      	bne.n	8004dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e20:	d108      	bne.n	8004e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4921      	ldr	r1, [pc, #132]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e34:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a19      	ldr	r1, [r3, #32]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	430b      	orrs	r3, r1
 8004e46:	491b      	ldr	r1, [pc, #108]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <HAL_RCC_OscConfig+0x4cc>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fc fdbd 	bl	80019d0 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fc fdb9 	bl	80019d0 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e03d      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x46a>
 8004e78:	e035      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <HAL_RCC_OscConfig+0x4cc>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fc fda6 	bl	80019d0 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fc fda2 	bl	80019d0 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e026      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e9a:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x498>
 8004ea6:	e01e      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e019      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_RCC_OscConfig+0x500>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40021000 	.word	0x40021000

08004ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0d0      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f08:	4b6a      	ldr	r3, [pc, #424]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d910      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b67      	ldr	r3, [pc, #412]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 0207 	bic.w	r2, r3, #7
 8004f1e:	4965      	ldr	r1, [pc, #404]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b63      	ldr	r3, [pc, #396]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0b8      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d020      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f50:	4b59      	ldr	r3, [pc, #356]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a58      	ldr	r2, [pc, #352]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f68:	4b53      	ldr	r3, [pc, #332]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a52      	ldr	r2, [pc, #328]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f74:	4b50      	ldr	r3, [pc, #320]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	494d      	ldr	r1, [pc, #308]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d040      	beq.n	8005014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9a:	4b47      	ldr	r3, [pc, #284]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d115      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e07f      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb2:	4b41      	ldr	r3, [pc, #260]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e073      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc2:	4b3d      	ldr	r3, [pc, #244]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e06b      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd2:	4b39      	ldr	r3, [pc, #228]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	4936      	ldr	r1, [pc, #216]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe4:	f7fc fcf4 	bl	80019d0 <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fec:	f7fc fcf0 	bl	80019d0 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e053      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	4b2d      	ldr	r3, [pc, #180]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 020c 	and.w	r2, r3, #12
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	429a      	cmp	r2, r3
 8005012:	d1eb      	bne.n	8004fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005014:	4b27      	ldr	r3, [pc, #156]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d210      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005022:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 0207 	bic.w	r2, r3, #7
 800502a:	4922      	ldr	r1, [pc, #136]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e032      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005050:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4916      	ldr	r1, [pc, #88]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	490e      	ldr	r1, [pc, #56]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005082:	f000 f821 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 8005086:	4602      	mov	r2, r0
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	490a      	ldr	r1, [pc, #40]	; (80050bc <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <HAL_RCC_ClockConfig+0x1cc>)
 800509c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <HAL_RCC_ClockConfig+0x1d0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc fc52 	bl	800194c <HAL_InitTick>

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40022000 	.word	0x40022000
 80050b8:	40021000 	.word	0x40021000
 80050bc:	0800b464 	.word	0x0800b464
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	20000010 	.word	0x20000010

080050c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c8:	b490      	push	{r4, r7}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <HAL_RCC_GetSysClockFreq+0xac>)
 80050d0:	1d3c      	adds	r4, r7, #4
 80050d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80050d8:	f240 2301 	movw	r3, #513	; 0x201
 80050dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	2300      	movs	r3, #0
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	2300      	movs	r3, #0
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050f2:	4b21      	ldr	r3, [pc, #132]	; (8005178 <HAL_RCC_GetSysClockFreq+0xb0>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d002      	beq.n	8005108 <HAL_RCC_GetSysClockFreq+0x40>
 8005102:	2b08      	cmp	r3, #8
 8005104:	d003      	beq.n	800510e <HAL_RCC_GetSysClockFreq+0x46>
 8005106:	e02b      	b.n	8005160 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005108:	4b1c      	ldr	r3, [pc, #112]	; (800517c <HAL_RCC_GetSysClockFreq+0xb4>)
 800510a:	623b      	str	r3, [r7, #32]
      break;
 800510c:	e02b      	b.n	8005166 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	0c9b      	lsrs	r3, r3, #18
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	3328      	adds	r3, #40	; 0x28
 8005118:	443b      	add	r3, r7
 800511a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800511e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d012      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800512a:	4b13      	ldr	r3, [pc, #76]	; (8005178 <HAL_RCC_GetSysClockFreq+0xb0>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	0c5b      	lsrs	r3, r3, #17
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	3328      	adds	r3, #40	; 0x28
 8005136:	443b      	add	r3, r7
 8005138:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800513c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	4a0e      	ldr	r2, [pc, #56]	; (800517c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005142:	fb03 f202 	mul.w	r2, r3, r2
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
 800514e:	e004      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005154:	fb02 f303 	mul.w	r3, r2, r3
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	623b      	str	r3, [r7, #32]
      break;
 800515e:	e002      	b.n	8005166 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005162:	623b      	str	r3, [r7, #32]
      break;
 8005164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005166:	6a3b      	ldr	r3, [r7, #32]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3728      	adds	r7, #40	; 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bc90      	pop	{r4, r7}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	0800b40c 	.word	0x0800b40c
 8005178:	40021000 	.word	0x40021000
 800517c:	007a1200 	.word	0x007a1200
 8005180:	003d0900 	.word	0x003d0900

08005184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005188:	4b02      	ldr	r3, [pc, #8]	; (8005194 <HAL_RCC_GetHCLKFreq+0x10>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr
 8005194:	2000000c 	.word	0x2000000c

08005198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800519c:	f7ff fff2 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051a0:	4602      	mov	r2, r0
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	4903      	ldr	r1, [pc, #12]	; (80051bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ae:	5ccb      	ldrb	r3, [r1, r3]
 80051b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40021000 	.word	0x40021000
 80051bc:	0800b474 	.word	0x0800b474

080051c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051c4:	f7ff ffde 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	0adb      	lsrs	r3, r3, #11
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	4903      	ldr	r1, [pc, #12]	; (80051e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051d6:	5ccb      	ldrb	r3, [r1, r3]
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051dc:	4618      	mov	r0, r3
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40021000 	.word	0x40021000
 80051e4:	0800b474 	.word	0x0800b474

080051e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <RCC_Delay+0x34>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0a      	ldr	r2, [pc, #40]	; (8005220 <RCC_Delay+0x38>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	0a5b      	lsrs	r3, r3, #9
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	fb02 f303 	mul.w	r3, r2, r3
 8005202:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005204:	bf00      	nop
  }
  while (Delay --);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1e5a      	subs	r2, r3, #1
 800520a:	60fa      	str	r2, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f9      	bne.n	8005204 <RCC_Delay+0x1c>
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr
 800521c:	2000000c 	.word	0x2000000c
 8005220:	10624dd3 	.word	0x10624dd3

08005224 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d07d      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005240:	2300      	movs	r3, #0
 8005242:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005244:	4b4f      	ldr	r3, [pc, #316]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10d      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005250:	4b4c      	ldr	r3, [pc, #304]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	4a4b      	ldr	r2, [pc, #300]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525a:	61d3      	str	r3, [r2, #28]
 800525c:	4b49      	ldr	r3, [pc, #292]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005268:	2301      	movs	r3, #1
 800526a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526c:	4b46      	ldr	r3, [pc, #280]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d118      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005278:	4b43      	ldr	r3, [pc, #268]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a42      	ldr	r2, [pc, #264]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800527e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005282:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005284:	f7fc fba4 	bl	80019d0 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528a:	e008      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528c:	f7fc fba0 	bl	80019d0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b64      	cmp	r3, #100	; 0x64
 8005298:	d901      	bls.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e06d      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529e:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052aa:	4b36      	ldr	r3, [pc, #216]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d02e      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d027      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052c8:	4b2e      	ldr	r3, [pc, #184]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052d2:	4b2e      	ldr	r3, [pc, #184]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052d8:	4b2c      	ldr	r3, [pc, #176]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052de:	4a29      	ldr	r2, [pc, #164]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d014      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ee:	f7fc fb6f 	bl	80019d0 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f4:	e00a      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f6:	f7fc fb6b 	bl	80019d0 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f241 3288 	movw	r2, #5000	; 0x1388
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e036      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530c:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0ee      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4917      	ldr	r1, [pc, #92]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005326:	4313      	orrs	r3, r2
 8005328:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800532a:	7dfb      	ldrb	r3, [r7, #23]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d105      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005330:	4b14      	ldr	r3, [pc, #80]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	4a13      	ldr	r2, [pc, #76]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800533a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005348:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	490b      	ldr	r1, [pc, #44]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005366:	4b07      	ldr	r3, [pc, #28]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4904      	ldr	r1, [pc, #16]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005374:	4313      	orrs	r3, r2
 8005376:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000
 8005388:	40007000 	.word	0x40007000
 800538c:	42420440 	.word	0x42420440

08005390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e076      	b.n	8005490 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d108      	bne.n	80053bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b2:	d009      	beq.n	80053c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	61da      	str	r2, [r3, #28]
 80053ba:	e005      	b.n	80053c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fc f908 	bl	80015f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544c:	ea42 0103 	orr.w	r1, r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	0c1a      	lsrs	r2, r3, #16
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f002 0204 	and.w	r2, r2, #4
 800546e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800547e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b4:	d112      	bne.n	80054dc <HAL_SPI_Receive+0x44>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10e      	bne.n	80054dc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2204      	movs	r2, #4
 80054c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f8f1 	bl	80056ba <HAL_SPI_TransmitReceive>
 80054d8:	4603      	mov	r3, r0
 80054da:	e0ea      	b.n	80056b2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_SPI_Receive+0x52>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e0e3      	b.n	80056b2 <HAL_SPI_Receive+0x21a>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054f2:	f7fc fa6d 	bl	80019d0 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d002      	beq.n	800550a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005504:	2302      	movs	r3, #2
 8005506:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005508:	e0ca      	b.n	80056a0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_SPI_Receive+0x7e>
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
    goto error;
 800551a:	e0c1      	b.n	80056a0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2204      	movs	r2, #4
 8005520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005562:	d10f      	bne.n	8005584 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005572:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005582:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d007      	beq.n	80055a2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d162      	bne.n	8005670 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055aa:	e02e      	b.n	800560a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d115      	bne.n	80055e6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f103 020c 	add.w	r2, r3, #12
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	7812      	ldrb	r2, [r2, #0]
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055e4:	e011      	b.n	800560a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e6:	f7fc f9f3 	bl	80019d0 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d803      	bhi.n	80055fe <HAL_SPI_Receive+0x166>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d102      	bne.n	8005604 <HAL_SPI_Receive+0x16c>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005608:	e04a      	b.n	80056a0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1cb      	bne.n	80055ac <HAL_SPI_Receive+0x114>
 8005614:	e031      	b.n	800567a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b01      	cmp	r3, #1
 8005622:	d113      	bne.n	800564c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	b292      	uxth	r2, r2
 8005630:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	87da      	strh	r2, [r3, #62]	; 0x3e
 800564a:	e011      	b.n	8005670 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800564c:	f7fc f9c0 	bl	80019d0 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d803      	bhi.n	8005664 <HAL_SPI_Receive+0x1cc>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005662:	d102      	bne.n	800566a <HAL_SPI_Receive+0x1d2>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800566e:	e017      	b.n	80056a0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1cd      	bne.n	8005616 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fb4a 	bl	8005d18 <SPI_EndRxTransaction>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
 800569c:	e000      	b.n	80056a0 <HAL_SPI_Receive+0x208>
  }

error :
 800569e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b08c      	sub	sp, #48	; 0x30
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056c8:	2301      	movs	r3, #1
 80056ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x26>
 80056dc:	2302      	movs	r3, #2
 80056de:	e18a      	b.n	80059f6 <HAL_SPI_TransmitReceive+0x33c>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056e8:	f7fc f972 	bl	80019d0 <HAL_GetTick>
 80056ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005706:	2b01      	cmp	r3, #1
 8005708:	d00f      	beq.n	800572a <HAL_SPI_TransmitReceive+0x70>
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005710:	d107      	bne.n	8005722 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <HAL_SPI_TransmitReceive+0x68>
 800571a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800571e:	2b04      	cmp	r3, #4
 8005720:	d003      	beq.n	800572a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005722:	2302      	movs	r3, #2
 8005724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005728:	e15b      	b.n	80059e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_SPI_TransmitReceive+0x82>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_SPI_TransmitReceive+0x82>
 8005736:	887b      	ldrh	r3, [r7, #2]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d103      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005742:	e14e      	b.n	80059e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b04      	cmp	r3, #4
 800574e:	d003      	beq.n	8005758 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2205      	movs	r2, #5
 8005754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	887a      	ldrh	r2, [r7, #2]
 8005768:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	887a      	ldrh	r2, [r7, #2]
 800576e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	887a      	ldrh	r2, [r7, #2]
 800577a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	887a      	ldrh	r2, [r7, #2]
 8005780:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d007      	beq.n	80057ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b4:	d178      	bne.n	80058a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_SPI_TransmitReceive+0x10a>
 80057be:	8b7b      	ldrh	r3, [r7, #26]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d166      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	881a      	ldrh	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	1c9a      	adds	r2, r3, #2
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e8:	e053      	b.n	8005892 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d11b      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x176>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d016      	beq.n	8005830 <HAL_SPI_TransmitReceive+0x176>
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	2b01      	cmp	r3, #1
 8005806:	d113      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	881a      	ldrh	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	1c9a      	adds	r2, r3, #2
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b01      	cmp	r3, #1
 800583c:	d119      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x1b8>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d014      	beq.n	8005872 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	b292      	uxth	r2, r2
 8005854:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	1c9a      	adds	r2, r3, #2
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800586e:	2301      	movs	r3, #1
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005872:	f7fc f8ad 	bl	80019d0 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800587e:	429a      	cmp	r2, r3
 8005880:	d807      	bhi.n	8005892 <HAL_SPI_TransmitReceive+0x1d8>
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d003      	beq.n	8005892 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005890:	e0a7      	b.n	80059e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1a6      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x130>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1a1      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x130>
 80058a6:	e07c      	b.n	80059a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x1fc>
 80058b0:	8b7b      	ldrh	r3, [r7, #26]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d16b      	bne.n	800598e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058dc:	e057      	b.n	800598e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d11c      	bne.n	8005926 <HAL_SPI_TransmitReceive+0x26c>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d017      	beq.n	8005926 <HAL_SPI_TransmitReceive+0x26c>
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d114      	bne.n	8005926 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	7812      	ldrb	r2, [r2, #0]
 8005908:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b01      	cmp	r3, #1
 8005932:	d119      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x2ae>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d014      	beq.n	8005968 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005964:	2301      	movs	r3, #1
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005968:	f7fc f832 	bl	80019d0 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005974:	429a      	cmp	r2, r3
 8005976:	d803      	bhi.n	8005980 <HAL_SPI_TransmitReceive+0x2c6>
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	d102      	bne.n	8005986 <HAL_SPI_TransmitReceive+0x2cc>
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	2b00      	cmp	r3, #0
 8005984:	d103      	bne.n	800598e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800598c:	e029      	b.n	80059e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1a2      	bne.n	80058de <HAL_SPI_TransmitReceive+0x224>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d19d      	bne.n	80058de <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fa08 	bl	8005dbc <SPI_EndRxTxTransaction>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059be:	e010      	b.n	80059e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10b      	bne.n	80059e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	e000      	b.n	80059e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3730      	adds	r7, #48	; 0x30
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	099b      	lsrs	r3, r3, #6
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10f      	bne.n	8005a44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	099b      	lsrs	r3, r3, #6
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	4798      	blx	r3
    return;
 8005a42:	e0be      	b.n	8005bc2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_SPI_IRQHandler+0x66>
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	09db      	lsrs	r3, r3, #7
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
    return;
 8005a64:	e0ad      	b.n	8005bc2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_SPI_IRQHandler+0x80>
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	099b      	lsrs	r3, r3, #6
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80a1 	beq.w	8005bc2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 809a 	beq.w	8005bc2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	099b      	lsrs	r3, r3, #6
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d023      	beq.n	8005ae2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d011      	beq.n	8005aca <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	f043 0204 	orr.w	r2, r3, #4
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	e00b      	b.n	8005ae2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	613b      	str	r3, [r7, #16]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	693b      	ldr	r3, [r7, #16]
        return;
 8005ae0:	e06f      	b.n	8005bc2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d014      	beq.n	8005b18 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	f043 0201 	orr.w	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d04f      	beq.n	8005bc0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b2e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <HAL_SPI_IRQHandler+0x14c>
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d034      	beq.n	8005bb6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0203 	bic.w	r2, r2, #3
 8005b5a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d011      	beq.n	8005b88 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b68:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <HAL_SPI_IRQHandler+0x1c8>)
 8005b6a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fc fcef 	bl	8002554 <HAL_DMA_Abort_IT>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d016      	beq.n	8005bbe <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b94:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <HAL_SPI_IRQHandler+0x1c8>)
 8005b96:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fc fcd9 	bl	8002554 <HAL_DMA_Abort_IT>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005bb4:	e003      	b.n	8005bbe <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f808 	bl	8005bcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005bbc:	e000      	b.n	8005bc0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005bbe:	bf00      	nop
    return;
 8005bc0:	bf00      	nop
  }
}
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	08005bdf 	.word	0x08005bdf

08005bcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr

08005bde <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff ffe7 	bl	8005bcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c18:	f7fb feda 	bl	80019d0 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	4413      	add	r3, r2
 8005c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c28:	f7fb fed2 	bl	80019d0 <HAL_GetTick>
 8005c2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c2e:	4b39      	ldr	r3, [pc, #228]	; (8005d14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	015b      	lsls	r3, r3, #5
 8005c34:	0d1b      	lsrs	r3, r3, #20
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c3e:	e054      	b.n	8005cea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d050      	beq.n	8005cea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c48:	f7fb fec2 	bl	80019d0 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d902      	bls.n	8005c5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d13d      	bne.n	8005cda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c76:	d111      	bne.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c80:	d004      	beq.n	8005c8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8a:	d107      	bne.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca4:	d10f      	bne.n	8005cc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e017      	b.n	8005d0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2301      	moveq	r3, #1
 8005cfc:	2300      	movne	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d19b      	bne.n	8005c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	2000000c 	.word	0x2000000c

08005d18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2c:	d111      	bne.n	8005d52 <SPI_EndRxTransaction+0x3a>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d36:	d004      	beq.n	8005d42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d40:	d107      	bne.n	8005d52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d50:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d5a:	d117      	bne.n	8005d8c <SPI_EndRxTransaction+0x74>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d64:	d112      	bne.n	8005d8c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2101      	movs	r1, #1
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7ff ff49 	bl	8005c08 <SPI_WaitFlagStateUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01a      	beq.n	8005db2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	f043 0220 	orr.w	r2, r3, #32
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e013      	b.n	8005db4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2200      	movs	r2, #0
 8005d94:	2180      	movs	r1, #128	; 0x80
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7ff ff36 	bl	8005c08 <SPI_WaitFlagStateUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da6:	f043 0220 	orr.w	r2, r3, #32
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e000      	b.n	8005db4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2180      	movs	r1, #128	; 0x80
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f7ff ff18 	bl	8005c08 <SPI_WaitFlagStateUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de2:	f043 0220 	orr.w	r2, r3, #32
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e000      	b.n	8005df0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e03f      	b.n	8005e8a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fb fc80 	bl	8001724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	; 0x24
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f905 	bl	800604c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695a      	ldr	r2, [r3, #20]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b08a      	sub	sp, #40	; 0x28
 8005e96:	af02      	add	r7, sp, #8
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	603b      	str	r3, [r7, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d17c      	bne.n	8005fac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_UART_Transmit+0x2c>
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e075      	b.n	8005fae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_UART_Transmit+0x3e>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e06e      	b.n	8005fae <HAL_UART_Transmit+0x11c>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2221      	movs	r2, #33	; 0x21
 8005ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ee6:	f7fb fd73 	bl	80019d0 <HAL_GetTick>
 8005eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	88fa      	ldrh	r2, [r7, #6]
 8005ef0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d108      	bne.n	8005f14 <HAL_UART_Transmit+0x82>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e003      	b.n	8005f1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f24:	e02a      	b.n	8005f7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2180      	movs	r1, #128	; 0x80
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f840 	bl	8005fb6 <UART_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e036      	b.n	8005fae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	3302      	adds	r3, #2
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e007      	b.n	8005f6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1cf      	bne.n	8005f26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2140      	movs	r1, #64	; 0x40
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f810 	bl	8005fb6 <UART_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e006      	b.n	8005fae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e000      	b.n	8005fae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005fac:	2302      	movs	r3, #2
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc6:	e02c      	b.n	8006022 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d028      	beq.n	8006022 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fd6:	f7fb fcfb 	bl	80019d0 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d21d      	bcs.n	8006022 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ff4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e00f      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4013      	ands	r3, r2
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	429a      	cmp	r2, r3
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	429a      	cmp	r2, r3
 800603e:	d0c3      	beq.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006086:	f023 030c 	bic.w	r3, r3, #12
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	430b      	orrs	r3, r1
 8006092:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a2c      	ldr	r2, [pc, #176]	; (8006160 <UART_SetConfig+0x114>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d103      	bne.n	80060bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060b4:	f7ff f884 	bl	80051c0 <HAL_RCC_GetPCLK2Freq>
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	e002      	b.n	80060c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7ff f86c 	bl	8005198 <HAL_RCC_GetPCLK1Freq>
 80060c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009a      	lsls	r2, r3, #2
 80060cc:	441a      	add	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d8:	4a22      	ldr	r2, [pc, #136]	; (8006164 <UART_SetConfig+0x118>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	0119      	lsls	r1, r3, #4
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009a      	lsls	r2, r3, #2
 80060ec:	441a      	add	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060f8:	4b1a      	ldr	r3, [pc, #104]	; (8006164 <UART_SetConfig+0x118>)
 80060fa:	fba3 0302 	umull	r0, r3, r3, r2
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	2064      	movs	r0, #100	; 0x64
 8006102:	fb00 f303 	mul.w	r3, r0, r3
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	3332      	adds	r3, #50	; 0x32
 800610c:	4a15      	ldr	r2, [pc, #84]	; (8006164 <UART_SetConfig+0x118>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006118:	4419      	add	r1, r3
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009a      	lsls	r2, r3, #2
 8006124:	441a      	add	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006130:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <UART_SetConfig+0x118>)
 8006132:	fba3 0302 	umull	r0, r3, r3, r2
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	2064      	movs	r0, #100	; 0x64
 800613a:	fb00 f303 	mul.w	r3, r0, r3
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	3332      	adds	r3, #50	; 0x32
 8006144:	4a07      	ldr	r2, [pc, #28]	; (8006164 <UART_SetConfig+0x118>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	440a      	add	r2, r1
 8006156:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40013800 	.word	0x40013800
 8006164:	51eb851f 	.word	0x51eb851f

08006168 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006168:	b084      	sub	sp, #16
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	f107 0014 	add.w	r0, r7, #20
 8006176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	b004      	add	sp, #16
 8006186:	4770      	bx	lr

08006188 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006198:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800619c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr

080061b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80061c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	43db      	mvns	r3, r3
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	4013      	ands	r3, r2
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006200:	b084      	sub	sp, #16
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	f107 0014 	add.w	r0, r7, #20
 800620e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	b004      	add	sp, #16
 800623e:	4770      	bx	lr

08006240 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006240:	b480      	push	{r7}
 8006242:	b09b      	sub	sp, #108	; 0x6c
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006266:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	78db      	ldrb	r3, [r3, #3]
 800626e:	2b03      	cmp	r3, #3
 8006270:	d81f      	bhi.n	80062b2 <USB_ActivateEndpoint+0x72>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <USB_ActivateEndpoint+0x38>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	08006289 	.word	0x08006289
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062bb 	.word	0x080062bb
 8006284:	08006297 	.word	0x08006297
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006288:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800628c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006290:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006294:	e012      	b.n	80062bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006296:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800629a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800629e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80062a2:	e00b      	b.n	80062bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80062b0:	e004      	b.n	80062bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80062b8:	e000      	b.n	80062bc <USB_ActivateEndpoint+0x7c>
      break;
 80062ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	441a      	add	r2, r3
 80062c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062da:	b29b      	uxth	r3, r3
 80062dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	441a      	add	r2, r3
 800630c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006320:	b29b      	uxth	r3, r3
 8006322:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	7b1b      	ldrb	r3, [r3, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f040 8149 	bne.w	80065c0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8084 	beq.w	8006440 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006342:	b29b      	uxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	4413      	add	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	011a      	lsls	r2, r3, #4
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	88db      	ldrh	r3, [r3, #6]
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	b29b      	uxth	r3, r3
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	81fb      	strh	r3, [r7, #14]
 800637a:	89fb      	ldrh	r3, [r7, #14]
 800637c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01b      	beq.n	80063bc <USB_ActivateEndpoint+0x17c>
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639a:	81bb      	strh	r3, [r7, #12]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	89bb      	ldrh	r3, [r7, #12]
 80063a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	78db      	ldrb	r3, [r3, #3]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d020      	beq.n	8006406 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063da:	813b      	strh	r3, [r7, #8]
 80063dc:	893b      	ldrh	r3, [r7, #8]
 80063de:	f083 0320 	eor.w	r3, r3, #32
 80063e2:	813b      	strh	r3, [r7, #8]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	441a      	add	r2, r3
 80063ee:	893b      	ldrh	r3, [r7, #8]
 80063f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006400:	b29b      	uxth	r3, r3
 8006402:	8013      	strh	r3, [r2, #0]
 8006404:	e27f      	b.n	8006906 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641c:	817b      	strh	r3, [r7, #10]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	441a      	add	r2, r3
 8006428:	897b      	ldrh	r3, [r7, #10]
 800642a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800642e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643a:	b29b      	uxth	r3, r3
 800643c:	8013      	strh	r3, [r2, #0]
 800643e:	e262      	b.n	8006906 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644a:	b29b      	uxth	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	4413      	add	r3, r2
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	011a      	lsls	r2, r3, #4
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	4413      	add	r3, r2
 800645e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	88db      	ldrh	r3, [r3, #6]
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	b29b      	uxth	r3, r3
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800647e:	b29b      	uxth	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	4413      	add	r3, r2
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	011a      	lsls	r2, r3, #4
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	4413      	add	r3, r2
 8006492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006496:	623b      	str	r3, [r7, #32]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d112      	bne.n	80064c6 <USB_ActivateEndpoint+0x286>
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064be:	b29a      	uxth	r2, r3
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	e02f      	b.n	8006526 <USB_ActivateEndpoint+0x2e6>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b3e      	cmp	r3, #62	; 0x3e
 80064cc:	d813      	bhi.n	80064f6 <USB_ActivateEndpoint+0x2b6>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	663b      	str	r3, [r7, #96]	; 0x60
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <USB_ActivateEndpoint+0x2a8>
 80064e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e4:	3301      	adds	r3, #1
 80064e6:	663b      	str	r3, [r7, #96]	; 0x60
 80064e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	029b      	lsls	r3, r3, #10
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	e017      	b.n	8006526 <USB_ActivateEndpoint+0x2e6>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	663b      	str	r3, [r7, #96]	; 0x60
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2b00      	cmp	r3, #0
 8006508:	d102      	bne.n	8006510 <USB_ActivateEndpoint+0x2d0>
 800650a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800650c:	3b01      	subs	r3, #1
 800650e:	663b      	str	r3, [r7, #96]	; 0x60
 8006510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006512:	b29b      	uxth	r3, r3
 8006514:	029b      	lsls	r3, r3, #10
 8006516:	b29b      	uxth	r3, r3
 8006518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006520:	b29a      	uxth	r2, r3
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	83fb      	strh	r3, [r7, #30]
 8006534:	8bfb      	ldrh	r3, [r7, #30]
 8006536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d01b      	beq.n	8006576 <USB_ActivateEndpoint+0x336>
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006554:	83bb      	strh	r3, [r7, #28]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	8bbb      	ldrh	r3, [r7, #28]
 8006562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800656e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006572:	b29b      	uxth	r3, r3
 8006574:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658c:	837b      	strh	r3, [r7, #26]
 800658e:	8b7b      	ldrh	r3, [r7, #26]
 8006590:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006594:	837b      	strh	r3, [r7, #26]
 8006596:	8b7b      	ldrh	r3, [r7, #26]
 8006598:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800659c:	837b      	strh	r3, [r7, #26]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	8b7b      	ldrh	r3, [r7, #26]
 80065aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	8013      	strh	r3, [r2, #0]
 80065be:	e1a2      	b.n	8006906 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	441a      	add	r2, r3
 80065e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80065e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006606:	b29b      	uxth	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800660c:	4413      	add	r3, r2
 800660e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	011a      	lsls	r2, r3, #4
 8006616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006618:	4413      	add	r3, r2
 800661a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661e:	657b      	str	r3, [r7, #84]	; 0x54
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	891b      	ldrh	r3, [r3, #8]
 8006624:	085b      	lsrs	r3, r3, #1
 8006626:	b29b      	uxth	r3, r3
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	653b      	str	r3, [r7, #80]	; 0x50
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663a:	b29b      	uxth	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006640:	4413      	add	r3, r2
 8006642:	653b      	str	r3, [r7, #80]	; 0x50
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	011a      	lsls	r2, r3, #4
 800664a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800664c:	4413      	add	r3, r2
 800664e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	895b      	ldrh	r3, [r3, #10]
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	b29b      	uxth	r3, r3
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006662:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f040 8091 	bne.w	8006790 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800667c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800667e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01b      	beq.n	80066be <USB_ActivateEndpoint+0x47e>
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	441a      	add	r2, r3
 80066a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80066aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80066cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01b      	beq.n	800670e <USB_ActivateEndpoint+0x4ce>
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006706:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800670a:	b29b      	uxth	r3, r3
 800670c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006724:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006726:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006728:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800672c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800672e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006730:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006734:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	441a      	add	r2, r3
 8006740:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006752:	b29b      	uxth	r3, r3
 8006754:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676c:	867b      	strh	r3, [r7, #50]	; 0x32
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800677a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678a:	b29b      	uxth	r3, r3
 800678c:	8013      	strh	r3, [r2, #0]
 800678e:	e0ba      	b.n	8006906 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80067a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80067a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01d      	beq.n	80067e8 <USB_ActivateEndpoint+0x5a8>
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	441a      	add	r2, r3
 80067d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80067f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01d      	beq.n	8006840 <USB_ActivateEndpoint+0x600>
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800682c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006838:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800683c:	b29b      	uxth	r3, r3
 800683e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	78db      	ldrb	r3, [r3, #3]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d024      	beq.n	8006892 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006862:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006866:	f083 0320 	eor.w	r3, r3, #32
 800686a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	441a      	add	r2, r3
 8006878:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800687c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688c:	b29b      	uxth	r3, r3
 800688e:	8013      	strh	r3, [r2, #0]
 8006890:	e01d      	b.n	80068ce <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	441a      	add	r2, r3
 80068b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80068ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006906:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800690a:	4618      	mov	r0, r3
 800690c:	376c      	adds	r7, #108	; 0x6c
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr

08006914 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006914:	b480      	push	{r7}
 8006916:	b08d      	sub	sp, #52	; 0x34
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	7b1b      	ldrb	r3, [r3, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f040 808e 	bne.w	8006a44 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d044      	beq.n	80069ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	81bb      	strh	r3, [r7, #12]
 800693e:	89bb      	ldrh	r3, [r7, #12]
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01b      	beq.n	8006980 <USB_DeactivateEndpoint+0x6c>
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	817b      	strh	r3, [r7, #10]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	897b      	ldrh	r3, [r7, #10]
 800696c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006978:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006996:	813b      	strh	r3, [r7, #8]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	893b      	ldrh	r3, [r7, #8]
 80069a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	8013      	strh	r3, [r2, #0]
 80069b8:	e192      	b.n	8006ce0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	827b      	strh	r3, [r7, #18]
 80069c8:	8a7b      	ldrh	r3, [r7, #18]
 80069ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d01b      	beq.n	8006a0a <USB_DeactivateEndpoint+0xf6>
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e8:	823b      	strh	r3, [r7, #16]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	8a3b      	ldrh	r3, [r7, #16]
 80069f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a20:	81fb      	strh	r3, [r7, #14]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	441a      	add	r2, r3
 8006a2c:	89fb      	ldrh	r3, [r7, #14]
 8006a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	8013      	strh	r3, [r2, #0]
 8006a42:	e14d      	b.n	8006ce0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f040 80a5 	bne.w	8006b98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	843b      	strh	r3, [r7, #32]
 8006a5c:	8c3b      	ldrh	r3, [r7, #32]
 8006a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01b      	beq.n	8006a9e <USB_DeactivateEndpoint+0x18a>
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7c:	83fb      	strh	r3, [r7, #30]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	441a      	add	r2, r3
 8006a88:	8bfb      	ldrh	r3, [r7, #30]
 8006a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	83bb      	strh	r3, [r7, #28]
 8006aac:	8bbb      	ldrh	r3, [r7, #28]
 8006aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d01b      	beq.n	8006aee <USB_DeactivateEndpoint+0x1da>
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006acc:	837b      	strh	r3, [r7, #26]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	441a      	add	r2, r3
 8006ad8:	8b7b      	ldrh	r3, [r7, #26]
 8006ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b04:	833b      	strh	r3, [r7, #24]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	441a      	add	r2, r3
 8006b10:	8b3b      	ldrh	r3, [r7, #24]
 8006b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3c:	82fb      	strh	r3, [r7, #22]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	441a      	add	r2, r3
 8006b48:	8afb      	ldrh	r3, [r7, #22]
 8006b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b74:	82bb      	strh	r3, [r7, #20]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	441a      	add	r2, r3
 8006b80:	8abb      	ldrh	r3, [r7, #20]
 8006b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	8013      	strh	r3, [r2, #0]
 8006b96:	e0a3      	b.n	8006ce0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006ba6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01b      	beq.n	8006be8 <USB_DeactivateEndpoint+0x2d4>
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006bf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01b      	beq.n	8006c38 <USB_DeactivateEndpoint+0x324>
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	441a      	add	r2, r3
 8006c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	441a      	add	r2, r3
 8006c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3734      	adds	r7, #52	; 0x34
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b0cc      	sub	sp, #304	; 0x130
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cfa:	6018      	str	r0, [r3, #0]
 8006cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d04:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	f041 817d 	bne.w	8008012 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699a      	ldr	r2, [r3, #24]
 8006d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d908      	bls.n	8006d46 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006d44:	e007      	b.n	8006d56 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	7b1b      	ldrb	r3, [r3, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d152      	bne.n	8006e0c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6959      	ldr	r1, [r3, #20]
 8006d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	88da      	ldrh	r2, [r3, #6]
 8006d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d8c:	6800      	ldr	r0, [r0, #0]
 8006d8e:	f001 ff23 	bl	8008bd8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d96:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006d9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d9e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006da2:	6812      	ldr	r2, [r2, #0]
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	4619      	mov	r1, r3
 8006db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dbc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006dc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006dc4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006dc8:	6812      	ldr	r2, [r2, #0]
 8006dca:	440a      	add	r2, r1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	011a      	lsls	r2, r3, #4
 8006ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4413      	add	r3, r2
 8006de8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	801a      	strh	r2, [r3, #0]
 8006e08:	f001 b8b5 	b.w	8007f76 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	78db      	ldrb	r3, [r3, #3]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	f040 84c6 	bne.w	80077aa <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6a1a      	ldr	r2, [r3, #32]
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	f240 8443 	bls.w	80076c2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e62:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	441a      	add	r2, r3
 8006e80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6a1a      	ldr	r2, [r3, #32]
 8006ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea8:	1ad2      	subs	r2, r2, r3
 8006eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 823e 	beq.w	800735a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006ee6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006eea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f040 809a 	bne.w	8007038 <USB_EPStartXfer+0x34c>
 8006f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f10:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f14:	6812      	ldr	r2, [r2, #0]
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f36:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006f3a:	6812      	ldr	r2, [r2, #0]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	011a      	lsls	r2, r3, #4
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d122      	bne.n	8006fb6 <USB_EPStartXfer+0x2ca>
 8006f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e079      	b.n	80070aa <USB_EPStartXfer+0x3be>
 8006fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fba:	2b3e      	cmp	r3, #62	; 0x3e
 8006fbc:	d81b      	bhi.n	8006ff6 <USB_EPStartXfer+0x30a>
 8006fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <USB_EPStartXfer+0x2f2>
 8006fd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fd8:	3301      	adds	r3, #1
 8006fda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006fde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	029b      	lsls	r3, r3, #10
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	e059      	b.n	80070aa <USB_EPStartXfer+0x3be>
 8006ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007004:	f003 031f 	and.w	r3, r3, #31
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <USB_EPStartXfer+0x32a>
 800700c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007010:	3b01      	subs	r3, #1
 8007012:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007016:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800701a:	b29b      	uxth	r3, r3
 800701c:	029b      	lsls	r3, r3, #10
 800701e:	b29b      	uxth	r3, r3
 8007020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007028:	b29a      	uxth	r2, r3
 800702a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	e038      	b.n	80070aa <USB_EPStartXfer+0x3be>
 8007038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	785b      	ldrb	r3, [r3, #1]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d130      	bne.n	80070aa <USB_EPStartXfer+0x3be>
 8007048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007056:	b29b      	uxth	r3, r3
 8007058:	4619      	mov	r1, r3
 800705a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007062:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007066:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800706a:	6812      	ldr	r2, [r2, #0]
 800706c:	440a      	add	r2, r1
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	011a      	lsls	r2, r3, #4
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4413      	add	r3, r2
 800708a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800708e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709c:	b29a      	uxth	r2, r3
 800709e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	895b      	ldrh	r3, [r3, #10]
 80070b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6959      	ldr	r1, [r3, #20]
 80070c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80070d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80070d8:	6800      	ldr	r0, [r0, #0]
 80070da:	f001 fd7d 	bl	8008bd8 <USB_WritePMA>
            ep->xfer_buff += len;
 80070de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695a      	ldr	r2, [r3, #20]
 80070ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ee:	441a      	add	r2, r3
 80070f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6a1a      	ldr	r2, [r3, #32]
 8007108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	429a      	cmp	r2, r3
 8007116:	d90f      	bls.n	8007138 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6a1a      	ldr	r2, [r3, #32]
 8007124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007128:	1ad2      	subs	r2, r2, r3
 800712a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	621a      	str	r2, [r3, #32]
 8007136:	e00e      	b.n	8007156 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f040 809a 	bne.w	800729c <USB_EPStartXfer+0x5b0>
 8007168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007170:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007174:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718a:	b29b      	uxth	r3, r3
 800718c:	4619      	mov	r1, r3
 800718e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007192:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007196:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800719a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	440a      	add	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	011a      	lsls	r2, r3, #4
 80071b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4413      	add	r3, r2
 80071be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80071c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d122      	bne.n	800721a <USB_EPStartXfer+0x52e>
 80071d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	801a      	strh	r2, [r3, #0]
 80071f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720a:	b29a      	uxth	r2, r3
 800720c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007210:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	801a      	strh	r2, [r3, #0]
 8007218:	e083      	b.n	8007322 <USB_EPStartXfer+0x636>
 800721a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721e:	2b3e      	cmp	r3, #62	; 0x3e
 8007220:	d81b      	bhi.n	800725a <USB_EPStartXfer+0x56e>
 8007222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800722c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d004      	beq.n	8007242 <USB_EPStartXfer+0x556>
 8007238:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800723c:	3301      	adds	r3, #1
 800723e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007242:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007246:	b29b      	uxth	r3, r3
 8007248:	029b      	lsls	r3, r3, #10
 800724a:	b29a      	uxth	r2, r3
 800724c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007250:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	801a      	strh	r2, [r3, #0]
 8007258:	e063      	b.n	8007322 <USB_EPStartXfer+0x636>
 800725a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725e:	095b      	lsrs	r3, r3, #5
 8007260:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	2b00      	cmp	r3, #0
 800726e:	d104      	bne.n	800727a <USB_EPStartXfer+0x58e>
 8007270:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007274:	3b01      	subs	r3, #1
 8007276:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800727a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800727e:	b29b      	uxth	r3, r3
 8007280:	029b      	lsls	r3, r3, #10
 8007282:	b29b      	uxth	r3, r3
 8007284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800728c:	b29a      	uxth	r2, r3
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	801a      	strh	r2, [r3, #0]
 800729a:	e042      	b.n	8007322 <USB_EPStartXfer+0x636>
 800729c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d13a      	bne.n	8007322 <USB_EPStartXfer+0x636>
 80072ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80072b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80072bc:	6812      	ldr	r2, [r2, #0]
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	4619      	mov	r1, r3
 80072d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80072da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80072e2:	6812      	ldr	r2, [r2, #0]
 80072e4:	440a      	add	r2, r1
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	011a      	lsls	r2, r3, #4
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4413      	add	r3, r2
 8007302:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007314:	b29a      	uxth	r2, r3
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	891b      	ldrh	r3, [r3, #8]
 800732e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6959      	ldr	r1, [r3, #20]
 800733e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007342:	b29b      	uxth	r3, r3
 8007344:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007348:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800734c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007350:	6800      	ldr	r0, [r0, #0]
 8007352:	f001 fc41 	bl	8008bd8 <USB_WritePMA>
 8007356:	f000 be0e 	b.w	8007f76 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800735a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d16d      	bne.n	8007446 <USB_EPStartXfer+0x75a>
 800736a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	64bb      	str	r3, [r7, #72]	; 0x48
 8007376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007384:	b29b      	uxth	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800738a:	4413      	add	r3, r2
 800738c:	64bb      	str	r3, [r7, #72]	; 0x48
 800738e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	011a      	lsls	r2, r3, #4
 800739c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800739e:	4413      	add	r3, r2
 80073a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073a4:	647b      	str	r3, [r7, #68]	; 0x44
 80073a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d112      	bne.n	80073d4 <USB_EPStartXfer+0x6e8>
 80073ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d0:	801a      	strh	r2, [r3, #0]
 80073d2:	e063      	b.n	800749c <USB_EPStartXfer+0x7b0>
 80073d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d8:	2b3e      	cmp	r3, #62	; 0x3e
 80073da:	d817      	bhi.n	800740c <USB_EPStartXfer+0x720>
 80073dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e0:	085b      	lsrs	r3, r3, #1
 80073e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80073e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d004      	beq.n	80073fc <USB_EPStartXfer+0x710>
 80073f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073f6:	3301      	adds	r3, #1
 80073f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80073fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007400:	b29b      	uxth	r3, r3
 8007402:	029b      	lsls	r3, r3, #10
 8007404:	b29a      	uxth	r2, r3
 8007406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007408:	801a      	strh	r2, [r3, #0]
 800740a:	e047      	b.n	800749c <USB_EPStartXfer+0x7b0>
 800740c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741a:	f003 031f 	and.w	r3, r3, #31
 800741e:	2b00      	cmp	r3, #0
 8007420:	d104      	bne.n	800742c <USB_EPStartXfer+0x740>
 8007422:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007426:	3b01      	subs	r3, #1
 8007428:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800742c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007430:	b29b      	uxth	r3, r3
 8007432:	029b      	lsls	r3, r3, #10
 8007434:	b29b      	uxth	r3, r3
 8007436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800743a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743e:	b29a      	uxth	r2, r3
 8007440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	e02a      	b.n	800749c <USB_EPStartXfer+0x7b0>
 8007446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d122      	bne.n	800749c <USB_EPStartXfer+0x7b0>
 8007456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	653b      	str	r3, [r7, #80]	; 0x50
 8007462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007466:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007470:	b29b      	uxth	r3, r3
 8007472:	461a      	mov	r2, r3
 8007474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007476:	4413      	add	r3, r2
 8007478:	653b      	str	r3, [r7, #80]	; 0x50
 800747a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	011a      	lsls	r2, r3, #4
 8007488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800748a:	4413      	add	r3, r2
 800748c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007490:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007496:	b29a      	uxth	r2, r3
 8007498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800749c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	891b      	ldrh	r3, [r3, #8]
 80074a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6959      	ldr	r1, [r3, #20]
 80074b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074c2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074c6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	f001 fb84 	bl	8008bd8 <USB_WritePMA>
            ep->xfer_buff += len;
 80074d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695a      	ldr	r2, [r3, #20]
 80074dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e0:	441a      	add	r2, r3
 80074e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6a1a      	ldr	r2, [r3, #32]
 80074fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	429a      	cmp	r2, r3
 8007508:	d90f      	bls.n	800752a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800750a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6a1a      	ldr	r2, [r3, #32]
 8007516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	621a      	str	r2, [r3, #32]
 8007528:	e00e      	b.n	8007548 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800752a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800753a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2200      	movs	r2, #0
 8007546:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	643b      	str	r3, [r7, #64]	; 0x40
 8007554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d16d      	bne.n	8007640 <USB_EPStartXfer+0x954>
 8007564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800757e:	b29b      	uxth	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	4413      	add	r3, r2
 8007586:	63bb      	str	r3, [r7, #56]	; 0x38
 8007588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	011a      	lsls	r2, r3, #4
 8007596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007598:	4413      	add	r3, r2
 800759a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
 80075a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d112      	bne.n	80075ce <USB_EPStartXfer+0x8e2>
 80075a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ca:	801a      	strh	r2, [r3, #0]
 80075cc:	e05d      	b.n	800768a <USB_EPStartXfer+0x99e>
 80075ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d2:	2b3e      	cmp	r3, #62	; 0x3e
 80075d4:	d817      	bhi.n	8007606 <USB_EPStartXfer+0x91a>
 80075d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075da:	085b      	lsrs	r3, r3, #1
 80075dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80075e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d004      	beq.n	80075f6 <USB_EPStartXfer+0x90a>
 80075ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80075f0:	3301      	adds	r3, #1
 80075f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80075f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	029b      	lsls	r3, r3, #10
 80075fe:	b29a      	uxth	r2, r3
 8007600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007602:	801a      	strh	r2, [r3, #0]
 8007604:	e041      	b.n	800768a <USB_EPStartXfer+0x99e>
 8007606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007614:	f003 031f 	and.w	r3, r3, #31
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <USB_EPStartXfer+0x93a>
 800761c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007620:	3b01      	subs	r3, #1
 8007622:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007626:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800762a:	b29b      	uxth	r3, r3
 800762c:	029b      	lsls	r3, r3, #10
 800762e:	b29b      	uxth	r3, r3
 8007630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007638:	b29a      	uxth	r2, r3
 800763a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	e024      	b.n	800768a <USB_EPStartXfer+0x99e>
 8007640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d11c      	bne.n	800768a <USB_EPStartXfer+0x99e>
 8007650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007654:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007664:	4413      	add	r3, r2
 8007666:	643b      	str	r3, [r7, #64]	; 0x40
 8007668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	011a      	lsls	r2, r3, #4
 8007676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007678:	4413      	add	r3, r2
 800767a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007684:	b29a      	uxth	r2, r3
 8007686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007688:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800768a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	895b      	ldrh	r3, [r3, #10]
 8007696:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800769a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6959      	ldr	r1, [r3, #20]
 80076a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076b8:	6800      	ldr	r0, [r0, #0]
 80076ba:	f001 fa8d 	bl	8008bd8 <USB_WritePMA>
 80076be:	f000 bc5a 	b.w	8007f76 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80076c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80076d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80076f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80076fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	441a      	add	r2, r3
 8007716:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800771a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800772a:	b29b      	uxth	r3, r3
 800772c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800772e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800773a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007748:	b29b      	uxth	r3, r3
 800774a:	461a      	mov	r2, r3
 800774c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800774e:	4413      	add	r3, r2
 8007750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	011a      	lsls	r2, r3, #4
 8007760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007762:	4413      	add	r3, r2
 8007764:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007768:	65bb      	str	r3, [r7, #88]	; 0x58
 800776a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800776e:	b29a      	uxth	r2, r3
 8007770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007772:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	891b      	ldrh	r3, [r3, #8]
 8007780:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6959      	ldr	r1, [r3, #20]
 8007790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007794:	b29b      	uxth	r3, r3
 8007796:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800779a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800779e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077a2:	6800      	ldr	r0, [r0, #0]
 80077a4:	f001 fa18 	bl	8008bd8 <USB_WritePMA>
 80077a8:	e3e5      	b.n	8007f76 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80077aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80077d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	441a      	add	r2, r3
 80077ee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80077f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80077fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007802:	b29b      	uxth	r3, r3
 8007804:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6a1a      	ldr	r2, [r3, #32]
 8007812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007816:	1ad2      	subs	r2, r2, r3
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 81bc 	beq.w	8007bc4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800784c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800785a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d16d      	bne.n	8007946 <USB_EPStartXfer+0xc5a>
 800786a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	67bb      	str	r3, [r7, #120]	; 0x78
 8007876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007884:	b29b      	uxth	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788a:	4413      	add	r3, r2
 800788c:	67bb      	str	r3, [r7, #120]	; 0x78
 800788e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	011a      	lsls	r2, r3, #4
 800789c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800789e:	4413      	add	r3, r2
 80078a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078a4:	677b      	str	r3, [r7, #116]	; 0x74
 80078a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d112      	bne.n	80078d4 <USB_EPStartXfer+0xbe8>
 80078ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d0:	801a      	strh	r2, [r3, #0]
 80078d2:	e060      	b.n	8007996 <USB_EPStartXfer+0xcaa>
 80078d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d8:	2b3e      	cmp	r3, #62	; 0x3e
 80078da:	d817      	bhi.n	800790c <USB_EPStartXfer+0xc20>
 80078dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e0:	085b      	lsrs	r3, r3, #1
 80078e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <USB_EPStartXfer+0xc10>
 80078f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078f6:	3301      	adds	r3, #1
 80078f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007900:	b29b      	uxth	r3, r3
 8007902:	029b      	lsls	r3, r3, #10
 8007904:	b29a      	uxth	r2, r3
 8007906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007908:	801a      	strh	r2, [r3, #0]
 800790a:	e044      	b.n	8007996 <USB_EPStartXfer+0xcaa>
 800790c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007910:	095b      	lsrs	r3, r3, #5
 8007912:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791a:	f003 031f 	and.w	r3, r3, #31
 800791e:	2b00      	cmp	r3, #0
 8007920:	d104      	bne.n	800792c <USB_EPStartXfer+0xc40>
 8007922:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007926:	3b01      	subs	r3, #1
 8007928:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800792c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007930:	b29b      	uxth	r3, r3
 8007932:	029b      	lsls	r3, r3, #10
 8007934:	b29b      	uxth	r3, r3
 8007936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800793a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800793e:	b29a      	uxth	r2, r3
 8007940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007942:	801a      	strh	r2, [r3, #0]
 8007944:	e027      	b.n	8007996 <USB_EPStartXfer+0xcaa>
 8007946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d11f      	bne.n	8007996 <USB_EPStartXfer+0xcaa>
 8007956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007964:	b29b      	uxth	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800796c:	4413      	add	r3, r2
 800796e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	011a      	lsls	r2, r3, #4
 8007980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007984:	4413      	add	r3, r2
 8007986:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800798a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800798c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007990:	b29a      	uxth	r2, r3
 8007992:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007994:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	895b      	ldrh	r3, [r3, #10]
 80079a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6959      	ldr	r1, [r3, #20]
 80079b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079bc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80079c0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80079c4:	6800      	ldr	r0, [r0, #0]
 80079c6:	f001 f907 	bl	8008bd8 <USB_WritePMA>
          ep->xfer_buff += len;
 80079ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079da:	441a      	add	r2, r3
 80079dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80079e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6a1a      	ldr	r2, [r3, #32]
 80079f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d90f      	bls.n	8007a24 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6a1a      	ldr	r2, [r3, #32]
 8007a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a14:	1ad2      	subs	r2, r2, r3
 8007a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	621a      	str	r2, [r3, #32]
 8007a22:	e00e      	b.n	8007a42 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 8295 	beq.w	8007f76 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d16d      	bne.n	8007b38 <USB_EPStartXfer+0xe4c>
 8007a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a7c:	4413      	add	r3, r2
 8007a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	011a      	lsls	r2, r3, #4
 8007a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a90:	4413      	add	r3, r2
 8007a92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a96:	667b      	str	r3, [r7, #100]	; 0x64
 8007a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d112      	bne.n	8007ac6 <USB_EPStartXfer+0xdda>
 8007aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aae:	801a      	strh	r2, [r3, #0]
 8007ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac2:	801a      	strh	r2, [r3, #0]
 8007ac4:	e063      	b.n	8007b8e <USB_EPStartXfer+0xea2>
 8007ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aca:	2b3e      	cmp	r3, #62	; 0x3e
 8007acc:	d817      	bhi.n	8007afe <USB_EPStartXfer+0xe12>
 8007ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad2:	085b      	lsrs	r3, r3, #1
 8007ad4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <USB_EPStartXfer+0xe02>
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae8:	3301      	adds	r3, #1
 8007aea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	029b      	lsls	r3, r3, #10
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007afa:	801a      	strh	r2, [r3, #0]
 8007afc:	e047      	b.n	8007b8e <USB_EPStartXfer+0xea2>
 8007afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b02:	095b      	lsrs	r3, r3, #5
 8007b04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b0c:	f003 031f 	and.w	r3, r3, #31
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d104      	bne.n	8007b1e <USB_EPStartXfer+0xe32>
 8007b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	029b      	lsls	r3, r3, #10
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b34:	801a      	strh	r2, [r3, #0]
 8007b36:	e02a      	b.n	8007b8e <USB_EPStartXfer+0xea2>
 8007b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	785b      	ldrb	r3, [r3, #1]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d122      	bne.n	8007b8e <USB_EPStartXfer+0xea2>
 8007b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	673b      	str	r3, [r7, #112]	; 0x70
 8007b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b68:	4413      	add	r3, r2
 8007b6a:	673b      	str	r3, [r7, #112]	; 0x70
 8007b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	011a      	lsls	r2, r3, #4
 8007b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	891b      	ldrh	r3, [r3, #8]
 8007b9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6959      	ldr	r1, [r3, #20]
 8007baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007bb4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007bb8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007bbc:	6800      	ldr	r0, [r0, #0]
 8007bbe:	f001 f80b 	bl	8008bd8 <USB_WritePMA>
 8007bc2:	e1d8      	b.n	8007f76 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d178      	bne.n	8007cc6 <USB_EPStartXfer+0xfda>
 8007bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	011a      	lsls	r2, r3, #4
 8007c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c10:	4413      	add	r3, r2
 8007c12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d116      	bne.n	8007c50 <USB_EPStartXfer+0xf64>
 8007c22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c34:	801a      	strh	r2, [r3, #0]
 8007c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c4c:	801a      	strh	r2, [r3, #0]
 8007c4e:	e06b      	b.n	8007d28 <USB_EPStartXfer+0x103c>
 8007c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c54:	2b3e      	cmp	r3, #62	; 0x3e
 8007c56:	d818      	bhi.n	8007c8a <USB_EPStartXfer+0xf9e>
 8007c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5c:	085b      	lsrs	r3, r3, #1
 8007c5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <USB_EPStartXfer+0xf8c>
 8007c6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c72:	3301      	adds	r3, #1
 8007c74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	029b      	lsls	r3, r3, #10
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	e04e      	b.n	8007d28 <USB_EPStartXfer+0x103c>
 8007c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c98:	f003 031f 	and.w	r3, r3, #31
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d104      	bne.n	8007caa <USB_EPStartXfer+0xfbe>
 8007ca0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007caa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	029b      	lsls	r3, r3, #10
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cc2:	801a      	strh	r2, [r3, #0]
 8007cc4:	e030      	b.n	8007d28 <USB_EPStartXfer+0x103c>
 8007cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d128      	bne.n	8007d28 <USB_EPStartXfer+0x103c>
 8007cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	011a      	lsls	r2, r3, #4
 8007d0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d12:	4413      	add	r3, r2
 8007d14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	891b      	ldrh	r3, [r3, #8]
 8007d34:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6959      	ldr	r1, [r3, #20]
 8007d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d4e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d52:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d56:	6800      	ldr	r0, [r0, #0]
 8007d58:	f000 ff3e 	bl	8008bd8 <USB_WritePMA>
          ep->xfer_buff += len;
 8007d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695a      	ldr	r2, [r3, #20]
 8007d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6c:	441a      	add	r2, r3
 8007d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6a1a      	ldr	r2, [r3, #32]
 8007d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d90f      	bls.n	8007db6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6a1a      	ldr	r2, [r3, #32]
 8007da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da6:	1ad2      	subs	r2, r2, r3
 8007da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	621a      	str	r2, [r3, #32]
 8007db4:	e00e      	b.n	8007dd4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80cc 	beq.w	8007f76 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d178      	bne.n	8007eee <USB_EPStartXfer+0x1202>
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e20:	4413      	add	r3, r2
 8007e22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	011a      	lsls	r2, r3, #4
 8007e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e38:	4413      	add	r3, r2
 8007e3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d116      	bne.n	8007e78 <USB_EPStartXfer+0x118c>
 8007e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	e064      	b.n	8007f42 <USB_EPStartXfer+0x1256>
 8007e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e7e:	d818      	bhi.n	8007eb2 <USB_EPStartXfer+0x11c6>
 8007e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e84:	085b      	lsrs	r3, r3, #1
 8007e86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d004      	beq.n	8007ea0 <USB_EPStartXfer+0x11b4>
 8007e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	029b      	lsls	r3, r3, #10
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007eae:	801a      	strh	r2, [r3, #0]
 8007eb0:	e047      	b.n	8007f42 <USB_EPStartXfer+0x1256>
 8007eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <USB_EPStartXfer+0x11e6>
 8007ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	029b      	lsls	r3, r3, #10
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007eea:	801a      	strh	r2, [r3, #0]
 8007eec:	e029      	b.n	8007f42 <USB_EPStartXfer+0x1256>
 8007eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d121      	bne.n	8007f42 <USB_EPStartXfer+0x1256>
 8007efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f14:	4413      	add	r3, r2
 8007f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	011a      	lsls	r2, r3, #4
 8007f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	895b      	ldrh	r3, [r3, #10]
 8007f4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6959      	ldr	r1, [r3, #20]
 8007f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f70:	6800      	ldr	r0, [r0, #0]
 8007f72:	f000 fe31 	bl	8008bd8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f98:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa4:	8013      	strh	r3, [r2, #0]
 8007fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007faa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007fae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fb2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007fb6:	8812      	ldrh	r2, [r2, #0]
 8007fb8:	f082 0210 	eor.w	r2, r2, #16
 8007fbc:	801a      	strh	r2, [r3, #0]
 8007fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007fc6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fca:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007fce:	8812      	ldrh	r2, [r2, #0]
 8007fd0:	f082 0220 	eor.w	r2, r2, #32
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	441a      	add	r2, r3
 8007ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800a:	b29b      	uxth	r3, r3
 800800c:	8013      	strh	r3, [r2, #0]
 800800e:	f000 bc9f 	b.w	8008950 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	7b1b      	ldrb	r3, [r3, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f040 80ae 	bne.w	8008180 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	699a      	ldr	r2, [r3, #24]
 8008030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	429a      	cmp	r2, r3
 800803e:	d917      	bls.n	8008070 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699a      	ldr	r2, [r3, #24]
 800805c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008060:	1ad2      	subs	r2, r2, r3
 8008062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	619a      	str	r2, [r3, #24]
 800806e:	e00e      	b.n	800808e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800808e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008092:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800809c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080b2:	4413      	add	r3, r2
 80080b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	011a      	lsls	r2, r3, #4
 80080c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080ca:	4413      	add	r3, r2
 80080cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d116      	bne.n	800810a <USB_EPStartXfer+0x141e>
 80080dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008100:	b29a      	uxth	r2, r3
 8008102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	e3e8      	b.n	80088dc <USB_EPStartXfer+0x1bf0>
 800810a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810e:	2b3e      	cmp	r3, #62	; 0x3e
 8008110:	d818      	bhi.n	8008144 <USB_EPStartXfer+0x1458>
 8008112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008116:	085b      	lsrs	r3, r3, #1
 8008118:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800811c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d004      	beq.n	8008132 <USB_EPStartXfer+0x1446>
 8008128:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800812c:	3301      	adds	r3, #1
 800812e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008132:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008136:	b29b      	uxth	r3, r3
 8008138:	029b      	lsls	r3, r3, #10
 800813a:	b29a      	uxth	r2, r3
 800813c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e3cb      	b.n	80088dc <USB_EPStartXfer+0x1bf0>
 8008144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008148:	095b      	lsrs	r3, r3, #5
 800814a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800814e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008152:	f003 031f 	and.w	r3, r3, #31
 8008156:	2b00      	cmp	r3, #0
 8008158:	d104      	bne.n	8008164 <USB_EPStartXfer+0x1478>
 800815a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800815e:	3b01      	subs	r3, #1
 8008160:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008164:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008168:	b29b      	uxth	r3, r3
 800816a:	029b      	lsls	r3, r3, #10
 800816c:	b29b      	uxth	r3, r3
 800816e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008176:	b29a      	uxth	r2, r3
 8008178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800817c:	801a      	strh	r2, [r3, #0]
 800817e:	e3ad      	b.n	80088dc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	78db      	ldrb	r3, [r3, #3]
 800818c:	2b02      	cmp	r3, #2
 800818e:	f040 8200 	bne.w	8008592 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f040 8091 	bne.w	80082c6 <USB_EPStartXfer+0x15da>
 80081a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081c8:	4413      	add	r3, r2
 80081ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	011a      	lsls	r2, r3, #4
 80081dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081e0:	4413      	add	r3, r2
 80081e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d116      	bne.n	8008228 <USB_EPStartXfer+0x153c>
 80081fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008206:	b29a      	uxth	r2, r3
 8008208:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	b29b      	uxth	r3, r3
 8008216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800821a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821e:	b29a      	uxth	r2, r3
 8008220:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008224:	801a      	strh	r2, [r3, #0]
 8008226:	e083      	b.n	8008330 <USB_EPStartXfer+0x1644>
 8008228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b3e      	cmp	r3, #62	; 0x3e
 8008236:	d820      	bhi.n	800827a <USB_EPStartXfer+0x158e>
 8008238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800824a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d004      	beq.n	8008268 <USB_EPStartXfer+0x157c>
 800825e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008262:	3301      	adds	r3, #1
 8008264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800826c:	b29b      	uxth	r3, r3
 800826e:	029b      	lsls	r3, r3, #10
 8008270:	b29a      	uxth	r2, r3
 8008272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008276:	801a      	strh	r2, [r3, #0]
 8008278:	e05a      	b.n	8008330 <USB_EPStartXfer+0x1644>
 800827a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800827e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800828c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	f003 031f 	and.w	r3, r3, #31
 800829c:	2b00      	cmp	r3, #0
 800829e:	d104      	bne.n	80082aa <USB_EPStartXfer+0x15be>
 80082a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a4:	3b01      	subs	r3, #1
 80082a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	029b      	lsls	r3, r3, #10
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082bc:	b29a      	uxth	r2, r3
 80082be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082c2:	801a      	strh	r2, [r3, #0]
 80082c4:	e034      	b.n	8008330 <USB_EPStartXfer+0x1644>
 80082c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d12c      	bne.n	8008330 <USB_EPStartXfer+0x1644>
 80082d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082fa:	4413      	add	r3, r2
 80082fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	011a      	lsls	r2, r3, #4
 800830e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008312:	4413      	add	r3, r2
 8008314:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800831c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	b29a      	uxth	r2, r3
 800832a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800832e:	801a      	strh	r2, [r3, #0]
 8008330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800833e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	785b      	ldrb	r3, [r3, #1]
 800834a:	2b00      	cmp	r3, #0
 800834c:	f040 8091 	bne.w	8008472 <USB_EPStartXfer+0x1786>
 8008350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008354:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800835e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800836c:	b29b      	uxth	r3, r3
 800836e:	461a      	mov	r2, r3
 8008370:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008374:	4413      	add	r3, r2
 8008376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800837a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	011a      	lsls	r2, r3, #4
 8008388:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800838c:	4413      	add	r3, r2
 800838e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008392:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800839a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d116      	bne.n	80083d4 <USB_EPStartXfer+0x16e8>
 80083a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083d0:	801a      	strh	r2, [r3, #0]
 80083d2:	e07c      	b.n	80084ce <USB_EPStartXfer+0x17e2>
 80083d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b3e      	cmp	r3, #62	; 0x3e
 80083e2:	d820      	bhi.n	8008426 <USB_EPStartXfer+0x173a>
 80083e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	085b      	lsrs	r3, r3, #1
 80083f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	d004      	beq.n	8008414 <USB_EPStartXfer+0x1728>
 800840a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800840e:	3301      	adds	r3, #1
 8008410:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008414:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008418:	b29b      	uxth	r3, r3
 800841a:	029b      	lsls	r3, r3, #10
 800841c:	b29a      	uxth	r2, r3
 800841e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	e053      	b.n	80084ce <USB_EPStartXfer+0x17e2>
 8008426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	f003 031f 	and.w	r3, r3, #31
 8008448:	2b00      	cmp	r3, #0
 800844a:	d104      	bne.n	8008456 <USB_EPStartXfer+0x176a>
 800844c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008450:	3b01      	subs	r3, #1
 8008452:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008456:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800845a:	b29b      	uxth	r3, r3
 800845c:	029b      	lsls	r3, r3, #10
 800845e:	b29b      	uxth	r3, r3
 8008460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008468:	b29a      	uxth	r2, r3
 800846a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800846e:	801a      	strh	r2, [r3, #0]
 8008470:	e02d      	b.n	80084ce <USB_EPStartXfer+0x17e2>
 8008472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	785b      	ldrb	r3, [r3, #1]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d125      	bne.n	80084ce <USB_EPStartXfer+0x17e2>
 8008482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008490:	b29b      	uxth	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008498:	4413      	add	r3, r2
 800849a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800849e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	011a      	lsls	r2, r3, #4
 80084ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084b0:	4413      	add	r3, r2
 80084b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084cc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80084ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 81fe 	beq.w	80088dc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80084e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008500:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <USB_EPStartXfer+0x182c>
 800850c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10d      	bne.n	8008534 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008518:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800851c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008520:	2b00      	cmp	r3, #0
 8008522:	f040 81db 	bne.w	80088dc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008526:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800852a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852e:	2b00      	cmp	r3, #0
 8008530:	f040 81d4 	bne.w	80088dc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008538:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800855e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008562:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800856c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	441a      	add	r2, r3
 8008578:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800857c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008588:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800858c:	b29b      	uxth	r3, r3
 800858e:	8013      	strh	r3, [r2, #0]
 8008590:	e1a4      	b.n	80088dc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	78db      	ldrb	r3, [r3, #3]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	f040 819a 	bne.w	80088d8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80085a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d917      	bls.n	80085f0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80085c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80085d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	699a      	ldr	r2, [r3, #24]
 80085dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e0:	1ad2      	subs	r2, r2, r3
 80085e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	619a      	str	r2, [r3, #24]
 80085ee:	e00e      	b.n	800860e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80085f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800860e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d178      	bne.n	8008710 <USB_EPStartXfer+0x1a24>
 800861e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800862c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008630:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863a:	b29b      	uxth	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008642:	4413      	add	r3, r2
 8008644:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	011a      	lsls	r2, r3, #4
 8008656:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800865a:	4413      	add	r3, r2
 800865c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008660:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008668:	2b00      	cmp	r3, #0
 800866a:	d116      	bne.n	800869a <USB_EPStartXfer+0x19ae>
 800866c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	b29b      	uxth	r3, r3
 8008674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008678:	b29a      	uxth	r2, r3
 800867a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800867e:	801a      	strh	r2, [r3, #0]
 8008680:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800868c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008690:	b29a      	uxth	r2, r3
 8008692:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	e06b      	b.n	8008772 <USB_EPStartXfer+0x1a86>
 800869a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869e:	2b3e      	cmp	r3, #62	; 0x3e
 80086a0:	d818      	bhi.n	80086d4 <USB_EPStartXfer+0x19e8>
 80086a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <USB_EPStartXfer+0x19d6>
 80086b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086bc:	3301      	adds	r3, #1
 80086be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	029b      	lsls	r3, r3, #10
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086d0:	801a      	strh	r2, [r3, #0]
 80086d2:	e04e      	b.n	8008772 <USB_EPStartXfer+0x1a86>
 80086d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d8:	095b      	lsrs	r3, r3, #5
 80086da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e2:	f003 031f 	and.w	r3, r3, #31
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d104      	bne.n	80086f4 <USB_EPStartXfer+0x1a08>
 80086ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086ee:	3b01      	subs	r3, #1
 80086f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	029b      	lsls	r3, r3, #10
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008706:	b29a      	uxth	r2, r3
 8008708:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800870c:	801a      	strh	r2, [r3, #0]
 800870e:	e030      	b.n	8008772 <USB_EPStartXfer+0x1a86>
 8008710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d128      	bne.n	8008772 <USB_EPStartXfer+0x1a86>
 8008720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800872e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800873c:	b29b      	uxth	r3, r3
 800873e:	461a      	mov	r2, r3
 8008740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008744:	4413      	add	r3, r2
 8008746:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800874a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	011a      	lsls	r2, r3, #4
 8008758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875c:	4413      	add	r3, r2
 800875e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008762:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800876a:	b29a      	uxth	r2, r3
 800876c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008770:	801a      	strh	r2, [r3, #0]
 8008772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d178      	bne.n	8008882 <USB_EPStartXfer+0x1b96>
 8008790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800879e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	461a      	mov	r2, r3
 80087b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087b4:	4413      	add	r3, r2
 80087b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	011a      	lsls	r2, r3, #4
 80087c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087cc:	4413      	add	r3, r2
 80087ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d116      	bne.n	800880c <USB_EPStartXfer+0x1b20>
 80087de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008802:	b29a      	uxth	r2, r3
 8008804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008808:	801a      	strh	r2, [r3, #0]
 800880a:	e067      	b.n	80088dc <USB_EPStartXfer+0x1bf0>
 800880c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008810:	2b3e      	cmp	r3, #62	; 0x3e
 8008812:	d818      	bhi.n	8008846 <USB_EPStartXfer+0x1b5a>
 8008814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008818:	085b      	lsrs	r3, r3, #1
 800881a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800881e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <USB_EPStartXfer+0x1b48>
 800882a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800882e:	3301      	adds	r3, #1
 8008830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008838:	b29b      	uxth	r3, r3
 800883a:	029b      	lsls	r3, r3, #10
 800883c:	b29a      	uxth	r2, r3
 800883e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	e04a      	b.n	80088dc <USB_EPStartXfer+0x1bf0>
 8008846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884a:	095b      	lsrs	r3, r3, #5
 800884c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	2b00      	cmp	r3, #0
 800885a:	d104      	bne.n	8008866 <USB_EPStartXfer+0x1b7a>
 800885c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008860:	3b01      	subs	r3, #1
 8008862:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800886a:	b29b      	uxth	r3, r3
 800886c:	029b      	lsls	r3, r3, #10
 800886e:	b29b      	uxth	r3, r3
 8008870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008878:	b29a      	uxth	r2, r3
 800887a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800887e:	801a      	strh	r2, [r3, #0]
 8008880:	e02c      	b.n	80088dc <USB_EPStartXfer+0x1bf0>
 8008882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	785b      	ldrb	r3, [r3, #1]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d124      	bne.n	80088dc <USB_EPStartXfer+0x1bf0>
 8008892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008896:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	461a      	mov	r2, r3
 80088a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a8:	4413      	add	r3, r2
 80088aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	011a      	lsls	r2, r3, #4
 80088bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c0:	4413      	add	r3, r2
 80088c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d4:	801a      	strh	r2, [r3, #0]
 80088d6:	e001      	b.n	80088dc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e03a      	b.n	8008952 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008902:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008906:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800890a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800890e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008912:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008916:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800891a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800891e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	441a      	add	r2, r3
 8008938:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800893c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894c:	b29b      	uxth	r3, r3
 800894e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	785b      	ldrb	r3, [r3, #1]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d020      	beq.n	80089b0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	b29b      	uxth	r3, r3
 800897c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008984:	81bb      	strh	r3, [r7, #12]
 8008986:	89bb      	ldrh	r3, [r7, #12]
 8008988:	f083 0310 	eor.w	r3, r3, #16
 800898c:	81bb      	strh	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	441a      	add	r2, r3
 8008998:	89bb      	ldrh	r3, [r7, #12]
 800899a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800899e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	8013      	strh	r3, [r2, #0]
 80089ae:	e01f      	b.n	80089f0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c6:	81fb      	strh	r3, [r7, #14]
 80089c8:	89fb      	ldrh	r3, [r7, #14]
 80089ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089ce:	81fb      	strh	r3, [r7, #14]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	441a      	add	r2, r3
 80089da:	89fb      	ldrh	r3, [r7, #14]
 80089dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc80      	pop	{r7}
 80089fa:	4770      	bx	lr

080089fc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	7b1b      	ldrb	r3, [r3, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f040 809d 	bne.w	8008b4a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	785b      	ldrb	r3, [r3, #1]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d04c      	beq.n	8008ab2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	823b      	strh	r3, [r7, #16]
 8008a26:	8a3b      	ldrh	r3, [r7, #16]
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d01b      	beq.n	8008a68 <USB_EPClearStall+0x6c>
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a46:	81fb      	strh	r3, [r7, #14]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	441a      	add	r2, r3
 8008a52:	89fb      	ldrh	r3, [r7, #14]
 8008a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	78db      	ldrb	r3, [r3, #3]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d06c      	beq.n	8008b4a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a86:	81bb      	strh	r3, [r7, #12]
 8008a88:	89bb      	ldrh	r3, [r7, #12]
 8008a8a:	f083 0320 	eor.w	r3, r3, #32
 8008a8e:	81bb      	strh	r3, [r7, #12]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	441a      	add	r2, r3
 8008a9a:	89bb      	ldrh	r3, [r7, #12]
 8008a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	8013      	strh	r3, [r2, #0]
 8008ab0:	e04b      	b.n	8008b4a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	82fb      	strh	r3, [r7, #22]
 8008ac0:	8afb      	ldrh	r3, [r7, #22]
 8008ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d01b      	beq.n	8008b02 <USB_EPClearStall+0x106>
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae0:	82bb      	strh	r3, [r7, #20]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	441a      	add	r2, r3
 8008aec:	8abb      	ldrh	r3, [r7, #20]
 8008aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b18:	827b      	strh	r3, [r7, #18]
 8008b1a:	8a7b      	ldrh	r3, [r7, #18]
 8008b1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b20:	827b      	strh	r3, [r7, #18]
 8008b22:	8a7b      	ldrh	r3, [r7, #18]
 8008b24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b28:	827b      	strh	r3, [r7, #18]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	441a      	add	r2, r3
 8008b34:	8a7b      	ldrh	r3, [r7, #18]
 8008b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d103      	bne.n	8008b70 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2280      	movs	r2, #128	; 0x80
 8008b6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bc80      	pop	{r7}
 8008b7a:	4770      	bx	lr

08008b7c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr

08008b90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bc80      	pop	{r7}
 8008ba2:	4770      	bx	lr

08008ba4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bc80      	pop	{r7}
 8008bc0:	4770      	bx	lr

08008bc2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr

08008bd8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b08d      	sub	sp, #52	; 0x34
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4611      	mov	r1, r2
 8008be4:	461a      	mov	r2, r3
 8008be6:	460b      	mov	r3, r1
 8008be8:	80fb      	strh	r3, [r7, #6]
 8008bea:	4613      	mov	r3, r2
 8008bec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008bee:	88bb      	ldrh	r3, [r7, #4]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	085b      	lsrs	r3, r3, #1
 8008bf4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bfe:	88fb      	ldrh	r3, [r7, #6]
 8008c00:	005a      	lsls	r2, r3, #1
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c0a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c10:	e01e      	b.n	8008c50 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	021b      	lsls	r3, r3, #8
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	461a      	mov	r2, r3
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	3302      	adds	r3, #2
 8008c3c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	3302      	adds	r3, #2
 8008c42:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	3301      	adds	r3, #1
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1dd      	bne.n	8008c12 <USB_WritePMA+0x3a>
  }
}
 8008c56:	bf00      	nop
 8008c58:	bf00      	nop
 8008c5a:	3734      	adds	r7, #52	; 0x34
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bc80      	pop	{r7}
 8008c60:	4770      	bx	lr

08008c62 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b08b      	sub	sp, #44	; 0x2c
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	461a      	mov	r2, r3
 8008c70:	460b      	mov	r3, r1
 8008c72:	80fb      	strh	r3, [r7, #6]
 8008c74:	4613      	mov	r3, r2
 8008c76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c78:	88bb      	ldrh	r3, [r7, #4]
 8008c7a:	085b      	lsrs	r3, r3, #1
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c88:	88fb      	ldrh	r3, [r7, #6]
 8008c8a:	005a      	lsls	r2, r3, #1
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c94:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9a:	e01b      	b.n	8008cd4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	3302      	adds	r3, #2
 8008ca8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	0a1b      	lsrs	r3, r3, #8
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	3302      	adds	r3, #2
 8008ccc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e0      	bne.n	8008c9c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008cda:	88bb      	ldrh	r3, [r7, #4]
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d007      	beq.n	8008cf6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	701a      	strb	r2, [r3, #0]
  }
}
 8008cf6:	bf00      	nop
 8008cf8:	372c      	adds	r7, #44	; 0x2c
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bc80      	pop	{r7}
 8008cfe:	4770      	bx	lr

08008d00 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008d10:	2340      	movs	r3, #64	; 0x40
 8008d12:	2203      	movs	r2, #3
 8008d14:	2181      	movs	r1, #129	; 0x81
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 fd47 	bl	800a7aa <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008d22:	2340      	movs	r3, #64	; 0x40
 8008d24:	2203      	movs	r2, #3
 8008d26:	2101      	movs	r1, #1
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 fd3e 	bl	800a7aa <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008d36:	2054      	movs	r0, #84	; 0x54
 8008d38:	f001 fe4c 	bl	800a9d4 <USBD_static_malloc>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d102      	bne.n	8008d54 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	73fb      	strb	r3, [r7, #15]
 8008d52:	e012      	b.n	8008d7a <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	2340      	movs	r3, #64	; 0x40
 8008d72:	2101      	movs	r1, #1
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fe09 	bl	800a98c <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008d90:	2181      	movs	r1, #129	; 0x81
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fd2f 	bl	800a7f6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008d9e:	2101      	movs	r1, #1
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 fd28 	bl	800a7f6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00e      	beq.n	8008dd6 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f001 fe0f 	bl	800a9ec <USBD_static_free>
    pdev->pClassData = NULL;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d051      	beq.n	8008eb2 <USBD_CUSTOM_HID_Setup+0xd2>
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	f040 80d8 	bne.w	8008fc4 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	785b      	ldrb	r3, [r3, #1]
 8008e18:	3b02      	subs	r3, #2
 8008e1a:	2b09      	cmp	r3, #9
 8008e1c:	d841      	bhi.n	8008ea2 <USBD_CUSTOM_HID_Setup+0xc2>
 8008e1e:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <USBD_CUSTOM_HID_Setup+0x44>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008e7d 	.word	0x08008e7d
 8008e28:	08008e5b 	.word	0x08008e5b
 8008e2c:	08008ea3 	.word	0x08008ea3
 8008e30:	08008ea3 	.word	0x08008ea3
 8008e34:	08008ea3 	.word	0x08008ea3
 8008e38:	08008ea3 	.word	0x08008ea3
 8008e3c:	08008ea3 	.word	0x08008ea3
 8008e40:	08008e8d 	.word	0x08008e8d
 8008e44:	08008e6b 	.word	0x08008e6b
 8008e48:	08008e4d 	.word	0x08008e4d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	885b      	ldrh	r3, [r3, #2]
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8008e58:	e02a      	b.n	8008eb0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	3340      	adds	r3, #64	; 0x40
 8008e5e:	2201      	movs	r2, #1
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f001 f999 	bl	800a19a <USBD_CtlSendData>
          break;
 8008e68:	e022      	b.n	8008eb0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	0a1b      	lsrs	r3, r3, #8
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8008e7a:	e019      	b.n	8008eb0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	3344      	adds	r3, #68	; 0x44
 8008e80:	2201      	movs	r2, #1
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f001 f988 	bl	800a19a <USBD_CtlSendData>
          break;
 8008e8a:	e011      	b.n	8008eb0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008e92:	6939      	ldr	r1, [r7, #16]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	88db      	ldrh	r3, [r3, #6]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f001 f9ab 	bl	800a1f6 <USBD_CtlPrepareRx>
          break;
 8008ea0:	e006      	b.n	8008eb0 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f001 f90e 	bl	800a0c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008eaa:	2302      	movs	r3, #2
 8008eac:	75fb      	strb	r3, [r7, #23]
          break;
 8008eae:	bf00      	nop
      }
      break;
 8008eb0:	e08f      	b.n	8008fd2 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	2b0b      	cmp	r3, #11
 8008eb8:	d87c      	bhi.n	8008fb4 <USBD_CUSTOM_HID_Setup+0x1d4>
 8008eba:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008ef1 	.word	0x08008ef1
 8008ec4:	08008fb5 	.word	0x08008fb5
 8008ec8:	08008fb5 	.word	0x08008fb5
 8008ecc:	08008fb5 	.word	0x08008fb5
 8008ed0:	08008fb5 	.word	0x08008fb5
 8008ed4:	08008fb5 	.word	0x08008fb5
 8008ed8:	08008f19 	.word	0x08008f19
 8008edc:	08008fb5 	.word	0x08008fb5
 8008ee0:	08008fb5 	.word	0x08008fb5
 8008ee4:	08008fb5 	.word	0x08008fb5
 8008ee8:	08008f67 	.word	0x08008f67
 8008eec:	08008f8f 	.word	0x08008f8f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d107      	bne.n	8008f0a <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008efa:	f107 030e 	add.w	r3, r7, #14
 8008efe:	2202      	movs	r2, #2
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 f949 	bl	800a19a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f08:	e05b      	b.n	8008fc2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 f8da 	bl	800a0c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f12:	2302      	movs	r3, #2
 8008f14:	75fb      	strb	r3, [r7, #23]
          break;
 8008f16:	e054      	b.n	8008fc2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	885b      	ldrh	r3, [r3, #2]
 8008f1c:	0a1b      	lsrs	r3, r3, #8
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	2b22      	cmp	r3, #34	; 0x22
 8008f22:	d10b      	bne.n	8008f3c <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	88db      	ldrh	r3, [r3, #6]
 8008f28:	2b1d      	cmp	r3, #29
 8008f2a:	bf28      	it	cs
 8008f2c:	231d      	movcs	r3, #29
 8008f2e:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	61bb      	str	r3, [r7, #24]
 8008f3a:	e00d      	b.n	8008f58 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	885b      	ldrh	r3, [r3, #2]
 8008f40:	0a1b      	lsrs	r3, r3, #8
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	2b21      	cmp	r3, #33	; 0x21
 8008f46:	d107      	bne.n	8008f58 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008f48:	4b24      	ldr	r3, [pc, #144]	; (8008fdc <USBD_CUSTOM_HID_Setup+0x1fc>)
 8008f4a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	88db      	ldrh	r3, [r3, #6]
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	bf28      	it	cs
 8008f54:	2309      	movcs	r3, #9
 8008f56:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008f58:	8bfb      	ldrh	r3, [r7, #30]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	69b9      	ldr	r1, [r7, #24]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 f91b 	bl	800a19a <USBD_CtlSendData>
          break;
 8008f64:	e02d      	b.n	8008fc2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d107      	bne.n	8008f80 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	3348      	adds	r3, #72	; 0x48
 8008f74:	2201      	movs	r2, #1
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f90e 	bl	800a19a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f7e:	e020      	b.n	8008fc2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 f89f 	bl	800a0c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	75fb      	strb	r3, [r7, #23]
          break;
 8008f8c:	e019      	b.n	8008fc2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d106      	bne.n	8008fa6 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	885b      	ldrh	r3, [r3, #2]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fa4:	e00d      	b.n	8008fc2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f88c 	bl	800a0c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fae:	2302      	movs	r3, #2
 8008fb0:	75fb      	strb	r3, [r7, #23]
          break;
 8008fb2:	e006      	b.n	8008fc2 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 f885 	bl	800a0c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	75fb      	strb	r3, [r7, #23]
          break;
 8008fc0:	bf00      	nop
      }
      break;
 8008fc2:	e006      	b.n	8008fd2 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f001 f87d 	bl	800a0c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008fcc:	2302      	movs	r3, #2
 8008fce:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd0:	bf00      	nop
  }
  return ret;
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3720      	adds	r7, #32
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	200000d4 	.word	0x200000d4

08008fe0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	4613      	mov	r3, r2
 8008fec:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d111      	bne.n	8009024 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10a      	bne.n	8009020 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	2181      	movs	r1, #129	; 0x81
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f001 fc94 	bl	800a946 <USBD_LL_Transmit>
 800901e:	e001      	b.n	8009024 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8009020:	2301      	movs	r3, #1
 8009022:	e000      	b.n	8009026 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2229      	movs	r2, #41	; 0x29
 800903c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800903e:	4b03      	ldr	r3, [pc, #12]	; (800904c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	bc80      	pop	{r7}
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	20000050 	.word	0x20000050

08009050 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2229      	movs	r2, #41	; 0x29
 800905c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800905e:	4b03      	ldr	r3, [pc, #12]	; (800906c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	bc80      	pop	{r7}
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	2000007c 	.word	0x2000007c

08009070 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2229      	movs	r2, #41	; 0x29
 800907c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800907e:	4b03      	ldr	r3, [pc, #12]	; (800908c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	bc80      	pop	{r7}
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	200000a8 	.word	0x200000a8

08009090 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bc80      	pop	{r7}
 80090b2:	4770      	bx	lr

080090b4 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c6:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4610      	mov	r0, r2
 80090d4:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	2340      	movs	r3, #64	; 0x40
 80090da:	2101      	movs	r1, #1
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f001 fc55 	bl	800a98c <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fa:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009100:	2b01      	cmp	r3, #1
 8009102:	d109      	bne.n	8009118 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	4610      	mov	r0, r2
 8009110:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	220a      	movs	r2, #10
 8009130:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8009132:	4b03      	ldr	r3, [pc, #12]	; (8009140 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009134:	4618      	mov	r0, r3
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	bc80      	pop	{r7}
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	200000e0 	.word	0x200000e0

08009144 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800914e:	2302      	movs	r3, #2
 8009150:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4613      	mov	r3, r2
 800917c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009184:	2302      	movs	r3, #2
 8009186:	e01a      	b.n	80091be <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	79fa      	ldrb	r2, [r7, #7]
 80091b4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f001 fa8c 	bl	800a6d4 <USBD_LL_Init>

  return USBD_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b085      	sub	sp, #20
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d006      	beq.n	80091e8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]
 80091e6:	e001      	b.n	80091ec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80091e8:	2302      	movs	r3, #2
 80091ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bc80      	pop	{r7}
 80091f6:	4770      	bx	lr

080091f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f001 fab7 	bl	800a774 <USBD_LL_Start>

  return USBD_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	bc80      	pop	{r7}
 8009222:	4770      	bx	lr

08009224 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009230:	2302      	movs	r3, #2
 8009232:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00c      	beq.n	8009258 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	4611      	mov	r1, r2
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	4798      	blx	r3
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	78fa      	ldrb	r2, [r7, #3]
 8009278:	4611      	mov	r1, r2
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	4798      	blx	r3

  return USBD_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fed7 	bl	800a04e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80092bc:	f003 031f 	and.w	r3, r3, #31
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d016      	beq.n	80092f2 <USBD_LL_SetupStage+0x6a>
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d81c      	bhi.n	8009302 <USBD_LL_SetupStage+0x7a>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d002      	beq.n	80092d2 <USBD_LL_SetupStage+0x4a>
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d008      	beq.n	80092e2 <USBD_LL_SetupStage+0x5a>
 80092d0:	e017      	b.n	8009302 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f9ca 	bl	8009674 <USBD_StdDevReq>
      break;
 80092e0:	e01a      	b.n	8009318 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fa2c 	bl	8009748 <USBD_StdItfReq>
      break;
 80092f0:	e012      	b.n	8009318 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa6c 	bl	80097d8 <USBD_StdEPReq>
      break;
 8009300:	e00a      	b.n	8009318 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009308:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800930c:	b2db      	uxtb	r3, r3
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 fa8f 	bl	800a834 <USBD_LL_StallEP>
      break;
 8009316:	bf00      	nop
  }

  return USBD_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b086      	sub	sp, #24
 8009326:	af00      	add	r7, sp, #0
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	460b      	mov	r3, r1
 800932c:	607a      	str	r2, [r7, #4]
 800932e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009330:	7afb      	ldrb	r3, [r7, #11]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d14b      	bne.n	80093ce <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800933c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009344:	2b03      	cmp	r3, #3
 8009346:	d134      	bne.n	80093b2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	429a      	cmp	r2, r3
 8009352:	d919      	bls.n	8009388 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	68da      	ldr	r2, [r3, #12]
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	1ad2      	subs	r2, r2, r3
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800936a:	429a      	cmp	r2, r3
 800936c:	d203      	bcs.n	8009376 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009372:	b29b      	uxth	r3, r3
 8009374:	e002      	b.n	800937c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800937a:	b29b      	uxth	r3, r3
 800937c:	461a      	mov	r2, r3
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 ff56 	bl	800a232 <USBD_CtlContinueRx>
 8009386:	e038      	b.n	80093fa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00a      	beq.n	80093aa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800939a:	2b03      	cmp	r3, #3
 800939c:	d105      	bne.n	80093aa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 ff53 	bl	800a256 <USBD_CtlSendStatus>
 80093b0:	e023      	b.n	80093fa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093b8:	2b05      	cmp	r3, #5
 80093ba:	d11e      	bne.n	80093fa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80093c4:	2100      	movs	r1, #0
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f001 fa34 	bl	800a834 <USBD_LL_StallEP>
 80093cc:	e015      	b.n	80093fa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00d      	beq.n	80093f6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d108      	bne.n	80093f6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	7afa      	ldrb	r2, [r7, #11]
 80093ee:	4611      	mov	r1, r2
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	4798      	blx	r3
 80093f4:	e001      	b.n	80093fa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093f6:	2302      	movs	r3, #2
 80093f8:	e000      	b.n	80093fc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	460b      	mov	r3, r1
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009412:	7afb      	ldrb	r3, [r7, #11]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d17f      	bne.n	8009518 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3314      	adds	r3, #20
 800941c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009424:	2b02      	cmp	r3, #2
 8009426:	d15c      	bne.n	80094e2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	429a      	cmp	r2, r3
 8009432:	d915      	bls.n	8009460 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	68da      	ldr	r2, [r3, #12]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	1ad2      	subs	r2, r2, r3
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	b29b      	uxth	r3, r3
 8009448:	461a      	mov	r2, r3
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 fec0 	bl	800a1d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009452:	2300      	movs	r3, #0
 8009454:	2200      	movs	r2, #0
 8009456:	2100      	movs	r1, #0
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f001 fa97 	bl	800a98c <USBD_LL_PrepareReceive>
 800945e:	e04e      	b.n	80094fe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	6912      	ldr	r2, [r2, #16]
 8009468:	fbb3 f1f2 	udiv	r1, r3, r2
 800946c:	fb01 f202 	mul.w	r2, r1, r2
 8009470:	1a9b      	subs	r3, r3, r2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d11c      	bne.n	80094b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800947e:	429a      	cmp	r2, r3
 8009480:	d316      	bcc.n	80094b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800948c:	429a      	cmp	r2, r3
 800948e:	d20f      	bcs.n	80094b0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009490:	2200      	movs	r2, #0
 8009492:	2100      	movs	r1, #0
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 fe9c 	bl	800a1d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094a2:	2300      	movs	r3, #0
 80094a4:	2200      	movs	r2, #0
 80094a6:	2100      	movs	r1, #0
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f001 fa6f 	bl	800a98c <USBD_LL_PrepareReceive>
 80094ae:	e026      	b.n	80094fe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00a      	beq.n	80094d2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d105      	bne.n	80094d2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80094d2:	2180      	movs	r1, #128	; 0x80
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f001 f9ad 	bl	800a834 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 fece 	bl	800a27c <USBD_CtlReceiveStatus>
 80094e0:	e00d      	b.n	80094fe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094e8:	2b04      	cmp	r3, #4
 80094ea:	d004      	beq.n	80094f6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d103      	bne.n	80094fe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80094f6:	2180      	movs	r1, #128	; 0x80
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f001 f99b 	bl	800a834 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009504:	2b01      	cmp	r3, #1
 8009506:	d11d      	bne.n	8009544 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff fe81 	bl	8009210 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009516:	e015      	b.n	8009544 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00d      	beq.n	8009540 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800952a:	2b03      	cmp	r3, #3
 800952c:	d108      	bne.n	8009540 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	7afa      	ldrb	r2, [r7, #11]
 8009538:	4611      	mov	r1, r2
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	4798      	blx	r3
 800953e:	e001      	b.n	8009544 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009540:	2302      	movs	r3, #2
 8009542:	e000      	b.n	8009546 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009556:	2340      	movs	r3, #64	; 0x40
 8009558:	2200      	movs	r2, #0
 800955a:	2100      	movs	r1, #0
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f001 f924 	bl	800a7aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2240      	movs	r2, #64	; 0x40
 800956e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009572:	2340      	movs	r3, #64	; 0x40
 8009574:	2200      	movs	r2, #0
 8009576:	2180      	movs	r1, #128	; 0x80
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 f916 	bl	800a7aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2240      	movs	r2, #64	; 0x40
 8009588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	6852      	ldr	r2, [r2, #4]
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	4611      	mov	r1, r2
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	4798      	blx	r3
  }

  return USBD_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	78fa      	ldrb	r2, [r7, #3]
 80095e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr

080095ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2204      	movs	r2, #4
 8009606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	bc80      	pop	{r7}
 8009614:	4770      	bx	lr

08009616 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009624:	2b04      	cmp	r3, #4
 8009626:	d105      	bne.n	8009634 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	bc80      	pop	{r7}
 800963e:	4770      	bx	lr

08009640 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800964e:	2b03      	cmp	r3, #3
 8009650:	d10b      	bne.n	800966a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d005      	beq.n	800966a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800968a:	2b40      	cmp	r3, #64	; 0x40
 800968c:	d005      	beq.n	800969a <USBD_StdDevReq+0x26>
 800968e:	2b40      	cmp	r3, #64	; 0x40
 8009690:	d84f      	bhi.n	8009732 <USBD_StdDevReq+0xbe>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d009      	beq.n	80096aa <USBD_StdDevReq+0x36>
 8009696:	2b20      	cmp	r3, #32
 8009698:	d14b      	bne.n	8009732 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	4798      	blx	r3
      break;
 80096a8:	e048      	b.n	800973c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	785b      	ldrb	r3, [r3, #1]
 80096ae:	2b09      	cmp	r3, #9
 80096b0:	d839      	bhi.n	8009726 <USBD_StdDevReq+0xb2>
 80096b2:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <USBD_StdDevReq+0x44>)
 80096b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b8:	08009709 	.word	0x08009709
 80096bc:	0800971d 	.word	0x0800971d
 80096c0:	08009727 	.word	0x08009727
 80096c4:	08009713 	.word	0x08009713
 80096c8:	08009727 	.word	0x08009727
 80096cc:	080096eb 	.word	0x080096eb
 80096d0:	080096e1 	.word	0x080096e1
 80096d4:	08009727 	.word	0x08009727
 80096d8:	080096ff 	.word	0x080096ff
 80096dc:	080096f5 	.word	0x080096f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f9dc 	bl	8009aa0 <USBD_GetDescriptor>
          break;
 80096e8:	e022      	b.n	8009730 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fb3f 	bl	8009d70 <USBD_SetAddress>
          break;
 80096f2:	e01d      	b.n	8009730 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fb7e 	bl	8009df8 <USBD_SetConfig>
          break;
 80096fc:	e018      	b.n	8009730 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fc07 	bl	8009f14 <USBD_GetConfig>
          break;
 8009706:	e013      	b.n	8009730 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fc37 	bl	8009f7e <USBD_GetStatus>
          break;
 8009710:	e00e      	b.n	8009730 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fc65 	bl	8009fe4 <USBD_SetFeature>
          break;
 800971a:	e009      	b.n	8009730 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fc74 	bl	800a00c <USBD_ClrFeature>
          break;
 8009724:	e004      	b.n	8009730 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fccc 	bl	800a0c6 <USBD_CtlError>
          break;
 800972e:	bf00      	nop
      }
      break;
 8009730:	e004      	b.n	800973c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fcc6 	bl	800a0c6 <USBD_CtlError>
      break;
 800973a:	bf00      	nop
  }

  return ret;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop

08009748 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800975e:	2b40      	cmp	r3, #64	; 0x40
 8009760:	d005      	beq.n	800976e <USBD_StdItfReq+0x26>
 8009762:	2b40      	cmp	r3, #64	; 0x40
 8009764:	d82e      	bhi.n	80097c4 <USBD_StdItfReq+0x7c>
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <USBD_StdItfReq+0x26>
 800976a:	2b20      	cmp	r3, #32
 800976c:	d12a      	bne.n	80097c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009774:	3b01      	subs	r3, #1
 8009776:	2b02      	cmp	r3, #2
 8009778:	d81d      	bhi.n	80097b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	889b      	ldrh	r3, [r3, #4]
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b01      	cmp	r3, #1
 8009782:	d813      	bhi.n	80097ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	4798      	blx	r3
 8009792:	4603      	mov	r3, r0
 8009794:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	88db      	ldrh	r3, [r3, #6]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d110      	bne.n	80097c0 <USBD_StdItfReq+0x78>
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10d      	bne.n	80097c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fd56 	bl	800a256 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097aa:	e009      	b.n	80097c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fc89 	bl	800a0c6 <USBD_CtlError>
          break;
 80097b4:	e004      	b.n	80097c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fc84 	bl	800a0c6 <USBD_CtlError>
          break;
 80097be:	e000      	b.n	80097c2 <USBD_StdItfReq+0x7a>
          break;
 80097c0:	bf00      	nop
      }
      break;
 80097c2:	e004      	b.n	80097ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fc7d 	bl	800a0c6 <USBD_CtlError>
      break;
 80097cc:	bf00      	nop
  }

  return USBD_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	889b      	ldrh	r3, [r3, #4]
 80097ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097f4:	2b40      	cmp	r3, #64	; 0x40
 80097f6:	d007      	beq.n	8009808 <USBD_StdEPReq+0x30>
 80097f8:	2b40      	cmp	r3, #64	; 0x40
 80097fa:	f200 8146 	bhi.w	8009a8a <USBD_StdEPReq+0x2b2>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00a      	beq.n	8009818 <USBD_StdEPReq+0x40>
 8009802:	2b20      	cmp	r3, #32
 8009804:	f040 8141 	bne.w	8009a8a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
      break;
 8009816:	e13d      	b.n	8009a94 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009820:	2b20      	cmp	r3, #32
 8009822:	d10a      	bne.n	800983a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
 8009832:	4603      	mov	r3, r0
 8009834:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	e12d      	b.n	8009a96 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	785b      	ldrb	r3, [r3, #1]
 800983e:	2b03      	cmp	r3, #3
 8009840:	d007      	beq.n	8009852 <USBD_StdEPReq+0x7a>
 8009842:	2b03      	cmp	r3, #3
 8009844:	f300 811b 	bgt.w	8009a7e <USBD_StdEPReq+0x2a6>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d072      	beq.n	8009932 <USBD_StdEPReq+0x15a>
 800984c:	2b01      	cmp	r3, #1
 800984e:	d03a      	beq.n	80098c6 <USBD_StdEPReq+0xee>
 8009850:	e115      	b.n	8009a7e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009858:	2b02      	cmp	r3, #2
 800985a:	d002      	beq.n	8009862 <USBD_StdEPReq+0x8a>
 800985c:	2b03      	cmp	r3, #3
 800985e:	d015      	beq.n	800988c <USBD_StdEPReq+0xb4>
 8009860:	e02b      	b.n	80098ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00c      	beq.n	8009882 <USBD_StdEPReq+0xaa>
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	2b80      	cmp	r3, #128	; 0x80
 800986c:	d009      	beq.n	8009882 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 ffde 	bl	800a834 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009878:	2180      	movs	r1, #128	; 0x80
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 ffda 	bl	800a834 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009880:	e020      	b.n	80098c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fc1e 	bl	800a0c6 <USBD_CtlError>
              break;
 800988a:	e01b      	b.n	80098c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	885b      	ldrh	r3, [r3, #2]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10e      	bne.n	80098b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00b      	beq.n	80098b2 <USBD_StdEPReq+0xda>
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	2b80      	cmp	r3, #128	; 0x80
 800989e:	d008      	beq.n	80098b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	88db      	ldrh	r3, [r3, #6]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d104      	bne.n	80098b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 ffc1 	bl	800a834 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fccf 	bl	800a256 <USBD_CtlSendStatus>

              break;
 80098b8:	e004      	b.n	80098c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fc02 	bl	800a0c6 <USBD_CtlError>
              break;
 80098c2:	bf00      	nop
          }
          break;
 80098c4:	e0e0      	b.n	8009a88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d002      	beq.n	80098d6 <USBD_StdEPReq+0xfe>
 80098d0:	2b03      	cmp	r3, #3
 80098d2:	d015      	beq.n	8009900 <USBD_StdEPReq+0x128>
 80098d4:	e026      	b.n	8009924 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00c      	beq.n	80098f6 <USBD_StdEPReq+0x11e>
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2b80      	cmp	r3, #128	; 0x80
 80098e0:	d009      	beq.n	80098f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 ffa4 	bl	800a834 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098ec:	2180      	movs	r1, #128	; 0x80
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 ffa0 	bl	800a834 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098f4:	e01c      	b.n	8009930 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fbe4 	bl	800a0c6 <USBD_CtlError>
              break;
 80098fe:	e017      	b.n	8009930 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	885b      	ldrh	r3, [r3, #2]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d112      	bne.n	800992e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800990e:	2b00      	cmp	r3, #0
 8009910:	d004      	beq.n	800991c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 ffab 	bl	800a872 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fc9a 	bl	800a256 <USBD_CtlSendStatus>
              }
              break;
 8009922:	e004      	b.n	800992e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fbcd 	bl	800a0c6 <USBD_CtlError>
              break;
 800992c:	e000      	b.n	8009930 <USBD_StdEPReq+0x158>
              break;
 800992e:	bf00      	nop
          }
          break;
 8009930:	e0aa      	b.n	8009a88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009938:	2b02      	cmp	r3, #2
 800993a:	d002      	beq.n	8009942 <USBD_StdEPReq+0x16a>
 800993c:	2b03      	cmp	r3, #3
 800993e:	d032      	beq.n	80099a6 <USBD_StdEPReq+0x1ce>
 8009940:	e097      	b.n	8009a72 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d007      	beq.n	8009958 <USBD_StdEPReq+0x180>
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2b80      	cmp	r3, #128	; 0x80
 800994c:	d004      	beq.n	8009958 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fbb8 	bl	800a0c6 <USBD_CtlError>
                break;
 8009956:	e091      	b.n	8009a7c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800995c:	2b00      	cmp	r3, #0
 800995e:	da0b      	bge.n	8009978 <USBD_StdEPReq+0x1a0>
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009966:	4613      	mov	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	3310      	adds	r3, #16
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	4413      	add	r3, r2
 8009974:	3304      	adds	r3, #4
 8009976:	e00b      	b.n	8009990 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	4413      	add	r3, r2
 800998e:	3304      	adds	r3, #4
 8009990:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2202      	movs	r2, #2
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fbfb 	bl	800a19a <USBD_CtlSendData>
              break;
 80099a4:	e06a      	b.n	8009a7c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80099a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	da11      	bge.n	80099d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	f003 020f 	and.w	r2, r3, #15
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	3318      	adds	r3, #24
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d117      	bne.n	80099f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fb7b 	bl	800a0c6 <USBD_CtlError>
                  break;
 80099d0:	e054      	b.n	8009a7c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	f003 020f 	and.w	r2, r3, #15
 80099d8:	6879      	ldr	r1, [r7, #4]
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	440b      	add	r3, r1
 80099e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d104      	bne.n	80099f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fb68 	bl	800a0c6 <USBD_CtlError>
                  break;
 80099f6:	e041      	b.n	8009a7c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	da0b      	bge.n	8009a18 <USBD_StdEPReq+0x240>
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	3310      	adds	r3, #16
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	4413      	add	r3, r2
 8009a14:	3304      	adds	r3, #4
 8009a16:	e00b      	b.n	8009a30 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a1e:	4613      	mov	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	3304      	adds	r3, #4
 8009a30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <USBD_StdEPReq+0x266>
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	2b80      	cmp	r3, #128	; 0x80
 8009a3c:	d103      	bne.n	8009a46 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2200      	movs	r2, #0
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	e00e      	b.n	8009a64 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 ff30 	bl	800a8b0 <USBD_LL_IsStallEP>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	e002      	b.n	8009a64 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2202      	movs	r2, #2
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fb95 	bl	800a19a <USBD_CtlSendData>
              break;
 8009a70:	e004      	b.n	8009a7c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fb26 	bl	800a0c6 <USBD_CtlError>
              break;
 8009a7a:	bf00      	nop
          }
          break;
 8009a7c:	e004      	b.n	8009a88 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fb20 	bl	800a0c6 <USBD_CtlError>
          break;
 8009a86:	bf00      	nop
      }
      break;
 8009a88:	e004      	b.n	8009a94 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fb1a 	bl	800a0c6 <USBD_CtlError>
      break;
 8009a92:	bf00      	nop
  }

  return ret;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	885b      	ldrh	r3, [r3, #2]
 8009aba:	0a1b      	lsrs	r3, r3, #8
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	2b06      	cmp	r3, #6
 8009ac2:	f200 8128 	bhi.w	8009d16 <USBD_GetDescriptor+0x276>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <USBD_GetDescriptor+0x2c>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009ae9 	.word	0x08009ae9
 8009ad0:	08009b01 	.word	0x08009b01
 8009ad4:	08009b41 	.word	0x08009b41
 8009ad8:	08009d17 	.word	0x08009d17
 8009adc:	08009d17 	.word	0x08009d17
 8009ae0:	08009cb7 	.word	0x08009cb7
 8009ae4:	08009ce3 	.word	0x08009ce3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	7c12      	ldrb	r2, [r2, #16]
 8009af4:	f107 0108 	add.w	r1, r7, #8
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
 8009afc:	60f8      	str	r0, [r7, #12]
      break;
 8009afe:	e112      	b.n	8009d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	7c1b      	ldrb	r3, [r3, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10d      	bne.n	8009b24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b10:	f107 0208 	add.w	r2, r7, #8
 8009b14:	4610      	mov	r0, r2
 8009b16:	4798      	blx	r3
 8009b18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	2202      	movs	r2, #2
 8009b20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b22:	e100      	b.n	8009d26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	f107 0208 	add.w	r2, r7, #8
 8009b30:	4610      	mov	r0, r2
 8009b32:	4798      	blx	r3
 8009b34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	701a      	strb	r2, [r3, #0]
      break;
 8009b3e:	e0f2      	b.n	8009d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	885b      	ldrh	r3, [r3, #2]
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b05      	cmp	r3, #5
 8009b48:	f200 80ac 	bhi.w	8009ca4 <USBD_GetDescriptor+0x204>
 8009b4c:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <USBD_GetDescriptor+0xb4>)
 8009b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b52:	bf00      	nop
 8009b54:	08009b6d 	.word	0x08009b6d
 8009b58:	08009ba1 	.word	0x08009ba1
 8009b5c:	08009bd5 	.word	0x08009bd5
 8009b60:	08009c09 	.word	0x08009c09
 8009b64:	08009c3d 	.word	0x08009c3d
 8009b68:	08009c71 	.word	0x08009c71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	7c12      	ldrb	r2, [r2, #16]
 8009b84:	f107 0108 	add.w	r1, r7, #8
 8009b88:	4610      	mov	r0, r2
 8009b8a:	4798      	blx	r3
 8009b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b8e:	e091      	b.n	8009cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa97 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009b98:	7afb      	ldrb	r3, [r7, #11]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b9e:	e089      	b.n	8009cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00b      	beq.n	8009bc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	7c12      	ldrb	r2, [r2, #16]
 8009bb8:	f107 0108 	add.w	r1, r7, #8
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4798      	blx	r3
 8009bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bc2:	e077      	b.n	8009cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fa7d 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009bcc:	7afb      	ldrb	r3, [r7, #11]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bd2:	e06f      	b.n	8009cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00b      	beq.n	8009bf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7c12      	ldrb	r2, [r2, #16]
 8009bec:	f107 0108 	add.w	r1, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bf6:	e05d      	b.n	8009cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fa63 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009c00:	7afb      	ldrb	r3, [r7, #11]
 8009c02:	3301      	adds	r3, #1
 8009c04:	72fb      	strb	r3, [r7, #11]
          break;
 8009c06:	e055      	b.n	8009cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	7c12      	ldrb	r2, [r2, #16]
 8009c20:	f107 0108 	add.w	r1, r7, #8
 8009c24:	4610      	mov	r0, r2
 8009c26:	4798      	blx	r3
 8009c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c2a:	e043      	b.n	8009cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa49 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009c34:	7afb      	ldrb	r3, [r7, #11]
 8009c36:	3301      	adds	r3, #1
 8009c38:	72fb      	strb	r3, [r7, #11]
          break;
 8009c3a:	e03b      	b.n	8009cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00b      	beq.n	8009c60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	7c12      	ldrb	r2, [r2, #16]
 8009c54:	f107 0108 	add.w	r1, r7, #8
 8009c58:	4610      	mov	r0, r2
 8009c5a:	4798      	blx	r3
 8009c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c5e:	e029      	b.n	8009cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fa2f 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009c68:	7afb      	ldrb	r3, [r7, #11]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c6e:	e021      	b.n	8009cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00b      	beq.n	8009c94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	7c12      	ldrb	r2, [r2, #16]
 8009c88:	f107 0108 	add.w	r1, r7, #8
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	4798      	blx	r3
 8009c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c92:	e00f      	b.n	8009cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fa15 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009c9c:	7afb      	ldrb	r3, [r7, #11]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ca2:	e007      	b.n	8009cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fa0d 	bl	800a0c6 <USBD_CtlError>
          err++;
 8009cac:	7afb      	ldrb	r3, [r7, #11]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009cb2:	e038      	b.n	8009d26 <USBD_GetDescriptor+0x286>
 8009cb4:	e037      	b.n	8009d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	7c1b      	ldrb	r3, [r3, #16]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d109      	bne.n	8009cd2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc6:	f107 0208 	add.w	r2, r7, #8
 8009cca:	4610      	mov	r0, r2
 8009ccc:	4798      	blx	r3
 8009cce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cd0:	e029      	b.n	8009d26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f9f6 	bl	800a0c6 <USBD_CtlError>
        err++;
 8009cda:	7afb      	ldrb	r3, [r7, #11]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	72fb      	strb	r3, [r7, #11]
      break;
 8009ce0:	e021      	b.n	8009d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	7c1b      	ldrb	r3, [r3, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10d      	bne.n	8009d06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf2:	f107 0208 	add.w	r2, r7, #8
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	4798      	blx	r3
 8009cfa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	2207      	movs	r2, #7
 8009d02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d04:	e00f      	b.n	8009d26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f9dc 	bl	800a0c6 <USBD_CtlError>
        err++;
 8009d0e:	7afb      	ldrb	r3, [r7, #11]
 8009d10:	3301      	adds	r3, #1
 8009d12:	72fb      	strb	r3, [r7, #11]
      break;
 8009d14:	e007      	b.n	8009d26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f9d4 	bl	800a0c6 <USBD_CtlError>
      err++;
 8009d1e:	7afb      	ldrb	r3, [r7, #11]
 8009d20:	3301      	adds	r3, #1
 8009d22:	72fb      	strb	r3, [r7, #11]
      break;
 8009d24:	bf00      	nop
  }

  if (err != 0U)
 8009d26:	7afb      	ldrb	r3, [r7, #11]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d11c      	bne.n	8009d66 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009d2c:	893b      	ldrh	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d011      	beq.n	8009d56 <USBD_GetDescriptor+0x2b6>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	88db      	ldrh	r3, [r3, #6]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00d      	beq.n	8009d56 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	88da      	ldrh	r2, [r3, #6]
 8009d3e:	893b      	ldrh	r3, [r7, #8]
 8009d40:	4293      	cmp	r3, r2
 8009d42:	bf28      	it	cs
 8009d44:	4613      	movcs	r3, r2
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d4a:	893b      	ldrh	r3, [r7, #8]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	68f9      	ldr	r1, [r7, #12]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fa22 	bl	800a19a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	88db      	ldrh	r3, [r3, #6]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d104      	bne.n	8009d68 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fa79 	bl	800a256 <USBD_CtlSendStatus>
 8009d64:	e000      	b.n	8009d68 <USBD_GetDescriptor+0x2c8>
    return;
 8009d66:	bf00      	nop
    }
  }
}
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop

08009d70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	889b      	ldrh	r3, [r3, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d130      	bne.n	8009de4 <USBD_SetAddress+0x74>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	88db      	ldrh	r3, [r3, #6]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d12c      	bne.n	8009de4 <USBD_SetAddress+0x74>
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	885b      	ldrh	r3, [r3, #2]
 8009d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8009d90:	d828      	bhi.n	8009de4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	885b      	ldrh	r3, [r3, #2]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d104      	bne.n	8009db2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f98b 	bl	800a0c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009db0:	e01d      	b.n	8009dee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	7bfa      	ldrb	r2, [r7, #15]
 8009db6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fda2 	bl	800a908 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fa46 	bl	800a256 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d004      	beq.n	8009dda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dd8:	e009      	b.n	8009dee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009de2:	e004      	b.n	8009dee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f96d 	bl	800a0c6 <USBD_CtlError>
  }
}
 8009dec:	bf00      	nop
 8009dee:	bf00      	nop
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	885b      	ldrh	r3, [r3, #2]
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	4b41      	ldr	r3, [pc, #260]	; (8009f10 <USBD_SetConfig+0x118>)
 8009e0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e0c:	4b40      	ldr	r3, [pc, #256]	; (8009f10 <USBD_SetConfig+0x118>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d904      	bls.n	8009e1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f955 	bl	800a0c6 <USBD_CtlError>
 8009e1c:	e075      	b.n	8009f0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d002      	beq.n	8009e2e <USBD_SetConfig+0x36>
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d023      	beq.n	8009e74 <USBD_SetConfig+0x7c>
 8009e2c:	e062      	b.n	8009ef4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009e2e:	4b38      	ldr	r3, [pc, #224]	; (8009f10 <USBD_SetConfig+0x118>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d01a      	beq.n	8009e6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e36:	4b36      	ldr	r3, [pc, #216]	; (8009f10 <USBD_SetConfig+0x118>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2203      	movs	r2, #3
 8009e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e48:	4b31      	ldr	r3, [pc, #196]	; (8009f10 <USBD_SetConfig+0x118>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff f9e8 	bl	8009224 <USBD_SetClassConfig>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d104      	bne.n	8009e64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f932 	bl	800a0c6 <USBD_CtlError>
            return;
 8009e62:	e052      	b.n	8009f0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f9f6 	bl	800a256 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e6a:	e04e      	b.n	8009f0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f9f2 	bl	800a256 <USBD_CtlSendStatus>
        break;
 8009e72:	e04a      	b.n	8009f0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e74:	4b26      	ldr	r3, [pc, #152]	; (8009f10 <USBD_SetConfig+0x118>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d112      	bne.n	8009ea2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009e84:	4b22      	ldr	r3, [pc, #136]	; (8009f10 <USBD_SetConfig+0x118>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e8e:	4b20      	ldr	r3, [pc, #128]	; (8009f10 <USBD_SetConfig+0x118>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7ff f9e4 	bl	8009262 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f9db 	bl	800a256 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ea0:	e033      	b.n	8009f0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009ea2:	4b1b      	ldr	r3, [pc, #108]	; (8009f10 <USBD_SetConfig+0x118>)
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d01d      	beq.n	8009eec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7ff f9d2 	bl	8009262 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009ebe:	4b14      	ldr	r3, [pc, #80]	; (8009f10 <USBD_SetConfig+0x118>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ec8:	4b11      	ldr	r3, [pc, #68]	; (8009f10 <USBD_SetConfig+0x118>)
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff f9a8 	bl	8009224 <USBD_SetClassConfig>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d104      	bne.n	8009ee4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f8f2 	bl	800a0c6 <USBD_CtlError>
            return;
 8009ee2:	e012      	b.n	8009f0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f9b6 	bl	800a256 <USBD_CtlSendStatus>
        break;
 8009eea:	e00e      	b.n	8009f0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f9b2 	bl	800a256 <USBD_CtlSendStatus>
        break;
 8009ef2:	e00a      	b.n	8009f0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f8e5 	bl	800a0c6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009efc:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <USBD_SetConfig+0x118>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff f9ad 	bl	8009262 <USBD_ClrClassConfig>
        break;
 8009f08:	bf00      	nop
    }
  }
}
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	200003a0 	.word	0x200003a0

08009f14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	88db      	ldrh	r3, [r3, #6]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d004      	beq.n	8009f30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f8cc 	bl	800a0c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f2e:	e022      	b.n	8009f76 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	dc02      	bgt.n	8009f40 <USBD_GetConfig+0x2c>
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dc03      	bgt.n	8009f46 <USBD_GetConfig+0x32>
 8009f3e:	e015      	b.n	8009f6c <USBD_GetConfig+0x58>
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d00b      	beq.n	8009f5c <USBD_GetConfig+0x48>
 8009f44:	e012      	b.n	8009f6c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	3308      	adds	r3, #8
 8009f50:	2201      	movs	r2, #1
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f920 	bl	800a19a <USBD_CtlSendData>
        break;
 8009f5a:	e00c      	b.n	8009f76 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	2201      	movs	r2, #1
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f918 	bl	800a19a <USBD_CtlSendData>
        break;
 8009f6a:	e004      	b.n	8009f76 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8a9 	bl	800a0c6 <USBD_CtlError>
        break;
 8009f74:	bf00      	nop
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b082      	sub	sp, #8
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d81e      	bhi.n	8009fd2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	88db      	ldrh	r3, [r3, #6]
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d004      	beq.n	8009fa6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f891 	bl	800a0c6 <USBD_CtlError>
        break;
 8009fa4:	e01a      	b.n	8009fdc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d005      	beq.n	8009fc2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	f043 0202 	orr.w	r2, r3, #2
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	330c      	adds	r3, #12
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f8e5 	bl	800a19a <USBD_CtlSendData>
      break;
 8009fd0:	e004      	b.n	8009fdc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f876 	bl	800a0c6 <USBD_CtlError>
      break;
 8009fda:	bf00      	nop
  }
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	885b      	ldrh	r3, [r3, #2]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d106      	bne.n	800a004 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f929 	bl	800a256 <USBD_CtlSendStatus>
  }
}
 800a004:	bf00      	nop
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01c:	3b01      	subs	r3, #1
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d80b      	bhi.n	800a03a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	885b      	ldrh	r3, [r3, #2]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d10c      	bne.n	800a044 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f90f 	bl	800a256 <USBD_CtlSendStatus>
      }
      break;
 800a038:	e004      	b.n	800a044 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f842 	bl	800a0c6 <USBD_CtlError>
      break;
 800a042:	e000      	b.n	800a046 <USBD_ClrFeature+0x3a>
      break;
 800a044:	bf00      	nop
  }
}
 800a046:	bf00      	nop
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781a      	ldrb	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	785a      	ldrb	r2, [r3, #1]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	3302      	adds	r3, #2
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	b29a      	uxth	r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	3303      	adds	r3, #3
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	b29b      	uxth	r3, r3
 800a078:	021b      	lsls	r3, r3, #8
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	4413      	add	r3, r2
 800a07e:	b29a      	uxth	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	3304      	adds	r3, #4
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	3305      	adds	r3, #5
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	b29b      	uxth	r3, r3
 800a094:	021b      	lsls	r3, r3, #8
 800a096:	b29b      	uxth	r3, r3
 800a098:	4413      	add	r3, r2
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	3306      	adds	r3, #6
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	3307      	adds	r3, #7
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	021b      	lsls	r3, r3, #8
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	4413      	add	r3, r2
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	80da      	strh	r2, [r3, #6]

}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bc80      	pop	{r7}
 800a0c4:	4770      	bx	lr

0800a0c6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a0d0:	2180      	movs	r1, #128	; 0x80
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fbae 	bl	800a834 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0d8:	2100      	movs	r1, #0
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fbaa 	bl	800a834 <USBD_LL_StallEP>
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d032      	beq.n	800a164 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 f834 	bl	800a16c <USBD_GetLen>
 800a104:	4603      	mov	r3, r0
 800a106:	3301      	adds	r3, #1
 800a108:	b29b      	uxth	r3, r3
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a112:	7dfb      	ldrb	r3, [r7, #23]
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	75fa      	strb	r2, [r7, #23]
 800a118:	461a      	mov	r2, r3
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	4413      	add	r3, r2
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	7812      	ldrb	r2, [r2, #0]
 800a122:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	75fa      	strb	r2, [r7, #23]
 800a12a:	461a      	mov	r2, r3
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	4413      	add	r3, r2
 800a130:	2203      	movs	r2, #3
 800a132:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a134:	e012      	b.n	800a15c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	1c5a      	adds	r2, r3, #1
 800a13a:	60fa      	str	r2, [r7, #12]
 800a13c:	7dfa      	ldrb	r2, [r7, #23]
 800a13e:	1c51      	adds	r1, r2, #1
 800a140:	75f9      	strb	r1, [r7, #23]
 800a142:	4611      	mov	r1, r2
 800a144:	68ba      	ldr	r2, [r7, #8]
 800a146:	440a      	add	r2, r1
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	75fa      	strb	r2, [r7, #23]
 800a152:	461a      	mov	r2, r3
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4413      	add	r3, r2
 800a158:	2200      	movs	r2, #0
 800a15a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1e8      	bne.n	800a136 <USBD_GetString+0x4e>
    }
  }
}
 800a164:	bf00      	nop
 800a166:	3718      	adds	r7, #24
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a178:	e005      	b.n	800a186 <USBD_GetLen+0x1a>
  {
    len++;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	3301      	adds	r3, #1
 800a17e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	3301      	adds	r3, #1
 800a184:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1f5      	bne.n	800a17a <USBD_GetLen+0xe>
  }

  return len;
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	bc80      	pop	{r7}
 800a198:	4770      	bx	lr

0800a19a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a1b0:	88fa      	ldrh	r2, [r7, #6]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a1b6:	88fa      	ldrh	r2, [r7, #6]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1bc:	88fb      	ldrh	r3, [r7, #6]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 fbbf 	bl	800a946 <USBD_LL_Transmit>

  return USBD_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b084      	sub	sp, #16
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1e0:	88fb      	ldrh	r3, [r7, #6]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 fbad 	bl	800a946 <USBD_LL_Transmit>

  return USBD_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	60f8      	str	r0, [r7, #12]
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	4613      	mov	r3, r2
 800a202:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2203      	movs	r2, #3
 800a208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a20c:	88fa      	ldrh	r2, [r7, #6]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a214:	88fa      	ldrh	r2, [r7, #6]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a21c:	88fb      	ldrh	r3, [r7, #6]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	2100      	movs	r1, #0
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f000 fbb2 	bl	800a98c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	60f8      	str	r0, [r7, #12]
 800a23a:	60b9      	str	r1, [r7, #8]
 800a23c:	4613      	mov	r3, r2
 800a23e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a240:	88fb      	ldrh	r3, [r7, #6]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	2100      	movs	r1, #0
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 fba0 	bl	800a98c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2204      	movs	r2, #4
 800a262:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a266:	2300      	movs	r3, #0
 800a268:	2200      	movs	r2, #0
 800a26a:	2100      	movs	r1, #0
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fb6a 	bl	800a946 <USBD_LL_Transmit>

  return USBD_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2205      	movs	r2, #5
 800a288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a28c:	2300      	movs	r3, #0
 800a28e:	2200      	movs	r2, #0
 800a290:	2100      	movs	r1, #0
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fb7a 	bl	800a98c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	4912      	ldr	r1, [pc, #72]	; (800a2f4 <MX_USB_DEVICE_Init+0x50>)
 800a2ac:	4812      	ldr	r0, [pc, #72]	; (800a2f8 <MX_USB_DEVICE_Init+0x54>)
 800a2ae:	f7fe ff5f 	bl	8009170 <USBD_Init>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2b8:	f7f7 f90e 	bl	80014d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a2bc:	490f      	ldr	r1, [pc, #60]	; (800a2fc <MX_USB_DEVICE_Init+0x58>)
 800a2be:	480e      	ldr	r0, [pc, #56]	; (800a2f8 <MX_USB_DEVICE_Init+0x54>)
 800a2c0:	f7fe ff81 	bl	80091c6 <USBD_RegisterClass>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2ca:	f7f7 f905 	bl	80014d8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a2ce:	490c      	ldr	r1, [pc, #48]	; (800a300 <MX_USB_DEVICE_Init+0x5c>)
 800a2d0:	4809      	ldr	r0, [pc, #36]	; (800a2f8 <MX_USB_DEVICE_Init+0x54>)
 800a2d2:	f7fe ff37 	bl	8009144 <USBD_CUSTOM_HID_RegisterInterface>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2dc:	f7f7 f8fc 	bl	80014d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2e0:	4805      	ldr	r0, [pc, #20]	; (800a2f8 <MX_USB_DEVICE_Init+0x54>)
 800a2e2:	f7fe ff89 	bl	80091f8 <USBD_Start>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2ec:	f7f7 f8f4 	bl	80014d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2f0:	bf00      	nop
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	2000011c 	.word	0x2000011c
 800a2f8:	200003a4 	.word	0x200003a4
 800a2fc:	20000018 	.word	0x20000018
 800a300:	2000010c 	.word	0x2000010c

0800a304 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a304:	b480      	push	{r7}
 800a306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a308:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bc80      	pop	{r7}
 800a310:	4770      	bx	lr

0800a312 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a312:	b480      	push	{r7}
 800a314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a316:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a318:	4618      	mov	r0, r3
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bc80      	pop	{r7}
 800a31e:	4770      	bx	lr

0800a320 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800a328:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	bc80      	pop	{r7}
 800a332:	4770      	bx	lr

0800a334 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	6039      	str	r1, [r7, #0]
 800a33e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2212      	movs	r2, #18
 800a344:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a346:	4b03      	ldr	r3, [pc, #12]	; (800a354 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a348:	4618      	mov	r0, r3
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bc80      	pop	{r7}
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20000138 	.word	0x20000138

0800a358 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	6039      	str	r1, [r7, #0]
 800a362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	2204      	movs	r2, #4
 800a368:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a36a:	4b03      	ldr	r3, [pc, #12]	; (800a378 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	bc80      	pop	{r7}
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	2000014c 	.word	0x2000014c

0800a37c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	6039      	str	r1, [r7, #0]
 800a386:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d105      	bne.n	800a39a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	4907      	ldr	r1, [pc, #28]	; (800a3b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a392:	4808      	ldr	r0, [pc, #32]	; (800a3b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a394:	f7ff fea8 	bl	800a0e8 <USBD_GetString>
 800a398:	e004      	b.n	800a3a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	4904      	ldr	r1, [pc, #16]	; (800a3b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a39e:	4805      	ldr	r0, [pc, #20]	; (800a3b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3a0:	f7ff fea2 	bl	800a0e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3a4:	4b02      	ldr	r3, [pc, #8]	; (800a3b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20000668 	.word	0x20000668
 800a3b4:	0800b41c 	.word	0x0800b41c

0800a3b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	4904      	ldr	r1, [pc, #16]	; (800a3d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3c8:	4804      	ldr	r0, [pc, #16]	; (800a3dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3ca:	f7ff fe8d 	bl	800a0e8 <USBD_GetString>
  return USBD_StrDesc;
 800a3ce:	4b02      	ldr	r3, [pc, #8]	; (800a3d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000668 	.word	0x20000668
 800a3dc:	0800b42c 	.word	0x0800b42c

0800a3e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	6039      	str	r1, [r7, #0]
 800a3ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	221a      	movs	r2, #26
 800a3f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3f2:	f000 f843 	bl	800a47c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a3f6:	4b02      	ldr	r3, [pc, #8]	; (800a400 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	20000150 	.word	0x20000150

0800a404 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	4603      	mov	r3, r0
 800a40c:	6039      	str	r1, [r7, #0]
 800a40e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a410:	79fb      	ldrb	r3, [r7, #7]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d105      	bne.n	800a422 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	4907      	ldr	r1, [pc, #28]	; (800a438 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a41a:	4808      	ldr	r0, [pc, #32]	; (800a43c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a41c:	f7ff fe64 	bl	800a0e8 <USBD_GetString>
 800a420:	e004      	b.n	800a42c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	4904      	ldr	r1, [pc, #16]	; (800a438 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a426:	4805      	ldr	r0, [pc, #20]	; (800a43c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a428:	f7ff fe5e 	bl	800a0e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a42c:	4b02      	ldr	r3, [pc, #8]	; (800a438 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20000668 	.word	0x20000668
 800a43c:	0800b438 	.word	0x0800b438

0800a440 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	6039      	str	r1, [r7, #0]
 800a44a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d105      	bne.n	800a45e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	4907      	ldr	r1, [pc, #28]	; (800a474 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a456:	4808      	ldr	r0, [pc, #32]	; (800a478 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a458:	f7ff fe46 	bl	800a0e8 <USBD_GetString>
 800a45c:	e004      	b.n	800a468 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	4904      	ldr	r1, [pc, #16]	; (800a474 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a462:	4805      	ldr	r0, [pc, #20]	; (800a478 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a464:	f7ff fe40 	bl	800a0e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a468:	4b02      	ldr	r3, [pc, #8]	; (800a474 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	20000668 	.word	0x20000668
 800a478:	0800b44c 	.word	0x0800b44c

0800a47c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a482:	4b0f      	ldr	r3, [pc, #60]	; (800a4c0 <Get_SerialNum+0x44>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a488:	4b0e      	ldr	r3, [pc, #56]	; (800a4c4 <Get_SerialNum+0x48>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a48e:	4b0e      	ldr	r3, [pc, #56]	; (800a4c8 <Get_SerialNum+0x4c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4413      	add	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d009      	beq.n	800a4b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4a2:	2208      	movs	r2, #8
 800a4a4:	4909      	ldr	r1, [pc, #36]	; (800a4cc <Get_SerialNum+0x50>)
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 f814 	bl	800a4d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4ac:	2204      	movs	r2, #4
 800a4ae:	4908      	ldr	r1, [pc, #32]	; (800a4d0 <Get_SerialNum+0x54>)
 800a4b0:	68b8      	ldr	r0, [r7, #8]
 800a4b2:	f000 f80f 	bl	800a4d4 <IntToUnicode>
  }
}
 800a4b6:	bf00      	nop
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	1ffff7e8 	.word	0x1ffff7e8
 800a4c4:	1ffff7ec 	.word	0x1ffff7ec
 800a4c8:	1ffff7f0 	.word	0x1ffff7f0
 800a4cc:	20000152 	.word	0x20000152
 800a4d0:	20000162 	.word	0x20000162

0800a4d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	75fb      	strb	r3, [r7, #23]
 800a4ea:	e027      	b.n	800a53c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	0f1b      	lsrs	r3, r3, #28
 800a4f0:	2b09      	cmp	r3, #9
 800a4f2:	d80b      	bhi.n	800a50c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	0f1b      	lsrs	r3, r3, #28
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	7dfb      	ldrb	r3, [r7, #23]
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	4619      	mov	r1, r3
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	440b      	add	r3, r1
 800a504:	3230      	adds	r2, #48	; 0x30
 800a506:	b2d2      	uxtb	r2, r2
 800a508:	701a      	strb	r2, [r3, #0]
 800a50a:	e00a      	b.n	800a522 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	0f1b      	lsrs	r3, r3, #28
 800a510:	b2da      	uxtb	r2, r3
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	4619      	mov	r1, r3
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	440b      	add	r3, r1
 800a51c:	3237      	adds	r2, #55	; 0x37
 800a51e:	b2d2      	uxtb	r2, r2
 800a520:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	011b      	lsls	r3, r3, #4
 800a526:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	005b      	lsls	r3, r3, #1
 800a52c:	3301      	adds	r3, #1
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	4413      	add	r3, r2
 800a532:	2200      	movs	r2, #0
 800a534:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a536:	7dfb      	ldrb	r3, [r7, #23]
 800a538:	3301      	adds	r3, #1
 800a53a:	75fb      	strb	r3, [r7, #23]
 800a53c:	7dfa      	ldrb	r2, [r7, #23]
 800a53e:	79fb      	ldrb	r3, [r7, #7]
 800a540:	429a      	cmp	r2, r3
 800a542:	d3d3      	bcc.n	800a4ec <IntToUnicode+0x18>
  }
}
 800a544:	bf00      	nop
 800a546:	bf00      	nop
 800a548:	371c      	adds	r7, #28
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bc80      	pop	{r7}
 800a54e:	4770      	bx	lr

0800a550 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a0d      	ldr	r2, [pc, #52]	; (800a594 <HAL_PCD_MspInit+0x44>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d113      	bne.n	800a58a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a562:	4b0d      	ldr	r3, [pc, #52]	; (800a598 <HAL_PCD_MspInit+0x48>)
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	4a0c      	ldr	r2, [pc, #48]	; (800a598 <HAL_PCD_MspInit+0x48>)
 800a568:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a56c:	61d3      	str	r3, [r2, #28]
 800a56e:	4b0a      	ldr	r3, [pc, #40]	; (800a598 <HAL_PCD_MspInit+0x48>)
 800a570:	69db      	ldr	r3, [r3, #28]
 800a572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a57a:	2200      	movs	r2, #0
 800a57c:	2100      	movs	r1, #0
 800a57e:	2014      	movs	r0, #20
 800a580:	f7f7 fef7 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a584:	2014      	movs	r0, #20
 800a586:	f7f7 ff10 	bl	80023aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a58a:	bf00      	nop
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	40005c00 	.word	0x40005c00
 800a598:	40021000 	.word	0x40021000

0800a59c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f7fe fe68 	bl	8009288 <USBD_LL_SetupStage>
}
 800a5b8:	bf00      	nop
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a5d2:	78fa      	ldrb	r2, [r7, #3]
 800a5d4:	6879      	ldr	r1, [r7, #4]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	440b      	add	r3, r1
 800a5e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	78fb      	ldrb	r3, [r7, #3]
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	f7fe fe9a 	bl	8009322 <USBD_LL_DataOutStage>
}
 800a5ee:	bf00      	nop
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	460b      	mov	r3, r1
 800a600:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a608:	78fa      	ldrb	r2, [r7, #3]
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	4613      	mov	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	440b      	add	r3, r1
 800a616:	333c      	adds	r3, #60	; 0x3c
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	4619      	mov	r1, r3
 800a61e:	f7fe fef1 	bl	8009404 <USBD_LL_DataInStage>
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a638:	4618      	mov	r0, r3
 800a63a:	f7ff f801 	bl	8009640 <USBD_LL_SOF>
}
 800a63e:	bf00      	nop
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a64e:	2301      	movs	r3, #1
 800a650:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	2b02      	cmp	r3, #2
 800a658:	d001      	beq.n	800a65e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a65a:	f7f6 ff3d 	bl	80014d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a664:	7bfa      	ldrb	r2, [r7, #15]
 800a666:	4611      	mov	r1, r2
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe ffb1 	bl	80095d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a674:	4618      	mov	r0, r3
 800a676:	f7fe ff6a 	bl	800954e <USBD_LL_Reset>
}
 800a67a:	bf00      	nop
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe ffab 	bl	80095ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d005      	beq.n	800a6ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6a0:	4b04      	ldr	r3, [pc, #16]	; (800a6b4 <HAL_PCD_SuspendCallback+0x30>)
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	4a03      	ldr	r2, [pc, #12]	; (800a6b4 <HAL_PCD_SuspendCallback+0x30>)
 800a6a6:	f043 0306 	orr.w	r3, r3, #6
 800a6aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	e000ed00 	.word	0xe000ed00

0800a6b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe ffa5 	bl	8009616 <USBD_LL_Resume>
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a6dc:	4a23      	ldr	r2, [pc, #140]	; (800a76c <USBD_LL_Init+0x98>)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a21      	ldr	r2, [pc, #132]	; (800a76c <USBD_LL_Init+0x98>)
 800a6e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a6ec:	4b1f      	ldr	r3, [pc, #124]	; (800a76c <USBD_LL_Init+0x98>)
 800a6ee:	4a20      	ldr	r2, [pc, #128]	; (800a770 <USBD_LL_Init+0x9c>)
 800a6f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a6f2:	4b1e      	ldr	r3, [pc, #120]	; (800a76c <USBD_LL_Init+0x98>)
 800a6f4:	2208      	movs	r2, #8
 800a6f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a6f8:	4b1c      	ldr	r3, [pc, #112]	; (800a76c <USBD_LL_Init+0x98>)
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a6fe:	4b1b      	ldr	r3, [pc, #108]	; (800a76c <USBD_LL_Init+0x98>)
 800a700:	2200      	movs	r2, #0
 800a702:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a704:	4b19      	ldr	r3, [pc, #100]	; (800a76c <USBD_LL_Init+0x98>)
 800a706:	2200      	movs	r2, #0
 800a708:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a70a:	4b18      	ldr	r3, [pc, #96]	; (800a76c <USBD_LL_Init+0x98>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a710:	4816      	ldr	r0, [pc, #88]	; (800a76c <USBD_LL_Init+0x98>)
 800a712:	f7f8 fcc1 	bl	8003098 <HAL_PCD_Init>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a71c:	f7f6 fedc 	bl	80014d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a726:	2318      	movs	r3, #24
 800a728:	2200      	movs	r2, #0
 800a72a:	2100      	movs	r1, #0
 800a72c:	f7fa f91e 	bl	800496c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a736:	2358      	movs	r3, #88	; 0x58
 800a738:	2200      	movs	r2, #0
 800a73a:	2180      	movs	r1, #128	; 0x80
 800a73c:	f7fa f916 	bl	800496c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a746:	2398      	movs	r3, #152	; 0x98
 800a748:	2200      	movs	r2, #0
 800a74a:	2181      	movs	r1, #129	; 0x81
 800a74c:	f7fa f90e 	bl	800496c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a756:	23d8      	movs	r3, #216	; 0xd8
 800a758:	2200      	movs	r2, #0
 800a75a:	2101      	movs	r1, #1
 800a75c:	f7fa f906 	bl	800496c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20000868 	.word	0x20000868
 800a770:	40005c00 	.word	0x40005c00

0800a774 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7f8 fd8f 	bl	80032ae <HAL_PCD_Start>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	4618      	mov	r0, r3
 800a798:	f000 f93c 	bl	800aa14 <USBD_Get_USB_Status>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	4608      	mov	r0, r1
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	70fb      	strb	r3, [r7, #3]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70bb      	strb	r3, [r7, #2]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7d2:	78bb      	ldrb	r3, [r7, #2]
 800a7d4:	883a      	ldrh	r2, [r7, #0]
 800a7d6:	78f9      	ldrb	r1, [r7, #3]
 800a7d8:	f7f8 ff07 	bl	80035ea <HAL_PCD_EP_Open>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 f916 	bl	800aa14 <USBD_Get_USB_Status>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	460b      	mov	r3, r1
 800a800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a810:	78fa      	ldrb	r2, [r7, #3]
 800a812:	4611      	mov	r1, r2
 800a814:	4618      	mov	r0, r3
 800a816:	f7f8 ff4e 	bl	80036b6 <HAL_PCD_EP_Close>
 800a81a:	4603      	mov	r3, r0
 800a81c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
 800a820:	4618      	mov	r0, r3
 800a822:	f000 f8f7 	bl	800aa14 <USBD_Get_USB_Status>
 800a826:	4603      	mov	r3, r0
 800a828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a84e:	78fa      	ldrb	r2, [r7, #3]
 800a850:	4611      	mov	r1, r2
 800a852:	4618      	mov	r0, r3
 800a854:	f7f8 fff7 	bl	8003846 <HAL_PCD_EP_SetStall>
 800a858:	4603      	mov	r3, r0
 800a85a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 f8d8 	bl	800aa14 <USBD_Get_USB_Status>
 800a864:	4603      	mov	r3, r0
 800a866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a868:	7bbb      	ldrb	r3, [r7, #14]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b084      	sub	sp, #16
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	460b      	mov	r3, r1
 800a87c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a88c:	78fa      	ldrb	r2, [r7, #3]
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f7f9 f838 	bl	8003906 <HAL_PCD_EP_ClrStall>
 800a896:	4603      	mov	r3, r0
 800a898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f000 f8b9 	bl	800aa14 <USBD_Get_USB_Status>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	da0c      	bge.n	800a8e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8cc:	78fb      	ldrb	r3, [r7, #3]
 800a8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d2:	68f9      	ldr	r1, [r7, #12]
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	00db      	lsls	r3, r3, #3
 800a8de:	440b      	add	r3, r1
 800a8e0:	3302      	adds	r3, #2
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	e00b      	b.n	800a8fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8e6:	78fb      	ldrb	r3, [r7, #3]
 800a8e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8ec:	68f9      	ldr	r1, [r7, #12]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	00db      	lsls	r3, r3, #3
 800a8f6:	440b      	add	r3, r1
 800a8f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a8fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	bc80      	pop	{r7}
 800a906:	4770      	bx	lr

0800a908 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a922:	78fa      	ldrb	r2, [r7, #3]
 800a924:	4611      	mov	r1, r2
 800a926:	4618      	mov	r0, r3
 800a928:	f7f8 fe3a 	bl	80035a0 <HAL_PCD_SetAddress>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f86e 	bl	800aa14 <USBD_Get_USB_Status>
 800a938:	4603      	mov	r3, r0
 800a93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b086      	sub	sp, #24
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	461a      	mov	r2, r3
 800a952:	460b      	mov	r3, r1
 800a954:	72fb      	strb	r3, [r7, #11]
 800a956:	4613      	mov	r3, r2
 800a958:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a968:	893b      	ldrh	r3, [r7, #8]
 800a96a:	7af9      	ldrb	r1, [r7, #11]
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	f7f8 ff27 	bl	80037c0 <HAL_PCD_EP_Transmit>
 800a972:	4603      	mov	r3, r0
 800a974:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 f84b 	bl	800aa14 <USBD_Get_USB_Status>
 800a97e:	4603      	mov	r3, r0
 800a980:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a982:	7dbb      	ldrb	r3, [r7, #22]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	607a      	str	r2, [r7, #4]
 800a996:	461a      	mov	r2, r3
 800a998:	460b      	mov	r3, r1
 800a99a:	72fb      	strb	r3, [r7, #11]
 800a99c:	4613      	mov	r3, r2
 800a99e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9ae:	893b      	ldrh	r3, [r7, #8]
 800a9b0:	7af9      	ldrb	r1, [r7, #11]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	f7f8 fec7 	bl	8003746 <HAL_PCD_EP_Receive>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 f828 	bl	800aa14 <USBD_Get_USB_Status>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a9dc:	4b02      	ldr	r3, [pc, #8]	; (800a9e8 <USBD_static_malloc+0x14>)
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bc80      	pop	{r7}
 800a9e6:	4770      	bx	lr
 800a9e8:	20000b54 	.word	0x20000b54

0800a9ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]

}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bc80      	pop	{r7}
 800a9fc:	4770      	bx	lr

0800a9fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aa0a:	bf00      	nop
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bc80      	pop	{r7}
 800aa12:	4770      	bx	lr

0800aa14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa22:	79fb      	ldrb	r3, [r7, #7]
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d817      	bhi.n	800aa58 <USBD_Get_USB_Status+0x44>
 800aa28:	a201      	add	r2, pc, #4	; (adr r2, 800aa30 <USBD_Get_USB_Status+0x1c>)
 800aa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2e:	bf00      	nop
 800aa30:	0800aa41 	.word	0x0800aa41
 800aa34:	0800aa47 	.word	0x0800aa47
 800aa38:	0800aa4d 	.word	0x0800aa4d
 800aa3c:	0800aa53 	.word	0x0800aa53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
    break;
 800aa44:	e00b      	b.n	800aa5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa46:	2302      	movs	r3, #2
 800aa48:	73fb      	strb	r3, [r7, #15]
    break;
 800aa4a:	e008      	b.n	800aa5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa50:	e005      	b.n	800aa5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa52:	2302      	movs	r3, #2
 800aa54:	73fb      	strb	r3, [r7, #15]
    break;
 800aa56:	e002      	b.n	800aa5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa58:	2302      	movs	r3, #2
 800aa5a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa5c:	bf00      	nop
  }
  return usb_status;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bc80      	pop	{r7}
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop

0800aa6c <__errno>:
 800aa6c:	4b01      	ldr	r3, [pc, #4]	; (800aa74 <__errno+0x8>)
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	2000016c 	.word	0x2000016c

0800aa78 <__libc_init_array>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	2600      	movs	r6, #0
 800aa7c:	4d0c      	ldr	r5, [pc, #48]	; (800aab0 <__libc_init_array+0x38>)
 800aa7e:	4c0d      	ldr	r4, [pc, #52]	; (800aab4 <__libc_init_array+0x3c>)
 800aa80:	1b64      	subs	r4, r4, r5
 800aa82:	10a4      	asrs	r4, r4, #2
 800aa84:	42a6      	cmp	r6, r4
 800aa86:	d109      	bne.n	800aa9c <__libc_init_array+0x24>
 800aa88:	f000 fca4 	bl	800b3d4 <_init>
 800aa8c:	2600      	movs	r6, #0
 800aa8e:	4d0a      	ldr	r5, [pc, #40]	; (800aab8 <__libc_init_array+0x40>)
 800aa90:	4c0a      	ldr	r4, [pc, #40]	; (800aabc <__libc_init_array+0x44>)
 800aa92:	1b64      	subs	r4, r4, r5
 800aa94:	10a4      	asrs	r4, r4, #2
 800aa96:	42a6      	cmp	r6, r4
 800aa98:	d105      	bne.n	800aaa6 <__libc_init_array+0x2e>
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa0:	4798      	blx	r3
 800aaa2:	3601      	adds	r6, #1
 800aaa4:	e7ee      	b.n	800aa84 <__libc_init_array+0xc>
 800aaa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaaa:	4798      	blx	r3
 800aaac:	3601      	adds	r6, #1
 800aaae:	e7f2      	b.n	800aa96 <__libc_init_array+0x1e>
 800aab0:	0800b510 	.word	0x0800b510
 800aab4:	0800b510 	.word	0x0800b510
 800aab8:	0800b510 	.word	0x0800b510
 800aabc:	0800b514 	.word	0x0800b514

0800aac0 <memset>:
 800aac0:	4603      	mov	r3, r0
 800aac2:	4402      	add	r2, r0
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d100      	bne.n	800aaca <memset+0xa>
 800aac8:	4770      	bx	lr
 800aaca:	f803 1b01 	strb.w	r1, [r3], #1
 800aace:	e7f9      	b.n	800aac4 <memset+0x4>

0800aad0 <siprintf>:
 800aad0:	b40e      	push	{r1, r2, r3}
 800aad2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aad6:	b500      	push	{lr}
 800aad8:	b09c      	sub	sp, #112	; 0x70
 800aada:	ab1d      	add	r3, sp, #116	; 0x74
 800aadc:	9002      	str	r0, [sp, #8]
 800aade:	9006      	str	r0, [sp, #24]
 800aae0:	9107      	str	r1, [sp, #28]
 800aae2:	9104      	str	r1, [sp, #16]
 800aae4:	4808      	ldr	r0, [pc, #32]	; (800ab08 <siprintf+0x38>)
 800aae6:	4909      	ldr	r1, [pc, #36]	; (800ab0c <siprintf+0x3c>)
 800aae8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaec:	9105      	str	r1, [sp, #20]
 800aaee:	6800      	ldr	r0, [r0, #0]
 800aaf0:	a902      	add	r1, sp, #8
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	f000 f94c 	bl	800ad90 <_svfiprintf_r>
 800aaf8:	2200      	movs	r2, #0
 800aafa:	9b02      	ldr	r3, [sp, #8]
 800aafc:	701a      	strb	r2, [r3, #0]
 800aafe:	b01c      	add	sp, #112	; 0x70
 800ab00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab04:	b003      	add	sp, #12
 800ab06:	4770      	bx	lr
 800ab08:	2000016c 	.word	0x2000016c
 800ab0c:	ffff0208 	.word	0xffff0208

0800ab10 <strcpy>:
 800ab10:	4603      	mov	r3, r0
 800ab12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab16:	f803 2b01 	strb.w	r2, [r3], #1
 800ab1a:	2a00      	cmp	r2, #0
 800ab1c:	d1f9      	bne.n	800ab12 <strcpy+0x2>
 800ab1e:	4770      	bx	lr

0800ab20 <_free_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4605      	mov	r5, r0
 800ab24:	2900      	cmp	r1, #0
 800ab26:	d040      	beq.n	800abaa <_free_r+0x8a>
 800ab28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab2c:	1f0c      	subs	r4, r1, #4
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bfb8      	it	lt
 800ab32:	18e4      	addlt	r4, r4, r3
 800ab34:	f000 fc0a 	bl	800b34c <__malloc_lock>
 800ab38:	4a1c      	ldr	r2, [pc, #112]	; (800abac <_free_r+0x8c>)
 800ab3a:	6813      	ldr	r3, [r2, #0]
 800ab3c:	b933      	cbnz	r3, 800ab4c <_free_r+0x2c>
 800ab3e:	6063      	str	r3, [r4, #4]
 800ab40:	6014      	str	r4, [r2, #0]
 800ab42:	4628      	mov	r0, r5
 800ab44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab48:	f000 bc06 	b.w	800b358 <__malloc_unlock>
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	d908      	bls.n	800ab62 <_free_r+0x42>
 800ab50:	6820      	ldr	r0, [r4, #0]
 800ab52:	1821      	adds	r1, r4, r0
 800ab54:	428b      	cmp	r3, r1
 800ab56:	bf01      	itttt	eq
 800ab58:	6819      	ldreq	r1, [r3, #0]
 800ab5a:	685b      	ldreq	r3, [r3, #4]
 800ab5c:	1809      	addeq	r1, r1, r0
 800ab5e:	6021      	streq	r1, [r4, #0]
 800ab60:	e7ed      	b.n	800ab3e <_free_r+0x1e>
 800ab62:	461a      	mov	r2, r3
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	b10b      	cbz	r3, 800ab6c <_free_r+0x4c>
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	d9fa      	bls.n	800ab62 <_free_r+0x42>
 800ab6c:	6811      	ldr	r1, [r2, #0]
 800ab6e:	1850      	adds	r0, r2, r1
 800ab70:	42a0      	cmp	r0, r4
 800ab72:	d10b      	bne.n	800ab8c <_free_r+0x6c>
 800ab74:	6820      	ldr	r0, [r4, #0]
 800ab76:	4401      	add	r1, r0
 800ab78:	1850      	adds	r0, r2, r1
 800ab7a:	4283      	cmp	r3, r0
 800ab7c:	6011      	str	r1, [r2, #0]
 800ab7e:	d1e0      	bne.n	800ab42 <_free_r+0x22>
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	4401      	add	r1, r0
 800ab86:	6011      	str	r1, [r2, #0]
 800ab88:	6053      	str	r3, [r2, #4]
 800ab8a:	e7da      	b.n	800ab42 <_free_r+0x22>
 800ab8c:	d902      	bls.n	800ab94 <_free_r+0x74>
 800ab8e:	230c      	movs	r3, #12
 800ab90:	602b      	str	r3, [r5, #0]
 800ab92:	e7d6      	b.n	800ab42 <_free_r+0x22>
 800ab94:	6820      	ldr	r0, [r4, #0]
 800ab96:	1821      	adds	r1, r4, r0
 800ab98:	428b      	cmp	r3, r1
 800ab9a:	bf01      	itttt	eq
 800ab9c:	6819      	ldreq	r1, [r3, #0]
 800ab9e:	685b      	ldreq	r3, [r3, #4]
 800aba0:	1809      	addeq	r1, r1, r0
 800aba2:	6021      	streq	r1, [r4, #0]
 800aba4:	6063      	str	r3, [r4, #4]
 800aba6:	6054      	str	r4, [r2, #4]
 800aba8:	e7cb      	b.n	800ab42 <_free_r+0x22>
 800abaa:	bd38      	pop	{r3, r4, r5, pc}
 800abac:	20000bac 	.word	0x20000bac

0800abb0 <sbrk_aligned>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	4e0e      	ldr	r6, [pc, #56]	; (800abec <sbrk_aligned+0x3c>)
 800abb4:	460c      	mov	r4, r1
 800abb6:	6831      	ldr	r1, [r6, #0]
 800abb8:	4605      	mov	r5, r0
 800abba:	b911      	cbnz	r1, 800abc2 <sbrk_aligned+0x12>
 800abbc:	f000 fb7e 	bl	800b2bc <_sbrk_r>
 800abc0:	6030      	str	r0, [r6, #0]
 800abc2:	4621      	mov	r1, r4
 800abc4:	4628      	mov	r0, r5
 800abc6:	f000 fb79 	bl	800b2bc <_sbrk_r>
 800abca:	1c43      	adds	r3, r0, #1
 800abcc:	d00a      	beq.n	800abe4 <sbrk_aligned+0x34>
 800abce:	1cc4      	adds	r4, r0, #3
 800abd0:	f024 0403 	bic.w	r4, r4, #3
 800abd4:	42a0      	cmp	r0, r4
 800abd6:	d007      	beq.n	800abe8 <sbrk_aligned+0x38>
 800abd8:	1a21      	subs	r1, r4, r0
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 fb6e 	bl	800b2bc <_sbrk_r>
 800abe0:	3001      	adds	r0, #1
 800abe2:	d101      	bne.n	800abe8 <sbrk_aligned+0x38>
 800abe4:	f04f 34ff 	mov.w	r4, #4294967295
 800abe8:	4620      	mov	r0, r4
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	20000bb0 	.word	0x20000bb0

0800abf0 <_malloc_r>:
 800abf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf4:	1ccd      	adds	r5, r1, #3
 800abf6:	f025 0503 	bic.w	r5, r5, #3
 800abfa:	3508      	adds	r5, #8
 800abfc:	2d0c      	cmp	r5, #12
 800abfe:	bf38      	it	cc
 800ac00:	250c      	movcc	r5, #12
 800ac02:	2d00      	cmp	r5, #0
 800ac04:	4607      	mov	r7, r0
 800ac06:	db01      	blt.n	800ac0c <_malloc_r+0x1c>
 800ac08:	42a9      	cmp	r1, r5
 800ac0a:	d905      	bls.n	800ac18 <_malloc_r+0x28>
 800ac0c:	230c      	movs	r3, #12
 800ac0e:	2600      	movs	r6, #0
 800ac10:	603b      	str	r3, [r7, #0]
 800ac12:	4630      	mov	r0, r6
 800ac14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac18:	4e2e      	ldr	r6, [pc, #184]	; (800acd4 <_malloc_r+0xe4>)
 800ac1a:	f000 fb97 	bl	800b34c <__malloc_lock>
 800ac1e:	6833      	ldr	r3, [r6, #0]
 800ac20:	461c      	mov	r4, r3
 800ac22:	bb34      	cbnz	r4, 800ac72 <_malloc_r+0x82>
 800ac24:	4629      	mov	r1, r5
 800ac26:	4638      	mov	r0, r7
 800ac28:	f7ff ffc2 	bl	800abb0 <sbrk_aligned>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	4604      	mov	r4, r0
 800ac30:	d14d      	bne.n	800acce <_malloc_r+0xde>
 800ac32:	6834      	ldr	r4, [r6, #0]
 800ac34:	4626      	mov	r6, r4
 800ac36:	2e00      	cmp	r6, #0
 800ac38:	d140      	bne.n	800acbc <_malloc_r+0xcc>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	4638      	mov	r0, r7
 800ac40:	eb04 0803 	add.w	r8, r4, r3
 800ac44:	f000 fb3a 	bl	800b2bc <_sbrk_r>
 800ac48:	4580      	cmp	r8, r0
 800ac4a:	d13a      	bne.n	800acc2 <_malloc_r+0xd2>
 800ac4c:	6821      	ldr	r1, [r4, #0]
 800ac4e:	3503      	adds	r5, #3
 800ac50:	1a6d      	subs	r5, r5, r1
 800ac52:	f025 0503 	bic.w	r5, r5, #3
 800ac56:	3508      	adds	r5, #8
 800ac58:	2d0c      	cmp	r5, #12
 800ac5a:	bf38      	it	cc
 800ac5c:	250c      	movcc	r5, #12
 800ac5e:	4638      	mov	r0, r7
 800ac60:	4629      	mov	r1, r5
 800ac62:	f7ff ffa5 	bl	800abb0 <sbrk_aligned>
 800ac66:	3001      	adds	r0, #1
 800ac68:	d02b      	beq.n	800acc2 <_malloc_r+0xd2>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	442b      	add	r3, r5
 800ac6e:	6023      	str	r3, [r4, #0]
 800ac70:	e00e      	b.n	800ac90 <_malloc_r+0xa0>
 800ac72:	6822      	ldr	r2, [r4, #0]
 800ac74:	1b52      	subs	r2, r2, r5
 800ac76:	d41e      	bmi.n	800acb6 <_malloc_r+0xc6>
 800ac78:	2a0b      	cmp	r2, #11
 800ac7a:	d916      	bls.n	800acaa <_malloc_r+0xba>
 800ac7c:	1961      	adds	r1, r4, r5
 800ac7e:	42a3      	cmp	r3, r4
 800ac80:	6025      	str	r5, [r4, #0]
 800ac82:	bf18      	it	ne
 800ac84:	6059      	strne	r1, [r3, #4]
 800ac86:	6863      	ldr	r3, [r4, #4]
 800ac88:	bf08      	it	eq
 800ac8a:	6031      	streq	r1, [r6, #0]
 800ac8c:	5162      	str	r2, [r4, r5]
 800ac8e:	604b      	str	r3, [r1, #4]
 800ac90:	4638      	mov	r0, r7
 800ac92:	f104 060b 	add.w	r6, r4, #11
 800ac96:	f000 fb5f 	bl	800b358 <__malloc_unlock>
 800ac9a:	f026 0607 	bic.w	r6, r6, #7
 800ac9e:	1d23      	adds	r3, r4, #4
 800aca0:	1af2      	subs	r2, r6, r3
 800aca2:	d0b6      	beq.n	800ac12 <_malloc_r+0x22>
 800aca4:	1b9b      	subs	r3, r3, r6
 800aca6:	50a3      	str	r3, [r4, r2]
 800aca8:	e7b3      	b.n	800ac12 <_malloc_r+0x22>
 800acaa:	6862      	ldr	r2, [r4, #4]
 800acac:	42a3      	cmp	r3, r4
 800acae:	bf0c      	ite	eq
 800acb0:	6032      	streq	r2, [r6, #0]
 800acb2:	605a      	strne	r2, [r3, #4]
 800acb4:	e7ec      	b.n	800ac90 <_malloc_r+0xa0>
 800acb6:	4623      	mov	r3, r4
 800acb8:	6864      	ldr	r4, [r4, #4]
 800acba:	e7b2      	b.n	800ac22 <_malloc_r+0x32>
 800acbc:	4634      	mov	r4, r6
 800acbe:	6876      	ldr	r6, [r6, #4]
 800acc0:	e7b9      	b.n	800ac36 <_malloc_r+0x46>
 800acc2:	230c      	movs	r3, #12
 800acc4:	4638      	mov	r0, r7
 800acc6:	603b      	str	r3, [r7, #0]
 800acc8:	f000 fb46 	bl	800b358 <__malloc_unlock>
 800accc:	e7a1      	b.n	800ac12 <_malloc_r+0x22>
 800acce:	6025      	str	r5, [r4, #0]
 800acd0:	e7de      	b.n	800ac90 <_malloc_r+0xa0>
 800acd2:	bf00      	nop
 800acd4:	20000bac 	.word	0x20000bac

0800acd8 <__ssputs_r>:
 800acd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acdc:	688e      	ldr	r6, [r1, #8]
 800acde:	4682      	mov	sl, r0
 800ace0:	429e      	cmp	r6, r3
 800ace2:	460c      	mov	r4, r1
 800ace4:	4690      	mov	r8, r2
 800ace6:	461f      	mov	r7, r3
 800ace8:	d838      	bhi.n	800ad5c <__ssputs_r+0x84>
 800acea:	898a      	ldrh	r2, [r1, #12]
 800acec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acf0:	d032      	beq.n	800ad58 <__ssputs_r+0x80>
 800acf2:	6825      	ldr	r5, [r4, #0]
 800acf4:	6909      	ldr	r1, [r1, #16]
 800acf6:	3301      	adds	r3, #1
 800acf8:	eba5 0901 	sub.w	r9, r5, r1
 800acfc:	6965      	ldr	r5, [r4, #20]
 800acfe:	444b      	add	r3, r9
 800ad00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad08:	106d      	asrs	r5, r5, #1
 800ad0a:	429d      	cmp	r5, r3
 800ad0c:	bf38      	it	cc
 800ad0e:	461d      	movcc	r5, r3
 800ad10:	0553      	lsls	r3, r2, #21
 800ad12:	d531      	bpl.n	800ad78 <__ssputs_r+0xa0>
 800ad14:	4629      	mov	r1, r5
 800ad16:	f7ff ff6b 	bl	800abf0 <_malloc_r>
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	b950      	cbnz	r0, 800ad34 <__ssputs_r+0x5c>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	f8ca 3000 	str.w	r3, [sl]
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad2e:	81a3      	strh	r3, [r4, #12]
 800ad30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad34:	464a      	mov	r2, r9
 800ad36:	6921      	ldr	r1, [r4, #16]
 800ad38:	f000 fae0 	bl	800b2fc <memcpy>
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	6126      	str	r6, [r4, #16]
 800ad4a:	444e      	add	r6, r9
 800ad4c:	6026      	str	r6, [r4, #0]
 800ad4e:	463e      	mov	r6, r7
 800ad50:	6165      	str	r5, [r4, #20]
 800ad52:	eba5 0509 	sub.w	r5, r5, r9
 800ad56:	60a5      	str	r5, [r4, #8]
 800ad58:	42be      	cmp	r6, r7
 800ad5a:	d900      	bls.n	800ad5e <__ssputs_r+0x86>
 800ad5c:	463e      	mov	r6, r7
 800ad5e:	4632      	mov	r2, r6
 800ad60:	4641      	mov	r1, r8
 800ad62:	6820      	ldr	r0, [r4, #0]
 800ad64:	f000 fad8 	bl	800b318 <memmove>
 800ad68:	68a3      	ldr	r3, [r4, #8]
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	1b9b      	subs	r3, r3, r6
 800ad6e:	60a3      	str	r3, [r4, #8]
 800ad70:	6823      	ldr	r3, [r4, #0]
 800ad72:	4433      	add	r3, r6
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	e7db      	b.n	800ad30 <__ssputs_r+0x58>
 800ad78:	462a      	mov	r2, r5
 800ad7a:	f000 faf3 	bl	800b364 <_realloc_r>
 800ad7e:	4606      	mov	r6, r0
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d1e1      	bne.n	800ad48 <__ssputs_r+0x70>
 800ad84:	4650      	mov	r0, sl
 800ad86:	6921      	ldr	r1, [r4, #16]
 800ad88:	f7ff feca 	bl	800ab20 <_free_r>
 800ad8c:	e7c7      	b.n	800ad1e <__ssputs_r+0x46>
	...

0800ad90 <_svfiprintf_r>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	4698      	mov	r8, r3
 800ad96:	898b      	ldrh	r3, [r1, #12]
 800ad98:	4607      	mov	r7, r0
 800ad9a:	061b      	lsls	r3, r3, #24
 800ad9c:	460d      	mov	r5, r1
 800ad9e:	4614      	mov	r4, r2
 800ada0:	b09d      	sub	sp, #116	; 0x74
 800ada2:	d50e      	bpl.n	800adc2 <_svfiprintf_r+0x32>
 800ada4:	690b      	ldr	r3, [r1, #16]
 800ada6:	b963      	cbnz	r3, 800adc2 <_svfiprintf_r+0x32>
 800ada8:	2140      	movs	r1, #64	; 0x40
 800adaa:	f7ff ff21 	bl	800abf0 <_malloc_r>
 800adae:	6028      	str	r0, [r5, #0]
 800adb0:	6128      	str	r0, [r5, #16]
 800adb2:	b920      	cbnz	r0, 800adbe <_svfiprintf_r+0x2e>
 800adb4:	230c      	movs	r3, #12
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	f04f 30ff 	mov.w	r0, #4294967295
 800adbc:	e0d1      	b.n	800af62 <_svfiprintf_r+0x1d2>
 800adbe:	2340      	movs	r3, #64	; 0x40
 800adc0:	616b      	str	r3, [r5, #20]
 800adc2:	2300      	movs	r3, #0
 800adc4:	9309      	str	r3, [sp, #36]	; 0x24
 800adc6:	2320      	movs	r3, #32
 800adc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adcc:	2330      	movs	r3, #48	; 0x30
 800adce:	f04f 0901 	mov.w	r9, #1
 800add2:	f8cd 800c 	str.w	r8, [sp, #12]
 800add6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af7c <_svfiprintf_r+0x1ec>
 800adda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adde:	4623      	mov	r3, r4
 800ade0:	469a      	mov	sl, r3
 800ade2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ade6:	b10a      	cbz	r2, 800adec <_svfiprintf_r+0x5c>
 800ade8:	2a25      	cmp	r2, #37	; 0x25
 800adea:	d1f9      	bne.n	800ade0 <_svfiprintf_r+0x50>
 800adec:	ebba 0b04 	subs.w	fp, sl, r4
 800adf0:	d00b      	beq.n	800ae0a <_svfiprintf_r+0x7a>
 800adf2:	465b      	mov	r3, fp
 800adf4:	4622      	mov	r2, r4
 800adf6:	4629      	mov	r1, r5
 800adf8:	4638      	mov	r0, r7
 800adfa:	f7ff ff6d 	bl	800acd8 <__ssputs_r>
 800adfe:	3001      	adds	r0, #1
 800ae00:	f000 80aa 	beq.w	800af58 <_svfiprintf_r+0x1c8>
 800ae04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae06:	445a      	add	r2, fp
 800ae08:	9209      	str	r2, [sp, #36]	; 0x24
 800ae0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 80a2 	beq.w	800af58 <_svfiprintf_r+0x1c8>
 800ae14:	2300      	movs	r3, #0
 800ae16:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae1e:	f10a 0a01 	add.w	sl, sl, #1
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	9307      	str	r3, [sp, #28]
 800ae26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae2c:	4654      	mov	r4, sl
 800ae2e:	2205      	movs	r2, #5
 800ae30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae34:	4851      	ldr	r0, [pc, #324]	; (800af7c <_svfiprintf_r+0x1ec>)
 800ae36:	f000 fa53 	bl	800b2e0 <memchr>
 800ae3a:	9a04      	ldr	r2, [sp, #16]
 800ae3c:	b9d8      	cbnz	r0, 800ae76 <_svfiprintf_r+0xe6>
 800ae3e:	06d0      	lsls	r0, r2, #27
 800ae40:	bf44      	itt	mi
 800ae42:	2320      	movmi	r3, #32
 800ae44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae48:	0711      	lsls	r1, r2, #28
 800ae4a:	bf44      	itt	mi
 800ae4c:	232b      	movmi	r3, #43	; 0x2b
 800ae4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae52:	f89a 3000 	ldrb.w	r3, [sl]
 800ae56:	2b2a      	cmp	r3, #42	; 0x2a
 800ae58:	d015      	beq.n	800ae86 <_svfiprintf_r+0xf6>
 800ae5a:	4654      	mov	r4, sl
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f04f 0c0a 	mov.w	ip, #10
 800ae62:	9a07      	ldr	r2, [sp, #28]
 800ae64:	4621      	mov	r1, r4
 800ae66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae6a:	3b30      	subs	r3, #48	; 0x30
 800ae6c:	2b09      	cmp	r3, #9
 800ae6e:	d94e      	bls.n	800af0e <_svfiprintf_r+0x17e>
 800ae70:	b1b0      	cbz	r0, 800aea0 <_svfiprintf_r+0x110>
 800ae72:	9207      	str	r2, [sp, #28]
 800ae74:	e014      	b.n	800aea0 <_svfiprintf_r+0x110>
 800ae76:	eba0 0308 	sub.w	r3, r0, r8
 800ae7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	46a2      	mov	sl, r4
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	e7d2      	b.n	800ae2c <_svfiprintf_r+0x9c>
 800ae86:	9b03      	ldr	r3, [sp, #12]
 800ae88:	1d19      	adds	r1, r3, #4
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	9103      	str	r1, [sp, #12]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	bfbb      	ittet	lt
 800ae92:	425b      	neglt	r3, r3
 800ae94:	f042 0202 	orrlt.w	r2, r2, #2
 800ae98:	9307      	strge	r3, [sp, #28]
 800ae9a:	9307      	strlt	r3, [sp, #28]
 800ae9c:	bfb8      	it	lt
 800ae9e:	9204      	strlt	r2, [sp, #16]
 800aea0:	7823      	ldrb	r3, [r4, #0]
 800aea2:	2b2e      	cmp	r3, #46	; 0x2e
 800aea4:	d10c      	bne.n	800aec0 <_svfiprintf_r+0x130>
 800aea6:	7863      	ldrb	r3, [r4, #1]
 800aea8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeaa:	d135      	bne.n	800af18 <_svfiprintf_r+0x188>
 800aeac:	9b03      	ldr	r3, [sp, #12]
 800aeae:	3402      	adds	r4, #2
 800aeb0:	1d1a      	adds	r2, r3, #4
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	9203      	str	r2, [sp, #12]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	bfb8      	it	lt
 800aeba:	f04f 33ff 	movlt.w	r3, #4294967295
 800aebe:	9305      	str	r3, [sp, #20]
 800aec0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800af80 <_svfiprintf_r+0x1f0>
 800aec4:	2203      	movs	r2, #3
 800aec6:	4650      	mov	r0, sl
 800aec8:	7821      	ldrb	r1, [r4, #0]
 800aeca:	f000 fa09 	bl	800b2e0 <memchr>
 800aece:	b140      	cbz	r0, 800aee2 <_svfiprintf_r+0x152>
 800aed0:	2340      	movs	r3, #64	; 0x40
 800aed2:	eba0 000a 	sub.w	r0, r0, sl
 800aed6:	fa03 f000 	lsl.w	r0, r3, r0
 800aeda:	9b04      	ldr	r3, [sp, #16]
 800aedc:	3401      	adds	r4, #1
 800aede:	4303      	orrs	r3, r0
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee6:	2206      	movs	r2, #6
 800aee8:	4826      	ldr	r0, [pc, #152]	; (800af84 <_svfiprintf_r+0x1f4>)
 800aeea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aeee:	f000 f9f7 	bl	800b2e0 <memchr>
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d038      	beq.n	800af68 <_svfiprintf_r+0x1d8>
 800aef6:	4b24      	ldr	r3, [pc, #144]	; (800af88 <_svfiprintf_r+0x1f8>)
 800aef8:	bb1b      	cbnz	r3, 800af42 <_svfiprintf_r+0x1b2>
 800aefa:	9b03      	ldr	r3, [sp, #12]
 800aefc:	3307      	adds	r3, #7
 800aefe:	f023 0307 	bic.w	r3, r3, #7
 800af02:	3308      	adds	r3, #8
 800af04:	9303      	str	r3, [sp, #12]
 800af06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af08:	4433      	add	r3, r6
 800af0a:	9309      	str	r3, [sp, #36]	; 0x24
 800af0c:	e767      	b.n	800adde <_svfiprintf_r+0x4e>
 800af0e:	460c      	mov	r4, r1
 800af10:	2001      	movs	r0, #1
 800af12:	fb0c 3202 	mla	r2, ip, r2, r3
 800af16:	e7a5      	b.n	800ae64 <_svfiprintf_r+0xd4>
 800af18:	2300      	movs	r3, #0
 800af1a:	f04f 0c0a 	mov.w	ip, #10
 800af1e:	4619      	mov	r1, r3
 800af20:	3401      	adds	r4, #1
 800af22:	9305      	str	r3, [sp, #20]
 800af24:	4620      	mov	r0, r4
 800af26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af2a:	3a30      	subs	r2, #48	; 0x30
 800af2c:	2a09      	cmp	r2, #9
 800af2e:	d903      	bls.n	800af38 <_svfiprintf_r+0x1a8>
 800af30:	2b00      	cmp	r3, #0
 800af32:	d0c5      	beq.n	800aec0 <_svfiprintf_r+0x130>
 800af34:	9105      	str	r1, [sp, #20]
 800af36:	e7c3      	b.n	800aec0 <_svfiprintf_r+0x130>
 800af38:	4604      	mov	r4, r0
 800af3a:	2301      	movs	r3, #1
 800af3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af40:	e7f0      	b.n	800af24 <_svfiprintf_r+0x194>
 800af42:	ab03      	add	r3, sp, #12
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	462a      	mov	r2, r5
 800af48:	4638      	mov	r0, r7
 800af4a:	4b10      	ldr	r3, [pc, #64]	; (800af8c <_svfiprintf_r+0x1fc>)
 800af4c:	a904      	add	r1, sp, #16
 800af4e:	f3af 8000 	nop.w
 800af52:	1c42      	adds	r2, r0, #1
 800af54:	4606      	mov	r6, r0
 800af56:	d1d6      	bne.n	800af06 <_svfiprintf_r+0x176>
 800af58:	89ab      	ldrh	r3, [r5, #12]
 800af5a:	065b      	lsls	r3, r3, #25
 800af5c:	f53f af2c 	bmi.w	800adb8 <_svfiprintf_r+0x28>
 800af60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af62:	b01d      	add	sp, #116	; 0x74
 800af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af68:	ab03      	add	r3, sp, #12
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	462a      	mov	r2, r5
 800af6e:	4638      	mov	r0, r7
 800af70:	4b06      	ldr	r3, [pc, #24]	; (800af8c <_svfiprintf_r+0x1fc>)
 800af72:	a904      	add	r1, sp, #16
 800af74:	f000 f87c 	bl	800b070 <_printf_i>
 800af78:	e7eb      	b.n	800af52 <_svfiprintf_r+0x1c2>
 800af7a:	bf00      	nop
 800af7c:	0800b47c 	.word	0x0800b47c
 800af80:	0800b482 	.word	0x0800b482
 800af84:	0800b486 	.word	0x0800b486
 800af88:	00000000 	.word	0x00000000
 800af8c:	0800acd9 	.word	0x0800acd9

0800af90 <_printf_common>:
 800af90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af94:	4616      	mov	r6, r2
 800af96:	4699      	mov	r9, r3
 800af98:	688a      	ldr	r2, [r1, #8]
 800af9a:	690b      	ldr	r3, [r1, #16]
 800af9c:	4607      	mov	r7, r0
 800af9e:	4293      	cmp	r3, r2
 800afa0:	bfb8      	it	lt
 800afa2:	4613      	movlt	r3, r2
 800afa4:	6033      	str	r3, [r6, #0]
 800afa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afaa:	460c      	mov	r4, r1
 800afac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afb0:	b10a      	cbz	r2, 800afb6 <_printf_common+0x26>
 800afb2:	3301      	adds	r3, #1
 800afb4:	6033      	str	r3, [r6, #0]
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	0699      	lsls	r1, r3, #26
 800afba:	bf42      	ittt	mi
 800afbc:	6833      	ldrmi	r3, [r6, #0]
 800afbe:	3302      	addmi	r3, #2
 800afc0:	6033      	strmi	r3, [r6, #0]
 800afc2:	6825      	ldr	r5, [r4, #0]
 800afc4:	f015 0506 	ands.w	r5, r5, #6
 800afc8:	d106      	bne.n	800afd8 <_printf_common+0x48>
 800afca:	f104 0a19 	add.w	sl, r4, #25
 800afce:	68e3      	ldr	r3, [r4, #12]
 800afd0:	6832      	ldr	r2, [r6, #0]
 800afd2:	1a9b      	subs	r3, r3, r2
 800afd4:	42ab      	cmp	r3, r5
 800afd6:	dc28      	bgt.n	800b02a <_printf_common+0x9a>
 800afd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afdc:	1e13      	subs	r3, r2, #0
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	bf18      	it	ne
 800afe2:	2301      	movne	r3, #1
 800afe4:	0692      	lsls	r2, r2, #26
 800afe6:	d42d      	bmi.n	800b044 <_printf_common+0xb4>
 800afe8:	4649      	mov	r1, r9
 800afea:	4638      	mov	r0, r7
 800afec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aff0:	47c0      	blx	r8
 800aff2:	3001      	adds	r0, #1
 800aff4:	d020      	beq.n	800b038 <_printf_common+0xa8>
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	68e5      	ldr	r5, [r4, #12]
 800affa:	f003 0306 	and.w	r3, r3, #6
 800affe:	2b04      	cmp	r3, #4
 800b000:	bf18      	it	ne
 800b002:	2500      	movne	r5, #0
 800b004:	6832      	ldr	r2, [r6, #0]
 800b006:	f04f 0600 	mov.w	r6, #0
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	bf08      	it	eq
 800b00e:	1aad      	subeq	r5, r5, r2
 800b010:	6922      	ldr	r2, [r4, #16]
 800b012:	bf08      	it	eq
 800b014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b018:	4293      	cmp	r3, r2
 800b01a:	bfc4      	itt	gt
 800b01c:	1a9b      	subgt	r3, r3, r2
 800b01e:	18ed      	addgt	r5, r5, r3
 800b020:	341a      	adds	r4, #26
 800b022:	42b5      	cmp	r5, r6
 800b024:	d11a      	bne.n	800b05c <_printf_common+0xcc>
 800b026:	2000      	movs	r0, #0
 800b028:	e008      	b.n	800b03c <_printf_common+0xac>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4652      	mov	r2, sl
 800b02e:	4649      	mov	r1, r9
 800b030:	4638      	mov	r0, r7
 800b032:	47c0      	blx	r8
 800b034:	3001      	adds	r0, #1
 800b036:	d103      	bne.n	800b040 <_printf_common+0xb0>
 800b038:	f04f 30ff 	mov.w	r0, #4294967295
 800b03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b040:	3501      	adds	r5, #1
 800b042:	e7c4      	b.n	800afce <_printf_common+0x3e>
 800b044:	2030      	movs	r0, #48	; 0x30
 800b046:	18e1      	adds	r1, r4, r3
 800b048:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b04c:	1c5a      	adds	r2, r3, #1
 800b04e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b052:	4422      	add	r2, r4
 800b054:	3302      	adds	r3, #2
 800b056:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b05a:	e7c5      	b.n	800afe8 <_printf_common+0x58>
 800b05c:	2301      	movs	r3, #1
 800b05e:	4622      	mov	r2, r4
 800b060:	4649      	mov	r1, r9
 800b062:	4638      	mov	r0, r7
 800b064:	47c0      	blx	r8
 800b066:	3001      	adds	r0, #1
 800b068:	d0e6      	beq.n	800b038 <_printf_common+0xa8>
 800b06a:	3601      	adds	r6, #1
 800b06c:	e7d9      	b.n	800b022 <_printf_common+0x92>
	...

0800b070 <_printf_i>:
 800b070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b074:	7e0f      	ldrb	r7, [r1, #24]
 800b076:	4691      	mov	r9, r2
 800b078:	2f78      	cmp	r7, #120	; 0x78
 800b07a:	4680      	mov	r8, r0
 800b07c:	460c      	mov	r4, r1
 800b07e:	469a      	mov	sl, r3
 800b080:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b086:	d807      	bhi.n	800b098 <_printf_i+0x28>
 800b088:	2f62      	cmp	r7, #98	; 0x62
 800b08a:	d80a      	bhi.n	800b0a2 <_printf_i+0x32>
 800b08c:	2f00      	cmp	r7, #0
 800b08e:	f000 80d9 	beq.w	800b244 <_printf_i+0x1d4>
 800b092:	2f58      	cmp	r7, #88	; 0x58
 800b094:	f000 80a4 	beq.w	800b1e0 <_printf_i+0x170>
 800b098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b09c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0a0:	e03a      	b.n	800b118 <_printf_i+0xa8>
 800b0a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0a6:	2b15      	cmp	r3, #21
 800b0a8:	d8f6      	bhi.n	800b098 <_printf_i+0x28>
 800b0aa:	a101      	add	r1, pc, #4	; (adr r1, 800b0b0 <_printf_i+0x40>)
 800b0ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0b0:	0800b109 	.word	0x0800b109
 800b0b4:	0800b11d 	.word	0x0800b11d
 800b0b8:	0800b099 	.word	0x0800b099
 800b0bc:	0800b099 	.word	0x0800b099
 800b0c0:	0800b099 	.word	0x0800b099
 800b0c4:	0800b099 	.word	0x0800b099
 800b0c8:	0800b11d 	.word	0x0800b11d
 800b0cc:	0800b099 	.word	0x0800b099
 800b0d0:	0800b099 	.word	0x0800b099
 800b0d4:	0800b099 	.word	0x0800b099
 800b0d8:	0800b099 	.word	0x0800b099
 800b0dc:	0800b22b 	.word	0x0800b22b
 800b0e0:	0800b14d 	.word	0x0800b14d
 800b0e4:	0800b20d 	.word	0x0800b20d
 800b0e8:	0800b099 	.word	0x0800b099
 800b0ec:	0800b099 	.word	0x0800b099
 800b0f0:	0800b24d 	.word	0x0800b24d
 800b0f4:	0800b099 	.word	0x0800b099
 800b0f8:	0800b14d 	.word	0x0800b14d
 800b0fc:	0800b099 	.word	0x0800b099
 800b100:	0800b099 	.word	0x0800b099
 800b104:	0800b215 	.word	0x0800b215
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	1d1a      	adds	r2, r3, #4
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	602a      	str	r2, [r5, #0]
 800b110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b118:	2301      	movs	r3, #1
 800b11a:	e0a4      	b.n	800b266 <_printf_i+0x1f6>
 800b11c:	6820      	ldr	r0, [r4, #0]
 800b11e:	6829      	ldr	r1, [r5, #0]
 800b120:	0606      	lsls	r6, r0, #24
 800b122:	f101 0304 	add.w	r3, r1, #4
 800b126:	d50a      	bpl.n	800b13e <_printf_i+0xce>
 800b128:	680e      	ldr	r6, [r1, #0]
 800b12a:	602b      	str	r3, [r5, #0]
 800b12c:	2e00      	cmp	r6, #0
 800b12e:	da03      	bge.n	800b138 <_printf_i+0xc8>
 800b130:	232d      	movs	r3, #45	; 0x2d
 800b132:	4276      	negs	r6, r6
 800b134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b138:	230a      	movs	r3, #10
 800b13a:	485e      	ldr	r0, [pc, #376]	; (800b2b4 <_printf_i+0x244>)
 800b13c:	e019      	b.n	800b172 <_printf_i+0x102>
 800b13e:	680e      	ldr	r6, [r1, #0]
 800b140:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b144:	602b      	str	r3, [r5, #0]
 800b146:	bf18      	it	ne
 800b148:	b236      	sxthne	r6, r6
 800b14a:	e7ef      	b.n	800b12c <_printf_i+0xbc>
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	6820      	ldr	r0, [r4, #0]
 800b150:	1d19      	adds	r1, r3, #4
 800b152:	6029      	str	r1, [r5, #0]
 800b154:	0601      	lsls	r1, r0, #24
 800b156:	d501      	bpl.n	800b15c <_printf_i+0xec>
 800b158:	681e      	ldr	r6, [r3, #0]
 800b15a:	e002      	b.n	800b162 <_printf_i+0xf2>
 800b15c:	0646      	lsls	r6, r0, #25
 800b15e:	d5fb      	bpl.n	800b158 <_printf_i+0xe8>
 800b160:	881e      	ldrh	r6, [r3, #0]
 800b162:	2f6f      	cmp	r7, #111	; 0x6f
 800b164:	bf0c      	ite	eq
 800b166:	2308      	moveq	r3, #8
 800b168:	230a      	movne	r3, #10
 800b16a:	4852      	ldr	r0, [pc, #328]	; (800b2b4 <_printf_i+0x244>)
 800b16c:	2100      	movs	r1, #0
 800b16e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b172:	6865      	ldr	r5, [r4, #4]
 800b174:	2d00      	cmp	r5, #0
 800b176:	bfa8      	it	ge
 800b178:	6821      	ldrge	r1, [r4, #0]
 800b17a:	60a5      	str	r5, [r4, #8]
 800b17c:	bfa4      	itt	ge
 800b17e:	f021 0104 	bicge.w	r1, r1, #4
 800b182:	6021      	strge	r1, [r4, #0]
 800b184:	b90e      	cbnz	r6, 800b18a <_printf_i+0x11a>
 800b186:	2d00      	cmp	r5, #0
 800b188:	d04d      	beq.n	800b226 <_printf_i+0x1b6>
 800b18a:	4615      	mov	r5, r2
 800b18c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b190:	fb03 6711 	mls	r7, r3, r1, r6
 800b194:	5dc7      	ldrb	r7, [r0, r7]
 800b196:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b19a:	4637      	mov	r7, r6
 800b19c:	42bb      	cmp	r3, r7
 800b19e:	460e      	mov	r6, r1
 800b1a0:	d9f4      	bls.n	800b18c <_printf_i+0x11c>
 800b1a2:	2b08      	cmp	r3, #8
 800b1a4:	d10b      	bne.n	800b1be <_printf_i+0x14e>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	07de      	lsls	r6, r3, #31
 800b1aa:	d508      	bpl.n	800b1be <_printf_i+0x14e>
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	6861      	ldr	r1, [r4, #4]
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	bfde      	ittt	le
 800b1b4:	2330      	movle	r3, #48	; 0x30
 800b1b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1be:	1b52      	subs	r2, r2, r5
 800b1c0:	6122      	str	r2, [r4, #16]
 800b1c2:	464b      	mov	r3, r9
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4640      	mov	r0, r8
 800b1c8:	f8cd a000 	str.w	sl, [sp]
 800b1cc:	aa03      	add	r2, sp, #12
 800b1ce:	f7ff fedf 	bl	800af90 <_printf_common>
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	d14c      	bne.n	800b270 <_printf_i+0x200>
 800b1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1da:	b004      	add	sp, #16
 800b1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e0:	4834      	ldr	r0, [pc, #208]	; (800b2b4 <_printf_i+0x244>)
 800b1e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1e6:	6829      	ldr	r1, [r5, #0]
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1ee:	6029      	str	r1, [r5, #0]
 800b1f0:	061d      	lsls	r5, r3, #24
 800b1f2:	d514      	bpl.n	800b21e <_printf_i+0x1ae>
 800b1f4:	07df      	lsls	r7, r3, #31
 800b1f6:	bf44      	itt	mi
 800b1f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b1fc:	6023      	strmi	r3, [r4, #0]
 800b1fe:	b91e      	cbnz	r6, 800b208 <_printf_i+0x198>
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	f023 0320 	bic.w	r3, r3, #32
 800b206:	6023      	str	r3, [r4, #0]
 800b208:	2310      	movs	r3, #16
 800b20a:	e7af      	b.n	800b16c <_printf_i+0xfc>
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	f043 0320 	orr.w	r3, r3, #32
 800b212:	6023      	str	r3, [r4, #0]
 800b214:	2378      	movs	r3, #120	; 0x78
 800b216:	4828      	ldr	r0, [pc, #160]	; (800b2b8 <_printf_i+0x248>)
 800b218:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b21c:	e7e3      	b.n	800b1e6 <_printf_i+0x176>
 800b21e:	0659      	lsls	r1, r3, #25
 800b220:	bf48      	it	mi
 800b222:	b2b6      	uxthmi	r6, r6
 800b224:	e7e6      	b.n	800b1f4 <_printf_i+0x184>
 800b226:	4615      	mov	r5, r2
 800b228:	e7bb      	b.n	800b1a2 <_printf_i+0x132>
 800b22a:	682b      	ldr	r3, [r5, #0]
 800b22c:	6826      	ldr	r6, [r4, #0]
 800b22e:	1d18      	adds	r0, r3, #4
 800b230:	6961      	ldr	r1, [r4, #20]
 800b232:	6028      	str	r0, [r5, #0]
 800b234:	0635      	lsls	r5, r6, #24
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	d501      	bpl.n	800b23e <_printf_i+0x1ce>
 800b23a:	6019      	str	r1, [r3, #0]
 800b23c:	e002      	b.n	800b244 <_printf_i+0x1d4>
 800b23e:	0670      	lsls	r0, r6, #25
 800b240:	d5fb      	bpl.n	800b23a <_printf_i+0x1ca>
 800b242:	8019      	strh	r1, [r3, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	4615      	mov	r5, r2
 800b248:	6123      	str	r3, [r4, #16]
 800b24a:	e7ba      	b.n	800b1c2 <_printf_i+0x152>
 800b24c:	682b      	ldr	r3, [r5, #0]
 800b24e:	2100      	movs	r1, #0
 800b250:	1d1a      	adds	r2, r3, #4
 800b252:	602a      	str	r2, [r5, #0]
 800b254:	681d      	ldr	r5, [r3, #0]
 800b256:	6862      	ldr	r2, [r4, #4]
 800b258:	4628      	mov	r0, r5
 800b25a:	f000 f841 	bl	800b2e0 <memchr>
 800b25e:	b108      	cbz	r0, 800b264 <_printf_i+0x1f4>
 800b260:	1b40      	subs	r0, r0, r5
 800b262:	6060      	str	r0, [r4, #4]
 800b264:	6863      	ldr	r3, [r4, #4]
 800b266:	6123      	str	r3, [r4, #16]
 800b268:	2300      	movs	r3, #0
 800b26a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b26e:	e7a8      	b.n	800b1c2 <_printf_i+0x152>
 800b270:	462a      	mov	r2, r5
 800b272:	4649      	mov	r1, r9
 800b274:	4640      	mov	r0, r8
 800b276:	6923      	ldr	r3, [r4, #16]
 800b278:	47d0      	blx	sl
 800b27a:	3001      	adds	r0, #1
 800b27c:	d0ab      	beq.n	800b1d6 <_printf_i+0x166>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	079b      	lsls	r3, r3, #30
 800b282:	d413      	bmi.n	800b2ac <_printf_i+0x23c>
 800b284:	68e0      	ldr	r0, [r4, #12]
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	4298      	cmp	r0, r3
 800b28a:	bfb8      	it	lt
 800b28c:	4618      	movlt	r0, r3
 800b28e:	e7a4      	b.n	800b1da <_printf_i+0x16a>
 800b290:	2301      	movs	r3, #1
 800b292:	4632      	mov	r2, r6
 800b294:	4649      	mov	r1, r9
 800b296:	4640      	mov	r0, r8
 800b298:	47d0      	blx	sl
 800b29a:	3001      	adds	r0, #1
 800b29c:	d09b      	beq.n	800b1d6 <_printf_i+0x166>
 800b29e:	3501      	adds	r5, #1
 800b2a0:	68e3      	ldr	r3, [r4, #12]
 800b2a2:	9903      	ldr	r1, [sp, #12]
 800b2a4:	1a5b      	subs	r3, r3, r1
 800b2a6:	42ab      	cmp	r3, r5
 800b2a8:	dcf2      	bgt.n	800b290 <_printf_i+0x220>
 800b2aa:	e7eb      	b.n	800b284 <_printf_i+0x214>
 800b2ac:	2500      	movs	r5, #0
 800b2ae:	f104 0619 	add.w	r6, r4, #25
 800b2b2:	e7f5      	b.n	800b2a0 <_printf_i+0x230>
 800b2b4:	0800b48d 	.word	0x0800b48d
 800b2b8:	0800b49e 	.word	0x0800b49e

0800b2bc <_sbrk_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4d05      	ldr	r5, [pc, #20]	; (800b2d8 <_sbrk_r+0x1c>)
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	602b      	str	r3, [r5, #0]
 800b2c8:	f7f6 fac8 	bl	800185c <_sbrk>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d102      	bne.n	800b2d6 <_sbrk_r+0x1a>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	b103      	cbz	r3, 800b2d6 <_sbrk_r+0x1a>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	20000bb8 	.word	0x20000bb8

0800b2dc <__retarget_lock_acquire_recursive>:
 800b2dc:	4770      	bx	lr

0800b2de <__retarget_lock_release_recursive>:
 800b2de:	4770      	bx	lr

0800b2e0 <memchr>:
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	b510      	push	{r4, lr}
 800b2e4:	b2c9      	uxtb	r1, r1
 800b2e6:	4402      	add	r2, r0
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	d101      	bne.n	800b2f2 <memchr+0x12>
 800b2ee:	2000      	movs	r0, #0
 800b2f0:	e003      	b.n	800b2fa <memchr+0x1a>
 800b2f2:	7804      	ldrb	r4, [r0, #0]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	428c      	cmp	r4, r1
 800b2f8:	d1f6      	bne.n	800b2e8 <memchr+0x8>
 800b2fa:	bd10      	pop	{r4, pc}

0800b2fc <memcpy>:
 800b2fc:	440a      	add	r2, r1
 800b2fe:	4291      	cmp	r1, r2
 800b300:	f100 33ff 	add.w	r3, r0, #4294967295
 800b304:	d100      	bne.n	800b308 <memcpy+0xc>
 800b306:	4770      	bx	lr
 800b308:	b510      	push	{r4, lr}
 800b30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b30e:	4291      	cmp	r1, r2
 800b310:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b314:	d1f9      	bne.n	800b30a <memcpy+0xe>
 800b316:	bd10      	pop	{r4, pc}

0800b318 <memmove>:
 800b318:	4288      	cmp	r0, r1
 800b31a:	b510      	push	{r4, lr}
 800b31c:	eb01 0402 	add.w	r4, r1, r2
 800b320:	d902      	bls.n	800b328 <memmove+0x10>
 800b322:	4284      	cmp	r4, r0
 800b324:	4623      	mov	r3, r4
 800b326:	d807      	bhi.n	800b338 <memmove+0x20>
 800b328:	1e43      	subs	r3, r0, #1
 800b32a:	42a1      	cmp	r1, r4
 800b32c:	d008      	beq.n	800b340 <memmove+0x28>
 800b32e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b332:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b336:	e7f8      	b.n	800b32a <memmove+0x12>
 800b338:	4601      	mov	r1, r0
 800b33a:	4402      	add	r2, r0
 800b33c:	428a      	cmp	r2, r1
 800b33e:	d100      	bne.n	800b342 <memmove+0x2a>
 800b340:	bd10      	pop	{r4, pc}
 800b342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b34a:	e7f7      	b.n	800b33c <memmove+0x24>

0800b34c <__malloc_lock>:
 800b34c:	4801      	ldr	r0, [pc, #4]	; (800b354 <__malloc_lock+0x8>)
 800b34e:	f7ff bfc5 	b.w	800b2dc <__retarget_lock_acquire_recursive>
 800b352:	bf00      	nop
 800b354:	20000bb4 	.word	0x20000bb4

0800b358 <__malloc_unlock>:
 800b358:	4801      	ldr	r0, [pc, #4]	; (800b360 <__malloc_unlock+0x8>)
 800b35a:	f7ff bfc0 	b.w	800b2de <__retarget_lock_release_recursive>
 800b35e:	bf00      	nop
 800b360:	20000bb4 	.word	0x20000bb4

0800b364 <_realloc_r>:
 800b364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b368:	4680      	mov	r8, r0
 800b36a:	4614      	mov	r4, r2
 800b36c:	460e      	mov	r6, r1
 800b36e:	b921      	cbnz	r1, 800b37a <_realloc_r+0x16>
 800b370:	4611      	mov	r1, r2
 800b372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b376:	f7ff bc3b 	b.w	800abf0 <_malloc_r>
 800b37a:	b92a      	cbnz	r2, 800b388 <_realloc_r+0x24>
 800b37c:	f7ff fbd0 	bl	800ab20 <_free_r>
 800b380:	4625      	mov	r5, r4
 800b382:	4628      	mov	r0, r5
 800b384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b388:	f000 f81b 	bl	800b3c2 <_malloc_usable_size_r>
 800b38c:	4284      	cmp	r4, r0
 800b38e:	4607      	mov	r7, r0
 800b390:	d802      	bhi.n	800b398 <_realloc_r+0x34>
 800b392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b396:	d812      	bhi.n	800b3be <_realloc_r+0x5a>
 800b398:	4621      	mov	r1, r4
 800b39a:	4640      	mov	r0, r8
 800b39c:	f7ff fc28 	bl	800abf0 <_malloc_r>
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d0ed      	beq.n	800b382 <_realloc_r+0x1e>
 800b3a6:	42bc      	cmp	r4, r7
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	bf28      	it	cs
 800b3ae:	463a      	movcs	r2, r7
 800b3b0:	f7ff ffa4 	bl	800b2fc <memcpy>
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	f7ff fbb2 	bl	800ab20 <_free_r>
 800b3bc:	e7e1      	b.n	800b382 <_realloc_r+0x1e>
 800b3be:	4635      	mov	r5, r6
 800b3c0:	e7df      	b.n	800b382 <_realloc_r+0x1e>

0800b3c2 <_malloc_usable_size_r>:
 800b3c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3c6:	1f18      	subs	r0, r3, #4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	bfbc      	itt	lt
 800b3cc:	580b      	ldrlt	r3, [r1, r0]
 800b3ce:	18c0      	addlt	r0, r0, r3
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <_init>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	bf00      	nop
 800b3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3da:	bc08      	pop	{r3}
 800b3dc:	469e      	mov	lr, r3
 800b3de:	4770      	bx	lr

0800b3e0 <_fini>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	bf00      	nop
 800b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e6:	bc08      	pop	{r3}
 800b3e8:	469e      	mov	lr, r3
 800b3ea:	4770      	bx	lr
