
SHIFTER_RAKE_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a28c  0800a28c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a28c  0800a28c  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a28c  0800a28c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a28c  0800a28c  0001a28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a290  0800a290  0001a290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800a294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  200001cc  0800a460  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b90  0800a460  00020b90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c17  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003302  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00035110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00036120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae4d  00000000  00000000  00036fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014166  00000000  00000000  00051e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e030  00000000  00000000  00065f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3fab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a4  00000000  00000000  000f3ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a1c0 	.word	0x0800a1c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	0800a1c0 	.word	0x0800a1c0

0800014c <LerADCS>:
uint16_t ADCValue[3] = {0, 0, 0};
int8_t buffer2[6];
uint8_t rx_buffer[3];
uint8_t spi_select;

void LerADCS(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  ADCValue[0] = HAL_ADC_GetValue(&hadc1); // axis x cambio
 8000150:	4825      	ldr	r0, [pc, #148]	; (80001e8 <LerADCS+0x9c>)
 8000152:	f001 f8e9 	bl	8001328 <HAL_ADC_GetValue>
 8000156:	4603      	mov	r3, r0
 8000158:	b29a      	uxth	r2, r3
 800015a:	4b24      	ldr	r3, [pc, #144]	; (80001ec <LerADCS+0xa0>)
 800015c:	801a      	strh	r2, [r3, #0]
  ADCValue[1] = HAL_ADC_GetValue(&hadc1); // axis y cambio
 800015e:	4822      	ldr	r0, [pc, #136]	; (80001e8 <LerADCS+0x9c>)
 8000160:	f001 f8e2 	bl	8001328 <HAL_ADC_GetValue>
 8000164:	4603      	mov	r3, r0
 8000166:	b29a      	uxth	r2, r3
 8000168:	4b20      	ldr	r3, [pc, #128]	; (80001ec <LerADCS+0xa0>)
 800016a:	805a      	strh	r2, [r3, #2]
  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 800016c:	2301      	movs	r3, #1
 800016e:	2203      	movs	r2, #3
 8000170:	491f      	ldr	r1, [pc, #124]	; (80001f0 <LerADCS+0xa4>)
 8000172:	4820      	ldr	r0, [pc, #128]	; (80001f4 <LerADCS+0xa8>)
 8000174:	f004 f992 	bl	800449c <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 8000178:	2301      	movs	r3, #1
 800017a:	2203      	movs	r2, #3
 800017c:	491c      	ldr	r1, [pc, #112]	; (80001f0 <LerADCS+0xa4>)
 800017e:	481d      	ldr	r0, [pc, #116]	; (80001f4 <LerADCS+0xa8>)
 8000180:	f004 f98c 	bl	800449c <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 8000184:	2301      	movs	r3, #1
 8000186:	2203      	movs	r2, #3
 8000188:	4919      	ldr	r1, [pc, #100]	; (80001f0 <LerADCS+0xa4>)
 800018a:	481a      	ldr	r0, [pc, #104]	; (80001f4 <LerADCS+0xa8>)
 800018c:	f004 f986 	bl	800449c <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 8000190:	2301      	movs	r3, #1
 8000192:	2203      	movs	r2, #3
 8000194:	4916      	ldr	r1, [pc, #88]	; (80001f0 <LerADCS+0xa4>)
 8000196:	4817      	ldr	r0, [pc, #92]	; (80001f4 <LerADCS+0xa8>)
 8000198:	f004 f980 	bl	800449c <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi1, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 800019c:	2301      	movs	r3, #1
 800019e:	2203      	movs	r2, #3
 80001a0:	4913      	ldr	r1, [pc, #76]	; (80001f0 <LerADCS+0xa4>)
 80001a2:	4814      	ldr	r0, [pc, #80]	; (80001f4 <LerADCS+0xa8>)
 80001a4:	f004 f97a 	bl	800449c <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi2, rx_buffer, 3, 1);  //pb3 sck pin1 g27
 80001a8:	2301      	movs	r3, #1
 80001aa:	2203      	movs	r2, #3
 80001ac:	4910      	ldr	r1, [pc, #64]	; (80001f0 <LerADCS+0xa4>)
 80001ae:	4812      	ldr	r0, [pc, #72]	; (80001f8 <LerADCS+0xac>)
 80001b0:	f004 f974 	bl	800449c <HAL_SPI_Receive>
  ADCValue[2] = HAL_ADC_GetValue(&hadc1); // sck pin 9 reading -> ~0=desconectado, ~4096=g25, ~2048=g27
 80001b4:	480c      	ldr	r0, [pc, #48]	; (80001e8 <LerADCS+0x9c>)
 80001b6:	f001 f8b7 	bl	8001328 <HAL_ADC_GetValue>
 80001ba:	4603      	mov	r3, r0
 80001bc:	b29a      	uxth	r2, r3
 80001be:	4b0b      	ldr	r3, [pc, #44]	; (80001ec <LerADCS+0xa0>)
 80001c0:	809a      	strh	r2, [r3, #4]
//  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[0]), 100);
//  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[1]), 100);
//  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[2]), 100);
  if (ADCValue[2] > 3850){
 80001c2:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <LerADCS+0xa0>)
 80001c4:	889b      	ldrh	r3, [r3, #4]
 80001c6:	f640 720a 	movw	r2, #3850	; 0xf0a
 80001ca:	4293      	cmp	r3, r2
 80001cc:	d903      	bls.n	80001d6 <LerADCS+0x8a>
	  spi_select = 1;
 80001ce:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <LerADCS+0xb0>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	701a      	strb	r2, [r3, #0]
 80001d4:	e002      	b.n	80001dc <LerADCS+0x90>
  }
  else
  {
	  spi_select = 2;
 80001d6:	4b09      	ldr	r3, [pc, #36]	; (80001fc <LerADCS+0xb0>)
 80001d8:	2202      	movs	r2, #2
 80001da:	701a      	strb	r2, [r3, #0]
  }
//  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", spi_select), 100);
//  HAL_UART_Transmit(&huart1, "      ", 6, 100);
//  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  HAL_Delay(1);
 80001dc:	2001      	movs	r0, #1
 80001de:	f000 fec9 	bl	8000f74 <HAL_Delay>
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	20000358 	.word	0x20000358
 80001f0:	20000368 	.word	0x20000368
 80001f4:	2000025c 	.word	0x2000025c
 80001f8:	200002b4 	.word	0x200002b4
 80001fc:	2000036b 	.word	0x2000036b

08000200 <LerSPI>:

void LerSPI(int select){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_SET);
 8000208:	2201      	movs	r2, #1
 800020a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800020e:	4830      	ldr	r0, [pc, #192]	; (80002d0 <LerSPI+0xd0>)
 8000210:	f001 ff2c 	bl	800206c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000214:	2001      	movs	r0, #1
 8000216:	f000 fead 	bl	8000f74 <HAL_Delay>
  select = 1; // for working with g27
 800021a:	2301      	movs	r3, #1
 800021c:	607b      	str	r3, [r7, #4]
  if (select == 1){
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2b01      	cmp	r3, #1
 8000222:	d105      	bne.n	8000230 <LerSPI+0x30>
    HAL_SPI_Receive(&hspi1, rx_buffer, 3, 50);
 8000224:	2332      	movs	r3, #50	; 0x32
 8000226:	2203      	movs	r2, #3
 8000228:	492a      	ldr	r1, [pc, #168]	; (80002d4 <LerSPI+0xd4>)
 800022a:	482b      	ldr	r0, [pc, #172]	; (80002d8 <LerSPI+0xd8>)
 800022c:	f004 f936 	bl	800449c <HAL_SPI_Receive>
  }
  if (select == 2){
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b02      	cmp	r3, #2
 8000234:	d105      	bne.n	8000242 <LerSPI+0x42>
    HAL_SPI_Receive(&hspi2, rx_buffer, 3, 50);
 8000236:	2332      	movs	r3, #50	; 0x32
 8000238:	2203      	movs	r2, #3
 800023a:	4926      	ldr	r1, [pc, #152]	; (80002d4 <LerSPI+0xd4>)
 800023c:	4827      	ldr	r0, [pc, #156]	; (80002dc <LerSPI+0xdc>)
 800023e:	f004 f92d 	bl	800449c <HAL_SPI_Receive>
  }
  HAL_Delay(1);
 8000242:	2001      	movs	r0, #1
 8000244:	f000 fe96 	bl	8000f74 <HAL_Delay>
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024e:	4820      	ldr	r0, [pc, #128]	; (80002d0 <LerSPI+0xd0>)
 8000250:	f001 ff0c 	bl	800206c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000254:	2001      	movs	r0, #1
 8000256:	f000 fe8d 	bl	8000f74 <HAL_Delay>

  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[0]), 100);
 800025a:	4b1e      	ldr	r3, [pc, #120]	; (80002d4 <LerSPI+0xd4>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	461a      	mov	r2, r3
 8000260:	491f      	ldr	r1, [pc, #124]	; (80002e0 <LerSPI+0xe0>)
 8000262:	4820      	ldr	r0, [pc, #128]	; (80002e4 <LerSPI+0xe4>)
 8000264:	f009 fb32 	bl	80098cc <siprintf>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	2364      	movs	r3, #100	; 0x64
 800026e:	491d      	ldr	r1, [pc, #116]	; (80002e4 <LerSPI+0xe4>)
 8000270:	481d      	ldr	r0, [pc, #116]	; (80002e8 <LerSPI+0xe8>)
 8000272:	f004 fd0c 	bl	8004c8e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[1]), 100);
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <LerSPI+0xd4>)
 8000278:	785b      	ldrb	r3, [r3, #1]
 800027a:	461a      	mov	r2, r3
 800027c:	4918      	ldr	r1, [pc, #96]	; (80002e0 <LerSPI+0xe0>)
 800027e:	4819      	ldr	r0, [pc, #100]	; (80002e4 <LerSPI+0xe4>)
 8000280:	f009 fb24 	bl	80098cc <siprintf>
 8000284:	4603      	mov	r3, r0
 8000286:	b29a      	uxth	r2, r3
 8000288:	2364      	movs	r3, #100	; 0x64
 800028a:	4916      	ldr	r1, [pc, #88]	; (80002e4 <LerSPI+0xe4>)
 800028c:	4816      	ldr	r0, [pc, #88]	; (80002e8 <LerSPI+0xe8>)
 800028e:	f004 fcfe 	bl	8004c8e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[2]), 100);
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <LerSPI+0xd4>)
 8000294:	789b      	ldrb	r3, [r3, #2]
 8000296:	461a      	mov	r2, r3
 8000298:	4911      	ldr	r1, [pc, #68]	; (80002e0 <LerSPI+0xe0>)
 800029a:	4812      	ldr	r0, [pc, #72]	; (80002e4 <LerSPI+0xe4>)
 800029c:	f009 fb16 	bl	80098cc <siprintf>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	2364      	movs	r3, #100	; 0x64
 80002a6:	490f      	ldr	r1, [pc, #60]	; (80002e4 <LerSPI+0xe4>)
 80002a8:	480f      	ldr	r0, [pc, #60]	; (80002e8 <LerSPI+0xe8>)
 80002aa:	f004 fcf0 	bl	8004c8e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "      ", 6, 100);
 80002ae:	2364      	movs	r3, #100	; 0x64
 80002b0:	2206      	movs	r2, #6
 80002b2:	490e      	ldr	r1, [pc, #56]	; (80002ec <LerSPI+0xec>)
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LerSPI+0xe8>)
 80002b6:	f004 fcea 	bl	8004c8e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
 80002ba:	2364      	movs	r3, #100	; 0x64
 80002bc:	2202      	movs	r2, #2
 80002be:	490c      	ldr	r1, [pc, #48]	; (80002f0 <LerSPI+0xf0>)
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <LerSPI+0xe8>)
 80002c2:	f004 fce4 	bl	8004c8e <HAL_UART_Transmit>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	20000368 	.word	0x20000368
 80002d8:	2000025c 	.word	0x2000025c
 80002dc:	200002b4 	.word	0x200002b4
 80002e0:	0800a1d8 	.word	0x0800a1d8
 80002e4:	20000360 	.word	0x20000360
 80002e8:	2000030c 	.word	0x2000030c
 80002ec:	0800a1dc 	.word	0x0800a1dc
 80002f0:	0800a1e4 	.word	0x0800a1e4

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fa:	f000 fdd9 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fe:	f000 fa03 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000302:	f000 fb67 	bl	80009d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000306:	f000 fb47 	bl	8000998 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800030a:	f008 fec9 	bl	80090a0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800030e:	f000 fa59 	bl	80007c4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000312:	f000 fab3 	bl	800087c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000316:	f000 fae3 	bl	80008e0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800031a:	f000 fb13 	bl	8000944 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 800031e:	2203      	movs	r2, #3
 8000320:	4993      	ldr	r1, [pc, #588]	; (8000570 <main+0x27c>)
 8000322:	4894      	ldr	r0, [pc, #592]	; (8000574 <main+0x280>)
 8000324:	f000 ff22 	bl	800116c <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  LerADCS();
 8000328:	f7ff ff10 	bl	800014c <LerADCS>
	  LerSPI(spi_select);
 800032c:	4b92      	ldr	r3, [pc, #584]	; (8000578 <main+0x284>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff65 	bl	8000200 <LerSPI>

	  uint16_t cambio_x_axis = (uint16_t) ADCValue[0];  //manopla x
 8000336:	4b8e      	ldr	r3, [pc, #568]	; (8000570 <main+0x27c>)
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	80fb      	strh	r3, [r7, #6]
	  uint16_t cambio_y_axis = (uint16_t) ADCValue[1];  //manopla y
 800033c:	4b8c      	ldr	r3, [pc, #560]	; (8000570 <main+0x27c>)
 800033e:	885b      	ldrh	r3, [r3, #2]
 8000340:	80bb      	strh	r3, [r7, #4]

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis > speed_div_y[1]){  //speed 1
 8000342:	4b8e      	ldr	r3, [pc, #568]	; (800057c <main+0x288>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	88fa      	ldrh	r2, [r7, #6]
 8000348:	429a      	cmp	r2, r3
 800034a:	d20c      	bcs.n	8000366 <main+0x72>
 800034c:	4b8c      	ldr	r3, [pc, #560]	; (8000580 <main+0x28c>)
 800034e:	885b      	ldrh	r3, [r3, #2]
 8000350:	88ba      	ldrh	r2, [r7, #4]
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <main+0x72>
		  joystickhid.botoes0 |= (uint8_t)(1<<0);	// SETA BOTAO 1
 8000356:	4b8b      	ldr	r3, [pc, #556]	; (8000584 <main+0x290>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	b2da      	uxtb	r2, r3
 8000360:	4b88      	ldr	r3, [pc, #544]	; (8000584 <main+0x290>)
 8000362:	701a      	strb	r2, [r3, #0]
 8000364:	e006      	b.n	8000374 <main+0x80>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<0);	// RESETA BOTAO 1
 8000366:	4b87      	ldr	r3, [pc, #540]	; (8000584 <main+0x290>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	f023 0301 	bic.w	r3, r3, #1
 800036e:	b2da      	uxtb	r2, r3
 8000370:	4b84      	ldr	r3, [pc, #528]	; (8000584 <main+0x290>)
 8000372:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis < speed_div_y[0]){  //speed2
 8000374:	4b81      	ldr	r3, [pc, #516]	; (800057c <main+0x288>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	88fa      	ldrh	r2, [r7, #6]
 800037a:	429a      	cmp	r2, r3
 800037c:	d20c      	bcs.n	8000398 <main+0xa4>
 800037e:	4b80      	ldr	r3, [pc, #512]	; (8000580 <main+0x28c>)
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	88ba      	ldrh	r2, [r7, #4]
 8000384:	429a      	cmp	r2, r3
 8000386:	d207      	bcs.n	8000398 <main+0xa4>
		  joystickhid.botoes0 |= (uint8_t)(1<<1);	// SETA BOTAO 2
 8000388:	4b7e      	ldr	r3, [pc, #504]	; (8000584 <main+0x290>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b7c      	ldr	r3, [pc, #496]	; (8000584 <main+0x290>)
 8000394:	701a      	strb	r2, [r3, #0]
 8000396:	e006      	b.n	80003a6 <main+0xb2>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<1);	// RESETA BOTAO 2
 8000398:	4b7a      	ldr	r3, [pc, #488]	; (8000584 <main+0x290>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	f023 0302 	bic.w	r3, r3, #2
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b78      	ldr	r3, [pc, #480]	; (8000584 <main+0x290>)
 80003a4:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis > speed_div_y[1]){  //speed 3
 80003a6:	4b75      	ldr	r3, [pc, #468]	; (800057c <main+0x288>)
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	88fa      	ldrh	r2, [r7, #6]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d911      	bls.n	80003d4 <main+0xe0>
 80003b0:	4b72      	ldr	r3, [pc, #456]	; (800057c <main+0x288>)
 80003b2:	885b      	ldrh	r3, [r3, #2]
 80003b4:	88fa      	ldrh	r2, [r7, #6]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d20c      	bcs.n	80003d4 <main+0xe0>
 80003ba:	4b71      	ldr	r3, [pc, #452]	; (8000580 <main+0x28c>)
 80003bc:	885b      	ldrh	r3, [r3, #2]
 80003be:	88ba      	ldrh	r2, [r7, #4]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d907      	bls.n	80003d4 <main+0xe0>
		  joystickhid.botoes0 |= (uint8_t)(1<<2);	// SETA BOTAO 3
 80003c4:	4b6f      	ldr	r3, [pc, #444]	; (8000584 <main+0x290>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b6d      	ldr	r3, [pc, #436]	; (8000584 <main+0x290>)
 80003d0:	701a      	strb	r2, [r3, #0]
 80003d2:	e006      	b.n	80003e2 <main+0xee>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<2);	// RESETA BOTAO 3
 80003d4:	4b6b      	ldr	r3, [pc, #428]	; (8000584 <main+0x290>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	f023 0304 	bic.w	r3, r3, #4
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	4b69      	ldr	r3, [pc, #420]	; (8000584 <main+0x290>)
 80003e0:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis < speed_div_y[0]){  //speed 4
 80003e2:	4b66      	ldr	r3, [pc, #408]	; (800057c <main+0x288>)
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	88fa      	ldrh	r2, [r7, #6]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d911      	bls.n	8000410 <main+0x11c>
 80003ec:	4b63      	ldr	r3, [pc, #396]	; (800057c <main+0x288>)
 80003ee:	885b      	ldrh	r3, [r3, #2]
 80003f0:	88fa      	ldrh	r2, [r7, #6]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d20c      	bcs.n	8000410 <main+0x11c>
 80003f6:	4b62      	ldr	r3, [pc, #392]	; (8000580 <main+0x28c>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	88ba      	ldrh	r2, [r7, #4]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d207      	bcs.n	8000410 <main+0x11c>
		  joystickhid.botoes0 |= (uint8_t)(1<<3);	// SETA BOTAO 4
 8000400:	4b60      	ldr	r3, [pc, #384]	; (8000584 <main+0x290>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	f043 0308 	orr.w	r3, r3, #8
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4b5e      	ldr	r3, [pc, #376]	; (8000584 <main+0x290>)
 800040c:	701a      	strb	r2, [r3, #0]
 800040e:	e006      	b.n	800041e <main+0x12a>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<3);	// RESETA BOTAO 4
 8000410:	4b5c      	ldr	r3, [pc, #368]	; (8000584 <main+0x290>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	f023 0308 	bic.w	r3, r3, #8
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b5a      	ldr	r3, [pc, #360]	; (8000584 <main+0x290>)
 800041c:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis > speed_div_y[1]){    //speed5
 800041e:	4b57      	ldr	r3, [pc, #348]	; (800057c <main+0x288>)
 8000420:	885b      	ldrh	r3, [r3, #2]
 8000422:	88fa      	ldrh	r2, [r7, #6]
 8000424:	429a      	cmp	r2, r3
 8000426:	d90c      	bls.n	8000442 <main+0x14e>
 8000428:	4b55      	ldr	r3, [pc, #340]	; (8000580 <main+0x28c>)
 800042a:	885b      	ldrh	r3, [r3, #2]
 800042c:	88ba      	ldrh	r2, [r7, #4]
 800042e:	429a      	cmp	r2, r3
 8000430:	d907      	bls.n	8000442 <main+0x14e>
		  joystickhid.botoes0 |= (uint8_t)(1<<4);	// SETA BOTAO 5
 8000432:	4b54      	ldr	r3, [pc, #336]	; (8000584 <main+0x290>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b51      	ldr	r3, [pc, #324]	; (8000584 <main+0x290>)
 800043e:	701a      	strb	r2, [r3, #0]
 8000440:	e006      	b.n	8000450 <main+0x15c>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<4);	// RESETA BOTAO 5
 8000442:	4b50      	ldr	r3, [pc, #320]	; (8000584 <main+0x290>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	f023 0310 	bic.w	r3, r3, #16
 800044a:	b2da      	uxtb	r2, r3
 800044c:	4b4d      	ldr	r3, [pc, #308]	; (8000584 <main+0x290>)
 800044e:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0]){    // speed 6
 8000450:	4b4a      	ldr	r3, [pc, #296]	; (800057c <main+0x288>)
 8000452:	885b      	ldrh	r3, [r3, #2]
 8000454:	88fa      	ldrh	r2, [r7, #6]
 8000456:	429a      	cmp	r2, r3
 8000458:	d90c      	bls.n	8000474 <main+0x180>
 800045a:	4b49      	ldr	r3, [pc, #292]	; (8000580 <main+0x28c>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	88ba      	ldrh	r2, [r7, #4]
 8000460:	429a      	cmp	r2, r3
 8000462:	d207      	bcs.n	8000474 <main+0x180>
		  joystickhid.botoes0 |= (uint8_t)(1<<5);	// SETA BOTAO 6
 8000464:	4b47      	ldr	r3, [pc, #284]	; (8000584 <main+0x290>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	f043 0320 	orr.w	r3, r3, #32
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b45      	ldr	r3, [pc, #276]	; (8000584 <main+0x290>)
 8000470:	701a      	strb	r2, [r3, #0]
 8000472:	e006      	b.n	8000482 <main+0x18e>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5);	// RESETA BOTAO 6
 8000474:	4b43      	ldr	r3, [pc, #268]	; (8000584 <main+0x290>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	f023 0320 	bic.w	r3, r3, #32
 800047c:	b2da      	uxtb	r2, r3
 800047e:	4b41      	ldr	r3, [pc, #260]	; (8000584 <main+0x290>)
 8000480:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<0))  {
 8000482:	4b41      	ldr	r3, [pc, #260]	; (8000588 <main+0x294>)
 8000484:	789b      	ldrb	r3, [r3, #2]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d007      	beq.n	800049e <main+0x1aa>
		  joystickhid.botoes0 |= (uint16_t) (1<<6);  // SETA BOTAO 7
 800048e:	4b3d      	ldr	r3, [pc, #244]	; (8000584 <main+0x290>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b3a      	ldr	r3, [pc, #232]	; (8000584 <main+0x290>)
 800049a:	701a      	strb	r2, [r3, #0]
 800049c:	e006      	b.n	80004ac <main+0x1b8>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 7
 800049e:	4b39      	ldr	r3, [pc, #228]	; (8000584 <main+0x290>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	4b36      	ldr	r3, [pc, #216]	; (8000584 <main+0x290>)
 80004aa:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<1))  {
 80004ac:	4b36      	ldr	r3, [pc, #216]	; (8000588 <main+0x294>)
 80004ae:	789b      	ldrb	r3, [r3, #2]
 80004b0:	f003 0302 	and.w	r3, r3, #2
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d007      	beq.n	80004c8 <main+0x1d4>
		  joystickhid.botoes0 |= (uint16_t)(1<<7);	// SETA BOTAO 8
 80004b8:	4b32      	ldr	r3, [pc, #200]	; (8000584 <main+0x290>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	4b30      	ldr	r3, [pc, #192]	; (8000584 <main+0x290>)
 80004c4:	701a      	strb	r2, [r3, #0]
 80004c6:	e006      	b.n	80004d6 <main+0x1e2>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 8
 80004c8:	4b2e      	ldr	r3, [pc, #184]	; (8000584 <main+0x290>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <main+0x290>)
 80004d4:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<2))  {
 80004d6:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <main+0x294>)
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	f003 0304 	and.w	r3, r3, #4
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d007      	beq.n	80004f2 <main+0x1fe>
		  joystickhid.botoes1 |= (uint16_t)(1<<0);	// SETA BOTAO 9
 80004e2:	4b28      	ldr	r3, [pc, #160]	; (8000584 <main+0x290>)
 80004e4:	785b      	ldrb	r3, [r3, #1]
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b25      	ldr	r3, [pc, #148]	; (8000584 <main+0x290>)
 80004ee:	705a      	strb	r2, [r3, #1]
 80004f0:	e006      	b.n	8000500 <main+0x20c>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 9
 80004f2:	4b24      	ldr	r3, [pc, #144]	; (8000584 <main+0x290>)
 80004f4:	785b      	ldrb	r3, [r3, #1]
 80004f6:	f023 0301 	bic.w	r3, r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <main+0x290>)
 80004fe:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<3))  {
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <main+0x294>)
 8000502:	789b      	ldrb	r3, [r3, #2]
 8000504:	f003 0308 	and.w	r3, r3, #8
 8000508:	2b00      	cmp	r3, #0
 800050a:	d007      	beq.n	800051c <main+0x228>
		  joystickhid.botoes1 |= (uint16_t)(1<<1);	// SETA BOTAO 10
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <main+0x290>)
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	f043 0302 	orr.w	r3, r3, #2
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <main+0x290>)
 8000518:	705a      	strb	r2, [r3, #1]
 800051a:	e006      	b.n	800052a <main+0x236>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 10
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <main+0x290>)
 800051e:	785b      	ldrb	r3, [r3, #1]
 8000520:	f023 0302 	bic.w	r3, r3, #2
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <main+0x290>)
 8000528:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<4))  {
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <main+0x294>)
 800052c:	789b      	ldrb	r3, [r3, #2]
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	2b00      	cmp	r3, #0
 8000534:	d007      	beq.n	8000546 <main+0x252>
		  joystickhid.botoes1 |= (uint16_t)(1<<2);	// SETA BOTAO 11
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <main+0x290>)
 8000538:	785b      	ldrb	r3, [r3, #1]
 800053a:	f043 0304 	orr.w	r3, r3, #4
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <main+0x290>)
 8000542:	705a      	strb	r2, [r3, #1]
 8000544:	e006      	b.n	8000554 <main+0x260>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<2);	// RESETA BOTAO 11
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <main+0x290>)
 8000548:	785b      	ldrb	r3, [r3, #1]
 800054a:	f023 0304 	bic.w	r3, r3, #4
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <main+0x290>)
 8000552:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<5))  {
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <main+0x294>)
 8000556:	789b      	ldrb	r3, [r3, #2]
 8000558:	f003 0320 	and.w	r3, r3, #32
 800055c:	2b00      	cmp	r3, #0
 800055e:	d015      	beq.n	800058c <main+0x298>
		  joystickhid.botoes1 |= (uint16_t)(1<<3);	// SETA BOTAO 12
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <main+0x290>)
 8000562:	785b      	ldrb	r3, [r3, #1]
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <main+0x290>)
 800056c:	705a      	strb	r2, [r3, #1]
 800056e:	e014      	b.n	800059a <main+0x2a6>
 8000570:	20000358 	.word	0x20000358
 8000574:	200001e8 	.word	0x200001e8
 8000578:	2000036b 	.word	0x2000036b
 800057c:	20000000 	.word	0x20000000
 8000580:	20000004 	.word	0x20000004
 8000584:	20000350 	.word	0x20000350
 8000588:	20000368 	.word	0x20000368
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<3);	// RESETA BOTAO 12
 800058c:	4b59      	ldr	r3, [pc, #356]	; (80006f4 <main+0x400>)
 800058e:	785b      	ldrb	r3, [r3, #1]
 8000590:	f023 0308 	bic.w	r3, r3, #8
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b57      	ldr	r3, [pc, #348]	; (80006f4 <main+0x400>)
 8000598:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<6))  {
 800059a:	4b57      	ldr	r3, [pc, #348]	; (80006f8 <main+0x404>)
 800059c:	789b      	ldrb	r3, [r3, #2]
 800059e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d007      	beq.n	80005b6 <main+0x2c2>
		  joystickhid.botoes1 |= (uint16_t)(1<<4);	// SETA BOTAO 13
 80005a6:	4b53      	ldr	r3, [pc, #332]	; (80006f4 <main+0x400>)
 80005a8:	785b      	ldrb	r3, [r3, #1]
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b50      	ldr	r3, [pc, #320]	; (80006f4 <main+0x400>)
 80005b2:	705a      	strb	r2, [r3, #1]
 80005b4:	e006      	b.n	80005c4 <main+0x2d0>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<4);	// RESETA BOTAO 13
 80005b6:	4b4f      	ldr	r3, [pc, #316]	; (80006f4 <main+0x400>)
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	f023 0310 	bic.w	r3, r3, #16
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b4c      	ldr	r3, [pc, #304]	; (80006f4 <main+0x400>)
 80005c2:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[2] & (uint16_t)(1<<7))  {
 80005c4:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <main+0x404>)
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	da07      	bge.n	80005de <main+0x2ea>
		  joystickhid.botoes1 |= (uint16_t)(1<<5);	// SETA BOTAO 14
 80005ce:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <main+0x400>)
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	f043 0320 	orr.w	r3, r3, #32
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b46      	ldr	r3, [pc, #280]	; (80006f4 <main+0x400>)
 80005da:	705a      	strb	r2, [r3, #1]
 80005dc:	e006      	b.n	80005ec <main+0x2f8>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<5);	// RESETA BOTAO 14
 80005de:	4b45      	ldr	r3, [pc, #276]	; (80006f4 <main+0x400>)
 80005e0:	785b      	ldrb	r3, [r3, #1]
 80005e2:	f023 0320 	bic.w	r3, r3, #32
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b42      	ldr	r3, [pc, #264]	; (80006f4 <main+0x400>)
 80005ea:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<0))  {
 80005ec:	4b42      	ldr	r3, [pc, #264]	; (80006f8 <main+0x404>)
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d007      	beq.n	8000608 <main+0x314>
		  joystickhid.botoes1 |= (uint16_t)(1<<6);	// SETA BOTAO 15
 80005f8:	4b3e      	ldr	r3, [pc, #248]	; (80006f4 <main+0x400>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b3c      	ldr	r3, [pc, #240]	; (80006f4 <main+0x400>)
 8000604:	705a      	strb	r2, [r3, #1]
 8000606:	e006      	b.n	8000616 <main+0x322>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 15
 8000608:	4b3a      	ldr	r3, [pc, #232]	; (80006f4 <main+0x400>)
 800060a:	785b      	ldrb	r3, [r3, #1]
 800060c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b38      	ldr	r3, [pc, #224]	; (80006f4 <main+0x400>)
 8000614:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<1))  {
 8000616:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <main+0x404>)
 8000618:	785b      	ldrb	r3, [r3, #1]
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	2b00      	cmp	r3, #0
 8000620:	d007      	beq.n	8000632 <main+0x33e>
		  joystickhid.botoes1 |= (uint32_t)(1<<7);	// SETA BOTAO 16
 8000622:	4b34      	ldr	r3, [pc, #208]	; (80006f4 <main+0x400>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <main+0x400>)
 800062e:	705a      	strb	r2, [r3, #1]
 8000630:	e006      	b.n	8000640 <main+0x34c>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 16
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <main+0x400>)
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <main+0x400>)
 800063e:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<2))  {
 8000640:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <main+0x404>)
 8000642:	785b      	ldrb	r3, [r3, #1]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	2b00      	cmp	r3, #0
 800064a:	d007      	beq.n	800065c <main+0x368>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<0);	// SETA BOTAO 17
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <main+0x400>)
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <main+0x400>)
 8000658:	709a      	strb	r2, [r3, #2]
 800065a:	e006      	b.n	800066a <main+0x376>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 17
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <main+0x400>)
 800065e:	789b      	ldrb	r3, [r3, #2]
 8000660:	f023 0301 	bic.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <main+0x400>)
 8000668:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<3))  {
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <main+0x404>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	2b00      	cmp	r3, #0
 8000674:	d007      	beq.n	8000686 <main+0x392>
		  joystickhid.botoes_freio0 |= (uint32_t)(1<<1);	// SETA BOTAO 18
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <main+0x400>)
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <main+0x400>)
 8000682:	709a      	strb	r2, [r3, #2]
 8000684:	e006      	b.n	8000694 <main+0x3a0>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 18
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <main+0x400>)
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	f023 0302 	bic.w	r3, r3, #2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <main+0x400>)
 8000692:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<6) && cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0])  {
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <main+0x404>)
 8000696:	785b      	ldrb	r3, [r3, #1]
 8000698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069c:	2b00      	cmp	r3, #0
 800069e:	d018      	beq.n	80006d2 <main+0x3de>
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <main+0x408>)
 80006a2:	885b      	ldrh	r3, [r3, #2]
 80006a4:	88fa      	ldrh	r2, [r7, #6]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d913      	bls.n	80006d2 <main+0x3de>
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <main+0x40c>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	88ba      	ldrh	r2, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d20e      	bcs.n	80006d2 <main+0x3de>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<2);	// SETA BOTAO 19 SPEED REVERSA
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <main+0x400>)
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <main+0x400>)
 80006c0:	709a      	strb	r2, [r3, #2]
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5); 			// RESETA BOTAO SPEED 6 QUANDO ATIVA A REVERSA
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <main+0x400>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	f023 0320 	bic.w	r3, r3, #32
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <main+0x400>)
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e006      	b.n	80006e0 <main+0x3ec>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint32_t)(1<<2);	// RESETA BOTAO 19 SPEED REVERSA
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <main+0x400>)
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	f023 0304 	bic.w	r3, r3, #4
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <main+0x400>)
 80006de:	709a      	strb	r2, [r3, #2]
	  //joystickhid.botoes0 = 0xff;
	  //	  joystickhid.botoes1 = 0;
	  	//  joystickhid.botoes_freio0 &= 0b11110000;
	 // }

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80006e0:	2208      	movs	r2, #8
 80006e2:	4904      	ldr	r1, [pc, #16]	; (80006f4 <main+0x400>)
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <main+0x410>)
 80006e6:	f007 fb79 	bl	8007ddc <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fc42 	bl	8000f74 <HAL_Delay>
  {
 80006f0:	e61a      	b.n	8000328 <main+0x34>
 80006f2:	bf00      	nop
 80006f4:	20000350 	.word	0x20000350
 80006f8:	20000368 	.word	0x20000368
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000004 	.word	0x20000004
 8000704:	20000378 	.word	0x20000378

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000712:	2228      	movs	r2, #40	; 0x28
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f009 f8d0 	bl	80098bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	2301      	movs	r3, #1
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000754:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075e:	4618      	mov	r0, r3
 8000760:	f003 f948 	bl	80039f4 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800076a:	f000 f9a1 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2101      	movs	r1, #1
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fbb4 	bl	8003ef8 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000796:	f000 f98b 	bl	8000ab0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800079a:	2312      	movs	r3, #18
 800079c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800079e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fd3b 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007b8:	f000 f97a 	bl	8000ab0 <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3750      	adds	r7, #80	; 0x50
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_ADC1_Init+0xb0>)
 80007d6:	4a28      	ldr	r2, [pc, #160]	; (8000878 <MX_ADC1_Init+0xb4>)
 80007d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_ADC1_Init+0xb0>)
 80007dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <MX_ADC1_Init+0xb0>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_ADC1_Init+0xb0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_ADC1_Init+0xb0>)
 80007f0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_ADC1_Init+0xb0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_ADC1_Init+0xb0>)
 80007fe:	2203      	movs	r2, #3
 8000800:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <MX_ADC1_Init+0xb0>)
 8000804:	f000 fbda 	bl	8000fbc <HAL_ADC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800080e:	f000 f94f 	bl	8000ab0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000816:	2301      	movs	r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800081a:	2307      	movs	r3, #7
 800081c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_ADC1_Init+0xb0>)
 8000824:	f000 fda8 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 f93f 	bl	8000ab0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000832:	2301      	movs	r3, #1
 8000834:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000836:	2302      	movs	r3, #2
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_ADC1_Init+0xb0>)
 8000840:	f000 fd9a 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800084a:	f000 f931 	bl	8000ab0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800084e:	2302      	movs	r3, #2
 8000850:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000852:	2303      	movs	r3, #3
 8000854:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <MX_ADC1_Init+0xb0>)
 800085c:	f000 fd8c 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000866:	f000 f923 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001e8 	.word	0x200001e8
 8000878:	40012400 	.word	0x40012400

0800087c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_SPI1_Init+0x5c>)
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <MX_SPI1_Init+0x60>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_SPI1_Init+0x5c>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_SPI1_Init+0x5c>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_SPI1_Init+0x5c>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_SPI1_Init+0x5c>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_SPI1_Init+0x5c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_SPI1_Init+0x5c>)
 80008a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_SPI1_Init+0x5c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_SPI1_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_SPI1_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_SPI1_Init+0x5c>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_SPI1_Init+0x5c>)
 80008c6:	f003 fd65 	bl	8004394 <HAL_SPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f8ee 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000025c 	.word	0x2000025c
 80008dc:	40013000 	.word	0x40013000

080008e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_SPI2_Init+0x5c>)
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <MX_SPI2_Init+0x60>)
 80008e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_SPI2_Init+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_SPI2_Init+0x5c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_SPI2_Init+0x5c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_SPI2_Init+0x5c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_SPI2_Init+0x5c>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_SPI2_Init+0x5c>)
 800090a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_SPI2_Init+0x5c>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_SPI2_Init+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_SPI2_Init+0x5c>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_SPI2_Init+0x5c>)
 8000924:	220a      	movs	r2, #10
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_SPI2_Init+0x5c>)
 800092a:	f003 fd33 	bl	8004394 <HAL_SPI_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f8bc 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200002b4 	.word	0x200002b4
 8000940:	40003800 	.word	0x40003800

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART1_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800097c:	f004 f93a 	bl	8004bf4 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f893 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000030c 	.word	0x2000030c
 8000994:	40013800 	.word	0x40013800

08000998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_DMA_Init+0x38>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <MX_DMA_Init+0x38>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_DMA_Init+0x38>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	200b      	movs	r0, #11
 80009bc:	f000 ffad 	bl	800191a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009c0:	200b      	movs	r0, #11
 80009c2:	f000 ffc6 	bl	8001952 <HAL_NVIC_EnableIRQ>

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a27      	ldr	r2, [pc, #156]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a06:	f043 0320 	orr.w	r3, r3, #32
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0320 	and.w	r3, r3, #32
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0308 	and.w	r3, r3, #8
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4e:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <MX_GPIO_Init+0xd4>)
 8000a50:	f001 fb0c 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFTER_CS_Pin|LED_PIN_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000a5a:	4814      	ldr	r0, [pc, #80]	; (8000aac <MX_GPIO_Init+0xd8>)
 8000a5c:	f001 fb06 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CALIB_BUTTON_Pin */
  GPIO_InitStruct.Pin = CALIB_BUTTON_Pin;
 8000a60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CALIB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4619      	mov	r1, r3
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <MX_GPIO_Init+0xd4>)
 8000a7a:	f001 f973 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHIFTER_CS_Pin LED_PIN_Pin */
  GPIO_InitStruct.Pin = SHIFTER_CS_Pin|LED_PIN_Pin;
 8000a7e:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_GPIO_Init+0xd8>)
 8000a98:	f001 f964 	bl	8001d64 <HAL_GPIO_Init>

}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40011000 	.word	0x40011000
 8000aac:	40010c00 	.word	0x40010c00

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_MspInit+0x40>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_MspInit+0x40>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_MspInit+0x40>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_MspInit+0x40>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_MspInit+0x40>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_MspInit+0x40>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <HAL_ADC_MspInit+0xbc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d149      	bne.n	8000bb4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b50:	2307      	movs	r3, #7
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b54:	2303      	movs	r3, #3
 8000b56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4819      	ldr	r0, [pc, #100]	; (8000bc4 <HAL_ADC_MspInit+0xc4>)
 8000b60:	f001 f900 	bl	8001d64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000b66:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_ADC_MspInit+0xcc>)
 8000b68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b82:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b8a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000b8e:	2220      	movs	r2, #32
 8000b90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000b9a:	f000 fef5 	bl	8001988 <HAL_DMA_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ba4:	f7ff ff84 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000bac:	621a      	str	r2, [r3, #32]
 8000bae:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40012400 	.word	0x40012400
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	20000218 	.word	0x20000218
 8000bcc:	40020008 	.word	0x40020008

08000bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a37      	ldr	r2, [pc, #220]	; (8000cc8 <HAL_SPI_MspInit+0xf8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d130      	bne.n	8000c52 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf0:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a35      	ldr	r2, [pc, #212]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000bf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c20:	2320      	movs	r3, #32
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <HAL_SPI_MspInit+0x100>)
 8000c34:	f001 f896 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c38:	2340      	movs	r3, #64	; 0x40
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4821      	ldr	r0, [pc, #132]	; (8000cd0 <HAL_SPI_MspInit+0x100>)
 8000c4c:	f001 f88a 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c50:	e036      	b.n	8000cc0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <HAL_SPI_MspInit+0x104>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d131      	bne.n	8000cc0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000c5e:	69db      	ldr	r3, [r3, #28]
 8000c60:	4a1a      	ldr	r2, [pc, #104]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c66:	61d3      	str	r3, [r2, #28]
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_SPI_MspInit+0xfc>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <HAL_SPI_MspInit+0x108>)
 8000ca2:	f001 f85f 	bl	8001d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0318 	add.w	r3, r7, #24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <HAL_SPI_MspInit+0x108>)
 8000cbc:	f001 f852 	bl	8001d64 <HAL_GPIO_Init>
}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	; 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40013000 	.word	0x40013000
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	40003800 	.word	0x40003800
 8000cd8:	40010c00 	.word	0x40010c00

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d131      	bne.n	8000d60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <HAL_UART_MspInit+0x94>)
 8000d42:	f001 f80f 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_UART_MspInit+0x94>)
 8000d5c:	f001 f802 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010800 	.word	0x40010800

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dba:	f000 f8bf 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <DMA1_Channel1_IRQHandler+0x10>)
 8000dca:	f000 fe97 	bl	8001afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000218 	.word	0x20000218

08000dd8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000dde:	f001 fa8e 	bl	80022fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000083c 	.word	0x2000083c

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f008 fd24 	bl	8009868 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20005000 	.word	0x20005000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	2000036c 	.word	0x2000036c
 8000e54:	20000b90 	.word	0x20000b90

08000e58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	; (8000e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e8a:	f7ff ffe5 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f008 fcf1 	bl	8009874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e92:	f7ff fa2f 	bl	80002f4 <main>
  bx lr
 8000e96:	4770      	bx	lr
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000ea0:	0800a294 	.word	0x0800a294
  ldr r2, =_sbss
 8000ea4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000ea8:	20000b90 	.word	0x20000b90

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x28>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x28>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 fd1f 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fdf6 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fd37 	bl	800196e <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 fcff 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000010 	.word	0x20000010
 8000f38:	2000000c 	.word	0x2000000c

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <HAL_IncTick+0x20>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000010 	.word	0x20000010
 8000f5c:	20000370 	.word	0x20000370

08000f60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <HAL_GetTick+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000370 	.word	0x20000370

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fff0 	bl	8000f60 <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffe0 	bl	8000f60 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000010 	.word	0x20000010

08000fbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e0be      	b.n	800115c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d109      	bne.n	8001000 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fd80 	bl	8000b00 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fb0b 	bl	800161c <ADC_ConversionStop_Disable>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	2b00      	cmp	r3, #0
 8001014:	f040 8099 	bne.w	800114a <HAL_ADC_Init+0x18e>
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 8095 	bne.w	800114a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001028:	f023 0302 	bic.w	r3, r3, #2
 800102c:	f043 0202 	orr.w	r2, r3, #2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800103c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7b1b      	ldrb	r3, [r3, #12]
 8001042:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001044:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	4313      	orrs	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001054:	d003      	beq.n	800105e <HAL_ADC_Init+0xa2>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <HAL_ADC_Init+0xa8>
 800105e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001062:	e000      	b.n	8001066 <HAL_ADC_Init+0xaa>
 8001064:	2300      	movs	r3, #0
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7d1b      	ldrb	r3, [r3, #20]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d119      	bne.n	80010a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7b1b      	ldrb	r3, [r3, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d109      	bne.n	8001090 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	3b01      	subs	r3, #1
 8001082:	035a      	lsls	r2, r3, #13
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	e00b      	b.n	80010a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	f043 0220 	orr.w	r2, r3, #32
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	f043 0201 	orr.w	r2, r3, #1
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HAL_ADC_Init+0x1a8>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	68b9      	ldr	r1, [r7, #8]
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d8:	d003      	beq.n	80010e2 <HAL_ADC_Init+0x126>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d104      	bne.n	80010ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	051b      	lsls	r3, r3, #20
 80010ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_ADC_Init+0x1ac>)
 8001108:	4013      	ands	r3, r2
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	429a      	cmp	r2, r3
 800110e:	d10b      	bne.n	8001128 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001126:	e018      	b.n	800115a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f023 0312 	bic.w	r3, r3, #18
 8001130:	f043 0210 	orr.w	r2, r3, #16
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	f043 0201 	orr.w	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001148:	e007      	b.n	800115a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	f043 0210 	orr.w	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800115a:	7dfb      	ldrb	r3, [r7, #23]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	ffe1f7fd 	.word	0xffe1f7fd
 8001168:	ff1f0efe 	.word	0xff1f0efe

0800116c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a64      	ldr	r2, [pc, #400]	; (8001314 <HAL_ADC_Start_DMA+0x1a8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d004      	beq.n	8001190 <HAL_ADC_Start_DMA+0x24>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a63      	ldr	r2, [pc, #396]	; (8001318 <HAL_ADC_Start_DMA+0x1ac>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d106      	bne.n	800119e <HAL_ADC_Start_DMA+0x32>
 8001190:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_ADC_Start_DMA+0x1a8>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001198:	2b00      	cmp	r3, #0
 800119a:	f040 80b3 	bne.w	8001304 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_ADC_Start_DMA+0x40>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e0ae      	b.n	800130a <HAL_ADC_Start_DMA+0x19e>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 f9d7 	bl	8001568 <ADC_Enable>
 80011ba:	4603      	mov	r3, r0
 80011bc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f040 809a 	bne.w	80012fa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a4e      	ldr	r2, [pc, #312]	; (8001318 <HAL_ADC_Start_DMA+0x1ac>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d105      	bne.n	80011f0 <HAL_ADC_Start_DMA+0x84>
 80011e4:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <HAL_ADC_Start_DMA+0x1a8>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d115      	bne.n	800121c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001206:	2b00      	cmp	r3, #0
 8001208:	d026      	beq.n	8001258 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001212:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800121a:	e01d      	b.n	8001258 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a39      	ldr	r2, [pc, #228]	; (8001314 <HAL_ADC_Start_DMA+0x1a8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d004      	beq.n	800123c <HAL_ADC_Start_DMA+0xd0>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a38      	ldr	r2, [pc, #224]	; (8001318 <HAL_ADC_Start_DMA+0x1ac>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d10d      	bne.n	8001258 <HAL_ADC_Start_DMA+0xec>
 800123c:	4b35      	ldr	r3, [pc, #212]	; (8001314 <HAL_ADC_Start_DMA+0x1a8>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001250:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001268:	f023 0206 	bic.w	r2, r3, #6
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001270:	e002      	b.n	8001278 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4a25      	ldr	r2, [pc, #148]	; (800131c <HAL_ADC_Start_DMA+0x1b0>)
 8001286:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4a24      	ldr	r2, [pc, #144]	; (8001320 <HAL_ADC_Start_DMA+0x1b4>)
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a23      	ldr	r2, [pc, #140]	; (8001324 <HAL_ADC_Start_DMA+0x1b8>)
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f06f 0202 	mvn.w	r2, #2
 80012a0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012b0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a18      	ldr	r0, [r3, #32]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	334c      	adds	r3, #76	; 0x4c
 80012bc:	4619      	mov	r1, r3
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f000 fbbb 	bl	8001a3c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012d4:	d108      	bne.n	80012e8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80012e4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80012e6:	e00f      	b.n	8001308 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012f6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80012f8:	e006      	b.n	8001308 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001302:	e001      	b.n	8001308 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001308:	7dfb      	ldrb	r3, [r7, #23]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40012400 	.word	0x40012400
 8001318:	40012800 	.word	0x40012800
 800131c:	0800169f 	.word	0x0800169f
 8001320:	0800171b 	.word	0x0800171b
 8001324:	08001737 	.word	0x08001737

08001328 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
	...

08001378 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x20>
 8001394:	2302      	movs	r3, #2
 8001396:	e0dc      	b.n	8001552 <HAL_ADC_ConfigChannel+0x1da>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b06      	cmp	r3, #6
 80013a6:	d81c      	bhi.n	80013e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	3b05      	subs	r3, #5
 80013ba:	221f      	movs	r2, #31
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4019      	ands	r1, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3b05      	subs	r3, #5
 80013d4:	fa00 f203 	lsl.w	r2, r0, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	635a      	str	r2, [r3, #52]	; 0x34
 80013e0:	e03c      	b.n	800145c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d81c      	bhi.n	8001424 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	3b23      	subs	r3, #35	; 0x23
 80013fc:	221f      	movs	r2, #31
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	4019      	ands	r1, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	3b23      	subs	r3, #35	; 0x23
 8001416:	fa00 f203 	lsl.w	r2, r0, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
 8001422:	e01b      	b.n	800145c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	3b41      	subs	r3, #65	; 0x41
 8001436:	221f      	movs	r2, #31
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	4019      	ands	r1, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	3b41      	subs	r3, #65	; 0x41
 8001450:	fa00 f203 	lsl.w	r2, r0, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b09      	cmp	r3, #9
 8001462:	d91c      	bls.n	800149e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68d9      	ldr	r1, [r3, #12]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	3b1e      	subs	r3, #30
 8001476:	2207      	movs	r2, #7
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	4019      	ands	r1, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6898      	ldr	r0, [r3, #8]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	3b1e      	subs	r3, #30
 8001490:	fa00 f203 	lsl.w	r2, r0, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	e019      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6919      	ldr	r1, [r3, #16]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	2207      	movs	r2, #7
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4019      	ands	r1, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	6898      	ldr	r0, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d003      	beq.n	80014e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014de:	2b11      	cmp	r3, #17
 80014e0:	d132      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_ADC_ConfigChannel+0x1e4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d125      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d126      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001508:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b10      	cmp	r3, #16
 8001510:	d11a      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_ADC_ConfigChannel+0x1e8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_ADC_ConfigChannel+0x1ec>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	0c9a      	lsrs	r2, r3, #18
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001528:	e002      	b.n	8001530 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3b01      	subs	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f9      	bne.n	800152a <HAL_ADC_ConfigChannel+0x1b2>
 8001536:	e007      	b.n	8001548 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	f043 0220 	orr.w	r2, r3, #32
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40012400 	.word	0x40012400
 8001560:	20000008 	.word	0x20000008
 8001564:	431bde83 	.word	0x431bde83

08001568 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d040      	beq.n	8001608 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <ADC_Enable+0xac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <ADC_Enable+0xb0>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9b      	lsrs	r3, r3, #18
 80015a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a4:	e002      	b.n	80015ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f9      	bne.n	80015a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015b2:	f7ff fcd5 	bl	8000f60 <HAL_GetTick>
 80015b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015b8:	e01f      	b.n	80015fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015ba:	f7ff fcd1 	bl	8000f60 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d918      	bls.n	80015fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d011      	beq.n	80015fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	f043 0210 	orr.w	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e007      	b.n	800160a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d1d8      	bne.n	80015ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	431bde83 	.word	0x431bde83

0800161c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b01      	cmp	r3, #1
 8001634:	d12e      	bne.n	8001694 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001646:	f7ff fc8b 	bl	8000f60 <HAL_GetTick>
 800164a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800164c:	e01b      	b.n	8001686 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800164e:	f7ff fc87 	bl	8000f60 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d914      	bls.n	8001686 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b01      	cmp	r3, #1
 8001668:	d10d      	bne.n	8001686 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	f043 0210 	orr.w	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e007      	b.n	8001696 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b01      	cmp	r3, #1
 8001692:	d0dc      	beq.n	800164e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d127      	bne.n	8001708 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016d2:	d115      	bne.n	8001700 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff fe1d 	bl	8001340 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001706:	e004      	b.n	8001712 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff fe12 	bl	8001352 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f043 0204 	orr.w	r2, r3, #4
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff fe01 	bl	8001364 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4906      	ldr	r1, [pc, #24]	; (8001804 <__NVIC_EnableIRQ+0x34>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff90 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff2d 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff42 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff90 	bl	800185c <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5f 	bl	8001808 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff35 	bl	80017d0 <__NVIC_EnableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffa2 	bl	80018c0 <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e043      	b.n	8001a26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_DMA_Init+0xa8>)
 80019a6:	4413      	add	r3, r2
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_DMA_Init+0xac>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	009a      	lsls	r2, r3, #2
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_DMA_Init+0xb0>)
 80019ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	bffdfff8 	.word	0xbffdfff8
 8001a34:	cccccccd 	.word	0xcccccccd
 8001a38:	40020000 	.word	0x40020000

08001a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_DMA_Start_IT+0x20>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e04a      	b.n	8001af2 <HAL_DMA_Start_IT+0xb6>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d13a      	bne.n	8001ae4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f938 	bl	8001d08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 020e 	orr.w	r2, r2, #14
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e00f      	b.n	8001ad2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0204 	bic.w	r2, r2, #4
 8001ac0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 020a 	orr.w	r2, r2, #10
 8001ad0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e005      	b.n	8001af0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001aec:	2302      	movs	r3, #2
 8001aee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	2204      	movs	r2, #4
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d04f      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0xc8>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d04a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a66      	ldr	r2, [pc, #408]	; (8001cec <HAL_DMA_IRQHandler+0x1f0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d029      	beq.n	8001baa <HAL_DMA_IRQHandler+0xae>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <HAL_DMA_IRQHandler+0x1f4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d022      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0xaa>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a63      	ldr	r2, [pc, #396]	; (8001cf4 <HAL_DMA_IRQHandler+0x1f8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01a      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xa4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a62      	ldr	r2, [pc, #392]	; (8001cf8 <HAL_DMA_IRQHandler+0x1fc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d012      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x9e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a60      	ldr	r2, [pc, #384]	; (8001cfc <HAL_DMA_IRQHandler+0x200>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00a      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x98>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a5f      	ldr	r2, [pc, #380]	; (8001d00 <HAL_DMA_IRQHandler+0x204>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d102      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x92>
 8001b88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b8c:	e00e      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001b8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b92:	e00b      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001b94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b98:	e008      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001b9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b9e:	e005      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba4:	e002      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001ba6:	2340      	movs	r3, #64	; 0x40
 8001ba8:	e000      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001baa:	2304      	movs	r3, #4
 8001bac:	4a55      	ldr	r2, [pc, #340]	; (8001d04 <HAL_DMA_IRQHandler+0x208>)
 8001bae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8094 	beq.w	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc2:	e08e      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	2202      	movs	r2, #2
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d056      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x186>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d051      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10b      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 020a 	bic.w	r2, r2, #10
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a38      	ldr	r2, [pc, #224]	; (8001cec <HAL_DMA_IRQHandler+0x1f0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d029      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x166>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a37      	ldr	r2, [pc, #220]	; (8001cf0 <HAL_DMA_IRQHandler+0x1f4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x162>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a35      	ldr	r2, [pc, #212]	; (8001cf4 <HAL_DMA_IRQHandler+0x1f8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01a      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x15c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a34      	ldr	r2, [pc, #208]	; (8001cf8 <HAL_DMA_IRQHandler+0x1fc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d012      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x156>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a32      	ldr	r2, [pc, #200]	; (8001cfc <HAL_DMA_IRQHandler+0x200>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00a      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x150>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <HAL_DMA_IRQHandler+0x204>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d102      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x14a>
 8001c40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c44:	e00e      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c4a:	e00b      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c50:	e008      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c56:	e005      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c5c:	e002      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c5e:	2320      	movs	r3, #32
 8001c60:	e000      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c62:	2302      	movs	r3, #2
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_DMA_IRQHandler+0x208>)
 8001c66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d034      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c80:	e02f      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	2208      	movs	r2, #8
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d028      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x1e8>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d023      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 020e 	bic.w	r2, r2, #14
 8001caa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
    }
  }
  return;
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
}
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40020008 	.word	0x40020008
 8001cf0:	4002001c 	.word	0x4002001c
 8001cf4:	40020030 	.word	0x40020030
 8001cf8:	40020044 	.word	0x40020044
 8001cfc:	40020058 	.word	0x40020058
 8001d00:	4002006c 	.word	0x4002006c
 8001d04:	40020000 	.word	0x40020000

08001d08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d108      	bne.n	8001d48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d46:	e007      	b.n	8001d58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b08b      	sub	sp, #44	; 0x2c
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d76:	e169      	b.n	800204c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 8158 	bne.w	8002046 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a9a      	ldr	r2, [pc, #616]	; (8002004 <HAL_GPIO_Init+0x2a0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d05e      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001da0:	4a98      	ldr	r2, [pc, #608]	; (8002004 <HAL_GPIO_Init+0x2a0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d875      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001da6:	4a98      	ldr	r2, [pc, #608]	; (8002008 <HAL_GPIO_Init+0x2a4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d058      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dac:	4a96      	ldr	r2, [pc, #600]	; (8002008 <HAL_GPIO_Init+0x2a4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d86f      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001db2:	4a96      	ldr	r2, [pc, #600]	; (800200c <HAL_GPIO_Init+0x2a8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d052      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001db8:	4a94      	ldr	r2, [pc, #592]	; (800200c <HAL_GPIO_Init+0x2a8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d869      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dbe:	4a94      	ldr	r2, [pc, #592]	; (8002010 <HAL_GPIO_Init+0x2ac>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d04c      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dc4:	4a92      	ldr	r2, [pc, #584]	; (8002010 <HAL_GPIO_Init+0x2ac>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d863      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dca:	4a92      	ldr	r2, [pc, #584]	; (8002014 <HAL_GPIO_Init+0x2b0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d046      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dd0:	4a90      	ldr	r2, [pc, #576]	; (8002014 <HAL_GPIO_Init+0x2b0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d85d      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d82a      	bhi.n	8001e30 <HAL_GPIO_Init+0xcc>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d859      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <HAL_GPIO_Init+0x80>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e5f 	.word	0x08001e5f
 8001de8:	08001e39 	.word	0x08001e39
 8001dec:	08001e4b 	.word	0x08001e4b
 8001df0:	08001e8d 	.word	0x08001e8d
 8001df4:	08001e93 	.word	0x08001e93
 8001df8:	08001e93 	.word	0x08001e93
 8001dfc:	08001e93 	.word	0x08001e93
 8001e00:	08001e93 	.word	0x08001e93
 8001e04:	08001e93 	.word	0x08001e93
 8001e08:	08001e93 	.word	0x08001e93
 8001e0c:	08001e93 	.word	0x08001e93
 8001e10:	08001e93 	.word	0x08001e93
 8001e14:	08001e93 	.word	0x08001e93
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e93 	.word	0x08001e93
 8001e20:	08001e93 	.word	0x08001e93
 8001e24:	08001e93 	.word	0x08001e93
 8001e28:	08001e41 	.word	0x08001e41
 8001e2c:	08001e55 	.word	0x08001e55
 8001e30:	4a79      	ldr	r2, [pc, #484]	; (8002018 <HAL_GPIO_Init+0x2b4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e36:	e02c      	b.n	8001e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	623b      	str	r3, [r7, #32]
          break;
 8001e3e:	e029      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	3304      	adds	r3, #4
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e024      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	3308      	adds	r3, #8
 8001e50:	623b      	str	r3, [r7, #32]
          break;
 8001e52:	e01f      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e01a      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e66:	2304      	movs	r3, #4
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e013      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e74:	2308      	movs	r3, #8
 8001e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	611a      	str	r2, [r3, #16]
          break;
 8001e7e:	e009      	b.n	8001e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e80:	2308      	movs	r3, #8
 8001e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	615a      	str	r2, [r3, #20]
          break;
 8001e8a:	e003      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          break;
 8001e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2bff      	cmp	r3, #255	; 0xff
 8001e98:	d801      	bhi.n	8001e9e <HAL_GPIO_Init+0x13a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_Init+0x13e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2bff      	cmp	r3, #255	; 0xff
 8001ea8:	d802      	bhi.n	8001eb0 <HAL_GPIO_Init+0x14c>
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_Init+0x152>
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	3b08      	subs	r3, #8
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	210f      	movs	r1, #15
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	6a39      	ldr	r1, [r7, #32]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80b1 	beq.w	8002046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <HAL_GPIO_Init+0x2b8>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	; (800201c <HAL_GPIO_Init+0x2b8>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	; (800201c <HAL_GPIO_Init+0x2b8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001efc:	4a48      	ldr	r2, [pc, #288]	; (8002020 <HAL_GPIO_Init+0x2bc>)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a40      	ldr	r2, [pc, #256]	; (8002024 <HAL_GPIO_Init+0x2c0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <HAL_GPIO_Init+0x1ec>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <HAL_GPIO_Init+0x2c4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00d      	beq.n	8001f4c <HAL_GPIO_Init+0x1e8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3e      	ldr	r2, [pc, #248]	; (800202c <HAL_GPIO_Init+0x2c8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d007      	beq.n	8001f48 <HAL_GPIO_Init+0x1e4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3d      	ldr	r2, [pc, #244]	; (8002030 <HAL_GPIO_Init+0x2cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_GPIO_Init+0x1e0>
 8001f40:	2303      	movs	r3, #3
 8001f42:	e006      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f44:	2304      	movs	r3, #4
 8001f46:	e004      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f50:	2300      	movs	r3, #0
 8001f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f62:	492f      	ldr	r1, [pc, #188]	; (8002020 <HAL_GPIO_Init+0x2bc>)
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	492c      	ldr	r1, [pc, #176]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4928      	ldr	r1, [pc, #160]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4922      	ldr	r1, [pc, #136]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	491e      	ldr	r1, [pc, #120]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4918      	ldr	r1, [pc, #96]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4914      	ldr	r1, [pc, #80]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d021      	beq.n	8002038 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
 8002000:	e021      	b.n	8002046 <HAL_GPIO_Init+0x2e2>
 8002002:	bf00      	nop
 8002004:	10320000 	.word	0x10320000
 8002008:	10310000 	.word	0x10310000
 800200c:	10220000 	.word	0x10220000
 8002010:	10210000 	.word	0x10210000
 8002014:	10120000 	.word	0x10120000
 8002018:	10110000 	.word	0x10110000
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000
 8002024:	40010800 	.word	0x40010800
 8002028:	40010c00 	.word	0x40010c00
 800202c:	40011000 	.word	0x40011000
 8002030:	40011400 	.word	0x40011400
 8002034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_GPIO_Init+0x304>)
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	43db      	mvns	r3, r3
 8002040:	4909      	ldr	r1, [pc, #36]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002042:	4013      	ands	r3, r2
 8002044:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f ae8e 	bne.w	8001d78 <HAL_GPIO_Init+0x14>
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	; 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002088:	e003      	b.n	8002092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	041a      	lsls	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	611a      	str	r2, [r3, #16]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	b08b      	sub	sp, #44	; 0x2c
 80020a0:	af06      	add	r7, sp, #24
 80020a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0fd      	b.n	80022aa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f007 f942 	bl	800934c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 ff6b 	bl	8004fb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	687e      	ldr	r6, [r7, #4]
 80020e2:	466d      	mov	r5, sp
 80020e4:	f106 0410 	add.w	r4, r6, #16
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	602b      	str	r3, [r5, #0]
 80020f0:	1d33      	adds	r3, r6, #4
 80020f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	f002 ff35 	bl	8004f64 <USB_CoreInit>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0ce      	b.n	80022aa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f002 ff66 	bl	8004fe4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e04c      	b.n	80021b8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3301      	adds	r3, #1
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	b298      	uxth	r0, r3
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	3336      	adds	r3, #54	; 0x36
 800215c:	4602      	mov	r2, r0
 800215e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	3303      	adds	r3, #3
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	3338      	adds	r3, #56	; 0x38
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	333c      	adds	r3, #60	; 0x3c
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	3340      	adds	r3, #64	; 0x40
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	3301      	adds	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d3ad      	bcc.n	800211e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e044      	b.n	8002252 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	440b      	add	r3, r1
 8002202:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	3301      	adds	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d3b5      	bcc.n	80021c8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	687e      	ldr	r6, [r7, #4]
 8002264:	466d      	mov	r5, sp
 8002266:	f106 0410 	add.w	r4, r6, #16
 800226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	602b      	str	r3, [r5, #0]
 8002272:	1d33      	adds	r3, r6, #4
 8002274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002276:	6838      	ldr	r0, [r7, #0]
 8002278:	f002 fec0 	bl	8004ffc <USB_DevInit>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2202      	movs	r2, #2
 8002286:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e00d      	b.n	80022aa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f005 fb72 	bl	800798c <USB_DevDisconnect>

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_PCD_Start+0x16>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e016      	b.n	80022f6 <HAL_PCD_Start+0x44>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 fe55 	bl	8004f84 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80022da:	2101      	movs	r1, #1
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f007 fa8c 	bl	80097fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f005 fb46 	bl	8007978 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b088      	sub	sp, #32
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f005 fb48 	bl	80079a0 <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800231a:	d102      	bne.n	8002322 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fb48 	bl	80029b2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f005 fb3a 	bl	80079a0 <USB_ReadInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d112      	bne.n	800235e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002340:	b29a      	uxth	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234a:	b292      	uxth	r2, r2
 800234c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f007 f876 	bl	8009442 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002356:	2100      	movs	r1, #0
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f923 	bl	80025a4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f005 fb1c 	bl	80079a0 <USB_ReadInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002372:	d10b      	bne.n	800238c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002386:	b292      	uxth	r2, r2
 8002388:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f005 fb05 	bl	80079a0 <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a0:	d10b      	bne.n	80023ba <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023b4:	b292      	uxth	r2, r2
 80023b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f005 faee 	bl	80079a0 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ce:	d126      	bne.n	800241e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023d8:	b29a      	uxth	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0204 	bic.w	r2, r2, #4
 80023e2:	b292      	uxth	r2, r2
 80023e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0208 	bic.w	r2, r2, #8
 80023fa:	b292      	uxth	r2, r2
 80023fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f007 f857 	bl	80094b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800240e:	b29a      	uxth	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002418:	b292      	uxth	r2, r2
 800241a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f005 fabc 	bl	80079a0 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002432:	f040 8082 	bne.w	800253a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002436:	2300      	movs	r3, #0
 8002438:	77fb      	strb	r3, [r7, #31]
 800243a:	e010      	b.n	800245e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	7ffb      	ldrb	r3, [r7, #31]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	441a      	add	r2, r3
 8002448:	7ffb      	ldrb	r3, [r7, #31]
 800244a:	8812      	ldrh	r2, [r2, #0]
 800244c:	b292      	uxth	r2, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	3320      	adds	r3, #32
 8002452:	443b      	add	r3, r7
 8002454:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002458:	7ffb      	ldrb	r3, [r7, #31]
 800245a:	3301      	adds	r3, #1
 800245c:	77fb      	strb	r3, [r7, #31]
 800245e:	7ffb      	ldrb	r3, [r7, #31]
 8002460:	2b07      	cmp	r3, #7
 8002462:	d9eb      	bls.n	800243c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	b292      	uxth	r2, r2
 8002478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	b292      	uxth	r2, r2
 8002490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002494:	bf00      	nop
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f6      	beq.n	8002496 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ba:	b292      	uxth	r2, r2
 80024bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	77fb      	strb	r3, [r7, #31]
 80024c4:	e00f      	b.n	80024e6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80024c6:	7ffb      	ldrb	r3, [r7, #31]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	4611      	mov	r1, r2
 80024ce:	7ffa      	ldrb	r2, [r7, #31]
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	440a      	add	r2, r1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	3320      	adds	r3, #32
 80024d8:	443b      	add	r3, r7
 80024da:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80024de:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80024e0:	7ffb      	ldrb	r3, [r7, #31]
 80024e2:	3301      	adds	r3, #1
 80024e4:	77fb      	strb	r3, [r7, #31]
 80024e6:	7ffb      	ldrb	r3, [r7, #31]
 80024e8:	2b07      	cmp	r3, #7
 80024ea:	d9ec      	bls.n	80024c6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0208 	orr.w	r2, r2, #8
 80024fe:	b292      	uxth	r2, r2
 8002500:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800250c:	b29a      	uxth	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002516:	b292      	uxth	r2, r2
 8002518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002524:	b29a      	uxth	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0204 	orr.w	r2, r2, #4
 800252e:	b292      	uxth	r2, r2
 8002530:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f006 ffa3 	bl	8009480 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f005 fa2e 	bl	80079a0 <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254e:	d10e      	bne.n	800256e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002558:	b29a      	uxth	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002562:	b292      	uxth	r2, r2
 8002564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f006 ff5c 	bl	8009426 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f005 fa14 	bl	80079a0 <USB_ReadInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002582:	d10b      	bne.n	800259c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002596:	b292      	uxth	r2, r2
 8002598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800259c:	bf00      	nop
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_PCD_SetAddress+0x1a>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e013      	b.n	80025e6 <HAL_PCD_SetAddress+0x42>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f005 f9bb 	bl	8007952 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	4608      	mov	r0, r1
 80025f8:	4611      	mov	r1, r2
 80025fa:	461a      	mov	r2, r3
 80025fc:	4603      	mov	r3, r0
 80025fe:	70fb      	strb	r3, [r7, #3]
 8002600:	460b      	mov	r3, r1
 8002602:	803b      	strh	r3, [r7, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800260c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002610:	2b00      	cmp	r3, #0
 8002612:	da0e      	bge.n	8002632 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	705a      	strb	r2, [r3, #1]
 8002630:	e00e      	b.n	8002650 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	f003 0207 	and.w	r2, r3, #7
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	b2da      	uxtb	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800265c:	883a      	ldrh	r2, [r7, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	78ba      	ldrb	r2, [r7, #2]
 8002666:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	785b      	ldrb	r3, [r3, #1]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800267a:	78bb      	ldrb	r3, [r7, #2]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d102      	bne.n	8002686 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_PCD_EP_Open+0xa6>
 8002690:	2302      	movs	r3, #2
 8002692:	e00e      	b.n	80026b2 <HAL_PCD_EP_Open+0xc4>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68f9      	ldr	r1, [r7, #12]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 fcca 	bl	800503c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80026b0:	7afb      	ldrb	r3, [r7, #11]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da0e      	bge.n	80026ec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	705a      	strb	r2, [r3, #1]
 80026ea:	e00e      	b.n	800270a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	f003 0207 	and.w	r2, r3, #7
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_PCD_EP_Close+0x6a>
 8002720:	2302      	movs	r3, #2
 8002722:	e00e      	b.n	8002742 <HAL_PCD_EP_Close+0x88>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68f9      	ldr	r1, [r7, #12]
 8002732:	4618      	mov	r0, r3
 8002734:	f002 ffec 	bl	8005710 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	460b      	mov	r3, r1
 8002758:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	f003 0207 	and.w	r2, r3, #7
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2200      	movs	r2, #0
 8002782:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2200      	movs	r2, #0
 8002788:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	b2da      	uxtb	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6979      	ldr	r1, [r7, #20]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 f99e 	bl	8005ae8 <USB_EPStartXfer>
 80027ac:	e005      	b.n	80027ba <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6979      	ldr	r1, [r7, #20]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 f997 	bl	8005ae8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	460b      	mov	r3, r1
 80027d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d4:	7afb      	ldrb	r3, [r7, #11]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2201      	movs	r2, #1
 800280e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002810:	7afb      	ldrb	r3, [r7, #11]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	b2da      	uxtb	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800281c:	7afb      	ldrb	r3, [r7, #11]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6979      	ldr	r1, [r7, #20]
 800282c:	4618      	mov	r0, r3
 800282e:	f003 f95b 	bl	8005ae8 <USB_EPStartXfer>
 8002832:	e005      	b.n	8002840 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6979      	ldr	r1, [r7, #20]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 f954 	bl	8005ae8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	f003 0207 	and.w	r2, r3, #7
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d901      	bls.n	8002868 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e04c      	b.n	8002902 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	da0e      	bge.n	800288e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	705a      	strb	r2, [r3, #1]
 800288c:	e00c      	b.n	80028a8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_PCD_EP_SetStall+0x7e>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e01c      	b.n	8002902 <HAL_PCD_EP_SetStall+0xb8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 ff3e 	bl	8007758 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d108      	bne.n	80028f8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f005 f863 	bl	80079be <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 020f 	and.w	r2, r3, #15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d901      	bls.n	8002928 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e040      	b.n	80029aa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800292c:	2b00      	cmp	r3, #0
 800292e:	da0e      	bge.n	800294e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	705a      	strb	r2, [r3, #1]
 800294c:	e00e      	b.n	800296c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 0207 	and.w	r2, r3, #7
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_EP_ClrStall+0x82>
 8002988:	2302      	movs	r3, #2
 800298a:	e00e      	b.n	80029aa <HAL_PCD_EP_ClrStall+0xa0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	4618      	mov	r0, r3
 800299c:	f004 ff2c 	bl	80077f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08e      	sub	sp, #56	; 0x38
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029ba:	e2ec      	b.n	8002f96 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029c4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80029c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80029d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 8161 	bne.w	8002c9e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d152      	bne.n	8002a8c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	81fb      	strh	r3, [r7, #14]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	89fb      	ldrh	r3, [r7, #14]
 80029fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3328      	adds	r3, #40	; 0x28
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	3302      	adds	r3, #2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	441a      	add	r2, r3
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f006 fcd0 	bl	80093f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 829b 	beq.w	8002f96 <PCD_EP_ISR_Handler+0x5e4>
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 8296 	bne.w	8002f96 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a8a:	e284      	b.n	8002f96 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d034      	beq.n	8002b10 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3306      	adds	r3, #6
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f004 ffba 	bl	8007a5e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002af6:	4013      	ands	r3, r2
 8002af8:	823b      	strh	r3, [r7, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	8a3a      	ldrh	r2, [r7, #16]
 8002b00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b04:	b292      	uxth	r2, r2
 8002b06:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f006 fc45 	bl	8009398 <HAL_PCD_SetupStageCallback>
 8002b0e:	e242      	b.n	8002f96 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b10:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f280 823e 	bge.w	8002f96 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b26:	4013      	ands	r3, r2
 8002b28:	83bb      	strh	r3, [r7, #28]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	8bba      	ldrh	r2, [r7, #28]
 8002b30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b34:	b292      	uxth	r2, r2
 8002b36:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3306      	adds	r3, #6
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d019      	beq.n	8002ba0 <PCD_EP_ISR_Handler+0x1ee>
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	6959      	ldr	r1, [r3, #20]
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	f004 ff6a 	bl	8007a5e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	441a      	add	r2, r3
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b98:	2100      	movs	r1, #0
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f006 fc0e 	bl	80093bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 81f2 	bne.w	8002f96 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d112      	bne.n	8002c00 <PCD_EP_ISR_Handler+0x24e>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	801a      	strh	r2, [r3, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	801a      	strh	r2, [r3, #0]
 8002bfe:	e02f      	b.n	8002c60 <PCD_EP_ISR_Handler+0x2ae>
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b3e      	cmp	r3, #62	; 0x3e
 8002c06:	d813      	bhi.n	8002c30 <PCD_EP_ISR_Handler+0x27e>
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <PCD_EP_ISR_Handler+0x270>
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	3301      	adds	r3, #1
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	029b      	lsls	r3, r3, #10
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	801a      	strh	r2, [r3, #0]
 8002c2e:	e017      	b.n	8002c60 <PCD_EP_ISR_Handler+0x2ae>
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <PCD_EP_ISR_Handler+0x298>
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	3b01      	subs	r3, #1
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	029b      	lsls	r3, r3, #10
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c70:	827b      	strh	r3, [r7, #18]
 8002c72:	8a7b      	ldrh	r3, [r7, #18]
 8002c74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c78:	827b      	strh	r3, [r7, #18]
 8002c7a:	8a7b      	ldrh	r3, [r7, #18]
 8002c7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c80:	827b      	strh	r3, [r7, #18]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	8a7b      	ldrh	r3, [r7, #18]
 8002c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	8013      	strh	r3, [r2, #0]
 8002c9c:	e17b      	b.n	8002f96 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cb0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f280 80ea 	bge.w	8002e8e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	853b      	strh	r3, [r7, #40]	; 0x28
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ce4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ce8:	b292      	uxth	r2, r2
 8002cea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	7b1b      	ldrb	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d122      	bne.n	8002d50 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3306      	adds	r3, #6
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d32:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002d34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8087 	beq.w	8002e4a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	6959      	ldr	r1, [r3, #20]
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	88da      	ldrh	r2, [r3, #6]
 8002d48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d4a:	f004 fe88 	bl	8007a5e <USB_ReadPMA>
 8002d4e:	e07c      	b.n	8002e4a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	78db      	ldrb	r3, [r3, #3]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d108      	bne.n	8002d6a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f927 	bl	8002fb2 <HAL_PCD_EP_DB_Receive>
 8002d64:	4603      	mov	r3, r0
 8002d66:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002d68:	e06f      	b.n	8002e4a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d84:	847b      	strh	r3, [r7, #34]	; 0x22
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	441a      	add	r2, r3
 8002d94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d021      	beq.n	8002e08 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3302      	adds	r3, #2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002dee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d02a      	beq.n	8002e4a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	6959      	ldr	r1, [r3, #20]
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	891a      	ldrh	r2, [r3, #8]
 8002e00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e02:	f004 fe2c 	bl	8007a5e <USB_ReadPMA>
 8002e06:	e020      	b.n	8002e4a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3306      	adds	r3, #6
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e30:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002e32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	6959      	ldr	r1, [r3, #20]
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	895a      	ldrh	r2, [r3, #10]
 8002e44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e46:	f004 fe0a 	bl	8007a5e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e50:	441a      	add	r2, r3
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e5c:	441a      	add	r2, r3
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <PCD_EP_ISR_Handler+0x4c2>
 8002e6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d206      	bcs.n	8002e82 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f006 fa9e 	bl	80093bc <HAL_PCD_DataOutStageCallback>
 8002e80:	e005      	b.n	8002e8e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 fe2d 	bl	8005ae8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d07e      	beq.n	8002f96 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	843b      	strh	r3, [r7, #32]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	8c3b      	ldrh	r3, [r7, #32]
 8002ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	78db      	ldrb	r3, [r3, #3]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d00c      	beq.n	8002f06 <PCD_EP_ISR_Handler+0x554>
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	78db      	ldrb	r3, [r3, #3]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d146      	bne.n	8002f8a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002efc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d141      	bne.n	8002f8a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	8bfb      	ldrh	r3, [r7, #30]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d906      	bls.n	8002f48 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	8bfb      	ldrh	r3, [r7, #30]
 8002f40:	1ad2      	subs	r2, r2, r3
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	619a      	str	r2, [r3, #24]
 8002f46:	e002      	b.n	8002f4e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f006 fa48 	bl	80093f2 <HAL_PCD_DataInStageCallback>
 8002f62:	e018      	b.n	8002f96 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	8bfb      	ldrh	r3, [r7, #30]
 8002f6a:	441a      	add	r2, r3
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	8bfb      	ldrh	r3, [r7, #30]
 8002f76:	441a      	add	r2, r3
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fdb0 	bl	8005ae8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002f88:	e005      	b.n	8002f96 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002f8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f91b 	bl	80031cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f6ff ad0a 	blt.w	80029bc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3738      	adds	r7, #56	; 0x38
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b088      	sub	sp, #32
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d07e      	beq.n	80030c8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3302      	adds	r3, #2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	699a      	ldr	r2, [r3, #24]
 8002ff8:	8b7b      	ldrh	r3, [r7, #26]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d306      	bcc.n	800300c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	8b7b      	ldrh	r3, [r7, #26]
 8003004:	1ad2      	subs	r2, r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	619a      	str	r2, [r3, #24]
 800300a:	e002      	b.n	8003012 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d123      	bne.n	8003062 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003034:	833b      	strh	r3, [r7, #24]
 8003036:	8b3b      	ldrh	r3, [r7, #24]
 8003038:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800303c:	833b      	strh	r3, [r7, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	441a      	add	r2, r3
 800304c:	8b3b      	ldrh	r3, [r7, #24]
 800304e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01f      	beq.n	80030ac <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	82fb      	strh	r3, [r7, #22]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	8afb      	ldrh	r3, [r7, #22]
 8003098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800309c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030ac:	8b7b      	ldrh	r3, [r7, #26]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8087 	beq.w	80031c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6959      	ldr	r1, [r3, #20]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	891a      	ldrh	r2, [r3, #8]
 80030c0:	8b7b      	ldrh	r3, [r7, #26]
 80030c2:	f004 fccc 	bl	8007a5e <USB_ReadPMA>
 80030c6:	e07c      	b.n	80031c2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	3306      	adds	r3, #6
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	8b7b      	ldrh	r3, [r7, #26]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d306      	bcc.n	800310a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	8b7b      	ldrh	r3, [r7, #26]
 8003102:	1ad2      	subs	r2, r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	619a      	str	r2, [r3, #24]
 8003108:	e002      	b.n	8003110 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d123      	bne.n	8003160 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800312e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003132:	83fb      	strh	r3, [r7, #30]
 8003134:	8bfb      	ldrh	r3, [r7, #30]
 8003136:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800313a:	83fb      	strh	r3, [r7, #30]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	8bfb      	ldrh	r3, [r7, #30]
 800314c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	b29b      	uxth	r3, r3
 800315e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d11f      	bne.n	80031aa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003184:	83bb      	strh	r3, [r7, #28]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	441a      	add	r2, r3
 8003194:	8bbb      	ldrh	r3, [r7, #28]
 8003196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800319a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031aa:	8b7b      	ldrh	r3, [r7, #26]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	6959      	ldr	r1, [r3, #20]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	895a      	ldrh	r2, [r3, #10]
 80031bc:	8b7b      	ldrh	r3, [r7, #26]
 80031be:	f004 fc4e 	bl	8007a5e <USB_ReadPMA>
    }
  }

  return count;
 80031c2:	8b7b      	ldrh	r3, [r7, #26]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b0a2      	sub	sp, #136	; 0x88
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 81c7 	beq.w	8003574 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	3302      	adds	r3, #2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800320e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800321a:	429a      	cmp	r2, r3
 800321c:	d907      	bls.n	800322e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003226:	1ad2      	subs	r2, r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	619a      	str	r2, [r3, #24]
 800322c:	e002      	b.n	8003234 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f040 80b9 	bne.w	80033b0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d126      	bne.n	8003294 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003254:	b29b      	uxth	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	4413      	add	r3, r2
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	011a      	lsls	r2, r3, #4
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	4413      	add	r3, r2
 8003268:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003278:	b29a      	uxth	r2, r3
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	801a      	strh	r2, [r3, #0]
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800328c:	b29a      	uxth	r2, r3
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	801a      	strh	r2, [r3, #0]
 8003292:	e01a      	b.n	80032ca <HAL_PCD_EP_DB_Transmit+0xfe>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	785b      	ldrb	r3, [r3, #1]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d116      	bne.n	80032ca <HAL_PCD_EP_DB_Transmit+0xfe>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	4413      	add	r3, r2
 80032b2:	633b      	str	r3, [r7, #48]	; 0x30
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	011a      	lsls	r2, r3, #4
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	4413      	add	r3, r2
 80032be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c6:	2200      	movs	r2, #0
 80032c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	623b      	str	r3, [r7, #32]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d126      	bne.n	8003326 <HAL_PCD_EP_DB_Transmit+0x15a>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4413      	add	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	011a      	lsls	r2, r3, #4
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b29b      	uxth	r3, r3
 8003306:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800330a:	b29a      	uxth	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800331a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800331e:	b29a      	uxth	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	e017      	b.n	8003356 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	785b      	ldrb	r3, [r3, #1]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d113      	bne.n	8003356 <HAL_PCD_EP_DB_Transmit+0x18a>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003336:	b29b      	uxth	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	4413      	add	r3, r2
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	011a      	lsls	r2, r3, #4
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	4413      	add	r3, r2
 800334a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2200      	movs	r2, #0
 8003354:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	4619      	mov	r1, r3
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f006 f848 	bl	80093f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 82d4 	beq.w	8003916 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003388:	827b      	strh	r3, [r7, #18]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	8a7b      	ldrh	r3, [r7, #18]
 800339a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800339e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	8013      	strh	r3, [r2, #0]
 80033ae:	e2b2      	b.n	8003916 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d021      	beq.n	80033fe <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80033ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003404:	2b01      	cmp	r3, #1
 8003406:	f040 8286 	bne.w	8003916 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003412:	441a      	add	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003420:	441a      	add	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	6a1a      	ldr	r2, [r3, #32]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	429a      	cmp	r2, r3
 8003430:	d309      	bcc.n	8003446 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343e:	1ad2      	subs	r2, r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	621a      	str	r2, [r3, #32]
 8003444:	e015      	b.n	8003472 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d107      	bne.n	800345e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800344e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003452:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800345c:	e009      	b.n	8003472 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2200      	movs	r2, #0
 8003470:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d155      	bne.n	8003526 <HAL_PCD_EP_DB_Transmit+0x35a>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003488:	b29b      	uxth	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	4413      	add	r3, r2
 8003490:	63bb      	str	r3, [r7, #56]	; 0x38
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	011a      	lsls	r2, r3, #4
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	4413      	add	r3, r2
 800349c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
 80034a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d112      	bne.n	80034ce <HAL_PCD_EP_DB_Transmit+0x302>
 80034a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	801a      	strh	r2, [r3, #0]
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ca:	801a      	strh	r2, [r3, #0]
 80034cc:	e047      	b.n	800355e <HAL_PCD_EP_DB_Transmit+0x392>
 80034ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d0:	2b3e      	cmp	r3, #62	; 0x3e
 80034d2:	d811      	bhi.n	80034f8 <HAL_PCD_EP_DB_Transmit+0x32c>
 80034d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80034da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_PCD_EP_DB_Transmit+0x31e>
 80034e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e6:	3301      	adds	r3, #1
 80034e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	029b      	lsls	r3, r3, #10
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f4:	801a      	strh	r2, [r3, #0]
 80034f6:	e032      	b.n	800355e <HAL_PCD_EP_DB_Transmit+0x392>
 80034f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80034fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <HAL_PCD_EP_DB_Transmit+0x342>
 8003508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350a:	3b01      	subs	r3, #1
 800350c:	64bb      	str	r3, [r7, #72]	; 0x48
 800350e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003510:	b29b      	uxth	r3, r3
 8003512:	029b      	lsls	r3, r3, #10
 8003514:	b29b      	uxth	r3, r3
 8003516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800351e:	b29a      	uxth	r2, r3
 8003520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003522:	801a      	strh	r2, [r3, #0]
 8003524:	e01b      	b.n	800355e <HAL_PCD_EP_DB_Transmit+0x392>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	785b      	ldrb	r3, [r3, #1]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d117      	bne.n	800355e <HAL_PCD_EP_DB_Transmit+0x392>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	643b      	str	r3, [r7, #64]	; 0x40
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800353c:	b29b      	uxth	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003542:	4413      	add	r3, r2
 8003544:	643b      	str	r3, [r7, #64]	; 0x40
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	011a      	lsls	r2, r3, #4
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	4413      	add	r3, r2
 8003550:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003558:	b29a      	uxth	r2, r3
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6959      	ldr	r1, [r3, #20]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	891a      	ldrh	r2, [r3, #8]
 800356a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356c:	b29b      	uxth	r3, r3
 800356e:	f004 fa31 	bl	80079d4 <USB_WritePMA>
 8003572:	e1d0      	b.n	8003916 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800357c:	b29b      	uxth	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	3306      	adds	r3, #6
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800359c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d307      	bcc.n	80035bc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035b4:	1ad2      	subs	r2, r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	619a      	str	r2, [r3, #24]
 80035ba:	e002      	b.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2200      	movs	r2, #0
 80035c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 80c4 	bne.w	8003754 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	785b      	ldrb	r3, [r3, #1]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d126      	bne.n	8003622 <HAL_PCD_EP_DB_Transmit+0x456>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e8:	4413      	add	r3, r2
 80035ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	011a      	lsls	r2, r3, #4
 80035f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f4:	4413      	add	r3, r2
 80035f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80035fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003606:	b29a      	uxth	r2, r3
 8003608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800361a:	b29a      	uxth	r2, r3
 800361c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800361e:	801a      	strh	r2, [r3, #0]
 8003620:	e01a      	b.n	8003658 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	785b      	ldrb	r3, [r3, #1]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d116      	bne.n	8003658 <HAL_PCD_EP_DB_Transmit+0x48c>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	677b      	str	r3, [r7, #116]	; 0x74
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003638:	b29b      	uxth	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800363e:	4413      	add	r3, r2
 8003640:	677b      	str	r3, [r7, #116]	; 0x74
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	011a      	lsls	r2, r3, #4
 8003648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364a:	4413      	add	r3, r2
 800364c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003650:	673b      	str	r3, [r7, #112]	; 0x70
 8003652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003654:	2200      	movs	r2, #0
 8003656:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	67bb      	str	r3, [r7, #120]	; 0x78
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d12f      	bne.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003676:	b29b      	uxth	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800367e:	4413      	add	r3, r2
 8003680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	011a      	lsls	r2, r3, #4
 800368a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800368e:	4413      	add	r3, r2
 8003690:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036aa:	801a      	strh	r2, [r3, #0]
 80036ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036bc:	b29a      	uxth	r2, r3
 80036be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	e017      	b.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d113      	bne.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036dc:	4413      	add	r3, r2
 80036de:	67bb      	str	r3, [r7, #120]	; 0x78
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	011a      	lsls	r2, r3, #4
 80036e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e8:	4413      	add	r3, r2
 80036ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036f2:	2200      	movs	r2, #0
 80036f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	4619      	mov	r1, r3
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f005 fe78 	bl	80093f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 8104 	bne.w	8003916 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003728:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800373e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374e:	b29b      	uxth	r3, r3
 8003750:	8013      	strh	r3, [r2, #0]
 8003752:	e0e0      	b.n	8003916 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d121      	bne.n	80037a2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003778:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	441a      	add	r2, r3
 800378a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800378e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800379a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 80b4 	bne.w	8003916 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037b6:	441a      	add	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037c4:	441a      	add	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d309      	bcc.n	80037ea <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e2:	1ad2      	subs	r2, r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	621a      	str	r2, [r3, #32]
 80037e8:	e015      	b.n	8003816 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d107      	bne.n	8003802 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80037f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003800:	e009      	b.n	8003816 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2200      	movs	r2, #0
 800380c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	667b      	str	r3, [r7, #100]	; 0x64
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	785b      	ldrb	r3, [r3, #1]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d155      	bne.n	80038d0 <HAL_PCD_EP_DB_Transmit+0x704>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003838:	4413      	add	r3, r2
 800383a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	011a      	lsls	r2, r3, #4
 8003842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003844:	4413      	add	r3, r2
 8003846:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800384a:	65bb      	str	r3, [r7, #88]	; 0x58
 800384c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384e:	2b00      	cmp	r3, #0
 8003850:	d112      	bne.n	8003878 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800385c:	b29a      	uxth	r2, r3
 800385e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800386c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003870:	b29a      	uxth	r2, r3
 8003872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	e044      	b.n	8003902 <HAL_PCD_EP_DB_Transmit+0x736>
 8003878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387a:	2b3e      	cmp	r3, #62	; 0x3e
 800387c:	d811      	bhi.n	80038a2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800387e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	657b      	str	r3, [r7, #84]	; 0x54
 8003884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800388e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003890:	3301      	adds	r3, #1
 8003892:	657b      	str	r3, [r7, #84]	; 0x54
 8003894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003896:	b29b      	uxth	r3, r3
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	b29a      	uxth	r2, r3
 800389c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	e02f      	b.n	8003902 <HAL_PCD_EP_DB_Transmit+0x736>
 80038a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	657b      	str	r3, [r7, #84]	; 0x54
 80038a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80038b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b4:	3b01      	subs	r3, #1
 80038b6:	657b      	str	r3, [r7, #84]	; 0x54
 80038b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	029b      	lsls	r3, r3, #10
 80038be:	b29b      	uxth	r3, r3
 80038c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	e018      	b.n	8003902 <HAL_PCD_EP_DB_Transmit+0x736>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d114      	bne.n	8003902 <HAL_PCD_EP_DB_Transmit+0x736>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038e6:	4413      	add	r3, r2
 80038e8:	667b      	str	r3, [r7, #100]	; 0x64
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	011a      	lsls	r2, r3, #4
 80038f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f2:	4413      	add	r3, r2
 80038f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038f8:	663b      	str	r3, [r7, #96]	; 0x60
 80038fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003900:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	6959      	ldr	r1, [r3, #20]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	895a      	ldrh	r2, [r3, #10]
 800390e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003910:	b29b      	uxth	r3, r3
 8003912:	f004 f85f 	bl	80079d4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003930:	823b      	strh	r3, [r7, #16]
 8003932:	8a3b      	ldrh	r3, [r7, #16]
 8003934:	f083 0310 	eor.w	r3, r3, #16
 8003938:	823b      	strh	r3, [r7, #16]
 800393a:	8a3b      	ldrh	r3, [r7, #16]
 800393c:	f083 0320 	eor.w	r3, r3, #32
 8003940:	823b      	strh	r3, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	8a3b      	ldrh	r3, [r7, #16]
 8003952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3788      	adds	r7, #136	; 0x88
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	460b      	mov	r3, r1
 800397c:	817b      	strh	r3, [r7, #10]
 800397e:	4613      	mov	r3, r2
 8003980:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e009      	b.n	80039ba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039a6:	897a      	ldrh	r2, [r7, #10]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80039ba:	893b      	ldrh	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d107      	bne.n	80039d0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2200      	movs	r2, #0
 80039c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	80da      	strh	r2, [r3, #6]
 80039ce:	e00b      	b.n	80039e8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2201      	movs	r2, #1
 80039d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	b29a      	uxth	r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e272      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8087 	beq.w	8003b22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a14:	4b92      	ldr	r3, [pc, #584]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d00c      	beq.n	8003a3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a20:	4b8f      	ldr	r3, [pc, #572]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d112      	bne.n	8003a52 <HAL_RCC_OscConfig+0x5e>
 8003a2c:	4b8c      	ldr	r3, [pc, #560]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a38:	d10b      	bne.n	8003a52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3a:	4b89      	ldr	r3, [pc, #548]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d06c      	beq.n	8003b20 <HAL_RCC_OscConfig+0x12c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d168      	bne.n	8003b20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e24c      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x76>
 8003a5c:	4b80      	ldr	r3, [pc, #512]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7f      	ldr	r2, [pc, #508]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e02e      	b.n	8003ac8 <HAL_RCC_OscConfig+0xd4>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x98>
 8003a72:	4b7b      	ldr	r3, [pc, #492]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7a      	ldr	r2, [pc, #488]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b78      	ldr	r3, [pc, #480]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a77      	ldr	r2, [pc, #476]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e01d      	b.n	8003ac8 <HAL_RCC_OscConfig+0xd4>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0xbc>
 8003a96:	4b72      	ldr	r3, [pc, #456]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a71      	ldr	r2, [pc, #452]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b6f      	ldr	r3, [pc, #444]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6e      	ldr	r2, [pc, #440]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xd4>
 8003ab0:	4b6b      	ldr	r3, [pc, #428]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6a      	ldr	r2, [pc, #424]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b68      	ldr	r3, [pc, #416]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a67      	ldr	r2, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fa46 	bl	8000f60 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fd fa42 	bl	8000f60 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e200      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b5d      	ldr	r3, [pc, #372]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xe4>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fd fa32 	bl	8000f60 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fd fa2e 	bl	8000f60 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e1ec      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	4b53      	ldr	r3, [pc, #332]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x10c>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d063      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b2e:	4b4c      	ldr	r3, [pc, #304]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b3a:	4b49      	ldr	r3, [pc, #292]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d11c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x18c>
 8003b46:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d116      	bne.n	8003b80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_RCC_OscConfig+0x176>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d001      	beq.n	8003b6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e1c0      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	4b3d      	ldr	r3, [pc, #244]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4939      	ldr	r1, [pc, #228]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	e03a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d020      	beq.n	8003bca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b88:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fd f9e7 	bl	8000f60 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b96:	f7fd f9e3 	bl	8000f60 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e1a1      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4927      	ldr	r1, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
 8003bc8:	e015      	b.n	8003bf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <HAL_RCC_OscConfig+0x270>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fd f9c6 	bl	8000f60 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fd f9c2 	bl	8000f60 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e180      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d03a      	beq.n	8003c78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d019      	beq.n	8003c3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c10:	f7fd f9a6 	bl	8000f60 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fd f9a2 	bl	8000f60 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e160      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c36:	2001      	movs	r0, #1
 8003c38:	f000 fad8 	bl	80041ec <RCC_Delay>
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c44:	f7fd f98c 	bl	8000f60 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4a:	e00f      	b.n	8003c6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4c:	f7fd f988 	bl	8000f60 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d908      	bls.n	8003c6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e146      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	42420000 	.word	0x42420000
 8003c68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6c:	4b92      	ldr	r3, [pc, #584]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e9      	bne.n	8003c4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a6 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8a:	4b8b      	ldr	r3, [pc, #556]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c96:	4b88      	ldr	r3, [pc, #544]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	4a87      	ldr	r2, [pc, #540]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	61d3      	str	r3, [r2, #28]
 8003ca2:	4b85      	ldr	r3, [pc, #532]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb2:	4b82      	ldr	r3, [pc, #520]	; (8003ebc <HAL_RCC_OscConfig+0x4c8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d118      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cbe:	4b7f      	ldr	r3, [pc, #508]	; (8003ebc <HAL_RCC_OscConfig+0x4c8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7e      	ldr	r2, [pc, #504]	; (8003ebc <HAL_RCC_OscConfig+0x4c8>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cca:	f7fd f949 	bl	8000f60 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd2:	f7fd f945 	bl	8000f60 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b64      	cmp	r3, #100	; 0x64
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e103      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	4b75      	ldr	r3, [pc, #468]	; (8003ebc <HAL_RCC_OscConfig+0x4c8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x312>
 8003cf8:	4b6f      	ldr	r3, [pc, #444]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4a6e      	ldr	r2, [pc, #440]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6213      	str	r3, [r2, #32]
 8003d04:	e02d      	b.n	8003d62 <HAL_RCC_OscConfig+0x36e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x334>
 8003d0e:	4b6a      	ldr	r3, [pc, #424]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	4a69      	ldr	r2, [pc, #420]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6213      	str	r3, [r2, #32]
 8003d1a:	4b67      	ldr	r3, [pc, #412]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	4a66      	ldr	r2, [pc, #408]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	6213      	str	r3, [r2, #32]
 8003d26:	e01c      	b.n	8003d62 <HAL_RCC_OscConfig+0x36e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	d10c      	bne.n	8003d4a <HAL_RCC_OscConfig+0x356>
 8003d30:	4b61      	ldr	r3, [pc, #388]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	4a60      	ldr	r2, [pc, #384]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d36:	f043 0304 	orr.w	r3, r3, #4
 8003d3a:	6213      	str	r3, [r2, #32]
 8003d3c:	4b5e      	ldr	r3, [pc, #376]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	4a5d      	ldr	r2, [pc, #372]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6213      	str	r3, [r2, #32]
 8003d48:	e00b      	b.n	8003d62 <HAL_RCC_OscConfig+0x36e>
 8003d4a:	4b5b      	ldr	r3, [pc, #364]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	4a5a      	ldr	r2, [pc, #360]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	6213      	str	r3, [r2, #32]
 8003d56:	4b58      	ldr	r3, [pc, #352]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	4a57      	ldr	r2, [pc, #348]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	f023 0304 	bic.w	r3, r3, #4
 8003d60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d015      	beq.n	8003d96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fd f8f9 	bl	8000f60 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d72:	f7fd f8f5 	bl	8000f60 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0b1      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d88:	4b4b      	ldr	r3, [pc, #300]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ee      	beq.n	8003d72 <HAL_RCC_OscConfig+0x37e>
 8003d94:	e014      	b.n	8003dc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d96:	f7fd f8e3 	bl	8000f60 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fd f8df 	bl	8000f60 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e09b      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db4:	4b40      	ldr	r3, [pc, #256]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ee      	bne.n	8003d9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc6:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	4a3b      	ldr	r2, [pc, #236]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8087 	beq.w	8003eea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ddc:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d061      	beq.n	8003eac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d146      	bne.n	8003e7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df0:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fd f8b3 	bl	8000f60 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfe:	f7fd f8af 	bl	8000f60 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e06d      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e10:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f0      	bne.n	8003dfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d108      	bne.n	8003e38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	4921      	ldr	r1, [pc, #132]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e38:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a19      	ldr	r1, [r3, #32]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	491b      	ldr	r1, [pc, #108]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7fd f883 	bl	8000f60 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fd f87f 	bl	8000f60 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e03d      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x46a>
 8003e7c:	e035      	b.n	8003eea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fd f86c 	bl	8000f60 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fd f868 	bl	8000f60 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e026      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x498>
 8003eaa:	e01e      	b.n	8003eea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d107      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e019      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_OscConfig+0x500>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d001      	beq.n	8003eea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000

08003ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0d0      	b.n	80040ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b6a      	ldr	r3, [pc, #424]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d910      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b67      	ldr	r3, [pc, #412]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 0207 	bic.w	r2, r3, #7
 8003f22:	4965      	ldr	r1, [pc, #404]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0b8      	b.n	80040ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f54:	4b59      	ldr	r3, [pc, #356]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4a52      	ldr	r2, [pc, #328]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	494d      	ldr	r1, [pc, #308]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d040      	beq.n	8004018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d115      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb6:	4b41      	ldr	r3, [pc, #260]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e073      	b.n	80040ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc6:	4b3d      	ldr	r3, [pc, #244]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e06b      	b.n	80040ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd6:	4b39      	ldr	r3, [pc, #228]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f023 0203 	bic.w	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4936      	ldr	r1, [pc, #216]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe8:	f7fc ffba 	bl	8000f60 <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff0:	f7fc ffb6 	bl	8000f60 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e053      	b.n	80040ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	4b2d      	ldr	r3, [pc, #180]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 020c 	and.w	r2, r3, #12
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	429a      	cmp	r2, r3
 8004016:	d1eb      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004018:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d210      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 0207 	bic.w	r2, r3, #7
 800402e:	4922      	ldr	r1, [pc, #136]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e032      	b.n	80040ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4916      	ldr	r1, [pc, #88]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	490e      	ldr	r1, [pc, #56]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004082:	4313      	orrs	r3, r2
 8004084:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004086:	f000 f821 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	490a      	ldr	r1, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1cc>)
 80040a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1d0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc ff18 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40022000 	.word	0x40022000
 80040bc:	40021000 	.word	0x40021000
 80040c0:	0800a240 	.word	0x0800a240
 80040c4:	20000008 	.word	0x20000008
 80040c8:	2000000c 	.word	0x2000000c

080040cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	b490      	push	{r4, r7}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040d2:	4b29      	ldr	r3, [pc, #164]	; (8004178 <HAL_RCC_GetSysClockFreq+0xac>)
 80040d4:	1d3c      	adds	r4, r7, #4
 80040d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040dc:	f240 2301 	movw	r3, #513	; 0x201
 80040e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	2300      	movs	r3, #0
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040f6:	4b21      	ldr	r3, [pc, #132]	; (800417c <HAL_RCC_GetSysClockFreq+0xb0>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b04      	cmp	r3, #4
 8004104:	d002      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x40>
 8004106:	2b08      	cmp	r3, #8
 8004108:	d003      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0x46>
 800410a:	e02b      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800410c:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <HAL_RCC_GetSysClockFreq+0xb4>)
 800410e:	623b      	str	r3, [r7, #32]
      break;
 8004110:	e02b      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	0c9b      	lsrs	r3, r3, #18
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	3328      	adds	r3, #40	; 0x28
 800411c:	443b      	add	r3, r7
 800411e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004122:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d012      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	0c5b      	lsrs	r3, r3, #17
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	3328      	adds	r3, #40	; 0x28
 800413a:	443b      	add	r3, r7
 800413c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004140:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	4a0e      	ldr	r2, [pc, #56]	; (8004180 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004146:	fb03 f202 	mul.w	r2, r3, r2
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
 8004152:	e004      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	4a0b      	ldr	r2, [pc, #44]	; (8004184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	623b      	str	r3, [r7, #32]
      break;
 8004162:	e002      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004166:	623b      	str	r3, [r7, #32]
      break;
 8004168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416a:	6a3b      	ldr	r3, [r7, #32]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3728      	adds	r7, #40	; 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bc90      	pop	{r4, r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	0800a1e8 	.word	0x0800a1e8
 800417c:	40021000 	.word	0x40021000
 8004180:	007a1200 	.word	0x007a1200
 8004184:	003d0900 	.word	0x003d0900

08004188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800418c:	4b02      	ldr	r3, [pc, #8]	; (8004198 <HAL_RCC_GetHCLKFreq+0x10>)
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	20000008 	.word	0x20000008

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041a0:	f7ff fff2 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	0800a250 	.word	0x0800a250

080041c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041c8:	f7ff ffde 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	0adb      	lsrs	r3, r3, #11
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000
 80041e8:	0800a250 	.word	0x0800a250

080041ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <RCC_Delay+0x34>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <RCC_Delay+0x38>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0a5b      	lsrs	r3, r3, #9
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004208:	bf00      	nop
  }
  while (Delay --);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1e5a      	subs	r2, r3, #1
 800420e:	60fa      	str	r2, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f9      	bne.n	8004208 <RCC_Delay+0x1c>
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr
 8004220:	20000008 	.word	0x20000008
 8004224:	10624dd3 	.word	0x10624dd3

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d07d      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004244:	2300      	movs	r3, #0
 8004246:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004248:	4b4f      	ldr	r3, [pc, #316]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10d      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004254:	4b4c      	ldr	r3, [pc, #304]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	4a4b      	ldr	r2, [pc, #300]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425e:	61d3      	str	r3, [r2, #28]
 8004260:	4b49      	ldr	r3, [pc, #292]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	4b46      	ldr	r3, [pc, #280]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d118      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427c:	4b43      	ldr	r3, [pc, #268]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a42      	ldr	r2, [pc, #264]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004286:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004288:	f7fc fe6a 	bl	8000f60 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428e:	e008      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004290:	f7fc fe66 	bl	8000f60 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e06d      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a2:	4b3a      	ldr	r3, [pc, #232]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042ae:	4b36      	ldr	r3, [pc, #216]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d02e      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d027      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042cc:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042d6:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042dc:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042e2:	4a29      	ldr	r2, [pc, #164]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d014      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f2:	f7fc fe35 	bl	8000f60 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	e00a      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fc fe31 	bl	8000f60 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e036      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004310:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ee      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4917      	ldr	r1, [pc, #92]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432a:	4313      	orrs	r3, r2
 800432c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004334:	4b14      	ldr	r3, [pc, #80]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	4a13      	ldr	r2, [pc, #76]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	490b      	ldr	r1, [pc, #44]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	4904      	ldr	r1, [pc, #16]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000
 800438c:	40007000 	.word	0x40007000
 8004390:	42420440 	.word	0x42420440

08004394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e076      	b.n	8004494 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d108      	bne.n	80043c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b6:	d009      	beq.n	80043cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	61da      	str	r2, [r3, #28]
 80043be:	e005      	b.n	80043cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc fbf2 	bl	8000bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	ea42 0103 	orr.w	r1, r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	0c1a      	lsrs	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f002 0204 	and.w	r2, r2, #4
 8004472:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004482:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b8:	d112      	bne.n	80044e0 <HAL_SPI_Receive+0x44>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10e      	bne.n	80044e0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2204      	movs	r2, #4
 80044c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044ca:	88fa      	ldrh	r2, [r7, #6]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f8f1 	bl	80046be <HAL_SPI_TransmitReceive>
 80044dc:	4603      	mov	r3, r0
 80044de:	e0ea      	b.n	80046b6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_SPI_Receive+0x52>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e0e3      	b.n	80046b6 <HAL_SPI_Receive+0x21a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f6:	f7fc fd33 	bl	8000f60 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d002      	beq.n	800450e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004508:	2302      	movs	r3, #2
 800450a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800450c:	e0ca      	b.n	80046a4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_SPI_Receive+0x7e>
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800451e:	e0c1      	b.n	80046a4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2204      	movs	r2, #4
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004566:	d10f      	bne.n	8004588 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004576:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004586:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d007      	beq.n	80045a6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d162      	bne.n	8004674 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045ae:	e02e      	b.n	800460e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d115      	bne.n	80045ea <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f103 020c 	add.w	r2, r3, #12
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045e8:	e011      	b.n	800460e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ea:	f7fc fcb9 	bl	8000f60 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d803      	bhi.n	8004602 <HAL_SPI_Receive+0x166>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d102      	bne.n	8004608 <HAL_SPI_Receive+0x16c>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800460c:	e04a      	b.n	80046a4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1cb      	bne.n	80045b0 <HAL_SPI_Receive+0x114>
 8004618:	e031      	b.n	800467e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d113      	bne.n	8004650 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	b292      	uxth	r2, r2
 8004634:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	1c9a      	adds	r2, r3, #2
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800464e:	e011      	b.n	8004674 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004650:	f7fc fc86 	bl	8000f60 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d803      	bhi.n	8004668 <HAL_SPI_Receive+0x1cc>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d102      	bne.n	800466e <HAL_SPI_Receive+0x1d2>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d102      	bne.n	8004674 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004672:	e017      	b.n	80046a4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1cd      	bne.n	800461a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fa46 	bl	8004b14 <SPI_EndRxTransaction>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	75fb      	strb	r3, [r7, #23]
 80046a0:	e000      	b.n	80046a4 <HAL_SPI_Receive+0x208>
  }

error :
 80046a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b08c      	sub	sp, #48	; 0x30
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046cc:	2301      	movs	r3, #1
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x26>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e18a      	b.n	80049fa <HAL_SPI_TransmitReceive+0x33c>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ec:	f7fc fc38 	bl	8000f60 <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004702:	887b      	ldrh	r3, [r7, #2]
 8004704:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800470a:	2b01      	cmp	r3, #1
 800470c:	d00f      	beq.n	800472e <HAL_SPI_TransmitReceive+0x70>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004714:	d107      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x68>
 800471e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004722:	2b04      	cmp	r3, #4
 8004724:	d003      	beq.n	800472e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004726:	2302      	movs	r3, #2
 8004728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800472c:	e15b      	b.n	80049e6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x82>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x82>
 800473a:	887b      	ldrh	r3, [r7, #2]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004746:	e14e      	b.n	80049e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b04      	cmp	r3, #4
 8004752:	d003      	beq.n	800475c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2205      	movs	r2, #5
 8004758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	887a      	ldrh	r2, [r7, #2]
 800476c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	887a      	ldrh	r2, [r7, #2]
 8004772:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	887a      	ldrh	r2, [r7, #2]
 800477e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	887a      	ldrh	r2, [r7, #2]
 8004784:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d007      	beq.n	80047b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b8:	d178      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x10a>
 80047c2:	8b7b      	ldrh	r3, [r7, #26]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d166      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	881a      	ldrh	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ec:	e053      	b.n	8004896 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d11b      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x176>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <HAL_SPI_TransmitReceive+0x176>
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d113      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	881a      	ldrh	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b01      	cmp	r3, #1
 8004840:	d119      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x1b8>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d014      	beq.n	8004876 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	b292      	uxth	r2, r2
 8004858:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004872:	2301      	movs	r3, #1
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004876:	f7fc fb73 	bl	8000f60 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004882:	429a      	cmp	r2, r3
 8004884:	d807      	bhi.n	8004896 <HAL_SPI_TransmitReceive+0x1d8>
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d003      	beq.n	8004896 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004894:	e0a7      	b.n	80049e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1a6      	bne.n	80047ee <HAL_SPI_TransmitReceive+0x130>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1a1      	bne.n	80047ee <HAL_SPI_TransmitReceive+0x130>
 80048aa:	e07c      	b.n	80049a6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x1fc>
 80048b4:	8b7b      	ldrh	r3, [r7, #26]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d16b      	bne.n	8004992 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	7812      	ldrb	r2, [r2, #0]
 80048c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e0:	e057      	b.n	8004992 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d11c      	bne.n	800492a <HAL_SPI_TransmitReceive+0x26c>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d017      	beq.n	800492a <HAL_SPI_TransmitReceive+0x26c>
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d114      	bne.n	800492a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d119      	bne.n	800496c <HAL_SPI_TransmitReceive+0x2ae>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d014      	beq.n	800496c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004968:	2301      	movs	r3, #1
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800496c:	f7fc faf8 	bl	8000f60 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004978:	429a      	cmp	r2, r3
 800497a:	d803      	bhi.n	8004984 <HAL_SPI_TransmitReceive+0x2c6>
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d102      	bne.n	800498a <HAL_SPI_TransmitReceive+0x2cc>
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004990:	e029      	b.n	80049e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1a2      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x224>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d19d      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f904 	bl	8004bb8 <SPI_EndRxTxTransaction>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d006      	beq.n	80049c4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80049c2:	e010      	b.n	80049e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	e000      	b.n	80049e6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80049e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3730      	adds	r7, #48	; 0x30
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a14:	f7fc faa4 	bl	8000f60 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	4413      	add	r3, r2
 8004a22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a24:	f7fc fa9c 	bl	8000f60 <HAL_GetTick>
 8004a28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a2a:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	015b      	lsls	r3, r3, #5
 8004a30:	0d1b      	lsrs	r3, r3, #20
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
 8004a38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a3a:	e054      	b.n	8004ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a42:	d050      	beq.n	8004ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a44:	f7fc fa8c 	bl	8000f60 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d902      	bls.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d13d      	bne.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a72:	d111      	bne.n	8004a98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7c:	d004      	beq.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a86:	d107      	bne.n	8004a98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa0:	d10f      	bne.n	8004ac2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e017      	b.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4013      	ands	r3, r2
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	bf0c      	ite	eq
 8004af6:	2301      	moveq	r3, #1
 8004af8:	2300      	movne	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d19b      	bne.n	8004a3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000008 	.word	0x20000008

08004b14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b28:	d111      	bne.n	8004b4e <SPI_EndRxTransaction+0x3a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b32:	d004      	beq.n	8004b3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3c:	d107      	bne.n	8004b4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b56:	d117      	bne.n	8004b88 <SPI_EndRxTransaction+0x74>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b60:	d112      	bne.n	8004b88 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7ff ff49 	bl	8004a04 <SPI_WaitFlagStateUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01a      	beq.n	8004bae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e013      	b.n	8004bb0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7ff ff36 	bl	8004a04 <SPI_WaitFlagStateUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e000      	b.n	8004bb0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2180      	movs	r1, #128	; 0x80
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff ff18 	bl	8004a04 <SPI_WaitFlagStateUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f043 0220 	orr.w	r2, r3, #32
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e000      	b.n	8004bec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e03f      	b.n	8004c86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc f85e 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2224      	movs	r2, #36	; 0x24
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f905 	bl	8004e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b08a      	sub	sp, #40	; 0x28
 8004c92:	af02      	add	r7, sp, #8
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d17c      	bne.n	8004da8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_UART_Transmit+0x2c>
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e075      	b.n	8004daa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_UART_Transmit+0x3e>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e06e      	b.n	8004daa <HAL_UART_Transmit+0x11c>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2221      	movs	r2, #33	; 0x21
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce2:	f7fc f93d 	bl	8000f60 <HAL_GetTick>
 8004ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	d108      	bne.n	8004d10 <HAL_UART_Transmit+0x82>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	e003      	b.n	8004d18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d20:	e02a      	b.n	8004d78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2180      	movs	r1, #128	; 0x80
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f840 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e036      	b.n	8004daa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	3302      	adds	r3, #2
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	e007      	b.n	8004d6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	3301      	adds	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1cf      	bne.n	8004d22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2140      	movs	r1, #64	; 0x40
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f810 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e006      	b.n	8004daa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3720      	adds	r7, #32
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	603b      	str	r3, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc2:	e02c      	b.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d028      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dd2:	f7fc f8c5 	bl	8000f60 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d21d      	bcs.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004df0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695a      	ldr	r2, [r3, #20]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e00f      	b.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4013      	ands	r3, r2
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	bf0c      	ite	eq
 8004e2e:	2301      	moveq	r3, #1
 8004e30:	2300      	movne	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d0c3      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e82:	f023 030c 	bic.w	r3, r3, #12
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2c      	ldr	r2, [pc, #176]	; (8004f5c <UART_SetConfig+0x114>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d103      	bne.n	8004eb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004eb0:	f7ff f988 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	e002      	b.n	8004ebe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004eb8:	f7ff f970 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8004ebc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009a      	lsls	r2, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <UART_SetConfig+0x118>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	0119      	lsls	r1, r3, #4
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009a      	lsls	r2, r3, #2
 8004ee8:	441a      	add	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef4:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <UART_SetConfig+0x118>)
 8004ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	2064      	movs	r0, #100	; 0x64
 8004efe:	fb00 f303 	mul.w	r3, r0, r3
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	3332      	adds	r3, #50	; 0x32
 8004f08:	4a15      	ldr	r2, [pc, #84]	; (8004f60 <UART_SetConfig+0x118>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f14:	4419      	add	r1, r3
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009a      	lsls	r2, r3, #2
 8004f20:	441a      	add	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <UART_SetConfig+0x118>)
 8004f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	2064      	movs	r0, #100	; 0x64
 8004f36:	fb00 f303 	mul.w	r3, r0, r3
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	3332      	adds	r3, #50	; 0x32
 8004f40:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <UART_SetConfig+0x118>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	f003 020f 	and.w	r2, r3, #15
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	440a      	add	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40013800 	.word	0x40013800
 8004f60:	51eb851f 	.word	0x51eb851f

08004f64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f64:	b084      	sub	sp, #16
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	f107 0014 	add.w	r0, r7, #20
 8004f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	b004      	add	sp, #16
 8004f82:	4770      	bx	lr

08004f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fb8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004fbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	4013      	ands	r3, r2
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	f107 0014 	add.w	r0, r7, #20
 800500a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	b004      	add	sp, #16
 800503a:	4770      	bx	lr

0800503c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800503c:	b480      	push	{r7}
 800503e:	b09b      	sub	sp, #108	; 0x6c
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	78db      	ldrb	r3, [r3, #3]
 800506a:	2b03      	cmp	r3, #3
 800506c:	d81f      	bhi.n	80050ae <USB_ActivateEndpoint+0x72>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <USB_ActivateEndpoint+0x38>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	08005085 	.word	0x08005085
 8005078:	080050a1 	.word	0x080050a1
 800507c:	080050b7 	.word	0x080050b7
 8005080:	08005093 	.word	0x08005093
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005084:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800508c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005090:	e012      	b.n	80050b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005092:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005096:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800509a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800509e:	e00b      	b.n	80050b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80050a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80050ac:	e004      	b.n	80050b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80050b4:	e000      	b.n	80050b8 <USB_ActivateEndpoint+0x7c>
      break;
 80050b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	441a      	add	r2, r3
 80050c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800510c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511c:	b29b      	uxth	r3, r3
 800511e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	7b1b      	ldrb	r3, [r3, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 8149 	bne.w	80053bc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	785b      	ldrb	r3, [r3, #1]
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 8084 	beq.w	800523c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800513e:	b29b      	uxth	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	4413      	add	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	011a      	lsls	r2, r3, #4
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	88db      	ldrh	r3, [r3, #6]
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	81fb      	strh	r3, [r7, #14]
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01b      	beq.n	80051b8 <USB_ActivateEndpoint+0x17c>
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	81bb      	strh	r3, [r7, #12]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	441a      	add	r2, r3
 80051a2:	89bb      	ldrh	r3, [r7, #12]
 80051a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	78db      	ldrb	r3, [r3, #3]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d020      	beq.n	8005202 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d6:	813b      	strh	r3, [r7, #8]
 80051d8:	893b      	ldrh	r3, [r7, #8]
 80051da:	f083 0320 	eor.w	r3, r3, #32
 80051de:	813b      	strh	r3, [r7, #8]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	893b      	ldrh	r3, [r7, #8]
 80051ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	8013      	strh	r3, [r2, #0]
 8005200:	e27f      	b.n	8005702 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005218:	817b      	strh	r3, [r7, #10]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	441a      	add	r2, r3
 8005224:	897b      	ldrh	r3, [r7, #10]
 8005226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005236:	b29b      	uxth	r3, r3
 8005238:	8013      	strh	r3, [r2, #0]
 800523a:	e262      	b.n	8005702 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005246:	b29b      	uxth	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	4413      	add	r3, r2
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	011a      	lsls	r2, r3, #4
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	4413      	add	r3, r2
 800525a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	88db      	ldrh	r3, [r3, #6]
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527a:	b29b      	uxth	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	4413      	add	r3, r2
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	011a      	lsls	r2, r3, #4
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	4413      	add	r3, r2
 800528e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005292:	623b      	str	r3, [r7, #32]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d112      	bne.n	80052c2 <USB_ActivateEndpoint+0x286>
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	e02f      	b.n	8005322 <USB_ActivateEndpoint+0x2e6>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b3e      	cmp	r3, #62	; 0x3e
 80052c8:	d813      	bhi.n	80052f2 <USB_ActivateEndpoint+0x2b6>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	663b      	str	r3, [r7, #96]	; 0x60
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <USB_ActivateEndpoint+0x2a8>
 80052de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052e0:	3301      	adds	r3, #1
 80052e2:	663b      	str	r3, [r7, #96]	; 0x60
 80052e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	029b      	lsls	r3, r3, #10
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	e017      	b.n	8005322 <USB_ActivateEndpoint+0x2e6>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	663b      	str	r3, [r7, #96]	; 0x60
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <USB_ActivateEndpoint+0x2d0>
 8005306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005308:	3b01      	subs	r3, #1
 800530a:	663b      	str	r3, [r7, #96]	; 0x60
 800530c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800530e:	b29b      	uxth	r3, r3
 8005310:	029b      	lsls	r3, r3, #10
 8005312:	b29b      	uxth	r3, r3
 8005314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800531c:	b29a      	uxth	r2, r3
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	83fb      	strh	r3, [r7, #30]
 8005330:	8bfb      	ldrh	r3, [r7, #30]
 8005332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01b      	beq.n	8005372 <USB_ActivateEndpoint+0x336>
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	83bb      	strh	r3, [r7, #28]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	8bbb      	ldrh	r3, [r7, #28]
 800535e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800536a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005388:	837b      	strh	r3, [r7, #26]
 800538a:	8b7b      	ldrh	r3, [r7, #26]
 800538c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005390:	837b      	strh	r3, [r7, #26]
 8005392:	8b7b      	ldrh	r3, [r7, #26]
 8005394:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005398:	837b      	strh	r3, [r7, #26]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	441a      	add	r2, r3
 80053a4:	8b7b      	ldrh	r3, [r7, #26]
 80053a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	8013      	strh	r3, [r2, #0]
 80053ba:	e1a2      	b.n	8005702 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80053e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80053f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005402:	b29b      	uxth	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005408:	4413      	add	r3, r2
 800540a:	65bb      	str	r3, [r7, #88]	; 0x58
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	011a      	lsls	r2, r3, #4
 8005412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005414:	4413      	add	r3, r2
 8005416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541a:	657b      	str	r3, [r7, #84]	; 0x54
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	891b      	ldrh	r3, [r3, #8]
 8005420:	085b      	lsrs	r3, r3, #1
 8005422:	b29b      	uxth	r3, r3
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	653b      	str	r3, [r7, #80]	; 0x50
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005436:	b29b      	uxth	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800543c:	4413      	add	r3, r2
 800543e:	653b      	str	r3, [r7, #80]	; 0x50
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	011a      	lsls	r2, r3, #4
 8005446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005448:	4413      	add	r3, r2
 800544a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	895b      	ldrh	r3, [r3, #10]
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	b29b      	uxth	r3, r3
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f040 8091 	bne.w	800558c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005478:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800547a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01b      	beq.n	80054ba <USB_ActivateEndpoint+0x47e>
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005498:	877b      	strh	r3, [r7, #58]	; 0x3a
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	441a      	add	r2, r3
 80054a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80054a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80054c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01b      	beq.n	800550a <USB_ActivateEndpoint+0x4ce>
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	441a      	add	r2, r3
 80054f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005506:	b29b      	uxth	r3, r3
 8005508:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800551c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005520:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005522:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005524:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005528:	86bb      	strh	r3, [r7, #52]	; 0x34
 800552a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800552c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005530:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005568:	867b      	strh	r3, [r7, #50]	; 0x32
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	441a      	add	r2, r3
 8005574:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005586:	b29b      	uxth	r3, r3
 8005588:	8013      	strh	r3, [r2, #0]
 800558a:	e0ba      	b.n	8005702 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800559c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01d      	beq.n	80055e4 <USB_ActivateEndpoint+0x5a8>
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80055f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80055f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01d      	beq.n	800563c <USB_ActivateEndpoint+0x600>
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	441a      	add	r2, r3
 8005624:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005634:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005638:	b29b      	uxth	r3, r3
 800563a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	78db      	ldrb	r3, [r3, #3]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d024      	beq.n	800568e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800565a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800565e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005662:	f083 0320 	eor.w	r3, r3, #32
 8005666:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	441a      	add	r2, r3
 8005674:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800567c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005688:	b29b      	uxth	r3, r3
 800568a:	8013      	strh	r3, [r2, #0]
 800568c:	e01d      	b.n	80056ca <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	441a      	add	r2, r3
 80056b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80056ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005702:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005706:	4618      	mov	r0, r3
 8005708:	376c      	adds	r7, #108	; 0x6c
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005710:	b480      	push	{r7}
 8005712:	b08d      	sub	sp, #52	; 0x34
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	7b1b      	ldrb	r3, [r3, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 808e 	bne.w	8005840 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d044      	beq.n	80057b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	81bb      	strh	r3, [r7, #12]
 800573a:	89bb      	ldrh	r3, [r7, #12]
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01b      	beq.n	800577c <USB_DeactivateEndpoint+0x6c>
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575a:	817b      	strh	r3, [r7, #10]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	441a      	add	r2, r3
 8005766:	897b      	ldrh	r3, [r7, #10]
 8005768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005778:	b29b      	uxth	r3, r3
 800577a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005792:	813b      	strh	r3, [r7, #8]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	893b      	ldrh	r3, [r7, #8]
 80057a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8013      	strh	r3, [r2, #0]
 80057b4:	e192      	b.n	8005adc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	827b      	strh	r3, [r7, #18]
 80057c4:	8a7b      	ldrh	r3, [r7, #18]
 80057c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01b      	beq.n	8005806 <USB_DeactivateEndpoint+0xf6>
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e4:	823b      	strh	r3, [r7, #16]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	441a      	add	r2, r3
 80057f0:	8a3b      	ldrh	r3, [r7, #16]
 80057f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005802:	b29b      	uxth	r3, r3
 8005804:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581c:	81fb      	strh	r3, [r7, #14]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	441a      	add	r2, r3
 8005828:	89fb      	ldrh	r3, [r7, #14]
 800582a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800582e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583a:	b29b      	uxth	r3, r3
 800583c:	8013      	strh	r3, [r2, #0]
 800583e:	e14d      	b.n	8005adc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f040 80a5 	bne.w	8005994 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	843b      	strh	r3, [r7, #32]
 8005858:	8c3b      	ldrh	r3, [r7, #32]
 800585a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01b      	beq.n	800589a <USB_DeactivateEndpoint+0x18a>
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005878:	83fb      	strh	r3, [r7, #30]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	441a      	add	r2, r3
 8005884:	8bfb      	ldrh	r3, [r7, #30]
 8005886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005896:	b29b      	uxth	r3, r3
 8005898:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	83bb      	strh	r3, [r7, #28]
 80058a8:	8bbb      	ldrh	r3, [r7, #28]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01b      	beq.n	80058ea <USB_DeactivateEndpoint+0x1da>
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c8:	837b      	strh	r3, [r7, #26]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	8b7b      	ldrh	r3, [r7, #26]
 80058d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005900:	833b      	strh	r3, [r7, #24]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	441a      	add	r2, r3
 800590c:	8b3b      	ldrh	r3, [r7, #24]
 800590e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800591e:	b29b      	uxth	r3, r3
 8005920:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005938:	82fb      	strh	r3, [r7, #22]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	441a      	add	r2, r3
 8005944:	8afb      	ldrh	r3, [r7, #22]
 8005946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005956:	b29b      	uxth	r3, r3
 8005958:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005970:	82bb      	strh	r3, [r7, #20]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	441a      	add	r2, r3
 800597c:	8abb      	ldrh	r3, [r7, #20]
 800597e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800598e:	b29b      	uxth	r3, r3
 8005990:	8013      	strh	r3, [r2, #0]
 8005992:	e0a3      	b.n	8005adc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80059a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <USB_DeactivateEndpoint+0x2d4>
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80059d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80059f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <USB_DeactivateEndpoint+0x324>
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	441a      	add	r2, r3
 8005a1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	441a      	add	r2, r3
 8005a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	441a      	add	r2, r3
 8005a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	847b      	strh	r3, [r7, #34]	; 0x22
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3734      	adds	r7, #52	; 0x34
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr

08005ae8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b0cc      	sub	sp, #304	; 0x130
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005af6:	6018      	str	r0, [r3, #0]
 8005af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b00:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	f041 817d 	bne.w	8006e0e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d908      	bls.n	8005b42 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005b40:	e007      	b.n	8005b52 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	7b1b      	ldrb	r3, [r3, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d152      	bne.n	8005c08 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6959      	ldr	r1, [r3, #20]
 8005b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	88da      	ldrh	r2, [r3, #6]
 8005b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b84:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b88:	6800      	ldr	r0, [r0, #0]
 8005b8a:	f001 ff23 	bl	80079d4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005b96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b9a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005bbc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005bc0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	011a      	lsls	r2, r3, #4
 8005bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bdc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4413      	add	r3, r2
 8005be4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	f001 b8b5 	b.w	8006d72 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	78db      	ldrb	r3, [r3, #3]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	f040 84c6 	bne.w	80065a6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6a1a      	ldr	r2, [r3, #32]
 8005c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	f240 8443 	bls.w	80064be <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	441a      	add	r2, r3
 8005c7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6a1a      	ldr	r2, [r3, #32]
 8005ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca4:	1ad2      	subs	r2, r2, r3
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 823e 	beq.w	8006156 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005ce2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ce6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f040 809a 	bne.w	8005e34 <USB_EPStartXfer+0x34c>
 8005d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d0c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d10:	6812      	ldr	r2, [r2, #0]
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	4619      	mov	r1, r3
 8005d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d32:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	440a      	add	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	011a      	lsls	r2, r3, #4
 8005d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d122      	bne.n	8005db2 <USB_EPStartXfer+0x2ca>
 8005d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e079      	b.n	8005ea6 <USB_EPStartXfer+0x3be>
 8005db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db6:	2b3e      	cmp	r3, #62	; 0x3e
 8005db8:	d81b      	bhi.n	8005df2 <USB_EPStartXfer+0x30a>
 8005dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <USB_EPStartXfer+0x2f2>
 8005dd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005dda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	029b      	lsls	r3, r3, #10
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e059      	b.n	8005ea6 <USB_EPStartXfer+0x3be>
 8005df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e00:	f003 031f 	and.w	r3, r3, #31
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <USB_EPStartXfer+0x32a>
 8005e08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	029b      	lsls	r3, r3, #10
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	e038      	b.n	8005ea6 <USB_EPStartXfer+0x3be>
 8005e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d130      	bne.n	8005ea6 <USB_EPStartXfer+0x3be>
 8005e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	4619      	mov	r1, r3
 8005e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005e5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e62:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005e66:	6812      	ldr	r2, [r2, #0]
 8005e68:	440a      	add	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	011a      	lsls	r2, r3, #4
 8005e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	895b      	ldrh	r3, [r3, #10]
 8005eb2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6959      	ldr	r1, [r3, #20]
 8005ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ecc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ed0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ed4:	6800      	ldr	r0, [r0, #0]
 8005ed6:	f001 fd7d 	bl	80079d4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eea:	441a      	add	r2, r3
 8005eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d90f      	bls.n	8005f34 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	621a      	str	r2, [r3, #32]
 8005f32:	e00e      	b.n	8005f52 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 809a 	bne.w	8006098 <USB_EPStartXfer+0x5b0>
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f70:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f96:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	011a      	lsls	r2, r3, #4
 8005fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d122      	bne.n	8006016 <USB_EPStartXfer+0x52e>
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006006:	b29a      	uxth	r2, r3
 8006008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e083      	b.n	800611e <USB_EPStartXfer+0x636>
 8006016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601a:	2b3e      	cmp	r3, #62	; 0x3e
 800601c:	d81b      	bhi.n	8006056 <USB_EPStartXfer+0x56e>
 800601e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006022:	085b      	lsrs	r3, r3, #1
 8006024:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <USB_EPStartXfer+0x556>
 8006034:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006038:	3301      	adds	r3, #1
 800603a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800603e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006042:	b29b      	uxth	r3, r3
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	b29a      	uxth	r2, r3
 8006048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	e063      	b.n	800611e <USB_EPStartXfer+0x636>
 8006056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <USB_EPStartXfer+0x58e>
 800606c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006070:	3b01      	subs	r3, #1
 8006072:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006076:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800607a:	b29b      	uxth	r3, r3
 800607c:	029b      	lsls	r3, r3, #10
 800607e:	b29b      	uxth	r3, r3
 8006080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006088:	b29a      	uxth	r2, r3
 800608a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	e042      	b.n	800611e <USB_EPStartXfer+0x636>
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d13a      	bne.n	800611e <USB_EPStartXfer+0x636>
 80060a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80060b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060b4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	4619      	mov	r1, r3
 80060ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80060d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060da:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	440a      	add	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	011a      	lsls	r2, r3, #4
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4413      	add	r3, r2
 80060fe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006110:	b29a      	uxth	r2, r3
 8006112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006116:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800611e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	891b      	ldrh	r3, [r3, #8]
 800612a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800612e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6959      	ldr	r1, [r3, #20]
 800613a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613e:	b29b      	uxth	r3, r3
 8006140:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006144:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006148:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800614c:	6800      	ldr	r0, [r0, #0]
 800614e:	f001 fc41 	bl	80079d4 <USB_WritePMA>
 8006152:	f000 be0e 	b.w	8006d72 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d16d      	bne.n	8006242 <USB_EPStartXfer+0x75a>
 8006166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	64bb      	str	r3, [r7, #72]	; 0x48
 8006172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006176:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006180:	b29b      	uxth	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006186:	4413      	add	r3, r2
 8006188:	64bb      	str	r3, [r7, #72]	; 0x48
 800618a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	011a      	lsls	r2, r3, #4
 8006198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800619a:	4413      	add	r3, r2
 800619c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061a0:	647b      	str	r3, [r7, #68]	; 0x44
 80061a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d112      	bne.n	80061d0 <USB_EPStartXfer+0x6e8>
 80061aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b8:	801a      	strh	r2, [r3, #0]
 80061ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061cc:	801a      	strh	r2, [r3, #0]
 80061ce:	e063      	b.n	8006298 <USB_EPStartXfer+0x7b0>
 80061d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d4:	2b3e      	cmp	r3, #62	; 0x3e
 80061d6:	d817      	bhi.n	8006208 <USB_EPStartXfer+0x720>
 80061d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80061e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d004      	beq.n	80061f8 <USB_EPStartXfer+0x710>
 80061ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80061f2:	3301      	adds	r3, #1
 80061f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80061f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	029b      	lsls	r3, r3, #10
 8006200:	b29a      	uxth	r2, r3
 8006202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	e047      	b.n	8006298 <USB_EPStartXfer+0x7b0>
 8006208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <USB_EPStartXfer+0x740>
 800621e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006222:	3b01      	subs	r3, #1
 8006224:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006228:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800622c:	b29b      	uxth	r3, r3
 800622e:	029b      	lsls	r3, r3, #10
 8006230:	b29b      	uxth	r3, r3
 8006232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623a:	b29a      	uxth	r2, r3
 800623c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623e:	801a      	strh	r2, [r3, #0]
 8006240:	e02a      	b.n	8006298 <USB_EPStartXfer+0x7b0>
 8006242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d122      	bne.n	8006298 <USB_EPStartXfer+0x7b0>
 8006252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	653b      	str	r3, [r7, #80]	; 0x50
 800625e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626c:	b29b      	uxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006272:	4413      	add	r3, r2
 8006274:	653b      	str	r3, [r7, #80]	; 0x50
 8006276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	011a      	lsls	r2, r3, #4
 8006284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006286:	4413      	add	r3, r2
 8006288:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800628c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800628e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006292:	b29a      	uxth	r2, r3
 8006294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006296:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	891b      	ldrh	r3, [r3, #8]
 80062a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6959      	ldr	r1, [r3, #20]
 80062b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062be:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80062c2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80062c6:	6800      	ldr	r0, [r0, #0]
 80062c8:	f001 fb84 	bl	80079d4 <USB_WritePMA>
            ep->xfer_buff += len;
 80062cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062dc:	441a      	add	r2, r3
 80062de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80062ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6a1a      	ldr	r2, [r3, #32]
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	429a      	cmp	r2, r3
 8006304:	d90f      	bls.n	8006326 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6a1a      	ldr	r2, [r3, #32]
 8006312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006316:	1ad2      	subs	r2, r2, r3
 8006318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	621a      	str	r2, [r3, #32]
 8006324:	e00e      	b.n	8006344 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2200      	movs	r2, #0
 8006342:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006348:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	643b      	str	r3, [r7, #64]	; 0x40
 8006350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d16d      	bne.n	800643c <USB_EPStartXfer+0x954>
 8006360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006364:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	63bb      	str	r3, [r7, #56]	; 0x38
 800636c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006370:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637a:	b29b      	uxth	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	4413      	add	r3, r2
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38
 8006384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	011a      	lsls	r2, r3, #4
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	4413      	add	r3, r2
 8006396:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
 800639c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d112      	bne.n	80063ca <USB_EPStartXfer+0x8e2>
 80063a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b2:	801a      	strh	r2, [r3, #0]
 80063b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	e05d      	b.n	8006486 <USB_EPStartXfer+0x99e>
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	2b3e      	cmp	r3, #62	; 0x3e
 80063d0:	d817      	bhi.n	8006402 <USB_EPStartXfer+0x91a>
 80063d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80063dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <USB_EPStartXfer+0x90a>
 80063e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063ec:	3301      	adds	r3, #1
 80063ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80063f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	029b      	lsls	r3, r3, #10
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	e041      	b.n	8006486 <USB_EPStartXfer+0x99e>
 8006402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800640c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <USB_EPStartXfer+0x93a>
 8006418:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800641c:	3b01      	subs	r3, #1
 800641e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006422:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006426:	b29b      	uxth	r3, r3
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	b29b      	uxth	r3, r3
 800642c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006434:	b29a      	uxth	r2, r3
 8006436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e024      	b.n	8006486 <USB_EPStartXfer+0x99e>
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d11c      	bne.n	8006486 <USB_EPStartXfer+0x99e>
 800644c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800645a:	b29b      	uxth	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006460:	4413      	add	r3, r2
 8006462:	643b      	str	r3, [r7, #64]	; 0x40
 8006464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	011a      	lsls	r2, r3, #4
 8006472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006474:	4413      	add	r3, r2
 8006476:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800647c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006480:	b29a      	uxth	r2, r3
 8006482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006484:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	895b      	ldrh	r3, [r3, #10]
 8006492:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6959      	ldr	r1, [r3, #20]
 80064a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064b4:	6800      	ldr	r0, [r0, #0]
 80064b6:	f001 fa8d 	bl	80079d4 <USB_WritePMA>
 80064ba:	f000 bc5a 	b.w	8006d72 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80064ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80064f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80064f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	441a      	add	r2, r3
 8006512:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800652a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006544:	b29b      	uxth	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800654a:	4413      	add	r3, r2
 800654c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800654e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	011a      	lsls	r2, r3, #4
 800655c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800655e:	4413      	add	r3, r2
 8006560:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006564:	65bb      	str	r3, [r7, #88]	; 0x58
 8006566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656a:	b29a      	uxth	r2, r3
 800656c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800656e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	891b      	ldrh	r3, [r3, #8]
 800657c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6959      	ldr	r1, [r3, #20]
 800658c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006590:	b29b      	uxth	r3, r3
 8006592:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006596:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800659a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800659e:	6800      	ldr	r0, [r0, #0]
 80065a0:	f001 fa18 	bl	80079d4 <USB_WritePMA>
 80065a4:	e3e5      	b.n	8006d72 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80065a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065cc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80065d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	441a      	add	r2, r3
 80065ea:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80065ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fe:	b29b      	uxth	r3, r3
 8006600:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006624:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 81bc 	beq.w	80069c0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	785b      	ldrb	r3, [r3, #1]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d16d      	bne.n	8006742 <USB_EPStartXfer+0xc5a>
 8006666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	67bb      	str	r3, [r7, #120]	; 0x78
 8006672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006680:	b29b      	uxth	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006686:	4413      	add	r3, r2
 8006688:	67bb      	str	r3, [r7, #120]	; 0x78
 800668a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	011a      	lsls	r2, r3, #4
 8006698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669a:	4413      	add	r3, r2
 800669c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066a0:	677b      	str	r3, [r7, #116]	; 0x74
 80066a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d112      	bne.n	80066d0 <USB_EPStartXfer+0xbe8>
 80066aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066cc:	801a      	strh	r2, [r3, #0]
 80066ce:	e060      	b.n	8006792 <USB_EPStartXfer+0xcaa>
 80066d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d4:	2b3e      	cmp	r3, #62	; 0x3e
 80066d6:	d817      	bhi.n	8006708 <USB_EPStartXfer+0xc20>
 80066d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066dc:	085b      	lsrs	r3, r3, #1
 80066de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80066e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <USB_EPStartXfer+0xc10>
 80066ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80066f2:	3301      	adds	r3, #1
 80066f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80066f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	029b      	lsls	r3, r3, #10
 8006700:	b29a      	uxth	r2, r3
 8006702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	e044      	b.n	8006792 <USB_EPStartXfer+0xcaa>
 8006708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <USB_EPStartXfer+0xc40>
 800671e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006722:	3b01      	subs	r3, #1
 8006724:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006728:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800672c:	b29b      	uxth	r3, r3
 800672e:	029b      	lsls	r3, r3, #10
 8006730:	b29b      	uxth	r3, r3
 8006732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673a:	b29a      	uxth	r2, r3
 800673c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800673e:	801a      	strh	r2, [r3, #0]
 8006740:	e027      	b.n	8006792 <USB_EPStartXfer+0xcaa>
 8006742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d11f      	bne.n	8006792 <USB_EPStartXfer+0xcaa>
 8006752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006756:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006760:	b29b      	uxth	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006768:	4413      	add	r3, r2
 800676a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800676e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	011a      	lsls	r2, r3, #4
 800677c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006780:	4413      	add	r3, r2
 8006782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006786:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800678c:	b29a      	uxth	r2, r3
 800678e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006790:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	895b      	ldrh	r3, [r3, #10]
 800679e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6959      	ldr	r1, [r3, #20]
 80067ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80067bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80067c0:	6800      	ldr	r0, [r0, #0]
 80067c2:	f001 f907 	bl	80079d4 <USB_WritePMA>
          ep->xfer_buff += len;
 80067c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695a      	ldr	r2, [r3, #20]
 80067d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d6:	441a      	add	r2, r3
 80067d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80067e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6a1a      	ldr	r2, [r3, #32]
 80067f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d90f      	bls.n	8006820 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a1a      	ldr	r2, [r3, #32]
 800680c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006810:	1ad2      	subs	r2, r2, r3
 8006812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	621a      	str	r2, [r3, #32]
 800681e:	e00e      	b.n	800683e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2200      	movs	r2, #0
 800683c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800683e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8295 	beq.w	8006d72 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d16d      	bne.n	8006934 <USB_EPStartXfer+0xe4c>
 8006858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	66bb      	str	r3, [r7, #104]	; 0x68
 8006864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006872:	b29b      	uxth	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006878:	4413      	add	r3, r2
 800687a:	66bb      	str	r3, [r7, #104]	; 0x68
 800687c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	011a      	lsls	r2, r3, #4
 800688a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800688c:	4413      	add	r3, r2
 800688e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006892:	667b      	str	r3, [r7, #100]	; 0x64
 8006894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d112      	bne.n	80068c2 <USB_EPStartXfer+0xdda>
 800689c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068aa:	801a      	strh	r2, [r3, #0]
 80068ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	e063      	b.n	800698a <USB_EPStartXfer+0xea2>
 80068c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c6:	2b3e      	cmp	r3, #62	; 0x3e
 80068c8:	d817      	bhi.n	80068fa <USB_EPStartXfer+0xe12>
 80068ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80068d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <USB_EPStartXfer+0xe02>
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e4:	3301      	adds	r3, #1
 80068e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	029b      	lsls	r3, r3, #10
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	e047      	b.n	800698a <USB_EPStartXfer+0xea2>
 80068fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <USB_EPStartXfer+0xe32>
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006914:	3b01      	subs	r3, #1
 8006916:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800691e:	b29b      	uxth	r3, r3
 8006920:	029b      	lsls	r3, r3, #10
 8006922:	b29b      	uxth	r3, r3
 8006924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692c:	b29a      	uxth	r2, r3
 800692e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	e02a      	b.n	800698a <USB_EPStartXfer+0xea2>
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d122      	bne.n	800698a <USB_EPStartXfer+0xea2>
 8006944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	673b      	str	r3, [r7, #112]	; 0x70
 8006950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800695e:	b29b      	uxth	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006964:	4413      	add	r3, r2
 8006966:	673b      	str	r3, [r7, #112]	; 0x70
 8006968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	011a      	lsls	r2, r3, #4
 8006976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006978:	4413      	add	r3, r2
 800697a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800697e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006984:	b29a      	uxth	r2, r3
 8006986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006988:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800698a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	891b      	ldrh	r3, [r3, #8]
 8006996:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800699a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6959      	ldr	r1, [r3, #20]
 80069a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069b8:	6800      	ldr	r0, [r0, #0]
 80069ba:	f001 f80b 	bl	80079d4 <USB_WritePMA>
 80069be:	e1d8      	b.n	8006d72 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d178      	bne.n	8006ac2 <USB_EPStartXfer+0xfda>
 80069d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069f4:	4413      	add	r3, r2
 80069f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	011a      	lsls	r2, r3, #4
 8006a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d116      	bne.n	8006a4c <USB_EPStartXfer+0xf64>
 8006a1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a48:	801a      	strh	r2, [r3, #0]
 8006a4a:	e06b      	b.n	8006b24 <USB_EPStartXfer+0x103c>
 8006a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a50:	2b3e      	cmp	r3, #62	; 0x3e
 8006a52:	d818      	bhi.n	8006a86 <USB_EPStartXfer+0xf9e>
 8006a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a58:	085b      	lsrs	r3, r3, #1
 8006a5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <USB_EPStartXfer+0xf8c>
 8006a6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a6e:	3301      	adds	r3, #1
 8006a70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	029b      	lsls	r3, r3, #10
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a82:	801a      	strh	r2, [r3, #0]
 8006a84:	e04e      	b.n	8006b24 <USB_EPStartXfer+0x103c>
 8006a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d104      	bne.n	8006aa6 <USB_EPStartXfer+0xfbe>
 8006a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006aa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	029b      	lsls	r3, r3, #10
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	e030      	b.n	8006b24 <USB_EPStartXfer+0x103c>
 8006ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d128      	bne.n	8006b24 <USB_EPStartXfer+0x103c>
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006af6:	4413      	add	r3, r2
 8006af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	011a      	lsls	r2, r3, #4
 8006b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b0e:	4413      	add	r3, r2
 8006b10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	891b      	ldrh	r3, [r3, #8]
 8006b30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6959      	ldr	r1, [r3, #20]
 8006b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b4a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b4e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b52:	6800      	ldr	r0, [r0, #0]
 8006b54:	f000 ff3e 	bl	80079d4 <USB_WritePMA>
          ep->xfer_buff += len;
 8006b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b68:	441a      	add	r2, r3
 8006b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d90f      	bls.n	8006bb2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6a1a      	ldr	r2, [r3, #32]
 8006b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	621a      	str	r2, [r3, #32]
 8006bb0:	e00e      	b.n	8006bd0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80cc 	beq.w	8006d72 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d178      	bne.n	8006cea <USB_EPStartXfer+0x1202>
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	011a      	lsls	r2, r3, #4
 8006c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c34:	4413      	add	r3, r2
 8006c36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d116      	bne.n	8006c74 <USB_EPStartXfer+0x118c>
 8006c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c58:	801a      	strh	r2, [r3, #0]
 8006c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c70:	801a      	strh	r2, [r3, #0]
 8006c72:	e064      	b.n	8006d3e <USB_EPStartXfer+0x1256>
 8006c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c78:	2b3e      	cmp	r3, #62	; 0x3e
 8006c7a:	d818      	bhi.n	8006cae <USB_EPStartXfer+0x11c6>
 8006c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d004      	beq.n	8006c9c <USB_EPStartXfer+0x11b4>
 8006c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c96:	3301      	adds	r3, #1
 8006c98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	029b      	lsls	r3, r3, #10
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006caa:	801a      	strh	r2, [r3, #0]
 8006cac:	e047      	b.n	8006d3e <USB_EPStartXfer+0x1256>
 8006cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <USB_EPStartXfer+0x11e6>
 8006cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	029b      	lsls	r3, r3, #10
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	e029      	b.n	8006d3e <USB_EPStartXfer+0x1256>
 8006cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	785b      	ldrb	r3, [r3, #1]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d121      	bne.n	8006d3e <USB_EPStartXfer+0x1256>
 8006cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d10:	4413      	add	r3, r2
 8006d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	011a      	lsls	r2, r3, #4
 8006d24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d28:	4413      	add	r3, r2
 8006d2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	895b      	ldrh	r3, [r3, #10]
 8006d4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6959      	ldr	r1, [r3, #20]
 8006d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d6c:	6800      	ldr	r0, [r0, #0]
 8006d6e:	f000 fe31 	bl	80079d4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d94:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da0:	8013      	strh	r3, [r2, #0]
 8006da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006daa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006dae:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006db2:	8812      	ldrh	r2, [r2, #0]
 8006db4:	f082 0210 	eor.w	r2, r2, #16
 8006db8:	801a      	strh	r2, [r3, #0]
 8006dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dbe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006dc2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006dc6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006dca:	8812      	ldrh	r2, [r2, #0]
 8006dcc:	f082 0220 	eor.w	r2, r2, #32
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	8013      	strh	r3, [r2, #0]
 8006e0a:	f000 bc9f 	b.w	800774c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	7b1b      	ldrb	r3, [r3, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f040 80ae 	bne.w	8006f7c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d917      	bls.n	8006e6c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	699a      	ldr	r2, [r3, #24]
 8006e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e5c:	1ad2      	subs	r2, r2, r3
 8006e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	619a      	str	r2, [r3, #24]
 8006e6a:	e00e      	b.n	8006e8a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2200      	movs	r2, #0
 8006e88:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006eae:	4413      	add	r3, r2
 8006eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	011a      	lsls	r2, r3, #4
 8006ec2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d116      	bne.n	8006f06 <USB_EPStartXfer+0x141e>
 8006ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006eea:	801a      	strh	r2, [r3, #0]
 8006eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	e3e8      	b.n	80076d8 <USB_EPStartXfer+0x1bf0>
 8006f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f0c:	d818      	bhi.n	8006f40 <USB_EPStartXfer+0x1458>
 8006f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <USB_EPStartXfer+0x1446>
 8006f24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	029b      	lsls	r3, r3, #10
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f3c:	801a      	strh	r2, [r3, #0]
 8006f3e:	e3cb      	b.n	80076d8 <USB_EPStartXfer+0x1bf0>
 8006f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d104      	bne.n	8006f60 <USB_EPStartXfer+0x1478>
 8006f56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	029b      	lsls	r3, r3, #10
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f78:	801a      	strh	r2, [r3, #0]
 8006f7a:	e3ad      	b.n	80076d8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	78db      	ldrb	r3, [r3, #3]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	f040 8200 	bne.w	800738e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f040 8091 	bne.w	80070c2 <USB_EPStartXfer+0x15da>
 8006fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	011a      	lsls	r2, r3, #4
 8006fd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006fdc:	4413      	add	r3, r2
 8006fde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d116      	bne.n	8007024 <USB_EPStartXfer+0x153c>
 8006ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	e083      	b.n	800712c <USB_EPStartXfer+0x1644>
 8007024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	2b3e      	cmp	r3, #62	; 0x3e
 8007032:	d820      	bhi.n	8007076 <USB_EPStartXfer+0x158e>
 8007034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <USB_EPStartXfer+0x157c>
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705e:	3301      	adds	r3, #1
 8007060:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007068:	b29b      	uxth	r3, r3
 800706a:	029b      	lsls	r3, r3, #10
 800706c:	b29a      	uxth	r2, r3
 800706e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	e05a      	b.n	800712c <USB_EPStartXfer+0x1644>
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <USB_EPStartXfer+0x15be>
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a0:	3b01      	subs	r3, #1
 80070a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	029b      	lsls	r3, r3, #10
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	e034      	b.n	800712c <USB_EPStartXfer+0x1644>
 80070c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	785b      	ldrb	r3, [r3, #1]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d12c      	bne.n	800712c <USB_EPStartXfer+0x1644>
 80070d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80070e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070f6:	4413      	add	r3, r2
 80070f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80070fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	011a      	lsls	r2, r3, #4
 800710a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800710e:	4413      	add	r3, r2
 8007110:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	b29a      	uxth	r2, r3
 8007126:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800713a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f040 8091 	bne.w	800726e <USB_EPStartXfer+0x1786>
 800714c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007150:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800715a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007168:	b29b      	uxth	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007170:	4413      	add	r3, r2
 8007172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	011a      	lsls	r2, r3, #4
 8007184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007188:	4413      	add	r3, r2
 800718a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800718e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d116      	bne.n	80071d0 <USB_EPStartXfer+0x16e8>
 80071a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071b4:	801a      	strh	r2, [r3, #0]
 80071b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071cc:	801a      	strh	r2, [r3, #0]
 80071ce:	e07c      	b.n	80072ca <USB_EPStartXfer+0x17e2>
 80071d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b3e      	cmp	r3, #62	; 0x3e
 80071de:	d820      	bhi.n	8007222 <USB_EPStartXfer+0x173a>
 80071e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d004      	beq.n	8007210 <USB_EPStartXfer+0x1728>
 8007206:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800720a:	3301      	adds	r3, #1
 800720c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007210:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007214:	b29b      	uxth	r3, r3
 8007216:	029b      	lsls	r3, r3, #10
 8007218:	b29a      	uxth	r2, r3
 800721a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800721e:	801a      	strh	r2, [r3, #0]
 8007220:	e053      	b.n	80072ca <USB_EPStartXfer+0x17e2>
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <USB_EPStartXfer+0x176a>
 8007248:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800724c:	3b01      	subs	r3, #1
 800724e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007252:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007256:	b29b      	uxth	r3, r3
 8007258:	029b      	lsls	r3, r3, #10
 800725a:	b29b      	uxth	r3, r3
 800725c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007264:	b29a      	uxth	r2, r3
 8007266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800726a:	801a      	strh	r2, [r3, #0]
 800726c:	e02d      	b.n	80072ca <USB_EPStartXfer+0x17e2>
 800726e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d125      	bne.n	80072ca <USB_EPStartXfer+0x17e2>
 800727e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728c:	b29b      	uxth	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007294:	4413      	add	r3, r2
 8007296:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800729a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	011a      	lsls	r2, r3, #4
 80072a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072ac:	4413      	add	r3, r2
 80072ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072c8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80072ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 81fe 	beq.w	80076d8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80072dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072fc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <USB_EPStartXfer+0x182c>
 8007308:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800730c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10d      	bne.n	8007330 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007314:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800731c:	2b00      	cmp	r3, #0
 800731e:	f040 81db 	bne.w	80076d8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007322:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	f040 81d4 	bne.w	80076d8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007356:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800735a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007384:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007388:	b29b      	uxth	r3, r3
 800738a:	8013      	strh	r3, [r2, #0]
 800738c:	e1a4      	b.n	80076d8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800738e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	78db      	ldrb	r3, [r3, #3]
 800739a:	2b01      	cmp	r3, #1
 800739c:	f040 819a 	bne.w	80076d4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80073a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d917      	bls.n	80073ec <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80073bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80073cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699a      	ldr	r2, [r3, #24]
 80073d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073dc:	1ad2      	subs	r2, r2, r3
 80073de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	619a      	str	r2, [r3, #24]
 80073ea:	e00e      	b.n	800740a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80073ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80073fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2200      	movs	r2, #0
 8007408:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800740a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d178      	bne.n	800750c <USB_EPStartXfer+0x1a24>
 800741a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007436:	b29b      	uxth	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800743e:	4413      	add	r3, r2
 8007440:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	011a      	lsls	r2, r3, #4
 8007452:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007456:	4413      	add	r3, r2
 8007458:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800745c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d116      	bne.n	8007496 <USB_EPStartXfer+0x19ae>
 8007468:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007474:	b29a      	uxth	r2, r3
 8007476:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800747a:	801a      	strh	r2, [r3, #0]
 800747c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800748c:	b29a      	uxth	r2, r3
 800748e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007492:	801a      	strh	r2, [r3, #0]
 8007494:	e06b      	b.n	800756e <USB_EPStartXfer+0x1a86>
 8007496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800749a:	2b3e      	cmp	r3, #62	; 0x3e
 800749c:	d818      	bhi.n	80074d0 <USB_EPStartXfer+0x19e8>
 800749e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <USB_EPStartXfer+0x19d6>
 80074b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074b8:	3301      	adds	r3, #1
 80074ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	029b      	lsls	r3, r3, #10
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074cc:	801a      	strh	r2, [r3, #0]
 80074ce:	e04e      	b.n	800756e <USB_EPStartXfer+0x1a86>
 80074d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074de:	f003 031f 	and.w	r3, r3, #31
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <USB_EPStartXfer+0x1a08>
 80074e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074ea:	3b01      	subs	r3, #1
 80074ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	029b      	lsls	r3, r3, #10
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007502:	b29a      	uxth	r2, r3
 8007504:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007508:	801a      	strh	r2, [r3, #0]
 800750a:	e030      	b.n	800756e <USB_EPStartXfer+0x1a86>
 800750c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d128      	bne.n	800756e <USB_EPStartXfer+0x1a86>
 800751c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007520:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800752a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007538:	b29b      	uxth	r3, r3
 800753a:	461a      	mov	r2, r3
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007540:	4413      	add	r3, r2
 8007542:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	011a      	lsls	r2, r3, #4
 8007554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007558:	4413      	add	r3, r2
 800755a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800755e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007566:	b29a      	uxth	r2, r3
 8007568:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800757c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d178      	bne.n	800767e <USB_EPStartXfer+0x1b96>
 800758c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800759a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	461a      	mov	r2, r3
 80075ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b0:	4413      	add	r3, r2
 80075b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	011a      	lsls	r2, r3, #4
 80075c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c8:	4413      	add	r3, r2
 80075ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d116      	bne.n	8007608 <USB_EPStartXfer+0x1b20>
 80075da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fe:	b29a      	uxth	r2, r3
 8007600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007604:	801a      	strh	r2, [r3, #0]
 8007606:	e067      	b.n	80076d8 <USB_EPStartXfer+0x1bf0>
 8007608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760c:	2b3e      	cmp	r3, #62	; 0x3e
 800760e:	d818      	bhi.n	8007642 <USB_EPStartXfer+0x1b5a>
 8007610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007614:	085b      	lsrs	r3, r3, #1
 8007616:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800761a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d004      	beq.n	8007630 <USB_EPStartXfer+0x1b48>
 8007626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800762a:	3301      	adds	r3, #1
 800762c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007630:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007634:	b29b      	uxth	r3, r3
 8007636:	029b      	lsls	r3, r3, #10
 8007638:	b29a      	uxth	r2, r3
 800763a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	e04a      	b.n	80076d8 <USB_EPStartXfer+0x1bf0>
 8007642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800764c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007650:	f003 031f 	and.w	r3, r3, #31
 8007654:	2b00      	cmp	r3, #0
 8007656:	d104      	bne.n	8007662 <USB_EPStartXfer+0x1b7a>
 8007658:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800765c:	3b01      	subs	r3, #1
 800765e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007666:	b29b      	uxth	r3, r3
 8007668:	029b      	lsls	r3, r3, #10
 800766a:	b29b      	uxth	r3, r3
 800766c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007674:	b29a      	uxth	r2, r3
 8007676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800767a:	801a      	strh	r2, [r3, #0]
 800767c:	e02c      	b.n	80076d8 <USB_EPStartXfer+0x1bf0>
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d124      	bne.n	80076d8 <USB_EPStartXfer+0x1bf0>
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800769c:	b29b      	uxth	r3, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a4:	4413      	add	r3, r2
 80076a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	011a      	lsls	r2, r3, #4
 80076b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076bc:	4413      	add	r3, r2
 80076be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d0:	801a      	strh	r2, [r3, #0]
 80076d2:	e001      	b.n	80076d8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e03a      	b.n	800774e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007702:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007706:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800770a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800770e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007712:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007716:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800771a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	441a      	add	r2, r3
 8007734:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007748:	b29b      	uxth	r3, r3
 800774a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	785b      	ldrb	r3, [r3, #1]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d020      	beq.n	80077ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007780:	81bb      	strh	r3, [r7, #12]
 8007782:	89bb      	ldrh	r3, [r7, #12]
 8007784:	f083 0310 	eor.w	r3, r3, #16
 8007788:	81bb      	strh	r3, [r7, #12]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	441a      	add	r2, r3
 8007794:	89bb      	ldrh	r3, [r7, #12]
 8007796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800779a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800779e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	8013      	strh	r3, [r2, #0]
 80077aa:	e01f      	b.n	80077ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c2:	81fb      	strh	r3, [r7, #14]
 80077c4:	89fb      	ldrh	r3, [r7, #14]
 80077c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077ca:	81fb      	strh	r3, [r7, #14]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	441a      	add	r2, r3
 80077d6:	89fb      	ldrh	r3, [r7, #14]
 80077d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bc80      	pop	{r7}
 80077f6:	4770      	bx	lr

080077f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	7b1b      	ldrb	r3, [r3, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	f040 809d 	bne.w	8007946 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d04c      	beq.n	80078ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	823b      	strh	r3, [r7, #16]
 8007822:	8a3b      	ldrh	r3, [r7, #16]
 8007824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01b      	beq.n	8007864 <USB_EPClearStall+0x6c>
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29b      	uxth	r3, r3
 800783a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	81fb      	strh	r3, [r7, #14]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	441a      	add	r2, r3
 800784e:	89fb      	ldrh	r3, [r7, #14]
 8007850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800785c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007860:	b29b      	uxth	r3, r3
 8007862:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	78db      	ldrb	r3, [r3, #3]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d06c      	beq.n	8007946 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007882:	81bb      	strh	r3, [r7, #12]
 8007884:	89bb      	ldrh	r3, [r7, #12]
 8007886:	f083 0320 	eor.w	r3, r3, #32
 800788a:	81bb      	strh	r3, [r7, #12]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	441a      	add	r2, r3
 8007896:	89bb      	ldrh	r3, [r7, #12]
 8007898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800789c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	8013      	strh	r3, [r2, #0]
 80078ac:	e04b      	b.n	8007946 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	82fb      	strh	r3, [r7, #22]
 80078bc:	8afb      	ldrh	r3, [r7, #22]
 80078be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01b      	beq.n	80078fe <USB_EPClearStall+0x106>
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078dc:	82bb      	strh	r3, [r7, #20]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	441a      	add	r2, r3
 80078e8:	8abb      	ldrh	r3, [r7, #20]
 80078ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007914:	827b      	strh	r3, [r7, #18]
 8007916:	8a7b      	ldrh	r3, [r7, #18]
 8007918:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800791c:	827b      	strh	r3, [r7, #18]
 800791e:	8a7b      	ldrh	r3, [r7, #18]
 8007920:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007924:	827b      	strh	r3, [r7, #18]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	441a      	add	r2, r3
 8007930:	8a7b      	ldrh	r3, [r7, #18]
 8007932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800793a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800793e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007942:	b29b      	uxth	r3, r3
 8007944:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	371c      	adds	r7, #28
 800794c:	46bd      	mov	sp, r7
 800794e:	bc80      	pop	{r7}
 8007950:	4770      	bx	lr

08007952 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d103      	bne.n	800796c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2280      	movs	r2, #128	; 0x80
 8007968:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr

08007978 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	bc80      	pop	{r7}
 800798a:	4770      	bx	lr

0800798c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr

080079a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80079b2:	68fb      	ldr	r3, [r7, #12]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr

080079be <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b08d      	sub	sp, #52	; 0x34
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4611      	mov	r1, r2
 80079e0:	461a      	mov	r2, r3
 80079e2:	460b      	mov	r3, r1
 80079e4:	80fb      	strh	r3, [r7, #6]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80079ea:	88bb      	ldrh	r3, [r7, #4]
 80079ec:	3301      	adds	r3, #1
 80079ee:	085b      	lsrs	r3, r3, #1
 80079f0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079fa:	88fb      	ldrh	r3, [r7, #6]
 80079fc:	005a      	lsls	r2, r3, #1
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a0c:	e01e      	b.n	8007a4c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	3301      	adds	r3, #1
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	3302      	adds	r3, #2
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	3302      	adds	r3, #2
 8007a3e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	3301      	adds	r3, #1
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1dd      	bne.n	8007a0e <USB_WritePMA+0x3a>
  }
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	3734      	adds	r7, #52	; 0x34
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bc80      	pop	{r7}
 8007a5c:	4770      	bx	lr

08007a5e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b08b      	sub	sp, #44	; 0x2c
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	80fb      	strh	r3, [r7, #6]
 8007a70:	4613      	mov	r3, r2
 8007a72:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a74:	88bb      	ldrh	r3, [r7, #4]
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	005a      	lsls	r2, r3, #1
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a90:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
 8007a96:	e01b      	b.n	8007ad0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	0a1b      	lsrs	r3, r3, #8
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	3302      	adds	r3, #2
 8007ac8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	3b01      	subs	r3, #1
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e0      	bne.n	8007a98 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007ad6:	88bb      	ldrh	r3, [r7, #4]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d007      	beq.n	8007af2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	701a      	strb	r2, [r3, #0]
  }
}
 8007af2:	bf00      	nop
 8007af4:	372c      	adds	r7, #44	; 0x2c
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr

08007afc <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007b0c:	2340      	movs	r3, #64	; 0x40
 8007b0e:	2203      	movs	r2, #3
 8007b10:	2181      	movs	r1, #129	; 0x81
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 fd47 	bl	80095a6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007b1e:	2340      	movs	r3, #64	; 0x40
 8007b20:	2203      	movs	r2, #3
 8007b22:	2101      	movs	r1, #1
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fd3e 	bl	80095a6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007b32:	2054      	movs	r0, #84	; 0x54
 8007b34:	f001 fe4c 	bl	80097d0 <USBD_static_malloc>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	73fb      	strb	r3, [r7, #15]
 8007b4e:	e012      	b.n	8007b76 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	2340      	movs	r3, #64	; 0x40
 8007b6e:	2101      	movs	r1, #1
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 fe09 	bl	8009788 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007b8c:	2181      	movs	r1, #129	; 0x81
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 fd2f 	bl	80095f2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 fd28 	bl	80095f2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 fe0f 	bl	80097e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b088      	sub	sp, #32
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bec:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d051      	beq.n	8007cae <USBD_CUSTOM_HID_Setup+0xd2>
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	f040 80d8 	bne.w	8007dc0 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	3b02      	subs	r3, #2
 8007c16:	2b09      	cmp	r3, #9
 8007c18:	d841      	bhi.n	8007c9e <USBD_CUSTOM_HID_Setup+0xc2>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <USBD_CUSTOM_HID_Setup+0x44>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c79 	.word	0x08007c79
 8007c24:	08007c57 	.word	0x08007c57
 8007c28:	08007c9f 	.word	0x08007c9f
 8007c2c:	08007c9f 	.word	0x08007c9f
 8007c30:	08007c9f 	.word	0x08007c9f
 8007c34:	08007c9f 	.word	0x08007c9f
 8007c38:	08007c9f 	.word	0x08007c9f
 8007c3c:	08007c89 	.word	0x08007c89
 8007c40:	08007c67 	.word	0x08007c67
 8007c44:	08007c49 	.word	0x08007c49
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	885b      	ldrh	r3, [r3, #2]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8007c54:	e02a      	b.n	8007cac <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	3340      	adds	r3, #64	; 0x40
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 f999 	bl	8008f96 <USBD_CtlSendData>
          break;
 8007c64:	e022      	b.n	8007cac <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	885b      	ldrh	r3, [r3, #2]
 8007c6a:	0a1b      	lsrs	r3, r3, #8
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8007c76:	e019      	b.n	8007cac <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	3344      	adds	r3, #68	; 0x44
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 f988 	bl	8008f96 <USBD_CtlSendData>
          break;
 8007c86:	e011      	b.n	8007cac <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007c8e:	6939      	ldr	r1, [r7, #16]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	88db      	ldrh	r3, [r3, #6]
 8007c94:	461a      	mov	r2, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 f9ab 	bl	8008ff2 <USBD_CtlPrepareRx>
          break;
 8007c9c:	e006      	b.n	8007cac <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 f90e 	bl	8008ec2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8007caa:	bf00      	nop
      }
      break;
 8007cac:	e08f      	b.n	8007dce <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	2b0b      	cmp	r3, #11
 8007cb4:	d87c      	bhi.n	8007db0 <USBD_CUSTOM_HID_Setup+0x1d4>
 8007cb6:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <USBD_CUSTOM_HID_Setup+0xe0>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007ced 	.word	0x08007ced
 8007cc0:	08007db1 	.word	0x08007db1
 8007cc4:	08007db1 	.word	0x08007db1
 8007cc8:	08007db1 	.word	0x08007db1
 8007ccc:	08007db1 	.word	0x08007db1
 8007cd0:	08007db1 	.word	0x08007db1
 8007cd4:	08007d15 	.word	0x08007d15
 8007cd8:	08007db1 	.word	0x08007db1
 8007cdc:	08007db1 	.word	0x08007db1
 8007ce0:	08007db1 	.word	0x08007db1
 8007ce4:	08007d63 	.word	0x08007d63
 8007ce8:	08007d8b 	.word	0x08007d8b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d107      	bne.n	8007d06 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007cf6:	f107 030e 	add.w	r3, r7, #14
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f001 f949 	bl	8008f96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d04:	e05b      	b.n	8007dbe <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 f8da 	bl	8008ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d0e:	2302      	movs	r3, #2
 8007d10:	75fb      	strb	r3, [r7, #23]
          break;
 8007d12:	e054      	b.n	8007dbe <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	885b      	ldrh	r3, [r3, #2]
 8007d18:	0a1b      	lsrs	r3, r3, #8
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2b22      	cmp	r3, #34	; 0x22
 8007d1e:	d10b      	bne.n	8007d38 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	88db      	ldrh	r3, [r3, #6]
 8007d24:	2b1d      	cmp	r3, #29
 8007d26:	bf28      	it	cs
 8007d28:	231d      	movcs	r3, #29
 8007d2a:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	61bb      	str	r3, [r7, #24]
 8007d36:	e00d      	b.n	8007d54 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	885b      	ldrh	r3, [r3, #2]
 8007d3c:	0a1b      	lsrs	r3, r3, #8
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b21      	cmp	r3, #33	; 0x21
 8007d42:	d107      	bne.n	8007d54 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8007d46:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	88db      	ldrh	r3, [r3, #6]
 8007d4c:	2b09      	cmp	r3, #9
 8007d4e:	bf28      	it	cs
 8007d50:	2309      	movcs	r3, #9
 8007d52:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8007d54:	8bfb      	ldrh	r3, [r7, #30]
 8007d56:	461a      	mov	r2, r3
 8007d58:	69b9      	ldr	r1, [r7, #24]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 f91b 	bl	8008f96 <USBD_CtlSendData>
          break;
 8007d60:	e02d      	b.n	8007dbe <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d107      	bne.n	8007d7c <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	3348      	adds	r3, #72	; 0x48
 8007d70:	2201      	movs	r2, #1
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 f90e 	bl	8008f96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d7a:	e020      	b.n	8007dbe <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 f89f 	bl	8008ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d84:	2302      	movs	r3, #2
 8007d86:	75fb      	strb	r3, [r7, #23]
          break;
 8007d88:	e019      	b.n	8007dbe <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d106      	bne.n	8007da2 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	885b      	ldrh	r3, [r3, #2]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007da0:	e00d      	b.n	8007dbe <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 f88c 	bl	8008ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007daa:	2302      	movs	r3, #2
 8007dac:	75fb      	strb	r3, [r7, #23]
          break;
 8007dae:	e006      	b.n	8007dbe <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 f885 	bl	8008ec2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007db8:	2302      	movs	r3, #2
 8007dba:	75fb      	strb	r3, [r7, #23]
          break;
 8007dbc:	bf00      	nop
      }
      break;
 8007dbe:	e006      	b.n	8007dce <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 f87d 	bl	8008ec2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	75fb      	strb	r3, [r7, #23]
      break;
 8007dcc:	bf00      	nop
  }
  return ret;
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	200000d0 	.word	0x200000d0

08007ddc <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4613      	mov	r3, r2
 8007de8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d111      	bne.n	8007e20 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10a      	bne.n	8007e1c <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	2181      	movs	r1, #129	; 0x81
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f001 fc94 	bl	8009742 <USBD_LL_Transmit>
 8007e1a:	e001      	b.n	8007e20 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e000      	b.n	8007e22 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2229      	movs	r2, #41	; 0x29
 8007e38:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8007e3a:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	2000004c 	.word	0x2000004c

08007e4c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2229      	movs	r2, #41	; 0x29
 8007e58:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8007e5a:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bc80      	pop	{r7}
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20000078 	.word	0x20000078

08007e6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2229      	movs	r2, #41	; 0x29
 8007e78:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007e7a:	4b03      	ldr	r3, [pc, #12]	; (8007e88 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	200000a4 	.word	0x200000a4

08007e8c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr

08007eb0 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec2:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	4610      	mov	r0, r2
 8007ed0:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	2340      	movs	r3, #64	; 0x40
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 fc55 	bl	8009788 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d109      	bne.n	8007f14 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007f2e:	4b03      	ldr	r3, [pc, #12]	; (8007f3c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	200000dc 	.word	0x200000dc

08007f40 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f80:	2302      	movs	r3, #2
 8007f82:	e01a      	b.n	8007fba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	79fa      	ldrb	r2, [r7, #7]
 8007fb0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f001 fa8c 	bl	80094d0 <USBD_LL_Init>

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b085      	sub	sp, #20
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d006      	beq.n	8007fe4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]
 8007fe2:	e001      	b.n	8007fe8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr

08007ff4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 fab7 	bl	8009570 <USBD_LL_Start>

  return USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr

08008020 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800802c:	2302      	movs	r3, #2
 800802e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00c      	beq.n	8008054 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	78fa      	ldrb	r2, [r7, #3]
 8008044:	4611      	mov	r1, r2
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	4611      	mov	r1, r2
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fed7 	bl	8008e4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80080b8:	f003 031f 	and.w	r3, r3, #31
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d016      	beq.n	80080ee <USBD_LL_SetupStage+0x6a>
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d81c      	bhi.n	80080fe <USBD_LL_SetupStage+0x7a>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <USBD_LL_SetupStage+0x4a>
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d008      	beq.n	80080de <USBD_LL_SetupStage+0x5a>
 80080cc:	e017      	b.n	80080fe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f9ca 	bl	8008470 <USBD_StdDevReq>
      break;
 80080dc:	e01a      	b.n	8008114 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa2c 	bl	8008544 <USBD_StdItfReq>
      break;
 80080ec:	e012      	b.n	8008114 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fa6c 	bl	80085d4 <USBD_StdEPReq>
      break;
 80080fc:	e00a      	b.n	8008114 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008104:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008108:	b2db      	uxtb	r3, r3
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 fa8f 	bl	8009630 <USBD_LL_StallEP>
      break;
 8008112:	bf00      	nop
  }

  return USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b086      	sub	sp, #24
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	460b      	mov	r3, r1
 8008128:	607a      	str	r2, [r7, #4]
 800812a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d14b      	bne.n	80081ca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008138:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008140:	2b03      	cmp	r3, #3
 8008142:	d134      	bne.n	80081ae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	429a      	cmp	r2, r3
 800814e:	d919      	bls.n	8008184 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	68da      	ldr	r2, [r3, #12]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	1ad2      	subs	r2, r2, r3
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008166:	429a      	cmp	r2, r3
 8008168:	d203      	bcs.n	8008172 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800816e:	b29b      	uxth	r3, r3
 8008170:	e002      	b.n	8008178 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008176:	b29b      	uxth	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 ff56 	bl	800902e <USBD_CtlContinueRx>
 8008182:	e038      	b.n	80081f6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00a      	beq.n	80081a6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008196:	2b03      	cmp	r3, #3
 8008198:	d105      	bne.n	80081a6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 ff53 	bl	8009052 <USBD_CtlSendStatus>
 80081ac:	e023      	b.n	80081f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081b4:	2b05      	cmp	r3, #5
 80081b6:	d11e      	bne.n	80081f6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80081c0:	2100      	movs	r1, #0
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f001 fa34 	bl	8009630 <USBD_LL_StallEP>
 80081c8:	e015      	b.n	80081f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00d      	beq.n	80081f2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d108      	bne.n	80081f2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	7afa      	ldrb	r2, [r7, #11]
 80081ea:	4611      	mov	r1, r2
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	4798      	blx	r3
 80081f0:	e001      	b.n	80081f6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081f2:	2302      	movs	r3, #2
 80081f4:	e000      	b.n	80081f8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	460b      	mov	r3, r1
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800820e:	7afb      	ldrb	r3, [r7, #11]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d17f      	bne.n	8008314 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3314      	adds	r3, #20
 8008218:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008220:	2b02      	cmp	r3, #2
 8008222:	d15c      	bne.n	80082de <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	429a      	cmp	r2, r3
 800822e:	d915      	bls.n	800825c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	1ad2      	subs	r2, r2, r3
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	b29b      	uxth	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 fec0 	bl	8008fce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800824e:	2300      	movs	r3, #0
 8008250:	2200      	movs	r2, #0
 8008252:	2100      	movs	r1, #0
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f001 fa97 	bl	8009788 <USBD_LL_PrepareReceive>
 800825a:	e04e      	b.n	80082fa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	6912      	ldr	r2, [r2, #16]
 8008264:	fbb3 f1f2 	udiv	r1, r3, r2
 8008268:	fb01 f202 	mul.w	r2, r1, r2
 800826c:	1a9b      	subs	r3, r3, r2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d11c      	bne.n	80082ac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800827a:	429a      	cmp	r2, r3
 800827c:	d316      	bcc.n	80082ac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008288:	429a      	cmp	r2, r3
 800828a:	d20f      	bcs.n	80082ac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800828c:	2200      	movs	r2, #0
 800828e:	2100      	movs	r1, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fe9c 	bl	8008fce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800829e:	2300      	movs	r3, #0
 80082a0:	2200      	movs	r2, #0
 80082a2:	2100      	movs	r1, #0
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f001 fa6f 	bl	8009788 <USBD_LL_PrepareReceive>
 80082aa:	e026      	b.n	80082fa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d105      	bne.n	80082ce <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082ce:	2180      	movs	r1, #128	; 0x80
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f001 f9ad 	bl	8009630 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fece 	bl	8009078 <USBD_CtlReceiveStatus>
 80082dc:	e00d      	b.n	80082fa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d004      	beq.n	80082f2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d103      	bne.n	80082fa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082f2:	2180      	movs	r1, #128	; 0x80
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f001 f99b 	bl	8009630 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008300:	2b01      	cmp	r3, #1
 8008302:	d11d      	bne.n	8008340 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f7ff fe81 	bl	800800c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008312:	e015      	b.n	8008340 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00d      	beq.n	800833c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008326:	2b03      	cmp	r3, #3
 8008328:	d108      	bne.n	800833c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	7afa      	ldrb	r2, [r7, #11]
 8008334:	4611      	mov	r1, r2
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	4798      	blx	r3
 800833a:	e001      	b.n	8008340 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800833c:	2302      	movs	r3, #2
 800833e:	e000      	b.n	8008342 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008352:	2340      	movs	r3, #64	; 0x40
 8008354:	2200      	movs	r2, #0
 8008356:	2100      	movs	r1, #0
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 f924 	bl	80095a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2240      	movs	r2, #64	; 0x40
 800836a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800836e:	2340      	movs	r3, #64	; 0x40
 8008370:	2200      	movs	r2, #0
 8008372:	2180      	movs	r1, #128	; 0x80
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 f916 	bl	80095a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2240      	movs	r2, #64	; 0x40
 8008384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6852      	ldr	r2, [r2, #4]
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	4611      	mov	r1, r2
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	4798      	blx	r3
  }

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bc80      	pop	{r7}
 80083e8:	4770      	bx	lr

080083ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2204      	movs	r2, #4
 8008402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr

08008412 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008420:	2b04      	cmp	r3, #4
 8008422:	d105      	bne.n	8008430 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	bc80      	pop	{r7}
 800843a:	4770      	bx	lr

0800843c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800844a:	2b03      	cmp	r3, #3
 800844c:	d10b      	bne.n	8008466 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d005      	beq.n	8008466 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008486:	2b40      	cmp	r3, #64	; 0x40
 8008488:	d005      	beq.n	8008496 <USBD_StdDevReq+0x26>
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d84f      	bhi.n	800852e <USBD_StdDevReq+0xbe>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d009      	beq.n	80084a6 <USBD_StdDevReq+0x36>
 8008492:	2b20      	cmp	r3, #32
 8008494:	d14b      	bne.n	800852e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	4798      	blx	r3
      break;
 80084a4:	e048      	b.n	8008538 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	785b      	ldrb	r3, [r3, #1]
 80084aa:	2b09      	cmp	r3, #9
 80084ac:	d839      	bhi.n	8008522 <USBD_StdDevReq+0xb2>
 80084ae:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <USBD_StdDevReq+0x44>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	08008505 	.word	0x08008505
 80084b8:	08008519 	.word	0x08008519
 80084bc:	08008523 	.word	0x08008523
 80084c0:	0800850f 	.word	0x0800850f
 80084c4:	08008523 	.word	0x08008523
 80084c8:	080084e7 	.word	0x080084e7
 80084cc:	080084dd 	.word	0x080084dd
 80084d0:	08008523 	.word	0x08008523
 80084d4:	080084fb 	.word	0x080084fb
 80084d8:	080084f1 	.word	0x080084f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f9dc 	bl	800889c <USBD_GetDescriptor>
          break;
 80084e4:	e022      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fb3f 	bl	8008b6c <USBD_SetAddress>
          break;
 80084ee:	e01d      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fb7e 	bl	8008bf4 <USBD_SetConfig>
          break;
 80084f8:	e018      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fc07 	bl	8008d10 <USBD_GetConfig>
          break;
 8008502:	e013      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fc37 	bl	8008d7a <USBD_GetStatus>
          break;
 800850c:	e00e      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fc65 	bl	8008de0 <USBD_SetFeature>
          break;
 8008516:	e009      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fc74 	bl	8008e08 <USBD_ClrFeature>
          break;
 8008520:	e004      	b.n	800852c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fccc 	bl	8008ec2 <USBD_CtlError>
          break;
 800852a:	bf00      	nop
      }
      break;
 800852c:	e004      	b.n	8008538 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fcc6 	bl	8008ec2 <USBD_CtlError>
      break;
 8008536:	bf00      	nop
  }

  return ret;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop

08008544 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d005      	beq.n	800856a <USBD_StdItfReq+0x26>
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	d82e      	bhi.n	80085c0 <USBD_StdItfReq+0x7c>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <USBD_StdItfReq+0x26>
 8008566:	2b20      	cmp	r3, #32
 8008568:	d12a      	bne.n	80085c0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008570:	3b01      	subs	r3, #1
 8008572:	2b02      	cmp	r3, #2
 8008574:	d81d      	bhi.n	80085b2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	889b      	ldrh	r3, [r3, #4]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b01      	cmp	r3, #1
 800857e:	d813      	bhi.n	80085a8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	4798      	blx	r3
 800858e:	4603      	mov	r3, r0
 8008590:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d110      	bne.n	80085bc <USBD_StdItfReq+0x78>
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10d      	bne.n	80085bc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fd56 	bl	8009052 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085a6:	e009      	b.n	80085bc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fc89 	bl	8008ec2 <USBD_CtlError>
          break;
 80085b0:	e004      	b.n	80085bc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fc84 	bl	8008ec2 <USBD_CtlError>
          break;
 80085ba:	e000      	b.n	80085be <USBD_StdItfReq+0x7a>
          break;
 80085bc:	bf00      	nop
      }
      break;
 80085be:	e004      	b.n	80085ca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fc7d 	bl	8008ec2 <USBD_CtlError>
      break;
 80085c8:	bf00      	nop
  }

  return USBD_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	889b      	ldrh	r3, [r3, #4]
 80085e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f0:	2b40      	cmp	r3, #64	; 0x40
 80085f2:	d007      	beq.n	8008604 <USBD_StdEPReq+0x30>
 80085f4:	2b40      	cmp	r3, #64	; 0x40
 80085f6:	f200 8146 	bhi.w	8008886 <USBD_StdEPReq+0x2b2>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00a      	beq.n	8008614 <USBD_StdEPReq+0x40>
 80085fe:	2b20      	cmp	r3, #32
 8008600:	f040 8141 	bne.w	8008886 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
      break;
 8008612:	e13d      	b.n	8008890 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800861c:	2b20      	cmp	r3, #32
 800861e:	d10a      	bne.n	8008636 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4798      	blx	r3
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	e12d      	b.n	8008892 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	2b03      	cmp	r3, #3
 800863c:	d007      	beq.n	800864e <USBD_StdEPReq+0x7a>
 800863e:	2b03      	cmp	r3, #3
 8008640:	f300 811b 	bgt.w	800887a <USBD_StdEPReq+0x2a6>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d072      	beq.n	800872e <USBD_StdEPReq+0x15a>
 8008648:	2b01      	cmp	r3, #1
 800864a:	d03a      	beq.n	80086c2 <USBD_StdEPReq+0xee>
 800864c:	e115      	b.n	800887a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008654:	2b02      	cmp	r3, #2
 8008656:	d002      	beq.n	800865e <USBD_StdEPReq+0x8a>
 8008658:	2b03      	cmp	r3, #3
 800865a:	d015      	beq.n	8008688 <USBD_StdEPReq+0xb4>
 800865c:	e02b      	b.n	80086b6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00c      	beq.n	800867e <USBD_StdEPReq+0xaa>
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b80      	cmp	r3, #128	; 0x80
 8008668:	d009      	beq.n	800867e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 ffde 	bl	8009630 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008674:	2180      	movs	r1, #128	; 0x80
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 ffda 	bl	8009630 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800867c:	e020      	b.n	80086c0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fc1e 	bl	8008ec2 <USBD_CtlError>
              break;
 8008686:	e01b      	b.n	80086c0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	885b      	ldrh	r3, [r3, #2]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10e      	bne.n	80086ae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008690:	7bbb      	ldrb	r3, [r7, #14]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00b      	beq.n	80086ae <USBD_StdEPReq+0xda>
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	2b80      	cmp	r3, #128	; 0x80
 800869a:	d008      	beq.n	80086ae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	88db      	ldrh	r3, [r3, #6]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 ffc1 	bl	8009630 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fccf 	bl	8009052 <USBD_CtlSendStatus>

              break;
 80086b4:	e004      	b.n	80086c0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fc02 	bl	8008ec2 <USBD_CtlError>
              break;
 80086be:	bf00      	nop
          }
          break;
 80086c0:	e0e0      	b.n	8008884 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d002      	beq.n	80086d2 <USBD_StdEPReq+0xfe>
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d015      	beq.n	80086fc <USBD_StdEPReq+0x128>
 80086d0:	e026      	b.n	8008720 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00c      	beq.n	80086f2 <USBD_StdEPReq+0x11e>
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b80      	cmp	r3, #128	; 0x80
 80086dc:	d009      	beq.n	80086f2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 ffa4 	bl	8009630 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086e8:	2180      	movs	r1, #128	; 0x80
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 ffa0 	bl	8009630 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086f0:	e01c      	b.n	800872c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fbe4 	bl	8008ec2 <USBD_CtlError>
              break;
 80086fa:	e017      	b.n	800872c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	885b      	ldrh	r3, [r3, #2]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d112      	bne.n	800872a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 ffab 	bl	800966e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fc9a 	bl	8009052 <USBD_CtlSendStatus>
              }
              break;
 800871e:	e004      	b.n	800872a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fbcd 	bl	8008ec2 <USBD_CtlError>
              break;
 8008728:	e000      	b.n	800872c <USBD_StdEPReq+0x158>
              break;
 800872a:	bf00      	nop
          }
          break;
 800872c:	e0aa      	b.n	8008884 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008734:	2b02      	cmp	r3, #2
 8008736:	d002      	beq.n	800873e <USBD_StdEPReq+0x16a>
 8008738:	2b03      	cmp	r3, #3
 800873a:	d032      	beq.n	80087a2 <USBD_StdEPReq+0x1ce>
 800873c:	e097      	b.n	800886e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d007      	beq.n	8008754 <USBD_StdEPReq+0x180>
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	2b80      	cmp	r3, #128	; 0x80
 8008748:	d004      	beq.n	8008754 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fbb8 	bl	8008ec2 <USBD_CtlError>
                break;
 8008752:	e091      	b.n	8008878 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008758:	2b00      	cmp	r3, #0
 800875a:	da0b      	bge.n	8008774 <USBD_StdEPReq+0x1a0>
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	3310      	adds	r3, #16
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4413      	add	r3, r2
 8008770:	3304      	adds	r3, #4
 8008772:	e00b      	b.n	800878c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	3304      	adds	r3, #4
 800878c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2202      	movs	r2, #2
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fbfb 	bl	8008f96 <USBD_CtlSendData>
              break;
 80087a0:	e06a      	b.n	8008878 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	da11      	bge.n	80087ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	f003 020f 	and.w	r2, r3, #15
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	440b      	add	r3, r1
 80087bc:	3318      	adds	r3, #24
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d117      	bne.n	80087f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fb7b 	bl	8008ec2 <USBD_CtlError>
                  break;
 80087cc:	e054      	b.n	8008878 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	f003 020f 	and.w	r2, r3, #15
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d104      	bne.n	80087f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fb68 	bl	8008ec2 <USBD_CtlError>
                  break;
 80087f2:	e041      	b.n	8008878 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	da0b      	bge.n	8008814 <USBD_StdEPReq+0x240>
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	3310      	adds	r3, #16
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4413      	add	r3, r2
 8008810:	3304      	adds	r3, #4
 8008812:	e00b      	b.n	800882c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	4413      	add	r3, r2
 800882a:	3304      	adds	r3, #4
 800882c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <USBD_StdEPReq+0x266>
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b80      	cmp	r3, #128	; 0x80
 8008838:	d103      	bne.n	8008842 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e00e      	b.n	8008860 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 ff30 	bl	80096ac <USBD_LL_IsStallEP>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2201      	movs	r2, #1
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	e002      	b.n	8008860 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2202      	movs	r2, #2
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fb95 	bl	8008f96 <USBD_CtlSendData>
              break;
 800886c:	e004      	b.n	8008878 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fb26 	bl	8008ec2 <USBD_CtlError>
              break;
 8008876:	bf00      	nop
          }
          break;
 8008878:	e004      	b.n	8008884 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fb20 	bl	8008ec2 <USBD_CtlError>
          break;
 8008882:	bf00      	nop
      }
      break;
 8008884:	e004      	b.n	8008890 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fb1a 	bl	8008ec2 <USBD_CtlError>
      break;
 800888e:	bf00      	nop
  }

  return ret;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	885b      	ldrh	r3, [r3, #2]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	2b06      	cmp	r3, #6
 80088be:	f200 8128 	bhi.w	8008b12 <USBD_GetDescriptor+0x276>
 80088c2:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <USBD_GetDescriptor+0x2c>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	080088e5 	.word	0x080088e5
 80088cc:	080088fd 	.word	0x080088fd
 80088d0:	0800893d 	.word	0x0800893d
 80088d4:	08008b13 	.word	0x08008b13
 80088d8:	08008b13 	.word	0x08008b13
 80088dc:	08008ab3 	.word	0x08008ab3
 80088e0:	08008adf 	.word	0x08008adf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	7c12      	ldrb	r2, [r2, #16]
 80088f0:	f107 0108 	add.w	r1, r7, #8
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
      break;
 80088fa:	e112      	b.n	8008b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	7c1b      	ldrb	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10d      	bne.n	8008920 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	f107 0208 	add.w	r2, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	2202      	movs	r2, #2
 800891c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800891e:	e100      	b.n	8008b22 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	f107 0208 	add.w	r2, r7, #8
 800892c:	4610      	mov	r0, r2
 800892e:	4798      	blx	r3
 8008930:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3301      	adds	r3, #1
 8008936:	2202      	movs	r2, #2
 8008938:	701a      	strb	r2, [r3, #0]
      break;
 800893a:	e0f2      	b.n	8008b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	885b      	ldrh	r3, [r3, #2]
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b05      	cmp	r3, #5
 8008944:	f200 80ac 	bhi.w	8008aa0 <USBD_GetDescriptor+0x204>
 8008948:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <USBD_GetDescriptor+0xb4>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	08008969 	.word	0x08008969
 8008954:	0800899d 	.word	0x0800899d
 8008958:	080089d1 	.word	0x080089d1
 800895c:	08008a05 	.word	0x08008a05
 8008960:	08008a39 	.word	0x08008a39
 8008964:	08008a6d 	.word	0x08008a6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	7c12      	ldrb	r2, [r2, #16]
 8008980:	f107 0108 	add.w	r1, r7, #8
 8008984:	4610      	mov	r0, r2
 8008986:	4798      	blx	r3
 8008988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898a:	e091      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa97 	bl	8008ec2 <USBD_CtlError>
            err++;
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	3301      	adds	r3, #1
 8008998:	72fb      	strb	r3, [r7, #11]
          break;
 800899a:	e089      	b.n	8008ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089be:	e077      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa7d 	bl	8008ec2 <USBD_CtlError>
            err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
          break;
 80089ce:	e06f      	b.n	8008ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f2:	e05d      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa63 	bl	8008ec2 <USBD_CtlError>
            err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
          break;
 8008a02:	e055      	b.n	8008ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a26:	e043      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa49 	bl	8008ec2 <USBD_CtlError>
            err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
          break;
 8008a36:	e03b      	b.n	8008ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5a:	e029      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa2f 	bl	8008ec2 <USBD_CtlError>
            err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6a:	e021      	b.n	8008ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	7c12      	ldrb	r2, [r2, #16]
 8008a84:	f107 0108 	add.w	r1, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a8e:	e00f      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa15 	bl	8008ec2 <USBD_CtlError>
            err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a9e:	e007      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa0d 	bl	8008ec2 <USBD_CtlError>
          err++;
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008aae:	e038      	b.n	8008b22 <USBD_GetDescriptor+0x286>
 8008ab0:	e037      	b.n	8008b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7c1b      	ldrb	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d109      	bne.n	8008ace <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac2:	f107 0208 	add.w	r2, r7, #8
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	4798      	blx	r3
 8008aca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008acc:	e029      	b.n	8008b22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f9f6 	bl	8008ec2 <USBD_CtlError>
        err++;
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	72fb      	strb	r3, [r7, #11]
      break;
 8008adc:	e021      	b.n	8008b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	7c1b      	ldrb	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10d      	bne.n	8008b02 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aee:	f107 0208 	add.w	r2, r7, #8
 8008af2:	4610      	mov	r0, r2
 8008af4:	4798      	blx	r3
 8008af6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3301      	adds	r3, #1
 8008afc:	2207      	movs	r2, #7
 8008afe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b00:	e00f      	b.n	8008b22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f9dc 	bl	8008ec2 <USBD_CtlError>
        err++;
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b10:	e007      	b.n	8008b22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f9d4 	bl	8008ec2 <USBD_CtlError>
      err++;
 8008b1a:	7afb      	ldrb	r3, [r7, #11]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b20:	bf00      	nop
  }

  if (err != 0U)
 8008b22:	7afb      	ldrb	r3, [r7, #11]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d11c      	bne.n	8008b62 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b28:	893b      	ldrh	r3, [r7, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d011      	beq.n	8008b52 <USBD_GetDescriptor+0x2b6>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	88db      	ldrh	r3, [r3, #6]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00d      	beq.n	8008b52 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	88da      	ldrh	r2, [r3, #6]
 8008b3a:	893b      	ldrh	r3, [r7, #8]
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	bf28      	it	cs
 8008b40:	4613      	movcs	r3, r2
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b46:	893b      	ldrh	r3, [r7, #8]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	68f9      	ldr	r1, [r7, #12]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fa22 	bl	8008f96 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	88db      	ldrh	r3, [r3, #6]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d104      	bne.n	8008b64 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fa79 	bl	8009052 <USBD_CtlSendStatus>
 8008b60:	e000      	b.n	8008b64 <USBD_GetDescriptor+0x2c8>
    return;
 8008b62:	bf00      	nop
    }
  }
}
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop

08008b6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	889b      	ldrh	r3, [r3, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d130      	bne.n	8008be0 <USBD_SetAddress+0x74>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	88db      	ldrh	r3, [r3, #6]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d12c      	bne.n	8008be0 <USBD_SetAddress+0x74>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	885b      	ldrh	r3, [r3, #2]
 8008b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b8c:	d828      	bhi.n	8008be0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	885b      	ldrh	r3, [r3, #2]
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d104      	bne.n	8008bae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f98b 	bl	8008ec2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bac:	e01d      	b.n	8008bea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7bfa      	ldrb	r2, [r7, #15]
 8008bb2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fda2 	bl	8009704 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fa46 	bl	8009052 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd4:	e009      	b.n	8008bea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bde:	e004      	b.n	8008bea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f96d 	bl	8008ec2 <USBD_CtlError>
  }
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	885b      	ldrh	r3, [r3, #2]
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	4b41      	ldr	r3, [pc, #260]	; (8008d0c <USBD_SetConfig+0x118>)
 8008c06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c08:	4b40      	ldr	r3, [pc, #256]	; (8008d0c <USBD_SetConfig+0x118>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d904      	bls.n	8008c1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f955 	bl	8008ec2 <USBD_CtlError>
 8008c18:	e075      	b.n	8008d06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d002      	beq.n	8008c2a <USBD_SetConfig+0x36>
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d023      	beq.n	8008c70 <USBD_SetConfig+0x7c>
 8008c28:	e062      	b.n	8008cf0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c2a:	4b38      	ldr	r3, [pc, #224]	; (8008d0c <USBD_SetConfig+0x118>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01a      	beq.n	8008c68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c32:	4b36      	ldr	r3, [pc, #216]	; (8008d0c <USBD_SetConfig+0x118>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2203      	movs	r2, #3
 8008c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c44:	4b31      	ldr	r3, [pc, #196]	; (8008d0c <USBD_SetConfig+0x118>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff f9e8 	bl	8008020 <USBD_SetClassConfig>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d104      	bne.n	8008c60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f932 	bl	8008ec2 <USBD_CtlError>
            return;
 8008c5e:	e052      	b.n	8008d06 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f9f6 	bl	8009052 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c66:	e04e      	b.n	8008d06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f9f2 	bl	8009052 <USBD_CtlSendStatus>
        break;
 8008c6e:	e04a      	b.n	8008d06 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c70:	4b26      	ldr	r3, [pc, #152]	; (8008d0c <USBD_SetConfig+0x118>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d112      	bne.n	8008c9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008c80:	4b22      	ldr	r3, [pc, #136]	; (8008d0c <USBD_SetConfig+0x118>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c8a:	4b20      	ldr	r3, [pc, #128]	; (8008d0c <USBD_SetConfig+0x118>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff f9e4 	bl	800805e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f9db 	bl	8009052 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c9c:	e033      	b.n	8008d06 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008c9e:	4b1b      	ldr	r3, [pc, #108]	; (8008d0c <USBD_SetConfig+0x118>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d01d      	beq.n	8008ce8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff f9d2 	bl	800805e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008cba:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <USBD_SetConfig+0x118>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008cc4:	4b11      	ldr	r3, [pc, #68]	; (8008d0c <USBD_SetConfig+0x118>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff f9a8 	bl	8008020 <USBD_SetClassConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d104      	bne.n	8008ce0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f8f2 	bl	8008ec2 <USBD_CtlError>
            return;
 8008cde:	e012      	b.n	8008d06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f9b6 	bl	8009052 <USBD_CtlSendStatus>
        break;
 8008ce6:	e00e      	b.n	8008d06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f9b2 	bl	8009052 <USBD_CtlSendStatus>
        break;
 8008cee:	e00a      	b.n	8008d06 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f8e5 	bl	8008ec2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <USBD_SetConfig+0x118>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff f9ad 	bl	800805e <USBD_ClrClassConfig>
        break;
 8008d04:	bf00      	nop
    }
  }
}
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000374 	.word	0x20000374

08008d10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	88db      	ldrh	r3, [r3, #6]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d004      	beq.n	8008d2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f8cc 	bl	8008ec2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d2a:	e022      	b.n	8008d72 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	dc02      	bgt.n	8008d3c <USBD_GetConfig+0x2c>
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dc03      	bgt.n	8008d42 <USBD_GetConfig+0x32>
 8008d3a:	e015      	b.n	8008d68 <USBD_GetConfig+0x58>
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d00b      	beq.n	8008d58 <USBD_GetConfig+0x48>
 8008d40:	e012      	b.n	8008d68 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f920 	bl	8008f96 <USBD_CtlSendData>
        break;
 8008d56:	e00c      	b.n	8008d72 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f918 	bl	8008f96 <USBD_CtlSendData>
        break;
 8008d66:	e004      	b.n	8008d72 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f8a9 	bl	8008ec2 <USBD_CtlError>
        break;
 8008d70:	bf00      	nop
}
 8008d72:	bf00      	nop
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d81e      	bhi.n	8008dce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	88db      	ldrh	r3, [r3, #6]
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d004      	beq.n	8008da2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f891 	bl	8008ec2 <USBD_CtlError>
        break;
 8008da0:	e01a      	b.n	8008dd8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f043 0202 	orr.w	r2, r3, #2
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	330c      	adds	r3, #12
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f8e5 	bl	8008f96 <USBD_CtlSendData>
      break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f876 	bl	8008ec2 <USBD_CtlError>
      break;
 8008dd6:	bf00      	nop
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	885b      	ldrh	r3, [r3, #2]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d106      	bne.n	8008e00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f929 	bl	8009052 <USBD_CtlSendStatus>
  }
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d80b      	bhi.n	8008e36 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	885b      	ldrh	r3, [r3, #2]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d10c      	bne.n	8008e40 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f90f 	bl	8009052 <USBD_CtlSendStatus>
      }
      break;
 8008e34:	e004      	b.n	8008e40 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f842 	bl	8008ec2 <USBD_CtlError>
      break;
 8008e3e:	e000      	b.n	8008e42 <USBD_ClrFeature+0x3a>
      break;
 8008e40:	bf00      	nop
  }
}
 8008e42:	bf00      	nop
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781a      	ldrb	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	785a      	ldrb	r2, [r3, #1]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	3302      	adds	r3, #2
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	3303      	adds	r3, #3
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	4413      	add	r3, r2
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	3304      	adds	r3, #4
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	3305      	adds	r3, #5
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4413      	add	r3, r2
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	3306      	adds	r3, #6
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	3307      	adds	r3, #7
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	021b      	lsls	r3, r3, #8
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	80da      	strh	r2, [r3, #6]

}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr

08008ec2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008ecc:	2180      	movs	r1, #128	; 0x80
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fbae 	bl	8009630 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fbaa 	bl	8009630 <USBD_LL_StallEP>
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d032      	beq.n	8008f60 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 f834 	bl	8008f68 <USBD_GetLen>
 8008f00:	4603      	mov	r3, r0
 8008f02:	3301      	adds	r3, #1
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	005b      	lsls	r3, r3, #1
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	75fa      	strb	r2, [r7, #23]
 8008f14:	461a      	mov	r2, r3
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	4413      	add	r3, r2
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	7812      	ldrb	r2, [r2, #0]
 8008f1e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	75fa      	strb	r2, [r7, #23]
 8008f26:	461a      	mov	r2, r3
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	2203      	movs	r2, #3
 8008f2e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f30:	e012      	b.n	8008f58 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	60fa      	str	r2, [r7, #12]
 8008f38:	7dfa      	ldrb	r2, [r7, #23]
 8008f3a:	1c51      	adds	r1, r2, #1
 8008f3c:	75f9      	strb	r1, [r7, #23]
 8008f3e:	4611      	mov	r1, r2
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	440a      	add	r2, r1
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	75fa      	strb	r2, [r7, #23]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4413      	add	r3, r2
 8008f54:	2200      	movs	r2, #0
 8008f56:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e8      	bne.n	8008f32 <USBD_GetString+0x4e>
    }
  }
}
 8008f60:	bf00      	nop
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f74:	e005      	b.n	8008f82 <USBD_GetLen+0x1a>
  {
    len++;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1f5      	bne.n	8008f76 <USBD_GetLen+0xe>
  }

  return len;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr

08008f96 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fac:	88fa      	ldrh	r2, [r7, #6]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008fb2:	88fa      	ldrh	r2, [r7, #6]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 fbbf 	bl	8009742 <USBD_LL_Transmit>

  return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fdc:	88fb      	ldrh	r3, [r7, #6]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 fbad 	bl	8009742 <USBD_LL_Transmit>

  return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2203      	movs	r2, #3
 8009004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009008:	88fa      	ldrh	r2, [r7, #6]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009010:	88fa      	ldrh	r2, [r7, #6]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009018:	88fb      	ldrh	r3, [r7, #6]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	2100      	movs	r1, #0
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 fbb2 	bl	8009788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	60f8      	str	r0, [r7, #12]
 8009036:	60b9      	str	r1, [r7, #8]
 8009038:	4613      	mov	r3, r2
 800903a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800903c:	88fb      	ldrh	r3, [r7, #6]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	2100      	movs	r1, #0
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fba0 	bl	8009788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2204      	movs	r2, #4
 800905e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009062:	2300      	movs	r3, #0
 8009064:	2200      	movs	r2, #0
 8009066:	2100      	movs	r1, #0
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fb6a 	bl	8009742 <USBD_LL_Transmit>

  return USBD_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2205      	movs	r2, #5
 8009084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009088:	2300      	movs	r3, #0
 800908a:	2200      	movs	r2, #0
 800908c:	2100      	movs	r1, #0
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fb7a 	bl	8009788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090a4:	2200      	movs	r2, #0
 80090a6:	4912      	ldr	r1, [pc, #72]	; (80090f0 <MX_USB_DEVICE_Init+0x50>)
 80090a8:	4812      	ldr	r0, [pc, #72]	; (80090f4 <MX_USB_DEVICE_Init+0x54>)
 80090aa:	f7fe ff5f 	bl	8007f6c <USBD_Init>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090b4:	f7f7 fcfc 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80090b8:	490f      	ldr	r1, [pc, #60]	; (80090f8 <MX_USB_DEVICE_Init+0x58>)
 80090ba:	480e      	ldr	r0, [pc, #56]	; (80090f4 <MX_USB_DEVICE_Init+0x54>)
 80090bc:	f7fe ff81 	bl	8007fc2 <USBD_RegisterClass>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090c6:	f7f7 fcf3 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80090ca:	490c      	ldr	r1, [pc, #48]	; (80090fc <MX_USB_DEVICE_Init+0x5c>)
 80090cc:	4809      	ldr	r0, [pc, #36]	; (80090f4 <MX_USB_DEVICE_Init+0x54>)
 80090ce:	f7fe ff37 	bl	8007f40 <USBD_CUSTOM_HID_RegisterInterface>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090d8:	f7f7 fcea 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090dc:	4805      	ldr	r0, [pc, #20]	; (80090f4 <MX_USB_DEVICE_Init+0x54>)
 80090de:	f7fe ff89 	bl	8007ff4 <USBD_Start>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090e8:	f7f7 fce2 	bl	8000ab0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090ec:	bf00      	nop
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20000118 	.word	0x20000118
 80090f4:	20000378 	.word	0x20000378
 80090f8:	20000014 	.word	0x20000014
 80090fc:	20000108 	.word	0x20000108

08009100 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009100:	b480      	push	{r7}
 8009102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009104:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009106:	4618      	mov	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	bc80      	pop	{r7}
 800910c:	4770      	bx	lr

0800910e <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800910e:	b480      	push	{r7}
 8009110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009112:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009114:	4618      	mov	r0, r3
 8009116:	46bd      	mov	sp, r7
 8009118:	bc80      	pop	{r7}
 800911a:	4770      	bx	lr

0800911c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009124:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	bc80      	pop	{r7}
 800912e:	4770      	bx	lr

08009130 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	2212      	movs	r2, #18
 8009140:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009142:	4b03      	ldr	r3, [pc, #12]	; (8009150 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	bc80      	pop	{r7}
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	20000134 	.word	0x20000134

08009154 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	6039      	str	r1, [r7, #0]
 800915e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2204      	movs	r2, #4
 8009164:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009166:	4b03      	ldr	r3, [pc, #12]	; (8009174 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009168:	4618      	mov	r0, r3
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	bc80      	pop	{r7}
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	20000148 	.word	0x20000148

08009178 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	6039      	str	r1, [r7, #0]
 8009182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d105      	bne.n	8009196 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	4907      	ldr	r1, [pc, #28]	; (80091ac <USBD_FS_ProductStrDescriptor+0x34>)
 800918e:	4808      	ldr	r0, [pc, #32]	; (80091b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009190:	f7ff fea8 	bl	8008ee4 <USBD_GetString>
 8009194:	e004      	b.n	80091a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	4904      	ldr	r1, [pc, #16]	; (80091ac <USBD_FS_ProductStrDescriptor+0x34>)
 800919a:	4805      	ldr	r0, [pc, #20]	; (80091b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800919c:	f7ff fea2 	bl	8008ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091a0:	4b02      	ldr	r3, [pc, #8]	; (80091ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	2000063c 	.word	0x2000063c
 80091b0:	0800a1f8 	.word	0x0800a1f8

080091b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4603      	mov	r3, r0
 80091bc:	6039      	str	r1, [r7, #0]
 80091be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	4904      	ldr	r1, [pc, #16]	; (80091d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091c4:	4804      	ldr	r0, [pc, #16]	; (80091d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091c6:	f7ff fe8d 	bl	8008ee4 <USBD_GetString>
  return USBD_StrDesc;
 80091ca:	4b02      	ldr	r3, [pc, #8]	; (80091d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	2000063c 	.word	0x2000063c
 80091d8:	0800a208 	.word	0x0800a208

080091dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	6039      	str	r1, [r7, #0]
 80091e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	221a      	movs	r2, #26
 80091ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091ee:	f000 f843 	bl	8009278 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091f2:	4b02      	ldr	r3, [pc, #8]	; (80091fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	2000014c 	.word	0x2000014c

08009200 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	6039      	str	r1, [r7, #0]
 800920a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d105      	bne.n	800921e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	4907      	ldr	r1, [pc, #28]	; (8009234 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009216:	4808      	ldr	r0, [pc, #32]	; (8009238 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009218:	f7ff fe64 	bl	8008ee4 <USBD_GetString>
 800921c:	e004      	b.n	8009228 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	4904      	ldr	r1, [pc, #16]	; (8009234 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009222:	4805      	ldr	r0, [pc, #20]	; (8009238 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009224:	f7ff fe5e 	bl	8008ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009228:	4b02      	ldr	r3, [pc, #8]	; (8009234 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	2000063c 	.word	0x2000063c
 8009238:	0800a214 	.word	0x0800a214

0800923c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	6039      	str	r1, [r7, #0]
 8009246:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009248:	79fb      	ldrb	r3, [r7, #7]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d105      	bne.n	800925a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	4907      	ldr	r1, [pc, #28]	; (8009270 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009252:	4808      	ldr	r0, [pc, #32]	; (8009274 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009254:	f7ff fe46 	bl	8008ee4 <USBD_GetString>
 8009258:	e004      	b.n	8009264 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	4904      	ldr	r1, [pc, #16]	; (8009270 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800925e:	4805      	ldr	r0, [pc, #20]	; (8009274 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009260:	f7ff fe40 	bl	8008ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009264:	4b02      	ldr	r3, [pc, #8]	; (8009270 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	2000063c 	.word	0x2000063c
 8009274:	0800a228 	.word	0x0800a228

08009278 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800927e:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <Get_SerialNum+0x44>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009284:	4b0e      	ldr	r3, [pc, #56]	; (80092c0 <Get_SerialNum+0x48>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800928a:	4b0e      	ldr	r3, [pc, #56]	; (80092c4 <Get_SerialNum+0x4c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4413      	add	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d009      	beq.n	80092b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800929e:	2208      	movs	r2, #8
 80092a0:	4909      	ldr	r1, [pc, #36]	; (80092c8 <Get_SerialNum+0x50>)
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 f814 	bl	80092d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092a8:	2204      	movs	r2, #4
 80092aa:	4908      	ldr	r1, [pc, #32]	; (80092cc <Get_SerialNum+0x54>)
 80092ac:	68b8      	ldr	r0, [r7, #8]
 80092ae:	f000 f80f 	bl	80092d0 <IntToUnicode>
  }
}
 80092b2:	bf00      	nop
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	1ffff7e8 	.word	0x1ffff7e8
 80092c0:	1ffff7ec 	.word	0x1ffff7ec
 80092c4:	1ffff7f0 	.word	0x1ffff7f0
 80092c8:	2000014e 	.word	0x2000014e
 80092cc:	2000015e 	.word	0x2000015e

080092d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	4613      	mov	r3, r2
 80092dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092de:	2300      	movs	r3, #0
 80092e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092e2:	2300      	movs	r3, #0
 80092e4:	75fb      	strb	r3, [r7, #23]
 80092e6:	e027      	b.n	8009338 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	0f1b      	lsrs	r3, r3, #28
 80092ec:	2b09      	cmp	r3, #9
 80092ee:	d80b      	bhi.n	8009308 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	0f1b      	lsrs	r3, r3, #28
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	4619      	mov	r1, r3
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	440b      	add	r3, r1
 8009300:	3230      	adds	r2, #48	; 0x30
 8009302:	b2d2      	uxtb	r2, r2
 8009304:	701a      	strb	r2, [r3, #0]
 8009306:	e00a      	b.n	800931e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	0f1b      	lsrs	r3, r3, #28
 800930c:	b2da      	uxtb	r2, r3
 800930e:	7dfb      	ldrb	r3, [r7, #23]
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	4619      	mov	r1, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	440b      	add	r3, r1
 8009318:	3237      	adds	r2, #55	; 0x37
 800931a:	b2d2      	uxtb	r2, r2
 800931c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	3301      	adds	r3, #1
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	4413      	add	r3, r2
 800932e:	2200      	movs	r2, #0
 8009330:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	3301      	adds	r3, #1
 8009336:	75fb      	strb	r3, [r7, #23]
 8009338:	7dfa      	ldrb	r2, [r7, #23]
 800933a:	79fb      	ldrb	r3, [r7, #7]
 800933c:	429a      	cmp	r2, r3
 800933e:	d3d3      	bcc.n	80092e8 <IntToUnicode+0x18>
  }
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	371c      	adds	r7, #28
 8009346:	46bd      	mov	sp, r7
 8009348:	bc80      	pop	{r7}
 800934a:	4770      	bx	lr

0800934c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a0d      	ldr	r2, [pc, #52]	; (8009390 <HAL_PCD_MspInit+0x44>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d113      	bne.n	8009386 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800935e:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <HAL_PCD_MspInit+0x48>)
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	4a0c      	ldr	r2, [pc, #48]	; (8009394 <HAL_PCD_MspInit+0x48>)
 8009364:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009368:	61d3      	str	r3, [r2, #28]
 800936a:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <HAL_PCD_MspInit+0x48>)
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009376:	2200      	movs	r2, #0
 8009378:	2100      	movs	r1, #0
 800937a:	2014      	movs	r0, #20
 800937c:	f7f8 facd 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009380:	2014      	movs	r0, #20
 8009382:	f7f8 fae6 	bl	8001952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	40005c00 	.word	0x40005c00
 8009394:	40021000 	.word	0x40021000

08009398 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80093ac:	4619      	mov	r1, r3
 80093ae:	4610      	mov	r0, r2
 80093b0:	f7fe fe68 	bl	8008084 <USBD_LL_SetupStage>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80093ce:	78fa      	ldrb	r2, [r7, #3]
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	440b      	add	r3, r1
 80093dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	78fb      	ldrb	r3, [r7, #3]
 80093e4:	4619      	mov	r1, r3
 80093e6:	f7fe fe9a 	bl	800811e <USBD_LL_DataOutStage>
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	460b      	mov	r3, r1
 80093fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	440b      	add	r3, r1
 8009412:	333c      	adds	r3, #60	; 0x3c
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	4619      	mov	r1, r3
 800941a:	f7fe fef1 	bl	8008200 <USBD_LL_DataInStage>
}
 800941e:	bf00      	nop
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009434:	4618      	mov	r0, r3
 8009436:	f7ff f801 	bl	800843c <USBD_LL_SOF>
}
 800943a:	bf00      	nop
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800944a:	2301      	movs	r3, #1
 800944c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	2b02      	cmp	r3, #2
 8009454:	d001      	beq.n	800945a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009456:	f7f7 fb2b 	bl	8000ab0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009460:	7bfa      	ldrb	r2, [r7, #15]
 8009462:	4611      	mov	r1, r2
 8009464:	4618      	mov	r0, r3
 8009466:	f7fe ffb1 	bl	80083cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe ff6a 	bl	800834a <USBD_LL_Reset>
}
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe ffab 	bl	80083ea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800949c:	4b04      	ldr	r3, [pc, #16]	; (80094b0 <HAL_PCD_SuspendCallback+0x30>)
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	4a03      	ldr	r2, [pc, #12]	; (80094b0 <HAL_PCD_SuspendCallback+0x30>)
 80094a2:	f043 0306 	orr.w	r3, r3, #6
 80094a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	e000ed00 	.word	0xe000ed00

080094b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fe ffa5 	bl	8008412 <USBD_LL_Resume>
}
 80094c8:	bf00      	nop
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80094d8:	4a23      	ldr	r2, [pc, #140]	; (8009568 <USBD_LL_Init+0x98>)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a21      	ldr	r2, [pc, #132]	; (8009568 <USBD_LL_Init+0x98>)
 80094e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80094e8:	4b1f      	ldr	r3, [pc, #124]	; (8009568 <USBD_LL_Init+0x98>)
 80094ea:	4a20      	ldr	r2, [pc, #128]	; (800956c <USBD_LL_Init+0x9c>)
 80094ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80094ee:	4b1e      	ldr	r3, [pc, #120]	; (8009568 <USBD_LL_Init+0x98>)
 80094f0:	2208      	movs	r2, #8
 80094f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80094f4:	4b1c      	ldr	r3, [pc, #112]	; (8009568 <USBD_LL_Init+0x98>)
 80094f6:	2202      	movs	r2, #2
 80094f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80094fa:	4b1b      	ldr	r3, [pc, #108]	; (8009568 <USBD_LL_Init+0x98>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009500:	4b19      	ldr	r3, [pc, #100]	; (8009568 <USBD_LL_Init+0x98>)
 8009502:	2200      	movs	r2, #0
 8009504:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009506:	4b18      	ldr	r3, [pc, #96]	; (8009568 <USBD_LL_Init+0x98>)
 8009508:	2200      	movs	r2, #0
 800950a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800950c:	4816      	ldr	r0, [pc, #88]	; (8009568 <USBD_LL_Init+0x98>)
 800950e:	f7f8 fdc5 	bl	800209c <HAL_PCD_Init>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009518:	f7f7 faca 	bl	8000ab0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009522:	2318      	movs	r3, #24
 8009524:	2200      	movs	r2, #0
 8009526:	2100      	movs	r1, #0
 8009528:	f7fa fa22 	bl	8003970 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009532:	2358      	movs	r3, #88	; 0x58
 8009534:	2200      	movs	r2, #0
 8009536:	2180      	movs	r1, #128	; 0x80
 8009538:	f7fa fa1a 	bl	8003970 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009542:	2398      	movs	r3, #152	; 0x98
 8009544:	2200      	movs	r2, #0
 8009546:	2181      	movs	r1, #129	; 0x81
 8009548:	f7fa fa12 	bl	8003970 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009552:	23d8      	movs	r3, #216	; 0xd8
 8009554:	2200      	movs	r2, #0
 8009556:	2101      	movs	r1, #1
 8009558:	f7fa fa0a 	bl	8003970 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	2000083c 	.word	0x2000083c
 800956c:	40005c00 	.word	0x40005c00

08009570 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009586:	4618      	mov	r0, r3
 8009588:	f7f8 fe93 	bl	80022b2 <HAL_PCD_Start>
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f93c 	bl	8009810 <USBD_Get_USB_Status>
 8009598:	4603      	mov	r3, r0
 800959a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800959c:	7bbb      	ldrb	r3, [r7, #14]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	4608      	mov	r0, r1
 80095b0:	4611      	mov	r1, r2
 80095b2:	461a      	mov	r2, r3
 80095b4:	4603      	mov	r3, r0
 80095b6:	70fb      	strb	r3, [r7, #3]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70bb      	strb	r3, [r7, #2]
 80095bc:	4613      	mov	r3, r2
 80095be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095ce:	78bb      	ldrb	r3, [r7, #2]
 80095d0:	883a      	ldrh	r2, [r7, #0]
 80095d2:	78f9      	ldrb	r1, [r7, #3]
 80095d4:	f7f9 f80b 	bl	80025ee <HAL_PCD_EP_Open>
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 f916 	bl	8009810 <USBD_Get_USB_Status>
 80095e4:	4603      	mov	r3, r0
 80095e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	460b      	mov	r3, r1
 80095fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800960c:	78fa      	ldrb	r2, [r7, #3]
 800960e:	4611      	mov	r1, r2
 8009610:	4618      	mov	r0, r3
 8009612:	f7f9 f852 	bl	80026ba <HAL_PCD_EP_Close>
 8009616:	4603      	mov	r3, r0
 8009618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	4618      	mov	r0, r3
 800961e:	f000 f8f7 	bl	8009810 <USBD_Get_USB_Status>
 8009622:	4603      	mov	r3, r0
 8009624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009626:	7bbb      	ldrb	r3, [r7, #14]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7f9 f8fb 	bl	800284a <HAL_PCD_EP_SetStall>
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009658:	7bfb      	ldrb	r3, [r7, #15]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f8d8 	bl	8009810 <USBD_Get_USB_Status>
 8009660:	4603      	mov	r3, r0
 8009662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009664:	7bbb      	ldrb	r3, [r7, #14]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	460b      	mov	r3, r1
 8009678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009688:	78fa      	ldrb	r2, [r7, #3]
 800968a:	4611      	mov	r1, r2
 800968c:	4618      	mov	r0, r3
 800968e:	f7f9 f93c 	bl	800290a <HAL_PCD_EP_ClrStall>
 8009692:	4603      	mov	r3, r0
 8009694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009696:	7bfb      	ldrb	r3, [r7, #15]
 8009698:	4618      	mov	r0, r3
 800969a:	f000 f8b9 	bl	8009810 <USBD_Get_USB_Status>
 800969e:	4603      	mov	r3, r0
 80096a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	da0c      	bge.n	80096e2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ce:	68f9      	ldr	r1, [r7, #12]
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	440b      	add	r3, r1
 80096dc:	3302      	adds	r3, #2
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	e00b      	b.n	80096fa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096e2:	78fb      	ldrb	r3, [r7, #3]
 80096e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096e8:	68f9      	ldr	r1, [r7, #12]
 80096ea:	4613      	mov	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	440b      	add	r3, r1
 80096f4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80096f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr

08009704 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800971e:	78fa      	ldrb	r2, [r7, #3]
 8009720:	4611      	mov	r1, r2
 8009722:	4618      	mov	r0, r3
 8009724:	f7f8 ff3e 	bl	80025a4 <HAL_PCD_SetAddress>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	4618      	mov	r0, r3
 8009730:	f000 f86e 	bl	8009810 <USBD_Get_USB_Status>
 8009734:	4603      	mov	r3, r0
 8009736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009738:	7bbb      	ldrb	r3, [r7, #14]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b086      	sub	sp, #24
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	461a      	mov	r2, r3
 800974e:	460b      	mov	r3, r1
 8009750:	72fb      	strb	r3, [r7, #11]
 8009752:	4613      	mov	r3, r2
 8009754:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009764:	893b      	ldrh	r3, [r7, #8]
 8009766:	7af9      	ldrb	r1, [r7, #11]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	f7f9 f82b 	bl	80027c4 <HAL_PCD_EP_Transmit>
 800976e:	4603      	mov	r3, r0
 8009770:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 f84b 	bl	8009810 <USBD_Get_USB_Status>
 800977a:	4603      	mov	r3, r0
 800977c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800977e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	607a      	str	r2, [r7, #4]
 8009792:	461a      	mov	r2, r3
 8009794:	460b      	mov	r3, r1
 8009796:	72fb      	strb	r3, [r7, #11]
 8009798:	4613      	mov	r3, r2
 800979a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097aa:	893b      	ldrh	r3, [r7, #8]
 80097ac:	7af9      	ldrb	r1, [r7, #11]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	f7f8 ffcb 	bl	800274a <HAL_PCD_EP_Receive>
 80097b4:	4603      	mov	r3, r0
 80097b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 f828 	bl	8009810 <USBD_Get_USB_Status>
 80097c0:	4603      	mov	r3, r0
 80097c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80097d8:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <USBD_static_malloc+0x14>)
}
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	bc80      	pop	{r7}
 80097e2:	4770      	bx	lr
 80097e4:	20000b28 	.word	0x20000b28

080097e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]

}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bc80      	pop	{r7}
 80097f8:	4770      	bx	lr

080097fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fa:	b480      	push	{r7}
 80097fc:	b083      	sub	sp, #12
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009806:	bf00      	nop
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	bc80      	pop	{r7}
 800980e:	4770      	bx	lr

08009810 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	2b03      	cmp	r3, #3
 8009822:	d817      	bhi.n	8009854 <USBD_Get_USB_Status+0x44>
 8009824:	a201      	add	r2, pc, #4	; (adr r2, 800982c <USBD_Get_USB_Status+0x1c>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	0800983d 	.word	0x0800983d
 8009830:	08009843 	.word	0x08009843
 8009834:	08009849 	.word	0x08009849
 8009838:	0800984f 	.word	0x0800984f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73fb      	strb	r3, [r7, #15]
    break;
 8009840:	e00b      	b.n	800985a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009842:	2302      	movs	r3, #2
 8009844:	73fb      	strb	r3, [r7, #15]
    break;
 8009846:	e008      	b.n	800985a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009848:	2301      	movs	r3, #1
 800984a:	73fb      	strb	r3, [r7, #15]
    break;
 800984c:	e005      	b.n	800985a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800984e:	2302      	movs	r3, #2
 8009850:	73fb      	strb	r3, [r7, #15]
    break;
 8009852:	e002      	b.n	800985a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009854:	2302      	movs	r3, #2
 8009856:	73fb      	strb	r3, [r7, #15]
    break;
 8009858:	bf00      	nop
  }
  return usb_status;
 800985a:	7bfb      	ldrb	r3, [r7, #15]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	bc80      	pop	{r7}
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop

08009868 <__errno>:
 8009868:	4b01      	ldr	r3, [pc, #4]	; (8009870 <__errno+0x8>)
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	20000168 	.word	0x20000168

08009874 <__libc_init_array>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	2600      	movs	r6, #0
 8009878:	4d0c      	ldr	r5, [pc, #48]	; (80098ac <__libc_init_array+0x38>)
 800987a:	4c0d      	ldr	r4, [pc, #52]	; (80098b0 <__libc_init_array+0x3c>)
 800987c:	1b64      	subs	r4, r4, r5
 800987e:	10a4      	asrs	r4, r4, #2
 8009880:	42a6      	cmp	r6, r4
 8009882:	d109      	bne.n	8009898 <__libc_init_array+0x24>
 8009884:	f000 fc9c 	bl	800a1c0 <_init>
 8009888:	2600      	movs	r6, #0
 800988a:	4d0a      	ldr	r5, [pc, #40]	; (80098b4 <__libc_init_array+0x40>)
 800988c:	4c0a      	ldr	r4, [pc, #40]	; (80098b8 <__libc_init_array+0x44>)
 800988e:	1b64      	subs	r4, r4, r5
 8009890:	10a4      	asrs	r4, r4, #2
 8009892:	42a6      	cmp	r6, r4
 8009894:	d105      	bne.n	80098a2 <__libc_init_array+0x2e>
 8009896:	bd70      	pop	{r4, r5, r6, pc}
 8009898:	f855 3b04 	ldr.w	r3, [r5], #4
 800989c:	4798      	blx	r3
 800989e:	3601      	adds	r6, #1
 80098a0:	e7ee      	b.n	8009880 <__libc_init_array+0xc>
 80098a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a6:	4798      	blx	r3
 80098a8:	3601      	adds	r6, #1
 80098aa:	e7f2      	b.n	8009892 <__libc_init_array+0x1e>
 80098ac:	0800a28c 	.word	0x0800a28c
 80098b0:	0800a28c 	.word	0x0800a28c
 80098b4:	0800a28c 	.word	0x0800a28c
 80098b8:	0800a290 	.word	0x0800a290

080098bc <memset>:
 80098bc:	4603      	mov	r3, r0
 80098be:	4402      	add	r2, r0
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d100      	bne.n	80098c6 <memset+0xa>
 80098c4:	4770      	bx	lr
 80098c6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ca:	e7f9      	b.n	80098c0 <memset+0x4>

080098cc <siprintf>:
 80098cc:	b40e      	push	{r1, r2, r3}
 80098ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098d2:	b500      	push	{lr}
 80098d4:	b09c      	sub	sp, #112	; 0x70
 80098d6:	ab1d      	add	r3, sp, #116	; 0x74
 80098d8:	9002      	str	r0, [sp, #8]
 80098da:	9006      	str	r0, [sp, #24]
 80098dc:	9107      	str	r1, [sp, #28]
 80098de:	9104      	str	r1, [sp, #16]
 80098e0:	4808      	ldr	r0, [pc, #32]	; (8009904 <siprintf+0x38>)
 80098e2:	4909      	ldr	r1, [pc, #36]	; (8009908 <siprintf+0x3c>)
 80098e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e8:	9105      	str	r1, [sp, #20]
 80098ea:	6800      	ldr	r0, [r0, #0]
 80098ec:	a902      	add	r1, sp, #8
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	f000 f868 	bl	80099c4 <_svfiprintf_r>
 80098f4:	2200      	movs	r2, #0
 80098f6:	9b02      	ldr	r3, [sp, #8]
 80098f8:	701a      	strb	r2, [r3, #0]
 80098fa:	b01c      	add	sp, #112	; 0x70
 80098fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009900:	b003      	add	sp, #12
 8009902:	4770      	bx	lr
 8009904:	20000168 	.word	0x20000168
 8009908:	ffff0208 	.word	0xffff0208

0800990c <__ssputs_r>:
 800990c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009910:	688e      	ldr	r6, [r1, #8]
 8009912:	4682      	mov	sl, r0
 8009914:	429e      	cmp	r6, r3
 8009916:	460c      	mov	r4, r1
 8009918:	4690      	mov	r8, r2
 800991a:	461f      	mov	r7, r3
 800991c:	d838      	bhi.n	8009990 <__ssputs_r+0x84>
 800991e:	898a      	ldrh	r2, [r1, #12]
 8009920:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009924:	d032      	beq.n	800998c <__ssputs_r+0x80>
 8009926:	6825      	ldr	r5, [r4, #0]
 8009928:	6909      	ldr	r1, [r1, #16]
 800992a:	3301      	adds	r3, #1
 800992c:	eba5 0901 	sub.w	r9, r5, r1
 8009930:	6965      	ldr	r5, [r4, #20]
 8009932:	444b      	add	r3, r9
 8009934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800993c:	106d      	asrs	r5, r5, #1
 800993e:	429d      	cmp	r5, r3
 8009940:	bf38      	it	cc
 8009942:	461d      	movcc	r5, r3
 8009944:	0553      	lsls	r3, r2, #21
 8009946:	d531      	bpl.n	80099ac <__ssputs_r+0xa0>
 8009948:	4629      	mov	r1, r5
 800994a:	f000 fb6f 	bl	800a02c <_malloc_r>
 800994e:	4606      	mov	r6, r0
 8009950:	b950      	cbnz	r0, 8009968 <__ssputs_r+0x5c>
 8009952:	230c      	movs	r3, #12
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	f8ca 3000 	str.w	r3, [sl]
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009968:	464a      	mov	r2, r9
 800996a:	6921      	ldr	r1, [r4, #16]
 800996c:	f000 face 	bl	8009f0c <memcpy>
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997a:	81a3      	strh	r3, [r4, #12]
 800997c:	6126      	str	r6, [r4, #16]
 800997e:	444e      	add	r6, r9
 8009980:	6026      	str	r6, [r4, #0]
 8009982:	463e      	mov	r6, r7
 8009984:	6165      	str	r5, [r4, #20]
 8009986:	eba5 0509 	sub.w	r5, r5, r9
 800998a:	60a5      	str	r5, [r4, #8]
 800998c:	42be      	cmp	r6, r7
 800998e:	d900      	bls.n	8009992 <__ssputs_r+0x86>
 8009990:	463e      	mov	r6, r7
 8009992:	4632      	mov	r2, r6
 8009994:	4641      	mov	r1, r8
 8009996:	6820      	ldr	r0, [r4, #0]
 8009998:	f000 fac6 	bl	8009f28 <memmove>
 800999c:	68a3      	ldr	r3, [r4, #8]
 800999e:	2000      	movs	r0, #0
 80099a0:	1b9b      	subs	r3, r3, r6
 80099a2:	60a3      	str	r3, [r4, #8]
 80099a4:	6823      	ldr	r3, [r4, #0]
 80099a6:	4433      	add	r3, r6
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	e7db      	b.n	8009964 <__ssputs_r+0x58>
 80099ac:	462a      	mov	r2, r5
 80099ae:	f000 fbb1 	bl	800a114 <_realloc_r>
 80099b2:	4606      	mov	r6, r0
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d1e1      	bne.n	800997c <__ssputs_r+0x70>
 80099b8:	4650      	mov	r0, sl
 80099ba:	6921      	ldr	r1, [r4, #16]
 80099bc:	f000 face 	bl	8009f5c <_free_r>
 80099c0:	e7c7      	b.n	8009952 <__ssputs_r+0x46>
	...

080099c4 <_svfiprintf_r>:
 80099c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c8:	4698      	mov	r8, r3
 80099ca:	898b      	ldrh	r3, [r1, #12]
 80099cc:	4607      	mov	r7, r0
 80099ce:	061b      	lsls	r3, r3, #24
 80099d0:	460d      	mov	r5, r1
 80099d2:	4614      	mov	r4, r2
 80099d4:	b09d      	sub	sp, #116	; 0x74
 80099d6:	d50e      	bpl.n	80099f6 <_svfiprintf_r+0x32>
 80099d8:	690b      	ldr	r3, [r1, #16]
 80099da:	b963      	cbnz	r3, 80099f6 <_svfiprintf_r+0x32>
 80099dc:	2140      	movs	r1, #64	; 0x40
 80099de:	f000 fb25 	bl	800a02c <_malloc_r>
 80099e2:	6028      	str	r0, [r5, #0]
 80099e4:	6128      	str	r0, [r5, #16]
 80099e6:	b920      	cbnz	r0, 80099f2 <_svfiprintf_r+0x2e>
 80099e8:	230c      	movs	r3, #12
 80099ea:	603b      	str	r3, [r7, #0]
 80099ec:	f04f 30ff 	mov.w	r0, #4294967295
 80099f0:	e0d1      	b.n	8009b96 <_svfiprintf_r+0x1d2>
 80099f2:	2340      	movs	r3, #64	; 0x40
 80099f4:	616b      	str	r3, [r5, #20]
 80099f6:	2300      	movs	r3, #0
 80099f8:	9309      	str	r3, [sp, #36]	; 0x24
 80099fa:	2320      	movs	r3, #32
 80099fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a00:	2330      	movs	r3, #48	; 0x30
 8009a02:	f04f 0901 	mov.w	r9, #1
 8009a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009bb0 <_svfiprintf_r+0x1ec>
 8009a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a12:	4623      	mov	r3, r4
 8009a14:	469a      	mov	sl, r3
 8009a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a1a:	b10a      	cbz	r2, 8009a20 <_svfiprintf_r+0x5c>
 8009a1c:	2a25      	cmp	r2, #37	; 0x25
 8009a1e:	d1f9      	bne.n	8009a14 <_svfiprintf_r+0x50>
 8009a20:	ebba 0b04 	subs.w	fp, sl, r4
 8009a24:	d00b      	beq.n	8009a3e <_svfiprintf_r+0x7a>
 8009a26:	465b      	mov	r3, fp
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f7ff ff6d 	bl	800990c <__ssputs_r>
 8009a32:	3001      	adds	r0, #1
 8009a34:	f000 80aa 	beq.w	8009b8c <_svfiprintf_r+0x1c8>
 8009a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a3a:	445a      	add	r2, fp
 8009a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 80a2 	beq.w	8009b8c <_svfiprintf_r+0x1c8>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a52:	f10a 0a01 	add.w	sl, sl, #1
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	9307      	str	r3, [sp, #28]
 8009a5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a5e:	931a      	str	r3, [sp, #104]	; 0x68
 8009a60:	4654      	mov	r4, sl
 8009a62:	2205      	movs	r2, #5
 8009a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a68:	4851      	ldr	r0, [pc, #324]	; (8009bb0 <_svfiprintf_r+0x1ec>)
 8009a6a:	f000 fa41 	bl	8009ef0 <memchr>
 8009a6e:	9a04      	ldr	r2, [sp, #16]
 8009a70:	b9d8      	cbnz	r0, 8009aaa <_svfiprintf_r+0xe6>
 8009a72:	06d0      	lsls	r0, r2, #27
 8009a74:	bf44      	itt	mi
 8009a76:	2320      	movmi	r3, #32
 8009a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a7c:	0711      	lsls	r1, r2, #28
 8009a7e:	bf44      	itt	mi
 8009a80:	232b      	movmi	r3, #43	; 0x2b
 8009a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a86:	f89a 3000 	ldrb.w	r3, [sl]
 8009a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a8c:	d015      	beq.n	8009aba <_svfiprintf_r+0xf6>
 8009a8e:	4654      	mov	r4, sl
 8009a90:	2000      	movs	r0, #0
 8009a92:	f04f 0c0a 	mov.w	ip, #10
 8009a96:	9a07      	ldr	r2, [sp, #28]
 8009a98:	4621      	mov	r1, r4
 8009a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a9e:	3b30      	subs	r3, #48	; 0x30
 8009aa0:	2b09      	cmp	r3, #9
 8009aa2:	d94e      	bls.n	8009b42 <_svfiprintf_r+0x17e>
 8009aa4:	b1b0      	cbz	r0, 8009ad4 <_svfiprintf_r+0x110>
 8009aa6:	9207      	str	r2, [sp, #28]
 8009aa8:	e014      	b.n	8009ad4 <_svfiprintf_r+0x110>
 8009aaa:	eba0 0308 	sub.w	r3, r0, r8
 8009aae:	fa09 f303 	lsl.w	r3, r9, r3
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	46a2      	mov	sl, r4
 8009ab6:	9304      	str	r3, [sp, #16]
 8009ab8:	e7d2      	b.n	8009a60 <_svfiprintf_r+0x9c>
 8009aba:	9b03      	ldr	r3, [sp, #12]
 8009abc:	1d19      	adds	r1, r3, #4
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	9103      	str	r1, [sp, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	bfbb      	ittet	lt
 8009ac6:	425b      	neglt	r3, r3
 8009ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8009acc:	9307      	strge	r3, [sp, #28]
 8009ace:	9307      	strlt	r3, [sp, #28]
 8009ad0:	bfb8      	it	lt
 8009ad2:	9204      	strlt	r2, [sp, #16]
 8009ad4:	7823      	ldrb	r3, [r4, #0]
 8009ad6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ad8:	d10c      	bne.n	8009af4 <_svfiprintf_r+0x130>
 8009ada:	7863      	ldrb	r3, [r4, #1]
 8009adc:	2b2a      	cmp	r3, #42	; 0x2a
 8009ade:	d135      	bne.n	8009b4c <_svfiprintf_r+0x188>
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	3402      	adds	r4, #2
 8009ae4:	1d1a      	adds	r2, r3, #4
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	9203      	str	r2, [sp, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	bfb8      	it	lt
 8009aee:	f04f 33ff 	movlt.w	r3, #4294967295
 8009af2:	9305      	str	r3, [sp, #20]
 8009af4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009bb4 <_svfiprintf_r+0x1f0>
 8009af8:	2203      	movs	r2, #3
 8009afa:	4650      	mov	r0, sl
 8009afc:	7821      	ldrb	r1, [r4, #0]
 8009afe:	f000 f9f7 	bl	8009ef0 <memchr>
 8009b02:	b140      	cbz	r0, 8009b16 <_svfiprintf_r+0x152>
 8009b04:	2340      	movs	r3, #64	; 0x40
 8009b06:	eba0 000a 	sub.w	r0, r0, sl
 8009b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8009b0e:	9b04      	ldr	r3, [sp, #16]
 8009b10:	3401      	adds	r4, #1
 8009b12:	4303      	orrs	r3, r0
 8009b14:	9304      	str	r3, [sp, #16]
 8009b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1a:	2206      	movs	r2, #6
 8009b1c:	4826      	ldr	r0, [pc, #152]	; (8009bb8 <_svfiprintf_r+0x1f4>)
 8009b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b22:	f000 f9e5 	bl	8009ef0 <memchr>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d038      	beq.n	8009b9c <_svfiprintf_r+0x1d8>
 8009b2a:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <_svfiprintf_r+0x1f8>)
 8009b2c:	bb1b      	cbnz	r3, 8009b76 <_svfiprintf_r+0x1b2>
 8009b2e:	9b03      	ldr	r3, [sp, #12]
 8009b30:	3307      	adds	r3, #7
 8009b32:	f023 0307 	bic.w	r3, r3, #7
 8009b36:	3308      	adds	r3, #8
 8009b38:	9303      	str	r3, [sp, #12]
 8009b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3c:	4433      	add	r3, r6
 8009b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b40:	e767      	b.n	8009a12 <_svfiprintf_r+0x4e>
 8009b42:	460c      	mov	r4, r1
 8009b44:	2001      	movs	r0, #1
 8009b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b4a:	e7a5      	b.n	8009a98 <_svfiprintf_r+0xd4>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f04f 0c0a 	mov.w	ip, #10
 8009b52:	4619      	mov	r1, r3
 8009b54:	3401      	adds	r4, #1
 8009b56:	9305      	str	r3, [sp, #20]
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b5e:	3a30      	subs	r2, #48	; 0x30
 8009b60:	2a09      	cmp	r2, #9
 8009b62:	d903      	bls.n	8009b6c <_svfiprintf_r+0x1a8>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0c5      	beq.n	8009af4 <_svfiprintf_r+0x130>
 8009b68:	9105      	str	r1, [sp, #20]
 8009b6a:	e7c3      	b.n	8009af4 <_svfiprintf_r+0x130>
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	2301      	movs	r3, #1
 8009b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b74:	e7f0      	b.n	8009b58 <_svfiprintf_r+0x194>
 8009b76:	ab03      	add	r3, sp, #12
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	4b10      	ldr	r3, [pc, #64]	; (8009bc0 <_svfiprintf_r+0x1fc>)
 8009b80:	a904      	add	r1, sp, #16
 8009b82:	f3af 8000 	nop.w
 8009b86:	1c42      	adds	r2, r0, #1
 8009b88:	4606      	mov	r6, r0
 8009b8a:	d1d6      	bne.n	8009b3a <_svfiprintf_r+0x176>
 8009b8c:	89ab      	ldrh	r3, [r5, #12]
 8009b8e:	065b      	lsls	r3, r3, #25
 8009b90:	f53f af2c 	bmi.w	80099ec <_svfiprintf_r+0x28>
 8009b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b96:	b01d      	add	sp, #116	; 0x74
 8009b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9c:	ab03      	add	r3, sp, #12
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	462a      	mov	r2, r5
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <_svfiprintf_r+0x1fc>)
 8009ba6:	a904      	add	r1, sp, #16
 8009ba8:	f000 f87c 	bl	8009ca4 <_printf_i>
 8009bac:	e7eb      	b.n	8009b86 <_svfiprintf_r+0x1c2>
 8009bae:	bf00      	nop
 8009bb0:	0800a258 	.word	0x0800a258
 8009bb4:	0800a25e 	.word	0x0800a25e
 8009bb8:	0800a262 	.word	0x0800a262
 8009bbc:	00000000 	.word	0x00000000
 8009bc0:	0800990d 	.word	0x0800990d

08009bc4 <_printf_common>:
 8009bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc8:	4616      	mov	r6, r2
 8009bca:	4699      	mov	r9, r3
 8009bcc:	688a      	ldr	r2, [r1, #8]
 8009bce:	690b      	ldr	r3, [r1, #16]
 8009bd0:	4607      	mov	r7, r0
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	bfb8      	it	lt
 8009bd6:	4613      	movlt	r3, r2
 8009bd8:	6033      	str	r3, [r6, #0]
 8009bda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bde:	460c      	mov	r4, r1
 8009be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009be4:	b10a      	cbz	r2, 8009bea <_printf_common+0x26>
 8009be6:	3301      	adds	r3, #1
 8009be8:	6033      	str	r3, [r6, #0]
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	0699      	lsls	r1, r3, #26
 8009bee:	bf42      	ittt	mi
 8009bf0:	6833      	ldrmi	r3, [r6, #0]
 8009bf2:	3302      	addmi	r3, #2
 8009bf4:	6033      	strmi	r3, [r6, #0]
 8009bf6:	6825      	ldr	r5, [r4, #0]
 8009bf8:	f015 0506 	ands.w	r5, r5, #6
 8009bfc:	d106      	bne.n	8009c0c <_printf_common+0x48>
 8009bfe:	f104 0a19 	add.w	sl, r4, #25
 8009c02:	68e3      	ldr	r3, [r4, #12]
 8009c04:	6832      	ldr	r2, [r6, #0]
 8009c06:	1a9b      	subs	r3, r3, r2
 8009c08:	42ab      	cmp	r3, r5
 8009c0a:	dc28      	bgt.n	8009c5e <_printf_common+0x9a>
 8009c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c10:	1e13      	subs	r3, r2, #0
 8009c12:	6822      	ldr	r2, [r4, #0]
 8009c14:	bf18      	it	ne
 8009c16:	2301      	movne	r3, #1
 8009c18:	0692      	lsls	r2, r2, #26
 8009c1a:	d42d      	bmi.n	8009c78 <_printf_common+0xb4>
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	4638      	mov	r0, r7
 8009c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c24:	47c0      	blx	r8
 8009c26:	3001      	adds	r0, #1
 8009c28:	d020      	beq.n	8009c6c <_printf_common+0xa8>
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	68e5      	ldr	r5, [r4, #12]
 8009c2e:	f003 0306 	and.w	r3, r3, #6
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	bf18      	it	ne
 8009c36:	2500      	movne	r5, #0
 8009c38:	6832      	ldr	r2, [r6, #0]
 8009c3a:	f04f 0600 	mov.w	r6, #0
 8009c3e:	68a3      	ldr	r3, [r4, #8]
 8009c40:	bf08      	it	eq
 8009c42:	1aad      	subeq	r5, r5, r2
 8009c44:	6922      	ldr	r2, [r4, #16]
 8009c46:	bf08      	it	eq
 8009c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	bfc4      	itt	gt
 8009c50:	1a9b      	subgt	r3, r3, r2
 8009c52:	18ed      	addgt	r5, r5, r3
 8009c54:	341a      	adds	r4, #26
 8009c56:	42b5      	cmp	r5, r6
 8009c58:	d11a      	bne.n	8009c90 <_printf_common+0xcc>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	e008      	b.n	8009c70 <_printf_common+0xac>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4652      	mov	r2, sl
 8009c62:	4649      	mov	r1, r9
 8009c64:	4638      	mov	r0, r7
 8009c66:	47c0      	blx	r8
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d103      	bne.n	8009c74 <_printf_common+0xb0>
 8009c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c74:	3501      	adds	r5, #1
 8009c76:	e7c4      	b.n	8009c02 <_printf_common+0x3e>
 8009c78:	2030      	movs	r0, #48	; 0x30
 8009c7a:	18e1      	adds	r1, r4, r3
 8009c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c86:	4422      	add	r2, r4
 8009c88:	3302      	adds	r3, #2
 8009c8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c8e:	e7c5      	b.n	8009c1c <_printf_common+0x58>
 8009c90:	2301      	movs	r3, #1
 8009c92:	4622      	mov	r2, r4
 8009c94:	4649      	mov	r1, r9
 8009c96:	4638      	mov	r0, r7
 8009c98:	47c0      	blx	r8
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	d0e6      	beq.n	8009c6c <_printf_common+0xa8>
 8009c9e:	3601      	adds	r6, #1
 8009ca0:	e7d9      	b.n	8009c56 <_printf_common+0x92>
	...

08009ca4 <_printf_i>:
 8009ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca8:	7e0f      	ldrb	r7, [r1, #24]
 8009caa:	4691      	mov	r9, r2
 8009cac:	2f78      	cmp	r7, #120	; 0x78
 8009cae:	4680      	mov	r8, r0
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	469a      	mov	sl, r3
 8009cb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cba:	d807      	bhi.n	8009ccc <_printf_i+0x28>
 8009cbc:	2f62      	cmp	r7, #98	; 0x62
 8009cbe:	d80a      	bhi.n	8009cd6 <_printf_i+0x32>
 8009cc0:	2f00      	cmp	r7, #0
 8009cc2:	f000 80d9 	beq.w	8009e78 <_printf_i+0x1d4>
 8009cc6:	2f58      	cmp	r7, #88	; 0x58
 8009cc8:	f000 80a4 	beq.w	8009e14 <_printf_i+0x170>
 8009ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cd4:	e03a      	b.n	8009d4c <_printf_i+0xa8>
 8009cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cda:	2b15      	cmp	r3, #21
 8009cdc:	d8f6      	bhi.n	8009ccc <_printf_i+0x28>
 8009cde:	a101      	add	r1, pc, #4	; (adr r1, 8009ce4 <_printf_i+0x40>)
 8009ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ce4:	08009d3d 	.word	0x08009d3d
 8009ce8:	08009d51 	.word	0x08009d51
 8009cec:	08009ccd 	.word	0x08009ccd
 8009cf0:	08009ccd 	.word	0x08009ccd
 8009cf4:	08009ccd 	.word	0x08009ccd
 8009cf8:	08009ccd 	.word	0x08009ccd
 8009cfc:	08009d51 	.word	0x08009d51
 8009d00:	08009ccd 	.word	0x08009ccd
 8009d04:	08009ccd 	.word	0x08009ccd
 8009d08:	08009ccd 	.word	0x08009ccd
 8009d0c:	08009ccd 	.word	0x08009ccd
 8009d10:	08009e5f 	.word	0x08009e5f
 8009d14:	08009d81 	.word	0x08009d81
 8009d18:	08009e41 	.word	0x08009e41
 8009d1c:	08009ccd 	.word	0x08009ccd
 8009d20:	08009ccd 	.word	0x08009ccd
 8009d24:	08009e81 	.word	0x08009e81
 8009d28:	08009ccd 	.word	0x08009ccd
 8009d2c:	08009d81 	.word	0x08009d81
 8009d30:	08009ccd 	.word	0x08009ccd
 8009d34:	08009ccd 	.word	0x08009ccd
 8009d38:	08009e49 	.word	0x08009e49
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	1d1a      	adds	r2, r3, #4
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	602a      	str	r2, [r5, #0]
 8009d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e0a4      	b.n	8009e9a <_printf_i+0x1f6>
 8009d50:	6820      	ldr	r0, [r4, #0]
 8009d52:	6829      	ldr	r1, [r5, #0]
 8009d54:	0606      	lsls	r6, r0, #24
 8009d56:	f101 0304 	add.w	r3, r1, #4
 8009d5a:	d50a      	bpl.n	8009d72 <_printf_i+0xce>
 8009d5c:	680e      	ldr	r6, [r1, #0]
 8009d5e:	602b      	str	r3, [r5, #0]
 8009d60:	2e00      	cmp	r6, #0
 8009d62:	da03      	bge.n	8009d6c <_printf_i+0xc8>
 8009d64:	232d      	movs	r3, #45	; 0x2d
 8009d66:	4276      	negs	r6, r6
 8009d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d6c:	230a      	movs	r3, #10
 8009d6e:	485e      	ldr	r0, [pc, #376]	; (8009ee8 <_printf_i+0x244>)
 8009d70:	e019      	b.n	8009da6 <_printf_i+0x102>
 8009d72:	680e      	ldr	r6, [r1, #0]
 8009d74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d78:	602b      	str	r3, [r5, #0]
 8009d7a:	bf18      	it	ne
 8009d7c:	b236      	sxthne	r6, r6
 8009d7e:	e7ef      	b.n	8009d60 <_printf_i+0xbc>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	6820      	ldr	r0, [r4, #0]
 8009d84:	1d19      	adds	r1, r3, #4
 8009d86:	6029      	str	r1, [r5, #0]
 8009d88:	0601      	lsls	r1, r0, #24
 8009d8a:	d501      	bpl.n	8009d90 <_printf_i+0xec>
 8009d8c:	681e      	ldr	r6, [r3, #0]
 8009d8e:	e002      	b.n	8009d96 <_printf_i+0xf2>
 8009d90:	0646      	lsls	r6, r0, #25
 8009d92:	d5fb      	bpl.n	8009d8c <_printf_i+0xe8>
 8009d94:	881e      	ldrh	r6, [r3, #0]
 8009d96:	2f6f      	cmp	r7, #111	; 0x6f
 8009d98:	bf0c      	ite	eq
 8009d9a:	2308      	moveq	r3, #8
 8009d9c:	230a      	movne	r3, #10
 8009d9e:	4852      	ldr	r0, [pc, #328]	; (8009ee8 <_printf_i+0x244>)
 8009da0:	2100      	movs	r1, #0
 8009da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009da6:	6865      	ldr	r5, [r4, #4]
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	bfa8      	it	ge
 8009dac:	6821      	ldrge	r1, [r4, #0]
 8009dae:	60a5      	str	r5, [r4, #8]
 8009db0:	bfa4      	itt	ge
 8009db2:	f021 0104 	bicge.w	r1, r1, #4
 8009db6:	6021      	strge	r1, [r4, #0]
 8009db8:	b90e      	cbnz	r6, 8009dbe <_printf_i+0x11a>
 8009dba:	2d00      	cmp	r5, #0
 8009dbc:	d04d      	beq.n	8009e5a <_printf_i+0x1b6>
 8009dbe:	4615      	mov	r5, r2
 8009dc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dc4:	fb03 6711 	mls	r7, r3, r1, r6
 8009dc8:	5dc7      	ldrb	r7, [r0, r7]
 8009dca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009dce:	4637      	mov	r7, r6
 8009dd0:	42bb      	cmp	r3, r7
 8009dd2:	460e      	mov	r6, r1
 8009dd4:	d9f4      	bls.n	8009dc0 <_printf_i+0x11c>
 8009dd6:	2b08      	cmp	r3, #8
 8009dd8:	d10b      	bne.n	8009df2 <_printf_i+0x14e>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	07de      	lsls	r6, r3, #31
 8009dde:	d508      	bpl.n	8009df2 <_printf_i+0x14e>
 8009de0:	6923      	ldr	r3, [r4, #16]
 8009de2:	6861      	ldr	r1, [r4, #4]
 8009de4:	4299      	cmp	r1, r3
 8009de6:	bfde      	ittt	le
 8009de8:	2330      	movle	r3, #48	; 0x30
 8009dea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009df2:	1b52      	subs	r2, r2, r5
 8009df4:	6122      	str	r2, [r4, #16]
 8009df6:	464b      	mov	r3, r9
 8009df8:	4621      	mov	r1, r4
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	f8cd a000 	str.w	sl, [sp]
 8009e00:	aa03      	add	r2, sp, #12
 8009e02:	f7ff fedf 	bl	8009bc4 <_printf_common>
 8009e06:	3001      	adds	r0, #1
 8009e08:	d14c      	bne.n	8009ea4 <_printf_i+0x200>
 8009e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0e:	b004      	add	sp, #16
 8009e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e14:	4834      	ldr	r0, [pc, #208]	; (8009ee8 <_printf_i+0x244>)
 8009e16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e1a:	6829      	ldr	r1, [r5, #0]
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e22:	6029      	str	r1, [r5, #0]
 8009e24:	061d      	lsls	r5, r3, #24
 8009e26:	d514      	bpl.n	8009e52 <_printf_i+0x1ae>
 8009e28:	07df      	lsls	r7, r3, #31
 8009e2a:	bf44      	itt	mi
 8009e2c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e30:	6023      	strmi	r3, [r4, #0]
 8009e32:	b91e      	cbnz	r6, 8009e3c <_printf_i+0x198>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	f023 0320 	bic.w	r3, r3, #32
 8009e3a:	6023      	str	r3, [r4, #0]
 8009e3c:	2310      	movs	r3, #16
 8009e3e:	e7af      	b.n	8009da0 <_printf_i+0xfc>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	f043 0320 	orr.w	r3, r3, #32
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	2378      	movs	r3, #120	; 0x78
 8009e4a:	4828      	ldr	r0, [pc, #160]	; (8009eec <_printf_i+0x248>)
 8009e4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e50:	e7e3      	b.n	8009e1a <_printf_i+0x176>
 8009e52:	0659      	lsls	r1, r3, #25
 8009e54:	bf48      	it	mi
 8009e56:	b2b6      	uxthmi	r6, r6
 8009e58:	e7e6      	b.n	8009e28 <_printf_i+0x184>
 8009e5a:	4615      	mov	r5, r2
 8009e5c:	e7bb      	b.n	8009dd6 <_printf_i+0x132>
 8009e5e:	682b      	ldr	r3, [r5, #0]
 8009e60:	6826      	ldr	r6, [r4, #0]
 8009e62:	1d18      	adds	r0, r3, #4
 8009e64:	6961      	ldr	r1, [r4, #20]
 8009e66:	6028      	str	r0, [r5, #0]
 8009e68:	0635      	lsls	r5, r6, #24
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	d501      	bpl.n	8009e72 <_printf_i+0x1ce>
 8009e6e:	6019      	str	r1, [r3, #0]
 8009e70:	e002      	b.n	8009e78 <_printf_i+0x1d4>
 8009e72:	0670      	lsls	r0, r6, #25
 8009e74:	d5fb      	bpl.n	8009e6e <_printf_i+0x1ca>
 8009e76:	8019      	strh	r1, [r3, #0]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	4615      	mov	r5, r2
 8009e7c:	6123      	str	r3, [r4, #16]
 8009e7e:	e7ba      	b.n	8009df6 <_printf_i+0x152>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	2100      	movs	r1, #0
 8009e84:	1d1a      	adds	r2, r3, #4
 8009e86:	602a      	str	r2, [r5, #0]
 8009e88:	681d      	ldr	r5, [r3, #0]
 8009e8a:	6862      	ldr	r2, [r4, #4]
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 f82f 	bl	8009ef0 <memchr>
 8009e92:	b108      	cbz	r0, 8009e98 <_printf_i+0x1f4>
 8009e94:	1b40      	subs	r0, r0, r5
 8009e96:	6060      	str	r0, [r4, #4]
 8009e98:	6863      	ldr	r3, [r4, #4]
 8009e9a:	6123      	str	r3, [r4, #16]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ea2:	e7a8      	b.n	8009df6 <_printf_i+0x152>
 8009ea4:	462a      	mov	r2, r5
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	4640      	mov	r0, r8
 8009eaa:	6923      	ldr	r3, [r4, #16]
 8009eac:	47d0      	blx	sl
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d0ab      	beq.n	8009e0a <_printf_i+0x166>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	079b      	lsls	r3, r3, #30
 8009eb6:	d413      	bmi.n	8009ee0 <_printf_i+0x23c>
 8009eb8:	68e0      	ldr	r0, [r4, #12]
 8009eba:	9b03      	ldr	r3, [sp, #12]
 8009ebc:	4298      	cmp	r0, r3
 8009ebe:	bfb8      	it	lt
 8009ec0:	4618      	movlt	r0, r3
 8009ec2:	e7a4      	b.n	8009e0e <_printf_i+0x16a>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	4632      	mov	r2, r6
 8009ec8:	4649      	mov	r1, r9
 8009eca:	4640      	mov	r0, r8
 8009ecc:	47d0      	blx	sl
 8009ece:	3001      	adds	r0, #1
 8009ed0:	d09b      	beq.n	8009e0a <_printf_i+0x166>
 8009ed2:	3501      	adds	r5, #1
 8009ed4:	68e3      	ldr	r3, [r4, #12]
 8009ed6:	9903      	ldr	r1, [sp, #12]
 8009ed8:	1a5b      	subs	r3, r3, r1
 8009eda:	42ab      	cmp	r3, r5
 8009edc:	dcf2      	bgt.n	8009ec4 <_printf_i+0x220>
 8009ede:	e7eb      	b.n	8009eb8 <_printf_i+0x214>
 8009ee0:	2500      	movs	r5, #0
 8009ee2:	f104 0619 	add.w	r6, r4, #25
 8009ee6:	e7f5      	b.n	8009ed4 <_printf_i+0x230>
 8009ee8:	0800a269 	.word	0x0800a269
 8009eec:	0800a27a 	.word	0x0800a27a

08009ef0 <memchr>:
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	b510      	push	{r4, lr}
 8009ef4:	b2c9      	uxtb	r1, r1
 8009ef6:	4402      	add	r2, r0
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	4618      	mov	r0, r3
 8009efc:	d101      	bne.n	8009f02 <memchr+0x12>
 8009efe:	2000      	movs	r0, #0
 8009f00:	e003      	b.n	8009f0a <memchr+0x1a>
 8009f02:	7804      	ldrb	r4, [r0, #0]
 8009f04:	3301      	adds	r3, #1
 8009f06:	428c      	cmp	r4, r1
 8009f08:	d1f6      	bne.n	8009ef8 <memchr+0x8>
 8009f0a:	bd10      	pop	{r4, pc}

08009f0c <memcpy>:
 8009f0c:	440a      	add	r2, r1
 8009f0e:	4291      	cmp	r1, r2
 8009f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f14:	d100      	bne.n	8009f18 <memcpy+0xc>
 8009f16:	4770      	bx	lr
 8009f18:	b510      	push	{r4, lr}
 8009f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f1e:	4291      	cmp	r1, r2
 8009f20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f24:	d1f9      	bne.n	8009f1a <memcpy+0xe>
 8009f26:	bd10      	pop	{r4, pc}

08009f28 <memmove>:
 8009f28:	4288      	cmp	r0, r1
 8009f2a:	b510      	push	{r4, lr}
 8009f2c:	eb01 0402 	add.w	r4, r1, r2
 8009f30:	d902      	bls.n	8009f38 <memmove+0x10>
 8009f32:	4284      	cmp	r4, r0
 8009f34:	4623      	mov	r3, r4
 8009f36:	d807      	bhi.n	8009f48 <memmove+0x20>
 8009f38:	1e43      	subs	r3, r0, #1
 8009f3a:	42a1      	cmp	r1, r4
 8009f3c:	d008      	beq.n	8009f50 <memmove+0x28>
 8009f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f46:	e7f8      	b.n	8009f3a <memmove+0x12>
 8009f48:	4601      	mov	r1, r0
 8009f4a:	4402      	add	r2, r0
 8009f4c:	428a      	cmp	r2, r1
 8009f4e:	d100      	bne.n	8009f52 <memmove+0x2a>
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f5a:	e7f7      	b.n	8009f4c <memmove+0x24>

08009f5c <_free_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4605      	mov	r5, r0
 8009f60:	2900      	cmp	r1, #0
 8009f62:	d040      	beq.n	8009fe6 <_free_r+0x8a>
 8009f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f68:	1f0c      	subs	r4, r1, #4
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	bfb8      	it	lt
 8009f6e:	18e4      	addlt	r4, r4, r3
 8009f70:	f000 f910 	bl	800a194 <__malloc_lock>
 8009f74:	4a1c      	ldr	r2, [pc, #112]	; (8009fe8 <_free_r+0x8c>)
 8009f76:	6813      	ldr	r3, [r2, #0]
 8009f78:	b933      	cbnz	r3, 8009f88 <_free_r+0x2c>
 8009f7a:	6063      	str	r3, [r4, #4]
 8009f7c:	6014      	str	r4, [r2, #0]
 8009f7e:	4628      	mov	r0, r5
 8009f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f84:	f000 b90c 	b.w	800a1a0 <__malloc_unlock>
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	d908      	bls.n	8009f9e <_free_r+0x42>
 8009f8c:	6820      	ldr	r0, [r4, #0]
 8009f8e:	1821      	adds	r1, r4, r0
 8009f90:	428b      	cmp	r3, r1
 8009f92:	bf01      	itttt	eq
 8009f94:	6819      	ldreq	r1, [r3, #0]
 8009f96:	685b      	ldreq	r3, [r3, #4]
 8009f98:	1809      	addeq	r1, r1, r0
 8009f9a:	6021      	streq	r1, [r4, #0]
 8009f9c:	e7ed      	b.n	8009f7a <_free_r+0x1e>
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	b10b      	cbz	r3, 8009fa8 <_free_r+0x4c>
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	d9fa      	bls.n	8009f9e <_free_r+0x42>
 8009fa8:	6811      	ldr	r1, [r2, #0]
 8009faa:	1850      	adds	r0, r2, r1
 8009fac:	42a0      	cmp	r0, r4
 8009fae:	d10b      	bne.n	8009fc8 <_free_r+0x6c>
 8009fb0:	6820      	ldr	r0, [r4, #0]
 8009fb2:	4401      	add	r1, r0
 8009fb4:	1850      	adds	r0, r2, r1
 8009fb6:	4283      	cmp	r3, r0
 8009fb8:	6011      	str	r1, [r2, #0]
 8009fba:	d1e0      	bne.n	8009f7e <_free_r+0x22>
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	4401      	add	r1, r0
 8009fc2:	6011      	str	r1, [r2, #0]
 8009fc4:	6053      	str	r3, [r2, #4]
 8009fc6:	e7da      	b.n	8009f7e <_free_r+0x22>
 8009fc8:	d902      	bls.n	8009fd0 <_free_r+0x74>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	602b      	str	r3, [r5, #0]
 8009fce:	e7d6      	b.n	8009f7e <_free_r+0x22>
 8009fd0:	6820      	ldr	r0, [r4, #0]
 8009fd2:	1821      	adds	r1, r4, r0
 8009fd4:	428b      	cmp	r3, r1
 8009fd6:	bf01      	itttt	eq
 8009fd8:	6819      	ldreq	r1, [r3, #0]
 8009fda:	685b      	ldreq	r3, [r3, #4]
 8009fdc:	1809      	addeq	r1, r1, r0
 8009fde:	6021      	streq	r1, [r4, #0]
 8009fe0:	6063      	str	r3, [r4, #4]
 8009fe2:	6054      	str	r4, [r2, #4]
 8009fe4:	e7cb      	b.n	8009f7e <_free_r+0x22>
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	20000b80 	.word	0x20000b80

08009fec <sbrk_aligned>:
 8009fec:	b570      	push	{r4, r5, r6, lr}
 8009fee:	4e0e      	ldr	r6, [pc, #56]	; (800a028 <sbrk_aligned+0x3c>)
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	6831      	ldr	r1, [r6, #0]
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	b911      	cbnz	r1, 8009ffe <sbrk_aligned+0x12>
 8009ff8:	f000 f8bc 	bl	800a174 <_sbrk_r>
 8009ffc:	6030      	str	r0, [r6, #0]
 8009ffe:	4621      	mov	r1, r4
 800a000:	4628      	mov	r0, r5
 800a002:	f000 f8b7 	bl	800a174 <_sbrk_r>
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d00a      	beq.n	800a020 <sbrk_aligned+0x34>
 800a00a:	1cc4      	adds	r4, r0, #3
 800a00c:	f024 0403 	bic.w	r4, r4, #3
 800a010:	42a0      	cmp	r0, r4
 800a012:	d007      	beq.n	800a024 <sbrk_aligned+0x38>
 800a014:	1a21      	subs	r1, r4, r0
 800a016:	4628      	mov	r0, r5
 800a018:	f000 f8ac 	bl	800a174 <_sbrk_r>
 800a01c:	3001      	adds	r0, #1
 800a01e:	d101      	bne.n	800a024 <sbrk_aligned+0x38>
 800a020:	f04f 34ff 	mov.w	r4, #4294967295
 800a024:	4620      	mov	r0, r4
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	20000b84 	.word	0x20000b84

0800a02c <_malloc_r>:
 800a02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a030:	1ccd      	adds	r5, r1, #3
 800a032:	f025 0503 	bic.w	r5, r5, #3
 800a036:	3508      	adds	r5, #8
 800a038:	2d0c      	cmp	r5, #12
 800a03a:	bf38      	it	cc
 800a03c:	250c      	movcc	r5, #12
 800a03e:	2d00      	cmp	r5, #0
 800a040:	4607      	mov	r7, r0
 800a042:	db01      	blt.n	800a048 <_malloc_r+0x1c>
 800a044:	42a9      	cmp	r1, r5
 800a046:	d905      	bls.n	800a054 <_malloc_r+0x28>
 800a048:	230c      	movs	r3, #12
 800a04a:	2600      	movs	r6, #0
 800a04c:	603b      	str	r3, [r7, #0]
 800a04e:	4630      	mov	r0, r6
 800a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a054:	4e2e      	ldr	r6, [pc, #184]	; (800a110 <_malloc_r+0xe4>)
 800a056:	f000 f89d 	bl	800a194 <__malloc_lock>
 800a05a:	6833      	ldr	r3, [r6, #0]
 800a05c:	461c      	mov	r4, r3
 800a05e:	bb34      	cbnz	r4, 800a0ae <_malloc_r+0x82>
 800a060:	4629      	mov	r1, r5
 800a062:	4638      	mov	r0, r7
 800a064:	f7ff ffc2 	bl	8009fec <sbrk_aligned>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	4604      	mov	r4, r0
 800a06c:	d14d      	bne.n	800a10a <_malloc_r+0xde>
 800a06e:	6834      	ldr	r4, [r6, #0]
 800a070:	4626      	mov	r6, r4
 800a072:	2e00      	cmp	r6, #0
 800a074:	d140      	bne.n	800a0f8 <_malloc_r+0xcc>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	4631      	mov	r1, r6
 800a07a:	4638      	mov	r0, r7
 800a07c:	eb04 0803 	add.w	r8, r4, r3
 800a080:	f000 f878 	bl	800a174 <_sbrk_r>
 800a084:	4580      	cmp	r8, r0
 800a086:	d13a      	bne.n	800a0fe <_malloc_r+0xd2>
 800a088:	6821      	ldr	r1, [r4, #0]
 800a08a:	3503      	adds	r5, #3
 800a08c:	1a6d      	subs	r5, r5, r1
 800a08e:	f025 0503 	bic.w	r5, r5, #3
 800a092:	3508      	adds	r5, #8
 800a094:	2d0c      	cmp	r5, #12
 800a096:	bf38      	it	cc
 800a098:	250c      	movcc	r5, #12
 800a09a:	4638      	mov	r0, r7
 800a09c:	4629      	mov	r1, r5
 800a09e:	f7ff ffa5 	bl	8009fec <sbrk_aligned>
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	d02b      	beq.n	800a0fe <_malloc_r+0xd2>
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	442b      	add	r3, r5
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	e00e      	b.n	800a0cc <_malloc_r+0xa0>
 800a0ae:	6822      	ldr	r2, [r4, #0]
 800a0b0:	1b52      	subs	r2, r2, r5
 800a0b2:	d41e      	bmi.n	800a0f2 <_malloc_r+0xc6>
 800a0b4:	2a0b      	cmp	r2, #11
 800a0b6:	d916      	bls.n	800a0e6 <_malloc_r+0xba>
 800a0b8:	1961      	adds	r1, r4, r5
 800a0ba:	42a3      	cmp	r3, r4
 800a0bc:	6025      	str	r5, [r4, #0]
 800a0be:	bf18      	it	ne
 800a0c0:	6059      	strne	r1, [r3, #4]
 800a0c2:	6863      	ldr	r3, [r4, #4]
 800a0c4:	bf08      	it	eq
 800a0c6:	6031      	streq	r1, [r6, #0]
 800a0c8:	5162      	str	r2, [r4, r5]
 800a0ca:	604b      	str	r3, [r1, #4]
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	f104 060b 	add.w	r6, r4, #11
 800a0d2:	f000 f865 	bl	800a1a0 <__malloc_unlock>
 800a0d6:	f026 0607 	bic.w	r6, r6, #7
 800a0da:	1d23      	adds	r3, r4, #4
 800a0dc:	1af2      	subs	r2, r6, r3
 800a0de:	d0b6      	beq.n	800a04e <_malloc_r+0x22>
 800a0e0:	1b9b      	subs	r3, r3, r6
 800a0e2:	50a3      	str	r3, [r4, r2]
 800a0e4:	e7b3      	b.n	800a04e <_malloc_r+0x22>
 800a0e6:	6862      	ldr	r2, [r4, #4]
 800a0e8:	42a3      	cmp	r3, r4
 800a0ea:	bf0c      	ite	eq
 800a0ec:	6032      	streq	r2, [r6, #0]
 800a0ee:	605a      	strne	r2, [r3, #4]
 800a0f0:	e7ec      	b.n	800a0cc <_malloc_r+0xa0>
 800a0f2:	4623      	mov	r3, r4
 800a0f4:	6864      	ldr	r4, [r4, #4]
 800a0f6:	e7b2      	b.n	800a05e <_malloc_r+0x32>
 800a0f8:	4634      	mov	r4, r6
 800a0fa:	6876      	ldr	r6, [r6, #4]
 800a0fc:	e7b9      	b.n	800a072 <_malloc_r+0x46>
 800a0fe:	230c      	movs	r3, #12
 800a100:	4638      	mov	r0, r7
 800a102:	603b      	str	r3, [r7, #0]
 800a104:	f000 f84c 	bl	800a1a0 <__malloc_unlock>
 800a108:	e7a1      	b.n	800a04e <_malloc_r+0x22>
 800a10a:	6025      	str	r5, [r4, #0]
 800a10c:	e7de      	b.n	800a0cc <_malloc_r+0xa0>
 800a10e:	bf00      	nop
 800a110:	20000b80 	.word	0x20000b80

0800a114 <_realloc_r>:
 800a114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a118:	4680      	mov	r8, r0
 800a11a:	4614      	mov	r4, r2
 800a11c:	460e      	mov	r6, r1
 800a11e:	b921      	cbnz	r1, 800a12a <_realloc_r+0x16>
 800a120:	4611      	mov	r1, r2
 800a122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a126:	f7ff bf81 	b.w	800a02c <_malloc_r>
 800a12a:	b92a      	cbnz	r2, 800a138 <_realloc_r+0x24>
 800a12c:	f7ff ff16 	bl	8009f5c <_free_r>
 800a130:	4625      	mov	r5, r4
 800a132:	4628      	mov	r0, r5
 800a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a138:	f000 f838 	bl	800a1ac <_malloc_usable_size_r>
 800a13c:	4284      	cmp	r4, r0
 800a13e:	4607      	mov	r7, r0
 800a140:	d802      	bhi.n	800a148 <_realloc_r+0x34>
 800a142:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a146:	d812      	bhi.n	800a16e <_realloc_r+0x5a>
 800a148:	4621      	mov	r1, r4
 800a14a:	4640      	mov	r0, r8
 800a14c:	f7ff ff6e 	bl	800a02c <_malloc_r>
 800a150:	4605      	mov	r5, r0
 800a152:	2800      	cmp	r0, #0
 800a154:	d0ed      	beq.n	800a132 <_realloc_r+0x1e>
 800a156:	42bc      	cmp	r4, r7
 800a158:	4622      	mov	r2, r4
 800a15a:	4631      	mov	r1, r6
 800a15c:	bf28      	it	cs
 800a15e:	463a      	movcs	r2, r7
 800a160:	f7ff fed4 	bl	8009f0c <memcpy>
 800a164:	4631      	mov	r1, r6
 800a166:	4640      	mov	r0, r8
 800a168:	f7ff fef8 	bl	8009f5c <_free_r>
 800a16c:	e7e1      	b.n	800a132 <_realloc_r+0x1e>
 800a16e:	4635      	mov	r5, r6
 800a170:	e7df      	b.n	800a132 <_realloc_r+0x1e>
	...

0800a174 <_sbrk_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	2300      	movs	r3, #0
 800a178:	4d05      	ldr	r5, [pc, #20]	; (800a190 <_sbrk_r+0x1c>)
 800a17a:	4604      	mov	r4, r0
 800a17c:	4608      	mov	r0, r1
 800a17e:	602b      	str	r3, [r5, #0]
 800a180:	f7f6 fe34 	bl	8000dec <_sbrk>
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	d102      	bne.n	800a18e <_sbrk_r+0x1a>
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	b103      	cbz	r3, 800a18e <_sbrk_r+0x1a>
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	20000b88 	.word	0x20000b88

0800a194 <__malloc_lock>:
 800a194:	4801      	ldr	r0, [pc, #4]	; (800a19c <__malloc_lock+0x8>)
 800a196:	f000 b811 	b.w	800a1bc <__retarget_lock_acquire_recursive>
 800a19a:	bf00      	nop
 800a19c:	20000b8c 	.word	0x20000b8c

0800a1a0 <__malloc_unlock>:
 800a1a0:	4801      	ldr	r0, [pc, #4]	; (800a1a8 <__malloc_unlock+0x8>)
 800a1a2:	f000 b80c 	b.w	800a1be <__retarget_lock_release_recursive>
 800a1a6:	bf00      	nop
 800a1a8:	20000b8c 	.word	0x20000b8c

0800a1ac <_malloc_usable_size_r>:
 800a1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1b0:	1f18      	subs	r0, r3, #4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	bfbc      	itt	lt
 800a1b6:	580b      	ldrlt	r3, [r1, r0]
 800a1b8:	18c0      	addlt	r0, r0, r3
 800a1ba:	4770      	bx	lr

0800a1bc <__retarget_lock_acquire_recursive>:
 800a1bc:	4770      	bx	lr

0800a1be <__retarget_lock_release_recursive>:
 800a1be:	4770      	bx	lr

0800a1c0 <_init>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	bf00      	nop
 800a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c6:	bc08      	pop	{r3}
 800a1c8:	469e      	mov	lr, r3
 800a1ca:	4770      	bx	lr

0800a1cc <_fini>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	bf00      	nop
 800a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d2:	bc08      	pop	{r3}
 800a1d4:	469e      	mov	lr, r3
 800a1d6:	4770      	bx	lr
