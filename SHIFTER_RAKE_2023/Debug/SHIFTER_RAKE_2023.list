
SHIFTER_RAKE_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c118  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800c228  0800c228  0001c228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4f8  0800c4f8  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c4f8  0800c4f8  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c4f8  0800c4f8  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4f8  0800c4f8  0001c4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4fc  0800c4fc  0001c4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800c500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  200001d0  0800c6d0  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  0800c6d0  00020bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137ae  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003972  00000000  00000000  000339a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00037320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00038518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbfd  00000000  00000000  00039578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001612f  00000000  00000000  00055175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f927  00000000  00000000  0006b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fabcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000557c  00000000  00000000  000fac1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c210 	.word	0x0800c210

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800c210 	.word	0x0800c210

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800077e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078c:	d020      	beq.n	80007d0 <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 800078e:	68f9      	ldr	r1, [r7, #12]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	b2ca      	uxtb	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	0a19      	lsrs	r1, r3, #8
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3301      	adds	r3, #1
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	0c19      	lsrs	r1, r3, #16
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3302      	adds	r3, #2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	0e19      	lsrs	r1, r3, #24
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3303      	adds	r3, #3
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	3304      	adds	r3, #4
 80007ce:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d6:	d1cf      	bne.n	8000778 <read_flash+0xc>
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <save_to_flash>:

void save_to_flash(uint8_t *data){
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e8:	b08f      	sub	sp, #60	; 0x3c
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	466b      	mov	r3, sp
 80007f0:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcac 	bl	8000150 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	089e      	lsrs	r6, r3, #2
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fca7 	bl	8000150 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	18f1      	adds	r1, r6, r3
 8000814:	460b      	mov	r3, r1
 8000816:	3b01      	subs	r3, #1
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
 800081a:	2300      	movs	r3, #0
 800081c:	4688      	mov	r8, r1
 800081e:	4699      	mov	r9, r3
 8000820:	f04f 0200 	mov.w	r2, #0
 8000824:	f04f 0300 	mov.w	r3, #0
 8000828:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800082c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000830:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000834:	2300      	movs	r3, #0
 8000836:	460c      	mov	r4, r1
 8000838:	461d      	mov	r5, r3
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	016b      	lsls	r3, r5, #5
 8000844:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000848:	0162      	lsls	r2, r4, #5
 800084a:	008b      	lsls	r3, r1, #2
 800084c:	3307      	adds	r3, #7
 800084e:	08db      	lsrs	r3, r3, #3
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	ebad 0d03 	sub.w	sp, sp, r3
 8000856:	466b      	mov	r3, sp
 8000858:	3303      	adds	r3, #3
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8000860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000862:	f7ff fc75 	bl	8000150 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800086e:	f00a fa01 	bl	800ac74 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000876:	f00a fa25 	bl	800acc4 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800087a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800087c:	f7ff fc68 	bl	8000150 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8000884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000886:	f7ff fc63 	bl	8000150 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff fc56 	bl	8000150 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 80008a8:	b29c      	uxth	r4, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fc50 	bl	8000150 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4423      	add	r3, r4
 80008c4:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80008c6:	857b      	strh	r3, [r7, #42]	; 0x2a
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80008c8:	f002 f934 	bl	8002b34 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 80008cc:	f002 f968 	bl	8002ba0 <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.PageAddress = FLASH_STORAGE;
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <save_to_flash+0x178>)
 80008d6:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbPages = pages;
 80008d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008da:	b29b      	uxth	r3, r3
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError;

	volatile uint32_t write_cnt=0, index=0;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]

	volatile HAL_StatusTypeDef status;
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80008e6:	f107 0214 	add.w	r2, r7, #20
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 fa33 	bl	8002d5c <HAL_FLASHEx_Erase>
 80008f6:	4603      	mov	r3, r0
 80008f8:	72fb      	strb	r3, [r7, #11]
	while(index < data_length)
 80008fa:	e020      	b.n	800093e <save_to_flash+0x15a>
	{
		if (status == HAL_OK){
 80008fc:	7afb      	ldrb	r3, [r7, #11]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11c      	bne.n	800093e <save_to_flash+0x15a>
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800090a:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000916:	2200      	movs	r2, #0
 8000918:	469a      	mov	sl, r3
 800091a:	4693      	mov	fp, r2
 800091c:	4652      	mov	r2, sl
 800091e:	465b      	mov	r3, fp
 8000920:	2002      	movs	r0, #2
 8000922:	f002 f897 	bl	8002a54 <HAL_FLASH_Program>
 8000926:	4603      	mov	r3, r0
 8000928:	72fb      	strb	r3, [r7, #11]
			if(status == HAL_OK){
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d105      	bne.n	800093e <save_to_flash+0x15a>
				write_cnt += 4;
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	3304      	adds	r3, #4
 8000936:	613b      	str	r3, [r7, #16]
				index++;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
	while(index < data_length)
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000942:	429a      	cmp	r2, r3
 8000944:	d3da      	bcc.n	80008fc <save_to_flash+0x118>
			}
		}
	}

	HAL_FLASH_OB_Lock();
 8000946:	f002 f947 	bl	8002bd8 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 800094a:	f002 f919 	bl	8002b80 <HAL_FLASH_Lock>
 800094e:	f8d7 d000 	ldr.w	sp, [r7]
}
 8000952:	bf00      	nop
 8000954:	373c      	adds	r7, #60	; 0x3c
 8000956:	46bd      	mov	sp, r7
 8000958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800095c:	08019000 	.word	0x08019000

08000960 <LerADCS>:
uint16_t speed_div_y[2] = {1117, 2824};					//  -		-		-		-		-		-		-		-  y
uint16_t ADCValue[3] = {0, 0, 0};
int8_t buffer2[6];
uint8_t rx_buffer[2];

void LerADCS(){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	//Este trecho testa somente um spi por round, evitando perca de tempo
	if (spi_detection == 1){
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <LerADCS+0x70>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d10c      	bne.n	8000986 <LerADCS+0x26>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);  //descarga para seleção do G27
 800096c:	2301      	movs	r3, #1
 800096e:	2202      	movs	r2, #2
 8000970:	4918      	ldr	r1, [pc, #96]	; (80009d4 <LerADCS+0x74>)
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <LerADCS+0x78>)
 8000974:	f004 fe66 	bl	8005644 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);
 8000978:	2301      	movs	r3, #1
 800097a:	2202      	movs	r2, #2
 800097c:	4915      	ldr	r1, [pc, #84]	; (80009d4 <LerADCS+0x74>)
 800097e:	4816      	ldr	r0, [pc, #88]	; (80009d8 <LerADCS+0x78>)
 8000980:	f004 fe60 	bl	8005644 <HAL_SPI_Receive>
 8000984:	e00b      	b.n	800099e <LerADCS+0x3e>
		 }
	else {
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);  // descarga para seleção do G25
 8000986:	2301      	movs	r3, #1
 8000988:	2202      	movs	r2, #2
 800098a:	4912      	ldr	r1, [pc, #72]	; (80009d4 <LerADCS+0x74>)
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <LerADCS+0x7c>)
 800098e:	f004 fe59 	bl	8005644 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);
 8000992:	2301      	movs	r3, #1
 8000994:	2202      	movs	r2, #2
 8000996:	490f      	ldr	r1, [pc, #60]	; (80009d4 <LerADCS+0x74>)
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <LerADCS+0x7c>)
 800099a:	f004 fe53 	bl	8005644 <HAL_SPI_Receive>
	 }
	//Este trecho salva o valor da tensao do capacitor em cada teste
	if (spi_detection == 1){						// se estiver conectado g25 este valor reduz, pois o jumper entre os pinos 1 [spi1] e 9 [cap] faz isso.
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <LerADCS+0x70>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d107      	bne.n	80009b6 <LerADCS+0x56>
	  spi_values[0] = ADCValue[2];
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <LerADCS+0x80>)
 80009a8:	889a      	ldrh	r2, [r3, #4]
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <LerADCS+0x84>)
 80009ac:	801a      	strh	r2, [r3, #0]
	  spi_detection = 2;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <LerADCS+0x70>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e006      	b.n	80009c4 <LerADCS+0x64>
	}
	else{											// se estiver conectado g27 este valor reduz, pois o jumper entre os pinos 7 [spi2] e 9 [cap] faz isso.
	  spi_values[1] = ADCValue[2];									// quando excitado spi2 gera reducao na tensao do cap caso esteja conectado o g25
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <LerADCS+0x80>)
 80009b8:	889a      	ldrh	r2, [r3, #4]
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <LerADCS+0x84>)
 80009bc:	805a      	strh	r2, [r3, #2]
	  spi_detection = 1;
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <LerADCS+0x70>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[0]), 100);
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[1]), 100);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", ADCValue[2]), 100);
  //HAL_UART_Transmit(&huart1, "      ", 6, 100);
  //HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  HAL_Delay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f001 f8e3 	bl	8001b90 <HAL_Delay>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000368 	.word	0x20000368
 80009d8:	20000260 	.word	0x20000260
 80009dc:	200002b8 	.word	0x200002b8
 80009e0:	20000360 	.word	0x20000360
 80009e4:	2000035c 	.word	0x2000035c

080009e8 <LerSPI>:

void LerSPI(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	481c      	ldr	r0, [pc, #112]	; (8000a64 <LerSPI+0x7c>)
 80009f4:	f002 fbf5 	bl	80031e2 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f001 f8c9 	bl	8001b90 <HAL_Delay>
//  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 50);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", spi_values[0]), 100);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", spi_values[1]), 100);

  if (spi_values[0] - spi_values[1] > -10 && spi_values[0] - spi_values[1] < 10){
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <LerSPI+0x80>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <LerSPI+0x80>)
 8000a06:	885b      	ldrh	r3, [r3, #2]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	f113 0f09 	cmn.w	r3, #9
 8000a0e:	db07      	blt.n	8000a20 <LerSPI+0x38>
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <LerSPI+0x80>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <LerSPI+0x80>)
 8000a18:	885b      	ldrh	r3, [r3, #2]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b09      	cmp	r3, #9
 8000a1e:	dd12      	ble.n	8000a46 <LerSPI+0x5e>
//	  HAL_UART_Transmit(&huart1, "DESCON", 6, 100);
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
	//  return;
  }
  else if (spi_values[0] < spi_values[1]){ 					// significa que está conectado o G27
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <LerSPI+0x80>)
 8000a22:	881a      	ldrh	r2, [r3, #0]
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <LerSPI+0x80>)
 8000a26:	885b      	ldrh	r3, [r3, #2]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d206      	bcs.n	8000a3a <LerSPI+0x52>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 50);
 8000a2c:	2332      	movs	r3, #50	; 0x32
 8000a2e:	2202      	movs	r2, #2
 8000a30:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LerSPI+0x84>)
 8000a32:	480f      	ldr	r0, [pc, #60]	; (8000a70 <LerSPI+0x88>)
 8000a34:	f004 fe06 	bl	8005644 <HAL_SPI_Receive>
 8000a38:	e005      	b.n	8000a46 <LerSPI+0x5e>
//	  HAL_UART_Transmit(&huart1, "G25   ", 6, 100);
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  }
  else{													// significa que está conectado o G25
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 50);
 8000a3a:	2332      	movs	r3, #50	; 0x32
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	490b      	ldr	r1, [pc, #44]	; (8000a6c <LerSPI+0x84>)
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <LerSPI+0x8c>)
 8000a42:	f004 fdff 	bl	8005644 <HAL_SPI_Receive>
//	  HAL_UART_Transmit(&huart1, "G27   ", 6, 100);
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  }

  HAL_Delay(1);
 8000a46:	2001      	movs	r0, #1
 8000a48:	f001 f8a2 	bl	8001b90 <HAL_Delay>
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <LerSPI+0x7c>)
 8000a54:	f002 fbc5 	bl	80031e2 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f001 f899 	bl	8001b90 <HAL_Delay>

//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[0]), 100);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[1]), 100);
//  HAL_UART_Transmit(&huart1, "      ", 6, 100);
//  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40010c00 	.word	0x40010c00
 8000a68:	2000035c 	.word	0x2000035c
 8000a6c:	20000368 	.word	0x20000368
 8000a70:	200002b8 	.word	0x200002b8
 8000a74:	20000260 	.word	0x20000260

08000a78 <Calibrar>:

void Calibrar(void)
{
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b092      	sub	sp, #72	; 0x48
 8000a7c:	af02      	add	r7, sp, #8
	if (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){			// se botão de calibração pressionado
 8000a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a82:	4885      	ldr	r0, [pc, #532]	; (8000c98 <Calibrar+0x220>)
 8000a84:	f002 fb96 	bl	80031b4 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f040 80fa 	bne.w	8000c84 <Calibrar+0x20c>
		HAL_Delay(500);
 8000a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a94:	f001 f87c 	bl	8001b90 <HAL_Delay>
		char params_to_save[50];
		uint16_t axis_x_min_max[2] = {9999, 0};
 8000a98:	f242 730f 	movw	r3, #9999	; 0x270f
 8000a9c:	873b      	strh	r3, [r7, #56]	; 0x38
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	877b      	strh	r3, [r7, #58]	; 0x3a
		uint16_t axis_y_min_max[2] = {9999, 0};
 8000aa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8000aa6:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000aac:	e029      	b.n	8000b02 <Calibrar+0x8a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab2:	487a      	ldr	r0, [pc, #488]	; (8000c9c <Calibrar+0x224>)
 8000ab4:	f002 fbad 	bl	8003212 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8000ab8:	2032      	movs	r0, #50	; 0x32
 8000aba:	f001 f869 	bl	8001b90 <HAL_Delay>
			LerADCS();  									//le posicao dos eixos
 8000abe:	f7ff ff4f 	bl	8000960 <LerADCS>
			if (ADCValue[0] < axis_x_min_max[0]){			// define o menor valor detectado no eixo x
 8000ac2:	4b77      	ldr	r3, [pc, #476]	; (8000ca0 <Calibrar+0x228>)
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d202      	bcs.n	8000ad2 <Calibrar+0x5a>
				axis_x_min_max[0] = ADCValue[0];
 8000acc:	4b74      	ldr	r3, [pc, #464]	; (8000ca0 <Calibrar+0x228>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	873b      	strh	r3, [r7, #56]	; 0x38
			}
			if (ADCValue[0] > axis_x_min_max[1]){			// define o maior valor detectado no eixo x
 8000ad2:	4b73      	ldr	r3, [pc, #460]	; (8000ca0 <Calibrar+0x228>)
 8000ad4:	881a      	ldrh	r2, [r3, #0]
 8000ad6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d902      	bls.n	8000ae2 <Calibrar+0x6a>
				axis_x_min_max[1] = ADCValue[0];
 8000adc:	4b70      	ldr	r3, [pc, #448]	; (8000ca0 <Calibrar+0x228>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	877b      	strh	r3, [r7, #58]	; 0x3a
			}
			if (ADCValue[1] < axis_y_min_max[0]){			// define o menor valor detectado no eixo y
 8000ae2:	4b6f      	ldr	r3, [pc, #444]	; (8000ca0 <Calibrar+0x228>)
 8000ae4:	885a      	ldrh	r2, [r3, #2]
 8000ae6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d202      	bcs.n	8000af2 <Calibrar+0x7a>
				axis_y_min_max[0] = ADCValue[1];
 8000aec:	4b6c      	ldr	r3, [pc, #432]	; (8000ca0 <Calibrar+0x228>)
 8000aee:	885b      	ldrh	r3, [r3, #2]
 8000af0:	86bb      	strh	r3, [r7, #52]	; 0x34
			}
			if (ADCValue[1] > axis_y_min_max[1]){			// define o maior valor detectado no eixo y
 8000af2:	4b6b      	ldr	r3, [pc, #428]	; (8000ca0 <Calibrar+0x228>)
 8000af4:	885a      	ldrh	r2, [r3, #2]
 8000af6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d902      	bls.n	8000b02 <Calibrar+0x8a>
				axis_y_min_max[1] = ADCValue[1];
 8000afc:	4b68      	ldr	r3, [pc, #416]	; (8000ca0 <Calibrar+0x228>)
 8000afe:	885b      	ldrh	r3, [r3, #2]
 8000b00:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b06:	4864      	ldr	r0, [pc, #400]	; (8000c98 <Calibrar+0x220>)
 8000b08:	f002 fb54 	bl	80031b4 <HAL_GPIO_ReadPin>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0cd      	beq.n	8000aae <Calibrar+0x36>
			}
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	4860      	ldr	r0, [pc, #384]	; (8000c9c <Calibrar+0x224>)
 8000b1a:	f002 fb62 	bl	80031e2 <HAL_GPIO_WritePin>

		uint16_t space_x = (axis_x_min_max[1]-axis_x_min_max[0])/3;
 8000b1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b20:	461a      	mov	r2, r3
 8000b22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	4a5f      	ldr	r2, [pc, #380]	; (8000ca4 <Calibrar+0x22c>)
 8000b28:	fb82 1203 	smull	r1, r2, r2, r3
 8000b2c:	17db      	asrs	r3, r3, #31
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	87fb      	strh	r3, [r7, #62]	; 0x3e
		speed_div_x[0] = axis_x_min_max[0] + (space_x*0.8); 					//calcula as linhas de calibracao do eixo x
 8000b32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fd8f 	bl	8000658 <__aeabi_i2d>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	460d      	mov	r5, r1
 8000b3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd89 	bl	8000658 <__aeabi_i2d>
 8000b46:	a352      	add	r3, pc, #328	; (adr r3, 8000c90 <Calibrar+0x218>)
 8000b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4c:	f7ff fb08 	bl	8000160 <__aeabi_dmul>
 8000b50:	4602      	mov	r2, r0
 8000b52:	460b      	mov	r3, r1
 8000b54:	4620      	mov	r0, r4
 8000b56:	4629      	mov	r1, r5
 8000b58:	f7ff fc32 	bl	80003c0 <__adddf3>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4610      	mov	r0, r2
 8000b62:	4619      	mov	r1, r3
 8000b64:	f7ff fde2 	bl	800072c <__aeabi_d2uiz>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ca8 <Calibrar+0x230>)
 8000b6e:	801a      	strh	r2, [r3, #0]

		speed_div_x[1] = axis_x_min_max[1] - (space_x*0.8);
 8000b70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fd70 	bl	8000658 <__aeabi_i2d>
 8000b78:	4604      	mov	r4, r0
 8000b7a:	460d      	mov	r5, r1
 8000b7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fd6a 	bl	8000658 <__aeabi_i2d>
 8000b84:	a342      	add	r3, pc, #264	; (adr r3, 8000c90 <Calibrar+0x218>)
 8000b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8a:	f7ff fae9 	bl	8000160 <__aeabi_dmul>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	460b      	mov	r3, r1
 8000b92:	4620      	mov	r0, r4
 8000b94:	4629      	mov	r1, r5
 8000b96:	f7ff fc11 	bl	80003bc <__aeabi_dsub>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f7ff fdc3 	bl	800072c <__aeabi_d2uiz>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <Calibrar+0x230>)
 8000bac:	805a      	strh	r2, [r3, #2]

		uint16_t space_y = (axis_y_min_max[1]-axis_y_min_max[0])/3;
 8000bae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	4a3b      	ldr	r2, [pc, #236]	; (8000ca4 <Calibrar+0x22c>)
 8000bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbc:	17db      	asrs	r3, r3, #31
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
		speed_div_y[0] = axis_y_min_max[0] + (space_y*0.8); 					//calcula as linhas de calibracao do eixo y
 8000bc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd47 	bl	8000658 <__aeabi_i2d>
 8000bca:	4604      	mov	r4, r0
 8000bcc:	460d      	mov	r5, r1
 8000bce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fd41 	bl	8000658 <__aeabi_i2d>
 8000bd6:	a32e      	add	r3, pc, #184	; (adr r3, 8000c90 <Calibrar+0x218>)
 8000bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bdc:	f7ff fac0 	bl	8000160 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4620      	mov	r0, r4
 8000be6:	4629      	mov	r1, r5
 8000be8:	f7ff fbea 	bl	80003c0 <__adddf3>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f7ff fd9a 	bl	800072c <__aeabi_d2uiz>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <Calibrar+0x234>)
 8000bfe:	801a      	strh	r2, [r3, #0]

		speed_div_y[1] = axis_y_min_max[1] - (space_y*0.8);
 8000c00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fd28 	bl	8000658 <__aeabi_i2d>
 8000c08:	4604      	mov	r4, r0
 8000c0a:	460d      	mov	r5, r1
 8000c0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fd22 	bl	8000658 <__aeabi_i2d>
 8000c14:	a31e      	add	r3, pc, #120	; (adr r3, 8000c90 <Calibrar+0x218>)
 8000c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1a:	f7ff faa1 	bl	8000160 <__aeabi_dmul>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	460b      	mov	r3, r1
 8000c22:	4620      	mov	r0, r4
 8000c24:	4629      	mov	r1, r5
 8000c26:	f7ff fbc9 	bl	80003bc <__aeabi_dsub>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	f7ff fd7b 	bl	800072c <__aeabi_d2uiz>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <Calibrar+0x234>)
 8000c3c:	805a      	strh	r2, [r3, #2]

		sprintf(params_to_save, "%u,%u,%u,%u,", speed_div_x[0], speed_div_x[1], speed_div_y[0], speed_div_y[1]);
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <Calibrar+0x230>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <Calibrar+0x230>)
 8000c46:	885b      	ldrh	r3, [r3, #2]
 8000c48:	461c      	mov	r4, r3
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <Calibrar+0x234>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <Calibrar+0x234>)
 8000c52:	885b      	ldrh	r3, [r3, #2]
 8000c54:	4638      	mov	r0, r7
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	9200      	str	r2, [sp, #0]
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	4914      	ldr	r1, [pc, #80]	; (8000cb0 <Calibrar+0x238>)
 8000c60:	f00a f810 	bl	800ac84 <siprintf>
		save_to_flash((uint8_t *)params_to_save);
 8000c64:	463b      	mov	r3, r7
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fdbc 	bl	80007e4 <save_to_flash>
		HAL_UART_Transmit(&huart1, (uint8_t *)params_to_save, (int)sizeof(params_to_save), 100);
 8000c6c:	4639      	mov	r1, r7
 8000c6e:	2364      	movs	r3, #100	; 0x64
 8000c70:	2232      	movs	r2, #50	; 0x32
 8000c72:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <Calibrar+0x23c>)
 8000c74:	f005 f9e3 	bl	800603e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n ", 2, 100);
 8000c78:	2364      	movs	r3, #100	; 0x64
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <Calibrar+0x240>)
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <Calibrar+0x23c>)
 8000c80:	f005 f9dd 	bl	800603e <HAL_UART_Transmit>

	}
}
 8000c84:	bf00      	nop
 8000c86:	3740      	adds	r7, #64	; 0x40
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8c:	f3af 8000 	nop.w
 8000c90:	9999999a 	.word	0x9999999a
 8000c94:	3fe99999 	.word	0x3fe99999
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	20000360 	.word	0x20000360
 8000ca4:	55555556 	.word	0x55555556
 8000ca8:	20000004 	.word	0x20000004
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	0800c228 	.word	0x0800c228
 8000cb4:	20000310 	.word	0x20000310
 8000cb8:	0800c238 	.word	0x0800c238

08000cbc <update_data_from_flash>:

void update_data_from_flash(uint16_t (* speed_div_x), uint16_t (* speed_div_y)){									// PRECISA FINALIZAR ANTES DE TESTAR
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0b4      	sub	sp, #208	; 0xd0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	char data[0xC0];
	read_flash((uint8_t *)data);
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd4e 	bl	800076c <read_flash>
	char * token = strtok(data,",");				//first strtok go to variable directly
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4922      	ldr	r1, [pc, #136]	; (8000d60 <update_data_from_flash+0xa4>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f009 fffc 	bl	800acd4 <strtok>
 8000cdc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if (atoi(token)==0){
 8000ce0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000ce4:	f009 ff98 	bl	800ac18 <atoi>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d034      	beq.n	8000d58 <update_data_from_flash+0x9c>
    	return;
    }
	speed_div_x[0] = atoi(token);
 8000cee:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000cf2:	f009 ff91 	bl	800ac18 <atoi>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000cfe:	4918      	ldr	r1, [pc, #96]	; (8000d60 <update_data_from_flash+0xa4>)
 8000d00:	2000      	movs	r0, #0
 8000d02:	f009 ffe7 	bl	800acd4 <strtok>
 8000d06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_x[1] = atoi(token);
 8000d0a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000d0e:	f009 ff83 	bl	800ac18 <atoi>
 8000d12:	4602      	mov	r2, r0
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3302      	adds	r3, #2
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000d1c:	4910      	ldr	r1, [pc, #64]	; (8000d60 <update_data_from_flash+0xa4>)
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f009 ffd8 	bl	800acd4 <strtok>
 8000d24:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_y[0] = atoi(token);
 8000d28:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000d2c:	f009 ff74 	bl	800ac18 <atoi>
 8000d30:	4603      	mov	r3, r0
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000d38:	4909      	ldr	r1, [pc, #36]	; (8000d60 <update_data_from_flash+0xa4>)
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f009 ffca 	bl	800acd4 <strtok>
 8000d40:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_y[1] = atoi(token);
 8000d44:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000d48:	f009 ff66 	bl	800ac18 <atoi>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3302      	adds	r3, #2
 8000d52:	b292      	uxth	r2, r2
 8000d54:	801a      	strh	r2, [r3, #0]
 8000d56:	e000      	b.n	8000d5a <update_data_from_flash+0x9e>
    	return;
 8000d58:	bf00      	nop

}
 8000d5a:	37d0      	adds	r7, #208	; 0xd0
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800c23c 	.word	0x0800c23c

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f000 feaf 	bl	8001acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 fa2d 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f000 fb99 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d76:	f000 fb79 	bl	800146c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000d7a:	f009 fb69 	bl	800a450 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000d7e:	f000 fa83 	bl	8001288 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000d82:	f000 fadd 	bl	8001340 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d86:	f000 fb11 	bl	80013ac <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000d8a:	f000 fb45 	bl	8001418 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 8000d8e:	2203      	movs	r2, #3
 8000d90:	498d      	ldr	r1, [pc, #564]	; (8000fc8 <main+0x264>)
 8000d92:	488e      	ldr	r0, [pc, #568]	; (8000fcc <main+0x268>)
 8000d94:	f000 fff8 	bl	8001d88 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); 		//liga led
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9e:	488c      	ldr	r0, [pc, #560]	; (8000fd0 <main+0x26c>)
 8000da0:	f002 fa1f 	bl	80031e2 <HAL_GPIO_WritePin>
  update_data_from_flash(speed_div_x, speed_div_y);				//atualiza valores com os dados da memoria flash
 8000da4:	498b      	ldr	r1, [pc, #556]	; (8000fd4 <main+0x270>)
 8000da6:	488c      	ldr	r0, [pc, #560]	; (8000fd8 <main+0x274>)
 8000da8:	f7ff ff88 	bl	8000cbc <update_data_from_flash>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Calibrar();
 8000dac:	f7ff fe64 	bl	8000a78 <Calibrar>
	  LerADCS();
 8000db0:	f7ff fdd6 	bl	8000960 <LerADCS>
	  LerSPI();
 8000db4:	f7ff fe18 	bl	80009e8 <LerSPI>
//	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_x[0]), 100);
//	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_x[1]), 100);
//	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_y[0]), 100);
//	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_y[1]), 100);

	  uint16_t cambio_x_axis = (uint16_t) ADCValue[0];  //manopla x
 8000db8:	4b83      	ldr	r3, [pc, #524]	; (8000fc8 <main+0x264>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	80fb      	strh	r3, [r7, #6]
	  uint16_t cambio_y_axis = (uint16_t) ADCValue[1];  //manopla y
 8000dbe:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <main+0x264>)
 8000dc0:	885b      	ldrh	r3, [r3, #2]
 8000dc2:	80bb      	strh	r3, [r7, #4]

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis > speed_div_y[1]){  //speed 1
 8000dc4:	4b84      	ldr	r3, [pc, #528]	; (8000fd8 <main+0x274>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	88fa      	ldrh	r2, [r7, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d20c      	bcs.n	8000de8 <main+0x84>
 8000dce:	4b81      	ldr	r3, [pc, #516]	; (8000fd4 <main+0x270>)
 8000dd0:	885b      	ldrh	r3, [r3, #2]
 8000dd2:	88ba      	ldrh	r2, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d907      	bls.n	8000de8 <main+0x84>
		  joystickhid.botoes0 |= (uint8_t)(1<<0);	// SETA BOTAO 1
 8000dd8:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <main+0x278>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b7e      	ldr	r3, [pc, #504]	; (8000fdc <main+0x278>)
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e006      	b.n	8000df6 <main+0x92>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<0);	// RESETA BOTAO 1
 8000de8:	4b7c      	ldr	r3, [pc, #496]	; (8000fdc <main+0x278>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f023 0301 	bic.w	r3, r3, #1
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <main+0x278>)
 8000df4:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis < speed_div_y[0]){  //speed2
 8000df6:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <main+0x274>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	88fa      	ldrh	r2, [r7, #6]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d20c      	bcs.n	8000e1a <main+0xb6>
 8000e00:	4b74      	ldr	r3, [pc, #464]	; (8000fd4 <main+0x270>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	88ba      	ldrh	r2, [r7, #4]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d207      	bcs.n	8000e1a <main+0xb6>
		  joystickhid.botoes0 |= (uint8_t)(1<<1);	// SETA BOTAO 2
 8000e0a:	4b74      	ldr	r3, [pc, #464]	; (8000fdc <main+0x278>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b71      	ldr	r3, [pc, #452]	; (8000fdc <main+0x278>)
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e006      	b.n	8000e28 <main+0xc4>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<1);	// RESETA BOTAO 2
 8000e1a:	4b70      	ldr	r3, [pc, #448]	; (8000fdc <main+0x278>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	f023 0302 	bic.w	r3, r3, #2
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b6d      	ldr	r3, [pc, #436]	; (8000fdc <main+0x278>)
 8000e26:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis > speed_div_y[1]){  //speed 3
 8000e28:	4b6b      	ldr	r3, [pc, #428]	; (8000fd8 <main+0x274>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d911      	bls.n	8000e56 <main+0xf2>
 8000e32:	4b69      	ldr	r3, [pc, #420]	; (8000fd8 <main+0x274>)
 8000e34:	885b      	ldrh	r3, [r3, #2]
 8000e36:	88fa      	ldrh	r2, [r7, #6]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d20c      	bcs.n	8000e56 <main+0xf2>
 8000e3c:	4b65      	ldr	r3, [pc, #404]	; (8000fd4 <main+0x270>)
 8000e3e:	885b      	ldrh	r3, [r3, #2]
 8000e40:	88ba      	ldrh	r2, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d907      	bls.n	8000e56 <main+0xf2>
		  joystickhid.botoes0 |= (uint8_t)(1<<2);	// SETA BOTAO 3
 8000e46:	4b65      	ldr	r3, [pc, #404]	; (8000fdc <main+0x278>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b62      	ldr	r3, [pc, #392]	; (8000fdc <main+0x278>)
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e006      	b.n	8000e64 <main+0x100>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<2);	// RESETA BOTAO 3
 8000e56:	4b61      	ldr	r3, [pc, #388]	; (8000fdc <main+0x278>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f023 0304 	bic.w	r3, r3, #4
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b5e      	ldr	r3, [pc, #376]	; (8000fdc <main+0x278>)
 8000e62:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis < speed_div_y[0]){  //speed 4
 8000e64:	4b5c      	ldr	r3, [pc, #368]	; (8000fd8 <main+0x274>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d911      	bls.n	8000e92 <main+0x12e>
 8000e6e:	4b5a      	ldr	r3, [pc, #360]	; (8000fd8 <main+0x274>)
 8000e70:	885b      	ldrh	r3, [r3, #2]
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d20c      	bcs.n	8000e92 <main+0x12e>
 8000e78:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <main+0x270>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	88ba      	ldrh	r2, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d207      	bcs.n	8000e92 <main+0x12e>
		  joystickhid.botoes0 |= (uint8_t)(1<<3);	// SETA BOTAO 4
 8000e82:	4b56      	ldr	r3, [pc, #344]	; (8000fdc <main+0x278>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <main+0x278>)
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	e006      	b.n	8000ea0 <main+0x13c>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<3);	// RESETA BOTAO 4
 8000e92:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <main+0x278>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f023 0308 	bic.w	r3, r3, #8
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <main+0x278>)
 8000e9e:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis > speed_div_y[1]){    //speed5
 8000ea0:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <main+0x274>)
 8000ea2:	885b      	ldrh	r3, [r3, #2]
 8000ea4:	88fa      	ldrh	r2, [r7, #6]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d90c      	bls.n	8000ec4 <main+0x160>
 8000eaa:	4b4a      	ldr	r3, [pc, #296]	; (8000fd4 <main+0x270>)
 8000eac:	885b      	ldrh	r3, [r3, #2]
 8000eae:	88ba      	ldrh	r2, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d907      	bls.n	8000ec4 <main+0x160>
		  joystickhid.botoes0 |= (uint8_t)(1<<4);	// SETA BOTAO 5
 8000eb4:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <main+0x278>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f043 0310 	orr.w	r3, r3, #16
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <main+0x278>)
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e006      	b.n	8000ed2 <main+0x16e>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<4);	// RESETA BOTAO 5
 8000ec4:	4b45      	ldr	r3, [pc, #276]	; (8000fdc <main+0x278>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f023 0310 	bic.w	r3, r3, #16
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <main+0x278>)
 8000ed0:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0]){    // speed 6
 8000ed2:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <main+0x274>)
 8000ed4:	885b      	ldrh	r3, [r3, #2]
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90c      	bls.n	8000ef6 <main+0x192>
 8000edc:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <main+0x270>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	88ba      	ldrh	r2, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d207      	bcs.n	8000ef6 <main+0x192>
		  joystickhid.botoes0 |= (uint8_t)(1<<5);	// SETA BOTAO 6
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <main+0x278>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f043 0320 	orr.w	r3, r3, #32
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <main+0x278>)
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e006      	b.n	8000f04 <main+0x1a0>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5);	// RESETA BOTAO 6
 8000ef6:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <main+0x278>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	f023 0320 	bic.w	r3, r3, #32
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <main+0x278>)
 8000f02:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<0))  {
 8000f04:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <main+0x27c>)
 8000f06:	785b      	ldrb	r3, [r3, #1]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d007      	beq.n	8000f20 <main+0x1bc>
		  joystickhid.botoes0 |= (uint16_t) (1<<6);  // SETA BOTAO 7
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <main+0x278>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <main+0x278>)
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e006      	b.n	8000f2e <main+0x1ca>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 7
 8000f20:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <main+0x278>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <main+0x278>)
 8000f2c:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<1))  {
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <main+0x27c>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <main+0x1e6>
		  joystickhid.botoes0 |= (uint16_t)(1<<7);	// SETA BOTAO 8
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <main+0x278>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <main+0x278>)
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e006      	b.n	8000f58 <main+0x1f4>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 8
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <main+0x278>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <main+0x278>)
 8000f56:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<2))  {
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <main+0x27c>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d007      	beq.n	8000f74 <main+0x210>
		  joystickhid.botoes1 |= (uint16_t)(1<<0);	// SETA BOTAO 9
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <main+0x278>)
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <main+0x278>)
 8000f70:	705a      	strb	r2, [r3, #1]
 8000f72:	e006      	b.n	8000f82 <main+0x21e>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 9
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <main+0x278>)
 8000f76:	785b      	ldrb	r3, [r3, #1]
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <main+0x278>)
 8000f80:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<3))  {
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <main+0x27c>)
 8000f84:	785b      	ldrb	r3, [r3, #1]
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <main+0x23a>
		  joystickhid.botoes1 |= (uint16_t)(1<<1);	// SETA BOTAO 10
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <main+0x278>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <main+0x278>)
 8000f9a:	705a      	strb	r2, [r3, #1]
 8000f9c:	e006      	b.n	8000fac <main+0x248>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 10
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <main+0x278>)
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	f023 0302 	bic.w	r3, r3, #2
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <main+0x278>)
 8000faa:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<4))  {
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <main+0x27c>)
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d015      	beq.n	8000fe4 <main+0x280>
		  joystickhid.botoes1 |= (uint16_t)(1<<2);	// SETA BOTAO 11
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <main+0x278>)
 8000fba:	785b      	ldrb	r3, [r3, #1]
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <main+0x278>)
 8000fc4:	705a      	strb	r2, [r3, #1]
 8000fc6:	e014      	b.n	8000ff2 <main+0x28e>
 8000fc8:	20000360 	.word	0x20000360
 8000fcc:	200001ec 	.word	0x200001ec
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	20000354 	.word	0x20000354
 8000fe0:	20000368 	.word	0x20000368
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<2);	// RESETA BOTAO 11
 8000fe4:	4b73      	ldr	r3, [pc, #460]	; (80011b4 <main+0x450>)
 8000fe6:	785b      	ldrb	r3, [r3, #1]
 8000fe8:	f023 0304 	bic.w	r3, r3, #4
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b71      	ldr	r3, [pc, #452]	; (80011b4 <main+0x450>)
 8000ff0:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<5))  {
 8000ff2:	4b71      	ldr	r3, [pc, #452]	; (80011b8 <main+0x454>)
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	f003 0320 	and.w	r3, r3, #32
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <main+0x2aa>
		  joystickhid.botoes1 |= (uint16_t)(1<<3);	// SETA BOTAO 12
 8000ffe:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <main+0x450>)
 8001000:	785b      	ldrb	r3, [r3, #1]
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b6a      	ldr	r3, [pc, #424]	; (80011b4 <main+0x450>)
 800100a:	705a      	strb	r2, [r3, #1]
 800100c:	e006      	b.n	800101c <main+0x2b8>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<3);	// RESETA BOTAO 12
 800100e:	4b69      	ldr	r3, [pc, #420]	; (80011b4 <main+0x450>)
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	f023 0308 	bic.w	r3, r3, #8
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <main+0x450>)
 800101a:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<6))  {
 800101c:	4b66      	ldr	r3, [pc, #408]	; (80011b8 <main+0x454>)
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <main+0x2d4>
		  joystickhid.botoes1 |= (uint16_t)(1<<4);	// SETA BOTAO 13
 8001028:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <main+0x450>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <main+0x450>)
 8001034:	705a      	strb	r2, [r3, #1]
 8001036:	e006      	b.n	8001046 <main+0x2e2>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<4);	// RESETA BOTAO 13
 8001038:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <main+0x450>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	f023 0310 	bic.w	r3, r3, #16
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <main+0x450>)
 8001044:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<7))  {
 8001046:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <main+0x454>)
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	b25b      	sxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	da07      	bge.n	8001060 <main+0x2fc>
		  joystickhid.botoes1 |= (uint16_t)(1<<5);	// SETA BOTAO 14
 8001050:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <main+0x450>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	f043 0320 	orr.w	r3, r3, #32
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <main+0x450>)
 800105c:	705a      	strb	r2, [r3, #1]
 800105e:	e006      	b.n	800106e <main+0x30a>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<5);	// RESETA BOTAO 14
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <main+0x450>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	f023 0320 	bic.w	r3, r3, #32
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <main+0x450>)
 800106c:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<0))  {
 800106e:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <main+0x454>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <main+0x326>
		  joystickhid.botoes1 |= (uint16_t)(1<<6);	// SETA BOTAO 15
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <main+0x450>)
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <main+0x450>)
 8001086:	705a      	strb	r2, [r3, #1]
 8001088:	e006      	b.n	8001098 <main+0x334>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 15
 800108a:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <main+0x450>)
 800108c:	785b      	ldrb	r3, [r3, #1]
 800108e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <main+0x450>)
 8001096:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<1))  {
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <main+0x454>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <main+0x350>
		  joystickhid.botoes1 |= (uint32_t)(1<<7);	// SETA BOTAO 16
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <main+0x450>)
 80010a6:	785b      	ldrb	r3, [r3, #1]
 80010a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <main+0x450>)
 80010b0:	705a      	strb	r2, [r3, #1]
 80010b2:	e006      	b.n	80010c2 <main+0x35e>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 16
 80010b4:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <main+0x450>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <main+0x450>)
 80010c0:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<2))  {
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <main+0x454>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <main+0x37a>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<0);	// SETA BOTAO 17
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <main+0x450>)
 80010d0:	789b      	ldrb	r3, [r3, #2]
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <main+0x450>)
 80010da:	709a      	strb	r2, [r3, #2]
 80010dc:	e006      	b.n	80010ec <main+0x388>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 17
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <main+0x450>)
 80010e0:	789b      	ldrb	r3, [r3, #2]
 80010e2:	f023 0301 	bic.w	r3, r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <main+0x450>)
 80010ea:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<3))  {
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <main+0x454>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <main+0x3a4>
		  joystickhid.botoes_freio0 |= (uint32_t)(1<<1);	// SETA BOTAO 18
 80010f8:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <main+0x450>)
 80010fa:	789b      	ldrb	r3, [r3, #2]
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <main+0x450>)
 8001104:	709a      	strb	r2, [r3, #2]
 8001106:	e006      	b.n	8001116 <main+0x3b2>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 18
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <main+0x450>)
 800110a:	789b      	ldrb	r3, [r3, #2]
 800110c:	f023 0302 	bic.w	r3, r3, #2
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <main+0x450>)
 8001114:	709a      	strb	r2, [r3, #2]
	  }

	  if (joystickhid.botoes1 == 0b11111111) { //desativa botoes ao pressionar reversa no g29 verifica se todos os botoes estao ativados ao mesmo tempo e desativa.
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <main+0x450>)
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	2bff      	cmp	r3, #255	; 0xff
 800111c:	d108      	bne.n	8001130 <main+0x3cc>
		  joystickhid.botoes0 = 0;
 800111e:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <main+0x450>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
		  joystickhid.botoes1 = 0;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <main+0x450>)
 8001126:	2200      	movs	r2, #0
 8001128:	705a      	strb	r2, [r3, #1]
		  joystickhid.botoes_freio0 = 0;
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <main+0x450>)
 800112c:	2200      	movs	r2, #0
 800112e:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<6) && cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0])  {
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <main+0x454>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001138:	2b00      	cmp	r3, #0
 800113a:	d018      	beq.n	800116e <main+0x40a>
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <main+0x458>)
 800113e:	885b      	ldrh	r3, [r3, #2]
 8001140:	88fa      	ldrh	r2, [r7, #6]
 8001142:	429a      	cmp	r2, r3
 8001144:	d913      	bls.n	800116e <main+0x40a>
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <main+0x45c>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	88ba      	ldrh	r2, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	d20e      	bcs.n	800116e <main+0x40a>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<2);	// SETA BOTAO 19 SPEED REVERSA
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <main+0x450>)
 8001152:	789b      	ldrb	r3, [r3, #2]
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <main+0x450>)
 800115c:	709a      	strb	r2, [r3, #2]
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5); 			// RESETA BOTAO SPEED 6 QUANDO ATIVA A REVERSA
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <main+0x450>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	f023 0320 	bic.w	r3, r3, #32
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <main+0x450>)
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e006      	b.n	800117c <main+0x418>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint32_t)(1<<2);	// RESETA BOTAO 19 SPEED REVERSA
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <main+0x450>)
 8001170:	789b      	ldrb	r3, [r3, #2]
 8001172:	f023 0304 	bic.w	r3, r3, #4
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <main+0x450>)
 800117a:	709a      	strb	r2, [r3, #2]
	  }


	  if (spi_values[0] > 4000 && spi_values[1] > 4000){  //se volante desconectado
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <main+0x460>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001184:	d90d      	bls.n	80011a2 <main+0x43e>
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <main+0x460>)
 8001188:	885b      	ldrh	r3, [r3, #2]
 800118a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800118e:	d908      	bls.n	80011a2 <main+0x43e>
		  joystickhid.botoes0 = 0;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <main+0x450>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
	  	  joystickhid.botoes1 = 0;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <main+0x450>)
 8001198:	2200      	movs	r2, #0
 800119a:	705a      	strb	r2, [r3, #1]
	  	  joystickhid.botoes_freio0 = 0;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <main+0x450>)
 800119e:	2200      	movs	r2, #0
 80011a0:	709a      	strb	r2, [r3, #2]
	  }

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80011a2:	2208      	movs	r2, #8
 80011a4:	4903      	ldr	r1, [pc, #12]	; (80011b4 <main+0x450>)
 80011a6:	4808      	ldr	r0, [pc, #32]	; (80011c8 <main+0x464>)
 80011a8:	f007 fff0 	bl	800918c <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(1);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f000 fcef 	bl	8001b90 <HAL_Delay>
  {
 80011b2:	e5fb      	b.n	8000dac <main+0x48>
 80011b4:	20000354 	.word	0x20000354
 80011b8:	20000368 	.word	0x20000368
 80011bc:	20000004 	.word	0x20000004
 80011c0:	20000008 	.word	0x20000008
 80011c4:	2000035c 	.word	0x2000035c
 80011c8:	2000039c 	.word	0x2000039c

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d6:	2228      	movs	r2, #40	; 0x28
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f009 fd4a 	bl	800ac74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011fc:	2301      	movs	r3, #1
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120a:	2301      	movs	r3, #1
 800120c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2302      	movs	r3, #2
 8001210:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001218:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800121c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fcba 	bl	8004b9c <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800122e:	f000 f9b1 	bl	8001594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	230f      	movs	r3, #15
 8001234:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f003 ff26 	bl	80050a0 <HAL_RCC_ClockConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800125a:	f000 f99b 	bl	8001594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800125e:	2312      	movs	r3, #18
 8001260:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001266:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001268:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4618      	mov	r0, r3
 8001272:	f004 f8ad 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800127c:	f000 f98a 	bl	8001594 <Error_Handler>
  }
}
 8001280:	bf00      	nop
 8001282:	3750      	adds	r7, #80	; 0x50
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <MX_ADC1_Init+0xb0>)
 800129a:	4a28      	ldr	r2, [pc, #160]	; (800133c <MX_ADC1_Init+0xb4>)
 800129c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012c2:	2203      	movs	r2, #3
 80012c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c6:	481c      	ldr	r0, [pc, #112]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012c8:	f000 fc86 	bl	8001bd8 <HAL_ADC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80012d2:	f000 f95f 	bl	8001594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012da:	2301      	movs	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80012de:	2307      	movs	r3, #7
 80012e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4814      	ldr	r0, [pc, #80]	; (8001338 <MX_ADC1_Init+0xb0>)
 80012e8:	f000 fe48 	bl	8001f7c <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f000 f94f 	bl	8001594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	480d      	ldr	r0, [pc, #52]	; (8001338 <MX_ADC1_Init+0xb0>)
 8001304:	f000 fe3a 	bl	8001f7c <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800130e:	f000 f941 	bl	8001594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001312:	2302      	movs	r3, #2
 8001314:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001316:	2303      	movs	r3, #3
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <MX_ADC1_Init+0xb0>)
 8001320:	f000 fe2c 	bl	8001f7c <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800132a:	f000 f933 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001ec 	.word	0x200001ec
 800133c:	40012400 	.word	0x40012400

08001340 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <MX_SPI1_Init+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_SPI1_Init+0x64>)
 800134c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_SPI1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001360:	2202      	movs	r2, #2
 8001362:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_SPI1_Init+0x64>)
 800136c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001370:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001374:	2228      	movs	r2, #40	; 0x28
 8001376:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <MX_SPI1_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_SPI1_Init+0x64>)
 800138c:	220a      	movs	r2, #10
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001392:	f004 f8d3 	bl	800553c <HAL_SPI_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800139c:	f000 f8fa 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000260 	.word	0x20000260
 80013a8:	40013000 	.word	0x40013000

080013ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_SPI2_Init+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <MX_SPI2_Init+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_SPI2_Init+0x64>)
 80013b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI2_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_SPI2_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_SPI2_Init+0x64>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI2_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_SPI2_Init+0x64>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI2_Init+0x64>)
 80013e0:	2220      	movs	r2, #32
 80013e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SPI2_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI2_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SPI2_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI2_Init+0x64>)
 80013f8:	220a      	movs	r2, #10
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_SPI2_Init+0x64>)
 80013fe:	f004 f89d 	bl	800553c <HAL_SPI_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001408:	f000 f8c4 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200002b8 	.word	0x200002b8
 8001414:	40003800 	.word	0x40003800

08001418 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MX_USART1_UART_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001450:	f004 fda8 	bl	8005fa4 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 f89b 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000310 	.word	0x20000310
 8001468:	40013800 	.word	0x40013800

0800146c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_DMA_Init+0x38>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <MX_DMA_Init+0x38>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6153      	str	r3, [r2, #20]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_DMA_Init+0x38>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	200b      	movs	r0, #11
 8001490:	f001 f845 	bl	800251e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001494:	200b      	movs	r0, #11
 8001496:	f001 f85e 	bl	8002556 <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a31      	ldr	r2, [pc, #196]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a2b      	ldr	r2, [pc, #172]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014da:	f043 0320 	orr.w	r3, r3, #32
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a25      	ldr	r2, [pc, #148]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <MX_GPIO_Init+0xe0>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <MX_GPIO_Init+0xe0>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_GPIO_Init+0xe0>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFTER_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001522:	481a      	ldr	r0, [pc, #104]	; (800158c <MX_GPIO_Init+0xe4>)
 8001524:	f001 fe5d 	bl	80031e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CALIB_BUTTON_Pin */
  GPIO_InitStruct.Pin = CALIB_BUTTON_Pin;
 8001528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800152c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CALIB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	4619      	mov	r1, r3
 800153c:	4814      	ldr	r0, [pc, #80]	; (8001590 <MX_GPIO_Init+0xe8>)
 800153e:	f001 fcb5 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFTER_CS_Pin */
  GPIO_InitStruct.Pin = SHIFTER_CS_Pin;
 8001542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154c:	2301      	movs	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHIFTER_CS_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4619      	mov	r1, r3
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <MX_GPIO_Init+0xe4>)
 800155c:	f001 fca6 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001566:	2311      	movs	r3, #17
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2302      	movs	r3, #2
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_GPIO_Init+0xe4>)
 800157a:	f001 fc97 	bl	8002eac <HAL_GPIO_Init>

}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	40010c00 	.word	0x40010c00
 8001590:	40011000 	.word	0x40011000

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x8>
	...

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_MspInit+0x40>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <HAL_MspInit+0x40>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_MspInit+0x40>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_MspInit+0x40>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_MspInit+0x40>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_MspInit+0x40>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <HAL_ADC_MspInit+0xbc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d149      	bne.n	8001698 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_ADC_MspInit+0xc0>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <HAL_ADC_MspInit+0xc0>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_ADC_MspInit+0xc0>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_ADC_MspInit+0xc0>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <HAL_ADC_MspInit+0xc0>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_ADC_MspInit+0xc0>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001634:	2307      	movs	r3, #7
 8001636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001638:	2303      	movs	r3, #3
 800163a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4619      	mov	r1, r3
 8001642:	4819      	ldr	r0, [pc, #100]	; (80016a8 <HAL_ADC_MspInit+0xc4>)
 8001644:	f001 fc32 	bl	8002eac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 800164a:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_ADC_MspInit+0xcc>)
 800164c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 8001662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001666:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 800166a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800166e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 8001672:	2220      	movs	r2, #32
 8001674:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 800167e:	f000 ff85 	bl	800258c <HAL_DMA_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001688:	f7ff ff84 	bl	8001594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 8001690:	621a      	str	r2, [r3, #32]
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_ADC_MspInit+0xc8>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40012400 	.word	0x40012400
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	2000021c 	.word	0x2000021c
 80016b0:	40020008 	.word	0x40020008

080016b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a3b      	ldr	r2, [pc, #236]	; (80017bc <HAL_SPI_MspInit+0x108>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d138      	bne.n	8001746 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016d4:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a39      	ldr	r2, [pc, #228]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 80016da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a33      	ldr	r2, [pc, #204]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001704:	23a0      	movs	r3, #160	; 0xa0
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	4619      	mov	r1, r3
 8001716:	482b      	ldr	r0, [pc, #172]	; (80017c4 <HAL_SPI_MspInit+0x110>)
 8001718:	f001 fbc8 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800171c:	2340      	movs	r3, #64	; 0x40
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0318 	add.w	r3, r7, #24
 800172c:	4619      	mov	r1, r3
 800172e:	4825      	ldr	r0, [pc, #148]	; (80017c4 <HAL_SPI_MspInit+0x110>)
 8001730:	f001 fbbc 	bl	8002eac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2023      	movs	r0, #35	; 0x23
 800173a:	f000 fef0 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800173e:	2023      	movs	r0, #35	; 0x23
 8001740:	f000 ff09 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001744:	e036      	b.n	80017b4 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <HAL_SPI_MspInit+0x114>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d131      	bne.n	80017b4 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	4a1a      	ldr	r2, [pc, #104]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 8001756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175a:	61d3      	str	r3, [r2, #28]
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_SPI_MspInit+0x10c>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001780:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0318 	add.w	r3, r7, #24
 8001792:	4619      	mov	r1, r3
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <HAL_SPI_MspInit+0x118>)
 8001796:	f001 fb89 	bl	8002eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800179a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0318 	add.w	r3, r7, #24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4807      	ldr	r0, [pc, #28]	; (80017cc <HAL_SPI_MspInit+0x118>)
 80017b0:	f001 fb7c 	bl	8002eac <HAL_GPIO_Init>
}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40013000 	.word	0x40013000
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010800 	.word	0x40010800
 80017c8:	40003800 	.word	0x40003800
 80017cc:	40010c00 	.word	0x40010c00

080017d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <HAL_UART_MspInit+0x8c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d131      	bne.n	8001854 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_UART_MspInit+0x90>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_UART_MspInit+0x90>)
 80017f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_UART_MspInit+0x90>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_UART_MspInit+0x90>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_UART_MspInit+0x90>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_UART_MspInit+0x90>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <HAL_UART_MspInit+0x94>)
 8001836:	f001 fb39 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_UART_MspInit+0x94>)
 8001850:	f001 fb2c 	bl	8002eac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40013800 	.word	0x40013800
 8001860:	40021000 	.word	0x40021000
 8001864:	40010800 	.word	0x40010800

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ae:	f000 f953 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <DMA1_Channel1_IRQHandler+0x10>)
 80018be:	f000 ff95 	bl	80027ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000021c 	.word	0x2000021c

080018cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80018d2:	f001 fde8 	bl	80034a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000860 	.word	0x20000860

080018e0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <SPI1_IRQHandler+0x10>)
 80018e6:	f004 f961 	bl	8005bac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000260 	.word	0x20000260

080018f4 <_getpid>:
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	2301      	movs	r3, #1
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <_kill>:
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
 800190c:	f009 f988 	bl	800ac20 <__errno>
 8001910:	4603      	mov	r3, r0
 8001912:	2216      	movs	r2, #22
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_exit>:
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	f04f 31ff 	mov.w	r1, #4294967295
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffe7 	bl	8001902 <_kill>
 8001934:	e7fe      	b.n	8001934 <_exit+0x12>

08001936 <_read>:
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e00a      	b.n	800195e <_read+0x28>
 8001948:	f3af 8000 	nop.w
 800194c:	4601      	mov	r1, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	60ba      	str	r2, [r7, #8]
 8001954:	b2ca      	uxtb	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	dbf0      	blt.n	8001948 <_read+0x12>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_write>:
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e009      	b.n	8001996 <_write+0x26>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	60ba      	str	r2, [r7, #8]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f3af 8000 	nop.w
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	dbf1      	blt.n	8001982 <_write+0x12>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_close>:
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <_fstat>:
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	2300      	movs	r3, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <_isatty>:
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	2301      	movs	r3, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <_lseek>:
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	2300      	movs	r3, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <_sbrk>:
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
 8001a38:	f009 f8f2 	bl	800ac20 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20005000 	.word	0x20005000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	2000036c 	.word	0x2000036c
 8001a70:	20000bb8 	.word	0x20000bb8

08001a74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <Reset_Handler>:
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <LoopFillZerobss+0x12>)
 8001a82:	490d      	ldr	r1, [pc, #52]	; (8001ab8 <LoopFillZerobss+0x16>)
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <LoopFillZerobss+0x1a>)
 8001a86:	2300      	movs	r3, #0
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:
 8001a8a:	58d4      	ldr	r4, [r2, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:
 8001a90:	18c4      	adds	r4, r0, r3
 8001a92:	428c      	cmp	r4, r1
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <LoopFillZerobss+0x1e>)
 8001a98:	4c0a      	ldr	r4, [pc, #40]	; (8001ac4 <LoopFillZerobss+0x22>)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:
 8001aa2:	42a2      	cmp	r2, r4
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>
 8001aa6:	f7ff ffe5 	bl	8001a74 <SystemInit>
 8001aaa:	f009 f8bf 	bl	800ac2c <__libc_init_array>
 8001aae:	f7ff f959 	bl	8000d64 <main>
 8001ab2:	4770      	bx	lr
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	200001d0 	.word	0x200001d0
 8001abc:	0800c500 	.word	0x0800c500
 8001ac0:	200001d0 	.word	0x200001d0
 8001ac4:	20000bb4 	.word	0x20000bb4

08001ac8 <ADC1_2_IRQHandler>:
 8001ac8:	e7fe      	b.n	8001ac8 <ADC1_2_IRQHandler>
	...

08001acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_Init+0x28>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_Init+0x28>)
 8001ad6:	f043 0310 	orr.w	r3, r3, #16
 8001ada:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 fd13 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f000 f808 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae8:	f7ff fd5a 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x54>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fd2b 	bl	8002572 <HAL_SYSTICK_Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d80a      	bhi.n	8001b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f000 fcf3 	bl	800251e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <HAL_InitTick+0x5c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000000c 	.word	0x2000000c
 8001b50:	20000014 	.word	0x20000014
 8001b54:	20000010 	.word	0x20000010

08001b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_IncTick+0x1c>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_IncTick+0x20>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a03      	ldr	r2, [pc, #12]	; (8001b78 <HAL_IncTick+0x20>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	20000014 	.word	0x20000014
 8001b78:	20000370 	.word	0x20000370

08001b7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <HAL_GetTick+0x10>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	20000370 	.word	0x20000370

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff fff0 	bl	8001b7c <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_Delay+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffe0 	bl	8001b7c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000014 	.word	0x20000014

08001bd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0be      	b.n	8001d78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d109      	bne.n	8001c1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fce4 	bl	80015e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 faff 	bl	8002220 <ADC_ConversionStop_Disable>
 8001c22:	4603      	mov	r3, r0
 8001c24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 8099 	bne.w	8001d66 <HAL_ADC_Init+0x18e>
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 8095 	bne.w	8001d66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c44:	f023 0302 	bic.w	r3, r3, #2
 8001c48:	f043 0202 	orr.w	r2, r3, #2
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7b1b      	ldrb	r3, [r3, #12]
 8001c5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c70:	d003      	beq.n	8001c7a <HAL_ADC_Init+0xa2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <HAL_ADC_Init+0xa8>
 8001c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c7e:	e000      	b.n	8001c82 <HAL_ADC_Init+0xaa>
 8001c80:	2300      	movs	r3, #0
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7d1b      	ldrb	r3, [r3, #20]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d119      	bne.n	8001cc4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7b1b      	ldrb	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	035a      	lsls	r2, r3, #13
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e00b      	b.n	8001cc4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	f043 0220 	orr.w	r2, r3, #32
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_ADC_Init+0x1a8>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf4:	d003      	beq.n	8001cfe <HAL_ADC_Init+0x126>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d104      	bne.n	8001d08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	051b      	lsls	r3, r3, #20
 8001d06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_ADC_Init+0x1ac>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d10b      	bne.n	8001d44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d42:	e018      	b.n	8001d76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	f023 0312 	bic.w	r3, r3, #18
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d64:	e007      	b.n	8001d76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	f043 0210 	orr.w	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	ffe1f7fd 	.word	0xffe1f7fd
 8001d84:	ff1f0efe 	.word	0xff1f0efe

08001d88 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a64      	ldr	r2, [pc, #400]	; (8001f30 <HAL_ADC_Start_DMA+0x1a8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_ADC_Start_DMA+0x24>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a63      	ldr	r2, [pc, #396]	; (8001f34 <HAL_ADC_Start_DMA+0x1ac>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d106      	bne.n	8001dba <HAL_ADC_Start_DMA+0x32>
 8001dac:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <HAL_ADC_Start_DMA+0x1a8>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f040 80b3 	bne.w	8001f20 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0x40>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e0ae      	b.n	8001f26 <HAL_ADC_Start_DMA+0x19e>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f9cb 	bl	800216c <ADC_Enable>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 809a 	bne.w	8001f16 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a4e      	ldr	r2, [pc, #312]	; (8001f34 <HAL_ADC_Start_DMA+0x1ac>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_Start_DMA+0x84>
 8001e00:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <HAL_ADC_Start_DMA+0x1a8>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d115      	bne.n	8001e38 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d026      	beq.n	8001e74 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e36:	e01d      	b.n	8001e74 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a39      	ldr	r2, [pc, #228]	; (8001f30 <HAL_ADC_Start_DMA+0x1a8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_ADC_Start_DMA+0xd0>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a38      	ldr	r2, [pc, #224]	; (8001f34 <HAL_ADC_Start_DMA+0x1ac>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d10d      	bne.n	8001e74 <HAL_ADC_Start_DMA+0xec>
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_ADC_Start_DMA+0x1a8>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	f023 0206 	bic.w	r2, r3, #6
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <HAL_ADC_Start_DMA+0x1b0>)
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <HAL_ADC_Start_DMA+0x1b4>)
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <HAL_ADC_Start_DMA+0x1b8>)
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0202 	mvn.w	r2, #2
 8001ebc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ecc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a18      	ldr	r0, [r3, #32]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	334c      	adds	r3, #76	; 0x4c
 8001ed8:	4619      	mov	r1, r3
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f000 fbaf 	bl	8002640 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001eec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ef0:	d108      	bne.n	8001f04 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f00:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f02:	e00f      	b.n	8001f24 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f12:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f14:	e006      	b.n	8001f24 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001f1e:	e001      	b.n	8001f24 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40012400 	.word	0x40012400
 8001f34:	40012800 	.word	0x40012800
 8001f38:	080022a3 	.word	0x080022a3
 8001f3c:	0800231f 	.word	0x0800231f
 8001f40:	0800233b 	.word	0x0800233b

08001f44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x20>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e0dc      	b.n	8002156 <HAL_ADC_ConfigChannel+0x1da>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b06      	cmp	r3, #6
 8001faa:	d81c      	bhi.n	8001fe6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b05      	subs	r3, #5
 8001fbe:	221f      	movs	r2, #31
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4019      	ands	r1, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b05      	subs	r3, #5
 8001fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	635a      	str	r2, [r3, #52]	; 0x34
 8001fe4:	e03c      	b.n	8002060 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d81c      	bhi.n	8002028 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b23      	subs	r3, #35	; 0x23
 8002000:	221f      	movs	r2, #31
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	4019      	ands	r1, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b23      	subs	r3, #35	; 0x23
 800201a:	fa00 f203 	lsl.w	r2, r0, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
 8002026:	e01b      	b.n	8002060 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3b41      	subs	r3, #65	; 0x41
 800203a:	221f      	movs	r2, #31
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	4019      	ands	r1, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b41      	subs	r3, #65	; 0x41
 8002054:	fa00 f203 	lsl.w	r2, r0, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b09      	cmp	r3, #9
 8002066:	d91c      	bls.n	80020a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68d9      	ldr	r1, [r3, #12]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	3b1e      	subs	r3, #30
 800207a:	2207      	movs	r2, #7
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6898      	ldr	r0, [r3, #8]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	3b1e      	subs	r3, #30
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	e019      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6919      	ldr	r1, [r3, #16]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	2207      	movs	r2, #7
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4019      	ands	r1, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6898      	ldr	r0, [r3, #8]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	fa00 f203 	lsl.w	r2, r0, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d003      	beq.n	80020e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020e2:	2b11      	cmp	r3, #17
 80020e4:	d132      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <HAL_ADC_ConfigChannel+0x1e4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d125      	bne.n	800213c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d126      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800210c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b10      	cmp	r3, #16
 8002114:	d11a      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_ADC_ConfigChannel+0x1e8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <HAL_ADC_ConfigChannel+0x1ec>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	0c9a      	lsrs	r2, r3, #18
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800212c:	e002      	b.n	8002134 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	3b01      	subs	r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f9      	bne.n	800212e <HAL_ADC_ConfigChannel+0x1b2>
 800213a:	e007      	b.n	800214c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	f043 0220 	orr.w	r2, r3, #32
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40012400 	.word	0x40012400
 8002164:	2000000c 	.word	0x2000000c
 8002168:	431bde83 	.word	0x431bde83

0800216c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d040      	beq.n	800220c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800219a:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <ADC_Enable+0xac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1f      	ldr	r2, [pc, #124]	; (800221c <ADC_Enable+0xb0>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	0c9b      	lsrs	r3, r3, #18
 80021a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021a8:	e002      	b.n	80021b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f9      	bne.n	80021aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021b6:	f7ff fce1 	bl	8001b7c <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021bc:	e01f      	b.n	80021fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021be:	f7ff fcdd 	bl	8001b7c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d918      	bls.n	80021fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d011      	beq.n	80021fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	f043 0210 	orr.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e007      	b.n	800220e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d1d8      	bne.n	80021be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	2000000c 	.word	0x2000000c
 800221c:	431bde83 	.word	0x431bde83

08002220 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d12e      	bne.n	8002298 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800224a:	f7ff fc97 	bl	8001b7c <HAL_GetTick>
 800224e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002250:	e01b      	b.n	800228a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002252:	f7ff fc93 	bl	8001b7c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d914      	bls.n	800228a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10d      	bne.n	800228a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	f043 0210 	orr.w	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e007      	b.n	800229a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d0dc      	beq.n	8002252 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d127      	bne.n	800230c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022d6:	d115      	bne.n	8002304 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d111      	bne.n	8002304 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fe1d 	bl	8001f44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800230a:	e004      	b.n	8002316 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fe12 	bl	8001f56 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	f043 0204 	orr.w	r2, r3, #4
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff fe01 	bl	8001f68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4906      	ldr	r1, [pc, #24]	; (8002408 <__NVIC_EnableIRQ+0x34>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	; (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	; (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d4:	d301      	bcc.n	80024da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00f      	b.n	80024fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <SysTick_Config+0x40>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e2:	210f      	movs	r1, #15
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f7ff ff90 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SysTick_Config+0x40>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <SysTick_Config+0x40>)
 80024f4:	2207      	movs	r2, #7
 80024f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000e010 	.word	0xe000e010

08002508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff2d 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002530:	f7ff ff42 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 8002534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7ff ff90 	bl	8002460 <NVIC_EncodePriority>
 8002540:	4602      	mov	r2, r0
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff5f 	bl	800240c <__NVIC_SetPriority>
}
 800254e:	bf00      	nop
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff35 	bl	80023d4 <__NVIC_EnableIRQ>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ffa2 	bl	80024c4 <SysTick_Config>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e043      	b.n	800262a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <HAL_DMA_Init+0xa8>)
 80025aa:	4413      	add	r3, r2
 80025ac:	4a22      	ldr	r2, [pc, #136]	; (8002638 <HAL_DMA_Init+0xac>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	009a      	lsls	r2, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_DMA_Init+0xb0>)
 80025be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	bffdfff8 	.word	0xbffdfff8
 8002638:	cccccccd 	.word	0xcccccccd
 800263c:	40020000 	.word	0x40020000

08002640 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_DMA_Start_IT+0x20>
 800265c:	2302      	movs	r3, #2
 800265e:	e04a      	b.n	80026f6 <HAL_DMA_Start_IT+0xb6>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800266e:	2b01      	cmp	r3, #1
 8002670:	d13a      	bne.n	80026e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2202      	movs	r2, #2
 8002676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f9ae 	bl	80029f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 020e 	orr.w	r2, r2, #14
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e00f      	b.n	80026d6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0204 	bic.w	r2, r2, #4
 80026c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 020a 	orr.w	r2, r2, #10
 80026d4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e005      	b.n	80026f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026f0:	2302      	movs	r3, #2
 80026f2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002712:	2b02      	cmp	r3, #2
 8002714:	d005      	beq.n	8002722 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2204      	movs	r2, #4
 800271a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e051      	b.n	80027c6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 020e 	bic.w	r2, r2, #14
 8002730:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <HAL_DMA_Abort_IT+0xd0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d029      	beq.n	80027a0 <HAL_DMA_Abort_IT+0xa0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <HAL_DMA_Abort_IT+0xd4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d022      	beq.n	800279c <HAL_DMA_Abort_IT+0x9c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_DMA_Abort_IT+0xd8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d01a      	beq.n	8002796 <HAL_DMA_Abort_IT+0x96>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_DMA_Abort_IT+0xdc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d012      	beq.n	8002790 <HAL_DMA_Abort_IT+0x90>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_DMA_Abort_IT+0xe0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00a      	beq.n	800278a <HAL_DMA_Abort_IT+0x8a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1a      	ldr	r2, [pc, #104]	; (80027e4 <HAL_DMA_Abort_IT+0xe4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d102      	bne.n	8002784 <HAL_DMA_Abort_IT+0x84>
 800277e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002782:	e00e      	b.n	80027a2 <HAL_DMA_Abort_IT+0xa2>
 8002784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002788:	e00b      	b.n	80027a2 <HAL_DMA_Abort_IT+0xa2>
 800278a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800278e:	e008      	b.n	80027a2 <HAL_DMA_Abort_IT+0xa2>
 8002790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002794:	e005      	b.n	80027a2 <HAL_DMA_Abort_IT+0xa2>
 8002796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800279a:	e002      	b.n	80027a2 <HAL_DMA_Abort_IT+0xa2>
 800279c:	2310      	movs	r3, #16
 800279e:	e000      	b.n	80027a2 <HAL_DMA_Abort_IT+0xa2>
 80027a0:	2301      	movs	r3, #1
 80027a2:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_DMA_Abort_IT+0xe8>)
 80027a4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
    } 
  }
  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40020008 	.word	0x40020008
 80027d4:	4002001c 	.word	0x4002001c
 80027d8:	40020030 	.word	0x40020030
 80027dc:	40020044 	.word	0x40020044
 80027e0:	40020058 	.word	0x40020058
 80027e4:	4002006c 	.word	0x4002006c
 80027e8:	40020000 	.word	0x40020000

080027ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	2204      	movs	r2, #4
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d04f      	beq.n	80028b4 <HAL_DMA_IRQHandler+0xc8>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d04a      	beq.n	80028b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0204 	bic.w	r2, r2, #4
 800283a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_DMA_IRQHandler+0x1f0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d029      	beq.n	800289a <HAL_DMA_IRQHandler+0xae>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_DMA_IRQHandler+0x1f4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d022      	beq.n	8002896 <HAL_DMA_IRQHandler+0xaa>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a63      	ldr	r2, [pc, #396]	; (80029e4 <HAL_DMA_IRQHandler+0x1f8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01a      	beq.n	8002890 <HAL_DMA_IRQHandler+0xa4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a62      	ldr	r2, [pc, #392]	; (80029e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d012      	beq.n	800288a <HAL_DMA_IRQHandler+0x9e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a60      	ldr	r2, [pc, #384]	; (80029ec <HAL_DMA_IRQHandler+0x200>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00a      	beq.n	8002884 <HAL_DMA_IRQHandler+0x98>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_DMA_IRQHandler+0x204>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d102      	bne.n	800287e <HAL_DMA_IRQHandler+0x92>
 8002878:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800287c:	e00e      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 800287e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002882:	e00b      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 8002884:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002888:	e008      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 800288a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800288e:	e005      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 8002890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002894:	e002      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 8002896:	2340      	movs	r3, #64	; 0x40
 8002898:	e000      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 800289a:	2304      	movs	r3, #4
 800289c:	4a55      	ldr	r2, [pc, #340]	; (80029f4 <HAL_DMA_IRQHandler+0x208>)
 800289e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8094 	beq.w	80029d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028b2:	e08e      	b.n	80029d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	2202      	movs	r2, #2
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d056      	beq.n	8002972 <HAL_DMA_IRQHandler+0x186>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d051      	beq.n	8002972 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 020a 	bic.w	r2, r2, #10
 80028ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a38      	ldr	r2, [pc, #224]	; (80029dc <HAL_DMA_IRQHandler+0x1f0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d029      	beq.n	8002952 <HAL_DMA_IRQHandler+0x166>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a37      	ldr	r2, [pc, #220]	; (80029e0 <HAL_DMA_IRQHandler+0x1f4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <HAL_DMA_IRQHandler+0x162>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a35      	ldr	r2, [pc, #212]	; (80029e4 <HAL_DMA_IRQHandler+0x1f8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01a      	beq.n	8002948 <HAL_DMA_IRQHandler+0x15c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a34      	ldr	r2, [pc, #208]	; (80029e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d012      	beq.n	8002942 <HAL_DMA_IRQHandler+0x156>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a32      	ldr	r2, [pc, #200]	; (80029ec <HAL_DMA_IRQHandler+0x200>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00a      	beq.n	800293c <HAL_DMA_IRQHandler+0x150>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <HAL_DMA_IRQHandler+0x204>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d102      	bne.n	8002936 <HAL_DMA_IRQHandler+0x14a>
 8002930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002934:	e00e      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 8002936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293a:	e00b      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 800293c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002940:	e008      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 8002942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002946:	e005      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 8002948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800294c:	e002      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 800294e:	2320      	movs	r3, #32
 8002950:	e000      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 8002952:	2302      	movs	r3, #2
 8002954:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <HAL_DMA_IRQHandler+0x208>)
 8002956:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d034      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002970:	e02f      	b.n	80029d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2208      	movs	r2, #8
 8002978:	409a      	lsls	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d028      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x1e8>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d023      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 020e 	bic.w	r2, r2, #14
 800299a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	2101      	movs	r1, #1
 80029a6:	fa01 f202 	lsl.w	r2, r1, r2
 80029aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
    }
  }
  return;
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
}
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40020008 	.word	0x40020008
 80029e0:	4002001c 	.word	0x4002001c
 80029e4:	40020030 	.word	0x40020030
 80029e8:	40020044 	.word	0x40020044
 80029ec:	40020058 	.word	0x40020058
 80029f0:	4002006c 	.word	0x4002006c
 80029f4:	40020000 	.word	0x40020000

080029f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f202 	lsl.w	r2, r1, r2
 8002a14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d108      	bne.n	8002a38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a36:	e007      	b.n	8002a48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a6e:	4b2f      	ldr	r3, [pc, #188]	; (8002b2c <HAL_FLASH_Program+0xd8>)
 8002a70:	7e1b      	ldrb	r3, [r3, #24]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_FLASH_Program+0x26>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e054      	b.n	8002b24 <HAL_FLASH_Program+0xd0>
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_FLASH_Program+0xd8>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002a80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a84:	f000 f8d4 	bl	8002c30 <FLASH_WaitForLastOperation>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d144      	bne.n	8002b1c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d102      	bne.n	8002a9e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	757b      	strb	r3, [r7, #21]
 8002a9c:	e007      	b.n	8002aae <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d102      	bne.n	8002aaa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	757b      	strb	r3, [r7, #21]
 8002aa8:	e001      	b.n	8002aae <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002aaa:	2304      	movs	r3, #4
 8002aac:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75bb      	strb	r3, [r7, #22]
 8002ab2:	e02d      	b.n	8002b10 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002ab4:	7dbb      	ldrb	r3, [r7, #22]
 8002ab6:	005a      	lsls	r2, r3, #1
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	eb02 0c03 	add.w	ip, r2, r3
 8002abe:	7dbb      	ldrb	r3, [r7, #22]
 8002ac0:	0119      	lsls	r1, r3, #4
 8002ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ac6:	f1c1 0620 	rsb	r6, r1, #32
 8002aca:	f1a1 0020 	sub.w	r0, r1, #32
 8002ace:	fa22 f401 	lsr.w	r4, r2, r1
 8002ad2:	fa03 f606 	lsl.w	r6, r3, r6
 8002ad6:	4334      	orrs	r4, r6
 8002ad8:	fa23 f000 	lsr.w	r0, r3, r0
 8002adc:	4304      	orrs	r4, r0
 8002ade:	fa23 f501 	lsr.w	r5, r3, r1
 8002ae2:	b2a3      	uxth	r3, r4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4660      	mov	r0, ip
 8002ae8:	f000 f886 	bl	8002bf8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002aec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002af0:	f000 f89e 	bl	8002c30 <FLASH_WaitForLastOperation>
 8002af4:	4603      	mov	r3, r0
 8002af6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002af8:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_FLASH_Program+0xdc>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <HAL_FLASH_Program+0xdc>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002b0a:	7dbb      	ldrb	r3, [r7, #22]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	75bb      	strb	r3, [r7, #22]
 8002b10:	7dba      	ldrb	r2, [r7, #22]
 8002b12:	7d7b      	ldrb	r3, [r7, #21]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d3cd      	bcc.n	8002ab4 <HAL_FLASH_Program+0x60>
 8002b18:	e000      	b.n	8002b1c <HAL_FLASH_Program+0xc8>
      {
        break;
 8002b1a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_FLASH_Program+0xd8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	761a      	strb	r2, [r3, #24]

  return status;
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2c:	20000378 	.word	0x20000378
 8002b30:	40022000 	.word	0x40022000

08002b34 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_FLASH_Unlock+0x40>)
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_FLASH_Unlock+0x40>)
 8002b4c:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <HAL_FLASH_Unlock+0x44>)
 8002b4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_FLASH_Unlock+0x40>)
 8002b52:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <HAL_FLASH_Unlock+0x48>)
 8002b54:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <HAL_FLASH_Unlock+0x40>)
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002b66:	79fb      	ldrb	r3, [r7, #7]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40022000 	.word	0x40022000
 8002b78:	45670123 	.word	0x45670123
 8002b7c:	cdef89ab 	.word	0xcdef89ab

08002b80 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_FLASH_Lock+0x1c>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_FLASH_Lock+0x1c>)
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40022000 	.word	0x40022000

08002ba0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_FLASH_OB_Unlock+0x2c>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_FLASH_OB_Unlock+0x2c>)
 8002bb2:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <HAL_FLASH_OB_Unlock+0x30>)
 8002bb4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_FLASH_OB_Unlock+0x2c>)
 8002bb8:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <HAL_FLASH_OB_Unlock+0x34>)
 8002bba:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	45670123 	.word	0x45670123
 8002bd4:	cdef89ab 	.word	0xcdef89ab

08002bd8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_FLASH_OB_Lock+0x1c>)
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <HAL_FLASH_OB_Lock+0x1c>)
 8002be2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002be6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40022000 	.word	0x40022000

08002bf8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <FLASH_Program_HalfWord+0x30>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <FLASH_Program_HalfWord+0x34>)
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	4a07      	ldr	r2, [pc, #28]	; (8002c2c <FLASH_Program_HalfWord+0x34>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	887a      	ldrh	r2, [r7, #2]
 8002c1a:	801a      	strh	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000378 	.word	0x20000378
 8002c2c:	40022000 	.word	0x40022000

08002c30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f7fe ffa0 	bl	8001b7c <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002c3e:	e010      	b.n	8002c62 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c46:	d00c      	beq.n	8002c62 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <FLASH_WaitForLastOperation+0x2e>
 8002c4e:	f7fe ff95 	bl	8001b7c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d201      	bcs.n	8002c62 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e025      	b.n	8002cae <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <FLASH_WaitForLastOperation+0x88>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e8      	bne.n	8002c40 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <FLASH_WaitForLastOperation+0x88>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <FLASH_WaitForLastOperation+0x88>)
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <FLASH_WaitForLastOperation+0x88>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <FLASH_WaitForLastOperation+0x88>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <FLASH_WaitForLastOperation+0x88>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002ca4:	f000 f80a 	bl	8002cbc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40022000 	.word	0x40022000

08002cbc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <FLASH_SetErrorCode+0x98>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002cd2:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <FLASH_SetErrorCode+0x9c>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f043 0302 	orr.w	r3, r3, #2
 8002cda:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <FLASH_SetErrorCode+0x9c>)
 8002cdc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f043 0310 	orr.w	r3, r3, #16
 8002ce4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <FLASH_SetErrorCode+0x98>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002cf2:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <FLASH_SetErrorCode+0x9c>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <FLASH_SetErrorCode+0x9c>)
 8002cfc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <FLASH_SetErrorCode+0x98>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <FLASH_SetErrorCode+0x9c>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f043 0304 	orr.w	r3, r3, #4
 8002d1a:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <FLASH_SetErrorCode+0x9c>)
 8002d1c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <FLASH_SetErrorCode+0x98>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <FLASH_SetErrorCode+0x98>)
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f240 1201 	movw	r2, #257	; 0x101
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d106      	bne.n	8002d42 <FLASH_SetErrorCode+0x86>
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <FLASH_SetErrorCode+0x98>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <FLASH_SetErrorCode+0x98>)
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	61d3      	str	r3, [r2, #28]
}  
 8002d40:	e002      	b.n	8002d48 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <FLASH_SetErrorCode+0x98>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60d3      	str	r3, [r2, #12]
}  
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40022000 	.word	0x40022000
 8002d58:	20000378 	.word	0x20000378

08002d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_FLASHEx_Erase+0xd0>)
 8002d70:	7e1b      	ldrb	r3, [r3, #24]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_FLASHEx_Erase+0x1e>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e053      	b.n	8002e22 <HAL_FLASHEx_Erase+0xc6>
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_FLASHEx_Erase+0xd0>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d116      	bne.n	8002db6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002d88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d8c:	f7ff ff50 	bl	8002c30 <FLASH_WaitForLastOperation>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d141      	bne.n	8002e1a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f000 f84c 	bl	8002e34 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002da0:	f7ff ff46 	bl	8002c30 <FLASH_WaitForLastOperation>
 8002da4:	4603      	mov	r3, r0
 8002da6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002da8:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <HAL_FLASHEx_Erase+0xd4>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <HAL_FLASHEx_Erase+0xd4>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6113      	str	r3, [r2, #16]
 8002db4:	e031      	b.n	8002e1a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002db6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dba:	f7ff ff39 	bl	8002c30 <FLASH_WaitForLastOperation>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d12a      	bne.n	8002e1a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	e019      	b.n	8002e08 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002dd4:	68b8      	ldr	r0, [r7, #8]
 8002dd6:	f000 f849 	bl	8002e6c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dde:	f7ff ff27 	bl	8002c30 <FLASH_WaitForLastOperation>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_FLASHEx_Erase+0xd4>)
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <HAL_FLASHEx_Erase+0xd4>)
 8002dec:	f023 0302 	bic.w	r3, r3, #2
 8002df0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	601a      	str	r2, [r3, #0]
            break;
 8002dfe:	e00c      	b.n	8002e1a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e06:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	029a      	lsls	r2, r3, #10
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d3dc      	bcc.n	8002dd4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <HAL_FLASHEx_Erase+0xd0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	761a      	strb	r2, [r3, #24]

  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000378 	.word	0x20000378
 8002e30:	40022000 	.word	0x40022000

08002e34 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <FLASH_MassErase+0x30>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <FLASH_MassErase+0x34>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <FLASH_MassErase+0x34>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <FLASH_MassErase+0x34>)
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <FLASH_MassErase+0x34>)
 8002e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e58:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	20000378 	.word	0x20000378
 8002e68:	40022000 	.word	0x40022000

08002e6c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <FLASH_PageErase+0x38>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <FLASH_PageErase+0x3c>)
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <FLASH_PageErase+0x3c>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002e86:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <FLASH_PageErase+0x3c>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <FLASH_PageErase+0x3c>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <FLASH_PageErase+0x3c>)
 8002e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e96:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000378 	.word	0x20000378
 8002ea8:	40022000 	.word	0x40022000

08002eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b08b      	sub	sp, #44	; 0x2c
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ebe:	e169      	b.n	8003194 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f040 8158 	bne.w	800318e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a9a      	ldr	r2, [pc, #616]	; (800314c <HAL_GPIO_Init+0x2a0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d05e      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
 8002ee8:	4a98      	ldr	r2, [pc, #608]	; (800314c <HAL_GPIO_Init+0x2a0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d875      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002eee:	4a98      	ldr	r2, [pc, #608]	; (8003150 <HAL_GPIO_Init+0x2a4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d058      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
 8002ef4:	4a96      	ldr	r2, [pc, #600]	; (8003150 <HAL_GPIO_Init+0x2a4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d86f      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002efa:	4a96      	ldr	r2, [pc, #600]	; (8003154 <HAL_GPIO_Init+0x2a8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d052      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
 8002f00:	4a94      	ldr	r2, [pc, #592]	; (8003154 <HAL_GPIO_Init+0x2a8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d869      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002f06:	4a94      	ldr	r2, [pc, #592]	; (8003158 <HAL_GPIO_Init+0x2ac>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d04c      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
 8002f0c:	4a92      	ldr	r2, [pc, #584]	; (8003158 <HAL_GPIO_Init+0x2ac>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d863      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002f12:	4a92      	ldr	r2, [pc, #584]	; (800315c <HAL_GPIO_Init+0x2b0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d046      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
 8002f18:	4a90      	ldr	r2, [pc, #576]	; (800315c <HAL_GPIO_Init+0x2b0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d85d      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002f1e:	2b12      	cmp	r3, #18
 8002f20:	d82a      	bhi.n	8002f78 <HAL_GPIO_Init+0xcc>
 8002f22:	2b12      	cmp	r3, #18
 8002f24:	d859      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002f26:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <HAL_GPIO_Init+0x80>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002fa7 	.word	0x08002fa7
 8002f30:	08002f81 	.word	0x08002f81
 8002f34:	08002f93 	.word	0x08002f93
 8002f38:	08002fd5 	.word	0x08002fd5
 8002f3c:	08002fdb 	.word	0x08002fdb
 8002f40:	08002fdb 	.word	0x08002fdb
 8002f44:	08002fdb 	.word	0x08002fdb
 8002f48:	08002fdb 	.word	0x08002fdb
 8002f4c:	08002fdb 	.word	0x08002fdb
 8002f50:	08002fdb 	.word	0x08002fdb
 8002f54:	08002fdb 	.word	0x08002fdb
 8002f58:	08002fdb 	.word	0x08002fdb
 8002f5c:	08002fdb 	.word	0x08002fdb
 8002f60:	08002fdb 	.word	0x08002fdb
 8002f64:	08002fdb 	.word	0x08002fdb
 8002f68:	08002fdb 	.word	0x08002fdb
 8002f6c:	08002fdb 	.word	0x08002fdb
 8002f70:	08002f89 	.word	0x08002f89
 8002f74:	08002f9d 	.word	0x08002f9d
 8002f78:	4a79      	ldr	r2, [pc, #484]	; (8003160 <HAL_GPIO_Init+0x2b4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f7e:	e02c      	b.n	8002fda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	623b      	str	r3, [r7, #32]
          break;
 8002f86:	e029      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	623b      	str	r3, [r7, #32]
          break;
 8002f90:	e024      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	3308      	adds	r3, #8
 8002f98:	623b      	str	r3, [r7, #32]
          break;
 8002f9a:	e01f      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	623b      	str	r3, [r7, #32]
          break;
 8002fa4:	e01a      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fae:	2304      	movs	r3, #4
 8002fb0:	623b      	str	r3, [r7, #32]
          break;
 8002fb2:	e013      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	611a      	str	r2, [r3, #16]
          break;
 8002fc6:	e009      	b.n	8002fdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc8:	2308      	movs	r3, #8
 8002fca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	615a      	str	r2, [r3, #20]
          break;
 8002fd2:	e003      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	623b      	str	r3, [r7, #32]
          break;
 8002fd8:	e000      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          break;
 8002fda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2bff      	cmp	r3, #255	; 0xff
 8002fe0:	d801      	bhi.n	8002fe6 <HAL_GPIO_Init+0x13a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	e001      	b.n	8002fea <HAL_GPIO_Init+0x13e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2bff      	cmp	r3, #255	; 0xff
 8002ff0:	d802      	bhi.n	8002ff8 <HAL_GPIO_Init+0x14c>
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	e002      	b.n	8002ffe <HAL_GPIO_Init+0x152>
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	3b08      	subs	r3, #8
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	210f      	movs	r1, #15
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	401a      	ands	r2, r3
 8003010:	6a39      	ldr	r1, [r7, #32]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	431a      	orrs	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80b1 	beq.w	800318e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800302c:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <HAL_GPIO_Init+0x2b8>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4a4c      	ldr	r2, [pc, #304]	; (8003164 <HAL_GPIO_Init+0x2b8>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6193      	str	r3, [r2, #24]
 8003038:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_GPIO_Init+0x2b8>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003044:	4a48      	ldr	r2, [pc, #288]	; (8003168 <HAL_GPIO_Init+0x2bc>)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	3302      	adds	r3, #2
 800304c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003050:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	220f      	movs	r2, #15
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4013      	ands	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a40      	ldr	r2, [pc, #256]	; (800316c <HAL_GPIO_Init+0x2c0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <HAL_GPIO_Init+0x1ec>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a3f      	ldr	r2, [pc, #252]	; (8003170 <HAL_GPIO_Init+0x2c4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00d      	beq.n	8003094 <HAL_GPIO_Init+0x1e8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a3e      	ldr	r2, [pc, #248]	; (8003174 <HAL_GPIO_Init+0x2c8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d007      	beq.n	8003090 <HAL_GPIO_Init+0x1e4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3d      	ldr	r2, [pc, #244]	; (8003178 <HAL_GPIO_Init+0x2cc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_GPIO_Init+0x1e0>
 8003088:	2303      	movs	r3, #3
 800308a:	e006      	b.n	800309a <HAL_GPIO_Init+0x1ee>
 800308c:	2304      	movs	r3, #4
 800308e:	e004      	b.n	800309a <HAL_GPIO_Init+0x1ee>
 8003090:	2302      	movs	r3, #2
 8003092:	e002      	b.n	800309a <HAL_GPIO_Init+0x1ee>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <HAL_GPIO_Init+0x1ee>
 8003098:	2300      	movs	r3, #0
 800309a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309c:	f002 0203 	and.w	r2, r2, #3
 80030a0:	0092      	lsls	r2, r2, #2
 80030a2:	4093      	lsls	r3, r2
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030aa:	492f      	ldr	r1, [pc, #188]	; (8003168 <HAL_GPIO_Init+0x2bc>)
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3302      	adds	r3, #2
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d006      	beq.n	80030d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030c4:	4b2d      	ldr	r3, [pc, #180]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	492c      	ldr	r1, [pc, #176]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	e006      	b.n	80030e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030d2:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	43db      	mvns	r3, r3
 80030da:	4928      	ldr	r1, [pc, #160]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030dc:	4013      	ands	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4922      	ldr	r1, [pc, #136]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	e006      	b.n	8003108 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	43db      	mvns	r3, r3
 8003102:	491e      	ldr	r1, [pc, #120]	; (800317c <HAL_GPIO_Init+0x2d0>)
 8003104:	4013      	ands	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003114:	4b19      	ldr	r3, [pc, #100]	; (800317c <HAL_GPIO_Init+0x2d0>)
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4918      	ldr	r1, [pc, #96]	; (800317c <HAL_GPIO_Init+0x2d0>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_GPIO_Init+0x2d0>)
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	43db      	mvns	r3, r3
 800312a:	4914      	ldr	r1, [pc, #80]	; (800317c <HAL_GPIO_Init+0x2d0>)
 800312c:	4013      	ands	r3, r2
 800312e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d021      	beq.n	8003180 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_GPIO_Init+0x2d0>)
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	490e      	ldr	r1, [pc, #56]	; (800317c <HAL_GPIO_Init+0x2d0>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
 8003148:	e021      	b.n	800318e <HAL_GPIO_Init+0x2e2>
 800314a:	bf00      	nop
 800314c:	10320000 	.word	0x10320000
 8003150:	10310000 	.word	0x10310000
 8003154:	10220000 	.word	0x10220000
 8003158:	10210000 	.word	0x10210000
 800315c:	10120000 	.word	0x10120000
 8003160:	10110000 	.word	0x10110000
 8003164:	40021000 	.word	0x40021000
 8003168:	40010000 	.word	0x40010000
 800316c:	40010800 	.word	0x40010800
 8003170:	40010c00 	.word	0x40010c00
 8003174:	40011000 	.word	0x40011000
 8003178:	40011400 	.word	0x40011400
 800317c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_GPIO_Init+0x304>)
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	43db      	mvns	r3, r3
 8003188:	4909      	ldr	r1, [pc, #36]	; (80031b0 <HAL_GPIO_Init+0x304>)
 800318a:	4013      	ands	r3, r2
 800318c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	3301      	adds	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f47f ae8e 	bne.w	8002ec0 <HAL_GPIO_Init+0x14>
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	372c      	adds	r7, #44	; 0x2c
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	40010400 	.word	0x40010400

080031b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	e001      	b.n	80031d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	807b      	strh	r3, [r7, #2]
 80031ee:	4613      	mov	r3, r2
 80031f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f2:	787b      	ldrb	r3, [r7, #1]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f8:	887a      	ldrh	r2, [r7, #2]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031fe:	e003      	b.n	8003208 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003200:	887b      	ldrh	r3, [r7, #2]
 8003202:	041a      	lsls	r2, r3, #16
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	611a      	str	r2, [r3, #16]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003224:	887a      	ldrh	r2, [r7, #2]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4013      	ands	r3, r2
 800322a:	041a      	lsls	r2, r3, #16
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43d9      	mvns	r1, r3
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	400b      	ands	r3, r1
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	611a      	str	r2, [r3, #16]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	b08b      	sub	sp, #44	; 0x2c
 8003248:	af06      	add	r7, sp, #24
 800324a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0fd      	b.n	8003452 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f007 fa46 	bl	800a6fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2203      	movs	r2, #3
 8003274:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f003 f86f 	bl	8006360 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	687e      	ldr	r6, [r7, #4]
 800328a:	466d      	mov	r5, sp
 800328c:	f106 0410 	add.w	r4, r6, #16
 8003290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	602b      	str	r3, [r5, #0]
 8003298:	1d33      	adds	r3, r6, #4
 800329a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800329c:	6838      	ldr	r0, [r7, #0]
 800329e:	f003 f839 	bl	8006314 <USB_CoreInit>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0ce      	b.n	8003452 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 f86a 	bl	8006394 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e04c      	b.n	8003360 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	440b      	add	r3, r1
 80032d6:	3301      	adds	r3, #1
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	b298      	uxth	r0, r3
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	3336      	adds	r3, #54	; 0x36
 8003304:	4602      	mov	r2, r0
 8003306:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	3303      	adds	r3, #3
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800331e:	7bfa      	ldrb	r2, [r7, #15]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	3338      	adds	r3, #56	; 0x38
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	440b      	add	r3, r1
 8003340:	333c      	adds	r3, #60	; 0x3c
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	3340      	adds	r3, #64	; 0x40
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	3301      	adds	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	429a      	cmp	r2, r3
 8003368:	d3ad      	bcc.n	80032c6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	e044      	b.n	80033fa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	440b      	add	r3, r1
 80033c0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	440b      	add	r3, r1
 80033d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	3301      	adds	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	d3b5      	bcc.n	8003370 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	687e      	ldr	r6, [r7, #4]
 800340c:	466d      	mov	r5, sp
 800340e:	f106 0410 	add.w	r4, r6, #16
 8003412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	602b      	str	r3, [r5, #0]
 800341a:	1d33      	adds	r3, r6, #4
 800341c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	f002 ffc4 	bl	80063ac <USB_DevInit>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e00d      	b.n	8003452 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f005 fc76 	bl	8008d3c <USB_DevDisconnect>

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800345a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_PCD_Start+0x16>
 800346c:	2302      	movs	r3, #2
 800346e:	e016      	b.n	800349e <HAL_PCD_Start+0x44>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f002 ff59 	bl	8006334 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003482:	2101      	movs	r1, #1
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f007 fb90 	bl	800abaa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f005 fc4a 	bl	8008d28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b088      	sub	sp, #32
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f005 fc4c 	bl	8008d50 <USB_ReadInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c2:	d102      	bne.n	80034ca <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fb48 	bl	8003b5a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f005 fc3e 	bl	8008d50 <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034de:	d112      	bne.n	8003506 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f2:	b292      	uxth	r2, r2
 80034f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f007 f97a 	bl	800a7f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80034fe:	2100      	movs	r1, #0
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f923 	bl	800374c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f005 fc20 	bl	8008d50 <USB_ReadInterrupts>
 8003510:	4603      	mov	r3, r0
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800351a:	d10b      	bne.n	8003534 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800352e:	b292      	uxth	r2, r2
 8003530:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f005 fc09 	bl	8008d50 <USB_ReadInterrupts>
 800353e:	4603      	mov	r3, r0
 8003540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003548:	d10b      	bne.n	8003562 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355c:	b292      	uxth	r2, r2
 800355e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f005 fbf2 	bl	8008d50 <USB_ReadInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003576:	d126      	bne.n	80035c6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003580:	b29a      	uxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0204 	bic.w	r2, r2, #4
 800358a:	b292      	uxth	r2, r2
 800358c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0208 	bic.w	r2, r2, #8
 80035a2:	b292      	uxth	r2, r2
 80035a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f007 f95b 	bl	800a864 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035c0:	b292      	uxth	r2, r2
 80035c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f005 fbc0 	bl	8008d50 <USB_ReadInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035da:	f040 8082 	bne.w	80036e2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e010      	b.n	8003606 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	7ffb      	ldrb	r3, [r7, #31]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	441a      	add	r2, r3
 80035f0:	7ffb      	ldrb	r3, [r7, #31]
 80035f2:	8812      	ldrh	r2, [r2, #0]
 80035f4:	b292      	uxth	r2, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	3320      	adds	r3, #32
 80035fa:	443b      	add	r3, r7
 80035fc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003600:	7ffb      	ldrb	r3, [r7, #31]
 8003602:	3301      	adds	r3, #1
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	7ffb      	ldrb	r3, [r7, #31]
 8003608:	2b07      	cmp	r3, #7
 800360a:	d9eb      	bls.n	80035e4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	b292      	uxth	r2, r2
 8003620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800362c:	b29a      	uxth	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	b292      	uxth	r2, r2
 8003638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800363c:	bf00      	nop
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003646:	b29b      	uxth	r3, r3
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f6      	beq.n	800363e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003658:	b29a      	uxth	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003662:	b292      	uxth	r2, r2
 8003664:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003668:	2300      	movs	r3, #0
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e00f      	b.n	800368e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800366e:	7ffb      	ldrb	r3, [r7, #31]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	4611      	mov	r1, r2
 8003676:	7ffa      	ldrb	r2, [r7, #31]
 8003678:	0092      	lsls	r2, r2, #2
 800367a:	440a      	add	r2, r1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	3320      	adds	r3, #32
 8003680:	443b      	add	r3, r7
 8003682:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003686:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003688:	7ffb      	ldrb	r3, [r7, #31]
 800368a:	3301      	adds	r3, #1
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	7ffb      	ldrb	r3, [r7, #31]
 8003690:	2b07      	cmp	r3, #7
 8003692:	d9ec      	bls.n	800366e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0208 	orr.w	r2, r2, #8
 80036a6:	b292      	uxth	r2, r2
 80036a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036be:	b292      	uxth	r2, r2
 80036c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0204 	orr.w	r2, r2, #4
 80036d6:	b292      	uxth	r2, r2
 80036d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f007 f8a7 	bl	800a830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f005 fb32 	bl	8008d50 <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f6:	d10e      	bne.n	8003716 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003700:	b29a      	uxth	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800370a:	b292      	uxth	r2, r2
 800370c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f007 f860 	bl	800a7d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f005 fb18 	bl	8008d50 <USB_ReadInterrupts>
 8003720:	4603      	mov	r3, r0
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372a:	d10b      	bne.n	8003744 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800373e:	b292      	uxth	r2, r2
 8003740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003744:	bf00      	nop
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_PCD_SetAddress+0x1a>
 8003762:	2302      	movs	r3, #2
 8003764:	e013      	b.n	800378e <HAL_PCD_SetAddress+0x42>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f005 fabf 	bl	8008d02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	4608      	mov	r0, r1
 80037a0:	4611      	mov	r1, r2
 80037a2:	461a      	mov	r2, r3
 80037a4:	4603      	mov	r3, r0
 80037a6:	70fb      	strb	r3, [r7, #3]
 80037a8:	460b      	mov	r3, r1
 80037aa:	803b      	strh	r3, [r7, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da0e      	bge.n	80037da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	705a      	strb	r2, [r3, #1]
 80037d8:	e00e      	b.n	80037f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 0207 	and.w	r2, r3, #7
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003804:	883a      	ldrh	r2, [r7, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	78ba      	ldrb	r2, [r7, #2]
 800380e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	785b      	ldrb	r3, [r3, #1]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003822:	78bb      	ldrb	r3, [r7, #2]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d102      	bne.n	800382e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_PCD_EP_Open+0xa6>
 8003838:	2302      	movs	r3, #2
 800383a:	e00e      	b.n	800385a <HAL_PCD_EP_Open+0xc4>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68f9      	ldr	r1, [r7, #12]
 800384a:	4618      	mov	r0, r3
 800384c:	f002 fdce 	bl	80063ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003858:	7afb      	ldrb	r3, [r7, #11]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800386e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003872:	2b00      	cmp	r3, #0
 8003874:	da0e      	bge.n	8003894 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	705a      	strb	r2, [r3, #1]
 8003892:	e00e      	b.n	80038b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 0207 	and.w	r2, r3, #7
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_PCD_EP_Close+0x6a>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e00e      	b.n	80038ea <HAL_PCD_EP_Close+0x88>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	4618      	mov	r0, r3
 80038dc:	f003 f8f0 	bl	8006ac0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	460b      	mov	r3, r1
 8003900:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003902:	7afb      	ldrb	r3, [r7, #11]
 8003904:	f003 0207 	and.w	r2, r3, #7
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2200      	movs	r2, #0
 8003930:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	b2da      	uxtb	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800393e:	7afb      	ldrb	r3, [r7, #11]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6979      	ldr	r1, [r7, #20]
 800394e:	4618      	mov	r0, r3
 8003950:	f003 faa2 	bl	8006e98 <USB_EPStartXfer>
 8003954:	e005      	b.n	8003962 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6979      	ldr	r1, [r7, #20]
 800395c:	4618      	mov	r0, r3
 800395e:	f003 fa9b 	bl	8006e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	460b      	mov	r3, r1
 800397a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397c:	7afb      	ldrb	r3, [r7, #11]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2201      	movs	r2, #1
 80039b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b8:	7afb      	ldrb	r3, [r7, #11]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039c4:	7afb      	ldrb	r3, [r7, #11]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6979      	ldr	r1, [r7, #20]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fa5f 	bl	8006e98 <USB_EPStartXfer>
 80039da:	e005      	b.n	80039e8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6979      	ldr	r1, [r7, #20]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 fa58 	bl	8006e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	f003 0207 	and.w	r2, r3, #7
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d901      	bls.n	8003a10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e04c      	b.n	8003aaa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	da0e      	bge.n	8003a36 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	705a      	strb	r2, [r3, #1]
 8003a34:	e00c      	b.n	8003a50 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4413      	add	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_PCD_EP_SetStall+0x7e>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e01c      	b.n	8003aaa <HAL_PCD_EP_SetStall+0xb8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f005 f842 	bl	8008b08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d108      	bne.n	8003aa0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f005 f967 	bl	8008d6e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	f003 020f 	and.w	r2, r3, #15
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d901      	bls.n	8003ad0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e040      	b.n	8003b52 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	da0e      	bge.n	8003af6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	705a      	strb	r2, [r3, #1]
 8003af4:	e00e      	b.n	8003b14 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	f003 0207 	and.w	r2, r3, #7
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_PCD_EP_ClrStall+0x82>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e00e      	b.n	8003b52 <HAL_PCD_EP_ClrStall+0xa0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f005 f830 	bl	8008ba8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b08e      	sub	sp, #56	; 0x38
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b62:	e2ec      	b.n	800413e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b6c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003b7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f040 8161 	bne.w	8003e46 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d152      	bne.n	8003c34 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	81fb      	strh	r3, [r7, #14]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	89fb      	ldrh	r3, [r7, #14]
 8003ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3328      	adds	r3, #40	; 0x28
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3302      	adds	r3, #2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	441a      	add	r2, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f006 fdd4 	bl	800a7a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 829b 	beq.w	800413e <PCD_EP_ISR_Handler+0x5e4>
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f040 8296 	bne.w	800413e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	b292      	uxth	r2, r2
 8003c26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c32:	e284      	b.n	800413e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d034      	beq.n	8003cb8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4413      	add	r3, r2
 8003c62:	3306      	adds	r3, #6
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f005 f8be 	bl	8008e0e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	823b      	strh	r3, [r7, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	8a3a      	ldrh	r2, [r7, #16]
 8003ca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cac:	b292      	uxth	r2, r2
 8003cae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f006 fd49 	bl	800a748 <HAL_PCD_SetupStageCallback>
 8003cb6:	e242      	b.n	800413e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cb8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f280 823e 	bge.w	800413e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cce:	4013      	ands	r3, r2
 8003cd0:	83bb      	strh	r3, [r7, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	8bba      	ldrh	r2, [r7, #28]
 8003cd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cdc:	b292      	uxth	r2, r2
 8003cde:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3306      	adds	r3, #6
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d019      	beq.n	8003d48 <PCD_EP_ISR_Handler+0x1ee>
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d015      	beq.n	8003d48 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	6959      	ldr	r1, [r3, #20]
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f005 f86e 	bl	8008e0e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	441a      	add	r2, r3
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d40:	2100      	movs	r1, #0
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f006 fd12 	bl	800a76c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f040 81f2 	bne.w	800413e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	4413      	add	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d112      	bne.n	8003da8 <PCD_EP_ISR_Handler+0x24e>
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	801a      	strh	r2, [r3, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	801a      	strh	r2, [r3, #0]
 8003da6:	e02f      	b.n	8003e08 <PCD_EP_ISR_Handler+0x2ae>
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b3e      	cmp	r3, #62	; 0x3e
 8003dae:	d813      	bhi.n	8003dd8 <PCD_EP_ISR_Handler+0x27e>
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	633b      	str	r3, [r7, #48]	; 0x30
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <PCD_EP_ISR_Handler+0x270>
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	801a      	strh	r2, [r3, #0]
 8003dd6:	e017      	b.n	8003e08 <PCD_EP_ISR_Handler+0x2ae>
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <PCD_EP_ISR_Handler+0x298>
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	3b01      	subs	r3, #1
 8003df0:	633b      	str	r3, [r7, #48]	; 0x30
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	029b      	lsls	r3, r3, #10
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e18:	827b      	strh	r3, [r7, #18]
 8003e1a:	8a7b      	ldrh	r3, [r7, #18]
 8003e1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e20:	827b      	strh	r3, [r7, #18]
 8003e22:	8a7b      	ldrh	r3, [r7, #18]
 8003e24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e28:	827b      	strh	r3, [r7, #18]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	8a7b      	ldrh	r3, [r7, #18]
 8003e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	8013      	strh	r3, [r2, #0]
 8003e44:	e17b      	b.n	800413e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e58:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f280 80ea 	bge.w	8004036 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e78:	4013      	ands	r3, r2
 8003e7a:	853b      	strh	r3, [r7, #40]	; 0x28
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e90:	b292      	uxth	r2, r2
 8003e92:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e94:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	7b1b      	ldrb	r3, [r3, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d122      	bne.n	8003ef8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3306      	adds	r3, #6
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eda:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003edc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 8087 	beq.w	8003ff2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	6959      	ldr	r1, [r3, #20]
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	88da      	ldrh	r2, [r3, #6]
 8003ef0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ef2:	f004 ff8c 	bl	8008e0e <USB_ReadPMA>
 8003ef6:	e07c      	b.n	8003ff2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	78db      	ldrb	r3, [r3, #3]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d108      	bne.n	8003f12 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f02:	461a      	mov	r2, r3
 8003f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f927 	bl	800415a <HAL_PCD_EP_DB_Receive>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003f10:	e06f      	b.n	8003ff2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2c:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d021      	beq.n	8003fb0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	3302      	adds	r3, #2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f94:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02a      	beq.n	8003ff2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	6959      	ldr	r1, [r3, #20]
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	891a      	ldrh	r2, [r3, #8]
 8003fa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003faa:	f004 ff30 	bl	8008e0e <USB_ReadPMA>
 8003fae:	e020      	b.n	8003ff2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3306      	adds	r3, #6
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003fda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	6959      	ldr	r1, [r3, #20]
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	895a      	ldrh	r2, [r3, #10]
 8003fec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fee:	f004 ff0e 	bl	8008e0e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	69da      	ldr	r2, [r3, #28]
 8003ff6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ff8:	441a      	add	r2, r3
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004004:	441a      	add	r2, r3
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <PCD_EP_ISR_Handler+0x4c2>
 8004012:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	429a      	cmp	r2, r3
 800401a:	d206      	bcs.n	800402a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f006 fba2 	bl	800a76c <HAL_PCD_DataOutStageCallback>
 8004028:	e005      	b.n	8004036 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004030:	4618      	mov	r0, r3
 8004032:	f002 ff31 	bl	8006e98 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004036:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403c:	2b00      	cmp	r3, #0
 800403e:	d07e      	beq.n	800413e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004040:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	843b      	strh	r3, [r7, #32]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	441a      	add	r2, r3
 800407e:	8c3b      	ldrh	r3, [r7, #32]
 8004080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004088:	b29b      	uxth	r3, r3
 800408a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	78db      	ldrb	r3, [r3, #3]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d00c      	beq.n	80040ae <PCD_EP_ISR_Handler+0x554>
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	78db      	ldrb	r3, [r3, #3]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d146      	bne.n	8004132 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80040a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d141      	bne.n	8004132 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	3302      	adds	r3, #2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040d6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	8bfb      	ldrh	r3, [r7, #30]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d906      	bls.n	80040f0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	8bfb      	ldrh	r3, [r7, #30]
 80040e8:	1ad2      	subs	r2, r2, r3
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	619a      	str	r2, [r3, #24]
 80040ee:	e002      	b.n	80040f6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	2200      	movs	r2, #0
 80040f4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	4619      	mov	r1, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f006 fb4c 	bl	800a7a2 <HAL_PCD_DataInStageCallback>
 800410a:	e018      	b.n	800413e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	8bfb      	ldrh	r3, [r7, #30]
 8004112:	441a      	add	r2, r3
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	8bfb      	ldrh	r3, [r7, #30]
 800411e:	441a      	add	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800412a:	4618      	mov	r0, r3
 800412c:	f002 feb4 	bl	8006e98 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004130:	e005      	b.n	800413e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004132:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004134:	461a      	mov	r2, r3
 8004136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f91b 	bl	8004374 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004146:	b29b      	uxth	r3, r3
 8004148:	b21b      	sxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	f6ff ad0a 	blt.w	8003b64 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3738      	adds	r7, #56	; 0x38
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b088      	sub	sp, #32
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	4613      	mov	r3, r2
 8004166:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d07e      	beq.n	8004270 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417a:	b29b      	uxth	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	3302      	adds	r3, #2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800419a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	8b7b      	ldrh	r3, [r7, #26]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d306      	bcc.n	80041b4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	8b7b      	ldrh	r3, [r7, #26]
 80041ac:	1ad2      	subs	r2, r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	619a      	str	r2, [r3, #24]
 80041b2:	e002      	b.n	80041ba <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d123      	bne.n	800420a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041dc:	833b      	strh	r3, [r7, #24]
 80041de:	8b3b      	ldrh	r3, [r7, #24]
 80041e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041e4:	833b      	strh	r3, [r7, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	441a      	add	r2, r3
 80041f4:	8b3b      	ldrh	r3, [r7, #24]
 80041f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004206:	b29b      	uxth	r3, r3
 8004208:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01f      	beq.n	8004254 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422e:	82fb      	strh	r3, [r7, #22]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	441a      	add	r2, r3
 800423e:	8afb      	ldrh	r3, [r7, #22]
 8004240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004254:	8b7b      	ldrh	r3, [r7, #26]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8087 	beq.w	800436a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6959      	ldr	r1, [r3, #20]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	891a      	ldrh	r2, [r3, #8]
 8004268:	8b7b      	ldrh	r3, [r7, #26]
 800426a:	f004 fdd0 	bl	8008e0e <USB_ReadPMA>
 800426e:	e07c      	b.n	800436a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004278:	b29b      	uxth	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	3306      	adds	r3, #6
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004298:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	8b7b      	ldrh	r3, [r7, #26]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d306      	bcc.n	80042b2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	699a      	ldr	r2, [r3, #24]
 80042a8:	8b7b      	ldrh	r3, [r7, #26]
 80042aa:	1ad2      	subs	r2, r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	619a      	str	r2, [r3, #24]
 80042b0:	e002      	b.n	80042b8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2200      	movs	r2, #0
 80042b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d123      	bne.n	8004308 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	83fb      	strh	r3, [r7, #30]
 80042dc:	8bfb      	ldrh	r3, [r7, #30]
 80042de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042e2:	83fb      	strh	r3, [r7, #30]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	441a      	add	r2, r3
 80042f2:	8bfb      	ldrh	r3, [r7, #30]
 80042f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004304:	b29b      	uxth	r3, r3
 8004306:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d11f      	bne.n	8004352 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432c:	83bb      	strh	r3, [r7, #28]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	8bbb      	ldrh	r3, [r7, #28]
 800433e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800434e:	b29b      	uxth	r3, r3
 8004350:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004352:	8b7b      	ldrh	r3, [r7, #26]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6959      	ldr	r1, [r3, #20]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	895a      	ldrh	r2, [r3, #10]
 8004364:	8b7b      	ldrh	r3, [r7, #26]
 8004366:	f004 fd52 	bl	8008e0e <USB_ReadPMA>
    }
  }

  return count;
 800436a:	8b7b      	ldrh	r3, [r7, #26]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b0a2      	sub	sp, #136	; 0x88
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	4613      	mov	r3, r2
 8004380:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 81c7 	beq.w	800471c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004396:	b29b      	uxth	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	3302      	adds	r3, #2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d907      	bls.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043ce:	1ad2      	subs	r2, r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	619a      	str	r2, [r3, #24]
 80043d4:	e002      	b.n	80043dc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2200      	movs	r2, #0
 80043da:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f040 80b9 	bne.w	8004558 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	785b      	ldrb	r3, [r3, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d126      	bne.n	800443c <HAL_PCD_EP_DB_Transmit+0xc8>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	4413      	add	r3, r2
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	011a      	lsls	r2, r3, #4
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	4413      	add	r3, r2
 8004410:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004420:	b29a      	uxth	r2, r3
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	801a      	strh	r2, [r3, #0]
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004434:	b29a      	uxth	r2, r3
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	801a      	strh	r2, [r3, #0]
 800443a:	e01a      	b.n	8004472 <HAL_PCD_EP_DB_Transmit+0xfe>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d116      	bne.n	8004472 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	633b      	str	r3, [r7, #48]	; 0x30
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	4413      	add	r3, r2
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	011a      	lsls	r2, r3, #4
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	4413      	add	r3, r2
 8004466:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	2200      	movs	r2, #0
 8004470:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d126      	bne.n	80044ce <HAL_PCD_EP_DB_Transmit+0x15a>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800448e:	b29b      	uxth	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	4413      	add	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	011a      	lsls	r2, r3, #4
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	4413      	add	r3, r2
 80044a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	e017      	b.n	80044fe <HAL_PCD_EP_DB_Transmit+0x18a>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d113      	bne.n	80044fe <HAL_PCD_EP_DB_Transmit+0x18a>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044de:	b29b      	uxth	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	4413      	add	r3, r2
 80044e6:	623b      	str	r3, [r7, #32]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	011a      	lsls	r2, r3, #4
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	4413      	add	r3, r2
 80044f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	2200      	movs	r2, #0
 80044fc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	4619      	mov	r1, r3
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f006 f94c 	bl	800a7a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 82d4 	beq.w	8004abe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004530:	827b      	strh	r3, [r7, #18]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	8a7b      	ldrh	r3, [r7, #18]
 8004542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]
 8004556:	e2b2      	b.n	8004abe <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d021      	beq.n	80045a6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 8286 	bne.w	8004abe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045ba:	441a      	add	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045c8:	441a      	add	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6a1a      	ldr	r2, [r3, #32]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d309      	bcc.n	80045ee <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6a1a      	ldr	r2, [r3, #32]
 80045e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e6:	1ad2      	subs	r2, r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	621a      	str	r2, [r3, #32]
 80045ec:	e015      	b.n	800461a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d107      	bne.n	8004606 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80045f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004604:	e009      	b.n	800461a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2200      	movs	r2, #0
 8004618:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	785b      	ldrb	r3, [r3, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d155      	bne.n	80046ce <HAL_PCD_EP_DB_Transmit+0x35a>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004630:	b29b      	uxth	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	4413      	add	r3, r2
 8004638:	63bb      	str	r3, [r7, #56]	; 0x38
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	011a      	lsls	r2, r3, #4
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	4413      	add	r3, r2
 8004644:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
 800464a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464c:	2b00      	cmp	r3, #0
 800464e:	d112      	bne.n	8004676 <HAL_PCD_EP_DB_Transmit+0x302>
 8004650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800465a:	b29a      	uxth	r2, r3
 800465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800466a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800466e:	b29a      	uxth	r2, r3
 8004670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	e047      	b.n	8004706 <HAL_PCD_EP_DB_Transmit+0x392>
 8004676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004678:	2b3e      	cmp	r3, #62	; 0x3e
 800467a:	d811      	bhi.n	80046a0 <HAL_PCD_EP_DB_Transmit+0x32c>
 800467c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	64bb      	str	r3, [r7, #72]	; 0x48
 8004682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_PCD_EP_DB_Transmit+0x31e>
 800468c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468e:	3301      	adds	r3, #1
 8004690:	64bb      	str	r3, [r7, #72]	; 0x48
 8004692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004694:	b29b      	uxth	r3, r3
 8004696:	029b      	lsls	r3, r3, #10
 8004698:	b29a      	uxth	r2, r3
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	e032      	b.n	8004706 <HAL_PCD_EP_DB_Transmit+0x392>
 80046a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d102      	bne.n	80046b6 <HAL_PCD_EP_DB_Transmit+0x342>
 80046b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b2:	3b01      	subs	r3, #1
 80046b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	029b      	lsls	r3, r3, #10
 80046bc:	b29b      	uxth	r3, r3
 80046be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	801a      	strh	r2, [r3, #0]
 80046cc:	e01b      	b.n	8004706 <HAL_PCD_EP_DB_Transmit+0x392>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	785b      	ldrb	r3, [r3, #1]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d117      	bne.n	8004706 <HAL_PCD_EP_DB_Transmit+0x392>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	643b      	str	r3, [r7, #64]	; 0x40
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ea:	4413      	add	r3, r2
 80046ec:	643b      	str	r3, [r7, #64]	; 0x40
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	011a      	lsls	r2, r3, #4
 80046f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f6:	4413      	add	r3, r2
 80046f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004700:	b29a      	uxth	r2, r3
 8004702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004704:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6959      	ldr	r1, [r3, #20]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	891a      	ldrh	r2, [r3, #8]
 8004712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004714:	b29b      	uxth	r3, r3
 8004716:	f004 fb35 	bl	8008d84 <USB_WritePMA>
 800471a:	e1d0      	b.n	8004abe <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004724:	b29b      	uxth	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4413      	add	r3, r2
 8004730:	3306      	adds	r3, #6
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004744:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004750:	429a      	cmp	r2, r3
 8004752:	d307      	bcc.n	8004764 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800475c:	1ad2      	subs	r2, r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	619a      	str	r2, [r3, #24]
 8004762:	e002      	b.n	800476a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2200      	movs	r2, #0
 8004768:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 80c4 	bne.w	80048fc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d126      	bne.n	80047ca <HAL_PCD_EP_DB_Transmit+0x456>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004790:	4413      	add	r3, r2
 8004792:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	011a      	lsls	r2, r3, #4
 800479a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479c:	4413      	add	r3, r2
 800479e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	e01a      	b.n	8004800 <HAL_PCD_EP_DB_Transmit+0x48c>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d116      	bne.n	8004800 <HAL_PCD_EP_DB_Transmit+0x48c>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	677b      	str	r3, [r7, #116]	; 0x74
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e6:	4413      	add	r3, r2
 80047e8:	677b      	str	r3, [r7, #116]	; 0x74
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	011a      	lsls	r2, r3, #4
 80047f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f2:	4413      	add	r3, r2
 80047f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047f8:	673b      	str	r3, [r7, #112]	; 0x70
 80047fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047fc:	2200      	movs	r2, #0
 80047fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	67bb      	str	r3, [r7, #120]	; 0x78
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	785b      	ldrb	r3, [r3, #1]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d12f      	bne.n	800486e <HAL_PCD_EP_DB_Transmit+0x4fa>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481e:	b29b      	uxth	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004826:	4413      	add	r3, r2
 8004828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	011a      	lsls	r2, r3, #4
 8004832:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004836:	4413      	add	r3, r2
 8004838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800483c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800484c:	b29a      	uxth	r2, r3
 800484e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004852:	801a      	strh	r2, [r3, #0]
 8004854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004864:	b29a      	uxth	r2, r3
 8004866:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800486a:	801a      	strh	r2, [r3, #0]
 800486c:	e017      	b.n	800489e <HAL_PCD_EP_DB_Transmit+0x52a>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	785b      	ldrb	r3, [r3, #1]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d113      	bne.n	800489e <HAL_PCD_EP_DB_Transmit+0x52a>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487e:	b29b      	uxth	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004884:	4413      	add	r3, r2
 8004886:	67bb      	str	r3, [r7, #120]	; 0x78
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	011a      	lsls	r2, r3, #4
 800488e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004890:	4413      	add	r3, r2
 8004892:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004896:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004898:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800489a:	2200      	movs	r2, #0
 800489c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f005 ff7c 	bl	800a7a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 8104 	bne.w	8004abe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	441a      	add	r2, r3
 80048e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80048e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]
 80048fa:	e0e0      	b.n	8004abe <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d121      	bne.n	800494a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800493a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004946:	b29b      	uxth	r3, r3
 8004948:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004950:	2b01      	cmp	r3, #1
 8004952:	f040 80b4 	bne.w	8004abe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800495e:	441a      	add	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800496c:	441a      	add	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d309      	bcc.n	8004992 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	621a      	str	r2, [r3, #32]
 8004990:	e015      	b.n	80049be <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d107      	bne.n	80049aa <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800499a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800499e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049a8:	e009      	b.n	80049be <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2200      	movs	r2, #0
 80049b4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	667b      	str	r3, [r7, #100]	; 0x64
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d155      	bne.n	8004a78 <HAL_PCD_EP_DB_Transmit+0x704>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049da:	b29b      	uxth	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e0:	4413      	add	r3, r2
 80049e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	011a      	lsls	r2, r3, #4
 80049ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ec:	4413      	add	r3, r2
 80049ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80049f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d112      	bne.n	8004a20 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80049fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a08:	801a      	strh	r2, [r3, #0]
 8004a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	e044      	b.n	8004aaa <HAL_PCD_EP_DB_Transmit+0x736>
 8004a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a22:	2b3e      	cmp	r3, #62	; 0x3e
 8004a24:	d811      	bhi.n	8004a4a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a28:	085b      	lsrs	r3, r3, #1
 8004a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a38:	3301      	adds	r3, #1
 8004a3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	029b      	lsls	r3, r3, #10
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	e02f      	b.n	8004aaa <HAL_PCD_EP_DB_Transmit+0x736>
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	029b      	lsls	r3, r3, #10
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a74:	801a      	strh	r2, [r3, #0]
 8004a76:	e018      	b.n	8004aaa <HAL_PCD_EP_DB_Transmit+0x736>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d114      	bne.n	8004aaa <HAL_PCD_EP_DB_Transmit+0x736>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a8e:	4413      	add	r3, r2
 8004a90:	667b      	str	r3, [r7, #100]	; 0x64
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	011a      	lsls	r2, r3, #4
 8004a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6959      	ldr	r1, [r3, #20]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	895a      	ldrh	r2, [r3, #10]
 8004ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f004 f963 	bl	8008d84 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad8:	823b      	strh	r3, [r7, #16]
 8004ada:	8a3b      	ldrh	r3, [r7, #16]
 8004adc:	f083 0310 	eor.w	r3, r3, #16
 8004ae0:	823b      	strh	r3, [r7, #16]
 8004ae2:	8a3b      	ldrh	r3, [r7, #16]
 8004ae4:	f083 0320 	eor.w	r3, r3, #32
 8004ae8:	823b      	strh	r3, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	441a      	add	r2, r3
 8004af8:	8a3b      	ldrh	r3, [r7, #16]
 8004afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3788      	adds	r7, #136	; 0x88
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	817b      	strh	r3, [r7, #10]
 8004b26:	4613      	mov	r3, r2
 8004b28:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004b2a:	897b      	ldrh	r3, [r7, #10]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b36:	897b      	ldrh	r3, [r7, #10]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	e009      	b.n	8004b62 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b4e:	897a      	ldrh	r2, [r7, #10]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004b62:	893b      	ldrh	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	80da      	strh	r2, [r3, #6]
 8004b76:	e00b      	b.n	8004b90 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0c1b      	lsrs	r3, r3, #16
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e272      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8087 	beq.w	8004cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bbc:	4b92      	ldr	r3, [pc, #584]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d00c      	beq.n	8004be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bc8:	4b8f      	ldr	r3, [pc, #572]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d112      	bne.n	8004bfa <HAL_RCC_OscConfig+0x5e>
 8004bd4:	4b8c      	ldr	r3, [pc, #560]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d10b      	bne.n	8004bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be2:	4b89      	ldr	r3, [pc, #548]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d06c      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x12c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d168      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e24c      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c02:	d106      	bne.n	8004c12 <HAL_RCC_OscConfig+0x76>
 8004c04:	4b80      	ldr	r3, [pc, #512]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a7f      	ldr	r2, [pc, #508]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	e02e      	b.n	8004c70 <HAL_RCC_OscConfig+0xd4>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x98>
 8004c1a:	4b7b      	ldr	r3, [pc, #492]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a7a      	ldr	r2, [pc, #488]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	4b78      	ldr	r3, [pc, #480]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a77      	ldr	r2, [pc, #476]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e01d      	b.n	8004c70 <HAL_RCC_OscConfig+0xd4>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCC_OscConfig+0xbc>
 8004c3e:	4b72      	ldr	r3, [pc, #456]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a71      	ldr	r2, [pc, #452]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	4b6f      	ldr	r3, [pc, #444]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a6e      	ldr	r2, [pc, #440]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e00b      	b.n	8004c70 <HAL_RCC_OscConfig+0xd4>
 8004c58:	4b6b      	ldr	r3, [pc, #428]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a6a      	ldr	r2, [pc, #424]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a67      	ldr	r2, [pc, #412]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d013      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fc ff80 	bl	8001b7c <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c80:	f7fc ff7c 	bl	8001b7c <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	; 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e200      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	4b5d      	ldr	r3, [pc, #372]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0xe4>
 8004c9e:	e014      	b.n	8004cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fc ff6c 	bl	8001b7c <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fc ff68 	bl	8001b7c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e1ec      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cba:	4b53      	ldr	r3, [pc, #332]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x10c>
 8004cc6:	e000      	b.n	8004cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d063      	beq.n	8004d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cd6:	4b4c      	ldr	r3, [pc, #304]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ce2:	4b49      	ldr	r3, [pc, #292]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d11c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x18c>
 8004cee:	4b46      	ldr	r3, [pc, #280]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d116      	bne.n	8004d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfa:	4b43      	ldr	r3, [pc, #268]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_RCC_OscConfig+0x176>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d001      	beq.n	8004d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e1c0      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d12:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4939      	ldr	r1, [pc, #228]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d26:	e03a      	b.n	8004d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d020      	beq.n	8004d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d30:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <HAL_RCC_OscConfig+0x270>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d36:	f7fc ff21 	bl	8001b7c <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3e:	f7fc ff1d 	bl	8001b7c <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e1a1      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d50:	4b2d      	ldr	r3, [pc, #180]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5c:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4927      	ldr	r1, [pc, #156]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]
 8004d70:	e015      	b.n	8004d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d72:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <HAL_RCC_OscConfig+0x270>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7fc ff00 	bl	8001b7c <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d80:	f7fc fefc 	bl	8001b7c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e180      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d92:	4b1d      	ldr	r3, [pc, #116]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d03a      	beq.n	8004e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d019      	beq.n	8004de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <HAL_RCC_OscConfig+0x274>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db8:	f7fc fee0 	bl	8001b7c <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc0:	f7fc fedc 	bl	8001b7c <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e160      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004dde:	2001      	movs	r0, #1
 8004de0:	f000 fad8 	bl	8005394 <RCC_Delay>
 8004de4:	e01c      	b.n	8004e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de6:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <HAL_RCC_OscConfig+0x274>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dec:	f7fc fec6 	bl	8001b7c <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df2:	e00f      	b.n	8004e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df4:	f7fc fec2 	bl	8001b7c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d908      	bls.n	8004e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e146      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	42420000 	.word	0x42420000
 8004e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e14:	4b92      	ldr	r3, [pc, #584]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e9      	bne.n	8004df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80a6 	beq.w	8004f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e32:	4b8b      	ldr	r3, [pc, #556]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10d      	bne.n	8004e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3e:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	4a87      	ldr	r2, [pc, #540]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e48:	61d3      	str	r3, [r2, #28]
 8004e4a:	4b85      	ldr	r3, [pc, #532]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5a:	4b82      	ldr	r3, [pc, #520]	; (8005064 <HAL_RCC_OscConfig+0x4c8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d118      	bne.n	8004e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e66:	4b7f      	ldr	r3, [pc, #508]	; (8005064 <HAL_RCC_OscConfig+0x4c8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a7e      	ldr	r2, [pc, #504]	; (8005064 <HAL_RCC_OscConfig+0x4c8>)
 8004e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e72:	f7fc fe83 	bl	8001b7c <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7a:	f7fc fe7f 	bl	8001b7c <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b64      	cmp	r3, #100	; 0x64
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e103      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8c:	4b75      	ldr	r3, [pc, #468]	; (8005064 <HAL_RCC_OscConfig+0x4c8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x312>
 8004ea0:	4b6f      	ldr	r3, [pc, #444]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	4a6e      	ldr	r2, [pc, #440]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6213      	str	r3, [r2, #32]
 8004eac:	e02d      	b.n	8004f0a <HAL_RCC_OscConfig+0x36e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x334>
 8004eb6:	4b6a      	ldr	r3, [pc, #424]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	4a69      	ldr	r2, [pc, #420]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	f023 0301 	bic.w	r3, r3, #1
 8004ec0:	6213      	str	r3, [r2, #32]
 8004ec2:	4b67      	ldr	r3, [pc, #412]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	4a66      	ldr	r2, [pc, #408]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004ec8:	f023 0304 	bic.w	r3, r3, #4
 8004ecc:	6213      	str	r3, [r2, #32]
 8004ece:	e01c      	b.n	8004f0a <HAL_RCC_OscConfig+0x36e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b05      	cmp	r3, #5
 8004ed6:	d10c      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x356>
 8004ed8:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	4a60      	ldr	r2, [pc, #384]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004ede:	f043 0304 	orr.w	r3, r3, #4
 8004ee2:	6213      	str	r3, [r2, #32]
 8004ee4:	4b5e      	ldr	r3, [pc, #376]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	4a5d      	ldr	r2, [pc, #372]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	6213      	str	r3, [r2, #32]
 8004ef0:	e00b      	b.n	8004f0a <HAL_RCC_OscConfig+0x36e>
 8004ef2:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	4a5a      	ldr	r2, [pc, #360]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	6213      	str	r3, [r2, #32]
 8004efe:	4b58      	ldr	r3, [pc, #352]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	4a57      	ldr	r2, [pc, #348]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004f04:	f023 0304 	bic.w	r3, r3, #4
 8004f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d015      	beq.n	8004f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f12:	f7fc fe33 	bl	8001b7c <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f18:	e00a      	b.n	8004f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1a:	f7fc fe2f 	bl	8001b7c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e0b1      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f30:	4b4b      	ldr	r3, [pc, #300]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ee      	beq.n	8004f1a <HAL_RCC_OscConfig+0x37e>
 8004f3c:	e014      	b.n	8004f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3e:	f7fc fe1d 	bl	8001b7c <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f44:	e00a      	b.n	8004f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fc fe19 	bl	8001b7c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e09b      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5c:	4b40      	ldr	r3, [pc, #256]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1ee      	bne.n	8004f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d105      	bne.n	8004f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f6e:	4b3c      	ldr	r3, [pc, #240]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	4a3b      	ldr	r2, [pc, #236]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8087 	beq.w	8005092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f84:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d061      	beq.n	8005054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d146      	bne.n	8005026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f98:	4b33      	ldr	r3, [pc, #204]	; (8005068 <HAL_RCC_OscConfig+0x4cc>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fc fded 	bl	8001b7c <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fc fde9 	bl	8001b7c <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e06d      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb8:	4b29      	ldr	r3, [pc, #164]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f0      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d108      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fce:	4b24      	ldr	r3, [pc, #144]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	4921      	ldr	r1, [pc, #132]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fe0:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a19      	ldr	r1, [r3, #32]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	491b      	ldr	r1, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCC_OscConfig+0x4cc>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffe:	f7fc fdbd 	bl	8001b7c <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005006:	f7fc fdb9 	bl	8001b7c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e03d      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005018:	4b11      	ldr	r3, [pc, #68]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x46a>
 8005024:	e035      	b.n	8005092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <HAL_RCC_OscConfig+0x4cc>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502c:	f7fc fda6 	bl	8001b7c <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005034:	f7fc fda2 	bl	8001b7c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e026      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_RCC_OscConfig+0x4c4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0x498>
 8005052:	e01e      	b.n	8005092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e019      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
 8005060:	40021000 	.word	0x40021000
 8005064:	40007000 	.word	0x40007000
 8005068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	429a      	cmp	r2, r3
 800507e:	d106      	bne.n	800508e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508a:	429a      	cmp	r2, r3
 800508c:	d001      	beq.n	8005092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40021000 	.word	0x40021000

080050a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0d0      	b.n	8005256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050b4:	4b6a      	ldr	r3, [pc, #424]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d910      	bls.n	80050e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c2:	4b67      	ldr	r3, [pc, #412]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f023 0207 	bic.w	r2, r3, #7
 80050ca:	4965      	ldr	r1, [pc, #404]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d2:	4b63      	ldr	r3, [pc, #396]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0b8      	b.n	8005256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d020      	beq.n	8005132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050fc:	4b59      	ldr	r3, [pc, #356]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4a58      	ldr	r2, [pc, #352]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005114:	4b53      	ldr	r3, [pc, #332]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a52      	ldr	r2, [pc, #328]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 800511a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800511e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005120:	4b50      	ldr	r3, [pc, #320]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	494d      	ldr	r1, [pc, #308]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 800512e:	4313      	orrs	r3, r2
 8005130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d040      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d107      	bne.n	8005156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005146:	4b47      	ldr	r3, [pc, #284]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d115      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e07f      	b.n	8005256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d107      	bne.n	800516e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515e:	4b41      	ldr	r3, [pc, #260]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e073      	b.n	8005256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516e:	4b3d      	ldr	r3, [pc, #244]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e06b      	b.n	8005256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517e:	4b39      	ldr	r3, [pc, #228]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f023 0203 	bic.w	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	4936      	ldr	r1, [pc, #216]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 800518c:	4313      	orrs	r3, r2
 800518e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005190:	f7fc fcf4 	bl	8001b7c <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005196:	e00a      	b.n	80051ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005198:	f7fc fcf0 	bl	8001b7c <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e053      	b.n	8005256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	4b2d      	ldr	r3, [pc, #180]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 020c 	and.w	r2, r3, #12
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	429a      	cmp	r2, r3
 80051be:	d1eb      	bne.n	8005198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051c0:	4b27      	ldr	r3, [pc, #156]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d210      	bcs.n	80051f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f023 0207 	bic.w	r2, r3, #7
 80051d6:	4922      	ldr	r1, [pc, #136]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	4b20      	ldr	r3, [pc, #128]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e032      	b.n	8005256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051fc:	4b19      	ldr	r3, [pc, #100]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4916      	ldr	r1, [pc, #88]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800521a:	4b12      	ldr	r3, [pc, #72]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	490e      	ldr	r1, [pc, #56]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800522e:	f000 f821 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8005232:	4602      	mov	r2, r0
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	091b      	lsrs	r3, r3, #4
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	490a      	ldr	r1, [pc, #40]	; (8005268 <HAL_RCC_ClockConfig+0x1c8>)
 8005240:	5ccb      	ldrb	r3, [r1, r3]
 8005242:	fa22 f303 	lsr.w	r3, r2, r3
 8005246:	4a09      	ldr	r2, [pc, #36]	; (800526c <HAL_RCC_ClockConfig+0x1cc>)
 8005248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <HAL_RCC_ClockConfig+0x1d0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc fc52 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40022000 	.word	0x40022000
 8005264:	40021000 	.word	0x40021000
 8005268:	0800c298 	.word	0x0800c298
 800526c:	2000000c 	.word	0x2000000c
 8005270:	20000010 	.word	0x20000010

08005274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005274:	b490      	push	{r4, r7}
 8005276:	b08a      	sub	sp, #40	; 0x28
 8005278:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800527a:	4b29      	ldr	r3, [pc, #164]	; (8005320 <HAL_RCC_GetSysClockFreq+0xac>)
 800527c:	1d3c      	adds	r4, r7, #4
 800527e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005284:	f240 2301 	movw	r3, #513	; 0x201
 8005288:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	2300      	movs	r3, #0
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	2300      	movs	r3, #0
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800529e:	4b21      	ldr	r3, [pc, #132]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb0>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f003 030c 	and.w	r3, r3, #12
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d002      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x40>
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d003      	beq.n	80052ba <HAL_RCC_GetSysClockFreq+0x46>
 80052b2:	e02b      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052b4:	4b1c      	ldr	r3, [pc, #112]	; (8005328 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052b6:	623b      	str	r3, [r7, #32]
      break;
 80052b8:	e02b      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	0c9b      	lsrs	r3, r3, #18
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	3328      	adds	r3, #40	; 0x28
 80052c4:	443b      	add	r3, r7
 80052c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80052ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d012      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052d6:	4b13      	ldr	r3, [pc, #76]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb0>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	0c5b      	lsrs	r3, r3, #17
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	3328      	adds	r3, #40	; 0x28
 80052e2:	443b      	add	r3, r7
 80052e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80052e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	4a0e      	ldr	r2, [pc, #56]	; (8005328 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052ee:	fb03 f202 	mul.w	r2, r3, r2
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
 80052fa:	e004      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	4a0b      	ldr	r2, [pc, #44]	; (800532c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005300:	fb02 f303 	mul.w	r3, r2, r3
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	623b      	str	r3, [r7, #32]
      break;
 800530a:	e002      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_RCC_GetSysClockFreq+0xb4>)
 800530e:	623b      	str	r3, [r7, #32]
      break;
 8005310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005312:	6a3b      	ldr	r3, [r7, #32]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3728      	adds	r7, #40	; 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	bc90      	pop	{r4, r7}
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	0800c240 	.word	0x0800c240
 8005324:	40021000 	.word	0x40021000
 8005328:	007a1200 	.word	0x007a1200
 800532c:	003d0900 	.word	0x003d0900

08005330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005334:	4b02      	ldr	r3, [pc, #8]	; (8005340 <HAL_RCC_GetHCLKFreq+0x10>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	2000000c 	.word	0x2000000c

08005344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005348:	f7ff fff2 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 800534c:	4602      	mov	r2, r0
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	4903      	ldr	r1, [pc, #12]	; (8005368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800535a:	5ccb      	ldrb	r3, [r1, r3]
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005360:	4618      	mov	r0, r3
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021000 	.word	0x40021000
 8005368:	0800c2a8 	.word	0x0800c2a8

0800536c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005370:	f7ff ffde 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	0adb      	lsrs	r3, r3, #11
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40021000 	.word	0x40021000
 8005390:	0800c2a8 	.word	0x0800c2a8

08005394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <RCC_Delay+0x34>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <RCC_Delay+0x38>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	0a5b      	lsrs	r3, r3, #9
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053b0:	bf00      	nop
  }
  while (Delay --);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	60fa      	str	r2, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f9      	bne.n	80053b0 <RCC_Delay+0x1c>
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr
 80053c8:	2000000c 	.word	0x2000000c
 80053cc:	10624dd3 	.word	0x10624dd3

080053d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d07d      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80053ec:	2300      	movs	r3, #0
 80053ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053f0:	4b4f      	ldr	r3, [pc, #316]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10d      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053fc:	4b4c      	ldr	r3, [pc, #304]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4a4b      	ldr	r2, [pc, #300]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005406:	61d3      	str	r3, [r2, #28]
 8005408:	4b49      	ldr	r3, [pc, #292]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005418:	4b46      	ldr	r3, [pc, #280]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005420:	2b00      	cmp	r3, #0
 8005422:	d118      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005424:	4b43      	ldr	r3, [pc, #268]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a42      	ldr	r2, [pc, #264]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800542a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005430:	f7fc fba4 	bl	8001b7c <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005436:	e008      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005438:	f7fc fba0 	bl	8001b7c <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d901      	bls.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e06d      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544a:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005456:	4b36      	ldr	r3, [pc, #216]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d02e      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d027      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005474:	4b2e      	ldr	r3, [pc, #184]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005484:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800548a:	4a29      	ldr	r2, [pc, #164]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d014      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549a:	f7fc fb6f 	bl	8001b7c <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fc fb6b 	bl	8001b7c <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e036      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b8:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0ee      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054c4:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4917      	ldr	r1, [pc, #92]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054dc:	4b14      	ldr	r3, [pc, #80]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	4a13      	ldr	r2, [pc, #76]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	490b      	ldr	r1, [pc, #44]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005502:	4313      	orrs	r3, r2
 8005504:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	4904      	ldr	r1, [pc, #16]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005520:	4313      	orrs	r3, r2
 8005522:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40021000 	.word	0x40021000
 8005534:	40007000 	.word	0x40007000
 8005538:	42420440 	.word	0x42420440

0800553c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e076      	b.n	800563c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d108      	bne.n	8005568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555e:	d009      	beq.n	8005574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	61da      	str	r2, [r3, #28]
 8005566:	e005      	b.n	8005574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fc f890 	bl	80016b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f8:	ea42 0103 	orr.w	r1, r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	0c1a      	lsrs	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f002 0204 	and.w	r2, r2, #4
 800561a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800562a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	603b      	str	r3, [r7, #0]
 8005650:	4613      	mov	r3, r2
 8005652:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005660:	d112      	bne.n	8005688 <HAL_SPI_Receive+0x44>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10e      	bne.n	8005688 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2204      	movs	r2, #4
 800566e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f8f1 	bl	8005866 <HAL_SPI_TransmitReceive>
 8005684:	4603      	mov	r3, r0
 8005686:	e0ea      	b.n	800585e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_SPI_Receive+0x52>
 8005692:	2302      	movs	r3, #2
 8005694:	e0e3      	b.n	800585e <HAL_SPI_Receive+0x21a>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800569e:	f7fc fa6d 	bl	8001b7c <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d002      	beq.n	80056b6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056b0:	2302      	movs	r3, #2
 80056b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056b4:	e0ca      	b.n	800584c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SPI_Receive+0x7e>
 80056bc:	88fb      	ldrh	r3, [r7, #6]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056c6:	e0c1      	b.n	800584c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2204      	movs	r2, #4
 80056cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	88fa      	ldrh	r2, [r7, #6]
 80056e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570e:	d10f      	bne.n	8005730 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800571e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800572e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	d007      	beq.n	800574e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800574c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d162      	bne.n	800581c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005756:	e02e      	b.n	80057b6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	d115      	bne.n	8005792 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f103 020c 	add.w	r2, r3, #12
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	7812      	ldrb	r2, [r2, #0]
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005790:	e011      	b.n	80057b6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005792:	f7fc f9f3 	bl	8001b7c <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d803      	bhi.n	80057aa <HAL_SPI_Receive+0x166>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d102      	bne.n	80057b0 <HAL_SPI_Receive+0x16c>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057b4:	e04a      	b.n	800584c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1cb      	bne.n	8005758 <HAL_SPI_Receive+0x114>
 80057c0:	e031      	b.n	8005826 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d113      	bne.n	80057f8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	b292      	uxth	r2, r2
 80057dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	1c9a      	adds	r2, r3, #2
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057f6:	e011      	b.n	800581c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f8:	f7fc f9c0 	bl	8001b7c <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d803      	bhi.n	8005810 <HAL_SPI_Receive+0x1cc>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d102      	bne.n	8005816 <HAL_SPI_Receive+0x1d2>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d102      	bne.n	800581c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	75fb      	strb	r3, [r7, #23]
          goto error;
 800581a:	e017      	b.n	800584c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1cd      	bne.n	80057c2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fb4a 	bl	8005ec4 <SPI_EndRxTransaction>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
 8005848:	e000      	b.n	800584c <HAL_SPI_Receive+0x208>
  }

error :
 800584a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800585c:	7dfb      	ldrb	r3, [r7, #23]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b08c      	sub	sp, #48	; 0x30
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005874:	2301      	movs	r3, #1
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_SPI_TransmitReceive+0x26>
 8005888:	2302      	movs	r3, #2
 800588a:	e18a      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x33c>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005894:	f7fc f972 	bl	8001b7c <HAL_GetTick>
 8005898:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058aa:	887b      	ldrh	r3, [r7, #2]
 80058ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d00f      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x70>
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058bc:	d107      	bne.n	80058ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d103      	bne.n	80058ce <HAL_SPI_TransmitReceive+0x68>
 80058c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d003      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
 80058d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058d4:	e15b      	b.n	8005b8e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_SPI_TransmitReceive+0x82>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_TransmitReceive+0x82>
 80058e2:	887b      	ldrh	r3, [r7, #2]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d103      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058ee:	e14e      	b.n	8005b8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d003      	beq.n	8005904 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2205      	movs	r2, #5
 8005900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	887a      	ldrh	r2, [r7, #2]
 8005914:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	887a      	ldrh	r2, [r7, #2]
 800591a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	887a      	ldrh	r2, [r7, #2]
 8005926:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	887a      	ldrh	r2, [r7, #2]
 800592c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b40      	cmp	r3, #64	; 0x40
 8005946:	d007      	beq.n	8005958 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005956:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005960:	d178      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_SPI_TransmitReceive+0x10a>
 800596a:	8b7b      	ldrh	r3, [r7, #26]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d166      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	881a      	ldrh	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005994:	e053      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d11b      	bne.n	80059dc <HAL_SPI_TransmitReceive+0x176>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d016      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x176>
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d113      	bne.n	80059dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	881a      	ldrh	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	1c9a      	adds	r2, r3, #2
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d119      	bne.n	8005a1e <HAL_SPI_TransmitReceive+0x1b8>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d014      	beq.n	8005a1e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	b292      	uxth	r2, r2
 8005a00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	1c9a      	adds	r2, r3, #2
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a1e:	f7fc f8ad 	bl	8001b7c <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d807      	bhi.n	8005a3e <HAL_SPI_TransmitReceive+0x1d8>
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d003      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a3c:	e0a7      	b.n	8005b8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1a6      	bne.n	8005996 <HAL_SPI_TransmitReceive+0x130>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1a1      	bne.n	8005996 <HAL_SPI_TransmitReceive+0x130>
 8005a52:	e07c      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_SPI_TransmitReceive+0x1fc>
 8005a5c:	8b7b      	ldrh	r3, [r7, #26]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d16b      	bne.n	8005b3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a88:	e057      	b.n	8005b3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d11c      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x26c>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d017      	beq.n	8005ad2 <HAL_SPI_TransmitReceive+0x26c>
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d114      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	7812      	ldrb	r2, [r2, #0]
 8005ab4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d119      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x2ae>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d014      	beq.n	8005b14 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b10:	2301      	movs	r3, #1
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b14:	f7fc f832 	bl	8001b7c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d803      	bhi.n	8005b2c <HAL_SPI_TransmitReceive+0x2c6>
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d102      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x2cc>
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b38:	e029      	b.n	8005b8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1a2      	bne.n	8005a8a <HAL_SPI_TransmitReceive+0x224>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d19d      	bne.n	8005a8a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fa08 	bl	8005f68 <SPI_EndRxTxTransaction>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d006      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b6a:	e010      	b.n	8005b8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	e000      	b.n	8005b8e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3730      	adds	r7, #48	; 0x30
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	099b      	lsrs	r3, r3, #6
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10f      	bne.n	8005bf0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	099b      	lsrs	r3, r3, #6
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
    return;
 8005bee:	e0be      	b.n	8005d6e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <HAL_SPI_IRQHandler+0x66>
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	09db      	lsrs	r3, r3, #7
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
    return;
 8005c10:	e0ad      	b.n	8005d6e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <HAL_SPI_IRQHandler+0x80>
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	099b      	lsrs	r3, r3, #6
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 80a1 	beq.w	8005d6e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 809a 	beq.w	8005d6e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	099b      	lsrs	r3, r3, #6
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d023      	beq.n	8005c8e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d011      	beq.n	8005c76 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	f043 0204 	orr.w	r2, r3, #4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	e00b      	b.n	8005c8e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	693b      	ldr	r3, [r7, #16]
        return;
 8005c8c:	e06f      	b.n	8005d6e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d014      	beq.n	8005cc4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9e:	f043 0201 	orr.w	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d04f      	beq.n	8005d6c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cda:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <HAL_SPI_IRQHandler+0x14c>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d034      	beq.n	8005d62 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0203 	bic.w	r2, r2, #3
 8005d06:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d011      	beq.n	8005d34 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d14:	4a17      	ldr	r2, [pc, #92]	; (8005d74 <HAL_SPI_IRQHandler+0x1c8>)
 8005d16:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fc fcef 	bl	8002700 <HAL_DMA_Abort_IT>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d016      	beq.n	8005d6a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d40:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <HAL_SPI_IRQHandler+0x1c8>)
 8005d42:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fc fcd9 	bl	8002700 <HAL_DMA_Abort_IT>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005d60:	e003      	b.n	8005d6a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f808 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d68:	e000      	b.n	8005d6c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005d6a:	bf00      	nop
    return;
 8005d6c:	bf00      	nop
  }
}
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	08005d8b 	.word	0x08005d8b

08005d78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff ffe7 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dc4:	f7fb feda 	bl	8001b7c <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dd4:	f7fb fed2 	bl	8001b7c <HAL_GetTick>
 8005dd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dda:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	015b      	lsls	r3, r3, #5
 8005de0:	0d1b      	lsrs	r3, r3, #20
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	fb02 f303 	mul.w	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dea:	e054      	b.n	8005e96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d050      	beq.n	8005e96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005df4:	f7fb fec2 	bl	8001b7c <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d902      	bls.n	8005e0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d13d      	bne.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e22:	d111      	bne.n	8005e48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e2c:	d004      	beq.n	8005e38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e36:	d107      	bne.n	8005e48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e50:	d10f      	bne.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e017      	b.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d19b      	bne.n	8005dec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	2000000c 	.word	0x2000000c

08005ec4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed8:	d111      	bne.n	8005efe <SPI_EndRxTransaction+0x3a>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee2:	d004      	beq.n	8005eee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eec:	d107      	bne.n	8005efe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f06:	d117      	bne.n	8005f38 <SPI_EndRxTransaction+0x74>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f10:	d112      	bne.n	8005f38 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff ff49 	bl	8005db4 <SPI_WaitFlagStateUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01a      	beq.n	8005f5e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2c:	f043 0220 	orr.w	r2, r3, #32
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e013      	b.n	8005f60 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2180      	movs	r1, #128	; 0x80
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7ff ff36 	bl	8005db4 <SPI_WaitFlagStateUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e000      	b.n	8005f60 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2180      	movs	r1, #128	; 0x80
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff ff18 	bl	8005db4 <SPI_WaitFlagStateUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d007      	beq.n	8005f9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8e:	f043 0220 	orr.w	r2, r3, #32
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e000      	b.n	8005f9c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e03f      	b.n	8006036 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fb fc00 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	; 0x24
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f905 	bl	80061f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800600c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800601c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b08a      	sub	sp, #40	; 0x28
 8006042:	af02      	add	r7, sp, #8
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b20      	cmp	r3, #32
 800605c:	d17c      	bne.n	8006158 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <HAL_UART_Transmit+0x2c>
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e075      	b.n	800615a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_UART_Transmit+0x3e>
 8006078:	2302      	movs	r3, #2
 800607a:	e06e      	b.n	800615a <HAL_UART_Transmit+0x11c>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2221      	movs	r2, #33	; 0x21
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006092:	f7fb fd73 	bl	8001b7c <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ac:	d108      	bne.n	80060c0 <HAL_UART_Transmit+0x82>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	e003      	b.n	80060c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060d0:	e02a      	b.n	8006128 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f840 	bl	8006162 <UART_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e036      	b.n	800615a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006100:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	3302      	adds	r3, #2
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e007      	b.n	800611a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	3301      	adds	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1cf      	bne.n	80060d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	2140      	movs	r1, #64	; 0x40
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f810 	bl	8006162 <UART_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e006      	b.n	800615a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	e000      	b.n	800615a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006158:	2302      	movs	r3, #2
  }
}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	4613      	mov	r3, r2
 8006170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006172:	e02c      	b.n	80061ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d028      	beq.n	80061ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0x30>
 8006182:	f7fb fcfb 	bl	8001b7c <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	429a      	cmp	r2, r3
 8006190:	d21d      	bcs.n	80061ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695a      	ldr	r2, [r3, #20]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0201 	bic.w	r2, r2, #1
 80061b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e00f      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4013      	ands	r3, r2
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	429a      	cmp	r2, r3
 80061dc:	bf0c      	ite	eq
 80061de:	2301      	moveq	r3, #1
 80061e0:	2300      	movne	r3, #0
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d0c3      	beq.n	8006174 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006232:	f023 030c 	bic.w	r3, r3, #12
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	430b      	orrs	r3, r1
 800623e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2c      	ldr	r2, [pc, #176]	; (800630c <UART_SetConfig+0x114>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d103      	bne.n	8006268 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006260:	f7ff f884 	bl	800536c <HAL_RCC_GetPCLK2Freq>
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	e002      	b.n	800626e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006268:	f7ff f86c 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800626c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009a      	lsls	r2, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	fbb2 f3f3 	udiv	r3, r2, r3
 8006284:	4a22      	ldr	r2, [pc, #136]	; (8006310 <UART_SetConfig+0x118>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	0119      	lsls	r1, r3, #4
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009a      	lsls	r2, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a4:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <UART_SetConfig+0x118>)
 80062a6:	fba3 0302 	umull	r0, r3, r3, r2
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	2064      	movs	r0, #100	; 0x64
 80062ae:	fb00 f303 	mul.w	r3, r0, r3
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	3332      	adds	r3, #50	; 0x32
 80062b8:	4a15      	ldr	r2, [pc, #84]	; (8006310 <UART_SetConfig+0x118>)
 80062ba:	fba2 2303 	umull	r2, r3, r2, r3
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062c4:	4419      	add	r1, r3
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	009a      	lsls	r2, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80062dc:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <UART_SetConfig+0x118>)
 80062de:	fba3 0302 	umull	r0, r3, r3, r2
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	2064      	movs	r0, #100	; 0x64
 80062e6:	fb00 f303 	mul.w	r3, r0, r3
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	3332      	adds	r3, #50	; 0x32
 80062f0:	4a07      	ldr	r2, [pc, #28]	; (8006310 <UART_SetConfig+0x118>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	f003 020f 	and.w	r2, r3, #15
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	440a      	add	r2, r1
 8006302:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40013800 	.word	0x40013800
 8006310:	51eb851f 	.word	0x51eb851f

08006314 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006314:	b084      	sub	sp, #16
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	f107 0014 	add.w	r0, r7, #20
 8006322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	b004      	add	sp, #16
 8006332:	4770      	bx	lr

08006334 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006344:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006348:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006368:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800636c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	b29b      	uxth	r3, r3
 800637a:	43db      	mvns	r3, r3
 800637c:	b29b      	uxth	r3, r3
 800637e:	4013      	ands	r3, r2
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr

08006394 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr

080063ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063ac:	b084      	sub	sp, #16
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	f107 0014 	add.w	r0, r7, #20
 80063ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	b004      	add	sp, #16
 80063ea:	4770      	bx	lr

080063ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b09b      	sub	sp, #108	; 0x6c
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	78db      	ldrb	r3, [r3, #3]
 800641a:	2b03      	cmp	r3, #3
 800641c:	d81f      	bhi.n	800645e <USB_ActivateEndpoint+0x72>
 800641e:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <USB_ActivateEndpoint+0x38>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	08006435 	.word	0x08006435
 8006428:	08006451 	.word	0x08006451
 800642c:	08006467 	.word	0x08006467
 8006430:	08006443 	.word	0x08006443
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006434:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800643c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006440:	e012      	b.n	8006468 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006442:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006446:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800644a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800644e:	e00b      	b.n	8006468 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006450:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006454:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006458:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800645c:	e004      	b.n	8006468 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006464:	e000      	b.n	8006468 <USB_ActivateEndpoint+0x7c>
      break;
 8006466:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	441a      	add	r2, r3
 80064b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80064bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	7b1b      	ldrb	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f040 8149 	bne.w	800676c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8084 	beq.w	80065ec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	4413      	add	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	011a      	lsls	r2, r3, #4
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	88db      	ldrh	r3, [r3, #6]
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	b29b      	uxth	r3, r3
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	81fb      	strh	r3, [r7, #14]
 8006526:	89fb      	ldrh	r3, [r7, #14]
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01b      	beq.n	8006568 <USB_ActivateEndpoint+0x17c>
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	81bb      	strh	r3, [r7, #12]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	89bb      	ldrh	r3, [r7, #12]
 8006554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006564:	b29b      	uxth	r3, r3
 8006566:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	78db      	ldrb	r3, [r3, #3]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d020      	beq.n	80065b2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006586:	813b      	strh	r3, [r7, #8]
 8006588:	893b      	ldrh	r3, [r7, #8]
 800658a:	f083 0320 	eor.w	r3, r3, #32
 800658e:	813b      	strh	r3, [r7, #8]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	441a      	add	r2, r3
 800659a:	893b      	ldrh	r3, [r7, #8]
 800659c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	8013      	strh	r3, [r2, #0]
 80065b0:	e27f      	b.n	8006ab2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c8:	817b      	strh	r3, [r7, #10]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	441a      	add	r2, r3
 80065d4:	897b      	ldrh	r3, [r7, #10]
 80065d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	8013      	strh	r3, [r2, #0]
 80065ea:	e262      	b.n	8006ab2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	4413      	add	r3, r2
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	011a      	lsls	r2, r3, #4
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	4413      	add	r3, r2
 800660a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	88db      	ldrh	r3, [r3, #6]
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	b29b      	uxth	r3, r3
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	4413      	add	r3, r2
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	011a      	lsls	r2, r3, #4
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	4413      	add	r3, r2
 800663e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006642:	623b      	str	r3, [r7, #32]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d112      	bne.n	8006672 <USB_ActivateEndpoint+0x286>
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006656:	b29a      	uxth	r2, r3
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666a:	b29a      	uxth	r2, r3
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	e02f      	b.n	80066d2 <USB_ActivateEndpoint+0x2e6>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b3e      	cmp	r3, #62	; 0x3e
 8006678:	d813      	bhi.n	80066a2 <USB_ActivateEndpoint+0x2b6>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	085b      	lsrs	r3, r3, #1
 8006680:	663b      	str	r3, [r7, #96]	; 0x60
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <USB_ActivateEndpoint+0x2a8>
 800668e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006690:	3301      	adds	r3, #1
 8006692:	663b      	str	r3, [r7, #96]	; 0x60
 8006694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006696:	b29b      	uxth	r3, r3
 8006698:	029b      	lsls	r3, r3, #10
 800669a:	b29a      	uxth	r2, r3
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	801a      	strh	r2, [r3, #0]
 80066a0:	e017      	b.n	80066d2 <USB_ActivateEndpoint+0x2e6>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	663b      	str	r3, [r7, #96]	; 0x60
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 031f 	and.w	r3, r3, #31
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <USB_ActivateEndpoint+0x2d0>
 80066b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b8:	3b01      	subs	r3, #1
 80066ba:	663b      	str	r3, [r7, #96]	; 0x60
 80066bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066be:	b29b      	uxth	r3, r3
 80066c0:	029b      	lsls	r3, r3, #10
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	83fb      	strh	r3, [r7, #30]
 80066e0:	8bfb      	ldrh	r3, [r7, #30]
 80066e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01b      	beq.n	8006722 <USB_ActivateEndpoint+0x336>
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006700:	83bb      	strh	r3, [r7, #28]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	441a      	add	r2, r3
 800670c:	8bbb      	ldrh	r3, [r7, #28]
 800670e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800671a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671e:	b29b      	uxth	r3, r3
 8006720:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006738:	837b      	strh	r3, [r7, #26]
 800673a:	8b7b      	ldrh	r3, [r7, #26]
 800673c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006740:	837b      	strh	r3, [r7, #26]
 8006742:	8b7b      	ldrh	r3, [r7, #26]
 8006744:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006748:	837b      	strh	r3, [r7, #26]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	8b7b      	ldrh	r3, [r7, #26]
 8006756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800675e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006766:	b29b      	uxth	r3, r3
 8006768:	8013      	strh	r3, [r2, #0]
 800676a:	e1a2      	b.n	8006ab2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006782:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	441a      	add	r2, r3
 8006790:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80067a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067b8:	4413      	add	r3, r2
 80067ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	011a      	lsls	r2, r3, #4
 80067c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ca:	657b      	str	r3, [r7, #84]	; 0x54
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	891b      	ldrh	r3, [r3, #8]
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067da:	801a      	strh	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	653b      	str	r3, [r7, #80]	; 0x50
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ec:	4413      	add	r3, r2
 80067ee:	653b      	str	r3, [r7, #80]	; 0x50
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	011a      	lsls	r2, r3, #4
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80067fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	895b      	ldrh	r3, [r3, #10]
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	b29b      	uxth	r3, r3
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f040 8091 	bne.w	800693c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006828:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800682a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01b      	beq.n	800686a <USB_ActivateEndpoint+0x47e>
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006848:	877b      	strh	r3, [r7, #58]	; 0x3a
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	441a      	add	r2, r3
 8006854:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006866:	b29b      	uxth	r3, r3
 8006868:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	873b      	strh	r3, [r7, #56]	; 0x38
 8006878:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800687a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01b      	beq.n	80068ba <USB_ActivateEndpoint+0x4ce>
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006898:	86fb      	strh	r3, [r7, #54]	; 0x36
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	441a      	add	r2, r3
 80068a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	441a      	add	r2, r3
 80068ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fe:	b29b      	uxth	r3, r3
 8006900:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b29b      	uxth	r3, r3
 8006910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006918:	867b      	strh	r3, [r7, #50]	; 0x32
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	441a      	add	r2, r3
 8006924:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800692e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006936:	b29b      	uxth	r3, r3
 8006938:	8013      	strh	r3, [r2, #0]
 800693a:	e0ba      	b.n	8006ab2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800694c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01d      	beq.n	8006994 <USB_ActivateEndpoint+0x5a8>
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800698c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006990:	b29b      	uxth	r3, r3
 8006992:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80069a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01d      	beq.n	80069ec <USB_ActivateEndpoint+0x600>
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	441a      	add	r2, r3
 80069d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	78db      	ldrb	r3, [r3, #3]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d024      	beq.n	8006a3e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a12:	f083 0320 	eor.w	r3, r3, #32
 8006a16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	441a      	add	r2, r3
 8006a24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	8013      	strh	r3, [r2, #0]
 8006a3c:	e01d      	b.n	8006a7a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a90:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	441a      	add	r2, r3
 8006a9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006ab2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	376c      	adds	r7, #108	; 0x6c
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr

08006ac0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b08d      	sub	sp, #52	; 0x34
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	7b1b      	ldrb	r3, [r3, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 808e 	bne.w	8006bf0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d044      	beq.n	8006b66 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	81bb      	strh	r3, [r7, #12]
 8006aea:	89bb      	ldrh	r3, [r7, #12]
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01b      	beq.n	8006b2c <USB_DeactivateEndpoint+0x6c>
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0a:	817b      	strh	r3, [r7, #10]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	441a      	add	r2, r3
 8006b16:	897b      	ldrh	r3, [r7, #10]
 8006b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b42:	813b      	strh	r3, [r7, #8]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	441a      	add	r2, r3
 8006b4e:	893b      	ldrh	r3, [r7, #8]
 8006b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	8013      	strh	r3, [r2, #0]
 8006b64:	e192      	b.n	8006e8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	827b      	strh	r3, [r7, #18]
 8006b74:	8a7b      	ldrh	r3, [r7, #18]
 8006b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d01b      	beq.n	8006bb6 <USB_DeactivateEndpoint+0xf6>
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b94:	823b      	strh	r3, [r7, #16]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	8a3b      	ldrh	r3, [r7, #16]
 8006ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bcc:	81fb      	strh	r3, [r7, #14]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	441a      	add	r2, r3
 8006bd8:	89fb      	ldrh	r3, [r7, #14]
 8006bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8013      	strh	r3, [r2, #0]
 8006bee:	e14d      	b.n	8006e8c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 80a5 	bne.w	8006d44 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	843b      	strh	r3, [r7, #32]
 8006c08:	8c3b      	ldrh	r3, [r7, #32]
 8006c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01b      	beq.n	8006c4a <USB_DeactivateEndpoint+0x18a>
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c28:	83fb      	strh	r3, [r7, #30]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	441a      	add	r2, r3
 8006c34:	8bfb      	ldrh	r3, [r7, #30]
 8006c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	83bb      	strh	r3, [r7, #28]
 8006c58:	8bbb      	ldrh	r3, [r7, #28]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01b      	beq.n	8006c9a <USB_DeactivateEndpoint+0x1da>
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c78:	837b      	strh	r3, [r7, #26]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	441a      	add	r2, r3
 8006c84:	8b7b      	ldrh	r3, [r7, #26]
 8006c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb0:	833b      	strh	r3, [r7, #24]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	441a      	add	r2, r3
 8006cbc:	8b3b      	ldrh	r3, [r7, #24]
 8006cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce8:	82fb      	strh	r3, [r7, #22]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	441a      	add	r2, r3
 8006cf4:	8afb      	ldrh	r3, [r7, #22]
 8006cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d20:	82bb      	strh	r3, [r7, #20]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	441a      	add	r2, r3
 8006d2c:	8abb      	ldrh	r3, [r7, #20]
 8006d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	8013      	strh	r3, [r2, #0]
 8006d42:	e0a3      	b.n	8006e8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01b      	beq.n	8006d94 <USB_DeactivateEndpoint+0x2d4>
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006da2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01b      	beq.n	8006de4 <USB_DeactivateEndpoint+0x324>
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	441a      	add	r2, r3
 8006dce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ddc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	441a      	add	r2, r3
 8006e06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e32:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	441a      	add	r2, r3
 8006e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	441a      	add	r2, r3
 8006e76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3734      	adds	r7, #52	; 0x34
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b0cc      	sub	sp, #304	; 0x130
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea6:	6018      	str	r0, [r3, #0]
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	f041 817d 	bne.w	80081be <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d908      	bls.n	8006ef2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006ef0:	e007      	b.n	8006f02 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	7b1b      	ldrb	r3, [r3, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d152      	bne.n	8006fb8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6959      	ldr	r1, [r3, #20]
 8006f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	88da      	ldrh	r2, [r3, #6]
 8006f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f34:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f38:	6800      	ldr	r0, [r0, #0]
 8006f3a:	f001 ff23 	bl	8008d84 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f42:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f4a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f68:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f70:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006f74:	6812      	ldr	r2, [r2, #0]
 8006f76:	440a      	add	r2, r1
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	011a      	lsls	r2, r3, #4
 8006f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4413      	add	r3, r2
 8006f94:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	f001 b8b5 	b.w	8008122 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	78db      	ldrb	r3, [r3, #3]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	f040 84c6 	bne.w	8007956 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6a1a      	ldr	r2, [r3, #32]
 8006fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	f240 8443 	bls.w	800786e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	441a      	add	r2, r3
 800702c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007038:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800703c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007040:	b29b      	uxth	r3, r3
 8007042:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6a1a      	ldr	r2, [r3, #32]
 8007050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007054:	1ad2      	subs	r2, r2, r3
 8007056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 823e 	beq.w	8007506 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007092:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007096:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800709a:	6812      	ldr	r2, [r2, #0]
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 809a 	bne.w	80071e4 <USB_EPStartXfer+0x34c>
 80070b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070c0:	6812      	ldr	r2, [r2, #0]
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	4619      	mov	r1, r3
 80070d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070e2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	440a      	add	r2, r1
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	011a      	lsls	r2, r3, #4
 80070fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4413      	add	r3, r2
 8007106:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800710a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d122      	bne.n	8007162 <USB_EPStartXfer+0x2ca>
 800711c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007120:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29b      	uxth	r3, r3
 800712a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800712e:	b29a      	uxth	r2, r3
 8007130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007134:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	801a      	strh	r2, [r3, #0]
 800713c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007140:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007152:	b29a      	uxth	r2, r3
 8007154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007158:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	801a      	strh	r2, [r3, #0]
 8007160:	e079      	b.n	8007256 <USB_EPStartXfer+0x3be>
 8007162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007166:	2b3e      	cmp	r3, #62	; 0x3e
 8007168:	d81b      	bhi.n	80071a2 <USB_EPStartXfer+0x30a>
 800716a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716e:	085b      	lsrs	r3, r3, #1
 8007170:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d004      	beq.n	800718a <USB_EPStartXfer+0x2f2>
 8007180:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007184:	3301      	adds	r3, #1
 8007186:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800718a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800718e:	b29b      	uxth	r3, r3
 8007190:	029b      	lsls	r3, r3, #10
 8007192:	b29a      	uxth	r2, r3
 8007194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007198:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	801a      	strh	r2, [r3, #0]
 80071a0:	e059      	b.n	8007256 <USB_EPStartXfer+0x3be>
 80071a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a6:	095b      	lsrs	r3, r3, #5
 80071a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d104      	bne.n	80071c2 <USB_EPStartXfer+0x32a>
 80071b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071bc:	3b01      	subs	r3, #1
 80071be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	029b      	lsls	r3, r3, #10
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	e038      	b.n	8007256 <USB_EPStartXfer+0x3be>
 80071e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d130      	bne.n	8007256 <USB_EPStartXfer+0x3be>
 80071f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007202:	b29b      	uxth	r3, r3
 8007204:	4619      	mov	r1, r3
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800720e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007212:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	440a      	add	r2, r1
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	011a      	lsls	r2, r3, #4
 800722a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4413      	add	r3, r2
 8007236:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800723a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007248:	b29a      	uxth	r2, r3
 800724a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	895b      	ldrh	r3, [r3, #10]
 8007262:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6959      	ldr	r1, [r3, #20]
 8007272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007276:	b29b      	uxth	r3, r3
 8007278:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800727c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007280:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007284:	6800      	ldr	r0, [r0, #0]
 8007286:	f001 fd7d 	bl	8008d84 <USB_WritePMA>
            ep->xfer_buff += len;
 800728a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695a      	ldr	r2, [r3, #20]
 8007296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729a:	441a      	add	r2, r3
 800729c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6a1a      	ldr	r2, [r3, #32]
 80072b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d90f      	bls.n	80072e4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6a1a      	ldr	r2, [r3, #32]
 80072d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d4:	1ad2      	subs	r2, r2, r3
 80072d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	621a      	str	r2, [r3, #32]
 80072e2:	e00e      	b.n	8007302 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80072e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80072f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2200      	movs	r2, #0
 8007300:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	785b      	ldrb	r3, [r3, #1]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 809a 	bne.w	8007448 <USB_EPStartXfer+0x5b0>
 8007314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007318:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800731c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007320:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007324:	6812      	ldr	r2, [r2, #0]
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007336:	b29b      	uxth	r3, r3
 8007338:	4619      	mov	r1, r3
 800733a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007342:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007346:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	440a      	add	r2, r1
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	011a      	lsls	r2, r3, #4
 800735e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007362:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4413      	add	r3, r2
 800736a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800736e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007372:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d122      	bne.n	80073c6 <USB_EPStartXfer+0x52e>
 8007380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007384:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007392:	b29a      	uxth	r2, r3
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	e083      	b.n	80074ce <USB_EPStartXfer+0x636>
 80073c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ca:	2b3e      	cmp	r3, #62	; 0x3e
 80073cc:	d81b      	bhi.n	8007406 <USB_EPStartXfer+0x56e>
 80073ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <USB_EPStartXfer+0x556>
 80073e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073e8:	3301      	adds	r3, #1
 80073ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	029b      	lsls	r3, r3, #10
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	e063      	b.n	80074ce <USB_EPStartXfer+0x636>
 8007406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007414:	f003 031f 	and.w	r3, r3, #31
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <USB_EPStartXfer+0x58e>
 800741c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007420:	3b01      	subs	r3, #1
 8007422:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007426:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800742a:	b29b      	uxth	r3, r3
 800742c:	029b      	lsls	r3, r3, #10
 800742e:	b29b      	uxth	r3, r3
 8007430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007438:	b29a      	uxth	r2, r3
 800743a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	e042      	b.n	80074ce <USB_EPStartXfer+0x636>
 8007448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d13a      	bne.n	80074ce <USB_EPStartXfer+0x636>
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007460:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007464:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800747a:	b29b      	uxth	r3, r3
 800747c:	4619      	mov	r1, r3
 800747e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007482:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007486:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800748a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800748e:	6812      	ldr	r2, [r2, #0]
 8007490:	440a      	add	r2, r1
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	011a      	lsls	r2, r3, #4
 80074a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4413      	add	r3, r2
 80074ae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80074b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	891b      	ldrh	r3, [r3, #8]
 80074da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6959      	ldr	r1, [r3, #20]
 80074ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074fc:	6800      	ldr	r0, [r0, #0]
 80074fe:	f001 fc41 	bl	8008d84 <USB_WritePMA>
 8007502:	f000 be0e 	b.w	8008122 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	785b      	ldrb	r3, [r3, #1]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d16d      	bne.n	80075f2 <USB_EPStartXfer+0x75a>
 8007516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	64bb      	str	r3, [r7, #72]	; 0x48
 8007522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007530:	b29b      	uxth	r3, r3
 8007532:	461a      	mov	r2, r3
 8007534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007536:	4413      	add	r3, r2
 8007538:	64bb      	str	r3, [r7, #72]	; 0x48
 800753a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	011a      	lsls	r2, r3, #4
 8007548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754a:	4413      	add	r3, r2
 800754c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007550:	647b      	str	r3, [r7, #68]	; 0x44
 8007552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d112      	bne.n	8007580 <USB_EPStartXfer+0x6e8>
 800755a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007564:	b29a      	uxth	r2, r3
 8007566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007568:	801a      	strh	r2, [r3, #0]
 800756a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007578:	b29a      	uxth	r2, r3
 800757a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800757c:	801a      	strh	r2, [r3, #0]
 800757e:	e063      	b.n	8007648 <USB_EPStartXfer+0x7b0>
 8007580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007584:	2b3e      	cmp	r3, #62	; 0x3e
 8007586:	d817      	bhi.n	80075b8 <USB_EPStartXfer+0x720>
 8007588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758c:	085b      	lsrs	r3, r3, #1
 800758e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <USB_EPStartXfer+0x710>
 800759e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075a2:	3301      	adds	r3, #1
 80075a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	029b      	lsls	r3, r3, #10
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	e047      	b.n	8007648 <USB_EPStartXfer+0x7b0>
 80075b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075bc:	095b      	lsrs	r3, r3, #5
 80075be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d104      	bne.n	80075d8 <USB_EPStartXfer+0x740>
 80075ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075d2:	3b01      	subs	r3, #1
 80075d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075dc:	b29b      	uxth	r3, r3
 80075de:	029b      	lsls	r3, r3, #10
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ee:	801a      	strh	r2, [r3, #0]
 80075f0:	e02a      	b.n	8007648 <USB_EPStartXfer+0x7b0>
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	785b      	ldrb	r3, [r3, #1]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d122      	bne.n	8007648 <USB_EPStartXfer+0x7b0>
 8007602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007606:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	653b      	str	r3, [r7, #80]	; 0x50
 800760e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007612:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800761c:	b29b      	uxth	r3, r3
 800761e:	461a      	mov	r2, r3
 8007620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007622:	4413      	add	r3, r2
 8007624:	653b      	str	r3, [r7, #80]	; 0x50
 8007626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	011a      	lsls	r2, r3, #4
 8007634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007636:	4413      	add	r3, r2
 8007638:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800763c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800763e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007642:	b29a      	uxth	r2, r3
 8007644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007646:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	891b      	ldrh	r3, [r3, #8]
 8007654:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6959      	ldr	r1, [r3, #20]
 8007664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007668:	b29b      	uxth	r3, r3
 800766a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800766e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007672:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007676:	6800      	ldr	r0, [r0, #0]
 8007678:	f001 fb84 	bl	8008d84 <USB_WritePMA>
            ep->xfer_buff += len;
 800767c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	695a      	ldr	r2, [r3, #20]
 8007688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768c:	441a      	add	r2, r3
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800769a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6a1a      	ldr	r2, [r3, #32]
 80076a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d90f      	bls.n	80076d6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80076b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c6:	1ad2      	subs	r2, r2, r3
 80076c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	621a      	str	r2, [r3, #32]
 80076d4:	e00e      	b.n	80076f4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80076d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80076e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2200      	movs	r2, #0
 80076f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d16d      	bne.n	80077ec <USB_EPStartXfer+0x954>
 8007710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	63bb      	str	r3, [r7, #56]	; 0x38
 800771c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007720:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772a:	b29b      	uxth	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	4413      	add	r3, r2
 8007732:	63bb      	str	r3, [r7, #56]	; 0x38
 8007734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	011a      	lsls	r2, r3, #4
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	4413      	add	r3, r2
 8007746:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800774a:	637b      	str	r3, [r7, #52]	; 0x34
 800774c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d112      	bne.n	800777a <USB_EPStartXfer+0x8e2>
 8007754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	b29b      	uxth	r3, r3
 800775a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800775e:	b29a      	uxth	r2, r3
 8007760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007772:	b29a      	uxth	r2, r3
 8007774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	e05d      	b.n	8007836 <USB_EPStartXfer+0x99e>
 800777a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777e:	2b3e      	cmp	r3, #62	; 0x3e
 8007780:	d817      	bhi.n	80077b2 <USB_EPStartXfer+0x91a>
 8007782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800778c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <USB_EPStartXfer+0x90a>
 8007798:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800779c:	3301      	adds	r3, #1
 800779e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	029b      	lsls	r3, r3, #10
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	e041      	b.n	8007836 <USB_EPStartXfer+0x99e>
 80077b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b6:	095b      	lsrs	r3, r3, #5
 80077b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <USB_EPStartXfer+0x93a>
 80077c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077cc:	3b01      	subs	r3, #1
 80077ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	029b      	lsls	r3, r3, #10
 80077da:	b29b      	uxth	r3, r3
 80077dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e024      	b.n	8007836 <USB_EPStartXfer+0x99e>
 80077ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d11c      	bne.n	8007836 <USB_EPStartXfer+0x99e>
 80077fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800780a:	b29b      	uxth	r3, r3
 800780c:	461a      	mov	r2, r3
 800780e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007810:	4413      	add	r3, r2
 8007812:	643b      	str	r3, [r7, #64]	; 0x40
 8007814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	011a      	lsls	r2, r3, #4
 8007822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007824:	4413      	add	r3, r2
 8007826:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800782c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007830:	b29a      	uxth	r2, r3
 8007832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007834:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	895b      	ldrh	r3, [r3, #10]
 8007842:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6959      	ldr	r1, [r3, #20]
 8007852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007856:	b29b      	uxth	r3, r3
 8007858:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800785c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007860:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007864:	6800      	ldr	r0, [r0, #0]
 8007866:	f001 fa8d 	bl	8008d84 <USB_WritePMA>
 800786a:	f000 bc5a 	b.w	8008122 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800786e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800787e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007882:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29b      	uxth	r3, r3
 800789c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80078a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80078a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	441a      	add	r2, r3
 80078c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80078c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	461a      	mov	r2, r3
 80078f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078fa:	4413      	add	r3, r2
 80078fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	011a      	lsls	r2, r3, #4
 800790c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800790e:	4413      	add	r3, r2
 8007910:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007914:	65bb      	str	r3, [r7, #88]	; 0x58
 8007916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791a:	b29a      	uxth	r2, r3
 800791c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800791e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	891b      	ldrh	r3, [r3, #8]
 800792c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6959      	ldr	r1, [r3, #20]
 800793c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007940:	b29b      	uxth	r3, r3
 8007942:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007946:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800794a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800794e:	6800      	ldr	r0, [r0, #0]
 8007950:	f001 fa18 	bl	8008d84 <USB_WritePMA>
 8007954:	e3e5      	b.n	8008122 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	441a      	add	r2, r3
 800799a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800799e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80079aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80079b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c2:	1ad2      	subs	r2, r2, r3
 80079c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 81bc 	beq.w	8007d70 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d16d      	bne.n	8007af2 <USB_EPStartXfer+0xc5a>
 8007a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a36:	4413      	add	r3, r2
 8007a38:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	011a      	lsls	r2, r3, #4
 8007a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a50:	677b      	str	r3, [r7, #116]	; 0x74
 8007a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d112      	bne.n	8007a80 <USB_EPStartXfer+0xbe8>
 8007a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a7c:	801a      	strh	r2, [r3, #0]
 8007a7e:	e060      	b.n	8007b42 <USB_EPStartXfer+0xcaa>
 8007a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a84:	2b3e      	cmp	r3, #62	; 0x3e
 8007a86:	d817      	bhi.n	8007ab8 <USB_EPStartXfer+0xc20>
 8007a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <USB_EPStartXfer+0xc10>
 8007a9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007aa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	029b      	lsls	r3, r3, #10
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ab4:	801a      	strh	r2, [r3, #0]
 8007ab6:	e044      	b.n	8007b42 <USB_EPStartXfer+0xcaa>
 8007ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abc:	095b      	lsrs	r3, r3, #5
 8007abe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac6:	f003 031f 	and.w	r3, r3, #31
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d104      	bne.n	8007ad8 <USB_EPStartXfer+0xc40>
 8007ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ad8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	029b      	lsls	r3, r3, #10
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aee:	801a      	strh	r2, [r3, #0]
 8007af0:	e027      	b.n	8007b42 <USB_EPStartXfer+0xcaa>
 8007af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	785b      	ldrb	r3, [r3, #1]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d11f      	bne.n	8007b42 <USB_EPStartXfer+0xcaa>
 8007b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b18:	4413      	add	r3, r2
 8007b1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	011a      	lsls	r2, r3, #4
 8007b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b30:	4413      	add	r3, r2
 8007b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	895b      	ldrh	r3, [r3, #10]
 8007b4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6959      	ldr	r1, [r3, #20]
 8007b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b70:	6800      	ldr	r0, [r0, #0]
 8007b72:	f001 f907 	bl	8008d84 <USB_WritePMA>
          ep->xfer_buff += len;
 8007b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695a      	ldr	r2, [r3, #20]
 8007b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b86:	441a      	add	r2, r3
 8007b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6a1a      	ldr	r2, [r3, #32]
 8007ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d90f      	bls.n	8007bd0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6a1a      	ldr	r2, [r3, #32]
 8007bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc0:	1ad2      	subs	r2, r2, r3
 8007bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	621a      	str	r2, [r3, #32]
 8007bce:	e00e      	b.n	8007bee <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2200      	movs	r2, #0
 8007bec:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8295 	beq.w	8008122 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d16d      	bne.n	8007ce4 <USB_EPStartXfer+0xe4c>
 8007c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c28:	4413      	add	r3, r2
 8007c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	011a      	lsls	r2, r3, #4
 8007c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c42:	667b      	str	r3, [r7, #100]	; 0x64
 8007c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d112      	bne.n	8007c72 <USB_EPStartXfer+0xdda>
 8007c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c5a:	801a      	strh	r2, [r3, #0]
 8007c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c6e:	801a      	strh	r2, [r3, #0]
 8007c70:	e063      	b.n	8007d3a <USB_EPStartXfer+0xea2>
 8007c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c76:	2b3e      	cmp	r3, #62	; 0x3e
 8007c78:	d817      	bhi.n	8007caa <USB_EPStartXfer+0xe12>
 8007c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d004      	beq.n	8007c9a <USB_EPStartXfer+0xe02>
 8007c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c94:	3301      	adds	r3, #1
 8007c96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	029b      	lsls	r3, r3, #10
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ca6:	801a      	strh	r2, [r3, #0]
 8007ca8:	e047      	b.n	8007d3a <USB_EPStartXfer+0xea2>
 8007caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cae:	095b      	lsrs	r3, r3, #5
 8007cb0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb8:	f003 031f 	and.w	r3, r3, #31
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d104      	bne.n	8007cca <USB_EPStartXfer+0xe32>
 8007cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	029b      	lsls	r3, r3, #10
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ce0:	801a      	strh	r2, [r3, #0]
 8007ce2:	e02a      	b.n	8007d3a <USB_EPStartXfer+0xea2>
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	785b      	ldrb	r3, [r3, #1]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d122      	bne.n	8007d3a <USB_EPStartXfer+0xea2>
 8007cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	673b      	str	r3, [r7, #112]	; 0x70
 8007d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	461a      	mov	r2, r3
 8007d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d14:	4413      	add	r3, r2
 8007d16:	673b      	str	r3, [r7, #112]	; 0x70
 8007d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	011a      	lsls	r2, r3, #4
 8007d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d28:	4413      	add	r3, r2
 8007d2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	891b      	ldrh	r3, [r3, #8]
 8007d46:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6959      	ldr	r1, [r3, #20]
 8007d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d60:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d64:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d68:	6800      	ldr	r0, [r0, #0]
 8007d6a:	f001 f80b 	bl	8008d84 <USB_WritePMA>
 8007d6e:	e1d8      	b.n	8008122 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d178      	bne.n	8007e72 <USB_EPStartXfer+0xfda>
 8007d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007da4:	4413      	add	r3, r2
 8007da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	011a      	lsls	r2, r3, #4
 8007db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d116      	bne.n	8007dfc <USB_EPStartXfer+0xf64>
 8007dce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007df8:	801a      	strh	r2, [r3, #0]
 8007dfa:	e06b      	b.n	8007ed4 <USB_EPStartXfer+0x103c>
 8007dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e00:	2b3e      	cmp	r3, #62	; 0x3e
 8007e02:	d818      	bhi.n	8007e36 <USB_EPStartXfer+0xf9e>
 8007e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e08:	085b      	lsrs	r3, r3, #1
 8007e0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d004      	beq.n	8007e24 <USB_EPStartXfer+0xf8c>
 8007e1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e1e:	3301      	adds	r3, #1
 8007e20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	029b      	lsls	r3, r3, #10
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e32:	801a      	strh	r2, [r3, #0]
 8007e34:	e04e      	b.n	8007ed4 <USB_EPStartXfer+0x103c>
 8007e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3a:	095b      	lsrs	r3, r3, #5
 8007e3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e44:	f003 031f 	and.w	r3, r3, #31
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <USB_EPStartXfer+0xfbe>
 8007e4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e50:	3b01      	subs	r3, #1
 8007e52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	029b      	lsls	r3, r3, #10
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e6e:	801a      	strh	r2, [r3, #0]
 8007e70:	e030      	b.n	8007ed4 <USB_EPStartXfer+0x103c>
 8007e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d128      	bne.n	8007ed4 <USB_EPStartXfer+0x103c>
 8007e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	011a      	lsls	r2, r3, #4
 8007eba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ec4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ed2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	891b      	ldrh	r3, [r3, #8]
 8007ee0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6959      	ldr	r1, [r3, #20]
 8007ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007efa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007efe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f02:	6800      	ldr	r0, [r0, #0]
 8007f04:	f000 ff3e 	bl	8008d84 <USB_WritePMA>
          ep->xfer_buff += len;
 8007f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	695a      	ldr	r2, [r3, #20]
 8007f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f18:	441a      	add	r2, r3
 8007f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6a1a      	ldr	r2, [r3, #32]
 8007f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d90f      	bls.n	8007f62 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6a1a      	ldr	r2, [r3, #32]
 8007f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f52:	1ad2      	subs	r2, r2, r3
 8007f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	621a      	str	r2, [r3, #32]
 8007f60:	e00e      	b.n	8007f80 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 80cc 	beq.w	8008122 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d178      	bne.n	800809a <USB_EPStartXfer+0x1202>
 8007fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fcc:	4413      	add	r3, r2
 8007fce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	011a      	lsls	r2, r3, #4
 8007fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d116      	bne.n	8008024 <USB_EPStartXfer+0x118c>
 8007ff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008002:	b29a      	uxth	r2, r3
 8008004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008008:	801a      	strh	r2, [r3, #0]
 800800a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29b      	uxth	r3, r3
 8008012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800801a:	b29a      	uxth	r2, r3
 800801c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008020:	801a      	strh	r2, [r3, #0]
 8008022:	e064      	b.n	80080ee <USB_EPStartXfer+0x1256>
 8008024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008028:	2b3e      	cmp	r3, #62	; 0x3e
 800802a:	d818      	bhi.n	800805e <USB_EPStartXfer+0x11c6>
 800802c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008030:	085b      	lsrs	r3, r3, #1
 8008032:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <USB_EPStartXfer+0x11b4>
 8008042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008046:	3301      	adds	r3, #1
 8008048:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800804c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008050:	b29b      	uxth	r3, r3
 8008052:	029b      	lsls	r3, r3, #10
 8008054:	b29a      	uxth	r2, r3
 8008056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	e047      	b.n	80080ee <USB_EPStartXfer+0x1256>
 800805e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800806c:	f003 031f 	and.w	r3, r3, #31
 8008070:	2b00      	cmp	r3, #0
 8008072:	d104      	bne.n	800807e <USB_EPStartXfer+0x11e6>
 8008074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008078:	3b01      	subs	r3, #1
 800807a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800807e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008082:	b29b      	uxth	r3, r3
 8008084:	029b      	lsls	r3, r3, #10
 8008086:	b29b      	uxth	r3, r3
 8008088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008090:	b29a      	uxth	r2, r3
 8008092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008096:	801a      	strh	r2, [r3, #0]
 8008098:	e029      	b.n	80080ee <USB_EPStartXfer+0x1256>
 800809a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d121      	bne.n	80080ee <USB_EPStartXfer+0x1256>
 80080aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080c0:	4413      	add	r3, r2
 80080c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	011a      	lsls	r2, r3, #4
 80080d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080d8:	4413      	add	r3, r2
 80080da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	895b      	ldrh	r3, [r3, #10]
 80080fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6959      	ldr	r1, [r3, #20]
 800810a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810e:	b29b      	uxth	r3, r3
 8008110:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008114:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008118:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800811c:	6800      	ldr	r0, [r0, #0]
 800811e:	f000 fe31 	bl	8008d84 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008126:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008144:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800814c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008150:	8013      	strh	r3, [r2, #0]
 8008152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008156:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800815a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800815e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008162:	8812      	ldrh	r2, [r2, #0]
 8008164:	f082 0210 	eor.w	r2, r2, #16
 8008168:	801a      	strh	r2, [r3, #0]
 800816a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008172:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008176:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800817a:	8812      	ldrh	r2, [r2, #0]
 800817c:	f082 0220 	eor.w	r2, r2, #32
 8008180:	801a      	strh	r2, [r3, #0]
 8008182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008186:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	441a      	add	r2, r3
 800819c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8013      	strh	r3, [r2, #0]
 80081ba:	f000 bc9f 	b.w	8008afc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	7b1b      	ldrb	r3, [r3, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f040 80ae 	bne.w	800832c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	699a      	ldr	r2, [r3, #24]
 80081dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d917      	bls.n	800821c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80081ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80081fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	699a      	ldr	r2, [r3, #24]
 8008208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800820c:	1ad2      	subs	r2, r2, r3
 800820e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	619a      	str	r2, [r3, #24]
 800821a:	e00e      	b.n	800823a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800821c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800822c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2200      	movs	r2, #0
 8008238:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800823a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008256:	b29b      	uxth	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800825e:	4413      	add	r3, r2
 8008260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	011a      	lsls	r2, r3, #4
 8008272:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008276:	4413      	add	r3, r2
 8008278:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800827c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d116      	bne.n	80082b6 <USB_EPStartXfer+0x141e>
 8008288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082b2:	801a      	strh	r2, [r3, #0]
 80082b4:	e3e8      	b.n	8008a88 <USB_EPStartXfer+0x1bf0>
 80082b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ba:	2b3e      	cmp	r3, #62	; 0x3e
 80082bc:	d818      	bhi.n	80082f0 <USB_EPStartXfer+0x1458>
 80082be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d004      	beq.n	80082de <USB_EPStartXfer+0x1446>
 80082d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082d8:	3301      	adds	r3, #1
 80082da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	029b      	lsls	r3, r3, #10
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082ec:	801a      	strh	r2, [r3, #0]
 80082ee:	e3cb      	b.n	8008a88 <USB_EPStartXfer+0x1bf0>
 80082f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fe:	f003 031f 	and.w	r3, r3, #31
 8008302:	2b00      	cmp	r3, #0
 8008304:	d104      	bne.n	8008310 <USB_EPStartXfer+0x1478>
 8008306:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800830a:	3b01      	subs	r3, #1
 800830c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008310:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008314:	b29b      	uxth	r3, r3
 8008316:	029b      	lsls	r3, r3, #10
 8008318:	b29b      	uxth	r3, r3
 800831a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800831e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008322:	b29a      	uxth	r2, r3
 8008324:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008328:	801a      	strh	r2, [r3, #0]
 800832a:	e3ad      	b.n	8008a88 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800832c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	78db      	ldrb	r3, [r3, #3]
 8008338:	2b02      	cmp	r3, #2
 800833a:	f040 8200 	bne.w	800873e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800833e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	785b      	ldrb	r3, [r3, #1]
 800834a:	2b00      	cmp	r3, #0
 800834c:	f040 8091 	bne.w	8008472 <USB_EPStartXfer+0x15da>
 8008350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008354:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800835e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800836c:	b29b      	uxth	r3, r3
 800836e:	461a      	mov	r2, r3
 8008370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008374:	4413      	add	r3, r2
 8008376:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800837a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	011a      	lsls	r2, r3, #4
 8008388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800838c:	4413      	add	r3, r2
 800838e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800839a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d116      	bne.n	80083d4 <USB_EPStartXfer+0x153c>
 80083a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083d0:	801a      	strh	r2, [r3, #0]
 80083d2:	e083      	b.n	80084dc <USB_EPStartXfer+0x1644>
 80083d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b3e      	cmp	r3, #62	; 0x3e
 80083e2:	d820      	bhi.n	8008426 <USB_EPStartXfer+0x158e>
 80083e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	085b      	lsrs	r3, r3, #1
 80083f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	d004      	beq.n	8008414 <USB_EPStartXfer+0x157c>
 800840a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800840e:	3301      	adds	r3, #1
 8008410:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008418:	b29b      	uxth	r3, r3
 800841a:	029b      	lsls	r3, r3, #10
 800841c:	b29a      	uxth	r2, r3
 800841e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	e05a      	b.n	80084dc <USB_EPStartXfer+0x1644>
 8008426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	f003 031f 	and.w	r3, r3, #31
 8008448:	2b00      	cmp	r3, #0
 800844a:	d104      	bne.n	8008456 <USB_EPStartXfer+0x15be>
 800844c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008450:	3b01      	subs	r3, #1
 8008452:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845a:	b29b      	uxth	r3, r3
 800845c:	029b      	lsls	r3, r3, #10
 800845e:	b29b      	uxth	r3, r3
 8008460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008468:	b29a      	uxth	r2, r3
 800846a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800846e:	801a      	strh	r2, [r3, #0]
 8008470:	e034      	b.n	80084dc <USB_EPStartXfer+0x1644>
 8008472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	785b      	ldrb	r3, [r3, #1]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d12c      	bne.n	80084dc <USB_EPStartXfer+0x1644>
 8008482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800849e:	b29b      	uxth	r3, r3
 80084a0:	461a      	mov	r2, r3
 80084a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084a6:	4413      	add	r3, r2
 80084a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	011a      	lsls	r2, r3, #4
 80084ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084be:	4413      	add	r3, r2
 80084c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084da:	801a      	strh	r2, [r3, #0]
 80084dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f040 8091 	bne.w	800861e <USB_EPStartXfer+0x1786>
 80084fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008500:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800850a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008518:	b29b      	uxth	r3, r3
 800851a:	461a      	mov	r2, r3
 800851c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008520:	4413      	add	r3, r2
 8008522:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	011a      	lsls	r2, r3, #4
 8008534:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008538:	4413      	add	r3, r2
 800853a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800853e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d116      	bne.n	8008580 <USB_EPStartXfer+0x16e8>
 8008552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800855e:	b29a      	uxth	r2, r3
 8008560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008564:	801a      	strh	r2, [r3, #0]
 8008566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	b29b      	uxth	r3, r3
 800856e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008576:	b29a      	uxth	r2, r3
 8008578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800857c:	801a      	strh	r2, [r3, #0]
 800857e:	e07c      	b.n	800867a <USB_EPStartXfer+0x17e2>
 8008580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b3e      	cmp	r3, #62	; 0x3e
 800858e:	d820      	bhi.n	80085d2 <USB_EPStartXfer+0x173a>
 8008590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d004      	beq.n	80085c0 <USB_EPStartXfer+0x1728>
 80085b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085ba:	3301      	adds	r3, #1
 80085bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	029b      	lsls	r3, r3, #10
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085ce:	801a      	strh	r2, [r3, #0]
 80085d0:	e053      	b.n	800867a <USB_EPStartXfer+0x17e2>
 80085d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	f003 031f 	and.w	r3, r3, #31
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d104      	bne.n	8008602 <USB_EPStartXfer+0x176a>
 80085f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085fc:	3b01      	subs	r3, #1
 80085fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008602:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008606:	b29b      	uxth	r3, r3
 8008608:	029b      	lsls	r3, r3, #10
 800860a:	b29b      	uxth	r3, r3
 800860c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008614:	b29a      	uxth	r2, r3
 8008616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800861a:	801a      	strh	r2, [r3, #0]
 800861c:	e02d      	b.n	800867a <USB_EPStartXfer+0x17e2>
 800861e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	785b      	ldrb	r3, [r3, #1]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d125      	bne.n	800867a <USB_EPStartXfer+0x17e2>
 800862e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863c:	b29b      	uxth	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008644:	4413      	add	r3, r2
 8008646:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800864a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	011a      	lsls	r2, r3, #4
 8008658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800865c:	4413      	add	r3, r2
 800865e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	b29a      	uxth	r2, r3
 8008674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008678:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800867a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 81fe 	beq.w	8008a88 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800868c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800869a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <USB_EPStartXfer+0x182c>
 80086b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10d      	bne.n	80086e0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086c4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f040 81db 	bne.w	8008a88 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f040 81d4 	bne.w	8008a88 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80086e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008706:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800870a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800870e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	441a      	add	r2, r3
 8008724:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800872c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008734:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008738:	b29b      	uxth	r3, r3
 800873a:	8013      	strh	r3, [r2, #0]
 800873c:	e1a4      	b.n	8008a88 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800873e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	78db      	ldrb	r3, [r3, #3]
 800874a:	2b01      	cmp	r3, #1
 800874c:	f040 819a 	bne.w	8008a84 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699a      	ldr	r2, [r3, #24]
 800875c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	429a      	cmp	r2, r3
 800876a:	d917      	bls.n	800879c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800876c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800877c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878c:	1ad2      	subs	r2, r2, r3
 800878e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	619a      	str	r2, [r3, #24]
 800879a:	e00e      	b.n	80087ba <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800879c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80087ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2200      	movs	r2, #0
 80087b8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	785b      	ldrb	r3, [r3, #1]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d178      	bne.n	80088bc <USB_EPStartXfer+0x1a24>
 80087ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	461a      	mov	r2, r3
 80087ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087ee:	4413      	add	r3, r2
 80087f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	011a      	lsls	r2, r3, #4
 8008802:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008806:	4413      	add	r3, r2
 8008808:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800880c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008814:	2b00      	cmp	r3, #0
 8008816:	d116      	bne.n	8008846 <USB_EPStartXfer+0x19ae>
 8008818:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29b      	uxth	r3, r3
 8008820:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008824:	b29a      	uxth	r2, r3
 8008826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800882a:	801a      	strh	r2, [r3, #0]
 800882c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	b29b      	uxth	r3, r3
 8008834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800883c:	b29a      	uxth	r2, r3
 800883e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	e06b      	b.n	800891e <USB_EPStartXfer+0x1a86>
 8008846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884a:	2b3e      	cmp	r3, #62	; 0x3e
 800884c:	d818      	bhi.n	8008880 <USB_EPStartXfer+0x19e8>
 800884e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008852:	085b      	lsrs	r3, r3, #1
 8008854:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <USB_EPStartXfer+0x19d6>
 8008864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008868:	3301      	adds	r3, #1
 800886a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800886e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008872:	b29b      	uxth	r3, r3
 8008874:	029b      	lsls	r3, r3, #10
 8008876:	b29a      	uxth	r2, r3
 8008878:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800887c:	801a      	strh	r2, [r3, #0]
 800887e:	e04e      	b.n	800891e <USB_EPStartXfer+0x1a86>
 8008880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008884:	095b      	lsrs	r3, r3, #5
 8008886:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800888a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888e:	f003 031f 	and.w	r3, r3, #31
 8008892:	2b00      	cmp	r3, #0
 8008894:	d104      	bne.n	80088a0 <USB_EPStartXfer+0x1a08>
 8008896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800889a:	3b01      	subs	r3, #1
 800889c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	029b      	lsls	r3, r3, #10
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088b8:	801a      	strh	r2, [r3, #0]
 80088ba:	e030      	b.n	800891e <USB_EPStartXfer+0x1a86>
 80088bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	785b      	ldrb	r3, [r3, #1]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d128      	bne.n	800891e <USB_EPStartXfer+0x1a86>
 80088cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f0:	4413      	add	r3, r2
 80088f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	011a      	lsls	r2, r3, #4
 8008904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008908:	4413      	add	r3, r2
 800890a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800890e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008916:	b29a      	uxth	r2, r3
 8008918:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800891c:	801a      	strh	r2, [r3, #0]
 800891e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800892c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	785b      	ldrb	r3, [r3, #1]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d178      	bne.n	8008a2e <USB_EPStartXfer+0x1b96>
 800893c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800894a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008958:	b29b      	uxth	r3, r3
 800895a:	461a      	mov	r2, r3
 800895c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008960:	4413      	add	r3, r2
 8008962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800896a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	011a      	lsls	r2, r3, #4
 8008974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008978:	4413      	add	r3, r2
 800897a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800897e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d116      	bne.n	80089b8 <USB_EPStartXfer+0x1b20>
 800898a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	b29b      	uxth	r3, r3
 8008992:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008996:	b29a      	uxth	r2, r3
 8008998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089b4:	801a      	strh	r2, [r3, #0]
 80089b6:	e067      	b.n	8008a88 <USB_EPStartXfer+0x1bf0>
 80089b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089bc:	2b3e      	cmp	r3, #62	; 0x3e
 80089be:	d818      	bhi.n	80089f2 <USB_EPStartXfer+0x1b5a>
 80089c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d004      	beq.n	80089e0 <USB_EPStartXfer+0x1b48>
 80089d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089da:	3301      	adds	r3, #1
 80089dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	029b      	lsls	r3, r3, #10
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ee:	801a      	strh	r2, [r3, #0]
 80089f0:	e04a      	b.n	8008a88 <USB_EPStartXfer+0x1bf0>
 80089f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f6:	095b      	lsrs	r3, r3, #5
 80089f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a00:	f003 031f 	and.w	r3, r3, #31
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <USB_EPStartXfer+0x1b7a>
 8008a08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	029b      	lsls	r3, r3, #10
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a2a:	801a      	strh	r2, [r3, #0]
 8008a2c:	e02c      	b.n	8008a88 <USB_EPStartXfer+0x1bf0>
 8008a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	785b      	ldrb	r3, [r3, #1]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d124      	bne.n	8008a88 <USB_EPStartXfer+0x1bf0>
 8008a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a54:	4413      	add	r3, r2
 8008a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	011a      	lsls	r2, r3, #4
 8008a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	e001      	b.n	8008a88 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e03a      	b.n	8008afe <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ab2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ab6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008aba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008abe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ac2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ac6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	441a      	add	r2, r3
 8008ae4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	785b      	ldrb	r3, [r3, #1]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d020      	beq.n	8008b5c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b30:	81bb      	strh	r3, [r7, #12]
 8008b32:	89bb      	ldrh	r3, [r7, #12]
 8008b34:	f083 0310 	eor.w	r3, r3, #16
 8008b38:	81bb      	strh	r3, [r7, #12]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	441a      	add	r2, r3
 8008b44:	89bb      	ldrh	r3, [r7, #12]
 8008b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	8013      	strh	r3, [r2, #0]
 8008b5a:	e01f      	b.n	8008b9c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b72:	81fb      	strh	r3, [r7, #14]
 8008b74:	89fb      	ldrh	r3, [r7, #14]
 8008b76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b7a:	81fb      	strh	r3, [r7, #14]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	441a      	add	r2, r3
 8008b86:	89fb      	ldrh	r3, [r7, #14]
 8008b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bc80      	pop	{r7}
 8008ba6:	4770      	bx	lr

08008ba8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	7b1b      	ldrb	r3, [r3, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f040 809d 	bne.w	8008cf6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d04c      	beq.n	8008c5e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	823b      	strh	r3, [r7, #16]
 8008bd2:	8a3b      	ldrh	r3, [r7, #16]
 8008bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01b      	beq.n	8008c14 <USB_EPClearStall+0x6c>
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf2:	81fb      	strh	r3, [r7, #14]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	441a      	add	r2, r3
 8008bfe:	89fb      	ldrh	r3, [r7, #14]
 8008c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	78db      	ldrb	r3, [r3, #3]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d06c      	beq.n	8008cf6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c32:	81bb      	strh	r3, [r7, #12]
 8008c34:	89bb      	ldrh	r3, [r7, #12]
 8008c36:	f083 0320 	eor.w	r3, r3, #32
 8008c3a:	81bb      	strh	r3, [r7, #12]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	441a      	add	r2, r3
 8008c46:	89bb      	ldrh	r3, [r7, #12]
 8008c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	8013      	strh	r3, [r2, #0]
 8008c5c:	e04b      	b.n	8008cf6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	82fb      	strh	r3, [r7, #22]
 8008c6c:	8afb      	ldrh	r3, [r7, #22]
 8008c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d01b      	beq.n	8008cae <USB_EPClearStall+0x106>
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8c:	82bb      	strh	r3, [r7, #20]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	441a      	add	r2, r3
 8008c98:	8abb      	ldrh	r3, [r7, #20]
 8008c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc4:	827b      	strh	r3, [r7, #18]
 8008cc6:	8a7b      	ldrh	r3, [r7, #18]
 8008cc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ccc:	827b      	strh	r3, [r7, #18]
 8008cce:	8a7b      	ldrh	r3, [r7, #18]
 8008cd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cd4:	827b      	strh	r3, [r7, #18]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	441a      	add	r2, r3
 8008ce0:	8a7b      	ldrh	r3, [r7, #18]
 8008ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	371c      	adds	r7, #28
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr

08008d02 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d0e:	78fb      	ldrb	r3, [r7, #3]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d103      	bne.n	8008d1c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2280      	movs	r2, #128	; 0x80
 8008d18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bc80      	pop	{r7}
 8008d26:	4770      	bx	lr

08008d28 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bc80      	pop	{r7}
 8008d3a:	4770      	bx	lr

08008d3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr

08008d50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d62:	68fb      	ldr	r3, [r7, #12]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr

08008d6e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bc80      	pop	{r7}
 8008d82:	4770      	bx	lr

08008d84 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b08d      	sub	sp, #52	; 0x34
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	4611      	mov	r1, r2
 8008d90:	461a      	mov	r2, r3
 8008d92:	460b      	mov	r3, r1
 8008d94:	80fb      	strh	r3, [r7, #6]
 8008d96:	4613      	mov	r3, r2
 8008d98:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d9a:	88bb      	ldrh	r3, [r7, #4]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	085b      	lsrs	r3, r3, #1
 8008da0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008daa:	88fb      	ldrh	r3, [r7, #6]
 8008dac:	005a      	lsls	r2, r3, #1
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008db6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dbc:	e01e      	b.n	8008dfc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	3302      	adds	r3, #2
 8008de8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	3302      	adds	r3, #2
 8008dee:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	3301      	adds	r3, #1
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1dd      	bne.n	8008dbe <USB_WritePMA+0x3a>
  }
}
 8008e02:	bf00      	nop
 8008e04:	bf00      	nop
 8008e06:	3734      	adds	r7, #52	; 0x34
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr

08008e0e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b08b      	sub	sp, #44	; 0x2c
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	4611      	mov	r1, r2
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	80fb      	strh	r3, [r7, #6]
 8008e20:	4613      	mov	r3, r2
 8008e22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e24:	88bb      	ldrh	r3, [r7, #4]
 8008e26:	085b      	lsrs	r3, r3, #1
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	005a      	lsls	r2, r3, #1
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e40:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
 8008e46:	e01b      	b.n	8008e80 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	3302      	adds	r3, #2
 8008e54:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	3301      	adds	r3, #1
 8008e62:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	0a1b      	lsrs	r3, r3, #8
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	3301      	adds	r3, #1
 8008e72:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	3302      	adds	r3, #2
 8008e78:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e0      	bne.n	8008e48 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008e86:	88bb      	ldrh	r3, [r7, #4]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d007      	beq.n	8008ea2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	881b      	ldrh	r3, [r3, #0]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	701a      	strb	r2, [r3, #0]
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	372c      	adds	r7, #44	; 0x2c
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bc80      	pop	{r7}
 8008eaa:	4770      	bx	lr

08008eac <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008ebc:	2340      	movs	r3, #64	; 0x40
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	2181      	movs	r1, #129	; 0x81
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 fd47 	bl	800a956 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008ece:	2340      	movs	r3, #64	; 0x40
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 fd3e 	bl	800a956 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008ee2:	2054      	movs	r0, #84	; 0x54
 8008ee4:	f001 fe4c 	bl	800ab80 <USBD_static_malloc>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d102      	bne.n	8008f00 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008efa:	2301      	movs	r3, #1
 8008efc:	73fb      	strb	r3, [r7, #15]
 8008efe:	e012      	b.n	8008f26 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f06:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	2340      	movs	r3, #64	; 0x40
 8008f1e:	2101      	movs	r1, #1
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 fe09 	bl	800ab38 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008f3c:	2181      	movs	r1, #129	; 0x81
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f001 fd2f 	bl	800a9a2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 fd28 	bl	800a9a2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00e      	beq.n	8008f82 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 fe0f 	bl	800ab98 <USBD_static_free>
    pdev->pClassData = NULL;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d051      	beq.n	800905e <USBD_CUSTOM_HID_Setup+0xd2>
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	f040 80d8 	bne.w	8009170 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	3b02      	subs	r3, #2
 8008fc6:	2b09      	cmp	r3, #9
 8008fc8:	d841      	bhi.n	800904e <USBD_CUSTOM_HID_Setup+0xc2>
 8008fca:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <USBD_CUSTOM_HID_Setup+0x44>)
 8008fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd0:	08009029 	.word	0x08009029
 8008fd4:	08009007 	.word	0x08009007
 8008fd8:	0800904f 	.word	0x0800904f
 8008fdc:	0800904f 	.word	0x0800904f
 8008fe0:	0800904f 	.word	0x0800904f
 8008fe4:	0800904f 	.word	0x0800904f
 8008fe8:	0800904f 	.word	0x0800904f
 8008fec:	08009039 	.word	0x08009039
 8008ff0:	08009017 	.word	0x08009017
 8008ff4:	08008ff9 	.word	0x08008ff9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	885b      	ldrh	r3, [r3, #2]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	461a      	mov	r2, r3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8009004:	e02a      	b.n	800905c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	3340      	adds	r3, #64	; 0x40
 800900a:	2201      	movs	r2, #1
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f001 f999 	bl	800a346 <USBD_CtlSendData>
          break;
 8009014:	e022      	b.n	800905c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	885b      	ldrh	r3, [r3, #2]
 800901a:	0a1b      	lsrs	r3, r3, #8
 800901c:	b29b      	uxth	r3, r3
 800901e:	b2db      	uxtb	r3, r3
 8009020:	461a      	mov	r2, r3
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8009026:	e019      	b.n	800905c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	3344      	adds	r3, #68	; 0x44
 800902c:	2201      	movs	r2, #1
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 f988 	bl	800a346 <USBD_CtlSendData>
          break;
 8009036:	e011      	b.n	800905c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	2201      	movs	r2, #1
 800903c:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800903e:	6939      	ldr	r1, [r7, #16]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	88db      	ldrh	r3, [r3, #6]
 8009044:	461a      	mov	r2, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 f9ab 	bl	800a3a2 <USBD_CtlPrepareRx>
          break;
 800904c:	e006      	b.n	800905c <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 f90e 	bl	800a272 <USBD_CtlError>
          ret = USBD_FAIL;
 8009056:	2302      	movs	r3, #2
 8009058:	75fb      	strb	r3, [r7, #23]
          break;
 800905a:	bf00      	nop
      }
      break;
 800905c:	e08f      	b.n	800917e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b0b      	cmp	r3, #11
 8009064:	d87c      	bhi.n	8009160 <USBD_CUSTOM_HID_Setup+0x1d4>
 8009066:	a201      	add	r2, pc, #4	; (adr r2, 800906c <USBD_CUSTOM_HID_Setup+0xe0>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	0800909d 	.word	0x0800909d
 8009070:	08009161 	.word	0x08009161
 8009074:	08009161 	.word	0x08009161
 8009078:	08009161 	.word	0x08009161
 800907c:	08009161 	.word	0x08009161
 8009080:	08009161 	.word	0x08009161
 8009084:	080090c5 	.word	0x080090c5
 8009088:	08009161 	.word	0x08009161
 800908c:	08009161 	.word	0x08009161
 8009090:	08009161 	.word	0x08009161
 8009094:	08009113 	.word	0x08009113
 8009098:	0800913b 	.word	0x0800913b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d107      	bne.n	80090b6 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80090a6:	f107 030e 	add.w	r3, r7, #14
 80090aa:	2202      	movs	r2, #2
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 f949 	bl	800a346 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090b4:	e05b      	b.n	800916e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 f8da 	bl	800a272 <USBD_CtlError>
            ret = USBD_FAIL;
 80090be:	2302      	movs	r3, #2
 80090c0:	75fb      	strb	r3, [r7, #23]
          break;
 80090c2:	e054      	b.n	800916e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	885b      	ldrh	r3, [r3, #2]
 80090c8:	0a1b      	lsrs	r3, r3, #8
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	2b22      	cmp	r3, #34	; 0x22
 80090ce:	d10b      	bne.n	80090e8 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	88db      	ldrh	r3, [r3, #6]
 80090d4:	2b1d      	cmp	r3, #29
 80090d6:	bf28      	it	cs
 80090d8:	231d      	movcs	r3, #29
 80090da:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	e00d      	b.n	8009104 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	885b      	ldrh	r3, [r3, #2]
 80090ec:	0a1b      	lsrs	r3, r3, #8
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	2b21      	cmp	r3, #33	; 0x21
 80090f2:	d107      	bne.n	8009104 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80090f4:	4b24      	ldr	r3, [pc, #144]	; (8009188 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80090f6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	88db      	ldrh	r3, [r3, #6]
 80090fc:	2b09      	cmp	r3, #9
 80090fe:	bf28      	it	cs
 8009100:	2309      	movcs	r3, #9
 8009102:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8009104:	8bfb      	ldrh	r3, [r7, #30]
 8009106:	461a      	mov	r2, r3
 8009108:	69b9      	ldr	r1, [r7, #24]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f91b 	bl	800a346 <USBD_CtlSendData>
          break;
 8009110:	e02d      	b.n	800916e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009118:	2b03      	cmp	r3, #3
 800911a:	d107      	bne.n	800912c <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	3348      	adds	r3, #72	; 0x48
 8009120:	2201      	movs	r2, #1
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 f90e 	bl	800a346 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800912a:	e020      	b.n	800916e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 f89f 	bl	800a272 <USBD_CtlError>
            ret = USBD_FAIL;
 8009134:	2302      	movs	r3, #2
 8009136:	75fb      	strb	r3, [r7, #23]
          break;
 8009138:	e019      	b.n	800916e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009140:	2b03      	cmp	r3, #3
 8009142:	d106      	bne.n	8009152 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	885b      	ldrh	r3, [r3, #2]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	461a      	mov	r2, r3
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009150:	e00d      	b.n	800916e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 f88c 	bl	800a272 <USBD_CtlError>
            ret = USBD_FAIL;
 800915a:	2302      	movs	r3, #2
 800915c:	75fb      	strb	r3, [r7, #23]
          break;
 800915e:	e006      	b.n	800916e <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 f885 	bl	800a272 <USBD_CtlError>
          ret = USBD_FAIL;
 8009168:	2302      	movs	r3, #2
 800916a:	75fb      	strb	r3, [r7, #23]
          break;
 800916c:	bf00      	nop
      }
      break;
 800916e:	e006      	b.n	800917e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 f87d 	bl	800a272 <USBD_CtlError>
      ret = USBD_FAIL;
 8009178:	2302      	movs	r3, #2
 800917a:	75fb      	strb	r3, [r7, #23]
      break;
 800917c:	bf00      	nop
  }
  return ret;
 800917e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3720      	adds	r7, #32
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	200000d4 	.word	0x200000d4

0800918c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	4613      	mov	r3, r2
 8009198:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d111      	bne.n	80091d0 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80091be:	88fb      	ldrh	r3, [r7, #6]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	2181      	movs	r1, #129	; 0x81
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f001 fc94 	bl	800aaf2 <USBD_LL_Transmit>
 80091ca:	e001      	b.n	80091d0 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3718      	adds	r7, #24
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2229      	movs	r2, #41	; 0x29
 80091e8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80091ea:	4b03      	ldr	r3, [pc, #12]	; (80091f8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bc80      	pop	{r7}
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	20000050 	.word	0x20000050

080091fc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2229      	movs	r2, #41	; 0x29
 8009208:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800920a:	4b03      	ldr	r3, [pc, #12]	; (8009218 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	bc80      	pop	{r7}
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	2000007c 	.word	0x2000007c

0800921c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2229      	movs	r2, #41	; 0x29
 8009228:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800922a:	4b03      	ldr	r3, [pc, #12]	; (8009238 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	200000a8 	.word	0x200000a8

0800923c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	bc80      	pop	{r7}
 800925e:	4770      	bx	lr

08009260 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009272:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	4610      	mov	r0, r2
 8009280:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	2340      	movs	r3, #64	; 0x40
 8009286:	2101      	movs	r1, #1
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fc55 	bl	800ab38 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a6:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d109      	bne.n	80092c4 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	4610      	mov	r0, r2
 80092bc:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	220a      	movs	r2, #10
 80092dc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80092de:	4b03      	ldr	r3, [pc, #12]	; (80092ec <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bc80      	pop	{r7}
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	200000e0 	.word	0x200000e0

080092f0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80092fa:	2302      	movs	r3, #2
 80092fc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d005      	beq.n	8009310 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	bc80      	pop	{r7}
 800931a:	4770      	bx	lr

0800931c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009330:	2302      	movs	r3, #2
 8009332:	e01a      	b.n	800936a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d003      	beq.n	8009354 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	79fa      	ldrb	r2, [r7, #7]
 8009360:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f001 fa8c 	bl	800a880 <USBD_LL_Init>

  return USBD_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009372:	b480      	push	{r7}
 8009374:	b085      	sub	sp, #20
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d006      	beq.n	8009394 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]
 8009392:	e001      	b.n	8009398 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009394:	2302      	movs	r3, #2
 8009396:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr

080093a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 fab7 	bl	800a920 <USBD_LL_Start>

  return USBD_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr

080093d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	460b      	mov	r3, r1
 80093da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80093dc:	2302      	movs	r3, #2
 80093de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00c      	beq.n	8009404 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	4611      	mov	r1, r2
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	78fa      	ldrb	r2, [r7, #3]
 8009424:	4611      	mov	r1, r2
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	4798      	blx	r3

  return USBD_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fed7 	bl	800a1fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800945a:	461a      	mov	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009468:	f003 031f 	and.w	r3, r3, #31
 800946c:	2b02      	cmp	r3, #2
 800946e:	d016      	beq.n	800949e <USBD_LL_SetupStage+0x6a>
 8009470:	2b02      	cmp	r3, #2
 8009472:	d81c      	bhi.n	80094ae <USBD_LL_SetupStage+0x7a>
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <USBD_LL_SetupStage+0x4a>
 8009478:	2b01      	cmp	r3, #1
 800947a:	d008      	beq.n	800948e <USBD_LL_SetupStage+0x5a>
 800947c:	e017      	b.n	80094ae <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f9ca 	bl	8009820 <USBD_StdDevReq>
      break;
 800948c:	e01a      	b.n	80094c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fa2c 	bl	80098f4 <USBD_StdItfReq>
      break;
 800949c:	e012      	b.n	80094c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fa6c 	bl	8009984 <USBD_StdEPReq>
      break;
 80094ac:	e00a      	b.n	80094c4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80094b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 fa8f 	bl	800a9e0 <USBD_LL_StallEP>
      break;
 80094c2:	bf00      	nop
  }

  return USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b086      	sub	sp, #24
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	460b      	mov	r3, r1
 80094d8:	607a      	str	r2, [r7, #4]
 80094da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80094dc:	7afb      	ldrb	r3, [r7, #11]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d14b      	bne.n	800957a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80094e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d134      	bne.n	800955e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	68da      	ldr	r2, [r3, #12]
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d919      	bls.n	8009534 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	1ad2      	subs	r2, r2, r3
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	68da      	ldr	r2, [r3, #12]
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009516:	429a      	cmp	r2, r3
 8009518:	d203      	bcs.n	8009522 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800951e:	b29b      	uxth	r3, r3
 8009520:	e002      	b.n	8009528 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009526:	b29b      	uxth	r3, r3
 8009528:	461a      	mov	r2, r3
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 ff56 	bl	800a3de <USBD_CtlContinueRx>
 8009532:	e038      	b.n	80095a6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00a      	beq.n	8009556 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009546:	2b03      	cmp	r3, #3
 8009548:	d105      	bne.n	8009556 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 ff53 	bl	800a402 <USBD_CtlSendStatus>
 800955c:	e023      	b.n	80095a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009564:	2b05      	cmp	r3, #5
 8009566:	d11e      	bne.n	80095a6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009570:	2100      	movs	r1, #0
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f001 fa34 	bl	800a9e0 <USBD_LL_StallEP>
 8009578:	e015      	b.n	80095a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00d      	beq.n	80095a2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800958c:	2b03      	cmp	r3, #3
 800958e:	d108      	bne.n	80095a2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	7afa      	ldrb	r2, [r7, #11]
 800959a:	4611      	mov	r1, r2
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	4798      	blx	r3
 80095a0:	e001      	b.n	80095a6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095a2:	2302      	movs	r3, #2
 80095a4:	e000      	b.n	80095a8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	460b      	mov	r3, r1
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095be:	7afb      	ldrb	r3, [r7, #11]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d17f      	bne.n	80096c4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3314      	adds	r3, #20
 80095c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d15c      	bne.n	800968e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	68da      	ldr	r2, [r3, #12]
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d915      	bls.n	800960c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	1ad2      	subs	r2, r2, r3
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 fec0 	bl	800a37e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095fe:	2300      	movs	r3, #0
 8009600:	2200      	movs	r2, #0
 8009602:	2100      	movs	r1, #0
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f001 fa97 	bl	800ab38 <USBD_LL_PrepareReceive>
 800960a:	e04e      	b.n	80096aa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	6912      	ldr	r2, [r2, #16]
 8009614:	fbb3 f1f2 	udiv	r1, r3, r2
 8009618:	fb01 f202 	mul.w	r2, r1, r2
 800961c:	1a9b      	subs	r3, r3, r2
 800961e:	2b00      	cmp	r3, #0
 8009620:	d11c      	bne.n	800965c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	689a      	ldr	r2, [r3, #8]
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800962a:	429a      	cmp	r2, r3
 800962c:	d316      	bcc.n	800965c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009638:	429a      	cmp	r2, r3
 800963a:	d20f      	bcs.n	800965c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800963c:	2200      	movs	r2, #0
 800963e:	2100      	movs	r1, #0
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 fe9c 	bl	800a37e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800964e:	2300      	movs	r3, #0
 8009650:	2200      	movs	r2, #0
 8009652:	2100      	movs	r1, #0
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f001 fa6f 	bl	800ab38 <USBD_LL_PrepareReceive>
 800965a:	e026      	b.n	80096aa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00a      	beq.n	800967e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800966e:	2b03      	cmp	r3, #3
 8009670:	d105      	bne.n	800967e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800967e:	2180      	movs	r1, #128	; 0x80
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f001 f9ad 	bl	800a9e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 fece 	bl	800a428 <USBD_CtlReceiveStatus>
 800968c:	e00d      	b.n	80096aa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009694:	2b04      	cmp	r3, #4
 8009696:	d004      	beq.n	80096a2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d103      	bne.n	80096aa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80096a2:	2180      	movs	r1, #128	; 0x80
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f001 f99b 	bl	800a9e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d11d      	bne.n	80096f0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f7ff fe81 	bl	80093bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80096c2:	e015      	b.n	80096f0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00d      	beq.n	80096ec <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d108      	bne.n	80096ec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	7afa      	ldrb	r2, [r7, #11]
 80096e4:	4611      	mov	r1, r2
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	4798      	blx	r3
 80096ea:	e001      	b.n	80096f0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80096ec:	2302      	movs	r3, #2
 80096ee:	e000      	b.n	80096f2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009702:	2340      	movs	r3, #64	; 0x40
 8009704:	2200      	movs	r2, #0
 8009706:	2100      	movs	r1, #0
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f001 f924 	bl	800a956 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2240      	movs	r2, #64	; 0x40
 800971a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800971e:	2340      	movs	r3, #64	; 0x40
 8009720:	2200      	movs	r2, #0
 8009722:	2180      	movs	r1, #128	; 0x80
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f001 f916 	bl	800a956 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2240      	movs	r2, #64	; 0x40
 8009734:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975a:	2b00      	cmp	r3, #0
 800975c:	d009      	beq.n	8009772 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6852      	ldr	r2, [r2, #4]
 800976a:	b2d2      	uxtb	r2, r2
 800976c:	4611      	mov	r1, r2
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	4798      	blx	r3
  }

  return USBD_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	78fa      	ldrb	r2, [r7, #3]
 800978c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr

0800979a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800979a:	b480      	push	{r7}
 800979c:	b083      	sub	sp, #12
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2204      	movs	r2, #4
 80097b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	bc80      	pop	{r7}
 80097c0:	4770      	bx	lr

080097c2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d105      	bne.n	80097e0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bc80      	pop	{r7}
 80097ea:	4770      	bx	lr

080097ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d10b      	bne.n	8009816 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d005      	beq.n	8009816 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009836:	2b40      	cmp	r3, #64	; 0x40
 8009838:	d005      	beq.n	8009846 <USBD_StdDevReq+0x26>
 800983a:	2b40      	cmp	r3, #64	; 0x40
 800983c:	d84f      	bhi.n	80098de <USBD_StdDevReq+0xbe>
 800983e:	2b00      	cmp	r3, #0
 8009840:	d009      	beq.n	8009856 <USBD_StdDevReq+0x36>
 8009842:	2b20      	cmp	r3, #32
 8009844:	d14b      	bne.n	80098de <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4798      	blx	r3
      break;
 8009854:	e048      	b.n	80098e8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	785b      	ldrb	r3, [r3, #1]
 800985a:	2b09      	cmp	r3, #9
 800985c:	d839      	bhi.n	80098d2 <USBD_StdDevReq+0xb2>
 800985e:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <USBD_StdDevReq+0x44>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	080098b5 	.word	0x080098b5
 8009868:	080098c9 	.word	0x080098c9
 800986c:	080098d3 	.word	0x080098d3
 8009870:	080098bf 	.word	0x080098bf
 8009874:	080098d3 	.word	0x080098d3
 8009878:	08009897 	.word	0x08009897
 800987c:	0800988d 	.word	0x0800988d
 8009880:	080098d3 	.word	0x080098d3
 8009884:	080098ab 	.word	0x080098ab
 8009888:	080098a1 	.word	0x080098a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f9dc 	bl	8009c4c <USBD_GetDescriptor>
          break;
 8009894:	e022      	b.n	80098dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fb3f 	bl	8009f1c <USBD_SetAddress>
          break;
 800989e:	e01d      	b.n	80098dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fb7e 	bl	8009fa4 <USBD_SetConfig>
          break;
 80098a8:	e018      	b.n	80098dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fc07 	bl	800a0c0 <USBD_GetConfig>
          break;
 80098b2:	e013      	b.n	80098dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fc37 	bl	800a12a <USBD_GetStatus>
          break;
 80098bc:	e00e      	b.n	80098dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fc65 	bl	800a190 <USBD_SetFeature>
          break;
 80098c6:	e009      	b.n	80098dc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fc74 	bl	800a1b8 <USBD_ClrFeature>
          break;
 80098d0:	e004      	b.n	80098dc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fccc 	bl	800a272 <USBD_CtlError>
          break;
 80098da:	bf00      	nop
      }
      break;
 80098dc:	e004      	b.n	80098e8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80098de:	6839      	ldr	r1, [r7, #0]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fcc6 	bl	800a272 <USBD_CtlError>
      break;
 80098e6:	bf00      	nop
  }

  return ret;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop

080098f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800990a:	2b40      	cmp	r3, #64	; 0x40
 800990c:	d005      	beq.n	800991a <USBD_StdItfReq+0x26>
 800990e:	2b40      	cmp	r3, #64	; 0x40
 8009910:	d82e      	bhi.n	8009970 <USBD_StdItfReq+0x7c>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <USBD_StdItfReq+0x26>
 8009916:	2b20      	cmp	r3, #32
 8009918:	d12a      	bne.n	8009970 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009920:	3b01      	subs	r3, #1
 8009922:	2b02      	cmp	r3, #2
 8009924:	d81d      	bhi.n	8009962 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	889b      	ldrh	r3, [r3, #4]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b01      	cmp	r3, #1
 800992e:	d813      	bhi.n	8009958 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	4798      	blx	r3
 800993e:	4603      	mov	r3, r0
 8009940:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	88db      	ldrh	r3, [r3, #6]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d110      	bne.n	800996c <USBD_StdItfReq+0x78>
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10d      	bne.n	800996c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fd56 	bl	800a402 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009956:	e009      	b.n	800996c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fc89 	bl	800a272 <USBD_CtlError>
          break;
 8009960:	e004      	b.n	800996c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fc84 	bl	800a272 <USBD_CtlError>
          break;
 800996a:	e000      	b.n	800996e <USBD_StdItfReq+0x7a>
          break;
 800996c:	bf00      	nop
      }
      break;
 800996e:	e004      	b.n	800997a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fc7d 	bl	800a272 <USBD_CtlError>
      break;
 8009978:	bf00      	nop
  }

  return USBD_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	889b      	ldrh	r3, [r3, #4]
 8009996:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099a0:	2b40      	cmp	r3, #64	; 0x40
 80099a2:	d007      	beq.n	80099b4 <USBD_StdEPReq+0x30>
 80099a4:	2b40      	cmp	r3, #64	; 0x40
 80099a6:	f200 8146 	bhi.w	8009c36 <USBD_StdEPReq+0x2b2>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <USBD_StdEPReq+0x40>
 80099ae:	2b20      	cmp	r3, #32
 80099b0:	f040 8141 	bne.w	8009c36 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	4798      	blx	r3
      break;
 80099c2:	e13d      	b.n	8009c40 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099cc:	2b20      	cmp	r3, #32
 80099ce:	d10a      	bne.n	80099e6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	e12d      	b.n	8009c42 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d007      	beq.n	80099fe <USBD_StdEPReq+0x7a>
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	f300 811b 	bgt.w	8009c2a <USBD_StdEPReq+0x2a6>
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d072      	beq.n	8009ade <USBD_StdEPReq+0x15a>
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d03a      	beq.n	8009a72 <USBD_StdEPReq+0xee>
 80099fc:	e115      	b.n	8009c2a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d002      	beq.n	8009a0e <USBD_StdEPReq+0x8a>
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d015      	beq.n	8009a38 <USBD_StdEPReq+0xb4>
 8009a0c:	e02b      	b.n	8009a66 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00c      	beq.n	8009a2e <USBD_StdEPReq+0xaa>
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	2b80      	cmp	r3, #128	; 0x80
 8009a18:	d009      	beq.n	8009a2e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 ffde 	bl	800a9e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009a24:	2180      	movs	r1, #128	; 0x80
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 ffda 	bl	800a9e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a2c:	e020      	b.n	8009a70 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fc1e 	bl	800a272 <USBD_CtlError>
              break;
 8009a36:	e01b      	b.n	8009a70 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	885b      	ldrh	r3, [r3, #2]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10e      	bne.n	8009a5e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00b      	beq.n	8009a5e <USBD_StdEPReq+0xda>
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	2b80      	cmp	r3, #128	; 0x80
 8009a4a:	d008      	beq.n	8009a5e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	88db      	ldrh	r3, [r3, #6]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 ffc1 	bl	800a9e0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fccf 	bl	800a402 <USBD_CtlSendStatus>

              break;
 8009a64:	e004      	b.n	8009a70 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fc02 	bl	800a272 <USBD_CtlError>
              break;
 8009a6e:	bf00      	nop
          }
          break;
 8009a70:	e0e0      	b.n	8009c34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d002      	beq.n	8009a82 <USBD_StdEPReq+0xfe>
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d015      	beq.n	8009aac <USBD_StdEPReq+0x128>
 8009a80:	e026      	b.n	8009ad0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00c      	beq.n	8009aa2 <USBD_StdEPReq+0x11e>
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	2b80      	cmp	r3, #128	; 0x80
 8009a8c:	d009      	beq.n	8009aa2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009a8e:	7bbb      	ldrb	r3, [r7, #14]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 ffa4 	bl	800a9e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009a98:	2180      	movs	r1, #128	; 0x80
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 ffa0 	bl	800a9e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009aa0:	e01c      	b.n	8009adc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fbe4 	bl	800a272 <USBD_CtlError>
              break;
 8009aaa:	e017      	b.n	8009adc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	885b      	ldrh	r3, [r3, #2]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d112      	bne.n	8009ada <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d004      	beq.n	8009ac8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 ffab 	bl	800aa1e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fc9a 	bl	800a402 <USBD_CtlSendStatus>
              }
              break;
 8009ace:	e004      	b.n	8009ada <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fbcd 	bl	800a272 <USBD_CtlError>
              break;
 8009ad8:	e000      	b.n	8009adc <USBD_StdEPReq+0x158>
              break;
 8009ada:	bf00      	nop
          }
          break;
 8009adc:	e0aa      	b.n	8009c34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d002      	beq.n	8009aee <USBD_StdEPReq+0x16a>
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d032      	beq.n	8009b52 <USBD_StdEPReq+0x1ce>
 8009aec:	e097      	b.n	8009c1e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d007      	beq.n	8009b04 <USBD_StdEPReq+0x180>
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	2b80      	cmp	r3, #128	; 0x80
 8009af8:	d004      	beq.n	8009b04 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fbb8 	bl	800a272 <USBD_CtlError>
                break;
 8009b02:	e091      	b.n	8009c28 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	da0b      	bge.n	8009b24 <USBD_StdEPReq+0x1a0>
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	3310      	adds	r3, #16
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	4413      	add	r3, r2
 8009b20:	3304      	adds	r3, #4
 8009b22:	e00b      	b.n	8009b3c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	4413      	add	r3, r2
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2200      	movs	r2, #0
 8009b42:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	2202      	movs	r2, #2
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fbfb 	bl	800a346 <USBD_CtlSendData>
              break;
 8009b50:	e06a      	b.n	8009c28 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	da11      	bge.n	8009b7e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	f003 020f 	and.w	r2, r3, #15
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3318      	adds	r3, #24
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d117      	bne.n	8009ba4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fb7b 	bl	800a272 <USBD_CtlError>
                  break;
 8009b7c:	e054      	b.n	8009c28 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	f003 020f 	and.w	r2, r3, #15
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d104      	bne.n	8009ba4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fb68 	bl	800a272 <USBD_CtlError>
                  break;
 8009ba2:	e041      	b.n	8009c28 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	da0b      	bge.n	8009bc4 <USBD_StdEPReq+0x240>
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	4413      	add	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	3310      	adds	r3, #16
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	e00b      	b.n	8009bdc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
 8009bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	4413      	add	r3, r2
 8009bda:	3304      	adds	r3, #4
 8009bdc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <USBD_StdEPReq+0x266>
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	2b80      	cmp	r3, #128	; 0x80
 8009be8:	d103      	bne.n	8009bf2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2200      	movs	r2, #0
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	e00e      	b.n	8009c10 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 ff30 	bl	800aa5c <USBD_LL_IsStallEP>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2201      	movs	r2, #1
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	e002      	b.n	8009c10 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	2202      	movs	r2, #2
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fb95 	bl	800a346 <USBD_CtlSendData>
              break;
 8009c1c:	e004      	b.n	8009c28 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fb26 	bl	800a272 <USBD_CtlError>
              break;
 8009c26:	bf00      	nop
          }
          break;
 8009c28:	e004      	b.n	8009c34 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fb20 	bl	800a272 <USBD_CtlError>
          break;
 8009c32:	bf00      	nop
      }
      break;
 8009c34:	e004      	b.n	8009c40 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fb1a 	bl	800a272 <USBD_CtlError>
      break;
 8009c3e:	bf00      	nop
  }

  return ret;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c56:	2300      	movs	r3, #0
 8009c58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	885b      	ldrh	r3, [r3, #2]
 8009c66:	0a1b      	lsrs	r3, r3, #8
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	2b06      	cmp	r3, #6
 8009c6e:	f200 8128 	bhi.w	8009ec2 <USBD_GetDescriptor+0x276>
 8009c72:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <USBD_GetDescriptor+0x2c>)
 8009c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009cad 	.word	0x08009cad
 8009c80:	08009ced 	.word	0x08009ced
 8009c84:	08009ec3 	.word	0x08009ec3
 8009c88:	08009ec3 	.word	0x08009ec3
 8009c8c:	08009e63 	.word	0x08009e63
 8009c90:	08009e8f 	.word	0x08009e8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	7c12      	ldrb	r2, [r2, #16]
 8009ca0:	f107 0108 	add.w	r1, r7, #8
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	4798      	blx	r3
 8009ca8:	60f8      	str	r0, [r7, #12]
      break;
 8009caa:	e112      	b.n	8009ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7c1b      	ldrb	r3, [r3, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10d      	bne.n	8009cd0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbc:	f107 0208 	add.w	r2, r7, #8
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	4798      	blx	r3
 8009cc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	2202      	movs	r2, #2
 8009ccc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009cce:	e100      	b.n	8009ed2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd8:	f107 0208 	add.w	r2, r7, #8
 8009cdc:	4610      	mov	r0, r2
 8009cde:	4798      	blx	r3
 8009ce0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	701a      	strb	r2, [r3, #0]
      break;
 8009cea:	e0f2      	b.n	8009ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	885b      	ldrh	r3, [r3, #2]
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	2b05      	cmp	r3, #5
 8009cf4:	f200 80ac 	bhi.w	8009e50 <USBD_GetDescriptor+0x204>
 8009cf8:	a201      	add	r2, pc, #4	; (adr r2, 8009d00 <USBD_GetDescriptor+0xb4>)
 8009cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfe:	bf00      	nop
 8009d00:	08009d19 	.word	0x08009d19
 8009d04:	08009d4d 	.word	0x08009d4d
 8009d08:	08009d81 	.word	0x08009d81
 8009d0c:	08009db5 	.word	0x08009db5
 8009d10:	08009de9 	.word	0x08009de9
 8009d14:	08009e1d 	.word	0x08009e1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00b      	beq.n	8009d3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	7c12      	ldrb	r2, [r2, #16]
 8009d30:	f107 0108 	add.w	r1, r7, #8
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
 8009d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d3a:	e091      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fa97 	bl	800a272 <USBD_CtlError>
            err++;
 8009d44:	7afb      	ldrb	r3, [r7, #11]
 8009d46:	3301      	adds	r3, #1
 8009d48:	72fb      	strb	r3, [r7, #11]
          break;
 8009d4a:	e089      	b.n	8009e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00b      	beq.n	8009d70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	7c12      	ldrb	r2, [r2, #16]
 8009d64:	f107 0108 	add.w	r1, r7, #8
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d6e:	e077      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fa7d 	bl	800a272 <USBD_CtlError>
            err++;
 8009d78:	7afb      	ldrb	r3, [r7, #11]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d7e:	e06f      	b.n	8009e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	7c12      	ldrb	r2, [r2, #16]
 8009d98:	f107 0108 	add.w	r1, r7, #8
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4798      	blx	r3
 8009da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009da2:	e05d      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fa63 	bl	800a272 <USBD_CtlError>
            err++;
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	3301      	adds	r3, #1
 8009db0:	72fb      	strb	r3, [r7, #11]
          break;
 8009db2:	e055      	b.n	8009e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00b      	beq.n	8009dd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	7c12      	ldrb	r2, [r2, #16]
 8009dcc:	f107 0108 	add.w	r1, r7, #8
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
 8009dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dd6:	e043      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa49 	bl	800a272 <USBD_CtlError>
            err++;
 8009de0:	7afb      	ldrb	r3, [r7, #11]
 8009de2:	3301      	adds	r3, #1
 8009de4:	72fb      	strb	r3, [r7, #11]
          break;
 8009de6:	e03b      	b.n	8009e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00b      	beq.n	8009e0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	7c12      	ldrb	r2, [r2, #16]
 8009e00:	f107 0108 	add.w	r1, r7, #8
 8009e04:	4610      	mov	r0, r2
 8009e06:	4798      	blx	r3
 8009e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e0a:	e029      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa2f 	bl	800a272 <USBD_CtlError>
            err++;
 8009e14:	7afb      	ldrb	r3, [r7, #11]
 8009e16:	3301      	adds	r3, #1
 8009e18:	72fb      	strb	r3, [r7, #11]
          break;
 8009e1a:	e021      	b.n	8009e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00b      	beq.n	8009e40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7c12      	ldrb	r2, [r2, #16]
 8009e34:	f107 0108 	add.w	r1, r7, #8
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e3e:	e00f      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa15 	bl	800a272 <USBD_CtlError>
            err++;
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e4e:	e007      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fa0d 	bl	800a272 <USBD_CtlError>
          err++;
 8009e58:	7afb      	ldrb	r3, [r7, #11]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009e5e:	e038      	b.n	8009ed2 <USBD_GetDescriptor+0x286>
 8009e60:	e037      	b.n	8009ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	7c1b      	ldrb	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d109      	bne.n	8009e7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e72:	f107 0208 	add.w	r2, r7, #8
 8009e76:	4610      	mov	r0, r2
 8009e78:	4798      	blx	r3
 8009e7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e7c:	e029      	b.n	8009ed2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f9f6 	bl	800a272 <USBD_CtlError>
        err++;
 8009e86:	7afb      	ldrb	r3, [r7, #11]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e8c:	e021      	b.n	8009ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	7c1b      	ldrb	r3, [r3, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10d      	bne.n	8009eb2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9e:	f107 0208 	add.w	r2, r7, #8
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	4798      	blx	r3
 8009ea6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	2207      	movs	r2, #7
 8009eae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009eb0:	e00f      	b.n	8009ed2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f9dc 	bl	800a272 <USBD_CtlError>
        err++;
 8009eba:	7afb      	ldrb	r3, [r7, #11]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8009ec0:	e007      	b.n	8009ed2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f9d4 	bl	800a272 <USBD_CtlError>
      err++;
 8009eca:	7afb      	ldrb	r3, [r7, #11]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	72fb      	strb	r3, [r7, #11]
      break;
 8009ed0:	bf00      	nop
  }

  if (err != 0U)
 8009ed2:	7afb      	ldrb	r3, [r7, #11]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d11c      	bne.n	8009f12 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009ed8:	893b      	ldrh	r3, [r7, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d011      	beq.n	8009f02 <USBD_GetDescriptor+0x2b6>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	88db      	ldrh	r3, [r3, #6]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00d      	beq.n	8009f02 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	88da      	ldrh	r2, [r3, #6]
 8009eea:	893b      	ldrh	r3, [r7, #8]
 8009eec:	4293      	cmp	r3, r2
 8009eee:	bf28      	it	cs
 8009ef0:	4613      	movcs	r3, r2
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ef6:	893b      	ldrh	r3, [r7, #8]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	68f9      	ldr	r1, [r7, #12]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fa22 	bl	800a346 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	88db      	ldrh	r3, [r3, #6]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fa79 	bl	800a402 <USBD_CtlSendStatus>
 8009f10:	e000      	b.n	8009f14 <USBD_GetDescriptor+0x2c8>
    return;
 8009f12:	bf00      	nop
    }
  }
}
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop

08009f1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	889b      	ldrh	r3, [r3, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d130      	bne.n	8009f90 <USBD_SetAddress+0x74>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	88db      	ldrh	r3, [r3, #6]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d12c      	bne.n	8009f90 <USBD_SetAddress+0x74>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	885b      	ldrh	r3, [r3, #2]
 8009f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8009f3c:	d828      	bhi.n	8009f90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	885b      	ldrh	r3, [r3, #2]
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d104      	bne.n	8009f5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f98b 	bl	800a272 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f5c:	e01d      	b.n	8009f9a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	7bfa      	ldrb	r2, [r7, #15]
 8009f62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	4619      	mov	r1, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fda2 	bl	800aab4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fa46 	bl	800a402 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d004      	beq.n	8009f86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f84:	e009      	b.n	8009f9a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f8e:	e004      	b.n	8009f9a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f96d 	bl	800a272 <USBD_CtlError>
  }
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	885b      	ldrh	r3, [r3, #2]
 8009fb2:	b2da      	uxtb	r2, r3
 8009fb4:	4b41      	ldr	r3, [pc, #260]	; (800a0bc <USBD_SetConfig+0x118>)
 8009fb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009fb8:	4b40      	ldr	r3, [pc, #256]	; (800a0bc <USBD_SetConfig+0x118>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d904      	bls.n	8009fca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f955 	bl	800a272 <USBD_CtlError>
 8009fc8:	e075      	b.n	800a0b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d002      	beq.n	8009fda <USBD_SetConfig+0x36>
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	d023      	beq.n	800a020 <USBD_SetConfig+0x7c>
 8009fd8:	e062      	b.n	800a0a0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009fda:	4b38      	ldr	r3, [pc, #224]	; (800a0bc <USBD_SetConfig+0x118>)
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d01a      	beq.n	800a018 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009fe2:	4b36      	ldr	r3, [pc, #216]	; (800a0bc <USBD_SetConfig+0x118>)
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2203      	movs	r2, #3
 8009ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ff4:	4b31      	ldr	r3, [pc, #196]	; (800a0bc <USBD_SetConfig+0x118>)
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff f9e8 	bl	80093d0 <USBD_SetClassConfig>
 800a000:	4603      	mov	r3, r0
 800a002:	2b02      	cmp	r3, #2
 800a004:	d104      	bne.n	800a010 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f932 	bl	800a272 <USBD_CtlError>
            return;
 800a00e:	e052      	b.n	800a0b6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f9f6 	bl	800a402 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a016:	e04e      	b.n	800a0b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f9f2 	bl	800a402 <USBD_CtlSendStatus>
        break;
 800a01e:	e04a      	b.n	800a0b6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a020:	4b26      	ldr	r3, [pc, #152]	; (800a0bc <USBD_SetConfig+0x118>)
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d112      	bne.n	800a04e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2202      	movs	r2, #2
 800a02c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a030:	4b22      	ldr	r3, [pc, #136]	; (800a0bc <USBD_SetConfig+0x118>)
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	461a      	mov	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a03a:	4b20      	ldr	r3, [pc, #128]	; (800a0bc <USBD_SetConfig+0x118>)
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7ff f9e4 	bl	800940e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f9db 	bl	800a402 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a04c:	e033      	b.n	800a0b6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a04e:	4b1b      	ldr	r3, [pc, #108]	; (800a0bc <USBD_SetConfig+0x118>)
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d01d      	beq.n	800a098 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	b2db      	uxtb	r3, r3
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7ff f9d2 	bl	800940e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a06a:	4b14      	ldr	r3, [pc, #80]	; (800a0bc <USBD_SetConfig+0x118>)
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a074:	4b11      	ldr	r3, [pc, #68]	; (800a0bc <USBD_SetConfig+0x118>)
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	4619      	mov	r1, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff f9a8 	bl	80093d0 <USBD_SetClassConfig>
 800a080:	4603      	mov	r3, r0
 800a082:	2b02      	cmp	r3, #2
 800a084:	d104      	bne.n	800a090 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f8f2 	bl	800a272 <USBD_CtlError>
            return;
 800a08e:	e012      	b.n	800a0b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f9b6 	bl	800a402 <USBD_CtlSendStatus>
        break;
 800a096:	e00e      	b.n	800a0b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f9b2 	bl	800a402 <USBD_CtlSendStatus>
        break;
 800a09e:	e00a      	b.n	800a0b6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f8e5 	bl	800a272 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a0a8:	4b04      	ldr	r3, [pc, #16]	; (800a0bc <USBD_SetConfig+0x118>)
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7ff f9ad 	bl	800940e <USBD_ClrClassConfig>
        break;
 800a0b4:	bf00      	nop
    }
  }
}
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	20000398 	.word	0x20000398

0800a0c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	88db      	ldrh	r3, [r3, #6]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d004      	beq.n	800a0dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f8cc 	bl	800a272 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a0da:	e022      	b.n	800a122 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	dc02      	bgt.n	800a0ec <USBD_GetConfig+0x2c>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	dc03      	bgt.n	800a0f2 <USBD_GetConfig+0x32>
 800a0ea:	e015      	b.n	800a118 <USBD_GetConfig+0x58>
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d00b      	beq.n	800a108 <USBD_GetConfig+0x48>
 800a0f0:	e012      	b.n	800a118 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f920 	bl	800a346 <USBD_CtlSendData>
        break;
 800a106:	e00c      	b.n	800a122 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3304      	adds	r3, #4
 800a10c:	2201      	movs	r2, #1
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f918 	bl	800a346 <USBD_CtlSendData>
        break;
 800a116:	e004      	b.n	800a122 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f8a9 	bl	800a272 <USBD_CtlError>
        break;
 800a120:	bf00      	nop
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b082      	sub	sp, #8
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13a:	3b01      	subs	r3, #1
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d81e      	bhi.n	800a17e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	88db      	ldrh	r3, [r3, #6]
 800a144:	2b02      	cmp	r3, #2
 800a146:	d004      	beq.n	800a152 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f891 	bl	800a272 <USBD_CtlError>
        break;
 800a150:	e01a      	b.n	800a188 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d005      	beq.n	800a16e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	f043 0202 	orr.w	r2, r3, #2
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	330c      	adds	r3, #12
 800a172:	2202      	movs	r2, #2
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f8e5 	bl	800a346 <USBD_CtlSendData>
      break;
 800a17c:	e004      	b.n	800a188 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f876 	bl	800a272 <USBD_CtlError>
      break;
 800a186:	bf00      	nop
  }
}
 800a188:	bf00      	nop
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	885b      	ldrh	r3, [r3, #2]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d106      	bne.n	800a1b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f929 	bl	800a402 <USBD_CtlSendStatus>
  }
}
 800a1b0:	bf00      	nop
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d80b      	bhi.n	800a1e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	885b      	ldrh	r3, [r3, #2]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d10c      	bne.n	800a1f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f90f 	bl	800a402 <USBD_CtlSendStatus>
      }
      break;
 800a1e4:	e004      	b.n	800a1f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f842 	bl	800a272 <USBD_CtlError>
      break;
 800a1ee:	e000      	b.n	800a1f2 <USBD_ClrFeature+0x3a>
      break;
 800a1f0:	bf00      	nop
  }
}
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b083      	sub	sp, #12
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	781a      	ldrb	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	785a      	ldrb	r2, [r3, #1]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	3302      	adds	r3, #2
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	3303      	adds	r3, #3
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	b29b      	uxth	r3, r3
 800a224:	021b      	lsls	r3, r3, #8
 800a226:	b29b      	uxth	r3, r3
 800a228:	4413      	add	r3, r2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	3304      	adds	r3, #4
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b29a      	uxth	r2, r3
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	3305      	adds	r3, #5
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	b29b      	uxth	r3, r3
 800a240:	021b      	lsls	r3, r3, #8
 800a242:	b29b      	uxth	r3, r3
 800a244:	4413      	add	r3, r2
 800a246:	b29a      	uxth	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	3306      	adds	r3, #6
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	b29a      	uxth	r2, r3
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	3307      	adds	r3, #7
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	021b      	lsls	r3, r3, #8
 800a25e:	b29b      	uxth	r3, r3
 800a260:	4413      	add	r3, r2
 800a262:	b29a      	uxth	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	80da      	strh	r2, [r3, #6]

}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bc80      	pop	{r7}
 800a270:	4770      	bx	lr

0800a272 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b082      	sub	sp, #8
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a27c:	2180      	movs	r1, #128	; 0x80
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fbae 	bl	800a9e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a284:	2100      	movs	r1, #0
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fbaa 	bl	800a9e0 <USBD_LL_StallEP>
}
 800a28c:	bf00      	nop
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d032      	beq.n	800a310 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 f834 	bl	800a318 <USBD_GetLen>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	75fa      	strb	r2, [r7, #23]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	7812      	ldrb	r2, [r2, #0]
 800a2ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	75fa      	strb	r2, [r7, #23]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4413      	add	r3, r2
 800a2dc:	2203      	movs	r2, #3
 800a2de:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a2e0:	e012      	b.n	800a308 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	1c5a      	adds	r2, r3, #1
 800a2e6:	60fa      	str	r2, [r7, #12]
 800a2e8:	7dfa      	ldrb	r2, [r7, #23]
 800a2ea:	1c51      	adds	r1, r2, #1
 800a2ec:	75f9      	strb	r1, [r7, #23]
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	75fa      	strb	r2, [r7, #23]
 800a2fe:	461a      	mov	r2, r3
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	4413      	add	r3, r2
 800a304:	2200      	movs	r2, #0
 800a306:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e8      	bne.n	800a2e2 <USBD_GetString+0x4e>
    }
  }
}
 800a310:	bf00      	nop
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a324:	e005      	b.n	800a332 <USBD_GetLen+0x1a>
  {
    len++;
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	3301      	adds	r3, #1
 800a32a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3301      	adds	r3, #1
 800a330:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1f5      	bne.n	800a326 <USBD_GetLen+0xe>
  }

  return len;
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	bc80      	pop	{r7}
 800a344:	4770      	bx	lr

0800a346 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	4613      	mov	r3, r2
 800a352:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2202      	movs	r2, #2
 800a358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a35c:	88fa      	ldrh	r2, [r7, #6]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a362:	88fa      	ldrh	r2, [r7, #6]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a368:	88fb      	ldrh	r3, [r7, #6]
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	2100      	movs	r1, #0
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f000 fbbf 	bl	800aaf2 <USBD_LL_Transmit>

  return USBD_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	60f8      	str	r0, [r7, #12]
 800a386:	60b9      	str	r1, [r7, #8]
 800a388:	4613      	mov	r3, r2
 800a38a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a38c:	88fb      	ldrh	r3, [r7, #6]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	2100      	movs	r1, #0
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 fbad 	bl	800aaf2 <USBD_LL_Transmit>

  return USBD_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	60f8      	str	r0, [r7, #12]
 800a3aa:	60b9      	str	r1, [r7, #8]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2203      	movs	r2, #3
 800a3b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a3b8:	88fa      	ldrh	r2, [r7, #6]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a3c0:	88fa      	ldrh	r2, [r7, #6]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3c8:	88fb      	ldrh	r3, [r7, #6]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 fbb2 	bl	800ab38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3ec:	88fb      	ldrh	r3, [r7, #6]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 fba0 	bl	800ab38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2204      	movs	r2, #4
 800a40e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a412:	2300      	movs	r3, #0
 800a414:	2200      	movs	r2, #0
 800a416:	2100      	movs	r1, #0
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fb6a 	bl	800aaf2 <USBD_LL_Transmit>

  return USBD_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2205      	movs	r2, #5
 800a434:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a438:	2300      	movs	r3, #0
 800a43a:	2200      	movs	r2, #0
 800a43c:	2100      	movs	r1, #0
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fb7a 	bl	800ab38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
	...

0800a450 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a454:	2200      	movs	r2, #0
 800a456:	4912      	ldr	r1, [pc, #72]	; (800a4a0 <MX_USB_DEVICE_Init+0x50>)
 800a458:	4812      	ldr	r0, [pc, #72]	; (800a4a4 <MX_USB_DEVICE_Init+0x54>)
 800a45a:	f7fe ff5f 	bl	800931c <USBD_Init>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a464:	f7f7 f896 	bl	8001594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a468:	490f      	ldr	r1, [pc, #60]	; (800a4a8 <MX_USB_DEVICE_Init+0x58>)
 800a46a:	480e      	ldr	r0, [pc, #56]	; (800a4a4 <MX_USB_DEVICE_Init+0x54>)
 800a46c:	f7fe ff81 	bl	8009372 <USBD_RegisterClass>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a476:	f7f7 f88d 	bl	8001594 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a47a:	490c      	ldr	r1, [pc, #48]	; (800a4ac <MX_USB_DEVICE_Init+0x5c>)
 800a47c:	4809      	ldr	r0, [pc, #36]	; (800a4a4 <MX_USB_DEVICE_Init+0x54>)
 800a47e:	f7fe ff37 	bl	80092f0 <USBD_CUSTOM_HID_RegisterInterface>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a488:	f7f7 f884 	bl	8001594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a48c:	4805      	ldr	r0, [pc, #20]	; (800a4a4 <MX_USB_DEVICE_Init+0x54>)
 800a48e:	f7fe ff89 	bl	80093a4 <USBD_Start>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a498:	f7f7 f87c 	bl	8001594 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a49c:	bf00      	nop
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	2000011c 	.word	0x2000011c
 800a4a4:	2000039c 	.word	0x2000039c
 800a4a8:	20000018 	.word	0x20000018
 800a4ac:	2000010c 	.word	0x2000010c

0800a4b0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a4b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bc80      	pop	{r7}
 800a4bc:	4770      	bx	lr

0800a4be <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a4c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bc80      	pop	{r7}
 800a4ca:	4770      	bx	lr

0800a4cc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800a4d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bc80      	pop	{r7}
 800a4de:	4770      	bx	lr

0800a4e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	6039      	str	r1, [r7, #0]
 800a4ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2212      	movs	r2, #18
 800a4f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4f2:	4b03      	ldr	r3, [pc, #12]	; (800a500 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bc80      	pop	{r7}
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20000138 	.word	0x20000138

0800a504 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	6039      	str	r1, [r7, #0]
 800a50e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	2204      	movs	r2, #4
 800a514:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a516:	4b03      	ldr	r3, [pc, #12]	; (800a524 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a518:	4618      	mov	r0, r3
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bc80      	pop	{r7}
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	2000014c 	.word	0x2000014c

0800a528 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	6039      	str	r1, [r7, #0]
 800a532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a534:	79fb      	ldrb	r3, [r7, #7]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d105      	bne.n	800a546 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	4907      	ldr	r1, [pc, #28]	; (800a55c <USBD_FS_ProductStrDescriptor+0x34>)
 800a53e:	4808      	ldr	r0, [pc, #32]	; (800a560 <USBD_FS_ProductStrDescriptor+0x38>)
 800a540:	f7ff fea8 	bl	800a294 <USBD_GetString>
 800a544:	e004      	b.n	800a550 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	4904      	ldr	r1, [pc, #16]	; (800a55c <USBD_FS_ProductStrDescriptor+0x34>)
 800a54a:	4805      	ldr	r0, [pc, #20]	; (800a560 <USBD_FS_ProductStrDescriptor+0x38>)
 800a54c:	f7ff fea2 	bl	800a294 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a550:	4b02      	ldr	r3, [pc, #8]	; (800a55c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	20000660 	.word	0x20000660
 800a560:	0800c250 	.word	0x0800c250

0800a564 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	6039      	str	r1, [r7, #0]
 800a56e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	4904      	ldr	r1, [pc, #16]	; (800a584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a574:	4804      	ldr	r0, [pc, #16]	; (800a588 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a576:	f7ff fe8d 	bl	800a294 <USBD_GetString>
  return USBD_StrDesc;
 800a57a:	4b02      	ldr	r3, [pc, #8]	; (800a584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20000660 	.word	0x20000660
 800a588:	0800c260 	.word	0x0800c260

0800a58c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	6039      	str	r1, [r7, #0]
 800a596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	221a      	movs	r2, #26
 800a59c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a59e:	f000 f843 	bl	800a628 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5a2:	4b02      	ldr	r3, [pc, #8]	; (800a5ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	20000150 	.word	0x20000150

0800a5b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	6039      	str	r1, [r7, #0]
 800a5ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a5bc:	79fb      	ldrb	r3, [r7, #7]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d105      	bne.n	800a5ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	4907      	ldr	r1, [pc, #28]	; (800a5e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5c6:	4808      	ldr	r0, [pc, #32]	; (800a5e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5c8:	f7ff fe64 	bl	800a294 <USBD_GetString>
 800a5cc:	e004      	b.n	800a5d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	4904      	ldr	r1, [pc, #16]	; (800a5e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5d2:	4805      	ldr	r0, [pc, #20]	; (800a5e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5d4:	f7ff fe5e 	bl	800a294 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5d8:	4b02      	ldr	r3, [pc, #8]	; (800a5e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20000660 	.word	0x20000660
 800a5e8:	0800c26c 	.word	0x0800c26c

0800a5ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	6039      	str	r1, [r7, #0]
 800a5f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d105      	bne.n	800a60a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	4907      	ldr	r1, [pc, #28]	; (800a620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a602:	4808      	ldr	r0, [pc, #32]	; (800a624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a604:	f7ff fe46 	bl	800a294 <USBD_GetString>
 800a608:	e004      	b.n	800a614 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	4904      	ldr	r1, [pc, #16]	; (800a620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a60e:	4805      	ldr	r0, [pc, #20]	; (800a624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a610:	f7ff fe40 	bl	800a294 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a614:	4b02      	ldr	r3, [pc, #8]	; (800a620 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a616:	4618      	mov	r0, r3
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	20000660 	.word	0x20000660
 800a624:	0800c280 	.word	0x0800c280

0800a628 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a62e:	4b0f      	ldr	r3, [pc, #60]	; (800a66c <Get_SerialNum+0x44>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a634:	4b0e      	ldr	r3, [pc, #56]	; (800a670 <Get_SerialNum+0x48>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a63a:	4b0e      	ldr	r3, [pc, #56]	; (800a674 <Get_SerialNum+0x4c>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4413      	add	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d009      	beq.n	800a662 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a64e:	2208      	movs	r2, #8
 800a650:	4909      	ldr	r1, [pc, #36]	; (800a678 <Get_SerialNum+0x50>)
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 f814 	bl	800a680 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a658:	2204      	movs	r2, #4
 800a65a:	4908      	ldr	r1, [pc, #32]	; (800a67c <Get_SerialNum+0x54>)
 800a65c:	68b8      	ldr	r0, [r7, #8]
 800a65e:	f000 f80f 	bl	800a680 <IntToUnicode>
  }
}
 800a662:	bf00      	nop
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	1ffff7e8 	.word	0x1ffff7e8
 800a670:	1ffff7ec 	.word	0x1ffff7ec
 800a674:	1ffff7f0 	.word	0x1ffff7f0
 800a678:	20000152 	.word	0x20000152
 800a67c:	20000162 	.word	0x20000162

0800a680 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a680:	b480      	push	{r7}
 800a682:	b087      	sub	sp, #28
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	4613      	mov	r3, r2
 800a68c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a692:	2300      	movs	r3, #0
 800a694:	75fb      	strb	r3, [r7, #23]
 800a696:	e027      	b.n	800a6e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	0f1b      	lsrs	r3, r3, #28
 800a69c:	2b09      	cmp	r3, #9
 800a69e:	d80b      	bhi.n	800a6b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	0f1b      	lsrs	r3, r3, #28
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	440b      	add	r3, r1
 800a6b0:	3230      	adds	r2, #48	; 0x30
 800a6b2:	b2d2      	uxtb	r2, r2
 800a6b4:	701a      	strb	r2, [r3, #0]
 800a6b6:	e00a      	b.n	800a6ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	0f1b      	lsrs	r3, r3, #28
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	7dfb      	ldrb	r3, [r7, #23]
 800a6c0:	005b      	lsls	r3, r3, #1
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	440b      	add	r3, r1
 800a6c8:	3237      	adds	r2, #55	; 0x37
 800a6ca:	b2d2      	uxtb	r2, r2
 800a6cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	011b      	lsls	r3, r3, #4
 800a6d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	3301      	adds	r3, #1
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	4413      	add	r3, r2
 800a6de:	2200      	movs	r2, #0
 800a6e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a6e2:	7dfb      	ldrb	r3, [r7, #23]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	75fb      	strb	r3, [r7, #23]
 800a6e8:	7dfa      	ldrb	r2, [r7, #23]
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d3d3      	bcc.n	800a698 <IntToUnicode+0x18>
  }
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bc80      	pop	{r7}
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a0d      	ldr	r2, [pc, #52]	; (800a740 <HAL_PCD_MspInit+0x44>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d113      	bne.n	800a736 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a70e:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <HAL_PCD_MspInit+0x48>)
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	4a0c      	ldr	r2, [pc, #48]	; (800a744 <HAL_PCD_MspInit+0x48>)
 800a714:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a718:	61d3      	str	r3, [r2, #28]
 800a71a:	4b0a      	ldr	r3, [pc, #40]	; (800a744 <HAL_PCD_MspInit+0x48>)
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a726:	2200      	movs	r2, #0
 800a728:	2100      	movs	r1, #0
 800a72a:	2014      	movs	r0, #20
 800a72c:	f7f7 fef7 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a730:	2014      	movs	r0, #20
 800a732:	f7f7 ff10 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	40005c00 	.word	0x40005c00
 800a744:	40021000 	.word	0x40021000

0800a748 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a75c:	4619      	mov	r1, r3
 800a75e:	4610      	mov	r0, r2
 800a760:	f7fe fe68 	bl	8009434 <USBD_LL_SetupStage>
}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a77e:	78fa      	ldrb	r2, [r7, #3]
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	4613      	mov	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	00db      	lsls	r3, r3, #3
 800a78a:	440b      	add	r3, r1
 800a78c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	78fb      	ldrb	r3, [r7, #3]
 800a794:	4619      	mov	r1, r3
 800a796:	f7fe fe9a 	bl	80094ce <USBD_LL_DataOutStage>
}
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b082      	sub	sp, #8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a7b4:	78fa      	ldrb	r2, [r7, #3]
 800a7b6:	6879      	ldr	r1, [r7, #4]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	00db      	lsls	r3, r3, #3
 800a7c0:	440b      	add	r3, r1
 800a7c2:	333c      	adds	r3, #60	; 0x3c
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	78fb      	ldrb	r3, [r7, #3]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	f7fe fef1 	bl	80095b0 <USBD_LL_DataInStage>
}
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b082      	sub	sp, #8
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff f801 	bl	80097ec <USBD_LL_SOF>
}
 800a7ea:	bf00      	nop
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d001      	beq.n	800a80a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a806:	f7f6 fec5 	bl	8001594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a810:	7bfa      	ldrb	r2, [r7, #15]
 800a812:	4611      	mov	r1, r2
 800a814:	4618      	mov	r0, r3
 800a816:	f7fe ffb1 	bl	800977c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe ff6a 	bl	80096fa <USBD_LL_Reset>
}
 800a826:	bf00      	nop
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
	...

0800a830 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe ffab 	bl	800979a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d005      	beq.n	800a858 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a84c:	4b04      	ldr	r3, [pc, #16]	; (800a860 <HAL_PCD_SuspendCallback+0x30>)
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	4a03      	ldr	r2, [pc, #12]	; (800a860 <HAL_PCD_SuspendCallback+0x30>)
 800a852:	f043 0306 	orr.w	r3, r3, #6
 800a856:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a858:	bf00      	nop
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	e000ed00 	.word	0xe000ed00

0800a864 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe ffa5 	bl	80097c2 <USBD_LL_Resume>
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a888:	4a23      	ldr	r2, [pc, #140]	; (800a918 <USBD_LL_Init+0x98>)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a21      	ldr	r2, [pc, #132]	; (800a918 <USBD_LL_Init+0x98>)
 800a894:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a898:	4b1f      	ldr	r3, [pc, #124]	; (800a918 <USBD_LL_Init+0x98>)
 800a89a:	4a20      	ldr	r2, [pc, #128]	; (800a91c <USBD_LL_Init+0x9c>)
 800a89c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a89e:	4b1e      	ldr	r3, [pc, #120]	; (800a918 <USBD_LL_Init+0x98>)
 800a8a0:	2208      	movs	r2, #8
 800a8a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a8a4:	4b1c      	ldr	r3, [pc, #112]	; (800a918 <USBD_LL_Init+0x98>)
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a8aa:	4b1b      	ldr	r3, [pc, #108]	; (800a918 <USBD_LL_Init+0x98>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a8b0:	4b19      	ldr	r3, [pc, #100]	; (800a918 <USBD_LL_Init+0x98>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a8b6:	4b18      	ldr	r3, [pc, #96]	; (800a918 <USBD_LL_Init+0x98>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a8bc:	4816      	ldr	r0, [pc, #88]	; (800a918 <USBD_LL_Init+0x98>)
 800a8be:	f7f8 fcc1 	bl	8003244 <HAL_PCD_Init>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d001      	beq.n	800a8cc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a8c8:	f7f6 fe64 	bl	8001594 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8d2:	2318      	movs	r3, #24
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	f7fa f91e 	bl	8004b18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8e2:	2358      	movs	r3, #88	; 0x58
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2180      	movs	r1, #128	; 0x80
 800a8e8:	f7fa f916 	bl	8004b18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8f2:	2398      	movs	r3, #152	; 0x98
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	2181      	movs	r1, #129	; 0x81
 800a8f8:	f7fa f90e 	bl	8004b18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a902:	23d8      	movs	r3, #216	; 0xd8
 800a904:	2200      	movs	r2, #0
 800a906:	2101      	movs	r1, #1
 800a908:	f7fa f906 	bl	8004b18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000860 	.word	0x20000860
 800a91c:	40005c00 	.word	0x40005c00

0800a920 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a936:	4618      	mov	r0, r3
 800a938:	f7f8 fd8f 	bl	800345a <HAL_PCD_Start>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	4618      	mov	r0, r3
 800a944:	f000 f93c 	bl	800abc0 <USBD_Get_USB_Status>
 800a948:	4603      	mov	r3, r0
 800a94a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a94c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	4608      	mov	r0, r1
 800a960:	4611      	mov	r1, r2
 800a962:	461a      	mov	r2, r3
 800a964:	4603      	mov	r3, r0
 800a966:	70fb      	strb	r3, [r7, #3]
 800a968:	460b      	mov	r3, r1
 800a96a:	70bb      	strb	r3, [r7, #2]
 800a96c:	4613      	mov	r3, r2
 800a96e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a97e:	78bb      	ldrb	r3, [r7, #2]
 800a980:	883a      	ldrh	r2, [r7, #0]
 800a982:	78f9      	ldrb	r1, [r7, #3]
 800a984:	f7f8 ff07 	bl	8003796 <HAL_PCD_EP_Open>
 800a988:	4603      	mov	r3, r0
 800a98a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f916 	bl	800abc0 <USBD_Get_USB_Status>
 800a994:	4603      	mov	r3, r0
 800a996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a998:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9bc:	78fa      	ldrb	r2, [r7, #3]
 800a9be:	4611      	mov	r1, r2
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7f8 ff4e 	bl	8003862 <HAL_PCD_EP_Close>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 f8f7 	bl	800abc0 <USBD_Get_USB_Status>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9fa:	78fa      	ldrb	r2, [r7, #3]
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7f8 fff7 	bl	80039f2 <HAL_PCD_EP_SetStall>
 800aa04:	4603      	mov	r3, r0
 800aa06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 f8d8 	bl	800abc0 <USBD_Get_USB_Status>
 800aa10:	4603      	mov	r3, r0
 800aa12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa14:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa38:	78fa      	ldrb	r2, [r7, #3]
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7f9 f838 	bl	8003ab2 <HAL_PCD_EP_ClrStall>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 f8b9 	bl	800abc0 <USBD_Get_USB_Status>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	da0c      	bge.n	800aa92 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa7e:	68f9      	ldr	r1, [r7, #12]
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	4613      	mov	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	00db      	lsls	r3, r3, #3
 800aa8a:	440b      	add	r3, r1
 800aa8c:	3302      	adds	r3, #2
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	e00b      	b.n	800aaaa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa92:	78fb      	ldrb	r3, [r7, #3]
 800aa94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa98:	68f9      	ldr	r1, [r7, #12]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	00db      	lsls	r3, r3, #3
 800aaa2:	440b      	add	r3, r1
 800aaa4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aaa8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bc80      	pop	{r7}
 800aab2:	4770      	bx	lr

0800aab4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	460b      	mov	r3, r1
 800aabe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aace:	78fa      	ldrb	r2, [r7, #3]
 800aad0:	4611      	mov	r1, r2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7f8 fe3a 	bl	800374c <HAL_PCD_SetAddress>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 f86e 	bl	800abc0 <USBD_Get_USB_Status>
 800aae4:	4603      	mov	r3, r0
 800aae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b086      	sub	sp, #24
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	461a      	mov	r2, r3
 800aafe:	460b      	mov	r3, r1
 800ab00:	72fb      	strb	r3, [r7, #11]
 800ab02:	4613      	mov	r3, r2
 800ab04:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab14:	893b      	ldrh	r3, [r7, #8]
 800ab16:	7af9      	ldrb	r1, [r7, #11]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	f7f8 ff27 	bl	800396c <HAL_PCD_EP_Transmit>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 f84b 	bl	800abc0 <USBD_Get_USB_Status>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	607a      	str	r2, [r7, #4]
 800ab42:	461a      	mov	r2, r3
 800ab44:	460b      	mov	r3, r1
 800ab46:	72fb      	strb	r3, [r7, #11]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab5a:	893b      	ldrh	r3, [r7, #8]
 800ab5c:	7af9      	ldrb	r1, [r7, #11]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	f7f8 fec7 	bl	80038f2 <HAL_PCD_EP_Receive>
 800ab64:	4603      	mov	r3, r0
 800ab66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 f828 	bl	800abc0 <USBD_Get_USB_Status>
 800ab70:	4603      	mov	r3, r0
 800ab72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab74:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800ab88:	4b02      	ldr	r3, [pc, #8]	; (800ab94 <USBD_static_malloc+0x14>)
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bc80      	pop	{r7}
 800ab92:	4770      	bx	lr
 800ab94:	20000b4c 	.word	0x20000b4c

0800ab98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]

}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bc80      	pop	{r7}
 800aba8:	4770      	bx	lr

0800abaa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abaa:	b480      	push	{r7}
 800abac:	b083      	sub	sp, #12
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	460b      	mov	r3, r1
 800abb4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	bc80      	pop	{r7}
 800abbe:	4770      	bx	lr

0800abc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abce:	79fb      	ldrb	r3, [r7, #7]
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d817      	bhi.n	800ac04 <USBD_Get_USB_Status+0x44>
 800abd4:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <USBD_Get_USB_Status+0x1c>)
 800abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abda:	bf00      	nop
 800abdc:	0800abed 	.word	0x0800abed
 800abe0:	0800abf3 	.word	0x0800abf3
 800abe4:	0800abf9 	.word	0x0800abf9
 800abe8:	0800abff 	.word	0x0800abff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abec:	2300      	movs	r3, #0
 800abee:	73fb      	strb	r3, [r7, #15]
    break;
 800abf0:	e00b      	b.n	800ac0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abf2:	2302      	movs	r3, #2
 800abf4:	73fb      	strb	r3, [r7, #15]
    break;
 800abf6:	e008      	b.n	800ac0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abf8:	2301      	movs	r3, #1
 800abfa:	73fb      	strb	r3, [r7, #15]
    break;
 800abfc:	e005      	b.n	800ac0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abfe:	2302      	movs	r3, #2
 800ac00:	73fb      	strb	r3, [r7, #15]
    break;
 800ac02:	e002      	b.n	800ac0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac04:	2302      	movs	r3, #2
 800ac06:	73fb      	strb	r3, [r7, #15]
    break;
 800ac08:	bf00      	nop
  }
  return usb_status;
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bc80      	pop	{r7}
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop

0800ac18 <atoi>:
 800ac18:	220a      	movs	r2, #10
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	f000 b932 	b.w	800ae84 <strtol>

0800ac20 <__errno>:
 800ac20:	4b01      	ldr	r3, [pc, #4]	; (800ac28 <__errno+0x8>)
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	2000016c 	.word	0x2000016c

0800ac2c <__libc_init_array>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	2600      	movs	r6, #0
 800ac30:	4d0c      	ldr	r5, [pc, #48]	; (800ac64 <__libc_init_array+0x38>)
 800ac32:	4c0d      	ldr	r4, [pc, #52]	; (800ac68 <__libc_init_array+0x3c>)
 800ac34:	1b64      	subs	r4, r4, r5
 800ac36:	10a4      	asrs	r4, r4, #2
 800ac38:	42a6      	cmp	r6, r4
 800ac3a:	d109      	bne.n	800ac50 <__libc_init_array+0x24>
 800ac3c:	f001 fae8 	bl	800c210 <_init>
 800ac40:	2600      	movs	r6, #0
 800ac42:	4d0a      	ldr	r5, [pc, #40]	; (800ac6c <__libc_init_array+0x40>)
 800ac44:	4c0a      	ldr	r4, [pc, #40]	; (800ac70 <__libc_init_array+0x44>)
 800ac46:	1b64      	subs	r4, r4, r5
 800ac48:	10a4      	asrs	r4, r4, #2
 800ac4a:	42a6      	cmp	r6, r4
 800ac4c:	d105      	bne.n	800ac5a <__libc_init_array+0x2e>
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac54:	4798      	blx	r3
 800ac56:	3601      	adds	r6, #1
 800ac58:	e7ee      	b.n	800ac38 <__libc_init_array+0xc>
 800ac5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac5e:	4798      	blx	r3
 800ac60:	3601      	adds	r6, #1
 800ac62:	e7f2      	b.n	800ac4a <__libc_init_array+0x1e>
 800ac64:	0800c4f8 	.word	0x0800c4f8
 800ac68:	0800c4f8 	.word	0x0800c4f8
 800ac6c:	0800c4f8 	.word	0x0800c4f8
 800ac70:	0800c4fc 	.word	0x0800c4fc

0800ac74 <memset>:
 800ac74:	4603      	mov	r3, r0
 800ac76:	4402      	add	r2, r0
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d100      	bne.n	800ac7e <memset+0xa>
 800ac7c:	4770      	bx	lr
 800ac7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac82:	e7f9      	b.n	800ac78 <memset+0x4>

0800ac84 <siprintf>:
 800ac84:	b40e      	push	{r1, r2, r3}
 800ac86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac8a:	b500      	push	{lr}
 800ac8c:	b09c      	sub	sp, #112	; 0x70
 800ac8e:	ab1d      	add	r3, sp, #116	; 0x74
 800ac90:	9002      	str	r0, [sp, #8]
 800ac92:	9006      	str	r0, [sp, #24]
 800ac94:	9107      	str	r1, [sp, #28]
 800ac96:	9104      	str	r1, [sp, #16]
 800ac98:	4808      	ldr	r0, [pc, #32]	; (800acbc <siprintf+0x38>)
 800ac9a:	4909      	ldr	r1, [pc, #36]	; (800acc0 <siprintf+0x3c>)
 800ac9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aca0:	9105      	str	r1, [sp, #20]
 800aca2:	6800      	ldr	r0, [r0, #0]
 800aca4:	a902      	add	r1, sp, #8
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	f000 fa66 	bl	800b178 <_svfiprintf_r>
 800acac:	2200      	movs	r2, #0
 800acae:	9b02      	ldr	r3, [sp, #8]
 800acb0:	701a      	strb	r2, [r3, #0]
 800acb2:	b01c      	add	sp, #112	; 0x70
 800acb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acb8:	b003      	add	sp, #12
 800acba:	4770      	bx	lr
 800acbc:	2000016c 	.word	0x2000016c
 800acc0:	ffff0208 	.word	0xffff0208

0800acc4 <strcpy>:
 800acc4:	4603      	mov	r3, r0
 800acc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acca:	f803 2b01 	strb.w	r2, [r3], #1
 800acce:	2a00      	cmp	r2, #0
 800acd0:	d1f9      	bne.n	800acc6 <strcpy+0x2>
 800acd2:	4770      	bx	lr

0800acd4 <strtok>:
 800acd4:	4b16      	ldr	r3, [pc, #88]	; (800ad30 <strtok+0x5c>)
 800acd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acda:	681f      	ldr	r7, [r3, #0]
 800acdc:	4605      	mov	r5, r0
 800acde:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800ace0:	460e      	mov	r6, r1
 800ace2:	b9ec      	cbnz	r4, 800ad20 <strtok+0x4c>
 800ace4:	2050      	movs	r0, #80	; 0x50
 800ace6:	f000 f907 	bl	800aef8 <malloc>
 800acea:	4602      	mov	r2, r0
 800acec:	65b8      	str	r0, [r7, #88]	; 0x58
 800acee:	b920      	cbnz	r0, 800acfa <strtok+0x26>
 800acf0:	2157      	movs	r1, #87	; 0x57
 800acf2:	4b10      	ldr	r3, [pc, #64]	; (800ad34 <strtok+0x60>)
 800acf4:	4810      	ldr	r0, [pc, #64]	; (800ad38 <strtok+0x64>)
 800acf6:	f000 f8cf 	bl	800ae98 <__assert_func>
 800acfa:	e9c0 4400 	strd	r4, r4, [r0]
 800acfe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad02:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad06:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ad0a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ad0e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ad12:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ad16:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ad1a:	6184      	str	r4, [r0, #24]
 800ad1c:	7704      	strb	r4, [r0, #28]
 800ad1e:	6244      	str	r4, [r0, #36]	; 0x24
 800ad20:	4631      	mov	r1, r6
 800ad22:	4628      	mov	r0, r5
 800ad24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad26:	2301      	movs	r3, #1
 800ad28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2c:	f000 b806 	b.w	800ad3c <__strtok_r>
 800ad30:	2000016c 	.word	0x2000016c
 800ad34:	0800c2b4 	.word	0x0800c2b4
 800ad38:	0800c2cb 	.word	0x0800c2cb

0800ad3c <__strtok_r>:
 800ad3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad3e:	b908      	cbnz	r0, 800ad44 <__strtok_r+0x8>
 800ad40:	6810      	ldr	r0, [r2, #0]
 800ad42:	b188      	cbz	r0, 800ad68 <__strtok_r+0x2c>
 800ad44:	4604      	mov	r4, r0
 800ad46:	460f      	mov	r7, r1
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ad4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ad52:	b91e      	cbnz	r6, 800ad5c <__strtok_r+0x20>
 800ad54:	b965      	cbnz	r5, 800ad70 <__strtok_r+0x34>
 800ad56:	4628      	mov	r0, r5
 800ad58:	6015      	str	r5, [r2, #0]
 800ad5a:	e005      	b.n	800ad68 <__strtok_r+0x2c>
 800ad5c:	42b5      	cmp	r5, r6
 800ad5e:	d1f6      	bne.n	800ad4e <__strtok_r+0x12>
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1f0      	bne.n	800ad46 <__strtok_r+0xa>
 800ad64:	6014      	str	r4, [r2, #0]
 800ad66:	7003      	strb	r3, [r0, #0]
 800ad68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad6a:	461c      	mov	r4, r3
 800ad6c:	e00c      	b.n	800ad88 <__strtok_r+0x4c>
 800ad6e:	b915      	cbnz	r5, 800ad76 <__strtok_r+0x3a>
 800ad70:	460e      	mov	r6, r1
 800ad72:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad76:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ad7a:	42ab      	cmp	r3, r5
 800ad7c:	d1f7      	bne.n	800ad6e <__strtok_r+0x32>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0f3      	beq.n	800ad6a <__strtok_r+0x2e>
 800ad82:	2300      	movs	r3, #0
 800ad84:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ad88:	6014      	str	r4, [r2, #0]
 800ad8a:	e7ed      	b.n	800ad68 <__strtok_r+0x2c>

0800ad8c <_strtol_l.constprop.0>:
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad92:	4680      	mov	r8, r0
 800ad94:	d001      	beq.n	800ad9a <_strtol_l.constprop.0+0xe>
 800ad96:	2b24      	cmp	r3, #36	; 0x24
 800ad98:	d906      	bls.n	800ada8 <_strtol_l.constprop.0+0x1c>
 800ad9a:	f7ff ff41 	bl	800ac20 <__errno>
 800ad9e:	2316      	movs	r3, #22
 800ada0:	6003      	str	r3, [r0, #0]
 800ada2:	2000      	movs	r0, #0
 800ada4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada8:	460d      	mov	r5, r1
 800adaa:	4f35      	ldr	r7, [pc, #212]	; (800ae80 <_strtol_l.constprop.0+0xf4>)
 800adac:	4628      	mov	r0, r5
 800adae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adb2:	5de6      	ldrb	r6, [r4, r7]
 800adb4:	f016 0608 	ands.w	r6, r6, #8
 800adb8:	d1f8      	bne.n	800adac <_strtol_l.constprop.0+0x20>
 800adba:	2c2d      	cmp	r4, #45	; 0x2d
 800adbc:	d12f      	bne.n	800ae1e <_strtol_l.constprop.0+0x92>
 800adbe:	2601      	movs	r6, #1
 800adc0:	782c      	ldrb	r4, [r5, #0]
 800adc2:	1c85      	adds	r5, r0, #2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d057      	beq.n	800ae78 <_strtol_l.constprop.0+0xec>
 800adc8:	2b10      	cmp	r3, #16
 800adca:	d109      	bne.n	800ade0 <_strtol_l.constprop.0+0x54>
 800adcc:	2c30      	cmp	r4, #48	; 0x30
 800adce:	d107      	bne.n	800ade0 <_strtol_l.constprop.0+0x54>
 800add0:	7828      	ldrb	r0, [r5, #0]
 800add2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800add6:	2858      	cmp	r0, #88	; 0x58
 800add8:	d149      	bne.n	800ae6e <_strtol_l.constprop.0+0xe2>
 800adda:	2310      	movs	r3, #16
 800addc:	786c      	ldrb	r4, [r5, #1]
 800adde:	3502      	adds	r5, #2
 800ade0:	2700      	movs	r7, #0
 800ade2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800ade6:	f10e 3eff 	add.w	lr, lr, #4294967295
 800adea:	fbbe f9f3 	udiv	r9, lr, r3
 800adee:	4638      	mov	r0, r7
 800adf0:	fb03 ea19 	mls	sl, r3, r9, lr
 800adf4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800adf8:	f1bc 0f09 	cmp.w	ip, #9
 800adfc:	d814      	bhi.n	800ae28 <_strtol_l.constprop.0+0x9c>
 800adfe:	4664      	mov	r4, ip
 800ae00:	42a3      	cmp	r3, r4
 800ae02:	dd22      	ble.n	800ae4a <_strtol_l.constprop.0+0xbe>
 800ae04:	2f00      	cmp	r7, #0
 800ae06:	db1d      	blt.n	800ae44 <_strtol_l.constprop.0+0xb8>
 800ae08:	4581      	cmp	r9, r0
 800ae0a:	d31b      	bcc.n	800ae44 <_strtol_l.constprop.0+0xb8>
 800ae0c:	d101      	bne.n	800ae12 <_strtol_l.constprop.0+0x86>
 800ae0e:	45a2      	cmp	sl, r4
 800ae10:	db18      	blt.n	800ae44 <_strtol_l.constprop.0+0xb8>
 800ae12:	2701      	movs	r7, #1
 800ae14:	fb00 4003 	mla	r0, r0, r3, r4
 800ae18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae1c:	e7ea      	b.n	800adf4 <_strtol_l.constprop.0+0x68>
 800ae1e:	2c2b      	cmp	r4, #43	; 0x2b
 800ae20:	bf04      	itt	eq
 800ae22:	782c      	ldrbeq	r4, [r5, #0]
 800ae24:	1c85      	addeq	r5, r0, #2
 800ae26:	e7cd      	b.n	800adc4 <_strtol_l.constprop.0+0x38>
 800ae28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ae2c:	f1bc 0f19 	cmp.w	ip, #25
 800ae30:	d801      	bhi.n	800ae36 <_strtol_l.constprop.0+0xaa>
 800ae32:	3c37      	subs	r4, #55	; 0x37
 800ae34:	e7e4      	b.n	800ae00 <_strtol_l.constprop.0+0x74>
 800ae36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ae3a:	f1bc 0f19 	cmp.w	ip, #25
 800ae3e:	d804      	bhi.n	800ae4a <_strtol_l.constprop.0+0xbe>
 800ae40:	3c57      	subs	r4, #87	; 0x57
 800ae42:	e7dd      	b.n	800ae00 <_strtol_l.constprop.0+0x74>
 800ae44:	f04f 37ff 	mov.w	r7, #4294967295
 800ae48:	e7e6      	b.n	800ae18 <_strtol_l.constprop.0+0x8c>
 800ae4a:	2f00      	cmp	r7, #0
 800ae4c:	da07      	bge.n	800ae5e <_strtol_l.constprop.0+0xd2>
 800ae4e:	2322      	movs	r3, #34	; 0x22
 800ae50:	4670      	mov	r0, lr
 800ae52:	f8c8 3000 	str.w	r3, [r8]
 800ae56:	2a00      	cmp	r2, #0
 800ae58:	d0a4      	beq.n	800ada4 <_strtol_l.constprop.0+0x18>
 800ae5a:	1e69      	subs	r1, r5, #1
 800ae5c:	e005      	b.n	800ae6a <_strtol_l.constprop.0+0xde>
 800ae5e:	b106      	cbz	r6, 800ae62 <_strtol_l.constprop.0+0xd6>
 800ae60:	4240      	negs	r0, r0
 800ae62:	2a00      	cmp	r2, #0
 800ae64:	d09e      	beq.n	800ada4 <_strtol_l.constprop.0+0x18>
 800ae66:	2f00      	cmp	r7, #0
 800ae68:	d1f7      	bne.n	800ae5a <_strtol_l.constprop.0+0xce>
 800ae6a:	6011      	str	r1, [r2, #0]
 800ae6c:	e79a      	b.n	800ada4 <_strtol_l.constprop.0+0x18>
 800ae6e:	2430      	movs	r4, #48	; 0x30
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1b5      	bne.n	800ade0 <_strtol_l.constprop.0+0x54>
 800ae74:	2308      	movs	r3, #8
 800ae76:	e7b3      	b.n	800ade0 <_strtol_l.constprop.0+0x54>
 800ae78:	2c30      	cmp	r4, #48	; 0x30
 800ae7a:	d0a9      	beq.n	800add0 <_strtol_l.constprop.0+0x44>
 800ae7c:	230a      	movs	r3, #10
 800ae7e:	e7af      	b.n	800ade0 <_strtol_l.constprop.0+0x54>
 800ae80:	0800c365 	.word	0x0800c365

0800ae84 <strtol>:
 800ae84:	4613      	mov	r3, r2
 800ae86:	460a      	mov	r2, r1
 800ae88:	4601      	mov	r1, r0
 800ae8a:	4802      	ldr	r0, [pc, #8]	; (800ae94 <strtol+0x10>)
 800ae8c:	6800      	ldr	r0, [r0, #0]
 800ae8e:	f7ff bf7d 	b.w	800ad8c <_strtol_l.constprop.0>
 800ae92:	bf00      	nop
 800ae94:	2000016c 	.word	0x2000016c

0800ae98 <__assert_func>:
 800ae98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae9a:	4614      	mov	r4, r2
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <__assert_func+0x2c>)
 800aea0:	4605      	mov	r5, r0
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68d8      	ldr	r0, [r3, #12]
 800aea6:	b14c      	cbz	r4, 800aebc <__assert_func+0x24>
 800aea8:	4b07      	ldr	r3, [pc, #28]	; (800aec8 <__assert_func+0x30>)
 800aeaa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aeae:	9100      	str	r1, [sp, #0]
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	4906      	ldr	r1, [pc, #24]	; (800aecc <__assert_func+0x34>)
 800aeb4:	f000 f80e 	bl	800aed4 <fiprintf>
 800aeb8:	f000 fe1c 	bl	800baf4 <abort>
 800aebc:	4b04      	ldr	r3, [pc, #16]	; (800aed0 <__assert_func+0x38>)
 800aebe:	461c      	mov	r4, r3
 800aec0:	e7f3      	b.n	800aeaa <__assert_func+0x12>
 800aec2:	bf00      	nop
 800aec4:	2000016c 	.word	0x2000016c
 800aec8:	0800c328 	.word	0x0800c328
 800aecc:	0800c335 	.word	0x0800c335
 800aed0:	0800c363 	.word	0x0800c363

0800aed4 <fiprintf>:
 800aed4:	b40e      	push	{r1, r2, r3}
 800aed6:	b503      	push	{r0, r1, lr}
 800aed8:	4601      	mov	r1, r0
 800aeda:	ab03      	add	r3, sp, #12
 800aedc:	4805      	ldr	r0, [pc, #20]	; (800aef4 <fiprintf+0x20>)
 800aede:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee2:	6800      	ldr	r0, [r0, #0]
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	f000 fa6f 	bl	800b3c8 <_vfiprintf_r>
 800aeea:	b002      	add	sp, #8
 800aeec:	f85d eb04 	ldr.w	lr, [sp], #4
 800aef0:	b003      	add	sp, #12
 800aef2:	4770      	bx	lr
 800aef4:	2000016c 	.word	0x2000016c

0800aef8 <malloc>:
 800aef8:	4b02      	ldr	r3, [pc, #8]	; (800af04 <malloc+0xc>)
 800aefa:	4601      	mov	r1, r0
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	f000 b86b 	b.w	800afd8 <_malloc_r>
 800af02:	bf00      	nop
 800af04:	2000016c 	.word	0x2000016c

0800af08 <_free_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4605      	mov	r5, r0
 800af0c:	2900      	cmp	r1, #0
 800af0e:	d040      	beq.n	800af92 <_free_r+0x8a>
 800af10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af14:	1f0c      	subs	r4, r1, #4
 800af16:	2b00      	cmp	r3, #0
 800af18:	bfb8      	it	lt
 800af1a:	18e4      	addlt	r4, r4, r3
 800af1c:	f001 f844 	bl	800bfa8 <__malloc_lock>
 800af20:	4a1c      	ldr	r2, [pc, #112]	; (800af94 <_free_r+0x8c>)
 800af22:	6813      	ldr	r3, [r2, #0]
 800af24:	b933      	cbnz	r3, 800af34 <_free_r+0x2c>
 800af26:	6063      	str	r3, [r4, #4]
 800af28:	6014      	str	r4, [r2, #0]
 800af2a:	4628      	mov	r0, r5
 800af2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af30:	f001 b840 	b.w	800bfb4 <__malloc_unlock>
 800af34:	42a3      	cmp	r3, r4
 800af36:	d908      	bls.n	800af4a <_free_r+0x42>
 800af38:	6820      	ldr	r0, [r4, #0]
 800af3a:	1821      	adds	r1, r4, r0
 800af3c:	428b      	cmp	r3, r1
 800af3e:	bf01      	itttt	eq
 800af40:	6819      	ldreq	r1, [r3, #0]
 800af42:	685b      	ldreq	r3, [r3, #4]
 800af44:	1809      	addeq	r1, r1, r0
 800af46:	6021      	streq	r1, [r4, #0]
 800af48:	e7ed      	b.n	800af26 <_free_r+0x1e>
 800af4a:	461a      	mov	r2, r3
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	b10b      	cbz	r3, 800af54 <_free_r+0x4c>
 800af50:	42a3      	cmp	r3, r4
 800af52:	d9fa      	bls.n	800af4a <_free_r+0x42>
 800af54:	6811      	ldr	r1, [r2, #0]
 800af56:	1850      	adds	r0, r2, r1
 800af58:	42a0      	cmp	r0, r4
 800af5a:	d10b      	bne.n	800af74 <_free_r+0x6c>
 800af5c:	6820      	ldr	r0, [r4, #0]
 800af5e:	4401      	add	r1, r0
 800af60:	1850      	adds	r0, r2, r1
 800af62:	4283      	cmp	r3, r0
 800af64:	6011      	str	r1, [r2, #0]
 800af66:	d1e0      	bne.n	800af2a <_free_r+0x22>
 800af68:	6818      	ldr	r0, [r3, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	4401      	add	r1, r0
 800af6e:	6011      	str	r1, [r2, #0]
 800af70:	6053      	str	r3, [r2, #4]
 800af72:	e7da      	b.n	800af2a <_free_r+0x22>
 800af74:	d902      	bls.n	800af7c <_free_r+0x74>
 800af76:	230c      	movs	r3, #12
 800af78:	602b      	str	r3, [r5, #0]
 800af7a:	e7d6      	b.n	800af2a <_free_r+0x22>
 800af7c:	6820      	ldr	r0, [r4, #0]
 800af7e:	1821      	adds	r1, r4, r0
 800af80:	428b      	cmp	r3, r1
 800af82:	bf01      	itttt	eq
 800af84:	6819      	ldreq	r1, [r3, #0]
 800af86:	685b      	ldreq	r3, [r3, #4]
 800af88:	1809      	addeq	r1, r1, r0
 800af8a:	6021      	streq	r1, [r4, #0]
 800af8c:	6063      	str	r3, [r4, #4]
 800af8e:	6054      	str	r4, [r2, #4]
 800af90:	e7cb      	b.n	800af2a <_free_r+0x22>
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	20000ba4 	.word	0x20000ba4

0800af98 <sbrk_aligned>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	4e0e      	ldr	r6, [pc, #56]	; (800afd4 <sbrk_aligned+0x3c>)
 800af9c:	460c      	mov	r4, r1
 800af9e:	6831      	ldr	r1, [r6, #0]
 800afa0:	4605      	mov	r5, r0
 800afa2:	b911      	cbnz	r1, 800afaa <sbrk_aligned+0x12>
 800afa4:	f000 fcd6 	bl	800b954 <_sbrk_r>
 800afa8:	6030      	str	r0, [r6, #0]
 800afaa:	4621      	mov	r1, r4
 800afac:	4628      	mov	r0, r5
 800afae:	f000 fcd1 	bl	800b954 <_sbrk_r>
 800afb2:	1c43      	adds	r3, r0, #1
 800afb4:	d00a      	beq.n	800afcc <sbrk_aligned+0x34>
 800afb6:	1cc4      	adds	r4, r0, #3
 800afb8:	f024 0403 	bic.w	r4, r4, #3
 800afbc:	42a0      	cmp	r0, r4
 800afbe:	d007      	beq.n	800afd0 <sbrk_aligned+0x38>
 800afc0:	1a21      	subs	r1, r4, r0
 800afc2:	4628      	mov	r0, r5
 800afc4:	f000 fcc6 	bl	800b954 <_sbrk_r>
 800afc8:	3001      	adds	r0, #1
 800afca:	d101      	bne.n	800afd0 <sbrk_aligned+0x38>
 800afcc:	f04f 34ff 	mov.w	r4, #4294967295
 800afd0:	4620      	mov	r0, r4
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	20000ba8 	.word	0x20000ba8

0800afd8 <_malloc_r>:
 800afd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afdc:	1ccd      	adds	r5, r1, #3
 800afde:	f025 0503 	bic.w	r5, r5, #3
 800afe2:	3508      	adds	r5, #8
 800afe4:	2d0c      	cmp	r5, #12
 800afe6:	bf38      	it	cc
 800afe8:	250c      	movcc	r5, #12
 800afea:	2d00      	cmp	r5, #0
 800afec:	4607      	mov	r7, r0
 800afee:	db01      	blt.n	800aff4 <_malloc_r+0x1c>
 800aff0:	42a9      	cmp	r1, r5
 800aff2:	d905      	bls.n	800b000 <_malloc_r+0x28>
 800aff4:	230c      	movs	r3, #12
 800aff6:	2600      	movs	r6, #0
 800aff8:	603b      	str	r3, [r7, #0]
 800affa:	4630      	mov	r0, r6
 800affc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b000:	4e2e      	ldr	r6, [pc, #184]	; (800b0bc <_malloc_r+0xe4>)
 800b002:	f000 ffd1 	bl	800bfa8 <__malloc_lock>
 800b006:	6833      	ldr	r3, [r6, #0]
 800b008:	461c      	mov	r4, r3
 800b00a:	bb34      	cbnz	r4, 800b05a <_malloc_r+0x82>
 800b00c:	4629      	mov	r1, r5
 800b00e:	4638      	mov	r0, r7
 800b010:	f7ff ffc2 	bl	800af98 <sbrk_aligned>
 800b014:	1c43      	adds	r3, r0, #1
 800b016:	4604      	mov	r4, r0
 800b018:	d14d      	bne.n	800b0b6 <_malloc_r+0xde>
 800b01a:	6834      	ldr	r4, [r6, #0]
 800b01c:	4626      	mov	r6, r4
 800b01e:	2e00      	cmp	r6, #0
 800b020:	d140      	bne.n	800b0a4 <_malloc_r+0xcc>
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	4631      	mov	r1, r6
 800b026:	4638      	mov	r0, r7
 800b028:	eb04 0803 	add.w	r8, r4, r3
 800b02c:	f000 fc92 	bl	800b954 <_sbrk_r>
 800b030:	4580      	cmp	r8, r0
 800b032:	d13a      	bne.n	800b0aa <_malloc_r+0xd2>
 800b034:	6821      	ldr	r1, [r4, #0]
 800b036:	3503      	adds	r5, #3
 800b038:	1a6d      	subs	r5, r5, r1
 800b03a:	f025 0503 	bic.w	r5, r5, #3
 800b03e:	3508      	adds	r5, #8
 800b040:	2d0c      	cmp	r5, #12
 800b042:	bf38      	it	cc
 800b044:	250c      	movcc	r5, #12
 800b046:	4638      	mov	r0, r7
 800b048:	4629      	mov	r1, r5
 800b04a:	f7ff ffa5 	bl	800af98 <sbrk_aligned>
 800b04e:	3001      	adds	r0, #1
 800b050:	d02b      	beq.n	800b0aa <_malloc_r+0xd2>
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	442b      	add	r3, r5
 800b056:	6023      	str	r3, [r4, #0]
 800b058:	e00e      	b.n	800b078 <_malloc_r+0xa0>
 800b05a:	6822      	ldr	r2, [r4, #0]
 800b05c:	1b52      	subs	r2, r2, r5
 800b05e:	d41e      	bmi.n	800b09e <_malloc_r+0xc6>
 800b060:	2a0b      	cmp	r2, #11
 800b062:	d916      	bls.n	800b092 <_malloc_r+0xba>
 800b064:	1961      	adds	r1, r4, r5
 800b066:	42a3      	cmp	r3, r4
 800b068:	6025      	str	r5, [r4, #0]
 800b06a:	bf18      	it	ne
 800b06c:	6059      	strne	r1, [r3, #4]
 800b06e:	6863      	ldr	r3, [r4, #4]
 800b070:	bf08      	it	eq
 800b072:	6031      	streq	r1, [r6, #0]
 800b074:	5162      	str	r2, [r4, r5]
 800b076:	604b      	str	r3, [r1, #4]
 800b078:	4638      	mov	r0, r7
 800b07a:	f104 060b 	add.w	r6, r4, #11
 800b07e:	f000 ff99 	bl	800bfb4 <__malloc_unlock>
 800b082:	f026 0607 	bic.w	r6, r6, #7
 800b086:	1d23      	adds	r3, r4, #4
 800b088:	1af2      	subs	r2, r6, r3
 800b08a:	d0b6      	beq.n	800affa <_malloc_r+0x22>
 800b08c:	1b9b      	subs	r3, r3, r6
 800b08e:	50a3      	str	r3, [r4, r2]
 800b090:	e7b3      	b.n	800affa <_malloc_r+0x22>
 800b092:	6862      	ldr	r2, [r4, #4]
 800b094:	42a3      	cmp	r3, r4
 800b096:	bf0c      	ite	eq
 800b098:	6032      	streq	r2, [r6, #0]
 800b09a:	605a      	strne	r2, [r3, #4]
 800b09c:	e7ec      	b.n	800b078 <_malloc_r+0xa0>
 800b09e:	4623      	mov	r3, r4
 800b0a0:	6864      	ldr	r4, [r4, #4]
 800b0a2:	e7b2      	b.n	800b00a <_malloc_r+0x32>
 800b0a4:	4634      	mov	r4, r6
 800b0a6:	6876      	ldr	r6, [r6, #4]
 800b0a8:	e7b9      	b.n	800b01e <_malloc_r+0x46>
 800b0aa:	230c      	movs	r3, #12
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	f000 ff80 	bl	800bfb4 <__malloc_unlock>
 800b0b4:	e7a1      	b.n	800affa <_malloc_r+0x22>
 800b0b6:	6025      	str	r5, [r4, #0]
 800b0b8:	e7de      	b.n	800b078 <_malloc_r+0xa0>
 800b0ba:	bf00      	nop
 800b0bc:	20000ba4 	.word	0x20000ba4

0800b0c0 <__ssputs_r>:
 800b0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c4:	688e      	ldr	r6, [r1, #8]
 800b0c6:	4682      	mov	sl, r0
 800b0c8:	429e      	cmp	r6, r3
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	4690      	mov	r8, r2
 800b0ce:	461f      	mov	r7, r3
 800b0d0:	d838      	bhi.n	800b144 <__ssputs_r+0x84>
 800b0d2:	898a      	ldrh	r2, [r1, #12]
 800b0d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0d8:	d032      	beq.n	800b140 <__ssputs_r+0x80>
 800b0da:	6825      	ldr	r5, [r4, #0]
 800b0dc:	6909      	ldr	r1, [r1, #16]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	eba5 0901 	sub.w	r9, r5, r1
 800b0e4:	6965      	ldr	r5, [r4, #20]
 800b0e6:	444b      	add	r3, r9
 800b0e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0f0:	106d      	asrs	r5, r5, #1
 800b0f2:	429d      	cmp	r5, r3
 800b0f4:	bf38      	it	cc
 800b0f6:	461d      	movcc	r5, r3
 800b0f8:	0553      	lsls	r3, r2, #21
 800b0fa:	d531      	bpl.n	800b160 <__ssputs_r+0xa0>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	f7ff ff6b 	bl	800afd8 <_malloc_r>
 800b102:	4606      	mov	r6, r0
 800b104:	b950      	cbnz	r0, 800b11c <__ssputs_r+0x5c>
 800b106:	230c      	movs	r3, #12
 800b108:	f04f 30ff 	mov.w	r0, #4294967295
 800b10c:	f8ca 3000 	str.w	r3, [sl]
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b116:	81a3      	strh	r3, [r4, #12]
 800b118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11c:	464a      	mov	r2, r9
 800b11e:	6921      	ldr	r1, [r4, #16]
 800b120:	f000 ff1a 	bl	800bf58 <memcpy>
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b12e:	81a3      	strh	r3, [r4, #12]
 800b130:	6126      	str	r6, [r4, #16]
 800b132:	444e      	add	r6, r9
 800b134:	6026      	str	r6, [r4, #0]
 800b136:	463e      	mov	r6, r7
 800b138:	6165      	str	r5, [r4, #20]
 800b13a:	eba5 0509 	sub.w	r5, r5, r9
 800b13e:	60a5      	str	r5, [r4, #8]
 800b140:	42be      	cmp	r6, r7
 800b142:	d900      	bls.n	800b146 <__ssputs_r+0x86>
 800b144:	463e      	mov	r6, r7
 800b146:	4632      	mov	r2, r6
 800b148:	4641      	mov	r1, r8
 800b14a:	6820      	ldr	r0, [r4, #0]
 800b14c:	f000 ff12 	bl	800bf74 <memmove>
 800b150:	68a3      	ldr	r3, [r4, #8]
 800b152:	2000      	movs	r0, #0
 800b154:	1b9b      	subs	r3, r3, r6
 800b156:	60a3      	str	r3, [r4, #8]
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	4433      	add	r3, r6
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	e7db      	b.n	800b118 <__ssputs_r+0x58>
 800b160:	462a      	mov	r2, r5
 800b162:	f000 ff2d 	bl	800bfc0 <_realloc_r>
 800b166:	4606      	mov	r6, r0
 800b168:	2800      	cmp	r0, #0
 800b16a:	d1e1      	bne.n	800b130 <__ssputs_r+0x70>
 800b16c:	4650      	mov	r0, sl
 800b16e:	6921      	ldr	r1, [r4, #16]
 800b170:	f7ff feca 	bl	800af08 <_free_r>
 800b174:	e7c7      	b.n	800b106 <__ssputs_r+0x46>
	...

0800b178 <_svfiprintf_r>:
 800b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	4698      	mov	r8, r3
 800b17e:	898b      	ldrh	r3, [r1, #12]
 800b180:	4607      	mov	r7, r0
 800b182:	061b      	lsls	r3, r3, #24
 800b184:	460d      	mov	r5, r1
 800b186:	4614      	mov	r4, r2
 800b188:	b09d      	sub	sp, #116	; 0x74
 800b18a:	d50e      	bpl.n	800b1aa <_svfiprintf_r+0x32>
 800b18c:	690b      	ldr	r3, [r1, #16]
 800b18e:	b963      	cbnz	r3, 800b1aa <_svfiprintf_r+0x32>
 800b190:	2140      	movs	r1, #64	; 0x40
 800b192:	f7ff ff21 	bl	800afd8 <_malloc_r>
 800b196:	6028      	str	r0, [r5, #0]
 800b198:	6128      	str	r0, [r5, #16]
 800b19a:	b920      	cbnz	r0, 800b1a6 <_svfiprintf_r+0x2e>
 800b19c:	230c      	movs	r3, #12
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	e0d1      	b.n	800b34a <_svfiprintf_r+0x1d2>
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	616b      	str	r3, [r5, #20]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ae:	2320      	movs	r3, #32
 800b1b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b4:	2330      	movs	r3, #48	; 0x30
 800b1b6:	f04f 0901 	mov.w	r9, #1
 800b1ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b364 <_svfiprintf_r+0x1ec>
 800b1c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	469a      	mov	sl, r3
 800b1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ce:	b10a      	cbz	r2, 800b1d4 <_svfiprintf_r+0x5c>
 800b1d0:	2a25      	cmp	r2, #37	; 0x25
 800b1d2:	d1f9      	bne.n	800b1c8 <_svfiprintf_r+0x50>
 800b1d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d8:	d00b      	beq.n	800b1f2 <_svfiprintf_r+0x7a>
 800b1da:	465b      	mov	r3, fp
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7ff ff6d 	bl	800b0c0 <__ssputs_r>
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	f000 80aa 	beq.w	800b340 <_svfiprintf_r+0x1c8>
 800b1ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ee:	445a      	add	r2, fp
 800b1f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 80a2 	beq.w	800b340 <_svfiprintf_r+0x1c8>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b206:	f10a 0a01 	add.w	sl, sl, #1
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	9307      	str	r3, [sp, #28]
 800b20e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b212:	931a      	str	r3, [sp, #104]	; 0x68
 800b214:	4654      	mov	r4, sl
 800b216:	2205      	movs	r2, #5
 800b218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21c:	4851      	ldr	r0, [pc, #324]	; (800b364 <_svfiprintf_r+0x1ec>)
 800b21e:	f000 fe8d 	bl	800bf3c <memchr>
 800b222:	9a04      	ldr	r2, [sp, #16]
 800b224:	b9d8      	cbnz	r0, 800b25e <_svfiprintf_r+0xe6>
 800b226:	06d0      	lsls	r0, r2, #27
 800b228:	bf44      	itt	mi
 800b22a:	2320      	movmi	r3, #32
 800b22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b230:	0711      	lsls	r1, r2, #28
 800b232:	bf44      	itt	mi
 800b234:	232b      	movmi	r3, #43	; 0x2b
 800b236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b23a:	f89a 3000 	ldrb.w	r3, [sl]
 800b23e:	2b2a      	cmp	r3, #42	; 0x2a
 800b240:	d015      	beq.n	800b26e <_svfiprintf_r+0xf6>
 800b242:	4654      	mov	r4, sl
 800b244:	2000      	movs	r0, #0
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	9a07      	ldr	r2, [sp, #28]
 800b24c:	4621      	mov	r1, r4
 800b24e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b252:	3b30      	subs	r3, #48	; 0x30
 800b254:	2b09      	cmp	r3, #9
 800b256:	d94e      	bls.n	800b2f6 <_svfiprintf_r+0x17e>
 800b258:	b1b0      	cbz	r0, 800b288 <_svfiprintf_r+0x110>
 800b25a:	9207      	str	r2, [sp, #28]
 800b25c:	e014      	b.n	800b288 <_svfiprintf_r+0x110>
 800b25e:	eba0 0308 	sub.w	r3, r0, r8
 800b262:	fa09 f303 	lsl.w	r3, r9, r3
 800b266:	4313      	orrs	r3, r2
 800b268:	46a2      	mov	sl, r4
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	e7d2      	b.n	800b214 <_svfiprintf_r+0x9c>
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	1d19      	adds	r1, r3, #4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	9103      	str	r1, [sp, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfbb      	ittet	lt
 800b27a:	425b      	neglt	r3, r3
 800b27c:	f042 0202 	orrlt.w	r2, r2, #2
 800b280:	9307      	strge	r3, [sp, #28]
 800b282:	9307      	strlt	r3, [sp, #28]
 800b284:	bfb8      	it	lt
 800b286:	9204      	strlt	r2, [sp, #16]
 800b288:	7823      	ldrb	r3, [r4, #0]
 800b28a:	2b2e      	cmp	r3, #46	; 0x2e
 800b28c:	d10c      	bne.n	800b2a8 <_svfiprintf_r+0x130>
 800b28e:	7863      	ldrb	r3, [r4, #1]
 800b290:	2b2a      	cmp	r3, #42	; 0x2a
 800b292:	d135      	bne.n	800b300 <_svfiprintf_r+0x188>
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	3402      	adds	r4, #2
 800b298:	1d1a      	adds	r2, r3, #4
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	9203      	str	r2, [sp, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	bfb8      	it	lt
 800b2a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2a6:	9305      	str	r3, [sp, #20]
 800b2a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b368 <_svfiprintf_r+0x1f0>
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	7821      	ldrb	r1, [r4, #0]
 800b2b2:	f000 fe43 	bl	800bf3c <memchr>
 800b2b6:	b140      	cbz	r0, 800b2ca <_svfiprintf_r+0x152>
 800b2b8:	2340      	movs	r3, #64	; 0x40
 800b2ba:	eba0 000a 	sub.w	r0, r0, sl
 800b2be:	fa03 f000 	lsl.w	r0, r3, r0
 800b2c2:	9b04      	ldr	r3, [sp, #16]
 800b2c4:	3401      	adds	r4, #1
 800b2c6:	4303      	orrs	r3, r0
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ce:	2206      	movs	r2, #6
 800b2d0:	4826      	ldr	r0, [pc, #152]	; (800b36c <_svfiprintf_r+0x1f4>)
 800b2d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2d6:	f000 fe31 	bl	800bf3c <memchr>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d038      	beq.n	800b350 <_svfiprintf_r+0x1d8>
 800b2de:	4b24      	ldr	r3, [pc, #144]	; (800b370 <_svfiprintf_r+0x1f8>)
 800b2e0:	bb1b      	cbnz	r3, 800b32a <_svfiprintf_r+0x1b2>
 800b2e2:	9b03      	ldr	r3, [sp, #12]
 800b2e4:	3307      	adds	r3, #7
 800b2e6:	f023 0307 	bic.w	r3, r3, #7
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	9303      	str	r3, [sp, #12]
 800b2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f0:	4433      	add	r3, r6
 800b2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f4:	e767      	b.n	800b1c6 <_svfiprintf_r+0x4e>
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2fe:	e7a5      	b.n	800b24c <_svfiprintf_r+0xd4>
 800b300:	2300      	movs	r3, #0
 800b302:	f04f 0c0a 	mov.w	ip, #10
 800b306:	4619      	mov	r1, r3
 800b308:	3401      	adds	r4, #1
 800b30a:	9305      	str	r3, [sp, #20]
 800b30c:	4620      	mov	r0, r4
 800b30e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b312:	3a30      	subs	r2, #48	; 0x30
 800b314:	2a09      	cmp	r2, #9
 800b316:	d903      	bls.n	800b320 <_svfiprintf_r+0x1a8>
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d0c5      	beq.n	800b2a8 <_svfiprintf_r+0x130>
 800b31c:	9105      	str	r1, [sp, #20]
 800b31e:	e7c3      	b.n	800b2a8 <_svfiprintf_r+0x130>
 800b320:	4604      	mov	r4, r0
 800b322:	2301      	movs	r3, #1
 800b324:	fb0c 2101 	mla	r1, ip, r1, r2
 800b328:	e7f0      	b.n	800b30c <_svfiprintf_r+0x194>
 800b32a:	ab03      	add	r3, sp, #12
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	462a      	mov	r2, r5
 800b330:	4638      	mov	r0, r7
 800b332:	4b10      	ldr	r3, [pc, #64]	; (800b374 <_svfiprintf_r+0x1fc>)
 800b334:	a904      	add	r1, sp, #16
 800b336:	f3af 8000 	nop.w
 800b33a:	1c42      	adds	r2, r0, #1
 800b33c:	4606      	mov	r6, r0
 800b33e:	d1d6      	bne.n	800b2ee <_svfiprintf_r+0x176>
 800b340:	89ab      	ldrh	r3, [r5, #12]
 800b342:	065b      	lsls	r3, r3, #25
 800b344:	f53f af2c 	bmi.w	800b1a0 <_svfiprintf_r+0x28>
 800b348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b34a:	b01d      	add	sp, #116	; 0x74
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b350:	ab03      	add	r3, sp, #12
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	462a      	mov	r2, r5
 800b356:	4638      	mov	r0, r7
 800b358:	4b06      	ldr	r3, [pc, #24]	; (800b374 <_svfiprintf_r+0x1fc>)
 800b35a:	a904      	add	r1, sp, #16
 800b35c:	f000 f9d4 	bl	800b708 <_printf_i>
 800b360:	e7eb      	b.n	800b33a <_svfiprintf_r+0x1c2>
 800b362:	bf00      	nop
 800b364:	0800c465 	.word	0x0800c465
 800b368:	0800c46b 	.word	0x0800c46b
 800b36c:	0800c46f 	.word	0x0800c46f
 800b370:	00000000 	.word	0x00000000
 800b374:	0800b0c1 	.word	0x0800b0c1

0800b378 <__sfputc_r>:
 800b378:	6893      	ldr	r3, [r2, #8]
 800b37a:	b410      	push	{r4}
 800b37c:	3b01      	subs	r3, #1
 800b37e:	2b00      	cmp	r3, #0
 800b380:	6093      	str	r3, [r2, #8]
 800b382:	da07      	bge.n	800b394 <__sfputc_r+0x1c>
 800b384:	6994      	ldr	r4, [r2, #24]
 800b386:	42a3      	cmp	r3, r4
 800b388:	db01      	blt.n	800b38e <__sfputc_r+0x16>
 800b38a:	290a      	cmp	r1, #10
 800b38c:	d102      	bne.n	800b394 <__sfputc_r+0x1c>
 800b38e:	bc10      	pop	{r4}
 800b390:	f000 baf0 	b.w	800b974 <__swbuf_r>
 800b394:	6813      	ldr	r3, [r2, #0]
 800b396:	1c58      	adds	r0, r3, #1
 800b398:	6010      	str	r0, [r2, #0]
 800b39a:	7019      	strb	r1, [r3, #0]
 800b39c:	4608      	mov	r0, r1
 800b39e:	bc10      	pop	{r4}
 800b3a0:	4770      	bx	lr

0800b3a2 <__sfputs_r>:
 800b3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	460f      	mov	r7, r1
 800b3a8:	4614      	mov	r4, r2
 800b3aa:	18d5      	adds	r5, r2, r3
 800b3ac:	42ac      	cmp	r4, r5
 800b3ae:	d101      	bne.n	800b3b4 <__sfputs_r+0x12>
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	e007      	b.n	800b3c4 <__sfputs_r+0x22>
 800b3b4:	463a      	mov	r2, r7
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3bc:	f7ff ffdc 	bl	800b378 <__sfputc_r>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d1f3      	bne.n	800b3ac <__sfputs_r+0xa>
 800b3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3c8 <_vfiprintf_r>:
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	4614      	mov	r4, r2
 800b3d0:	4698      	mov	r8, r3
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	b09d      	sub	sp, #116	; 0x74
 800b3d6:	b118      	cbz	r0, 800b3e0 <_vfiprintf_r+0x18>
 800b3d8:	6983      	ldr	r3, [r0, #24]
 800b3da:	b90b      	cbnz	r3, 800b3e0 <_vfiprintf_r+0x18>
 800b3dc:	f000 fca8 	bl	800bd30 <__sinit>
 800b3e0:	4b89      	ldr	r3, [pc, #548]	; (800b608 <_vfiprintf_r+0x240>)
 800b3e2:	429d      	cmp	r5, r3
 800b3e4:	d11b      	bne.n	800b41e <_vfiprintf_r+0x56>
 800b3e6:	6875      	ldr	r5, [r6, #4]
 800b3e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3ea:	07d9      	lsls	r1, r3, #31
 800b3ec:	d405      	bmi.n	800b3fa <_vfiprintf_r+0x32>
 800b3ee:	89ab      	ldrh	r3, [r5, #12]
 800b3f0:	059a      	lsls	r2, r3, #22
 800b3f2:	d402      	bmi.n	800b3fa <_vfiprintf_r+0x32>
 800b3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f6:	f000 fd39 	bl	800be6c <__retarget_lock_acquire_recursive>
 800b3fa:	89ab      	ldrh	r3, [r5, #12]
 800b3fc:	071b      	lsls	r3, r3, #28
 800b3fe:	d501      	bpl.n	800b404 <_vfiprintf_r+0x3c>
 800b400:	692b      	ldr	r3, [r5, #16]
 800b402:	b9eb      	cbnz	r3, 800b440 <_vfiprintf_r+0x78>
 800b404:	4629      	mov	r1, r5
 800b406:	4630      	mov	r0, r6
 800b408:	f000 fb06 	bl	800ba18 <__swsetup_r>
 800b40c:	b1c0      	cbz	r0, 800b440 <_vfiprintf_r+0x78>
 800b40e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b410:	07dc      	lsls	r4, r3, #31
 800b412:	d50e      	bpl.n	800b432 <_vfiprintf_r+0x6a>
 800b414:	f04f 30ff 	mov.w	r0, #4294967295
 800b418:	b01d      	add	sp, #116	; 0x74
 800b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41e:	4b7b      	ldr	r3, [pc, #492]	; (800b60c <_vfiprintf_r+0x244>)
 800b420:	429d      	cmp	r5, r3
 800b422:	d101      	bne.n	800b428 <_vfiprintf_r+0x60>
 800b424:	68b5      	ldr	r5, [r6, #8]
 800b426:	e7df      	b.n	800b3e8 <_vfiprintf_r+0x20>
 800b428:	4b79      	ldr	r3, [pc, #484]	; (800b610 <_vfiprintf_r+0x248>)
 800b42a:	429d      	cmp	r5, r3
 800b42c:	bf08      	it	eq
 800b42e:	68f5      	ldreq	r5, [r6, #12]
 800b430:	e7da      	b.n	800b3e8 <_vfiprintf_r+0x20>
 800b432:	89ab      	ldrh	r3, [r5, #12]
 800b434:	0598      	lsls	r0, r3, #22
 800b436:	d4ed      	bmi.n	800b414 <_vfiprintf_r+0x4c>
 800b438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b43a:	f000 fd18 	bl	800be6e <__retarget_lock_release_recursive>
 800b43e:	e7e9      	b.n	800b414 <_vfiprintf_r+0x4c>
 800b440:	2300      	movs	r3, #0
 800b442:	9309      	str	r3, [sp, #36]	; 0x24
 800b444:	2320      	movs	r3, #32
 800b446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b44a:	2330      	movs	r3, #48	; 0x30
 800b44c:	f04f 0901 	mov.w	r9, #1
 800b450:	f8cd 800c 	str.w	r8, [sp, #12]
 800b454:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b614 <_vfiprintf_r+0x24c>
 800b458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b45c:	4623      	mov	r3, r4
 800b45e:	469a      	mov	sl, r3
 800b460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b464:	b10a      	cbz	r2, 800b46a <_vfiprintf_r+0xa2>
 800b466:	2a25      	cmp	r2, #37	; 0x25
 800b468:	d1f9      	bne.n	800b45e <_vfiprintf_r+0x96>
 800b46a:	ebba 0b04 	subs.w	fp, sl, r4
 800b46e:	d00b      	beq.n	800b488 <_vfiprintf_r+0xc0>
 800b470:	465b      	mov	r3, fp
 800b472:	4622      	mov	r2, r4
 800b474:	4629      	mov	r1, r5
 800b476:	4630      	mov	r0, r6
 800b478:	f7ff ff93 	bl	800b3a2 <__sfputs_r>
 800b47c:	3001      	adds	r0, #1
 800b47e:	f000 80aa 	beq.w	800b5d6 <_vfiprintf_r+0x20e>
 800b482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b484:	445a      	add	r2, fp
 800b486:	9209      	str	r2, [sp, #36]	; 0x24
 800b488:	f89a 3000 	ldrb.w	r3, [sl]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 80a2 	beq.w	800b5d6 <_vfiprintf_r+0x20e>
 800b492:	2300      	movs	r3, #0
 800b494:	f04f 32ff 	mov.w	r2, #4294967295
 800b498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b49c:	f10a 0a01 	add.w	sl, sl, #1
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	9307      	str	r3, [sp, #28]
 800b4a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4a8:	931a      	str	r3, [sp, #104]	; 0x68
 800b4aa:	4654      	mov	r4, sl
 800b4ac:	2205      	movs	r2, #5
 800b4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b2:	4858      	ldr	r0, [pc, #352]	; (800b614 <_vfiprintf_r+0x24c>)
 800b4b4:	f000 fd42 	bl	800bf3c <memchr>
 800b4b8:	9a04      	ldr	r2, [sp, #16]
 800b4ba:	b9d8      	cbnz	r0, 800b4f4 <_vfiprintf_r+0x12c>
 800b4bc:	06d1      	lsls	r1, r2, #27
 800b4be:	bf44      	itt	mi
 800b4c0:	2320      	movmi	r3, #32
 800b4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4c6:	0713      	lsls	r3, r2, #28
 800b4c8:	bf44      	itt	mi
 800b4ca:	232b      	movmi	r3, #43	; 0x2b
 800b4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b4d6:	d015      	beq.n	800b504 <_vfiprintf_r+0x13c>
 800b4d8:	4654      	mov	r4, sl
 800b4da:	2000      	movs	r0, #0
 800b4dc:	f04f 0c0a 	mov.w	ip, #10
 800b4e0:	9a07      	ldr	r2, [sp, #28]
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4e8:	3b30      	subs	r3, #48	; 0x30
 800b4ea:	2b09      	cmp	r3, #9
 800b4ec:	d94e      	bls.n	800b58c <_vfiprintf_r+0x1c4>
 800b4ee:	b1b0      	cbz	r0, 800b51e <_vfiprintf_r+0x156>
 800b4f0:	9207      	str	r2, [sp, #28]
 800b4f2:	e014      	b.n	800b51e <_vfiprintf_r+0x156>
 800b4f4:	eba0 0308 	sub.w	r3, r0, r8
 800b4f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	46a2      	mov	sl, r4
 800b500:	9304      	str	r3, [sp, #16]
 800b502:	e7d2      	b.n	800b4aa <_vfiprintf_r+0xe2>
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	1d19      	adds	r1, r3, #4
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	9103      	str	r1, [sp, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	bfbb      	ittet	lt
 800b510:	425b      	neglt	r3, r3
 800b512:	f042 0202 	orrlt.w	r2, r2, #2
 800b516:	9307      	strge	r3, [sp, #28]
 800b518:	9307      	strlt	r3, [sp, #28]
 800b51a:	bfb8      	it	lt
 800b51c:	9204      	strlt	r2, [sp, #16]
 800b51e:	7823      	ldrb	r3, [r4, #0]
 800b520:	2b2e      	cmp	r3, #46	; 0x2e
 800b522:	d10c      	bne.n	800b53e <_vfiprintf_r+0x176>
 800b524:	7863      	ldrb	r3, [r4, #1]
 800b526:	2b2a      	cmp	r3, #42	; 0x2a
 800b528:	d135      	bne.n	800b596 <_vfiprintf_r+0x1ce>
 800b52a:	9b03      	ldr	r3, [sp, #12]
 800b52c:	3402      	adds	r4, #2
 800b52e:	1d1a      	adds	r2, r3, #4
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	9203      	str	r2, [sp, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	bfb8      	it	lt
 800b538:	f04f 33ff 	movlt.w	r3, #4294967295
 800b53c:	9305      	str	r3, [sp, #20]
 800b53e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b618 <_vfiprintf_r+0x250>
 800b542:	2203      	movs	r2, #3
 800b544:	4650      	mov	r0, sl
 800b546:	7821      	ldrb	r1, [r4, #0]
 800b548:	f000 fcf8 	bl	800bf3c <memchr>
 800b54c:	b140      	cbz	r0, 800b560 <_vfiprintf_r+0x198>
 800b54e:	2340      	movs	r3, #64	; 0x40
 800b550:	eba0 000a 	sub.w	r0, r0, sl
 800b554:	fa03 f000 	lsl.w	r0, r3, r0
 800b558:	9b04      	ldr	r3, [sp, #16]
 800b55a:	3401      	adds	r4, #1
 800b55c:	4303      	orrs	r3, r0
 800b55e:	9304      	str	r3, [sp, #16]
 800b560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b564:	2206      	movs	r2, #6
 800b566:	482d      	ldr	r0, [pc, #180]	; (800b61c <_vfiprintf_r+0x254>)
 800b568:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b56c:	f000 fce6 	bl	800bf3c <memchr>
 800b570:	2800      	cmp	r0, #0
 800b572:	d03f      	beq.n	800b5f4 <_vfiprintf_r+0x22c>
 800b574:	4b2a      	ldr	r3, [pc, #168]	; (800b620 <_vfiprintf_r+0x258>)
 800b576:	bb1b      	cbnz	r3, 800b5c0 <_vfiprintf_r+0x1f8>
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	3307      	adds	r3, #7
 800b57c:	f023 0307 	bic.w	r3, r3, #7
 800b580:	3308      	adds	r3, #8
 800b582:	9303      	str	r3, [sp, #12]
 800b584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b586:	443b      	add	r3, r7
 800b588:	9309      	str	r3, [sp, #36]	; 0x24
 800b58a:	e767      	b.n	800b45c <_vfiprintf_r+0x94>
 800b58c:	460c      	mov	r4, r1
 800b58e:	2001      	movs	r0, #1
 800b590:	fb0c 3202 	mla	r2, ip, r2, r3
 800b594:	e7a5      	b.n	800b4e2 <_vfiprintf_r+0x11a>
 800b596:	2300      	movs	r3, #0
 800b598:	f04f 0c0a 	mov.w	ip, #10
 800b59c:	4619      	mov	r1, r3
 800b59e:	3401      	adds	r4, #1
 800b5a0:	9305      	str	r3, [sp, #20]
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a8:	3a30      	subs	r2, #48	; 0x30
 800b5aa:	2a09      	cmp	r2, #9
 800b5ac:	d903      	bls.n	800b5b6 <_vfiprintf_r+0x1ee>
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0c5      	beq.n	800b53e <_vfiprintf_r+0x176>
 800b5b2:	9105      	str	r1, [sp, #20]
 800b5b4:	e7c3      	b.n	800b53e <_vfiprintf_r+0x176>
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5be:	e7f0      	b.n	800b5a2 <_vfiprintf_r+0x1da>
 800b5c0:	ab03      	add	r3, sp, #12
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4b16      	ldr	r3, [pc, #88]	; (800b624 <_vfiprintf_r+0x25c>)
 800b5ca:	a904      	add	r1, sp, #16
 800b5cc:	f3af 8000 	nop.w
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	1c78      	adds	r0, r7, #1
 800b5d4:	d1d6      	bne.n	800b584 <_vfiprintf_r+0x1bc>
 800b5d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5d8:	07d9      	lsls	r1, r3, #31
 800b5da:	d405      	bmi.n	800b5e8 <_vfiprintf_r+0x220>
 800b5dc:	89ab      	ldrh	r3, [r5, #12]
 800b5de:	059a      	lsls	r2, r3, #22
 800b5e0:	d402      	bmi.n	800b5e8 <_vfiprintf_r+0x220>
 800b5e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5e4:	f000 fc43 	bl	800be6e <__retarget_lock_release_recursive>
 800b5e8:	89ab      	ldrh	r3, [r5, #12]
 800b5ea:	065b      	lsls	r3, r3, #25
 800b5ec:	f53f af12 	bmi.w	800b414 <_vfiprintf_r+0x4c>
 800b5f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5f2:	e711      	b.n	800b418 <_vfiprintf_r+0x50>
 800b5f4:	ab03      	add	r3, sp, #12
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	462a      	mov	r2, r5
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	4b09      	ldr	r3, [pc, #36]	; (800b624 <_vfiprintf_r+0x25c>)
 800b5fe:	a904      	add	r1, sp, #16
 800b600:	f000 f882 	bl	800b708 <_printf_i>
 800b604:	e7e4      	b.n	800b5d0 <_vfiprintf_r+0x208>
 800b606:	bf00      	nop
 800b608:	0800c4b8 	.word	0x0800c4b8
 800b60c:	0800c4d8 	.word	0x0800c4d8
 800b610:	0800c498 	.word	0x0800c498
 800b614:	0800c465 	.word	0x0800c465
 800b618:	0800c46b 	.word	0x0800c46b
 800b61c:	0800c46f 	.word	0x0800c46f
 800b620:	00000000 	.word	0x00000000
 800b624:	0800b3a3 	.word	0x0800b3a3

0800b628 <_printf_common>:
 800b628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b62c:	4616      	mov	r6, r2
 800b62e:	4699      	mov	r9, r3
 800b630:	688a      	ldr	r2, [r1, #8]
 800b632:	690b      	ldr	r3, [r1, #16]
 800b634:	4607      	mov	r7, r0
 800b636:	4293      	cmp	r3, r2
 800b638:	bfb8      	it	lt
 800b63a:	4613      	movlt	r3, r2
 800b63c:	6033      	str	r3, [r6, #0]
 800b63e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b642:	460c      	mov	r4, r1
 800b644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b648:	b10a      	cbz	r2, 800b64e <_printf_common+0x26>
 800b64a:	3301      	adds	r3, #1
 800b64c:	6033      	str	r3, [r6, #0]
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	0699      	lsls	r1, r3, #26
 800b652:	bf42      	ittt	mi
 800b654:	6833      	ldrmi	r3, [r6, #0]
 800b656:	3302      	addmi	r3, #2
 800b658:	6033      	strmi	r3, [r6, #0]
 800b65a:	6825      	ldr	r5, [r4, #0]
 800b65c:	f015 0506 	ands.w	r5, r5, #6
 800b660:	d106      	bne.n	800b670 <_printf_common+0x48>
 800b662:	f104 0a19 	add.w	sl, r4, #25
 800b666:	68e3      	ldr	r3, [r4, #12]
 800b668:	6832      	ldr	r2, [r6, #0]
 800b66a:	1a9b      	subs	r3, r3, r2
 800b66c:	42ab      	cmp	r3, r5
 800b66e:	dc28      	bgt.n	800b6c2 <_printf_common+0x9a>
 800b670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b674:	1e13      	subs	r3, r2, #0
 800b676:	6822      	ldr	r2, [r4, #0]
 800b678:	bf18      	it	ne
 800b67a:	2301      	movne	r3, #1
 800b67c:	0692      	lsls	r2, r2, #26
 800b67e:	d42d      	bmi.n	800b6dc <_printf_common+0xb4>
 800b680:	4649      	mov	r1, r9
 800b682:	4638      	mov	r0, r7
 800b684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b688:	47c0      	blx	r8
 800b68a:	3001      	adds	r0, #1
 800b68c:	d020      	beq.n	800b6d0 <_printf_common+0xa8>
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	68e5      	ldr	r5, [r4, #12]
 800b692:	f003 0306 	and.w	r3, r3, #6
 800b696:	2b04      	cmp	r3, #4
 800b698:	bf18      	it	ne
 800b69a:	2500      	movne	r5, #0
 800b69c:	6832      	ldr	r2, [r6, #0]
 800b69e:	f04f 0600 	mov.w	r6, #0
 800b6a2:	68a3      	ldr	r3, [r4, #8]
 800b6a4:	bf08      	it	eq
 800b6a6:	1aad      	subeq	r5, r5, r2
 800b6a8:	6922      	ldr	r2, [r4, #16]
 800b6aa:	bf08      	it	eq
 800b6ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	bfc4      	itt	gt
 800b6b4:	1a9b      	subgt	r3, r3, r2
 800b6b6:	18ed      	addgt	r5, r5, r3
 800b6b8:	341a      	adds	r4, #26
 800b6ba:	42b5      	cmp	r5, r6
 800b6bc:	d11a      	bne.n	800b6f4 <_printf_common+0xcc>
 800b6be:	2000      	movs	r0, #0
 800b6c0:	e008      	b.n	800b6d4 <_printf_common+0xac>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	4652      	mov	r2, sl
 800b6c6:	4649      	mov	r1, r9
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	47c0      	blx	r8
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	d103      	bne.n	800b6d8 <_printf_common+0xb0>
 800b6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d8:	3501      	adds	r5, #1
 800b6da:	e7c4      	b.n	800b666 <_printf_common+0x3e>
 800b6dc:	2030      	movs	r0, #48	; 0x30
 800b6de:	18e1      	adds	r1, r4, r3
 800b6e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6e4:	1c5a      	adds	r2, r3, #1
 800b6e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6ea:	4422      	add	r2, r4
 800b6ec:	3302      	adds	r3, #2
 800b6ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6f2:	e7c5      	b.n	800b680 <_printf_common+0x58>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	4622      	mov	r2, r4
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	47c0      	blx	r8
 800b6fe:	3001      	adds	r0, #1
 800b700:	d0e6      	beq.n	800b6d0 <_printf_common+0xa8>
 800b702:	3601      	adds	r6, #1
 800b704:	e7d9      	b.n	800b6ba <_printf_common+0x92>
	...

0800b708 <_printf_i>:
 800b708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b70c:	7e0f      	ldrb	r7, [r1, #24]
 800b70e:	4691      	mov	r9, r2
 800b710:	2f78      	cmp	r7, #120	; 0x78
 800b712:	4680      	mov	r8, r0
 800b714:	460c      	mov	r4, r1
 800b716:	469a      	mov	sl, r3
 800b718:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b71a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b71e:	d807      	bhi.n	800b730 <_printf_i+0x28>
 800b720:	2f62      	cmp	r7, #98	; 0x62
 800b722:	d80a      	bhi.n	800b73a <_printf_i+0x32>
 800b724:	2f00      	cmp	r7, #0
 800b726:	f000 80d9 	beq.w	800b8dc <_printf_i+0x1d4>
 800b72a:	2f58      	cmp	r7, #88	; 0x58
 800b72c:	f000 80a4 	beq.w	800b878 <_printf_i+0x170>
 800b730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b738:	e03a      	b.n	800b7b0 <_printf_i+0xa8>
 800b73a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b73e:	2b15      	cmp	r3, #21
 800b740:	d8f6      	bhi.n	800b730 <_printf_i+0x28>
 800b742:	a101      	add	r1, pc, #4	; (adr r1, 800b748 <_printf_i+0x40>)
 800b744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b748:	0800b7a1 	.word	0x0800b7a1
 800b74c:	0800b7b5 	.word	0x0800b7b5
 800b750:	0800b731 	.word	0x0800b731
 800b754:	0800b731 	.word	0x0800b731
 800b758:	0800b731 	.word	0x0800b731
 800b75c:	0800b731 	.word	0x0800b731
 800b760:	0800b7b5 	.word	0x0800b7b5
 800b764:	0800b731 	.word	0x0800b731
 800b768:	0800b731 	.word	0x0800b731
 800b76c:	0800b731 	.word	0x0800b731
 800b770:	0800b731 	.word	0x0800b731
 800b774:	0800b8c3 	.word	0x0800b8c3
 800b778:	0800b7e5 	.word	0x0800b7e5
 800b77c:	0800b8a5 	.word	0x0800b8a5
 800b780:	0800b731 	.word	0x0800b731
 800b784:	0800b731 	.word	0x0800b731
 800b788:	0800b8e5 	.word	0x0800b8e5
 800b78c:	0800b731 	.word	0x0800b731
 800b790:	0800b7e5 	.word	0x0800b7e5
 800b794:	0800b731 	.word	0x0800b731
 800b798:	0800b731 	.word	0x0800b731
 800b79c:	0800b8ad 	.word	0x0800b8ad
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	1d1a      	adds	r2, r3, #4
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	602a      	str	r2, [r5, #0]
 800b7a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e0a4      	b.n	800b8fe <_printf_i+0x1f6>
 800b7b4:	6820      	ldr	r0, [r4, #0]
 800b7b6:	6829      	ldr	r1, [r5, #0]
 800b7b8:	0606      	lsls	r6, r0, #24
 800b7ba:	f101 0304 	add.w	r3, r1, #4
 800b7be:	d50a      	bpl.n	800b7d6 <_printf_i+0xce>
 800b7c0:	680e      	ldr	r6, [r1, #0]
 800b7c2:	602b      	str	r3, [r5, #0]
 800b7c4:	2e00      	cmp	r6, #0
 800b7c6:	da03      	bge.n	800b7d0 <_printf_i+0xc8>
 800b7c8:	232d      	movs	r3, #45	; 0x2d
 800b7ca:	4276      	negs	r6, r6
 800b7cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7d0:	230a      	movs	r3, #10
 800b7d2:	485e      	ldr	r0, [pc, #376]	; (800b94c <_printf_i+0x244>)
 800b7d4:	e019      	b.n	800b80a <_printf_i+0x102>
 800b7d6:	680e      	ldr	r6, [r1, #0]
 800b7d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7dc:	602b      	str	r3, [r5, #0]
 800b7de:	bf18      	it	ne
 800b7e0:	b236      	sxthne	r6, r6
 800b7e2:	e7ef      	b.n	800b7c4 <_printf_i+0xbc>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	6820      	ldr	r0, [r4, #0]
 800b7e8:	1d19      	adds	r1, r3, #4
 800b7ea:	6029      	str	r1, [r5, #0]
 800b7ec:	0601      	lsls	r1, r0, #24
 800b7ee:	d501      	bpl.n	800b7f4 <_printf_i+0xec>
 800b7f0:	681e      	ldr	r6, [r3, #0]
 800b7f2:	e002      	b.n	800b7fa <_printf_i+0xf2>
 800b7f4:	0646      	lsls	r6, r0, #25
 800b7f6:	d5fb      	bpl.n	800b7f0 <_printf_i+0xe8>
 800b7f8:	881e      	ldrh	r6, [r3, #0]
 800b7fa:	2f6f      	cmp	r7, #111	; 0x6f
 800b7fc:	bf0c      	ite	eq
 800b7fe:	2308      	moveq	r3, #8
 800b800:	230a      	movne	r3, #10
 800b802:	4852      	ldr	r0, [pc, #328]	; (800b94c <_printf_i+0x244>)
 800b804:	2100      	movs	r1, #0
 800b806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b80a:	6865      	ldr	r5, [r4, #4]
 800b80c:	2d00      	cmp	r5, #0
 800b80e:	bfa8      	it	ge
 800b810:	6821      	ldrge	r1, [r4, #0]
 800b812:	60a5      	str	r5, [r4, #8]
 800b814:	bfa4      	itt	ge
 800b816:	f021 0104 	bicge.w	r1, r1, #4
 800b81a:	6021      	strge	r1, [r4, #0]
 800b81c:	b90e      	cbnz	r6, 800b822 <_printf_i+0x11a>
 800b81e:	2d00      	cmp	r5, #0
 800b820:	d04d      	beq.n	800b8be <_printf_i+0x1b6>
 800b822:	4615      	mov	r5, r2
 800b824:	fbb6 f1f3 	udiv	r1, r6, r3
 800b828:	fb03 6711 	mls	r7, r3, r1, r6
 800b82c:	5dc7      	ldrb	r7, [r0, r7]
 800b82e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b832:	4637      	mov	r7, r6
 800b834:	42bb      	cmp	r3, r7
 800b836:	460e      	mov	r6, r1
 800b838:	d9f4      	bls.n	800b824 <_printf_i+0x11c>
 800b83a:	2b08      	cmp	r3, #8
 800b83c:	d10b      	bne.n	800b856 <_printf_i+0x14e>
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	07de      	lsls	r6, r3, #31
 800b842:	d508      	bpl.n	800b856 <_printf_i+0x14e>
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	6861      	ldr	r1, [r4, #4]
 800b848:	4299      	cmp	r1, r3
 800b84a:	bfde      	ittt	le
 800b84c:	2330      	movle	r3, #48	; 0x30
 800b84e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b852:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b856:	1b52      	subs	r2, r2, r5
 800b858:	6122      	str	r2, [r4, #16]
 800b85a:	464b      	mov	r3, r9
 800b85c:	4621      	mov	r1, r4
 800b85e:	4640      	mov	r0, r8
 800b860:	f8cd a000 	str.w	sl, [sp]
 800b864:	aa03      	add	r2, sp, #12
 800b866:	f7ff fedf 	bl	800b628 <_printf_common>
 800b86a:	3001      	adds	r0, #1
 800b86c:	d14c      	bne.n	800b908 <_printf_i+0x200>
 800b86e:	f04f 30ff 	mov.w	r0, #4294967295
 800b872:	b004      	add	sp, #16
 800b874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b878:	4834      	ldr	r0, [pc, #208]	; (800b94c <_printf_i+0x244>)
 800b87a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b87e:	6829      	ldr	r1, [r5, #0]
 800b880:	6823      	ldr	r3, [r4, #0]
 800b882:	f851 6b04 	ldr.w	r6, [r1], #4
 800b886:	6029      	str	r1, [r5, #0]
 800b888:	061d      	lsls	r5, r3, #24
 800b88a:	d514      	bpl.n	800b8b6 <_printf_i+0x1ae>
 800b88c:	07df      	lsls	r7, r3, #31
 800b88e:	bf44      	itt	mi
 800b890:	f043 0320 	orrmi.w	r3, r3, #32
 800b894:	6023      	strmi	r3, [r4, #0]
 800b896:	b91e      	cbnz	r6, 800b8a0 <_printf_i+0x198>
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	f023 0320 	bic.w	r3, r3, #32
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	2310      	movs	r3, #16
 800b8a2:	e7af      	b.n	800b804 <_printf_i+0xfc>
 800b8a4:	6823      	ldr	r3, [r4, #0]
 800b8a6:	f043 0320 	orr.w	r3, r3, #32
 800b8aa:	6023      	str	r3, [r4, #0]
 800b8ac:	2378      	movs	r3, #120	; 0x78
 800b8ae:	4828      	ldr	r0, [pc, #160]	; (800b950 <_printf_i+0x248>)
 800b8b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8b4:	e7e3      	b.n	800b87e <_printf_i+0x176>
 800b8b6:	0659      	lsls	r1, r3, #25
 800b8b8:	bf48      	it	mi
 800b8ba:	b2b6      	uxthmi	r6, r6
 800b8bc:	e7e6      	b.n	800b88c <_printf_i+0x184>
 800b8be:	4615      	mov	r5, r2
 800b8c0:	e7bb      	b.n	800b83a <_printf_i+0x132>
 800b8c2:	682b      	ldr	r3, [r5, #0]
 800b8c4:	6826      	ldr	r6, [r4, #0]
 800b8c6:	1d18      	adds	r0, r3, #4
 800b8c8:	6961      	ldr	r1, [r4, #20]
 800b8ca:	6028      	str	r0, [r5, #0]
 800b8cc:	0635      	lsls	r5, r6, #24
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	d501      	bpl.n	800b8d6 <_printf_i+0x1ce>
 800b8d2:	6019      	str	r1, [r3, #0]
 800b8d4:	e002      	b.n	800b8dc <_printf_i+0x1d4>
 800b8d6:	0670      	lsls	r0, r6, #25
 800b8d8:	d5fb      	bpl.n	800b8d2 <_printf_i+0x1ca>
 800b8da:	8019      	strh	r1, [r3, #0]
 800b8dc:	2300      	movs	r3, #0
 800b8de:	4615      	mov	r5, r2
 800b8e0:	6123      	str	r3, [r4, #16]
 800b8e2:	e7ba      	b.n	800b85a <_printf_i+0x152>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	1d1a      	adds	r2, r3, #4
 800b8ea:	602a      	str	r2, [r5, #0]
 800b8ec:	681d      	ldr	r5, [r3, #0]
 800b8ee:	6862      	ldr	r2, [r4, #4]
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	f000 fb23 	bl	800bf3c <memchr>
 800b8f6:	b108      	cbz	r0, 800b8fc <_printf_i+0x1f4>
 800b8f8:	1b40      	subs	r0, r0, r5
 800b8fa:	6060      	str	r0, [r4, #4]
 800b8fc:	6863      	ldr	r3, [r4, #4]
 800b8fe:	6123      	str	r3, [r4, #16]
 800b900:	2300      	movs	r3, #0
 800b902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b906:	e7a8      	b.n	800b85a <_printf_i+0x152>
 800b908:	462a      	mov	r2, r5
 800b90a:	4649      	mov	r1, r9
 800b90c:	4640      	mov	r0, r8
 800b90e:	6923      	ldr	r3, [r4, #16]
 800b910:	47d0      	blx	sl
 800b912:	3001      	adds	r0, #1
 800b914:	d0ab      	beq.n	800b86e <_printf_i+0x166>
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	079b      	lsls	r3, r3, #30
 800b91a:	d413      	bmi.n	800b944 <_printf_i+0x23c>
 800b91c:	68e0      	ldr	r0, [r4, #12]
 800b91e:	9b03      	ldr	r3, [sp, #12]
 800b920:	4298      	cmp	r0, r3
 800b922:	bfb8      	it	lt
 800b924:	4618      	movlt	r0, r3
 800b926:	e7a4      	b.n	800b872 <_printf_i+0x16a>
 800b928:	2301      	movs	r3, #1
 800b92a:	4632      	mov	r2, r6
 800b92c:	4649      	mov	r1, r9
 800b92e:	4640      	mov	r0, r8
 800b930:	47d0      	blx	sl
 800b932:	3001      	adds	r0, #1
 800b934:	d09b      	beq.n	800b86e <_printf_i+0x166>
 800b936:	3501      	adds	r5, #1
 800b938:	68e3      	ldr	r3, [r4, #12]
 800b93a:	9903      	ldr	r1, [sp, #12]
 800b93c:	1a5b      	subs	r3, r3, r1
 800b93e:	42ab      	cmp	r3, r5
 800b940:	dcf2      	bgt.n	800b928 <_printf_i+0x220>
 800b942:	e7eb      	b.n	800b91c <_printf_i+0x214>
 800b944:	2500      	movs	r5, #0
 800b946:	f104 0619 	add.w	r6, r4, #25
 800b94a:	e7f5      	b.n	800b938 <_printf_i+0x230>
 800b94c:	0800c476 	.word	0x0800c476
 800b950:	0800c487 	.word	0x0800c487

0800b954 <_sbrk_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	2300      	movs	r3, #0
 800b958:	4d05      	ldr	r5, [pc, #20]	; (800b970 <_sbrk_r+0x1c>)
 800b95a:	4604      	mov	r4, r0
 800b95c:	4608      	mov	r0, r1
 800b95e:	602b      	str	r3, [r5, #0]
 800b960:	f7f6 f852 	bl	8001a08 <_sbrk>
 800b964:	1c43      	adds	r3, r0, #1
 800b966:	d102      	bne.n	800b96e <_sbrk_r+0x1a>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	b103      	cbz	r3, 800b96e <_sbrk_r+0x1a>
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	20000bb0 	.word	0x20000bb0

0800b974 <__swbuf_r>:
 800b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b976:	460e      	mov	r6, r1
 800b978:	4614      	mov	r4, r2
 800b97a:	4605      	mov	r5, r0
 800b97c:	b118      	cbz	r0, 800b986 <__swbuf_r+0x12>
 800b97e:	6983      	ldr	r3, [r0, #24]
 800b980:	b90b      	cbnz	r3, 800b986 <__swbuf_r+0x12>
 800b982:	f000 f9d5 	bl	800bd30 <__sinit>
 800b986:	4b21      	ldr	r3, [pc, #132]	; (800ba0c <__swbuf_r+0x98>)
 800b988:	429c      	cmp	r4, r3
 800b98a:	d12b      	bne.n	800b9e4 <__swbuf_r+0x70>
 800b98c:	686c      	ldr	r4, [r5, #4]
 800b98e:	69a3      	ldr	r3, [r4, #24]
 800b990:	60a3      	str	r3, [r4, #8]
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	071a      	lsls	r2, r3, #28
 800b996:	d52f      	bpl.n	800b9f8 <__swbuf_r+0x84>
 800b998:	6923      	ldr	r3, [r4, #16]
 800b99a:	b36b      	cbz	r3, 800b9f8 <__swbuf_r+0x84>
 800b99c:	6923      	ldr	r3, [r4, #16]
 800b99e:	6820      	ldr	r0, [r4, #0]
 800b9a0:	b2f6      	uxtb	r6, r6
 800b9a2:	1ac0      	subs	r0, r0, r3
 800b9a4:	6963      	ldr	r3, [r4, #20]
 800b9a6:	4637      	mov	r7, r6
 800b9a8:	4283      	cmp	r3, r0
 800b9aa:	dc04      	bgt.n	800b9b6 <__swbuf_r+0x42>
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f000 f92a 	bl	800bc08 <_fflush_r>
 800b9b4:	bb30      	cbnz	r0, 800ba04 <__swbuf_r+0x90>
 800b9b6:	68a3      	ldr	r3, [r4, #8]
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	60a3      	str	r3, [r4, #8]
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	6022      	str	r2, [r4, #0]
 800b9c4:	701e      	strb	r6, [r3, #0]
 800b9c6:	6963      	ldr	r3, [r4, #20]
 800b9c8:	4283      	cmp	r3, r0
 800b9ca:	d004      	beq.n	800b9d6 <__swbuf_r+0x62>
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	07db      	lsls	r3, r3, #31
 800b9d0:	d506      	bpl.n	800b9e0 <__swbuf_r+0x6c>
 800b9d2:	2e0a      	cmp	r6, #10
 800b9d4:	d104      	bne.n	800b9e0 <__swbuf_r+0x6c>
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f000 f915 	bl	800bc08 <_fflush_r>
 800b9de:	b988      	cbnz	r0, 800ba04 <__swbuf_r+0x90>
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ba10 <__swbuf_r+0x9c>)
 800b9e6:	429c      	cmp	r4, r3
 800b9e8:	d101      	bne.n	800b9ee <__swbuf_r+0x7a>
 800b9ea:	68ac      	ldr	r4, [r5, #8]
 800b9ec:	e7cf      	b.n	800b98e <__swbuf_r+0x1a>
 800b9ee:	4b09      	ldr	r3, [pc, #36]	; (800ba14 <__swbuf_r+0xa0>)
 800b9f0:	429c      	cmp	r4, r3
 800b9f2:	bf08      	it	eq
 800b9f4:	68ec      	ldreq	r4, [r5, #12]
 800b9f6:	e7ca      	b.n	800b98e <__swbuf_r+0x1a>
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 f80c 	bl	800ba18 <__swsetup_r>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d0cb      	beq.n	800b99c <__swbuf_r+0x28>
 800ba04:	f04f 37ff 	mov.w	r7, #4294967295
 800ba08:	e7ea      	b.n	800b9e0 <__swbuf_r+0x6c>
 800ba0a:	bf00      	nop
 800ba0c:	0800c4b8 	.word	0x0800c4b8
 800ba10:	0800c4d8 	.word	0x0800c4d8
 800ba14:	0800c498 	.word	0x0800c498

0800ba18 <__swsetup_r>:
 800ba18:	4b32      	ldr	r3, [pc, #200]	; (800bae4 <__swsetup_r+0xcc>)
 800ba1a:	b570      	push	{r4, r5, r6, lr}
 800ba1c:	681d      	ldr	r5, [r3, #0]
 800ba1e:	4606      	mov	r6, r0
 800ba20:	460c      	mov	r4, r1
 800ba22:	b125      	cbz	r5, 800ba2e <__swsetup_r+0x16>
 800ba24:	69ab      	ldr	r3, [r5, #24]
 800ba26:	b913      	cbnz	r3, 800ba2e <__swsetup_r+0x16>
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f000 f981 	bl	800bd30 <__sinit>
 800ba2e:	4b2e      	ldr	r3, [pc, #184]	; (800bae8 <__swsetup_r+0xd0>)
 800ba30:	429c      	cmp	r4, r3
 800ba32:	d10f      	bne.n	800ba54 <__swsetup_r+0x3c>
 800ba34:	686c      	ldr	r4, [r5, #4]
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba3c:	0719      	lsls	r1, r3, #28
 800ba3e:	d42c      	bmi.n	800ba9a <__swsetup_r+0x82>
 800ba40:	06dd      	lsls	r5, r3, #27
 800ba42:	d411      	bmi.n	800ba68 <__swsetup_r+0x50>
 800ba44:	2309      	movs	r3, #9
 800ba46:	6033      	str	r3, [r6, #0]
 800ba48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba50:	81a3      	strh	r3, [r4, #12]
 800ba52:	e03e      	b.n	800bad2 <__swsetup_r+0xba>
 800ba54:	4b25      	ldr	r3, [pc, #148]	; (800baec <__swsetup_r+0xd4>)
 800ba56:	429c      	cmp	r4, r3
 800ba58:	d101      	bne.n	800ba5e <__swsetup_r+0x46>
 800ba5a:	68ac      	ldr	r4, [r5, #8]
 800ba5c:	e7eb      	b.n	800ba36 <__swsetup_r+0x1e>
 800ba5e:	4b24      	ldr	r3, [pc, #144]	; (800baf0 <__swsetup_r+0xd8>)
 800ba60:	429c      	cmp	r4, r3
 800ba62:	bf08      	it	eq
 800ba64:	68ec      	ldreq	r4, [r5, #12]
 800ba66:	e7e6      	b.n	800ba36 <__swsetup_r+0x1e>
 800ba68:	0758      	lsls	r0, r3, #29
 800ba6a:	d512      	bpl.n	800ba92 <__swsetup_r+0x7a>
 800ba6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba6e:	b141      	cbz	r1, 800ba82 <__swsetup_r+0x6a>
 800ba70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba74:	4299      	cmp	r1, r3
 800ba76:	d002      	beq.n	800ba7e <__swsetup_r+0x66>
 800ba78:	4630      	mov	r0, r6
 800ba7a:	f7ff fa45 	bl	800af08 <_free_r>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	6363      	str	r3, [r4, #52]	; 0x34
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba88:	81a3      	strh	r3, [r4, #12]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	6063      	str	r3, [r4, #4]
 800ba8e:	6923      	ldr	r3, [r4, #16]
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	89a3      	ldrh	r3, [r4, #12]
 800ba94:	f043 0308 	orr.w	r3, r3, #8
 800ba98:	81a3      	strh	r3, [r4, #12]
 800ba9a:	6923      	ldr	r3, [r4, #16]
 800ba9c:	b94b      	cbnz	r3, 800bab2 <__swsetup_r+0x9a>
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800baa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baa8:	d003      	beq.n	800bab2 <__swsetup_r+0x9a>
 800baaa:	4621      	mov	r1, r4
 800baac:	4630      	mov	r0, r6
 800baae:	f000 fa05 	bl	800bebc <__smakebuf_r>
 800bab2:	89a0      	ldrh	r0, [r4, #12]
 800bab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bab8:	f010 0301 	ands.w	r3, r0, #1
 800babc:	d00a      	beq.n	800bad4 <__swsetup_r+0xbc>
 800babe:	2300      	movs	r3, #0
 800bac0:	60a3      	str	r3, [r4, #8]
 800bac2:	6963      	ldr	r3, [r4, #20]
 800bac4:	425b      	negs	r3, r3
 800bac6:	61a3      	str	r3, [r4, #24]
 800bac8:	6923      	ldr	r3, [r4, #16]
 800baca:	b943      	cbnz	r3, 800bade <__swsetup_r+0xc6>
 800bacc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bad0:	d1ba      	bne.n	800ba48 <__swsetup_r+0x30>
 800bad2:	bd70      	pop	{r4, r5, r6, pc}
 800bad4:	0781      	lsls	r1, r0, #30
 800bad6:	bf58      	it	pl
 800bad8:	6963      	ldrpl	r3, [r4, #20]
 800bada:	60a3      	str	r3, [r4, #8]
 800badc:	e7f4      	b.n	800bac8 <__swsetup_r+0xb0>
 800bade:	2000      	movs	r0, #0
 800bae0:	e7f7      	b.n	800bad2 <__swsetup_r+0xba>
 800bae2:	bf00      	nop
 800bae4:	2000016c 	.word	0x2000016c
 800bae8:	0800c4b8 	.word	0x0800c4b8
 800baec:	0800c4d8 	.word	0x0800c4d8
 800baf0:	0800c498 	.word	0x0800c498

0800baf4 <abort>:
 800baf4:	2006      	movs	r0, #6
 800baf6:	b508      	push	{r3, lr}
 800baf8:	f000 faba 	bl	800c070 <raise>
 800bafc:	2001      	movs	r0, #1
 800bafe:	f7f5 ff10 	bl	8001922 <_exit>
	...

0800bb04 <__sflush_r>:
 800bb04:	898a      	ldrh	r2, [r1, #12]
 800bb06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb08:	4605      	mov	r5, r0
 800bb0a:	0710      	lsls	r0, r2, #28
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	d457      	bmi.n	800bbc0 <__sflush_r+0xbc>
 800bb10:	684b      	ldr	r3, [r1, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	dc04      	bgt.n	800bb20 <__sflush_r+0x1c>
 800bb16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	dc01      	bgt.n	800bb20 <__sflush_r+0x1c>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb22:	2e00      	cmp	r6, #0
 800bb24:	d0fa      	beq.n	800bb1c <__sflush_r+0x18>
 800bb26:	2300      	movs	r3, #0
 800bb28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb2c:	682f      	ldr	r7, [r5, #0]
 800bb2e:	602b      	str	r3, [r5, #0]
 800bb30:	d032      	beq.n	800bb98 <__sflush_r+0x94>
 800bb32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb34:	89a3      	ldrh	r3, [r4, #12]
 800bb36:	075a      	lsls	r2, r3, #29
 800bb38:	d505      	bpl.n	800bb46 <__sflush_r+0x42>
 800bb3a:	6863      	ldr	r3, [r4, #4]
 800bb3c:	1ac0      	subs	r0, r0, r3
 800bb3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb40:	b10b      	cbz	r3, 800bb46 <__sflush_r+0x42>
 800bb42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb44:	1ac0      	subs	r0, r0, r3
 800bb46:	2300      	movs	r3, #0
 800bb48:	4602      	mov	r2, r0
 800bb4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	6a21      	ldr	r1, [r4, #32]
 800bb50:	47b0      	blx	r6
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	89a3      	ldrh	r3, [r4, #12]
 800bb56:	d106      	bne.n	800bb66 <__sflush_r+0x62>
 800bb58:	6829      	ldr	r1, [r5, #0]
 800bb5a:	291d      	cmp	r1, #29
 800bb5c:	d82c      	bhi.n	800bbb8 <__sflush_r+0xb4>
 800bb5e:	4a29      	ldr	r2, [pc, #164]	; (800bc04 <__sflush_r+0x100>)
 800bb60:	40ca      	lsrs	r2, r1
 800bb62:	07d6      	lsls	r6, r2, #31
 800bb64:	d528      	bpl.n	800bbb8 <__sflush_r+0xb4>
 800bb66:	2200      	movs	r2, #0
 800bb68:	6062      	str	r2, [r4, #4]
 800bb6a:	6922      	ldr	r2, [r4, #16]
 800bb6c:	04d9      	lsls	r1, r3, #19
 800bb6e:	6022      	str	r2, [r4, #0]
 800bb70:	d504      	bpl.n	800bb7c <__sflush_r+0x78>
 800bb72:	1c42      	adds	r2, r0, #1
 800bb74:	d101      	bne.n	800bb7a <__sflush_r+0x76>
 800bb76:	682b      	ldr	r3, [r5, #0]
 800bb78:	b903      	cbnz	r3, 800bb7c <__sflush_r+0x78>
 800bb7a:	6560      	str	r0, [r4, #84]	; 0x54
 800bb7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb7e:	602f      	str	r7, [r5, #0]
 800bb80:	2900      	cmp	r1, #0
 800bb82:	d0cb      	beq.n	800bb1c <__sflush_r+0x18>
 800bb84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb88:	4299      	cmp	r1, r3
 800bb8a:	d002      	beq.n	800bb92 <__sflush_r+0x8e>
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f7ff f9bb 	bl	800af08 <_free_r>
 800bb92:	2000      	movs	r0, #0
 800bb94:	6360      	str	r0, [r4, #52]	; 0x34
 800bb96:	e7c2      	b.n	800bb1e <__sflush_r+0x1a>
 800bb98:	6a21      	ldr	r1, [r4, #32]
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	47b0      	blx	r6
 800bba0:	1c41      	adds	r1, r0, #1
 800bba2:	d1c7      	bne.n	800bb34 <__sflush_r+0x30>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d0c4      	beq.n	800bb34 <__sflush_r+0x30>
 800bbaa:	2b1d      	cmp	r3, #29
 800bbac:	d001      	beq.n	800bbb2 <__sflush_r+0xae>
 800bbae:	2b16      	cmp	r3, #22
 800bbb0:	d101      	bne.n	800bbb6 <__sflush_r+0xb2>
 800bbb2:	602f      	str	r7, [r5, #0]
 800bbb4:	e7b2      	b.n	800bb1c <__sflush_r+0x18>
 800bbb6:	89a3      	ldrh	r3, [r4, #12]
 800bbb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbbc:	81a3      	strh	r3, [r4, #12]
 800bbbe:	e7ae      	b.n	800bb1e <__sflush_r+0x1a>
 800bbc0:	690f      	ldr	r7, [r1, #16]
 800bbc2:	2f00      	cmp	r7, #0
 800bbc4:	d0aa      	beq.n	800bb1c <__sflush_r+0x18>
 800bbc6:	0793      	lsls	r3, r2, #30
 800bbc8:	bf18      	it	ne
 800bbca:	2300      	movne	r3, #0
 800bbcc:	680e      	ldr	r6, [r1, #0]
 800bbce:	bf08      	it	eq
 800bbd0:	694b      	ldreq	r3, [r1, #20]
 800bbd2:	1bf6      	subs	r6, r6, r7
 800bbd4:	600f      	str	r7, [r1, #0]
 800bbd6:	608b      	str	r3, [r1, #8]
 800bbd8:	2e00      	cmp	r6, #0
 800bbda:	dd9f      	ble.n	800bb1c <__sflush_r+0x18>
 800bbdc:	4633      	mov	r3, r6
 800bbde:	463a      	mov	r2, r7
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	6a21      	ldr	r1, [r4, #32]
 800bbe4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bbe8:	47e0      	blx	ip
 800bbea:	2800      	cmp	r0, #0
 800bbec:	dc06      	bgt.n	800bbfc <__sflush_r+0xf8>
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf8:	81a3      	strh	r3, [r4, #12]
 800bbfa:	e790      	b.n	800bb1e <__sflush_r+0x1a>
 800bbfc:	4407      	add	r7, r0
 800bbfe:	1a36      	subs	r6, r6, r0
 800bc00:	e7ea      	b.n	800bbd8 <__sflush_r+0xd4>
 800bc02:	bf00      	nop
 800bc04:	20400001 	.word	0x20400001

0800bc08 <_fflush_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	690b      	ldr	r3, [r1, #16]
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	460c      	mov	r4, r1
 800bc10:	b913      	cbnz	r3, 800bc18 <_fflush_r+0x10>
 800bc12:	2500      	movs	r5, #0
 800bc14:	4628      	mov	r0, r5
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	b118      	cbz	r0, 800bc22 <_fflush_r+0x1a>
 800bc1a:	6983      	ldr	r3, [r0, #24]
 800bc1c:	b90b      	cbnz	r3, 800bc22 <_fflush_r+0x1a>
 800bc1e:	f000 f887 	bl	800bd30 <__sinit>
 800bc22:	4b14      	ldr	r3, [pc, #80]	; (800bc74 <_fflush_r+0x6c>)
 800bc24:	429c      	cmp	r4, r3
 800bc26:	d11b      	bne.n	800bc60 <_fflush_r+0x58>
 800bc28:	686c      	ldr	r4, [r5, #4]
 800bc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d0ef      	beq.n	800bc12 <_fflush_r+0xa>
 800bc32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc34:	07d0      	lsls	r0, r2, #31
 800bc36:	d404      	bmi.n	800bc42 <_fflush_r+0x3a>
 800bc38:	0599      	lsls	r1, r3, #22
 800bc3a:	d402      	bmi.n	800bc42 <_fflush_r+0x3a>
 800bc3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc3e:	f000 f915 	bl	800be6c <__retarget_lock_acquire_recursive>
 800bc42:	4628      	mov	r0, r5
 800bc44:	4621      	mov	r1, r4
 800bc46:	f7ff ff5d 	bl	800bb04 <__sflush_r>
 800bc4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	07da      	lsls	r2, r3, #31
 800bc50:	d4e0      	bmi.n	800bc14 <_fflush_r+0xc>
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	059b      	lsls	r3, r3, #22
 800bc56:	d4dd      	bmi.n	800bc14 <_fflush_r+0xc>
 800bc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc5a:	f000 f908 	bl	800be6e <__retarget_lock_release_recursive>
 800bc5e:	e7d9      	b.n	800bc14 <_fflush_r+0xc>
 800bc60:	4b05      	ldr	r3, [pc, #20]	; (800bc78 <_fflush_r+0x70>)
 800bc62:	429c      	cmp	r4, r3
 800bc64:	d101      	bne.n	800bc6a <_fflush_r+0x62>
 800bc66:	68ac      	ldr	r4, [r5, #8]
 800bc68:	e7df      	b.n	800bc2a <_fflush_r+0x22>
 800bc6a:	4b04      	ldr	r3, [pc, #16]	; (800bc7c <_fflush_r+0x74>)
 800bc6c:	429c      	cmp	r4, r3
 800bc6e:	bf08      	it	eq
 800bc70:	68ec      	ldreq	r4, [r5, #12]
 800bc72:	e7da      	b.n	800bc2a <_fflush_r+0x22>
 800bc74:	0800c4b8 	.word	0x0800c4b8
 800bc78:	0800c4d8 	.word	0x0800c4d8
 800bc7c:	0800c498 	.word	0x0800c498

0800bc80 <std>:
 800bc80:	2300      	movs	r3, #0
 800bc82:	b510      	push	{r4, lr}
 800bc84:	4604      	mov	r4, r0
 800bc86:	e9c0 3300 	strd	r3, r3, [r0]
 800bc8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc8e:	6083      	str	r3, [r0, #8]
 800bc90:	8181      	strh	r1, [r0, #12]
 800bc92:	6643      	str	r3, [r0, #100]	; 0x64
 800bc94:	81c2      	strh	r2, [r0, #14]
 800bc96:	6183      	str	r3, [r0, #24]
 800bc98:	4619      	mov	r1, r3
 800bc9a:	2208      	movs	r2, #8
 800bc9c:	305c      	adds	r0, #92	; 0x5c
 800bc9e:	f7fe ffe9 	bl	800ac74 <memset>
 800bca2:	4b05      	ldr	r3, [pc, #20]	; (800bcb8 <std+0x38>)
 800bca4:	6224      	str	r4, [r4, #32]
 800bca6:	6263      	str	r3, [r4, #36]	; 0x24
 800bca8:	4b04      	ldr	r3, [pc, #16]	; (800bcbc <std+0x3c>)
 800bcaa:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcac:	4b04      	ldr	r3, [pc, #16]	; (800bcc0 <std+0x40>)
 800bcae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcb0:	4b04      	ldr	r3, [pc, #16]	; (800bcc4 <std+0x44>)
 800bcb2:	6323      	str	r3, [r4, #48]	; 0x30
 800bcb4:	bd10      	pop	{r4, pc}
 800bcb6:	bf00      	nop
 800bcb8:	0800c0a9 	.word	0x0800c0a9
 800bcbc:	0800c0cb 	.word	0x0800c0cb
 800bcc0:	0800c103 	.word	0x0800c103
 800bcc4:	0800c127 	.word	0x0800c127

0800bcc8 <_cleanup_r>:
 800bcc8:	4901      	ldr	r1, [pc, #4]	; (800bcd0 <_cleanup_r+0x8>)
 800bcca:	f000 b8af 	b.w	800be2c <_fwalk_reent>
 800bcce:	bf00      	nop
 800bcd0:	0800bc09 	.word	0x0800bc09

0800bcd4 <__sfmoreglue>:
 800bcd4:	2268      	movs	r2, #104	; 0x68
 800bcd6:	b570      	push	{r4, r5, r6, lr}
 800bcd8:	1e4d      	subs	r5, r1, #1
 800bcda:	4355      	muls	r5, r2
 800bcdc:	460e      	mov	r6, r1
 800bcde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bce2:	f7ff f979 	bl	800afd8 <_malloc_r>
 800bce6:	4604      	mov	r4, r0
 800bce8:	b140      	cbz	r0, 800bcfc <__sfmoreglue+0x28>
 800bcea:	2100      	movs	r1, #0
 800bcec:	e9c0 1600 	strd	r1, r6, [r0]
 800bcf0:	300c      	adds	r0, #12
 800bcf2:	60a0      	str	r0, [r4, #8]
 800bcf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bcf8:	f7fe ffbc 	bl	800ac74 <memset>
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}

0800bd00 <__sfp_lock_acquire>:
 800bd00:	4801      	ldr	r0, [pc, #4]	; (800bd08 <__sfp_lock_acquire+0x8>)
 800bd02:	f000 b8b3 	b.w	800be6c <__retarget_lock_acquire_recursive>
 800bd06:	bf00      	nop
 800bd08:	20000bad 	.word	0x20000bad

0800bd0c <__sfp_lock_release>:
 800bd0c:	4801      	ldr	r0, [pc, #4]	; (800bd14 <__sfp_lock_release+0x8>)
 800bd0e:	f000 b8ae 	b.w	800be6e <__retarget_lock_release_recursive>
 800bd12:	bf00      	nop
 800bd14:	20000bad 	.word	0x20000bad

0800bd18 <__sinit_lock_acquire>:
 800bd18:	4801      	ldr	r0, [pc, #4]	; (800bd20 <__sinit_lock_acquire+0x8>)
 800bd1a:	f000 b8a7 	b.w	800be6c <__retarget_lock_acquire_recursive>
 800bd1e:	bf00      	nop
 800bd20:	20000bae 	.word	0x20000bae

0800bd24 <__sinit_lock_release>:
 800bd24:	4801      	ldr	r0, [pc, #4]	; (800bd2c <__sinit_lock_release+0x8>)
 800bd26:	f000 b8a2 	b.w	800be6e <__retarget_lock_release_recursive>
 800bd2a:	bf00      	nop
 800bd2c:	20000bae 	.word	0x20000bae

0800bd30 <__sinit>:
 800bd30:	b510      	push	{r4, lr}
 800bd32:	4604      	mov	r4, r0
 800bd34:	f7ff fff0 	bl	800bd18 <__sinit_lock_acquire>
 800bd38:	69a3      	ldr	r3, [r4, #24]
 800bd3a:	b11b      	cbz	r3, 800bd44 <__sinit+0x14>
 800bd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd40:	f7ff bff0 	b.w	800bd24 <__sinit_lock_release>
 800bd44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd48:	6523      	str	r3, [r4, #80]	; 0x50
 800bd4a:	4b13      	ldr	r3, [pc, #76]	; (800bd98 <__sinit+0x68>)
 800bd4c:	4a13      	ldr	r2, [pc, #76]	; (800bd9c <__sinit+0x6c>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd52:	42a3      	cmp	r3, r4
 800bd54:	bf08      	it	eq
 800bd56:	2301      	moveq	r3, #1
 800bd58:	4620      	mov	r0, r4
 800bd5a:	bf08      	it	eq
 800bd5c:	61a3      	streq	r3, [r4, #24]
 800bd5e:	f000 f81f 	bl	800bda0 <__sfp>
 800bd62:	6060      	str	r0, [r4, #4]
 800bd64:	4620      	mov	r0, r4
 800bd66:	f000 f81b 	bl	800bda0 <__sfp>
 800bd6a:	60a0      	str	r0, [r4, #8]
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 f817 	bl	800bda0 <__sfp>
 800bd72:	2200      	movs	r2, #0
 800bd74:	2104      	movs	r1, #4
 800bd76:	60e0      	str	r0, [r4, #12]
 800bd78:	6860      	ldr	r0, [r4, #4]
 800bd7a:	f7ff ff81 	bl	800bc80 <std>
 800bd7e:	2201      	movs	r2, #1
 800bd80:	2109      	movs	r1, #9
 800bd82:	68a0      	ldr	r0, [r4, #8]
 800bd84:	f7ff ff7c 	bl	800bc80 <std>
 800bd88:	2202      	movs	r2, #2
 800bd8a:	2112      	movs	r1, #18
 800bd8c:	68e0      	ldr	r0, [r4, #12]
 800bd8e:	f7ff ff77 	bl	800bc80 <std>
 800bd92:	2301      	movs	r3, #1
 800bd94:	61a3      	str	r3, [r4, #24]
 800bd96:	e7d1      	b.n	800bd3c <__sinit+0xc>
 800bd98:	0800c2b0 	.word	0x0800c2b0
 800bd9c:	0800bcc9 	.word	0x0800bcc9

0800bda0 <__sfp>:
 800bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda2:	4607      	mov	r7, r0
 800bda4:	f7ff ffac 	bl	800bd00 <__sfp_lock_acquire>
 800bda8:	4b1e      	ldr	r3, [pc, #120]	; (800be24 <__sfp+0x84>)
 800bdaa:	681e      	ldr	r6, [r3, #0]
 800bdac:	69b3      	ldr	r3, [r6, #24]
 800bdae:	b913      	cbnz	r3, 800bdb6 <__sfp+0x16>
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f7ff ffbd 	bl	800bd30 <__sinit>
 800bdb6:	3648      	adds	r6, #72	; 0x48
 800bdb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	d503      	bpl.n	800bdc8 <__sfp+0x28>
 800bdc0:	6833      	ldr	r3, [r6, #0]
 800bdc2:	b30b      	cbz	r3, 800be08 <__sfp+0x68>
 800bdc4:	6836      	ldr	r6, [r6, #0]
 800bdc6:	e7f7      	b.n	800bdb8 <__sfp+0x18>
 800bdc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bdcc:	b9d5      	cbnz	r5, 800be04 <__sfp+0x64>
 800bdce:	4b16      	ldr	r3, [pc, #88]	; (800be28 <__sfp+0x88>)
 800bdd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bdd4:	60e3      	str	r3, [r4, #12]
 800bdd6:	6665      	str	r5, [r4, #100]	; 0x64
 800bdd8:	f000 f847 	bl	800be6a <__retarget_lock_init_recursive>
 800bddc:	f7ff ff96 	bl	800bd0c <__sfp_lock_release>
 800bde0:	2208      	movs	r2, #8
 800bde2:	4629      	mov	r1, r5
 800bde4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bde8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bdec:	6025      	str	r5, [r4, #0]
 800bdee:	61a5      	str	r5, [r4, #24]
 800bdf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bdf4:	f7fe ff3e 	bl	800ac74 <memset>
 800bdf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bdfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be00:	4620      	mov	r0, r4
 800be02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be04:	3468      	adds	r4, #104	; 0x68
 800be06:	e7d9      	b.n	800bdbc <__sfp+0x1c>
 800be08:	2104      	movs	r1, #4
 800be0a:	4638      	mov	r0, r7
 800be0c:	f7ff ff62 	bl	800bcd4 <__sfmoreglue>
 800be10:	4604      	mov	r4, r0
 800be12:	6030      	str	r0, [r6, #0]
 800be14:	2800      	cmp	r0, #0
 800be16:	d1d5      	bne.n	800bdc4 <__sfp+0x24>
 800be18:	f7ff ff78 	bl	800bd0c <__sfp_lock_release>
 800be1c:	230c      	movs	r3, #12
 800be1e:	603b      	str	r3, [r7, #0]
 800be20:	e7ee      	b.n	800be00 <__sfp+0x60>
 800be22:	bf00      	nop
 800be24:	0800c2b0 	.word	0x0800c2b0
 800be28:	ffff0001 	.word	0xffff0001

0800be2c <_fwalk_reent>:
 800be2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be30:	4606      	mov	r6, r0
 800be32:	4688      	mov	r8, r1
 800be34:	2700      	movs	r7, #0
 800be36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be3e:	f1b9 0901 	subs.w	r9, r9, #1
 800be42:	d505      	bpl.n	800be50 <_fwalk_reent+0x24>
 800be44:	6824      	ldr	r4, [r4, #0]
 800be46:	2c00      	cmp	r4, #0
 800be48:	d1f7      	bne.n	800be3a <_fwalk_reent+0xe>
 800be4a:	4638      	mov	r0, r7
 800be4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be50:	89ab      	ldrh	r3, [r5, #12]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d907      	bls.n	800be66 <_fwalk_reent+0x3a>
 800be56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be5a:	3301      	adds	r3, #1
 800be5c:	d003      	beq.n	800be66 <_fwalk_reent+0x3a>
 800be5e:	4629      	mov	r1, r5
 800be60:	4630      	mov	r0, r6
 800be62:	47c0      	blx	r8
 800be64:	4307      	orrs	r7, r0
 800be66:	3568      	adds	r5, #104	; 0x68
 800be68:	e7e9      	b.n	800be3e <_fwalk_reent+0x12>

0800be6a <__retarget_lock_init_recursive>:
 800be6a:	4770      	bx	lr

0800be6c <__retarget_lock_acquire_recursive>:
 800be6c:	4770      	bx	lr

0800be6e <__retarget_lock_release_recursive>:
 800be6e:	4770      	bx	lr

0800be70 <__swhatbuf_r>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	460e      	mov	r6, r1
 800be74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be78:	4614      	mov	r4, r2
 800be7a:	2900      	cmp	r1, #0
 800be7c:	461d      	mov	r5, r3
 800be7e:	b096      	sub	sp, #88	; 0x58
 800be80:	da08      	bge.n	800be94 <__swhatbuf_r+0x24>
 800be82:	2200      	movs	r2, #0
 800be84:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be88:	602a      	str	r2, [r5, #0]
 800be8a:	061a      	lsls	r2, r3, #24
 800be8c:	d410      	bmi.n	800beb0 <__swhatbuf_r+0x40>
 800be8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be92:	e00e      	b.n	800beb2 <__swhatbuf_r+0x42>
 800be94:	466a      	mov	r2, sp
 800be96:	f000 f96d 	bl	800c174 <_fstat_r>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	dbf1      	blt.n	800be82 <__swhatbuf_r+0x12>
 800be9e:	9a01      	ldr	r2, [sp, #4]
 800bea0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bea4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bea8:	425a      	negs	r2, r3
 800beaa:	415a      	adcs	r2, r3
 800beac:	602a      	str	r2, [r5, #0]
 800beae:	e7ee      	b.n	800be8e <__swhatbuf_r+0x1e>
 800beb0:	2340      	movs	r3, #64	; 0x40
 800beb2:	2000      	movs	r0, #0
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	b016      	add	sp, #88	; 0x58
 800beb8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bebc <__smakebuf_r>:
 800bebc:	898b      	ldrh	r3, [r1, #12]
 800bebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bec0:	079d      	lsls	r5, r3, #30
 800bec2:	4606      	mov	r6, r0
 800bec4:	460c      	mov	r4, r1
 800bec6:	d507      	bpl.n	800bed8 <__smakebuf_r+0x1c>
 800bec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	6123      	str	r3, [r4, #16]
 800bed0:	2301      	movs	r3, #1
 800bed2:	6163      	str	r3, [r4, #20]
 800bed4:	b002      	add	sp, #8
 800bed6:	bd70      	pop	{r4, r5, r6, pc}
 800bed8:	466a      	mov	r2, sp
 800beda:	ab01      	add	r3, sp, #4
 800bedc:	f7ff ffc8 	bl	800be70 <__swhatbuf_r>
 800bee0:	9900      	ldr	r1, [sp, #0]
 800bee2:	4605      	mov	r5, r0
 800bee4:	4630      	mov	r0, r6
 800bee6:	f7ff f877 	bl	800afd8 <_malloc_r>
 800beea:	b948      	cbnz	r0, 800bf00 <__smakebuf_r+0x44>
 800beec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bef0:	059a      	lsls	r2, r3, #22
 800bef2:	d4ef      	bmi.n	800bed4 <__smakebuf_r+0x18>
 800bef4:	f023 0303 	bic.w	r3, r3, #3
 800bef8:	f043 0302 	orr.w	r3, r3, #2
 800befc:	81a3      	strh	r3, [r4, #12]
 800befe:	e7e3      	b.n	800bec8 <__smakebuf_r+0xc>
 800bf00:	4b0d      	ldr	r3, [pc, #52]	; (800bf38 <__smakebuf_r+0x7c>)
 800bf02:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf04:	89a3      	ldrh	r3, [r4, #12]
 800bf06:	6020      	str	r0, [r4, #0]
 800bf08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf0c:	81a3      	strh	r3, [r4, #12]
 800bf0e:	9b00      	ldr	r3, [sp, #0]
 800bf10:	6120      	str	r0, [r4, #16]
 800bf12:	6163      	str	r3, [r4, #20]
 800bf14:	9b01      	ldr	r3, [sp, #4]
 800bf16:	b15b      	cbz	r3, 800bf30 <__smakebuf_r+0x74>
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf1e:	f000 f93b 	bl	800c198 <_isatty_r>
 800bf22:	b128      	cbz	r0, 800bf30 <__smakebuf_r+0x74>
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	f023 0303 	bic.w	r3, r3, #3
 800bf2a:	f043 0301 	orr.w	r3, r3, #1
 800bf2e:	81a3      	strh	r3, [r4, #12]
 800bf30:	89a0      	ldrh	r0, [r4, #12]
 800bf32:	4305      	orrs	r5, r0
 800bf34:	81a5      	strh	r5, [r4, #12]
 800bf36:	e7cd      	b.n	800bed4 <__smakebuf_r+0x18>
 800bf38:	0800bcc9 	.word	0x0800bcc9

0800bf3c <memchr>:
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	b510      	push	{r4, lr}
 800bf40:	b2c9      	uxtb	r1, r1
 800bf42:	4402      	add	r2, r0
 800bf44:	4293      	cmp	r3, r2
 800bf46:	4618      	mov	r0, r3
 800bf48:	d101      	bne.n	800bf4e <memchr+0x12>
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	e003      	b.n	800bf56 <memchr+0x1a>
 800bf4e:	7804      	ldrb	r4, [r0, #0]
 800bf50:	3301      	adds	r3, #1
 800bf52:	428c      	cmp	r4, r1
 800bf54:	d1f6      	bne.n	800bf44 <memchr+0x8>
 800bf56:	bd10      	pop	{r4, pc}

0800bf58 <memcpy>:
 800bf58:	440a      	add	r2, r1
 800bf5a:	4291      	cmp	r1, r2
 800bf5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf60:	d100      	bne.n	800bf64 <memcpy+0xc>
 800bf62:	4770      	bx	lr
 800bf64:	b510      	push	{r4, lr}
 800bf66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf6a:	4291      	cmp	r1, r2
 800bf6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf70:	d1f9      	bne.n	800bf66 <memcpy+0xe>
 800bf72:	bd10      	pop	{r4, pc}

0800bf74 <memmove>:
 800bf74:	4288      	cmp	r0, r1
 800bf76:	b510      	push	{r4, lr}
 800bf78:	eb01 0402 	add.w	r4, r1, r2
 800bf7c:	d902      	bls.n	800bf84 <memmove+0x10>
 800bf7e:	4284      	cmp	r4, r0
 800bf80:	4623      	mov	r3, r4
 800bf82:	d807      	bhi.n	800bf94 <memmove+0x20>
 800bf84:	1e43      	subs	r3, r0, #1
 800bf86:	42a1      	cmp	r1, r4
 800bf88:	d008      	beq.n	800bf9c <memmove+0x28>
 800bf8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf92:	e7f8      	b.n	800bf86 <memmove+0x12>
 800bf94:	4601      	mov	r1, r0
 800bf96:	4402      	add	r2, r0
 800bf98:	428a      	cmp	r2, r1
 800bf9a:	d100      	bne.n	800bf9e <memmove+0x2a>
 800bf9c:	bd10      	pop	{r4, pc}
 800bf9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfa6:	e7f7      	b.n	800bf98 <memmove+0x24>

0800bfa8 <__malloc_lock>:
 800bfa8:	4801      	ldr	r0, [pc, #4]	; (800bfb0 <__malloc_lock+0x8>)
 800bfaa:	f7ff bf5f 	b.w	800be6c <__retarget_lock_acquire_recursive>
 800bfae:	bf00      	nop
 800bfb0:	20000bac 	.word	0x20000bac

0800bfb4 <__malloc_unlock>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	; (800bfbc <__malloc_unlock+0x8>)
 800bfb6:	f7ff bf5a 	b.w	800be6e <__retarget_lock_release_recursive>
 800bfba:	bf00      	nop
 800bfbc:	20000bac 	.word	0x20000bac

0800bfc0 <_realloc_r>:
 800bfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc4:	4680      	mov	r8, r0
 800bfc6:	4614      	mov	r4, r2
 800bfc8:	460e      	mov	r6, r1
 800bfca:	b921      	cbnz	r1, 800bfd6 <_realloc_r+0x16>
 800bfcc:	4611      	mov	r1, r2
 800bfce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd2:	f7ff b801 	b.w	800afd8 <_malloc_r>
 800bfd6:	b92a      	cbnz	r2, 800bfe4 <_realloc_r+0x24>
 800bfd8:	f7fe ff96 	bl	800af08 <_free_r>
 800bfdc:	4625      	mov	r5, r4
 800bfde:	4628      	mov	r0, r5
 800bfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe4:	f000 f8fa 	bl	800c1dc <_malloc_usable_size_r>
 800bfe8:	4284      	cmp	r4, r0
 800bfea:	4607      	mov	r7, r0
 800bfec:	d802      	bhi.n	800bff4 <_realloc_r+0x34>
 800bfee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bff2:	d812      	bhi.n	800c01a <_realloc_r+0x5a>
 800bff4:	4621      	mov	r1, r4
 800bff6:	4640      	mov	r0, r8
 800bff8:	f7fe ffee 	bl	800afd8 <_malloc_r>
 800bffc:	4605      	mov	r5, r0
 800bffe:	2800      	cmp	r0, #0
 800c000:	d0ed      	beq.n	800bfde <_realloc_r+0x1e>
 800c002:	42bc      	cmp	r4, r7
 800c004:	4622      	mov	r2, r4
 800c006:	4631      	mov	r1, r6
 800c008:	bf28      	it	cs
 800c00a:	463a      	movcs	r2, r7
 800c00c:	f7ff ffa4 	bl	800bf58 <memcpy>
 800c010:	4631      	mov	r1, r6
 800c012:	4640      	mov	r0, r8
 800c014:	f7fe ff78 	bl	800af08 <_free_r>
 800c018:	e7e1      	b.n	800bfde <_realloc_r+0x1e>
 800c01a:	4635      	mov	r5, r6
 800c01c:	e7df      	b.n	800bfde <_realloc_r+0x1e>

0800c01e <_raise_r>:
 800c01e:	291f      	cmp	r1, #31
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4604      	mov	r4, r0
 800c024:	460d      	mov	r5, r1
 800c026:	d904      	bls.n	800c032 <_raise_r+0x14>
 800c028:	2316      	movs	r3, #22
 800c02a:	6003      	str	r3, [r0, #0]
 800c02c:	f04f 30ff 	mov.w	r0, #4294967295
 800c030:	bd38      	pop	{r3, r4, r5, pc}
 800c032:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c034:	b112      	cbz	r2, 800c03c <_raise_r+0x1e>
 800c036:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c03a:	b94b      	cbnz	r3, 800c050 <_raise_r+0x32>
 800c03c:	4620      	mov	r0, r4
 800c03e:	f000 f831 	bl	800c0a4 <_getpid_r>
 800c042:	462a      	mov	r2, r5
 800c044:	4601      	mov	r1, r0
 800c046:	4620      	mov	r0, r4
 800c048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c04c:	f000 b818 	b.w	800c080 <_kill_r>
 800c050:	2b01      	cmp	r3, #1
 800c052:	d00a      	beq.n	800c06a <_raise_r+0x4c>
 800c054:	1c59      	adds	r1, r3, #1
 800c056:	d103      	bne.n	800c060 <_raise_r+0x42>
 800c058:	2316      	movs	r3, #22
 800c05a:	6003      	str	r3, [r0, #0]
 800c05c:	2001      	movs	r0, #1
 800c05e:	e7e7      	b.n	800c030 <_raise_r+0x12>
 800c060:	2400      	movs	r4, #0
 800c062:	4628      	mov	r0, r5
 800c064:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c068:	4798      	blx	r3
 800c06a:	2000      	movs	r0, #0
 800c06c:	e7e0      	b.n	800c030 <_raise_r+0x12>
	...

0800c070 <raise>:
 800c070:	4b02      	ldr	r3, [pc, #8]	; (800c07c <raise+0xc>)
 800c072:	4601      	mov	r1, r0
 800c074:	6818      	ldr	r0, [r3, #0]
 800c076:	f7ff bfd2 	b.w	800c01e <_raise_r>
 800c07a:	bf00      	nop
 800c07c:	2000016c 	.word	0x2000016c

0800c080 <_kill_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	2300      	movs	r3, #0
 800c084:	4d06      	ldr	r5, [pc, #24]	; (800c0a0 <_kill_r+0x20>)
 800c086:	4604      	mov	r4, r0
 800c088:	4608      	mov	r0, r1
 800c08a:	4611      	mov	r1, r2
 800c08c:	602b      	str	r3, [r5, #0]
 800c08e:	f7f5 fc38 	bl	8001902 <_kill>
 800c092:	1c43      	adds	r3, r0, #1
 800c094:	d102      	bne.n	800c09c <_kill_r+0x1c>
 800c096:	682b      	ldr	r3, [r5, #0]
 800c098:	b103      	cbz	r3, 800c09c <_kill_r+0x1c>
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	bd38      	pop	{r3, r4, r5, pc}
 800c09e:	bf00      	nop
 800c0a0:	20000bb0 	.word	0x20000bb0

0800c0a4 <_getpid_r>:
 800c0a4:	f7f5 bc26 	b.w	80018f4 <_getpid>

0800c0a8 <__sread>:
 800c0a8:	b510      	push	{r4, lr}
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b0:	f000 f89c 	bl	800c1ec <_read_r>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	bfab      	itete	ge
 800c0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800c0bc:	181b      	addge	r3, r3, r0
 800c0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0c2:	bfac      	ite	ge
 800c0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0c6:	81a3      	strhlt	r3, [r4, #12]
 800c0c8:	bd10      	pop	{r4, pc}

0800c0ca <__swrite>:
 800c0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ce:	461f      	mov	r7, r3
 800c0d0:	898b      	ldrh	r3, [r1, #12]
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	05db      	lsls	r3, r3, #23
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	4616      	mov	r6, r2
 800c0da:	d505      	bpl.n	800c0e8 <__swrite+0x1e>
 800c0dc:	2302      	movs	r3, #2
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e4:	f000 f868 	bl	800c1b8 <_lseek_r>
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	4632      	mov	r2, r6
 800c0ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	463b      	mov	r3, r7
 800c0f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fe:	f000 b817 	b.w	800c130 <_write_r>

0800c102 <__sseek>:
 800c102:	b510      	push	{r4, lr}
 800c104:	460c      	mov	r4, r1
 800c106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c10a:	f000 f855 	bl	800c1b8 <_lseek_r>
 800c10e:	1c43      	adds	r3, r0, #1
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	bf15      	itete	ne
 800c114:	6560      	strne	r0, [r4, #84]	; 0x54
 800c116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c11e:	81a3      	strheq	r3, [r4, #12]
 800c120:	bf18      	it	ne
 800c122:	81a3      	strhne	r3, [r4, #12]
 800c124:	bd10      	pop	{r4, pc}

0800c126 <__sclose>:
 800c126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c12a:	f000 b813 	b.w	800c154 <_close_r>
	...

0800c130 <_write_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	4604      	mov	r4, r0
 800c134:	4608      	mov	r0, r1
 800c136:	4611      	mov	r1, r2
 800c138:	2200      	movs	r2, #0
 800c13a:	4d05      	ldr	r5, [pc, #20]	; (800c150 <_write_r+0x20>)
 800c13c:	602a      	str	r2, [r5, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	f7f5 fc16 	bl	8001970 <_write>
 800c144:	1c43      	adds	r3, r0, #1
 800c146:	d102      	bne.n	800c14e <_write_r+0x1e>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	b103      	cbz	r3, 800c14e <_write_r+0x1e>
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	20000bb0 	.word	0x20000bb0

0800c154 <_close_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	2300      	movs	r3, #0
 800c158:	4d05      	ldr	r5, [pc, #20]	; (800c170 <_close_r+0x1c>)
 800c15a:	4604      	mov	r4, r0
 800c15c:	4608      	mov	r0, r1
 800c15e:	602b      	str	r3, [r5, #0]
 800c160:	f7f5 fc22 	bl	80019a8 <_close>
 800c164:	1c43      	adds	r3, r0, #1
 800c166:	d102      	bne.n	800c16e <_close_r+0x1a>
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	b103      	cbz	r3, 800c16e <_close_r+0x1a>
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	bd38      	pop	{r3, r4, r5, pc}
 800c170:	20000bb0 	.word	0x20000bb0

0800c174 <_fstat_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	2300      	movs	r3, #0
 800c178:	4d06      	ldr	r5, [pc, #24]	; (800c194 <_fstat_r+0x20>)
 800c17a:	4604      	mov	r4, r0
 800c17c:	4608      	mov	r0, r1
 800c17e:	4611      	mov	r1, r2
 800c180:	602b      	str	r3, [r5, #0]
 800c182:	f7f5 fc1c 	bl	80019be <_fstat>
 800c186:	1c43      	adds	r3, r0, #1
 800c188:	d102      	bne.n	800c190 <_fstat_r+0x1c>
 800c18a:	682b      	ldr	r3, [r5, #0]
 800c18c:	b103      	cbz	r3, 800c190 <_fstat_r+0x1c>
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	bd38      	pop	{r3, r4, r5, pc}
 800c192:	bf00      	nop
 800c194:	20000bb0 	.word	0x20000bb0

0800c198 <_isatty_r>:
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	2300      	movs	r3, #0
 800c19c:	4d05      	ldr	r5, [pc, #20]	; (800c1b4 <_isatty_r+0x1c>)
 800c19e:	4604      	mov	r4, r0
 800c1a0:	4608      	mov	r0, r1
 800c1a2:	602b      	str	r3, [r5, #0]
 800c1a4:	f7f5 fc1a 	bl	80019dc <_isatty>
 800c1a8:	1c43      	adds	r3, r0, #1
 800c1aa:	d102      	bne.n	800c1b2 <_isatty_r+0x1a>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	b103      	cbz	r3, 800c1b2 <_isatty_r+0x1a>
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	bd38      	pop	{r3, r4, r5, pc}
 800c1b4:	20000bb0 	.word	0x20000bb0

0800c1b8 <_lseek_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	4611      	mov	r1, r2
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4d05      	ldr	r5, [pc, #20]	; (800c1d8 <_lseek_r+0x20>)
 800c1c4:	602a      	str	r2, [r5, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	f7f5 fc12 	bl	80019f0 <_lseek>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d102      	bne.n	800c1d6 <_lseek_r+0x1e>
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	b103      	cbz	r3, 800c1d6 <_lseek_r+0x1e>
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	bd38      	pop	{r3, r4, r5, pc}
 800c1d8:	20000bb0 	.word	0x20000bb0

0800c1dc <_malloc_usable_size_r>:
 800c1dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1e0:	1f18      	subs	r0, r3, #4
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	bfbc      	itt	lt
 800c1e6:	580b      	ldrlt	r3, [r1, r0]
 800c1e8:	18c0      	addlt	r0, r0, r3
 800c1ea:	4770      	bx	lr

0800c1ec <_read_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	4d05      	ldr	r5, [pc, #20]	; (800c20c <_read_r+0x20>)
 800c1f8:	602a      	str	r2, [r5, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f7f5 fb9b 	bl	8001936 <_read>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_read_r+0x1e>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b103      	cbz	r3, 800c20a <_read_r+0x1e>
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	20000bb0 	.word	0x20000bb0

0800c210 <_init>:
 800c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c212:	bf00      	nop
 800c214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c216:	bc08      	pop	{r3}
 800c218:	469e      	mov	lr, r3
 800c21a:	4770      	bx	lr

0800c21c <_fini>:
 800c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21e:	bf00      	nop
 800c220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c222:	bc08      	pop	{r3}
 800c224:	469e      	mov	lr, r3
 800c226:	4770      	bx	lr
