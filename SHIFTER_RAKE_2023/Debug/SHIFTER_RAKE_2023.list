
SHIFTER_RAKE_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c214  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800c324  0800c324  0001c324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c618  0800c618  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c618  0800c618  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c618  0800c618  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c618  0800c618  0001c618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c61c  0800c61c  0001c61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800c620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ec  200001d0  0800c7f0  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  0800c7f0  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137ae  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003972  00000000  00000000  000339a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00037320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00038518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbfd  00000000  00000000  00039578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016155  00000000  00000000  00055175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8ea  00000000  00000000  0006b2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fabb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000557c  00000000  00000000  000fac04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c30c 	.word	0x0800c30c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800c30c 	.word	0x0800c30c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800077e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078c:	d020      	beq.n	80007d0 <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 800078e:	68f9      	ldr	r1, [r7, #12]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	b2ca      	uxtb	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	0a19      	lsrs	r1, r3, #8
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3301      	adds	r3, #1
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	0c19      	lsrs	r1, r3, #16
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3302      	adds	r3, #2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	0e19      	lsrs	r1, r3, #24
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3303      	adds	r3, #3
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	3304      	adds	r3, #4
 80007ce:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d6:	d1cf      	bne.n	8000778 <read_flash+0xc>
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <save_to_flash>:

void save_to_flash(uint8_t *data){
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e8:	b08f      	sub	sp, #60	; 0x3c
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	466b      	mov	r3, sp
 80007f0:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcac 	bl	8000150 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	089e      	lsrs	r6, r3, #2
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fca7 	bl	8000150 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	18f1      	adds	r1, r6, r3
 8000814:	460b      	mov	r3, r1
 8000816:	3b01      	subs	r3, #1
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
 800081a:	2300      	movs	r3, #0
 800081c:	4688      	mov	r8, r1
 800081e:	4699      	mov	r9, r3
 8000820:	f04f 0200 	mov.w	r2, #0
 8000824:	f04f 0300 	mov.w	r3, #0
 8000828:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800082c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000830:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000834:	2300      	movs	r3, #0
 8000836:	460c      	mov	r4, r1
 8000838:	461d      	mov	r5, r3
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	016b      	lsls	r3, r5, #5
 8000844:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000848:	0162      	lsls	r2, r4, #5
 800084a:	008b      	lsls	r3, r1, #2
 800084c:	3307      	adds	r3, #7
 800084e:	08db      	lsrs	r3, r3, #3
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	ebad 0d03 	sub.w	sp, sp, r3
 8000856:	466b      	mov	r3, sp
 8000858:	3303      	adds	r3, #3
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8000860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000862:	f7ff fc75 	bl	8000150 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800086e:	f00a fa7f 	bl	800ad70 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000876:	f00a faa3 	bl	800adc0 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800087a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800087c:	f7ff fc68 	bl	8000150 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8000884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000886:	f7ff fc63 	bl	8000150 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff fc56 	bl	8000150 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 80008a8:	b29c      	uxth	r4, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fc50 	bl	8000150 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4423      	add	r3, r4
 80008c4:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80008c6:	857b      	strh	r3, [r7, #42]	; 0x2a
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80008c8:	f002 f9b2 	bl	8002c30 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 80008cc:	f002 f9e6 	bl	8002c9c <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.PageAddress = FLASH_STORAGE;
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <save_to_flash+0x178>)
 80008d6:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbPages = pages;
 80008d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008da:	b29b      	uxth	r3, r3
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError;

	volatile uint32_t write_cnt=0, index=0;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]

	volatile HAL_StatusTypeDef status;
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80008e6:	f107 0214 	add.w	r2, r7, #20
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 fab1 	bl	8002e58 <HAL_FLASHEx_Erase>
 80008f6:	4603      	mov	r3, r0
 80008f8:	72fb      	strb	r3, [r7, #11]
	while(index < data_length)
 80008fa:	e020      	b.n	800093e <save_to_flash+0x15a>
	{
		if (status == HAL_OK){
 80008fc:	7afb      	ldrb	r3, [r7, #11]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11c      	bne.n	800093e <save_to_flash+0x15a>
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800090a:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000916:	2200      	movs	r2, #0
 8000918:	469a      	mov	sl, r3
 800091a:	4693      	mov	fp, r2
 800091c:	4652      	mov	r2, sl
 800091e:	465b      	mov	r3, fp
 8000920:	2002      	movs	r0, #2
 8000922:	f002 f915 	bl	8002b50 <HAL_FLASH_Program>
 8000926:	4603      	mov	r3, r0
 8000928:	72fb      	strb	r3, [r7, #11]
			if(status == HAL_OK){
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d105      	bne.n	800093e <save_to_flash+0x15a>
				write_cnt += 4;
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	3304      	adds	r3, #4
 8000936:	613b      	str	r3, [r7, #16]
				index++;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
	while(index < data_length)
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000942:	429a      	cmp	r2, r3
 8000944:	d3da      	bcc.n	80008fc <save_to_flash+0x118>
			}
		}
	}

	HAL_FLASH_OB_Lock();
 8000946:	f002 f9c5 	bl	8002cd4 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 800094a:	f002 f997 	bl	8002c7c <HAL_FLASH_Lock>
 800094e:	f8d7 d000 	ldr.w	sp, [r7]
}
 8000952:	bf00      	nop
 8000954:	373c      	adds	r7, #60	; 0x3c
 8000956:	46bd      	mov	sp, r7
 8000958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800095c:	08019000 	.word	0x08019000

08000960 <LerADCS>:
uint16_t speed_div_y[2] = {1117, 2824};					//  -		-		-		-		-		-		-		-  y
uint16_t ADCValue[3] = {0, 0, 0};
int8_t buffer2[6];
uint8_t rx_buffer[2];

void LerADCS(){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	//Este trecho testa somente um spi por round, evitando perca de tempo
	if (spi_detection == 1){
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <LerADCS+0x70>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d10c      	bne.n	8000986 <LerADCS+0x26>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);  //descarga para seleção do G27
 800096c:	2301      	movs	r3, #1
 800096e:	2202      	movs	r2, #2
 8000970:	4918      	ldr	r1, [pc, #96]	; (80009d4 <LerADCS+0x74>)
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <LerADCS+0x78>)
 8000974:	f004 fee4 	bl	8005740 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 1);
 8000978:	2301      	movs	r3, #1
 800097a:	2202      	movs	r2, #2
 800097c:	4915      	ldr	r1, [pc, #84]	; (80009d4 <LerADCS+0x74>)
 800097e:	4816      	ldr	r0, [pc, #88]	; (80009d8 <LerADCS+0x78>)
 8000980:	f004 fede 	bl	8005740 <HAL_SPI_Receive>
 8000984:	e00b      	b.n	800099e <LerADCS+0x3e>
		 }
	else {
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);  // descarga para seleção do G25
 8000986:	2301      	movs	r3, #1
 8000988:	2202      	movs	r2, #2
 800098a:	4912      	ldr	r1, [pc, #72]	; (80009d4 <LerADCS+0x74>)
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <LerADCS+0x7c>)
 800098e:	f004 fed7 	bl	8005740 <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);
 8000992:	2301      	movs	r3, #1
 8000994:	2202      	movs	r2, #2
 8000996:	490f      	ldr	r1, [pc, #60]	; (80009d4 <LerADCS+0x74>)
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <LerADCS+0x7c>)
 800099a:	f004 fed1 	bl	8005740 <HAL_SPI_Receive>
	 }
	//Este trecho salva o valor da tensao do capacitor em cada teste
	if (spi_detection == 1){						// se estiver conectado g25 este valor reduz, pois o jumper entre os pinos 1 [spi1] e 9 [cap] faz isso.
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <LerADCS+0x70>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d107      	bne.n	80009b6 <LerADCS+0x56>
	  spi_values[0] = ADCValue[2];
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <LerADCS+0x80>)
 80009a8:	889a      	ldrh	r2, [r3, #4]
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <LerADCS+0x84>)
 80009ac:	801a      	strh	r2, [r3, #0]
	  spi_detection = 2;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <LerADCS+0x70>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e006      	b.n	80009c4 <LerADCS+0x64>
	}
	else{											// se estiver conectado g27 este valor reduz, pois o jumper entre os pinos 7 [spi2] e 9 [cap] faz isso.
	  spi_values[1] = ADCValue[2];									// quando excitado spi2 gera reducao na tensao do cap caso esteja conectado o g25
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <LerADCS+0x80>)
 80009b8:	889a      	ldrh	r2, [r3, #4]
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <LerADCS+0x84>)
 80009bc:	805a      	strh	r2, [r3, #2]
	  spi_detection = 1;
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <LerADCS+0x70>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[0]), 100);
  //  HAL_UART_Transmit(&huart1, buffer, sprintf(buffer, "%d ", ADCValue[1]), 100);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", ADCValue[2]), 100);
  //HAL_UART_Transmit(&huart1, "      ", 6, 100);
  //HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  HAL_Delay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f001 f961 	bl	8001c8c <HAL_Delay>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000370 	.word	0x20000370
 80009d8:	20000260 	.word	0x20000260
 80009dc:	200002b8 	.word	0x200002b8
 80009e0:	20000360 	.word	0x20000360
 80009e4:	2000035c 	.word	0x2000035c

080009e8 <LerSPI>:

void LerSPI(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	4839      	ldr	r0, [pc, #228]	; (8000ad8 <LerSPI+0xf0>)
 80009f4:	f002 fc73 	bl	80032de <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f001 f947 	bl	8001c8c <HAL_Delay>
//  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 50);
  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", spi_values[0]), 100);
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <LerSPI+0xf4>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4936      	ldr	r1, [pc, #216]	; (8000ae0 <LerSPI+0xf8>)
 8000a06:	4837      	ldr	r0, [pc, #220]	; (8000ae4 <LerSPI+0xfc>)
 8000a08:	f00a f9ba 	bl	800ad80 <siprintf>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	2364      	movs	r3, #100	; 0x64
 8000a12:	4934      	ldr	r1, [pc, #208]	; (8000ae4 <LerSPI+0xfc>)
 8000a14:	4834      	ldr	r0, [pc, #208]	; (8000ae8 <LerSPI+0x100>)
 8000a16:	f005 fb90 	bl	800613a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", spi_values[1]), 100);
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <LerSPI+0xf4>)
 8000a1c:	885b      	ldrh	r3, [r3, #2]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	492f      	ldr	r1, [pc, #188]	; (8000ae0 <LerSPI+0xf8>)
 8000a22:	4830      	ldr	r0, [pc, #192]	; (8000ae4 <LerSPI+0xfc>)
 8000a24:	f00a f9ac 	bl	800ad80 <siprintf>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	2364      	movs	r3, #100	; 0x64
 8000a2e:	492d      	ldr	r1, [pc, #180]	; (8000ae4 <LerSPI+0xfc>)
 8000a30:	482d      	ldr	r0, [pc, #180]	; (8000ae8 <LerSPI+0x100>)
 8000a32:	f005 fb82 	bl	800613a <HAL_UART_Transmit>

  if (spi_values[0] - spi_values[1] > -10 && spi_values[0] - spi_values[1] < 10){
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <LerSPI+0xf4>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b27      	ldr	r3, [pc, #156]	; (8000adc <LerSPI+0xf4>)
 8000a3e:	885b      	ldrh	r3, [r3, #2]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	f113 0f09 	cmn.w	r3, #9
 8000a46:	db0e      	blt.n	8000a66 <LerSPI+0x7e>
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <LerSPI+0xf4>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <LerSPI+0xf4>)
 8000a50:	885b      	ldrh	r3, [r3, #2]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	dc06      	bgt.n	8000a66 <LerSPI+0x7e>
	  HAL_UART_Transmit(&huart1, "DESCON", 6, 100);
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	2206      	movs	r2, #6
 8000a5c:	4923      	ldr	r1, [pc, #140]	; (8000aec <LerSPI+0x104>)
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <LerSPI+0x100>)
 8000a60:	f005 fb6b 	bl	800613a <HAL_UART_Transmit>
 8000a64:	e01e      	b.n	8000aa4 <LerSPI+0xbc>
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
	//  return;
  }
  else if (spi_values[0] < spi_values[1]){ 					// significa que está conectado o G27
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <LerSPI+0xf4>)
 8000a68:	881a      	ldrh	r2, [r3, #0]
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <LerSPI+0xf4>)
 8000a6c:	885b      	ldrh	r3, [r3, #2]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d20c      	bcs.n	8000a8c <LerSPI+0xa4>
	  HAL_SPI_Receive(&hspi2, rx_buffer, 2, 50);
 8000a72:	2332      	movs	r3, #50	; 0x32
 8000a74:	2202      	movs	r2, #2
 8000a76:	491e      	ldr	r1, [pc, #120]	; (8000af0 <LerSPI+0x108>)
 8000a78:	481e      	ldr	r0, [pc, #120]	; (8000af4 <LerSPI+0x10c>)
 8000a7a:	f004 fe61 	bl	8005740 <HAL_SPI_Receive>
	  HAL_UART_Transmit(&huart1, "G25   ", 6, 100);
 8000a7e:	2364      	movs	r3, #100	; 0x64
 8000a80:	2206      	movs	r2, #6
 8000a82:	491d      	ldr	r1, [pc, #116]	; (8000af8 <LerSPI+0x110>)
 8000a84:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <LerSPI+0x100>)
 8000a86:	f005 fb58 	bl	800613a <HAL_UART_Transmit>
 8000a8a:	e00b      	b.n	8000aa4 <LerSPI+0xbc>
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  }
  else{													// significa que está conectado o G25
	  HAL_SPI_Receive(&hspi1, rx_buffer, 2, 50);
 8000a8c:	2332      	movs	r3, #50	; 0x32
 8000a8e:	2202      	movs	r2, #2
 8000a90:	4917      	ldr	r1, [pc, #92]	; (8000af0 <LerSPI+0x108>)
 8000a92:	481a      	ldr	r0, [pc, #104]	; (8000afc <LerSPI+0x114>)
 8000a94:	f004 fe54 	bl	8005740 <HAL_SPI_Receive>
	  HAL_UART_Transmit(&huart1, "G27   ", 6, 100);
 8000a98:	2364      	movs	r3, #100	; 0x64
 8000a9a:	2206      	movs	r2, #6
 8000a9c:	4918      	ldr	r1, [pc, #96]	; (8000b00 <LerSPI+0x118>)
 8000a9e:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <LerSPI+0x100>)
 8000aa0:	f005 fb4b 	bl	800613a <HAL_UART_Transmit>
//	  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
  }

  HAL_Delay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f001 f8f1 	bl	8001c8c <HAL_Delay>
  HAL_GPIO_WritePin(SHIFTER_CS_GPIO_Port, SHIFTER_CS_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <LerSPI+0xf0>)
 8000ab2:	f002 fc14 	bl	80032de <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f001 f8e8 	bl	8001c8c <HAL_Delay>

//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[0]), 100);
//  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", rx_buffer[1]), 100);
  HAL_UART_Transmit(&huart1, "      ", 6, 100);
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	2206      	movs	r2, #6
 8000ac0:	4910      	ldr	r1, [pc, #64]	; (8000b04 <LerSPI+0x11c>)
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <LerSPI+0x100>)
 8000ac4:	f005 fb39 	bl	800613a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "\r\n ", 2, 100);
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	2202      	movs	r2, #2
 8000acc:	490e      	ldr	r1, [pc, #56]	; (8000b08 <LerSPI+0x120>)
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <LerSPI+0x100>)
 8000ad0:	f005 fb33 	bl	800613a <HAL_UART_Transmit>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40010c00 	.word	0x40010c00
 8000adc:	2000035c 	.word	0x2000035c
 8000ae0:	0800c324 	.word	0x0800c324
 8000ae4:	20000368 	.word	0x20000368
 8000ae8:	20000310 	.word	0x20000310
 8000aec:	0800c328 	.word	0x0800c328
 8000af0:	20000370 	.word	0x20000370
 8000af4:	200002b8 	.word	0x200002b8
 8000af8:	0800c330 	.word	0x0800c330
 8000afc:	20000260 	.word	0x20000260
 8000b00:	0800c338 	.word	0x0800c338
 8000b04:	0800c340 	.word	0x0800c340
 8000b08:	0800c348 	.word	0x0800c348
 8000b0c:	00000000 	.word	0x00000000

08000b10 <Calibrar>:

void Calibrar(void)
{
 8000b10:	b5b0      	push	{r4, r5, r7, lr}
 8000b12:	b092      	sub	sp, #72	; 0x48
 8000b14:	af02      	add	r7, sp, #8
	if (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){			// se botão de calibração pressionado
 8000b16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1a:	4885      	ldr	r0, [pc, #532]	; (8000d30 <Calibrar+0x220>)
 8000b1c:	f002 fbc8 	bl	80032b0 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 80fa 	bne.w	8000d1c <Calibrar+0x20c>
		HAL_Delay(500);
 8000b28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2c:	f001 f8ae 	bl	8001c8c <HAL_Delay>
		char params_to_save[50];
		uint16_t axis_x_min_max[2] = {9999, 0};
 8000b30:	f242 730f 	movw	r3, #9999	; 0x270f
 8000b34:	873b      	strh	r3, [r7, #56]	; 0x38
 8000b36:	2300      	movs	r3, #0
 8000b38:	877b      	strh	r3, [r7, #58]	; 0x3a
		uint16_t axis_y_min_max[2] = {9999, 0};
 8000b3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8000b3e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000b40:	2300      	movs	r3, #0
 8000b42:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000b44:	e029      	b.n	8000b9a <Calibrar+0x8a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4a:	487a      	ldr	r0, [pc, #488]	; (8000d34 <Calibrar+0x224>)
 8000b4c:	f002 fbdf 	bl	800330e <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8000b50:	2032      	movs	r0, #50	; 0x32
 8000b52:	f001 f89b 	bl	8001c8c <HAL_Delay>
			LerADCS();  									//le posicao dos eixos
 8000b56:	f7ff ff03 	bl	8000960 <LerADCS>
			if (ADCValue[0] < axis_x_min_max[0]){			// define o menor valor detectado no eixo x
 8000b5a:	4b77      	ldr	r3, [pc, #476]	; (8000d38 <Calibrar+0x228>)
 8000b5c:	881a      	ldrh	r2, [r3, #0]
 8000b5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d202      	bcs.n	8000b6a <Calibrar+0x5a>
				axis_x_min_max[0] = ADCValue[0];
 8000b64:	4b74      	ldr	r3, [pc, #464]	; (8000d38 <Calibrar+0x228>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	873b      	strh	r3, [r7, #56]	; 0x38
			}
			if (ADCValue[0] > axis_x_min_max[1]){			// define o maior valor detectado no eixo x
 8000b6a:	4b73      	ldr	r3, [pc, #460]	; (8000d38 <Calibrar+0x228>)
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d902      	bls.n	8000b7a <Calibrar+0x6a>
				axis_x_min_max[1] = ADCValue[0];
 8000b74:	4b70      	ldr	r3, [pc, #448]	; (8000d38 <Calibrar+0x228>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	877b      	strh	r3, [r7, #58]	; 0x3a
			}
			if (ADCValue[1] < axis_y_min_max[0]){			// define o menor valor detectado no eixo y
 8000b7a:	4b6f      	ldr	r3, [pc, #444]	; (8000d38 <Calibrar+0x228>)
 8000b7c:	885a      	ldrh	r2, [r3, #2]
 8000b7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d202      	bcs.n	8000b8a <Calibrar+0x7a>
				axis_y_min_max[0] = ADCValue[1];
 8000b84:	4b6c      	ldr	r3, [pc, #432]	; (8000d38 <Calibrar+0x228>)
 8000b86:	885b      	ldrh	r3, [r3, #2]
 8000b88:	86bb      	strh	r3, [r7, #52]	; 0x34
			}
			if (ADCValue[1] > axis_y_min_max[1]){			// define o maior valor detectado no eixo y
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	; (8000d38 <Calibrar+0x228>)
 8000b8c:	885a      	ldrh	r2, [r3, #2]
 8000b8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d902      	bls.n	8000b9a <Calibrar+0x8a>
				axis_y_min_max[1] = ADCValue[1];
 8000b94:	4b68      	ldr	r3, [pc, #416]	; (8000d38 <Calibrar+0x228>)
 8000b96:	885b      	ldrh	r3, [r3, #2]
 8000b98:	86fb      	strh	r3, [r7, #54]	; 0x36
		while (!HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin)){     // permanece na rotina de leitura até que o botão seja solto
 8000b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9e:	4864      	ldr	r0, [pc, #400]	; (8000d30 <Calibrar+0x220>)
 8000ba0:	f002 fb86 	bl	80032b0 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0cd      	beq.n	8000b46 <Calibrar+0x36>
			}
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	4860      	ldr	r0, [pc, #384]	; (8000d34 <Calibrar+0x224>)
 8000bb2:	f002 fb94 	bl	80032de <HAL_GPIO_WritePin>

		uint16_t space_x = (axis_x_min_max[1]-axis_x_min_max[0])/3;
 8000bb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000bb8:	461a      	mov	r2, r3
 8000bba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	4a5f      	ldr	r2, [pc, #380]	; (8000d3c <Calibrar+0x22c>)
 8000bc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc4:	17db      	asrs	r3, r3, #31
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
		speed_div_x[0] = axis_x_min_max[0] + (space_x*0.8); 					//calcula as linhas de calibracao do eixo x
 8000bca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fd43 	bl	8000658 <__aeabi_i2d>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	460d      	mov	r5, r1
 8000bd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fd3d 	bl	8000658 <__aeabi_i2d>
 8000bde:	a352      	add	r3, pc, #328	; (adr r3, 8000d28 <Calibrar+0x218>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	f7ff fabc 	bl	8000160 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4620      	mov	r0, r4
 8000bee:	4629      	mov	r1, r5
 8000bf0:	f7ff fbe6 	bl	80003c0 <__adddf3>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fd96 	bl	800072c <__aeabi_d2uiz>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b4e      	ldr	r3, [pc, #312]	; (8000d40 <Calibrar+0x230>)
 8000c06:	801a      	strh	r2, [r3, #0]

		speed_div_x[1] = axis_x_min_max[1] - (space_x*0.8);
 8000c08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fd24 	bl	8000658 <__aeabi_i2d>
 8000c10:	4604      	mov	r4, r0
 8000c12:	460d      	mov	r5, r1
 8000c14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fd1e 	bl	8000658 <__aeabi_i2d>
 8000c1c:	a342      	add	r3, pc, #264	; (adr r3, 8000d28 <Calibrar+0x218>)
 8000c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c22:	f7ff fa9d 	bl	8000160 <__aeabi_dmul>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	4629      	mov	r1, r5
 8000c2e:	f7ff fbc5 	bl	80003bc <__aeabi_dsub>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f7ff fd77 	bl	800072c <__aeabi_d2uiz>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b3f      	ldr	r3, [pc, #252]	; (8000d40 <Calibrar+0x230>)
 8000c44:	805a      	strh	r2, [r3, #2]

		uint16_t space_y = (axis_y_min_max[1]-axis_y_min_max[0])/3;
 8000c46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c48:	461a      	mov	r2, r3
 8000c4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	4a3b      	ldr	r2, [pc, #236]	; (8000d3c <Calibrar+0x22c>)
 8000c50:	fb82 1203 	smull	r1, r2, r2, r3
 8000c54:	17db      	asrs	r3, r3, #31
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	87bb      	strh	r3, [r7, #60]	; 0x3c
		speed_div_y[0] = axis_y_min_max[0] + (space_y*0.8); 					//calcula as linhas de calibracao do eixo y
 8000c5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fcfb 	bl	8000658 <__aeabi_i2d>
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fcf5 	bl	8000658 <__aeabi_i2d>
 8000c6e:	a32e      	add	r3, pc, #184	; (adr r3, 8000d28 <Calibrar+0x218>)
 8000c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c74:	f7ff fa74 	bl	8000160 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	4629      	mov	r1, r5
 8000c80:	f7ff fb9e 	bl	80003c0 <__adddf3>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4610      	mov	r0, r2
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f7ff fd4e 	bl	800072c <__aeabi_d2uiz>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <Calibrar+0x234>)
 8000c96:	801a      	strh	r2, [r3, #0]

		speed_div_y[1] = axis_y_min_max[1] - (space_y*0.8);
 8000c98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fcdc 	bl	8000658 <__aeabi_i2d>
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460d      	mov	r5, r1
 8000ca4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fcd6 	bl	8000658 <__aeabi_i2d>
 8000cac:	a31e      	add	r3, pc, #120	; (adr r3, 8000d28 <Calibrar+0x218>)
 8000cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb2:	f7ff fa55 	bl	8000160 <__aeabi_dmul>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4620      	mov	r0, r4
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	f7ff fb7d 	bl	80003bc <__aeabi_dsub>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f7ff fd2f 	bl	800072c <__aeabi_d2uiz>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <Calibrar+0x234>)
 8000cd4:	805a      	strh	r2, [r3, #2]

		sprintf(params_to_save, "%u,%u,%u,%u,", speed_div_x[0], speed_div_x[1], speed_div_y[0], speed_div_y[1]);
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <Calibrar+0x230>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <Calibrar+0x230>)
 8000cde:	885b      	ldrh	r3, [r3, #2]
 8000ce0:	461c      	mov	r4, r3
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <Calibrar+0x234>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <Calibrar+0x234>)
 8000cea:	885b      	ldrh	r3, [r3, #2]
 8000cec:	4638      	mov	r0, r7
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	9200      	str	r2, [sp, #0]
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	4914      	ldr	r1, [pc, #80]	; (8000d48 <Calibrar+0x238>)
 8000cf8:	f00a f842 	bl	800ad80 <siprintf>
		save_to_flash((uint8_t *)params_to_save);
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fd70 	bl	80007e4 <save_to_flash>
		HAL_UART_Transmit(&huart1, (uint8_t *)params_to_save, (int)sizeof(params_to_save), 100);
 8000d04:	4639      	mov	r1, r7
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	2232      	movs	r2, #50	; 0x32
 8000d0a:	4810      	ldr	r0, [pc, #64]	; (8000d4c <Calibrar+0x23c>)
 8000d0c:	f005 fa15 	bl	800613a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n ", 2, 100);
 8000d10:	2364      	movs	r3, #100	; 0x64
 8000d12:	2202      	movs	r2, #2
 8000d14:	490e      	ldr	r1, [pc, #56]	; (8000d50 <Calibrar+0x240>)
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <Calibrar+0x23c>)
 8000d18:	f005 fa0f 	bl	800613a <HAL_UART_Transmit>

	}
}
 8000d1c:	bf00      	nop
 8000d1e:	3740      	adds	r7, #64	; 0x40
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bdb0      	pop	{r4, r5, r7, pc}
 8000d24:	f3af 8000 	nop.w
 8000d28:	9999999a 	.word	0x9999999a
 8000d2c:	3fe99999 	.word	0x3fe99999
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40010c00 	.word	0x40010c00
 8000d38:	20000360 	.word	0x20000360
 8000d3c:	55555556 	.word	0x55555556
 8000d40:	20000004 	.word	0x20000004
 8000d44:	20000008 	.word	0x20000008
 8000d48:	0800c34c 	.word	0x0800c34c
 8000d4c:	20000310 	.word	0x20000310
 8000d50:	0800c348 	.word	0x0800c348

08000d54 <update_data_from_flash>:

void update_data_from_flash(uint16_t (* speed_div_x), uint16_t (* speed_div_y)){									// PRECISA FINALIZAR ANTES DE TESTAR
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0b4      	sub	sp, #208	; 0xd0
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	char data[0xC0];
	read_flash((uint8_t *)data);
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fd02 	bl	800076c <read_flash>
	char * token = strtok(data,",");				//first strtok go to variable directly
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4922      	ldr	r1, [pc, #136]	; (8000df8 <update_data_from_flash+0xa4>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00a f82e 	bl	800add0 <strtok>
 8000d74:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if (atoi(token)==0){
 8000d78:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000d7c:	f009 ffca 	bl	800ad14 <atoi>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d034      	beq.n	8000df0 <update_data_from_flash+0x9c>
    	return;
    }
	speed_div_x[0] = atoi(token);
 8000d86:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000d8a:	f009 ffc3 	bl	800ad14 <atoi>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000d96:	4918      	ldr	r1, [pc, #96]	; (8000df8 <update_data_from_flash+0xa4>)
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f00a f819 	bl	800add0 <strtok>
 8000d9e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_x[1] = atoi(token);
 8000da2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000da6:	f009 ffb5 	bl	800ad14 <atoi>
 8000daa:	4602      	mov	r2, r0
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3302      	adds	r3, #2
 8000db0:	b292      	uxth	r2, r2
 8000db2:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000db4:	4910      	ldr	r1, [pc, #64]	; (8000df8 <update_data_from_flash+0xa4>)
 8000db6:	2000      	movs	r0, #0
 8000db8:	f00a f80a 	bl	800add0 <strtok>
 8000dbc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_y[0] = atoi(token);
 8000dc0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000dc4:	f009 ffa6 	bl	800ad14 <atoi>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	801a      	strh	r2, [r3, #0]
    token = strtok(NULL,",");
 8000dd0:	4909      	ldr	r1, [pc, #36]	; (8000df8 <update_data_from_flash+0xa4>)
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f009 fffc 	bl	800add0 <strtok>
 8000dd8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    speed_div_y[1] = atoi(token);
 8000ddc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000de0:	f009 ff98 	bl	800ad14 <atoi>
 8000de4:	4602      	mov	r2, r0
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	3302      	adds	r3, #2
 8000dea:	b292      	uxth	r2, r2
 8000dec:	801a      	strh	r2, [r3, #0]
 8000dee:	e000      	b.n	8000df2 <update_data_from_flash+0x9e>
    	return;
 8000df0:	bf00      	nop

}
 8000df2:	37d0      	adds	r7, #208	; 0xd0
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	0800c35c 	.word	0x0800c35c

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e02:	f000 fee1 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e06:	f000 fa5f 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0a:	f000 fbcb 	bl	80015a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0e:	f000 fbab 	bl	8001568 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000e12:	f009 fb9b 	bl	800a54c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000e16:	f000 fab5 	bl	8001384 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000e1a:	f000 fb0f 	bl	800143c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e1e:	f000 fb43 	bl	80014a8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000e22:	f000 fb77 	bl	8001514 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 8000e26:	2203      	movs	r2, #3
 8000e28:	4994      	ldr	r1, [pc, #592]	; (800107c <main+0x280>)
 8000e2a:	4895      	ldr	r0, [pc, #596]	; (8001080 <main+0x284>)
 8000e2c:	f001 f82a 	bl	8001e84 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); 		//liga led
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e36:	4893      	ldr	r0, [pc, #588]	; (8001084 <main+0x288>)
 8000e38:	f002 fa51 	bl	80032de <HAL_GPIO_WritePin>
  update_data_from_flash(speed_div_x, speed_div_y);				//atualiza valores com os dados da memoria flash
 8000e3c:	4992      	ldr	r1, [pc, #584]	; (8001088 <main+0x28c>)
 8000e3e:	4893      	ldr	r0, [pc, #588]	; (800108c <main+0x290>)
 8000e40:	f7ff ff88 	bl	8000d54 <update_data_from_flash>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Calibrar();
 8000e44:	f7ff fe64 	bl	8000b10 <Calibrar>
	  LerADCS();
 8000e48:	f7ff fd8a 	bl	8000960 <LerADCS>
	  LerSPI();
 8000e4c:	f7ff fdcc 	bl	80009e8 <LerSPI>
	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_x[0]), 100);
 8000e50:	4b8e      	ldr	r3, [pc, #568]	; (800108c <main+0x290>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	498e      	ldr	r1, [pc, #568]	; (8001090 <main+0x294>)
 8000e58:	488e      	ldr	r0, [pc, #568]	; (8001094 <main+0x298>)
 8000e5a:	f009 ff91 	bl	800ad80 <siprintf>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	2364      	movs	r3, #100	; 0x64
 8000e64:	498b      	ldr	r1, [pc, #556]	; (8001094 <main+0x298>)
 8000e66:	488c      	ldr	r0, [pc, #560]	; (8001098 <main+0x29c>)
 8000e68:	f005 f967 	bl	800613a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_x[1]), 100);
 8000e6c:	4b87      	ldr	r3, [pc, #540]	; (800108c <main+0x290>)
 8000e6e:	885b      	ldrh	r3, [r3, #2]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4987      	ldr	r1, [pc, #540]	; (8001090 <main+0x294>)
 8000e74:	4887      	ldr	r0, [pc, #540]	; (8001094 <main+0x298>)
 8000e76:	f009 ff83 	bl	800ad80 <siprintf>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	2364      	movs	r3, #100	; 0x64
 8000e80:	4984      	ldr	r1, [pc, #528]	; (8001094 <main+0x298>)
 8000e82:	4885      	ldr	r0, [pc, #532]	; (8001098 <main+0x29c>)
 8000e84:	f005 f959 	bl	800613a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_y[0]), 100);
 8000e88:	4b7f      	ldr	r3, [pc, #508]	; (8001088 <main+0x28c>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4980      	ldr	r1, [pc, #512]	; (8001090 <main+0x294>)
 8000e90:	4880      	ldr	r0, [pc, #512]	; (8001094 <main+0x298>)
 8000e92:	f009 ff75 	bl	800ad80 <siprintf>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	2364      	movs	r3, #100	; 0x64
 8000e9c:	497d      	ldr	r1, [pc, #500]	; (8001094 <main+0x298>)
 8000e9e:	487e      	ldr	r0, [pc, #504]	; (8001098 <main+0x29c>)
 8000ea0:	f005 f94b 	bl	800613a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer2, sprintf(buffer2, "%d ", speed_div_y[1]), 100);
 8000ea4:	4b78      	ldr	r3, [pc, #480]	; (8001088 <main+0x28c>)
 8000ea6:	885b      	ldrh	r3, [r3, #2]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4979      	ldr	r1, [pc, #484]	; (8001090 <main+0x294>)
 8000eac:	4879      	ldr	r0, [pc, #484]	; (8001094 <main+0x298>)
 8000eae:	f009 ff67 	bl	800ad80 <siprintf>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	4976      	ldr	r1, [pc, #472]	; (8001094 <main+0x298>)
 8000eba:	4877      	ldr	r0, [pc, #476]	; (8001098 <main+0x29c>)
 8000ebc:	f005 f93d 	bl	800613a <HAL_UART_Transmit>

	  uint16_t cambio_x_axis = (uint16_t) ADCValue[0];  //manopla x
 8000ec0:	4b6e      	ldr	r3, [pc, #440]	; (800107c <main+0x280>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	80fb      	strh	r3, [r7, #6]
	  uint16_t cambio_y_axis = (uint16_t) ADCValue[1];  //manopla y
 8000ec6:	4b6d      	ldr	r3, [pc, #436]	; (800107c <main+0x280>)
 8000ec8:	885b      	ldrh	r3, [r3, #2]
 8000eca:	80bb      	strh	r3, [r7, #4]

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis > speed_div_y[1]){  //speed 1
 8000ecc:	4b6f      	ldr	r3, [pc, #444]	; (800108c <main+0x290>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	88fa      	ldrh	r2, [r7, #6]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d20c      	bcs.n	8000ef0 <main+0xf4>
 8000ed6:	4b6c      	ldr	r3, [pc, #432]	; (8001088 <main+0x28c>)
 8000ed8:	885b      	ldrh	r3, [r3, #2]
 8000eda:	88ba      	ldrh	r2, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d907      	bls.n	8000ef0 <main+0xf4>
		  joystickhid.botoes0 |= (uint8_t)(1<<0);	// SETA BOTAO 1
 8000ee0:	4b6e      	ldr	r3, [pc, #440]	; (800109c <main+0x2a0>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b6c      	ldr	r3, [pc, #432]	; (800109c <main+0x2a0>)
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e006      	b.n	8000efe <main+0x102>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<0);	// RESETA BOTAO 1
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <main+0x2a0>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b68      	ldr	r3, [pc, #416]	; (800109c <main+0x2a0>)
 8000efc:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis < speed_div_x[0] && cambio_y_axis < speed_div_y[0]){  //speed2
 8000efe:	4b63      	ldr	r3, [pc, #396]	; (800108c <main+0x290>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d20c      	bcs.n	8000f22 <main+0x126>
 8000f08:	4b5f      	ldr	r3, [pc, #380]	; (8001088 <main+0x28c>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	88ba      	ldrh	r2, [r7, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d207      	bcs.n	8000f22 <main+0x126>
		  joystickhid.botoes0 |= (uint8_t)(1<<1);	// SETA BOTAO 2
 8000f12:	4b62      	ldr	r3, [pc, #392]	; (800109c <main+0x2a0>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b5f      	ldr	r3, [pc, #380]	; (800109c <main+0x2a0>)
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e006      	b.n	8000f30 <main+0x134>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<1);	// RESETA BOTAO 2
 8000f22:	4b5e      	ldr	r3, [pc, #376]	; (800109c <main+0x2a0>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f023 0302 	bic.w	r3, r3, #2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b5b      	ldr	r3, [pc, #364]	; (800109c <main+0x2a0>)
 8000f2e:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis > speed_div_y[1]){  //speed 3
 8000f30:	4b56      	ldr	r3, [pc, #344]	; (800108c <main+0x290>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	88fa      	ldrh	r2, [r7, #6]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d911      	bls.n	8000f5e <main+0x162>
 8000f3a:	4b54      	ldr	r3, [pc, #336]	; (800108c <main+0x290>)
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d20c      	bcs.n	8000f5e <main+0x162>
 8000f44:	4b50      	ldr	r3, [pc, #320]	; (8001088 <main+0x28c>)
 8000f46:	885b      	ldrh	r3, [r3, #2]
 8000f48:	88ba      	ldrh	r2, [r7, #4]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d907      	bls.n	8000f5e <main+0x162>
		  joystickhid.botoes0 |= (uint8_t)(1<<2);	// SETA BOTAO 3
 8000f4e:	4b53      	ldr	r3, [pc, #332]	; (800109c <main+0x2a0>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b50      	ldr	r3, [pc, #320]	; (800109c <main+0x2a0>)
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e006      	b.n	8000f6c <main+0x170>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<2);	// RESETA BOTAO 3
 8000f5e:	4b4f      	ldr	r3, [pc, #316]	; (800109c <main+0x2a0>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	f023 0304 	bic.w	r3, r3, #4
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b4c      	ldr	r3, [pc, #304]	; (800109c <main+0x2a0>)
 8000f6a:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[0] && cambio_x_axis < speed_div_x[1] && cambio_y_axis < speed_div_y[0]){  //speed 4
 8000f6c:	4b47      	ldr	r3, [pc, #284]	; (800108c <main+0x290>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	88fa      	ldrh	r2, [r7, #6]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d911      	bls.n	8000f9a <main+0x19e>
 8000f76:	4b45      	ldr	r3, [pc, #276]	; (800108c <main+0x290>)
 8000f78:	885b      	ldrh	r3, [r3, #2]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d20c      	bcs.n	8000f9a <main+0x19e>
 8000f80:	4b41      	ldr	r3, [pc, #260]	; (8001088 <main+0x28c>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	88ba      	ldrh	r2, [r7, #4]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d207      	bcs.n	8000f9a <main+0x19e>
		  joystickhid.botoes0 |= (uint8_t)(1<<3);	// SETA BOTAO 4
 8000f8a:	4b44      	ldr	r3, [pc, #272]	; (800109c <main+0x2a0>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b41      	ldr	r3, [pc, #260]	; (800109c <main+0x2a0>)
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e006      	b.n	8000fa8 <main+0x1ac>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<3);	// RESETA BOTAO 4
 8000f9a:	4b40      	ldr	r3, [pc, #256]	; (800109c <main+0x2a0>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f023 0308 	bic.w	r3, r3, #8
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b3d      	ldr	r3, [pc, #244]	; (800109c <main+0x2a0>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis > speed_div_y[1]){    //speed5
 8000fa8:	4b38      	ldr	r3, [pc, #224]	; (800108c <main+0x290>)
 8000faa:	885b      	ldrh	r3, [r3, #2]
 8000fac:	88fa      	ldrh	r2, [r7, #6]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d90c      	bls.n	8000fcc <main+0x1d0>
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <main+0x28c>)
 8000fb4:	885b      	ldrh	r3, [r3, #2]
 8000fb6:	88ba      	ldrh	r2, [r7, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d907      	bls.n	8000fcc <main+0x1d0>
		  joystickhid.botoes0 |= (uint8_t)(1<<4);	// SETA BOTAO 5
 8000fbc:	4b37      	ldr	r3, [pc, #220]	; (800109c <main+0x2a0>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b35      	ldr	r3, [pc, #212]	; (800109c <main+0x2a0>)
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e006      	b.n	8000fda <main+0x1de>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<4);	// RESETA BOTAO 5
 8000fcc:	4b33      	ldr	r3, [pc, #204]	; (800109c <main+0x2a0>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f023 0310 	bic.w	r3, r3, #16
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <main+0x2a0>)
 8000fd8:	701a      	strb	r2, [r3, #0]
	  }

	  if (cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0]){    // speed 6
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <main+0x290>)
 8000fdc:	885b      	ldrh	r3, [r3, #2]
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d90c      	bls.n	8000ffe <main+0x202>
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <main+0x28c>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	88ba      	ldrh	r2, [r7, #4]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d207      	bcs.n	8000ffe <main+0x202>
		  joystickhid.botoes0 |= (uint8_t)(1<<5);	// SETA BOTAO 6
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <main+0x2a0>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	f043 0320 	orr.w	r3, r3, #32
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <main+0x2a0>)
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	e006      	b.n	800100c <main+0x210>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5);	// RESETA BOTAO 6
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <main+0x2a0>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f023 0320 	bic.w	r3, r3, #32
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <main+0x2a0>)
 800100a:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<0))  {
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <main+0x2a4>)
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d007      	beq.n	8001028 <main+0x22c>
		  joystickhid.botoes0 |= (uint16_t) (1<<6);  // SETA BOTAO 7
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <main+0x2a0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <main+0x2a0>)
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e006      	b.n	8001036 <main+0x23a>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 7
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <main+0x2a0>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <main+0x2a0>)
 8001034:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<1))  {
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <main+0x2a4>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <main+0x256>
		  joystickhid.botoes0 |= (uint16_t)(1<<7);	// SETA BOTAO 8
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <main+0x2a0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <main+0x2a0>)
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e006      	b.n	8001060 <main+0x264>
	  }
	  else {
		  joystickhid.botoes0 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 8
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <main+0x2a0>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <main+0x2a0>)
 800105e:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<2))  {
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <main+0x2a4>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d01b      	beq.n	80010a4 <main+0x2a8>
		  joystickhid.botoes1 |= (uint16_t)(1<<0);	// SETA BOTAO 9
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <main+0x2a0>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <main+0x2a0>)
 8001078:	705a      	strb	r2, [r3, #1]
 800107a:	e01a      	b.n	80010b2 <main+0x2b6>
 800107c:	20000360 	.word	0x20000360
 8001080:	200001ec 	.word	0x200001ec
 8001084:	40010c00 	.word	0x40010c00
 8001088:	20000008 	.word	0x20000008
 800108c:	20000004 	.word	0x20000004
 8001090:	0800c324 	.word	0x0800c324
 8001094:	20000368 	.word	0x20000368
 8001098:	20000310 	.word	0x20000310
 800109c:	20000354 	.word	0x20000354
 80010a0:	20000370 	.word	0x20000370
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 9
 80010a4:	4b82      	ldr	r3, [pc, #520]	; (80012b0 <main+0x4b4>)
 80010a6:	785b      	ldrb	r3, [r3, #1]
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b80      	ldr	r3, [pc, #512]	; (80012b0 <main+0x4b4>)
 80010b0:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<3))  {
 80010b2:	4b80      	ldr	r3, [pc, #512]	; (80012b4 <main+0x4b8>)
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <main+0x2d2>
		  joystickhid.botoes1 |= (uint16_t)(1<<1);	// SETA BOTAO 10
 80010be:	4b7c      	ldr	r3, [pc, #496]	; (80012b0 <main+0x4b4>)
 80010c0:	785b      	ldrb	r3, [r3, #1]
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b79      	ldr	r3, [pc, #484]	; (80012b0 <main+0x4b4>)
 80010ca:	705a      	strb	r2, [r3, #1]
 80010cc:	e006      	b.n	80010dc <main+0x2e0>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 10
 80010ce:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <main+0x4b4>)
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	f023 0302 	bic.w	r3, r3, #2
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b75      	ldr	r3, [pc, #468]	; (80012b0 <main+0x4b4>)
 80010da:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<4))  {
 80010dc:	4b75      	ldr	r3, [pc, #468]	; (80012b4 <main+0x4b8>)
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d007      	beq.n	80010f8 <main+0x2fc>
		  joystickhid.botoes1 |= (uint16_t)(1<<2);	// SETA BOTAO 11
 80010e8:	4b71      	ldr	r3, [pc, #452]	; (80012b0 <main+0x4b4>)
 80010ea:	785b      	ldrb	r3, [r3, #1]
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <main+0x4b4>)
 80010f4:	705a      	strb	r2, [r3, #1]
 80010f6:	e006      	b.n	8001106 <main+0x30a>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<2);	// RESETA BOTAO 11
 80010f8:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <main+0x4b4>)
 80010fa:	785b      	ldrb	r3, [r3, #1]
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <main+0x4b4>)
 8001104:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<5))  {
 8001106:	4b6b      	ldr	r3, [pc, #428]	; (80012b4 <main+0x4b8>)
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <main+0x326>
		  joystickhid.botoes1 |= (uint16_t)(1<<3);	// SETA BOTAO 12
 8001112:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <main+0x4b4>)
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <main+0x4b4>)
 800111e:	705a      	strb	r2, [r3, #1]
 8001120:	e006      	b.n	8001130 <main+0x334>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<3);	// RESETA BOTAO 12
 8001122:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <main+0x4b4>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	f023 0308 	bic.w	r3, r3, #8
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b60      	ldr	r3, [pc, #384]	; (80012b0 <main+0x4b4>)
 800112e:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<6))  {
 8001130:	4b60      	ldr	r3, [pc, #384]	; (80012b4 <main+0x4b8>)
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001138:	2b00      	cmp	r3, #0
 800113a:	d007      	beq.n	800114c <main+0x350>
		  joystickhid.botoes1 |= (uint16_t)(1<<4);	// SETA BOTAO 13
 800113c:	4b5c      	ldr	r3, [pc, #368]	; (80012b0 <main+0x4b4>)
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <main+0x4b4>)
 8001148:	705a      	strb	r2, [r3, #1]
 800114a:	e006      	b.n	800115a <main+0x35e>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<4);	// RESETA BOTAO 13
 800114c:	4b58      	ldr	r3, [pc, #352]	; (80012b0 <main+0x4b4>)
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	f023 0310 	bic.w	r3, r3, #16
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b56      	ldr	r3, [pc, #344]	; (80012b0 <main+0x4b4>)
 8001158:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[1] & (uint16_t)(1<<7))  {
 800115a:	4b56      	ldr	r3, [pc, #344]	; (80012b4 <main+0x4b8>)
 800115c:	785b      	ldrb	r3, [r3, #1]
 800115e:	b25b      	sxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	da07      	bge.n	8001174 <main+0x378>
		  joystickhid.botoes1 |= (uint16_t)(1<<5);	// SETA BOTAO 14
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <main+0x4b4>)
 8001166:	785b      	ldrb	r3, [r3, #1]
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <main+0x4b4>)
 8001170:	705a      	strb	r2, [r3, #1]
 8001172:	e006      	b.n	8001182 <main+0x386>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<5);	// RESETA BOTAO 14
 8001174:	4b4e      	ldr	r3, [pc, #312]	; (80012b0 <main+0x4b4>)
 8001176:	785b      	ldrb	r3, [r3, #1]
 8001178:	f023 0320 	bic.w	r3, r3, #32
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <main+0x4b4>)
 8001180:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<0))  {
 8001182:	4b4c      	ldr	r3, [pc, #304]	; (80012b4 <main+0x4b8>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <main+0x3a2>
		  joystickhid.botoes1 |= (uint16_t)(1<<6);	// SETA BOTAO 15
 800118e:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <main+0x4b4>)
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <main+0x4b4>)
 800119a:	705a      	strb	r2, [r3, #1]
 800119c:	e006      	b.n	80011ac <main+0x3b0>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<6);	// RESETA BOTAO 15
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <main+0x4b4>)
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <main+0x4b4>)
 80011aa:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<1))  {
 80011ac:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <main+0x4b8>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d007      	beq.n	80011c8 <main+0x3cc>
		  joystickhid.botoes1 |= (uint32_t)(1<<7);	// SETA BOTAO 16
 80011b8:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <main+0x4b4>)
 80011ba:	785b      	ldrb	r3, [r3, #1]
 80011bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <main+0x4b4>)
 80011c4:	705a      	strb	r2, [r3, #1]
 80011c6:	e006      	b.n	80011d6 <main+0x3da>
	  }
	  else {
		  joystickhid.botoes1 &= ~(uint16_t)(1<<7);	// RESETA BOTAO 16
 80011c8:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <main+0x4b4>)
 80011ca:	785b      	ldrb	r3, [r3, #1]
 80011cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <main+0x4b4>)
 80011d4:	705a      	strb	r2, [r3, #1]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<2))  {
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <main+0x4b8>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <main+0x3f6>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<0);	// SETA BOTAO 17
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <main+0x4b4>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <main+0x4b4>)
 80011ee:	709a      	strb	r2, [r3, #2]
 80011f0:	e006      	b.n	8001200 <main+0x404>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<0);	// RESETA BOTAO 17
 80011f2:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <main+0x4b4>)
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <main+0x4b4>)
 80011fe:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<3))  {
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <main+0x4b8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <main+0x420>
		  joystickhid.botoes_freio0 |= (uint32_t)(1<<1);	// SETA BOTAO 18
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <main+0x4b4>)
 800120e:	789b      	ldrb	r3, [r3, #2]
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <main+0x4b4>)
 8001218:	709a      	strb	r2, [r3, #2]
 800121a:	e006      	b.n	800122a <main+0x42e>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint16_t)(1<<1);	// RESETA BOTAO 18
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <main+0x4b4>)
 800121e:	789b      	ldrb	r3, [r3, #2]
 8001220:	f023 0302 	bic.w	r3, r3, #2
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <main+0x4b4>)
 8001228:	709a      	strb	r2, [r3, #2]
	  }

	  if (rx_buffer[0] & (uint16_t)(1<<6) && cambio_x_axis > speed_div_x[1] && cambio_y_axis < speed_div_y[0])  {
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <main+0x4b8>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d018      	beq.n	8001268 <main+0x46c>
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <main+0x4bc>)
 8001238:	885b      	ldrh	r3, [r3, #2]
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	429a      	cmp	r2, r3
 800123e:	d913      	bls.n	8001268 <main+0x46c>
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <main+0x4c0>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	88ba      	ldrh	r2, [r7, #4]
 8001246:	429a      	cmp	r2, r3
 8001248:	d20e      	bcs.n	8001268 <main+0x46c>
		  joystickhid.botoes_freio0 |= (uint16_t)(1<<2);	// SETA BOTAO 19 SPEED REVERSA
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <main+0x4b4>)
 800124c:	789b      	ldrb	r3, [r3, #2]
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <main+0x4b4>)
 8001256:	709a      	strb	r2, [r3, #2]
		  joystickhid.botoes0 &= ~(uint8_t)(1<<5); 			// RESETA BOTAO SPEED 6 QUANDO ATIVA A REVERSA
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <main+0x4b4>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	f023 0320 	bic.w	r3, r3, #32
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <main+0x4b4>)
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	e006      	b.n	8001276 <main+0x47a>
	  }
	  else {
		  joystickhid.botoes_freio0 &= ~(uint32_t)(1<<2);	// RESETA BOTAO 19 SPEED REVERSA
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <main+0x4b4>)
 800126a:	789b      	ldrb	r3, [r3, #2]
 800126c:	f023 0304 	bic.w	r3, r3, #4
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <main+0x4b4>)
 8001274:	709a      	strb	r2, [r3, #2]
	  }


	  if (spi_values[0] > 4000 && spi_values[1] > 4000){  //se volante desconectado
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <main+0x4c4>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800127e:	d90d      	bls.n	800129c <main+0x4a0>
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <main+0x4c4>)
 8001282:	885b      	ldrh	r3, [r3, #2]
 8001284:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001288:	d908      	bls.n	800129c <main+0x4a0>
		  joystickhid.botoes0 = 0;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <main+0x4b4>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
	  	  joystickhid.botoes1 = 0;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <main+0x4b4>)
 8001292:	2200      	movs	r2, #0
 8001294:	705a      	strb	r2, [r3, #1]
	  	  joystickhid.botoes_freio0 = 0;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <main+0x4b4>)
 8001298:	2200      	movs	r2, #0
 800129a:	709a      	strb	r2, [r3, #2]
	  }

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 800129c:	2208      	movs	r2, #8
 800129e:	4904      	ldr	r1, [pc, #16]	; (80012b0 <main+0x4b4>)
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <main+0x4c8>)
 80012a2:	f007 fff1 	bl	8009288 <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f000 fcf0 	bl	8001c8c <HAL_Delay>
  {
 80012ac:	e5ca      	b.n	8000e44 <main+0x48>
 80012ae:	bf00      	nop
 80012b0:	20000354 	.word	0x20000354
 80012b4:	20000370 	.word	0x20000370
 80012b8:	20000004 	.word	0x20000004
 80012bc:	20000008 	.word	0x20000008
 80012c0:	2000035c 	.word	0x2000035c
 80012c4:	200003a4 	.word	0x200003a4

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	; 0x50
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d2:	2228      	movs	r2, #40	; 0x28
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f009 fd4a 	bl	800ad70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001306:	2301      	movs	r3, #1
 8001308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001314:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fcba 	bl	8004c98 <HAL_RCC_OscConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800132a:	f000 f9b1 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132e:	230f      	movs	r3, #15
 8001330:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2101      	movs	r1, #1
 800134a:	4618      	mov	r0, r3
 800134c:	f003 ff26 	bl	800519c <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001356:	f000 f99b 	bl	8001690 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800135a:	2312      	movs	r3, #18
 800135c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800135e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001362:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001364:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001368:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4618      	mov	r0, r3
 800136e:	f004 f8ad 	bl	80054cc <HAL_RCCEx_PeriphCLKConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001378:	f000 f98a 	bl	8001690 <Error_Handler>
  }
}
 800137c:	bf00      	nop
 800137e:	3750      	adds	r7, #80	; 0x50
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <MX_ADC1_Init+0xb0>)
 8001396:	4a28      	ldr	r2, [pc, #160]	; (8001438 <MX_ADC1_Init+0xb4>)
 8001398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <MX_ADC1_Init+0xb0>)
 800139c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013b0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013be:	2203      	movs	r2, #3
 80013c0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c2:	481c      	ldr	r0, [pc, #112]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013c4:	f000 fc86 	bl	8001cd4 <HAL_ADC_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80013ce:	f000 f95f 	bl	8001690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013da:	2307      	movs	r3, #7
 80013dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4814      	ldr	r0, [pc, #80]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013e4:	f000 fe48 	bl	8002078 <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013ee:	f000 f94f 	bl	8001690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_ADC1_Init+0xb0>)
 8001400:	f000 fe3a 	bl	8002078 <HAL_ADC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800140a:	f000 f941 	bl	8001690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800140e:	2302      	movs	r3, #2
 8001410:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001412:	2303      	movs	r3, #3
 8001414:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_ADC1_Init+0xb0>)
 800141c:	f000 fe2c 	bl	8002078 <HAL_ADC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001426:	f000 f933 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001ec 	.word	0x200001ec
 8001438:	40012400 	.word	0x40012400

0800143c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_SPI1_Init+0x64>)
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <MX_SPI1_Init+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_SPI1_Init+0x64>)
 8001448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_SPI1_Init+0x64>)
 800145c:	2202      	movs	r2, #2
 800145e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_SPI1_Init+0x64>)
 8001468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_SPI1_Init+0x64>)
 8001470:	2228      	movs	r2, #40	; 0x28
 8001472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_SPI1_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_SPI1_Init+0x64>)
 8001488:	220a      	movs	r2, #10
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_SPI1_Init+0x64>)
 800148e:	f004 f8d3 	bl	8005638 <HAL_SPI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001498:	f000 f8fa 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000260 	.word	0x20000260
 80014a4:	40013000 	.word	0x40013000

080014a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_SPI2_Init+0x64>)
 80014ae:	4a18      	ldr	r2, [pc, #96]	; (8001510 <MX_SPI2_Init+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <MX_SPI2_Init+0x64>)
 80014b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_SPI2_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_SPI2_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_SPI2_Init+0x64>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_SPI2_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_SPI2_Init+0x64>)
 80014d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_SPI2_Init+0x64>)
 80014dc:	2220      	movs	r2, #32
 80014de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_SPI2_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_SPI2_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <MX_SPI2_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_SPI2_Init+0x64>)
 80014f4:	220a      	movs	r2, #10
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_SPI2_Init+0x64>)
 80014fa:	f004 f89d 	bl	8005638 <HAL_SPI_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001504:	f000 f8c4 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200002b8 	.word	0x200002b8
 8001510:	40003800 	.word	0x40003800

08001514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_USART1_UART_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800154c:	f004 fda8 	bl	80060a0 <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001556:	f000 f89b 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000310 	.word	0x20000310
 8001564:	40013800 	.word	0x40013800

08001568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_DMA_Init+0x38>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <MX_DMA_Init+0x38>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6153      	str	r3, [r2, #20]
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_DMA_Init+0x38>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	200b      	movs	r0, #11
 800158c:	f001 f845 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001590:	200b      	movs	r0, #11
 8001592:	f001 f85e 	bl	8002652 <HAL_NVIC_EnableIRQ>

}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <MX_GPIO_Init+0xe0>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a31      	ldr	r2, [pc, #196]	; (8001684 <MX_GPIO_Init+0xe0>)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <MX_GPIO_Init+0xe0>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <MX_GPIO_Init+0xe0>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <MX_GPIO_Init+0xe0>)
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <MX_GPIO_Init+0xe0>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <MX_GPIO_Init+0xe0>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a25      	ldr	r2, [pc, #148]	; (8001684 <MX_GPIO_Init+0xe0>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <MX_GPIO_Init+0xe0>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_GPIO_Init+0xe0>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <MX_GPIO_Init+0xe0>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_GPIO_Init+0xe0>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFTER_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800161e:	481a      	ldr	r0, [pc, #104]	; (8001688 <MX_GPIO_Init+0xe4>)
 8001620:	f001 fe5d 	bl	80032de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CALIB_BUTTON_Pin */
  GPIO_InitStruct.Pin = CALIB_BUTTON_Pin;
 8001624:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CALIB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4619      	mov	r1, r3
 8001638:	4814      	ldr	r0, [pc, #80]	; (800168c <MX_GPIO_Init+0xe8>)
 800163a:	f001 fcb5 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFTER_CS_Pin */
  GPIO_InitStruct.Pin = SHIFTER_CS_Pin;
 800163e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHIFTER_CS_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <MX_GPIO_Init+0xe4>)
 8001658:	f001 fca6 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800165c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001662:	2311      	movs	r3, #17
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001666:	2301      	movs	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2302      	movs	r3, #2
 800166c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_GPIO_Init+0xe4>)
 8001676:	f001 fc97 	bl	8002fa8 <HAL_GPIO_Init>

}
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	40010c00 	.word	0x40010c00
 800168c:	40011000 	.word	0x40011000

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	e7fe      	b.n	8001698 <Error_Handler+0x8>
	...

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_MspInit+0x40>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <HAL_MspInit+0x40>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_MspInit+0x40>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_MspInit+0x40>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_MspInit+0x40>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_MspInit+0x40>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a28      	ldr	r2, [pc, #160]	; (800179c <HAL_ADC_MspInit+0xbc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d149      	bne.n	8001794 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 8001706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001730:	2307      	movs	r3, #7
 8001732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001734:	2303      	movs	r3, #3
 8001736:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	4819      	ldr	r0, [pc, #100]	; (80017a4 <HAL_ADC_MspInit+0xc4>)
 8001740:	f001 fc32 	bl	8002fa8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001746:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_ADC_MspInit+0xcc>)
 8001748:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800175e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001762:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800176e:	2220      	movs	r2, #32
 8001770:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800177a:	f000 ff85 	bl	8002688 <HAL_DMA_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001784:	f7ff ff84 	bl	8001690 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800178c:	621a      	str	r2, [r3, #32]
 800178e:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40012400 	.word	0x40012400
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010800 	.word	0x40010800
 80017a8:	2000021c 	.word	0x2000021c
 80017ac:	40020008 	.word	0x40020008

080017b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0318 	add.w	r3, r7, #24
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a3b      	ldr	r2, [pc, #236]	; (80018b8 <HAL_SPI_MspInit+0x108>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d138      	bne.n	8001842 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017d0:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a39      	ldr	r2, [pc, #228]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 80017d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a33      	ldr	r2, [pc, #204]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b31      	ldr	r3, [pc, #196]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001800:	23a0      	movs	r3, #160	; 0xa0
 8001802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0318 	add.w	r3, r7, #24
 8001810:	4619      	mov	r1, r3
 8001812:	482b      	ldr	r0, [pc, #172]	; (80018c0 <HAL_SPI_MspInit+0x110>)
 8001814:	f001 fbc8 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001818:	2340      	movs	r3, #64	; 0x40
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0318 	add.w	r3, r7, #24
 8001828:	4619      	mov	r1, r3
 800182a:	4825      	ldr	r0, [pc, #148]	; (80018c0 <HAL_SPI_MspInit+0x110>)
 800182c:	f001 fbbc 	bl	8002fa8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	2023      	movs	r0, #35	; 0x23
 8001836:	f000 fef0 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800183a:	2023      	movs	r0, #35	; 0x23
 800183c:	f000 ff09 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001840:	e036      	b.n	80018b0 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI2)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <HAL_SPI_MspInit+0x114>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d131      	bne.n	80018b0 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	4a1a      	ldr	r2, [pc, #104]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 8001852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001856:	61d3      	str	r3, [r2, #28]
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800187c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	f107 0318 	add.w	r3, r7, #24
 800188e:	4619      	mov	r1, r3
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <HAL_SPI_MspInit+0x118>)
 8001892:	f001 fb89 	bl	8002fa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4619      	mov	r1, r3
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <HAL_SPI_MspInit+0x118>)
 80018ac:	f001 fb7c 	bl	8002fa8 <HAL_GPIO_Init>
}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	; 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40013000 	.word	0x40013000
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010800 	.word	0x40010800
 80018c4:	40003800 	.word	0x40003800
 80018c8:	40010c00 	.word	0x40010c00

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_UART_MspInit+0x8c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d131      	bne.n	8001950 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_UART_MspInit+0x90>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_UART_MspInit+0x90>)
 80018f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_UART_MspInit+0x90>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_UART_MspInit+0x90>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_UART_MspInit+0x90>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_UART_MspInit+0x90>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800191c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001920:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	4619      	mov	r1, r3
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <HAL_UART_MspInit+0x94>)
 8001932:	f001 fb39 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4619      	mov	r1, r3
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_UART_MspInit+0x94>)
 800194c:	f001 fb2c 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40013800 	.word	0x40013800
 800195c:	40021000 	.word	0x40021000
 8001960:	40010800 	.word	0x40010800

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019aa:	f000 f953 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <DMA1_Channel1_IRQHandler+0x10>)
 80019ba:	f000 ff95 	bl	80028e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000021c 	.word	0x2000021c

080019c8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019ce:	f001 fde8 	bl	80035a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000868 	.word	0x20000868

080019dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <SPI1_IRQHandler+0x10>)
 80019e2:	f004 f961 	bl	8005ca8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000260 	.word	0x20000260

080019f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	return 1;
 80019f4:	2301      	movs	r3, #1
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <_kill>:

int _kill(int pid, int sig)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a08:	f009 f988 	bl	800ad1c <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2216      	movs	r2, #22
 8001a10:	601a      	str	r2, [r3, #0]
	return -1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_exit>:

void _exit (int status)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a26:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffe7 	bl	80019fe <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a30:	e7fe      	b.n	8001a30 <_exit+0x12>

08001a32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e00a      	b.n	8001a5a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a44:	f3af 8000 	nop.w
 8001a48:	4601      	mov	r1, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	60ba      	str	r2, [r7, #8]
 8001a50:	b2ca      	uxtb	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dbf0      	blt.n	8001a44 <_read+0x12>
	}

return len;
 8001a62:	687b      	ldr	r3, [r7, #4]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e009      	b.n	8001a92 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	60ba      	str	r2, [r7, #8]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dbf1      	blt.n	8001a7e <_write+0x12>
	}
	return len;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_close>:

int _close(int file)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	return -1;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aca:	605a      	str	r2, [r3, #4]
	return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <_isatty>:

int _isatty(int file)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	return 1;
 8001ae0:	2301      	movs	r3, #1
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f009 f8f2 	bl	800ad1c <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20005000 	.word	0x20005000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	20000374 	.word	0x20000374
 8001b6c:	20000bc0 	.word	0x20000bc0

08001b70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	; (8001bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	; (8001bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ba2:	f7ff ffe5 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f009 f8bf 	bl	800ad28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001baa:	f7ff f927 	bl	8000dfc <main>
  bx lr
 8001bae:	4770      	bx	lr
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001bb8:	0800c620 	.word	0x0800c620
  ldr r2, =_sbss
 8001bbc:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001bc0:	20000bbc 	.word	0x20000bbc

08001bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_2_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_Init+0x28>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_Init+0x28>)
 8001bd2:	f043 0310 	orr.w	r3, r3, #16
 8001bd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 fd13 	bl	8002604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	200f      	movs	r0, #15
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fd5a 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fd2b 	bl	800266e <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 fcf3 	bl	800261a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000000c 	.word	0x2000000c
 8001c4c:	20000014 	.word	0x20000014
 8001c50:	20000010 	.word	0x20000010

08001c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_IncTick+0x1c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_IncTick+0x20>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <HAL_IncTick+0x20>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	20000014 	.word	0x20000014
 8001c74:	20000378 	.word	0x20000378

08001c78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <HAL_GetTick+0x10>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	20000378 	.word	0x20000378

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffe0 	bl	8001c78 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000014 	.word	0x20000014

08001cd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0be      	b.n	8001e74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fce4 	bl	80016e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 faff 	bl	800231c <ADC_ConversionStop_Disable>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 8099 	bne.w	8001e62 <HAL_ADC_Init+0x18e>
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 8095 	bne.w	8001e62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d40:	f023 0302 	bic.w	r3, r3, #2
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7b1b      	ldrb	r3, [r3, #12]
 8001d5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6c:	d003      	beq.n	8001d76 <HAL_ADC_Init+0xa2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_ADC_Init+0xa8>
 8001d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7a:	e000      	b.n	8001d7e <HAL_ADC_Init+0xaa>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7d1b      	ldrb	r3, [r3, #20]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d119      	bne.n	8001dc0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7b1b      	ldrb	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	035a      	lsls	r2, r3, #13
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	e00b      	b.n	8001dc0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	f043 0220 	orr.w	r2, r3, #32
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_ADC_Init+0x1a8>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df0:	d003      	beq.n	8001dfa <HAL_ADC_Init+0x126>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d104      	bne.n	8001e04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	051b      	lsls	r3, r3, #20
 8001e02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_ADC_Init+0x1ac>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d10b      	bne.n	8001e40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e3e:	e018      	b.n	8001e72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	f023 0312 	bic.w	r3, r3, #18
 8001e48:	f043 0210 	orr.w	r2, r3, #16
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e60:	e007      	b.n	8001e72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e80:	ff1f0efe 	.word	0xff1f0efe

08001e84 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a64      	ldr	r2, [pc, #400]	; (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_Start_DMA+0x24>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a63      	ldr	r2, [pc, #396]	; (8002030 <HAL_ADC_Start_DMA+0x1ac>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d106      	bne.n	8001eb6 <HAL_ADC_Start_DMA+0x32>
 8001ea8:	4b60      	ldr	r3, [pc, #384]	; (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 80b3 	bne.w	800201c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_Start_DMA+0x40>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e0ae      	b.n	8002022 <HAL_ADC_Start_DMA+0x19e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f9cb 	bl	8002268 <ADC_Enable>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f040 809a 	bne.w	8002012 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a4e      	ldr	r2, [pc, #312]	; (8002030 <HAL_ADC_Start_DMA+0x1ac>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_Start_DMA+0x84>
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d115      	bne.n	8001f34 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d026      	beq.n	8001f70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f32:	e01d      	b.n	8001f70 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a39      	ldr	r2, [pc, #228]	; (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_ADC_Start_DMA+0xd0>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a38      	ldr	r2, [pc, #224]	; (8002030 <HAL_ADC_Start_DMA+0x1ac>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10d      	bne.n	8001f70 <HAL_ADC_Start_DMA+0xec>
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	f023 0206 	bic.w	r2, r3, #6
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a25      	ldr	r2, [pc, #148]	; (8002034 <HAL_ADC_Start_DMA+0x1b0>)
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	; (8002038 <HAL_ADC_Start_DMA+0x1b4>)
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <HAL_ADC_Start_DMA+0x1b8>)
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0202 	mvn.w	r2, #2
 8001fb8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a18      	ldr	r0, [r3, #32]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	334c      	adds	r3, #76	; 0x4c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f000 fbaf 	bl	800273c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fe8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fec:	d108      	bne.n	8002000 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ffc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ffe:	e00f      	b.n	8002020 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800200e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002010:	e006      	b.n	8002020 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800201a:	e001      	b.n	8002020 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002020:	7dfb      	ldrb	r3, [r7, #23]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40012400 	.word	0x40012400
 8002030:	40012800 	.word	0x40012800
 8002034:	0800239f 	.word	0x0800239f
 8002038:	0800241b 	.word	0x0800241b
 800203c:	08002437 	.word	0x08002437

08002040 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
	...

08002078 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x20>
 8002094:	2302      	movs	r3, #2
 8002096:	e0dc      	b.n	8002252 <HAL_ADC_ConfigChannel+0x1da>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b06      	cmp	r3, #6
 80020a6:	d81c      	bhi.n	80020e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	3b05      	subs	r3, #5
 80020ba:	221f      	movs	r2, #31
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	3b05      	subs	r3, #5
 80020d4:	fa00 f203 	lsl.w	r2, r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	635a      	str	r2, [r3, #52]	; 0x34
 80020e0:	e03c      	b.n	800215c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d81c      	bhi.n	8002124 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	3b23      	subs	r3, #35	; 0x23
 80020fc:	221f      	movs	r2, #31
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	4019      	ands	r1, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b23      	subs	r3, #35	; 0x23
 8002116:	fa00 f203 	lsl.w	r2, r0, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
 8002122:	e01b      	b.n	800215c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b41      	subs	r3, #65	; 0x41
 8002136:	221f      	movs	r2, #31
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	4019      	ands	r1, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	3b41      	subs	r3, #65	; 0x41
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b09      	cmp	r3, #9
 8002162:	d91c      	bls.n	800219e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68d9      	ldr	r1, [r3, #12]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	3b1e      	subs	r3, #30
 8002176:	2207      	movs	r2, #7
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	4019      	ands	r1, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6898      	ldr	r0, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	3b1e      	subs	r3, #30
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	e019      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6919      	ldr	r1, [r3, #16]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	2207      	movs	r2, #7
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4019      	ands	r1, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6898      	ldr	r0, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d003      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021de:	2b11      	cmp	r3, #17
 80021e0:	d132      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_ADC_ConfigChannel+0x1e4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d125      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d126      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002208:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b10      	cmp	r3, #16
 8002210:	d11a      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <HAL_ADC_ConfigChannel+0x1e8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_ADC_ConfigChannel+0x1ec>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	0c9a      	lsrs	r2, r3, #18
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002228:	e002      	b.n	8002230 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3b01      	subs	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <HAL_ADC_ConfigChannel+0x1b2>
 8002236:	e007      	b.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40012400 	.word	0x40012400
 8002260:	2000000c 	.word	0x2000000c
 8002264:	431bde83 	.word	0x431bde83

08002268 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d040      	beq.n	8002308 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <ADC_Enable+0xac>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <ADC_Enable+0xb0>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	0c9b      	lsrs	r3, r3, #18
 80022a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022a4:	e002      	b.n	80022ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f9      	bne.n	80022a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022b2:	f7ff fce1 	bl	8001c78 <HAL_GetTick>
 80022b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022b8:	e01f      	b.n	80022fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ba:	f7ff fcdd 	bl	8001c78 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d918      	bls.n	80022fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d011      	beq.n	80022fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	f043 0210 	orr.w	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e007      	b.n	800230a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d1d8      	bne.n	80022ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000000c 	.word	0x2000000c
 8002318:	431bde83 	.word	0x431bde83

0800231c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d12e      	bne.n	8002394 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002346:	f7ff fc97 	bl	8001c78 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800234c:	e01b      	b.n	8002386 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800234e:	f7ff fc93 	bl	8001c78 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d914      	bls.n	8002386 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d10d      	bne.n	8002386 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	f043 0210 	orr.w	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e007      	b.n	8002396 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d0dc      	beq.n	800234e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d127      	bne.n	8002408 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023d2:	d115      	bne.n	8002400 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff fe1d 	bl	8002040 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002406:	e004      	b.n	8002412 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff fe12 	bl	8002052 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	f043 0204 	orr.w	r2, r3, #4
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f7ff fe01 	bl	8002064 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4906      	ldr	r1, [pc, #24]	; (8002504 <__NVIC_EnableIRQ+0x34>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
         );
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d0:	d301      	bcc.n	80025d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <SysTick_Config+0x40>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025de:	210f      	movs	r1, #15
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295
 80025e4:	f7ff ff90 	bl	8002508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <SysTick_Config+0x40>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <SysTick_Config+0x40>)
 80025f0:	2207      	movs	r2, #7
 80025f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000e010 	.word	0xe000e010

08002604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff2d 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800262c:	f7ff ff42 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	6978      	ldr	r0, [r7, #20]
 8002638:	f7ff ff90 	bl	800255c <NVIC_EncodePriority>
 800263c:	4602      	mov	r2, r0
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff5f 	bl	8002508 <__NVIC_SetPriority>
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff35 	bl	80024d0 <__NVIC_EnableIRQ>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ffa2 	bl	80025c0 <SysTick_Config>
 800267c:	4603      	mov	r3, r0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e043      	b.n	8002726 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_DMA_Init+0xa8>)
 80026a6:	4413      	add	r3, r2
 80026a8:	4a22      	ldr	r2, [pc, #136]	; (8002734 <HAL_DMA_Init+0xac>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	009a      	lsls	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1f      	ldr	r2, [pc, #124]	; (8002738 <HAL_DMA_Init+0xb0>)
 80026ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	bffdfff8 	.word	0xbffdfff8
 8002734:	cccccccd 	.word	0xcccccccd
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_DMA_Start_IT+0x20>
 8002758:	2302      	movs	r3, #2
 800275a:	e04a      	b.n	80027f2 <HAL_DMA_Start_IT+0xb6>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800276a:	2b01      	cmp	r3, #1
 800276c:	d13a      	bne.n	80027e4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2202      	movs	r2, #2
 8002772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f9ae 	bl	8002af4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 020e 	orr.w	r2, r2, #14
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e00f      	b.n	80027d2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0204 	bic.w	r2, r2, #4
 80027c0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 020a 	orr.w	r2, r2, #10
 80027d0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e005      	b.n	80027f0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
 80027ee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800280e:	2b02      	cmp	r3, #2
 8002810:	d005      	beq.n	800281e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2204      	movs	r2, #4
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	e051      	b.n	80028c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 020e 	bic.w	r2, r2, #14
 800282c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a22      	ldr	r2, [pc, #136]	; (80028cc <HAL_DMA_Abort_IT+0xd0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d029      	beq.n	800289c <HAL_DMA_Abort_IT+0xa0>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <HAL_DMA_Abort_IT+0xd4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d022      	beq.n	8002898 <HAL_DMA_Abort_IT+0x9c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <HAL_DMA_Abort_IT+0xd8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d01a      	beq.n	8002892 <HAL_DMA_Abort_IT+0x96>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <HAL_DMA_Abort_IT+0xdc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d012      	beq.n	800288c <HAL_DMA_Abort_IT+0x90>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <HAL_DMA_Abort_IT+0xe0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00a      	beq.n	8002886 <HAL_DMA_Abort_IT+0x8a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <HAL_DMA_Abort_IT+0xe4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d102      	bne.n	8002880 <HAL_DMA_Abort_IT+0x84>
 800287a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800287e:	e00e      	b.n	800289e <HAL_DMA_Abort_IT+0xa2>
 8002880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002884:	e00b      	b.n	800289e <HAL_DMA_Abort_IT+0xa2>
 8002886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800288a:	e008      	b.n	800289e <HAL_DMA_Abort_IT+0xa2>
 800288c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002890:	e005      	b.n	800289e <HAL_DMA_Abort_IT+0xa2>
 8002892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002896:	e002      	b.n	800289e <HAL_DMA_Abort_IT+0xa2>
 8002898:	2310      	movs	r3, #16
 800289a:	e000      	b.n	800289e <HAL_DMA_Abort_IT+0xa2>
 800289c:	2301      	movs	r3, #1
 800289e:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <HAL_DMA_Abort_IT+0xe8>)
 80028a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
    } 
  }
  return status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40020008 	.word	0x40020008
 80028d0:	4002001c 	.word	0x4002001c
 80028d4:	40020030 	.word	0x40020030
 80028d8:	40020044 	.word	0x40020044
 80028dc:	40020058 	.word	0x40020058
 80028e0:	4002006c 	.word	0x4002006c
 80028e4:	40020000 	.word	0x40020000

080028e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2204      	movs	r2, #4
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d04f      	beq.n	80029b0 <HAL_DMA_IRQHandler+0xc8>
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d04a      	beq.n	80029b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0204 	bic.w	r2, r2, #4
 8002936:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a66      	ldr	r2, [pc, #408]	; (8002ad8 <HAL_DMA_IRQHandler+0x1f0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d029      	beq.n	8002996 <HAL_DMA_IRQHandler+0xae>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a65      	ldr	r2, [pc, #404]	; (8002adc <HAL_DMA_IRQHandler+0x1f4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d022      	beq.n	8002992 <HAL_DMA_IRQHandler+0xaa>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a63      	ldr	r2, [pc, #396]	; (8002ae0 <HAL_DMA_IRQHandler+0x1f8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01a      	beq.n	800298c <HAL_DMA_IRQHandler+0xa4>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a62      	ldr	r2, [pc, #392]	; (8002ae4 <HAL_DMA_IRQHandler+0x1fc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d012      	beq.n	8002986 <HAL_DMA_IRQHandler+0x9e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a60      	ldr	r2, [pc, #384]	; (8002ae8 <HAL_DMA_IRQHandler+0x200>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00a      	beq.n	8002980 <HAL_DMA_IRQHandler+0x98>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a5f      	ldr	r2, [pc, #380]	; (8002aec <HAL_DMA_IRQHandler+0x204>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d102      	bne.n	800297a <HAL_DMA_IRQHandler+0x92>
 8002974:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002978:	e00e      	b.n	8002998 <HAL_DMA_IRQHandler+0xb0>
 800297a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800297e:	e00b      	b.n	8002998 <HAL_DMA_IRQHandler+0xb0>
 8002980:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002984:	e008      	b.n	8002998 <HAL_DMA_IRQHandler+0xb0>
 8002986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800298a:	e005      	b.n	8002998 <HAL_DMA_IRQHandler+0xb0>
 800298c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002990:	e002      	b.n	8002998 <HAL_DMA_IRQHandler+0xb0>
 8002992:	2340      	movs	r3, #64	; 0x40
 8002994:	e000      	b.n	8002998 <HAL_DMA_IRQHandler+0xb0>
 8002996:	2304      	movs	r3, #4
 8002998:	4a55      	ldr	r2, [pc, #340]	; (8002af0 <HAL_DMA_IRQHandler+0x208>)
 800299a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8094 	beq.w	8002ace <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029ae:	e08e      	b.n	8002ace <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	2202      	movs	r2, #2
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d056      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x186>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d051      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 020a 	bic.w	r2, r2, #10
 80029e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a38      	ldr	r2, [pc, #224]	; (8002ad8 <HAL_DMA_IRQHandler+0x1f0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d029      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x166>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a37      	ldr	r2, [pc, #220]	; (8002adc <HAL_DMA_IRQHandler+0x1f4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d022      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x162>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a35      	ldr	r2, [pc, #212]	; (8002ae0 <HAL_DMA_IRQHandler+0x1f8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01a      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x15c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a34      	ldr	r2, [pc, #208]	; (8002ae4 <HAL_DMA_IRQHandler+0x1fc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d012      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x156>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <HAL_DMA_IRQHandler+0x200>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00a      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x150>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a31      	ldr	r2, [pc, #196]	; (8002aec <HAL_DMA_IRQHandler+0x204>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d102      	bne.n	8002a32 <HAL_DMA_IRQHandler+0x14a>
 8002a2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a30:	e00e      	b.n	8002a50 <HAL_DMA_IRQHandler+0x168>
 8002a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a36:	e00b      	b.n	8002a50 <HAL_DMA_IRQHandler+0x168>
 8002a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a3c:	e008      	b.n	8002a50 <HAL_DMA_IRQHandler+0x168>
 8002a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a42:	e005      	b.n	8002a50 <HAL_DMA_IRQHandler+0x168>
 8002a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a48:	e002      	b.n	8002a50 <HAL_DMA_IRQHandler+0x168>
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e000      	b.n	8002a50 <HAL_DMA_IRQHandler+0x168>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <HAL_DMA_IRQHandler+0x208>)
 8002a52:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d034      	beq.n	8002ace <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a6c:	e02f      	b.n	8002ace <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2208      	movs	r2, #8
 8002a74:	409a      	lsls	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d028      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x1e8>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d023      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 020e 	bic.w	r2, r2, #14
 8002a96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
    }
  }
  return;
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
}
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40020008 	.word	0x40020008
 8002adc:	4002001c 	.word	0x4002001c
 8002ae0:	40020030 	.word	0x40020030
 8002ae4:	40020044 	.word	0x40020044
 8002ae8:	40020058 	.word	0x40020058
 8002aec:	4002006c 	.word	0x4002006c
 8002af0:	40020000 	.word	0x40020000

08002af4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b10      	cmp	r3, #16
 8002b20:	d108      	bne.n	8002b34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b32:	e007      	b.n	8002b44 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	60da      	str	r2, [r3, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b6a:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <HAL_FLASH_Program+0xd8>)
 8002b6c:	7e1b      	ldrb	r3, [r3, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_FLASH_Program+0x26>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e054      	b.n	8002c20 <HAL_FLASH_Program+0xd0>
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <HAL_FLASH_Program+0xd8>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b80:	f000 f8d4 	bl	8002d2c <FLASH_WaitForLastOperation>
 8002b84:	4603      	mov	r3, r0
 8002b86:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d144      	bne.n	8002c18 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d102      	bne.n	8002b9a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002b94:	2301      	movs	r3, #1
 8002b96:	757b      	strb	r3, [r7, #21]
 8002b98:	e007      	b.n	8002baa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d102      	bne.n	8002ba6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	757b      	strb	r3, [r7, #21]
 8002ba4:	e001      	b.n	8002baa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	75bb      	strb	r3, [r7, #22]
 8002bae:	e02d      	b.n	8002c0c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002bb0:	7dbb      	ldrb	r3, [r7, #22]
 8002bb2:	005a      	lsls	r2, r3, #1
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	eb02 0c03 	add.w	ip, r2, r3
 8002bba:	7dbb      	ldrb	r3, [r7, #22]
 8002bbc:	0119      	lsls	r1, r3, #4
 8002bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bc2:	f1c1 0620 	rsb	r6, r1, #32
 8002bc6:	f1a1 0020 	sub.w	r0, r1, #32
 8002bca:	fa22 f401 	lsr.w	r4, r2, r1
 8002bce:	fa03 f606 	lsl.w	r6, r3, r6
 8002bd2:	4334      	orrs	r4, r6
 8002bd4:	fa23 f000 	lsr.w	r0, r3, r0
 8002bd8:	4304      	orrs	r4, r0
 8002bda:	fa23 f501 	lsr.w	r5, r3, r1
 8002bde:	b2a3      	uxth	r3, r4
 8002be0:	4619      	mov	r1, r3
 8002be2:	4660      	mov	r0, ip
 8002be4:	f000 f886 	bl	8002cf4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002be8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bec:	f000 f89e 	bl	8002d2c <FLASH_WaitForLastOperation>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_FLASH_Program+0xdc>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <HAL_FLASH_Program+0xdc>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002c06:	7dbb      	ldrb	r3, [r7, #22]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	75bb      	strb	r3, [r7, #22]
 8002c0c:	7dba      	ldrb	r2, [r7, #22]
 8002c0e:	7d7b      	ldrb	r3, [r7, #21]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d3cd      	bcc.n	8002bb0 <HAL_FLASH_Program+0x60>
 8002c14:	e000      	b.n	8002c18 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002c16:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <HAL_FLASH_Program+0xd8>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	761a      	strb	r2, [r3, #24]

  return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c28:	20000380 	.word	0x20000380
 8002c2c:	40022000 	.word	0x40022000

08002c30 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_FLASH_Unlock+0x40>)
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_FLASH_Unlock+0x40>)
 8002c48:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <HAL_FLASH_Unlock+0x44>)
 8002c4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_FLASH_Unlock+0x40>)
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_FLASH_Unlock+0x48>)
 8002c50:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HAL_FLASH_Unlock+0x40>)
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002c62:	79fb      	ldrb	r3, [r7, #7]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40022000 	.word	0x40022000
 8002c74:	45670123 	.word	0x45670123
 8002c78:	cdef89ab 	.word	0xcdef89ab

08002c7c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_FLASH_Lock+0x1c>)
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <HAL_FLASH_Lock+0x1c>)
 8002c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40022000 	.word	0x40022000

08002c9c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_FLASH_OB_Unlock+0x2c>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_FLASH_OB_Unlock+0x2c>)
 8002cae:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <HAL_FLASH_OB_Unlock+0x30>)
 8002cb0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_FLASH_OB_Unlock+0x2c>)
 8002cb4:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <HAL_FLASH_OB_Unlock+0x34>)
 8002cb6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e000      	b.n	8002cbe <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	45670123 	.word	0x45670123
 8002cd0:	cdef89ab 	.word	0xcdef89ab

08002cd4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_FLASH_OB_Lock+0x1c>)
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <HAL_FLASH_OB_Lock+0x1c>)
 8002cde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ce2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40022000 	.word	0x40022000

08002cf4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <FLASH_Program_HalfWord+0x30>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <FLASH_Program_HalfWord+0x34>)
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <FLASH_Program_HalfWord+0x34>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	887a      	ldrh	r2, [r7, #2]
 8002d16:	801a      	strh	r2, [r3, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000380 	.word	0x20000380
 8002d28:	40022000 	.word	0x40022000

08002d2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7fe ffa0 	bl	8001c78 <HAL_GetTick>
 8002d38:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d3a:	e010      	b.n	8002d5e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d42:	d00c      	beq.n	8002d5e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <FLASH_WaitForLastOperation+0x2e>
 8002d4a:	f7fe ff95 	bl	8001c78 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d201      	bcs.n	8002d5e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e025      	b.n	8002daa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <FLASH_WaitForLastOperation+0x88>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e8      	bne.n	8002d3c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <FLASH_WaitForLastOperation+0x88>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <FLASH_WaitForLastOperation+0x88>)
 8002d78:	2220      	movs	r2, #32
 8002d7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <FLASH_WaitForLastOperation+0x88>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <FLASH_WaitForLastOperation+0x88>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d105      	bne.n	8002da0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <FLASH_WaitForLastOperation+0x88>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002da0:	f000 f80a 	bl	8002db8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40022000 	.word	0x40022000

08002db8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002dc2:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <FLASH_SetErrorCode+0x98>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <FLASH_SetErrorCode+0x9c>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <FLASH_SetErrorCode+0x9c>)
 8002dd8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f043 0310 	orr.w	r3, r3, #16
 8002de0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <FLASH_SetErrorCode+0x98>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <FLASH_SetErrorCode+0x9c>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <FLASH_SetErrorCode+0x9c>)
 8002df8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002e02:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <FLASH_SetErrorCode+0x98>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <FLASH_SetErrorCode+0x9c>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <FLASH_SetErrorCode+0x9c>)
 8002e18:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <FLASH_SetErrorCode+0x98>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <FLASH_SetErrorCode+0x98>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f240 1201 	movw	r2, #257	; 0x101
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d106      	bne.n	8002e3e <FLASH_SetErrorCode+0x86>
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <FLASH_SetErrorCode+0x98>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4a06      	ldr	r2, [pc, #24]	; (8002e50 <FLASH_SetErrorCode+0x98>)
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	61d3      	str	r3, [r2, #28]
}  
 8002e3c:	e002      	b.n	8002e44 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e3e:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <FLASH_SetErrorCode+0x98>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	60d3      	str	r3, [r2, #12]
}  
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40022000 	.word	0x40022000
 8002e54:	20000380 	.word	0x20000380

08002e58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_FLASHEx_Erase+0xd0>)
 8002e6c:	7e1b      	ldrb	r3, [r3, #24]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_FLASHEx_Erase+0x1e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e053      	b.n	8002f1e <HAL_FLASHEx_Erase+0xc6>
 8002e76:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <HAL_FLASHEx_Erase+0xd0>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d116      	bne.n	8002eb2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002e84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e88:	f7ff ff50 	bl	8002d2c <FLASH_WaitForLastOperation>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d141      	bne.n	8002f16 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f000 f84c 	bl	8002f30 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e9c:	f7ff ff46 	bl	8002d2c <FLASH_WaitForLastOperation>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002ea4:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <HAL_FLASHEx_Erase+0xd4>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	4a20      	ldr	r2, [pc, #128]	; (8002f2c <HAL_FLASHEx_Erase+0xd4>)
 8002eaa:	f023 0304 	bic.w	r3, r3, #4
 8002eae:	6113      	str	r3, [r2, #16]
 8002eb0:	e031      	b.n	8002f16 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002eb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002eb6:	f7ff ff39 	bl	8002d2c <FLASH_WaitForLastOperation>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d12a      	bne.n	8002f16 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	e019      	b.n	8002f04 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002ed0:	68b8      	ldr	r0, [r7, #8]
 8002ed2:	f000 f849 	bl	8002f68 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ed6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002eda:	f7ff ff27 	bl	8002d2c <FLASH_WaitForLastOperation>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_FLASHEx_Erase+0xd4>)
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	4a11      	ldr	r2, [pc, #68]	; (8002f2c <HAL_FLASHEx_Erase+0xd4>)
 8002ee8:	f023 0302 	bic.w	r3, r3, #2
 8002eec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	601a      	str	r2, [r3, #0]
            break;
 8002efa:	e00c      	b.n	8002f16 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f02:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	029a      	lsls	r2, r3, #10
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d3dc      	bcc.n	8002ed0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <HAL_FLASHEx_Erase+0xd0>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	761a      	strb	r2, [r3, #24]

  return status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000380 	.word	0x20000380
 8002f2c:	40022000 	.word	0x40022000

08002f30 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <FLASH_MassErase+0x30>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <FLASH_MassErase+0x34>)
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <FLASH_MassErase+0x34>)
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <FLASH_MassErase+0x34>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <FLASH_MassErase+0x34>)
 8002f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f54:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	20000380 	.word	0x20000380
 8002f64:	40022000 	.word	0x40022000

08002f68 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <FLASH_PageErase+0x38>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <FLASH_PageErase+0x3c>)
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <FLASH_PageErase+0x3c>)
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002f82:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <FLASH_PageErase+0x3c>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <FLASH_PageErase+0x3c>)
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <FLASH_PageErase+0x3c>)
 8002f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f92:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000380 	.word	0x20000380
 8002fa4:	40022000 	.word	0x40022000

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b08b      	sub	sp, #44	; 0x2c
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fba:	e169      	b.n	8003290 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	f040 8158 	bne.w	800328a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4a9a      	ldr	r2, [pc, #616]	; (8003248 <HAL_GPIO_Init+0x2a0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d05e      	beq.n	80030a2 <HAL_GPIO_Init+0xfa>
 8002fe4:	4a98      	ldr	r2, [pc, #608]	; (8003248 <HAL_GPIO_Init+0x2a0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d875      	bhi.n	80030d6 <HAL_GPIO_Init+0x12e>
 8002fea:	4a98      	ldr	r2, [pc, #608]	; (800324c <HAL_GPIO_Init+0x2a4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d058      	beq.n	80030a2 <HAL_GPIO_Init+0xfa>
 8002ff0:	4a96      	ldr	r2, [pc, #600]	; (800324c <HAL_GPIO_Init+0x2a4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d86f      	bhi.n	80030d6 <HAL_GPIO_Init+0x12e>
 8002ff6:	4a96      	ldr	r2, [pc, #600]	; (8003250 <HAL_GPIO_Init+0x2a8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d052      	beq.n	80030a2 <HAL_GPIO_Init+0xfa>
 8002ffc:	4a94      	ldr	r2, [pc, #592]	; (8003250 <HAL_GPIO_Init+0x2a8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d869      	bhi.n	80030d6 <HAL_GPIO_Init+0x12e>
 8003002:	4a94      	ldr	r2, [pc, #592]	; (8003254 <HAL_GPIO_Init+0x2ac>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d04c      	beq.n	80030a2 <HAL_GPIO_Init+0xfa>
 8003008:	4a92      	ldr	r2, [pc, #584]	; (8003254 <HAL_GPIO_Init+0x2ac>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d863      	bhi.n	80030d6 <HAL_GPIO_Init+0x12e>
 800300e:	4a92      	ldr	r2, [pc, #584]	; (8003258 <HAL_GPIO_Init+0x2b0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d046      	beq.n	80030a2 <HAL_GPIO_Init+0xfa>
 8003014:	4a90      	ldr	r2, [pc, #576]	; (8003258 <HAL_GPIO_Init+0x2b0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d85d      	bhi.n	80030d6 <HAL_GPIO_Init+0x12e>
 800301a:	2b12      	cmp	r3, #18
 800301c:	d82a      	bhi.n	8003074 <HAL_GPIO_Init+0xcc>
 800301e:	2b12      	cmp	r3, #18
 8003020:	d859      	bhi.n	80030d6 <HAL_GPIO_Init+0x12e>
 8003022:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <HAL_GPIO_Init+0x80>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	080030a3 	.word	0x080030a3
 800302c:	0800307d 	.word	0x0800307d
 8003030:	0800308f 	.word	0x0800308f
 8003034:	080030d1 	.word	0x080030d1
 8003038:	080030d7 	.word	0x080030d7
 800303c:	080030d7 	.word	0x080030d7
 8003040:	080030d7 	.word	0x080030d7
 8003044:	080030d7 	.word	0x080030d7
 8003048:	080030d7 	.word	0x080030d7
 800304c:	080030d7 	.word	0x080030d7
 8003050:	080030d7 	.word	0x080030d7
 8003054:	080030d7 	.word	0x080030d7
 8003058:	080030d7 	.word	0x080030d7
 800305c:	080030d7 	.word	0x080030d7
 8003060:	080030d7 	.word	0x080030d7
 8003064:	080030d7 	.word	0x080030d7
 8003068:	080030d7 	.word	0x080030d7
 800306c:	08003085 	.word	0x08003085
 8003070:	08003099 	.word	0x08003099
 8003074:	4a79      	ldr	r2, [pc, #484]	; (800325c <HAL_GPIO_Init+0x2b4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800307a:	e02c      	b.n	80030d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	623b      	str	r3, [r7, #32]
          break;
 8003082:	e029      	b.n	80030d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	3304      	adds	r3, #4
 800308a:	623b      	str	r3, [r7, #32]
          break;
 800308c:	e024      	b.n	80030d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	3308      	adds	r3, #8
 8003094:	623b      	str	r3, [r7, #32]
          break;
 8003096:	e01f      	b.n	80030d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	330c      	adds	r3, #12
 800309e:	623b      	str	r3, [r7, #32]
          break;
 80030a0:	e01a      	b.n	80030d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d102      	bne.n	80030b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030aa:	2304      	movs	r3, #4
 80030ac:	623b      	str	r3, [r7, #32]
          break;
 80030ae:	e013      	b.n	80030d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030b8:	2308      	movs	r3, #8
 80030ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	611a      	str	r2, [r3, #16]
          break;
 80030c2:	e009      	b.n	80030d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c4:	2308      	movs	r3, #8
 80030c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	615a      	str	r2, [r3, #20]
          break;
 80030ce:	e003      	b.n	80030d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030d0:	2300      	movs	r3, #0
 80030d2:	623b      	str	r3, [r7, #32]
          break;
 80030d4:	e000      	b.n	80030d8 <HAL_GPIO_Init+0x130>
          break;
 80030d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2bff      	cmp	r3, #255	; 0xff
 80030dc:	d801      	bhi.n	80030e2 <HAL_GPIO_Init+0x13a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	e001      	b.n	80030e6 <HAL_GPIO_Init+0x13e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2bff      	cmp	r3, #255	; 0xff
 80030ec:	d802      	bhi.n	80030f4 <HAL_GPIO_Init+0x14c>
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	e002      	b.n	80030fa <HAL_GPIO_Init+0x152>
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	3b08      	subs	r3, #8
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	210f      	movs	r1, #15
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	401a      	ands	r2, r3
 800310c:	6a39      	ldr	r1, [r7, #32]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	431a      	orrs	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80b1 	beq.w	800328a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003128:	4b4d      	ldr	r3, [pc, #308]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	4a4c      	ldr	r2, [pc, #304]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6193      	str	r3, [r2, #24]
 8003134:	4b4a      	ldr	r3, [pc, #296]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003140:	4a48      	ldr	r2, [pc, #288]	; (8003264 <HAL_GPIO_Init+0x2bc>)
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	220f      	movs	r2, #15
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4013      	ands	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a40      	ldr	r2, [pc, #256]	; (8003268 <HAL_GPIO_Init+0x2c0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_GPIO_Init+0x1ec>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3f      	ldr	r2, [pc, #252]	; (800326c <HAL_GPIO_Init+0x2c4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00d      	beq.n	8003190 <HAL_GPIO_Init+0x1e8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3e      	ldr	r2, [pc, #248]	; (8003270 <HAL_GPIO_Init+0x2c8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d007      	beq.n	800318c <HAL_GPIO_Init+0x1e4>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3d      	ldr	r2, [pc, #244]	; (8003274 <HAL_GPIO_Init+0x2cc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_GPIO_Init+0x1e0>
 8003184:	2303      	movs	r3, #3
 8003186:	e006      	b.n	8003196 <HAL_GPIO_Init+0x1ee>
 8003188:	2304      	movs	r3, #4
 800318a:	e004      	b.n	8003196 <HAL_GPIO_Init+0x1ee>
 800318c:	2302      	movs	r3, #2
 800318e:	e002      	b.n	8003196 <HAL_GPIO_Init+0x1ee>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_GPIO_Init+0x1ee>
 8003194:	2300      	movs	r3, #0
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	f002 0203 	and.w	r2, r2, #3
 800319c:	0092      	lsls	r2, r2, #2
 800319e:	4093      	lsls	r3, r2
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031a6:	492f      	ldr	r1, [pc, #188]	; (8003264 <HAL_GPIO_Init+0x2bc>)
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3302      	adds	r3, #2
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031c0:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	492c      	ldr	r1, [pc, #176]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031ce:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	4928      	ldr	r1, [pc, #160]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 80031d8:	4013      	ands	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4922      	ldr	r1, [pc, #136]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	491e      	ldr	r1, [pc, #120]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 8003200:	4013      	ands	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d006      	beq.n	800321e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003210:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	4918      	ldr	r1, [pc, #96]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]
 800321c:	e006      	b.n	800322c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	43db      	mvns	r3, r3
 8003226:	4914      	ldr	r1, [pc, #80]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 8003228:	4013      	ands	r3, r2
 800322a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d021      	beq.n	800327c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	490e      	ldr	r1, [pc, #56]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	60cb      	str	r3, [r1, #12]
 8003244:	e021      	b.n	800328a <HAL_GPIO_Init+0x2e2>
 8003246:	bf00      	nop
 8003248:	10320000 	.word	0x10320000
 800324c:	10310000 	.word	0x10310000
 8003250:	10220000 	.word	0x10220000
 8003254:	10210000 	.word	0x10210000
 8003258:	10120000 	.word	0x10120000
 800325c:	10110000 	.word	0x10110000
 8003260:	40021000 	.word	0x40021000
 8003264:	40010000 	.word	0x40010000
 8003268:	40010800 	.word	0x40010800
 800326c:	40010c00 	.word	0x40010c00
 8003270:	40011000 	.word	0x40011000
 8003274:	40011400 	.word	0x40011400
 8003278:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_GPIO_Init+0x304>)
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	43db      	mvns	r3, r3
 8003284:	4909      	ldr	r1, [pc, #36]	; (80032ac <HAL_GPIO_Init+0x304>)
 8003286:	4013      	ands	r3, r2
 8003288:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	3301      	adds	r3, #1
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	fa22 f303 	lsr.w	r3, r2, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	f47f ae8e 	bne.w	8002fbc <HAL_GPIO_Init+0x14>
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	372c      	adds	r7, #44	; 0x2c
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	40010400 	.word	0x40010400

080032b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	887b      	ldrh	r3, [r7, #2]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	e001      	b.n	80032d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	807b      	strh	r3, [r7, #2]
 80032ea:	4613      	mov	r3, r2
 80032ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ee:	787b      	ldrb	r3, [r7, #1]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f4:	887a      	ldrh	r2, [r7, #2]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032fa:	e003      	b.n	8003304 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032fc:	887b      	ldrh	r3, [r7, #2]
 80032fe:	041a      	lsls	r2, r3, #16
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	611a      	str	r2, [r3, #16]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003320:	887a      	ldrh	r2, [r7, #2]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4013      	ands	r3, r2
 8003326:	041a      	lsls	r2, r3, #16
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	43d9      	mvns	r1, r3
 800332c:	887b      	ldrh	r3, [r7, #2]
 800332e:	400b      	ands	r3, r1
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	611a      	str	r2, [r3, #16]
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003342:	b08b      	sub	sp, #44	; 0x2c
 8003344:	af06      	add	r7, sp, #24
 8003346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0fd      	b.n	800354e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f007 fa46 	bl	800a7f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2203      	movs	r2, #3
 8003370:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f003 f86f 	bl	800645c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	687e      	ldr	r6, [r7, #4]
 8003386:	466d      	mov	r5, sp
 8003388:	f106 0410 	add.w	r4, r6, #16
 800338c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	602b      	str	r3, [r5, #0]
 8003394:	1d33      	adds	r3, r6, #4
 8003396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003398:	6838      	ldr	r0, [r7, #0]
 800339a:	f003 f839 	bl	8006410 <USB_CoreInit>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0ce      	b.n	800354e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 f86a 	bl	8006490 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
 80033c0:	e04c      	b.n	800345c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	3301      	adds	r3, #1
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	b298      	uxth	r0, r3
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	3336      	adds	r3, #54	; 0x36
 8003400:	4602      	mov	r2, r0
 8003402:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	3303      	adds	r3, #3
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	3338      	adds	r3, #56	; 0x38
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	333c      	adds	r3, #60	; 0x3c
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	3340      	adds	r3, #64	; 0x40
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	3301      	adds	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d3ad      	bcc.n	80033c2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	e044      	b.n	80034f6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	440b      	add	r3, r1
 80034bc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	3301      	adds	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d3b5      	bcc.n	800346c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	687e      	ldr	r6, [r7, #4]
 8003508:	466d      	mov	r5, sp
 800350a:	f106 0410 	add.w	r4, r6, #16
 800350e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	602b      	str	r3, [r5, #0]
 8003516:	1d33      	adds	r3, r6, #4
 8003518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800351a:	6838      	ldr	r0, [r7, #0]
 800351c:	f002 ffc4 	bl	80064a8 <USB_DevInit>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e00d      	b.n	800354e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f005 fc76 	bl	8008e38 <USB_DevDisconnect>

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003556 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_PCD_Start+0x16>
 8003568:	2302      	movs	r3, #2
 800356a:	e016      	b.n	800359a <HAL_PCD_Start+0x44>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f002 ff59 	bl	8006430 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800357e:	2101      	movs	r1, #1
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f007 fb90 	bl	800aca6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f005 fc4a 	bl	8008e24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b088      	sub	sp, #32
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f005 fc4c 	bl	8008e4c <USB_ReadInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035be:	d102      	bne.n	80035c6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fb48 	bl	8003c56 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f005 fc3e 	bl	8008e4c <USB_ReadInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035da:	d112      	bne.n	8003602 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ee:	b292      	uxth	r2, r2
 80035f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f007 f97a 	bl	800a8ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035fa:	2100      	movs	r1, #0
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f923 	bl	8003848 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f005 fc20 	bl	8008e4c <USB_ReadInterrupts>
 800360c:	4603      	mov	r3, r0
 800360e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003616:	d10b      	bne.n	8003630 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003620:	b29a      	uxth	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800362a:	b292      	uxth	r2, r2
 800362c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f005 fc09 	bl	8008e4c <USB_ReadInterrupts>
 800363a:	4603      	mov	r3, r0
 800363c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003644:	d10b      	bne.n	800365e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800364e:	b29a      	uxth	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003658:	b292      	uxth	r2, r2
 800365a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f005 fbf2 	bl	8008e4c <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003672:	d126      	bne.n	80036c2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0204 	bic.w	r2, r2, #4
 8003686:	b292      	uxth	r2, r2
 8003688:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0208 	bic.w	r2, r2, #8
 800369e:	b292      	uxth	r2, r2
 80036a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f007 f95b 	bl	800a960 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036bc:	b292      	uxth	r2, r2
 80036be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f005 fbc0 	bl	8008e4c <USB_ReadInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d6:	f040 8082 	bne.w	80037de <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80036da:	2300      	movs	r3, #0
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e010      	b.n	8003702 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	7ffb      	ldrb	r3, [r7, #31]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	441a      	add	r2, r3
 80036ec:	7ffb      	ldrb	r3, [r7, #31]
 80036ee:	8812      	ldrh	r2, [r2, #0]
 80036f0:	b292      	uxth	r2, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	3320      	adds	r3, #32
 80036f6:	443b      	add	r3, r7
 80036f8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80036fc:	7ffb      	ldrb	r3, [r7, #31]
 80036fe:	3301      	adds	r3, #1
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	7ffb      	ldrb	r3, [r7, #31]
 8003704:	2b07      	cmp	r3, #7
 8003706:	d9eb      	bls.n	80036e0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	b292      	uxth	r2, r2
 800371c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0201 	bic.w	r2, r2, #1
 8003732:	b292      	uxth	r2, r2
 8003734:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003738:	bf00      	nop
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003742:	b29b      	uxth	r3, r3
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f6      	beq.n	800373a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003754:	b29a      	uxth	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375e:	b292      	uxth	r2, r2
 8003760:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003764:	2300      	movs	r3, #0
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e00f      	b.n	800378a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800376a:	7ffb      	ldrb	r3, [r7, #31]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	4611      	mov	r1, r2
 8003772:	7ffa      	ldrb	r2, [r7, #31]
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	440a      	add	r2, r1
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	3320      	adds	r3, #32
 800377c:	443b      	add	r3, r7
 800377e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003782:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003784:	7ffb      	ldrb	r3, [r7, #31]
 8003786:	3301      	adds	r3, #1
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	2b07      	cmp	r3, #7
 800378e:	d9ec      	bls.n	800376a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0208 	orr.w	r2, r2, #8
 80037a2:	b292      	uxth	r2, r2
 80037a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ba:	b292      	uxth	r2, r2
 80037bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0204 	orr.w	r2, r2, #4
 80037d2:	b292      	uxth	r2, r2
 80037d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f007 f8a7 	bl	800a92c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f005 fb32 	bl	8008e4c <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f2:	d10e      	bne.n	8003812 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003806:	b292      	uxth	r2, r2
 8003808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f007 f860 	bl	800a8d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f005 fb18 	bl	8008e4c <USB_ReadInterrupts>
 800381c:	4603      	mov	r3, r0
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003826:	d10b      	bne.n	8003840 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003830:	b29a      	uxth	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383a:	b292      	uxth	r2, r2
 800383c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003840:	bf00      	nop
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_PCD_SetAddress+0x1a>
 800385e:	2302      	movs	r3, #2
 8003860:	e013      	b.n	800388a <HAL_PCD_SetAddress+0x42>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	4611      	mov	r1, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f005 fabf 	bl	8008dfe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	4608      	mov	r0, r1
 800389c:	4611      	mov	r1, r2
 800389e:	461a      	mov	r2, r3
 80038a0:	4603      	mov	r3, r0
 80038a2:	70fb      	strb	r3, [r7, #3]
 80038a4:	460b      	mov	r3, r1
 80038a6:	803b      	strh	r3, [r7, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	da0e      	bge.n	80038d6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	705a      	strb	r2, [r3, #1]
 80038d4:	e00e      	b.n	80038f4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	f003 0207 	and.w	r2, r3, #7
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003900:	883a      	ldrh	r2, [r7, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	78ba      	ldrb	r2, [r7, #2]
 800390a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	785b      	ldrb	r3, [r3, #1]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800391e:	78bb      	ldrb	r3, [r7, #2]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d102      	bne.n	800392a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_PCD_EP_Open+0xa6>
 8003934:	2302      	movs	r3, #2
 8003936:	e00e      	b.n	8003956 <HAL_PCD_EP_Open+0xc4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68f9      	ldr	r1, [r7, #12]
 8003946:	4618      	mov	r0, r3
 8003948:	f002 fdce 	bl	80064e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003954:	7afb      	ldrb	r3, [r7, #11]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800396a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396e:	2b00      	cmp	r3, #0
 8003970:	da0e      	bge.n	8003990 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	705a      	strb	r2, [r3, #1]
 800398e:	e00e      	b.n	80039ae <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 0207 	and.w	r2, r3, #7
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_PCD_EP_Close+0x6a>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e00e      	b.n	80039e6 <HAL_PCD_EP_Close+0x88>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68f9      	ldr	r1, [r7, #12]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f003 f8f0 	bl	8006bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	460b      	mov	r3, r1
 80039fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039fe:	7afb      	ldrb	r3, [r7, #11]
 8003a00:	f003 0207 	and.w	r2, r3, #7
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6979      	ldr	r1, [r7, #20]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 faa2 	bl	8006f94 <USB_EPStartXfer>
 8003a50:	e005      	b.n	8003a5e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 fa9b 	bl	8006f94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	460b      	mov	r3, r1
 8003a76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a78:	7afb      	ldrb	r3, [r7, #11]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ac0:	7afb      	ldrb	r3, [r7, #11]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 fa5f 	bl	8006f94 <USB_EPStartXfer>
 8003ad6:	e005      	b.n	8003ae4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6979      	ldr	r1, [r7, #20]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f003 fa58 	bl	8006f94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	f003 0207 	and.w	r2, r3, #7
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d901      	bls.n	8003b0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e04c      	b.n	8003ba6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	da0e      	bge.n	8003b32 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	4413      	add	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	705a      	strb	r2, [r3, #1]
 8003b30:	e00c      	b.n	8003b4c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_PCD_EP_SetStall+0x7e>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e01c      	b.n	8003ba6 <HAL_PCD_EP_SetStall+0xb8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68f9      	ldr	r1, [r7, #12]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f005 f842 	bl	8008c04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d108      	bne.n	8003b9c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f005 f967 	bl	8008e6a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d901      	bls.n	8003bcc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e040      	b.n	8003c4e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	da0e      	bge.n	8003bf2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	705a      	strb	r2, [r3, #1]
 8003bf0:	e00e      	b.n	8003c10 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 0207 	and.w	r2, r3, #7
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_PCD_EP_ClrStall+0x82>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e00e      	b.n	8003c4e <HAL_PCD_EP_ClrStall+0xa0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68f9      	ldr	r1, [r7, #12]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f005 f830 	bl	8008ca4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08e      	sub	sp, #56	; 0x38
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c5e:	e2ec      	b.n	800423a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c68:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003c76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 8161 	bne.w	8003f42 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d152      	bne.n	8003d30 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	81fb      	strh	r3, [r7, #14]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	89fb      	ldrh	r3, [r7, #14]
 8003ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3328      	adds	r3, #40	; 0x28
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3302      	adds	r3, #2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	441a      	add	r2, r3
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003cee:	2100      	movs	r1, #0
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f006 fdd4 	bl	800a89e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 829b 	beq.w	800423a <PCD_EP_ISR_Handler+0x5e4>
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f040 8296 	bne.w	800423a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	b292      	uxth	r2, r2
 8003d22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d2e:	e284      	b.n	800423a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d034      	beq.n	8003db4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3306      	adds	r3, #6
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f005 f8be 	bl	8008f0a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	823b      	strh	r3, [r7, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	8a3a      	ldrh	r2, [r7, #16]
 8003da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003da8:	b292      	uxth	r2, r2
 8003daa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f006 fd49 	bl	800a844 <HAL_PCD_SetupStageCallback>
 8003db2:	e242      	b.n	800423a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003db4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f280 823e 	bge.w	800423a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003dca:	4013      	ands	r3, r2
 8003dcc:	83bb      	strh	r3, [r7, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	8bba      	ldrh	r2, [r7, #28]
 8003dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dd8:	b292      	uxth	r2, r2
 8003dda:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	3306      	adds	r3, #6
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d019      	beq.n	8003e44 <PCD_EP_ISR_Handler+0x1ee>
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	6959      	ldr	r1, [r3, #20]
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f005 f86e 	bl	8008f0a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	441a      	add	r2, r3
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f006 fd12 	bl	800a868 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f040 81f2 	bne.w	800423a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d112      	bne.n	8003ea4 <PCD_EP_ISR_Handler+0x24e>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	801a      	strh	r2, [r3, #0]
 8003ea2:	e02f      	b.n	8003f04 <PCD_EP_ISR_Handler+0x2ae>
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8003eaa:	d813      	bhi.n	8003ed4 <PCD_EP_ISR_Handler+0x27e>
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <PCD_EP_ISR_Handler+0x270>
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	029b      	lsls	r3, r3, #10
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	e017      	b.n	8003f04 <PCD_EP_ISR_Handler+0x2ae>
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	633b      	str	r3, [r7, #48]	; 0x30
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <PCD_EP_ISR_Handler+0x298>
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	3b01      	subs	r3, #1
 8003eec:	633b      	str	r3, [r7, #48]	; 0x30
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	029b      	lsls	r3, r3, #10
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f14:	827b      	strh	r3, [r7, #18]
 8003f16:	8a7b      	ldrh	r3, [r7, #18]
 8003f18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f1c:	827b      	strh	r3, [r7, #18]
 8003f1e:	8a7b      	ldrh	r3, [r7, #18]
 8003f20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f24:	827b      	strh	r3, [r7, #18]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	8a7b      	ldrh	r3, [r7, #18]
 8003f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]
 8003f40:	e17b      	b.n	800423a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f54:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f280 80ea 	bge.w	8004132 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f74:	4013      	ands	r3, r2
 8003f76:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f8c:	b292      	uxth	r2, r2
 8003f8e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f90:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	7b1b      	ldrb	r3, [r3, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d122      	bne.n	8003ff4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3306      	adds	r3, #6
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003fd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8087 	beq.w	80040ee <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	6959      	ldr	r1, [r3, #20]
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	88da      	ldrh	r2, [r3, #6]
 8003fec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fee:	f004 ff8c 	bl	8008f0a <USB_ReadPMA>
 8003ff2:	e07c      	b.n	80040ee <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	78db      	ldrb	r3, [r3, #3]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d108      	bne.n	800400e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003ffc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ffe:	461a      	mov	r2, r3
 8004000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f927 	bl	8004256 <HAL_PCD_EP_DB_Receive>
 8004008:	4603      	mov	r3, r0
 800400a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800400c:	e06f      	b.n	80040ee <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004028:	847b      	strh	r3, [r7, #34]	; 0x22
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	441a      	add	r2, r3
 8004038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800403a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800404a:	b29b      	uxth	r3, r3
 800404c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d021      	beq.n	80040ac <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004070:	b29b      	uxth	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	3302      	adds	r3, #2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004090:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004092:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004094:	2b00      	cmp	r3, #0
 8004096:	d02a      	beq.n	80040ee <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	6959      	ldr	r1, [r3, #20]
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	891a      	ldrh	r2, [r3, #8]
 80040a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040a6:	f004 ff30 	bl	8008f0a <USB_ReadPMA>
 80040aa:	e020      	b.n	80040ee <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	3306      	adds	r3, #6
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040d4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80040d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	6959      	ldr	r1, [r3, #20]
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	895a      	ldrh	r2, [r3, #10]
 80040e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040ea:	f004 ff0e 	bl	8008f0a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040f4:	441a      	add	r2, r3
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004100:	441a      	add	r2, r3
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d004      	beq.n	8004118 <PCD_EP_ISR_Handler+0x4c2>
 800410e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	429a      	cmp	r2, r3
 8004116:	d206      	bcs.n	8004126 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f006 fba2 	bl	800a868 <HAL_PCD_DataOutStageCallback>
 8004124:	e005      	b.n	8004132 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800412c:	4618      	mov	r0, r3
 800412e:	f002 ff31 	bl	8006f94 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004132:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d07e      	beq.n	800423a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800413c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	843b      	strh	r3, [r7, #32]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	441a      	add	r2, r3
 800417a:	8c3b      	ldrh	r3, [r7, #32]
 800417c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004184:	b29b      	uxth	r3, r3
 8004186:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	78db      	ldrb	r3, [r3, #3]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d00c      	beq.n	80041aa <PCD_EP_ISR_Handler+0x554>
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	78db      	ldrb	r3, [r3, #3]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800419c:	2b02      	cmp	r3, #2
 800419e:	d146      	bne.n	800422e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80041a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d141      	bne.n	800422e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	3302      	adds	r3, #2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	8bfb      	ldrh	r3, [r7, #30]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d906      	bls.n	80041ec <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	8bfb      	ldrh	r3, [r7, #30]
 80041e4:	1ad2      	subs	r2, r2, r3
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	619a      	str	r2, [r3, #24]
 80041ea:	e002      	b.n	80041f2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	2200      	movs	r2, #0
 80041f0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	4619      	mov	r1, r3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f006 fb4c 	bl	800a89e <HAL_PCD_DataInStageCallback>
 8004206:	e018      	b.n	800423a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	8bfb      	ldrh	r3, [r7, #30]
 800420e:	441a      	add	r2, r3
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	8bfb      	ldrh	r3, [r7, #30]
 800421a:	441a      	add	r2, r3
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004226:	4618      	mov	r0, r3
 8004228:	f002 feb4 	bl	8006f94 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800422c:	e005      	b.n	800423a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800422e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004230:	461a      	mov	r2, r3
 8004232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f91b 	bl	8004470 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004242:	b29b      	uxth	r3, r3
 8004244:	b21b      	sxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	f6ff ad0a 	blt.w	8003c60 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3738      	adds	r7, #56	; 0x38
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b088      	sub	sp, #32
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	4613      	mov	r3, r2
 8004262:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d07e      	beq.n	800436c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004276:	b29b      	uxth	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	3302      	adds	r3, #2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004296:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	8b7b      	ldrh	r3, [r7, #26]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d306      	bcc.n	80042b0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	8b7b      	ldrh	r3, [r7, #26]
 80042a8:	1ad2      	subs	r2, r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	619a      	str	r2, [r3, #24]
 80042ae:	e002      	b.n	80042b6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2200      	movs	r2, #0
 80042b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d123      	bne.n	8004306 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d8:	833b      	strh	r3, [r7, #24]
 80042da:	8b3b      	ldrh	r3, [r7, #24]
 80042dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042e0:	833b      	strh	r3, [r7, #24]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	441a      	add	r2, r3
 80042f0:	8b3b      	ldrh	r3, [r7, #24]
 80042f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004302:	b29b      	uxth	r3, r3
 8004304:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01f      	beq.n	8004350 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	82fb      	strh	r3, [r7, #22]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	8afb      	ldrh	r3, [r7, #22]
 800433c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004348:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800434c:	b29b      	uxth	r3, r3
 800434e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004350:	8b7b      	ldrh	r3, [r7, #26]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8087 	beq.w	8004466 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6959      	ldr	r1, [r3, #20]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	891a      	ldrh	r2, [r3, #8]
 8004364:	8b7b      	ldrh	r3, [r7, #26]
 8004366:	f004 fdd0 	bl	8008f0a <USB_ReadPMA>
 800436a:	e07c      	b.n	8004466 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004374:	b29b      	uxth	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	3306      	adds	r3, #6
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004394:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	8b7b      	ldrh	r3, [r7, #26]
 800439c:	429a      	cmp	r2, r3
 800439e:	d306      	bcc.n	80043ae <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	8b7b      	ldrh	r3, [r7, #26]
 80043a6:	1ad2      	subs	r2, r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	619a      	str	r2, [r3, #24]
 80043ac:	e002      	b.n	80043b4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2200      	movs	r2, #0
 80043b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d123      	bne.n	8004404 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	83fb      	strh	r3, [r7, #30]
 80043d8:	8bfb      	ldrh	r3, [r7, #30]
 80043da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043de:	83fb      	strh	r3, [r7, #30]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	8bfb      	ldrh	r3, [r7, #30]
 80043f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004400:	b29b      	uxth	r3, r3
 8004402:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d11f      	bne.n	800444e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004428:	83bb      	strh	r3, [r7, #28]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	441a      	add	r2, r3
 8004438:	8bbb      	ldrh	r3, [r7, #28]
 800443a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004446:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800444a:	b29b      	uxth	r3, r3
 800444c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800444e:	8b7b      	ldrh	r3, [r7, #26]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6959      	ldr	r1, [r3, #20]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	895a      	ldrh	r2, [r3, #10]
 8004460:	8b7b      	ldrh	r3, [r7, #26]
 8004462:	f004 fd52 	bl	8008f0a <USB_ReadPMA>
    }
  }

  return count;
 8004466:	8b7b      	ldrh	r3, [r7, #26]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b0a2      	sub	sp, #136	; 0x88
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	4613      	mov	r3, r2
 800447c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 81c7 	beq.w	8004818 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004492:	b29b      	uxth	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	3302      	adds	r3, #2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044be:	429a      	cmp	r2, r3
 80044c0:	d907      	bls.n	80044d2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	619a      	str	r2, [r3, #24]
 80044d0:	e002      	b.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2200      	movs	r2, #0
 80044d6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f040 80b9 	bne.w	8004654 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d126      	bne.n	8004538 <HAL_PCD_EP_DB_Transmit+0xc8>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	4413      	add	r3, r2
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	011a      	lsls	r2, r3, #4
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	4413      	add	r3, r2
 800450c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800451c:	b29a      	uxth	r2, r3
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	801a      	strh	r2, [r3, #0]
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004530:	b29a      	uxth	r2, r3
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	e01a      	b.n	800456e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d116      	bne.n	800456e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	633b      	str	r3, [r7, #48]	; 0x30
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	4413      	add	r3, r2
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	011a      	lsls	r2, r3, #4
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	4413      	add	r3, r2
 8004562:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456a:	2200      	movs	r2, #0
 800456c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	623b      	str	r3, [r7, #32]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d126      	bne.n	80045ca <HAL_PCD_EP_DB_Transmit+0x15a>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800458a:	b29b      	uxth	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	4413      	add	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	011a      	lsls	r2, r3, #4
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4413      	add	r3, r2
 800459e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	801a      	strh	r2, [r3, #0]
 80045c8:	e017      	b.n	80045fa <HAL_PCD_EP_DB_Transmit+0x18a>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d113      	bne.n	80045fa <HAL_PCD_EP_DB_Transmit+0x18a>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	4413      	add	r3, r2
 80045e2:	623b      	str	r3, [r7, #32]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	011a      	lsls	r2, r3, #4
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	4413      	add	r3, r2
 80045ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	2200      	movs	r2, #0
 80045f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	4619      	mov	r1, r3
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f006 f94c 	bl	800a89e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 82d4 	beq.w	8004bba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462c:	827b      	strh	r3, [r7, #18]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	8a7b      	ldrh	r3, [r7, #18]
 800463e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	b29b      	uxth	r3, r3
 8004650:	8013      	strh	r3, [r2, #0]
 8004652:	e2b2      	b.n	8004bba <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004654:	88fb      	ldrh	r3, [r7, #6]
 8004656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d021      	beq.n	80046a2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004678:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800469a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	f040 8286 	bne.w	8004bba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046b6:	441a      	add	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046c4:	441a      	add	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d309      	bcc.n	80046ea <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e2:	1ad2      	subs	r2, r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	621a      	str	r2, [r3, #32]
 80046e8:	e015      	b.n	8004716 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80046f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004700:	e009      	b.n	8004716 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2200      	movs	r2, #0
 8004714:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	785b      	ldrb	r3, [r3, #1]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d155      	bne.n	80047ca <HAL_PCD_EP_DB_Transmit+0x35a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	63bb      	str	r3, [r7, #56]	; 0x38
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472c:	b29b      	uxth	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	4413      	add	r3, r2
 8004734:	63bb      	str	r3, [r7, #56]	; 0x38
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	011a      	lsls	r2, r3, #4
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	4413      	add	r3, r2
 8004740:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
 8004746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004748:	2b00      	cmp	r3, #0
 800474a:	d112      	bne.n	8004772 <HAL_PCD_EP_DB_Transmit+0x302>
 800474c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004756:	b29a      	uxth	r2, r3
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475a:	801a      	strh	r2, [r3, #0]
 800475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476a:	b29a      	uxth	r2, r3
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	801a      	strh	r2, [r3, #0]
 8004770:	e047      	b.n	8004802 <HAL_PCD_EP_DB_Transmit+0x392>
 8004772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004774:	2b3e      	cmp	r3, #62	; 0x3e
 8004776:	d811      	bhi.n	800479c <HAL_PCD_EP_DB_Transmit+0x32c>
 8004778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	64bb      	str	r3, [r7, #72]	; 0x48
 800477e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_PCD_EP_DB_Transmit+0x31e>
 8004788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478a:	3301      	adds	r3, #1
 800478c:	64bb      	str	r3, [r7, #72]	; 0x48
 800478e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004790:	b29b      	uxth	r3, r3
 8004792:	029b      	lsls	r3, r3, #10
 8004794:	b29a      	uxth	r2, r3
 8004796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	e032      	b.n	8004802 <HAL_PCD_EP_DB_Transmit+0x392>
 800479c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <HAL_PCD_EP_DB_Transmit+0x342>
 80047ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ae:	3b01      	subs	r3, #1
 80047b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	029b      	lsls	r3, r3, #10
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	e01b      	b.n	8004802 <HAL_PCD_EP_DB_Transmit+0x392>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d117      	bne.n	8004802 <HAL_PCD_EP_DB_Transmit+0x392>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	643b      	str	r3, [r7, #64]	; 0x40
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e6:	4413      	add	r3, r2
 80047e8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	011a      	lsls	r2, r3, #4
 80047f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f2:	4413      	add	r3, r2
 80047f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004800:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6959      	ldr	r1, [r3, #20]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	891a      	ldrh	r2, [r3, #8]
 800480e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004810:	b29b      	uxth	r3, r3
 8004812:	f004 fb35 	bl	8008e80 <USB_WritePMA>
 8004816:	e1d0      	b.n	8004bba <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004820:	b29b      	uxth	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	3306      	adds	r3, #6
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004840:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800484c:	429a      	cmp	r2, r3
 800484e:	d307      	bcc.n	8004860 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004858:	1ad2      	subs	r2, r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	619a      	str	r2, [r3, #24]
 800485e:	e002      	b.n	8004866 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2200      	movs	r2, #0
 8004864:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	f040 80c4 	bne.w	80049f8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d126      	bne.n	80048c6 <HAL_PCD_EP_DB_Transmit+0x456>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004886:	b29b      	uxth	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488c:	4413      	add	r3, r2
 800488e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	011a      	lsls	r2, r3, #4
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	4413      	add	r3, r2
 800489a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800489e:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048be:	b29a      	uxth	r2, r3
 80048c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048c2:	801a      	strh	r2, [r3, #0]
 80048c4:	e01a      	b.n	80048fc <HAL_PCD_EP_DB_Transmit+0x48c>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	785b      	ldrb	r3, [r3, #1]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d116      	bne.n	80048fc <HAL_PCD_EP_DB_Transmit+0x48c>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	677b      	str	r3, [r7, #116]	; 0x74
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048dc:	b29b      	uxth	r3, r3
 80048de:	461a      	mov	r2, r3
 80048e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e2:	4413      	add	r3, r2
 80048e4:	677b      	str	r3, [r7, #116]	; 0x74
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	011a      	lsls	r2, r3, #4
 80048ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ee:	4413      	add	r3, r2
 80048f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048f4:	673b      	str	r3, [r7, #112]	; 0x70
 80048f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f8:	2200      	movs	r2, #0
 80048fa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	67bb      	str	r3, [r7, #120]	; 0x78
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	785b      	ldrb	r3, [r3, #1]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d12f      	bne.n	800496a <HAL_PCD_EP_DB_Transmit+0x4fa>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800491a:	b29b      	uxth	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004922:	4413      	add	r3, r2
 8004924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	011a      	lsls	r2, r3, #4
 800492e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004932:	4413      	add	r3, r2
 8004934:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800493c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004948:	b29a      	uxth	r2, r3
 800494a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800494e:	801a      	strh	r2, [r3, #0]
 8004950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800495c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004960:	b29a      	uxth	r2, r3
 8004962:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	e017      	b.n	800499a <HAL_PCD_EP_DB_Transmit+0x52a>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	785b      	ldrb	r3, [r3, #1]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d113      	bne.n	800499a <HAL_PCD_EP_DB_Transmit+0x52a>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497a:	b29b      	uxth	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004980:	4413      	add	r3, r2
 8004982:	67bb      	str	r3, [r7, #120]	; 0x78
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	011a      	lsls	r2, r3, #4
 800498a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800498c:	4413      	add	r3, r2
 800498e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004992:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004994:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004996:	2200      	movs	r2, #0
 8004998:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f005 ff7c 	bl	800a89e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f040 8104 	bne.w	8004bba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	441a      	add	r2, r3
 80049de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
 80049f6:	e0e0      	b.n	8004bba <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d121      	bne.n	8004a46 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	441a      	add	r2, r3
 8004a2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	f040 80b4 	bne.w	8004bba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a5a:	441a      	add	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a68:	441a      	add	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d309      	bcc.n	8004a8e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6a1a      	ldr	r2, [r3, #32]
 8004a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a86:	1ad2      	subs	r2, r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	621a      	str	r2, [r3, #32]
 8004a8c:	e015      	b.n	8004aba <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d107      	bne.n	8004aa6 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004aa4:	e009      	b.n	8004aba <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	667b      	str	r3, [r7, #100]	; 0x64
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d155      	bne.n	8004b74 <HAL_PCD_EP_DB_Transmit+0x704>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004adc:	4413      	add	r3, r2
 8004ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	011a      	lsls	r2, r3, #4
 8004ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae8:	4413      	add	r3, r2
 8004aea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004aee:	65bb      	str	r3, [r7, #88]	; 0x58
 8004af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d112      	bne.n	8004b1c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b18:	801a      	strh	r2, [r3, #0]
 8004b1a:	e044      	b.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b20:	d811      	bhi.n	8004b46 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	657b      	str	r3, [r7, #84]	; 0x54
 8004b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b34:	3301      	adds	r3, #1
 8004b36:	657b      	str	r3, [r7, #84]	; 0x54
 8004b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	e02f      	b.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	029b      	lsls	r3, r3, #10
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b70:	801a      	strh	r2, [r3, #0]
 8004b72:	e018      	b.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d114      	bne.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b8a:	4413      	add	r3, r2
 8004b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	011a      	lsls	r2, r3, #4
 8004b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b96:	4413      	add	r3, r2
 8004b98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6959      	ldr	r1, [r3, #20]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	895a      	ldrh	r2, [r3, #10]
 8004bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f004 f963 	bl	8008e80 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd4:	823b      	strh	r3, [r7, #16]
 8004bd6:	8a3b      	ldrh	r3, [r7, #16]
 8004bd8:	f083 0310 	eor.w	r3, r3, #16
 8004bdc:	823b      	strh	r3, [r7, #16]
 8004bde:	8a3b      	ldrh	r3, [r7, #16]
 8004be0:	f083 0320 	eor.w	r3, r3, #32
 8004be4:	823b      	strh	r3, [r7, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	8a3b      	ldrh	r3, [r7, #16]
 8004bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3788      	adds	r7, #136	; 0x88
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607b      	str	r3, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	817b      	strh	r3, [r7, #10]
 8004c22:	4613      	mov	r3, r2
 8004c24:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c26:	897b      	ldrh	r3, [r7, #10]
 8004c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00b      	beq.n	8004c4a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c32:	897b      	ldrh	r3, [r7, #10]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e009      	b.n	8004c5e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c4a:	897a      	ldrh	r2, [r7, #10]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004c5e:	893b      	ldrh	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2200      	movs	r2, #0
 8004c68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	80da      	strh	r2, [r3, #6]
 8004c72:	e00b      	b.n	8004c8c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2201      	movs	r2, #1
 8004c78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e272      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8087 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cb8:	4b92      	ldr	r3, [pc, #584]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d00c      	beq.n	8004cde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cc4:	4b8f      	ldr	r3, [pc, #572]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d112      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x5e>
 8004cd0:	4b8c      	ldr	r3, [pc, #560]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d10b      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cde:	4b89      	ldr	r3, [pc, #548]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d06c      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x12c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d168      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e24c      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x76>
 8004d00:	4b80      	ldr	r3, [pc, #512]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a7f      	ldr	r2, [pc, #508]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e02e      	b.n	8004d6c <HAL_RCC_OscConfig+0xd4>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x98>
 8004d16:	4b7b      	ldr	r3, [pc, #492]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a7a      	ldr	r2, [pc, #488]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b78      	ldr	r3, [pc, #480]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a77      	ldr	r2, [pc, #476]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e01d      	b.n	8004d6c <HAL_RCC_OscConfig+0xd4>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0xbc>
 8004d3a:	4b72      	ldr	r3, [pc, #456]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a71      	ldr	r2, [pc, #452]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	4b6f      	ldr	r3, [pc, #444]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a6e      	ldr	r2, [pc, #440]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0xd4>
 8004d54:	4b6b      	ldr	r3, [pc, #428]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a6a      	ldr	r2, [pc, #424]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b68      	ldr	r3, [pc, #416]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a67      	ldr	r2, [pc, #412]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d013      	beq.n	8004d9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d74:	f7fc ff80 	bl	8001c78 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fc ff7c 	bl	8001c78 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	; 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e200      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8e:	4b5d      	ldr	r3, [pc, #372]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0xe4>
 8004d9a:	e014      	b.n	8004dc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9c:	f7fc ff6c 	bl	8001c78 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da4:	f7fc ff68 	bl	8001c78 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	; 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e1ec      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db6:	4b53      	ldr	r3, [pc, #332]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x10c>
 8004dc2:	e000      	b.n	8004dc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d063      	beq.n	8004e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dd2:	4b4c      	ldr	r3, [pc, #304]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dde:	4b49      	ldr	r3, [pc, #292]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d11c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x18c>
 8004dea:	4b46      	ldr	r3, [pc, #280]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df6:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCC_OscConfig+0x176>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d001      	beq.n	8004e0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e1c0      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0e:	4b3d      	ldr	r3, [pc, #244]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4939      	ldr	r1, [pc, #228]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e22:	e03a      	b.n	8004e9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e2c:	4b36      	ldr	r3, [pc, #216]	; (8004f08 <HAL_RCC_OscConfig+0x270>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e32:	f7fc ff21 	bl	8001c78 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3a:	f7fc ff1d 	bl	8001c78 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e1a1      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4c:	4b2d      	ldr	r3, [pc, #180]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e58:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4927      	ldr	r1, [pc, #156]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]
 8004e6c:	e015      	b.n	8004e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6e:	4b26      	ldr	r3, [pc, #152]	; (8004f08 <HAL_RCC_OscConfig+0x270>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e74:	f7fc ff00 	bl	8001c78 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fc fefc 	bl	8001c78 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e180      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d03a      	beq.n	8004f1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d019      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eae:	4b17      	ldr	r3, [pc, #92]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb4:	f7fc fee0 	bl	8001c78 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebc:	f7fc fedc 	bl	8001c78 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e160      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ece:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004eda:	2001      	movs	r0, #1
 8004edc:	f000 fad8 	bl	8005490 <RCC_Delay>
 8004ee0:	e01c      	b.n	8004f1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee8:	f7fc fec6 	bl	8001c78 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eee:	e00f      	b.n	8004f10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef0:	f7fc fec2 	bl	8001c78 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d908      	bls.n	8004f10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e146      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
 8004f08:	42420000 	.word	0x42420000
 8004f0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f10:	4b92      	ldr	r3, [pc, #584]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e9      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80a6 	beq.w	8005076 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2e:	4b8b      	ldr	r3, [pc, #556]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10d      	bne.n	8004f56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f3a:	4b88      	ldr	r3, [pc, #544]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	4a87      	ldr	r2, [pc, #540]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f44:	61d3      	str	r3, [r2, #28]
 8004f46:	4b85      	ldr	r3, [pc, #532]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f56:	4b82      	ldr	r3, [pc, #520]	; (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d118      	bne.n	8004f94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f62:	4b7f      	ldr	r3, [pc, #508]	; (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a7e      	ldr	r2, [pc, #504]	; (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6e:	f7fc fe83 	bl	8001c78 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fc fe7f 	bl	8001c78 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b64      	cmp	r3, #100	; 0x64
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e103      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f88:	4b75      	ldr	r3, [pc, #468]	; (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x312>
 8004f9c:	4b6f      	ldr	r3, [pc, #444]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	4a6e      	ldr	r2, [pc, #440]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	6213      	str	r3, [r2, #32]
 8004fa8:	e02d      	b.n	8005006 <HAL_RCC_OscConfig+0x36e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x334>
 8004fb2:	4b6a      	ldr	r3, [pc, #424]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	4a69      	ldr	r2, [pc, #420]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	6213      	str	r3, [r2, #32]
 8004fbe:	4b67      	ldr	r3, [pc, #412]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4a66      	ldr	r2, [pc, #408]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	6213      	str	r3, [r2, #32]
 8004fca:	e01c      	b.n	8005006 <HAL_RCC_OscConfig+0x36e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b05      	cmp	r3, #5
 8004fd2:	d10c      	bne.n	8004fee <HAL_RCC_OscConfig+0x356>
 8004fd4:	4b61      	ldr	r3, [pc, #388]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	4a60      	ldr	r2, [pc, #384]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fda:	f043 0304 	orr.w	r3, r3, #4
 8004fde:	6213      	str	r3, [r2, #32]
 8004fe0:	4b5e      	ldr	r3, [pc, #376]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	4a5d      	ldr	r2, [pc, #372]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	6213      	str	r3, [r2, #32]
 8004fec:	e00b      	b.n	8005006 <HAL_RCC_OscConfig+0x36e>
 8004fee:	4b5b      	ldr	r3, [pc, #364]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	4a5a      	ldr	r2, [pc, #360]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	6213      	str	r3, [r2, #32]
 8004ffa:	4b58      	ldr	r3, [pc, #352]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	4a57      	ldr	r2, [pc, #348]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005000:	f023 0304 	bic.w	r3, r3, #4
 8005004:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d015      	beq.n	800503a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500e:	f7fc fe33 	bl	8001c78 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005014:	e00a      	b.n	800502c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f7fc fe2f 	bl	8001c78 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f241 3288 	movw	r2, #5000	; 0x1388
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e0b1      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502c:	4b4b      	ldr	r3, [pc, #300]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ee      	beq.n	8005016 <HAL_RCC_OscConfig+0x37e>
 8005038:	e014      	b.n	8005064 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503a:	f7fc fe1d 	bl	8001c78 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005040:	e00a      	b.n	8005058 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fc fe19 	bl	8001c78 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e09b      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005058:	4b40      	ldr	r3, [pc, #256]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1ee      	bne.n	8005042 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d105      	bne.n	8005076 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800506a:	4b3c      	ldr	r3, [pc, #240]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	4a3b      	ldr	r2, [pc, #236]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005074:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8087 	beq.w	800518e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005080:	4b36      	ldr	r3, [pc, #216]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b08      	cmp	r3, #8
 800508a:	d061      	beq.n	8005150 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d146      	bne.n	8005122 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005094:	4b33      	ldr	r3, [pc, #204]	; (8005164 <HAL_RCC_OscConfig+0x4cc>)
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fc fded 	bl	8001c78 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fc fde9 	bl	8001c78 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e06d      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050b4:	4b29      	ldr	r3, [pc, #164]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f0      	bne.n	80050a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d108      	bne.n	80050dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4921      	ldr	r1, [pc, #132]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050dc:	4b1f      	ldr	r3, [pc, #124]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a19      	ldr	r1, [r3, #32]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	430b      	orrs	r3, r1
 80050ee:	491b      	ldr	r1, [pc, #108]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f4:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <HAL_RCC_OscConfig+0x4cc>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fa:	f7fc fdbd 	bl	8001c78 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005102:	f7fc fdb9 	bl	8001c78 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e03d      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005114:	4b11      	ldr	r3, [pc, #68]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x46a>
 8005120:	e035      	b.n	800518e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005122:	4b10      	ldr	r3, [pc, #64]	; (8005164 <HAL_RCC_OscConfig+0x4cc>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005128:	f7fc fda6 	bl	8001c78 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005130:	f7fc fda2 	bl	8001c78 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e026      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x498>
 800514e:	e01e      	b.n	800518e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e019      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
 800515c:	40021000 	.word	0x40021000
 8005160:	40007000 	.word	0x40007000
 8005164:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCC_OscConfig+0x500>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	429a      	cmp	r2, r3
 800517a:	d106      	bne.n	800518a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d001      	beq.n	800518e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000

0800519c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0d0      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b6a      	ldr	r3, [pc, #424]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d910      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b67      	ldr	r3, [pc, #412]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 0207 	bic.w	r2, r3, #7
 80051c6:	4965      	ldr	r1, [pc, #404]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b63      	ldr	r3, [pc, #396]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0b8      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d020      	beq.n	800522e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f8:	4b59      	ldr	r3, [pc, #356]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a58      	ldr	r2, [pc, #352]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005202:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005210:	4b53      	ldr	r3, [pc, #332]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	4a52      	ldr	r2, [pc, #328]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005216:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800521a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800521c:	4b50      	ldr	r3, [pc, #320]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	494d      	ldr	r1, [pc, #308]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d040      	beq.n	80052bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005242:	4b47      	ldr	r3, [pc, #284]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d115      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e07f      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d107      	bne.n	800526a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	4b41      	ldr	r3, [pc, #260]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e073      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526a:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e06b      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800527a:	4b39      	ldr	r3, [pc, #228]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f023 0203 	bic.w	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4936      	ldr	r1, [pc, #216]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800528c:	f7fc fcf4 	bl	8001c78 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	e00a      	b.n	80052aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005294:	f7fc fcf0 	bl	8001c78 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e053      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 020c 	and.w	r2, r3, #12
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d1eb      	bne.n	8005294 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052bc:	4b27      	ldr	r3, [pc, #156]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d210      	bcs.n	80052ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b24      	ldr	r3, [pc, #144]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f023 0207 	bic.w	r2, r3, #7
 80052d2:	4922      	ldr	r1, [pc, #136]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052da:	4b20      	ldr	r3, [pc, #128]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e032      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f8:	4b19      	ldr	r3, [pc, #100]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	4916      	ldr	r1, [pc, #88]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d009      	beq.n	800532a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005316:	4b12      	ldr	r3, [pc, #72]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	490e      	ldr	r1, [pc, #56]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800532a:	f000 f821 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 800532e:	4602      	mov	r2, r0
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	490a      	ldr	r1, [pc, #40]	; (8005364 <HAL_RCC_ClockConfig+0x1c8>)
 800533c:	5ccb      	ldrb	r3, [r1, r3]
 800533e:	fa22 f303 	lsr.w	r3, r2, r3
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <HAL_RCC_ClockConfig+0x1cc>)
 8005344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005346:	4b09      	ldr	r3, [pc, #36]	; (800536c <HAL_RCC_ClockConfig+0x1d0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fc fc52 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40022000 	.word	0x40022000
 8005360:	40021000 	.word	0x40021000
 8005364:	0800c3b8 	.word	0x0800c3b8
 8005368:	2000000c 	.word	0x2000000c
 800536c:	20000010 	.word	0x20000010

08005370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005370:	b490      	push	{r4, r7}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005376:	4b29      	ldr	r3, [pc, #164]	; (800541c <HAL_RCC_GetSysClockFreq+0xac>)
 8005378:	1d3c      	adds	r4, r7, #4
 800537a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800537c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005380:	f240 2301 	movw	r3, #513	; 0x201
 8005384:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	2300      	movs	r3, #0
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800539a:	4b21      	ldr	r3, [pc, #132]	; (8005420 <HAL_RCC_GetSysClockFreq+0xb0>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d002      	beq.n	80053b0 <HAL_RCC_GetSysClockFreq+0x40>
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d003      	beq.n	80053b6 <HAL_RCC_GetSysClockFreq+0x46>
 80053ae:	e02b      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053b0:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053b2:	623b      	str	r3, [r7, #32]
      break;
 80053b4:	e02b      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	0c9b      	lsrs	r3, r3, #18
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	3328      	adds	r3, #40	; 0x28
 80053c0:	443b      	add	r3, r7
 80053c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d012      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053d2:	4b13      	ldr	r3, [pc, #76]	; (8005420 <HAL_RCC_GetSysClockFreq+0xb0>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	0c5b      	lsrs	r3, r3, #17
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	3328      	adds	r3, #40	; 0x28
 80053de:	443b      	add	r3, r7
 80053e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053ea:	fb03 f202 	mul.w	r2, r3, r2
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
 80053f6:	e004      	b.n	8005402 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	4a0b      	ldr	r2, [pc, #44]	; (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053fc:	fb02 f303 	mul.w	r3, r2, r3
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	623b      	str	r3, [r7, #32]
      break;
 8005406:	e002      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <HAL_RCC_GetSysClockFreq+0xb4>)
 800540a:	623b      	str	r3, [r7, #32]
      break;
 800540c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800540e:	6a3b      	ldr	r3, [r7, #32]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3728      	adds	r7, #40	; 0x28
 8005414:	46bd      	mov	sp, r7
 8005416:	bc90      	pop	{r4, r7}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	0800c360 	.word	0x0800c360
 8005420:	40021000 	.word	0x40021000
 8005424:	007a1200 	.word	0x007a1200
 8005428:	003d0900 	.word	0x003d0900

0800542c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005430:	4b02      	ldr	r3, [pc, #8]	; (800543c <HAL_RCC_GetHCLKFreq+0x10>)
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	2000000c 	.word	0x2000000c

08005440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005444:	f7ff fff2 	bl	800542c <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4903      	ldr	r1, [pc, #12]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	0800c3c8 	.word	0x0800c3c8

08005468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800546c:	f7ff ffde 	bl	800542c <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	0adb      	lsrs	r3, r3, #11
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4903      	ldr	r1, [pc, #12]	; (800548c <HAL_RCC_GetPCLK2Freq+0x24>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	0800c3c8 	.word	0x0800c3c8

08005490 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005498:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <RCC_Delay+0x34>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a0a      	ldr	r2, [pc, #40]	; (80054c8 <RCC_Delay+0x38>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	0a5b      	lsrs	r3, r3, #9
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054ac:	bf00      	nop
  }
  while (Delay --);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1e5a      	subs	r2, r3, #1
 80054b2:	60fa      	str	r2, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f9      	bne.n	80054ac <RCC_Delay+0x1c>
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr
 80054c4:	2000000c 	.word	0x2000000c
 80054c8:	10624dd3 	.word	0x10624dd3

080054cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d07d      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054e8:	2300      	movs	r3, #0
 80054ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ec:	4b4f      	ldr	r3, [pc, #316]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10d      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f8:	4b4c      	ldr	r3, [pc, #304]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	4a4b      	ldr	r2, [pc, #300]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005502:	61d3      	str	r3, [r2, #28]
 8005504:	4b49      	ldr	r3, [pc, #292]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005510:	2301      	movs	r3, #1
 8005512:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005514:	4b46      	ldr	r3, [pc, #280]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551c:	2b00      	cmp	r3, #0
 800551e:	d118      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005520:	4b43      	ldr	r3, [pc, #268]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a42      	ldr	r2, [pc, #264]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800552c:	f7fc fba4 	bl	8001c78 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005532:	e008      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005534:	f7fc fba0 	bl	8001c78 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e06d      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005546:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005552:	4b36      	ldr	r3, [pc, #216]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d02e      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	d027      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005570:	4b2e      	ldr	r3, [pc, #184]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005578:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800557a:	4b2e      	ldr	r3, [pc, #184]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005580:	4b2c      	ldr	r3, [pc, #176]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005586:	4a29      	ldr	r2, [pc, #164]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d014      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005596:	f7fc fb6f 	bl	8001c78 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559c:	e00a      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559e:	f7fc fb6b 	bl	8001c78 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e036      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b4:	4b1d      	ldr	r3, [pc, #116]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ee      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c0:	4b1a      	ldr	r3, [pc, #104]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4917      	ldr	r1, [pc, #92]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d105      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d8:	4b14      	ldr	r3, [pc, #80]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	4a13      	ldr	r2, [pc, #76]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055f0:	4b0e      	ldr	r3, [pc, #56]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	490b      	ldr	r1, [pc, #44]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d008      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800560e:	4b07      	ldr	r3, [pc, #28]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	4904      	ldr	r1, [pc, #16]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40021000 	.word	0x40021000
 8005630:	40007000 	.word	0x40007000
 8005634:	42420440 	.word	0x42420440

08005638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e076      	b.n	8005738 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	d108      	bne.n	8005664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800565a:	d009      	beq.n	8005670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	61da      	str	r2, [r3, #28]
 8005662:	e005      	b.n	8005670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fc f890 	bl	80017b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e0:	431a      	orrs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	ea42 0103 	orr.w	r1, r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	0c1a      	lsrs	r2, r3, #16
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f002 0204 	and.w	r2, r2, #4
 8005716:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69da      	ldr	r2, [r3, #28]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005726:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800575c:	d112      	bne.n	8005784 <HAL_SPI_Receive+0x44>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10e      	bne.n	8005784 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2204      	movs	r2, #4
 800576a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f8f1 	bl	8005962 <HAL_SPI_TransmitReceive>
 8005780:	4603      	mov	r3, r0
 8005782:	e0ea      	b.n	800595a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_SPI_Receive+0x52>
 800578e:	2302      	movs	r3, #2
 8005790:	e0e3      	b.n	800595a <HAL_SPI_Receive+0x21a>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800579a:	f7fc fa6d 	bl	8001c78 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
 80057ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057b0:	e0ca      	b.n	8005948 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_SPI_Receive+0x7e>
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057c2:	e0c1      	b.n	8005948 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2204      	movs	r2, #4
 80057c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	88fa      	ldrh	r2, [r7, #6]
 80057dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	88fa      	ldrh	r2, [r7, #6]
 80057e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800580a:	d10f      	bne.n	800582c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800581a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800582a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d007      	beq.n	800584a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005848:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d162      	bne.n	8005918 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005852:	e02e      	b.n	80058b2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d115      	bne.n	800588e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f103 020c 	add.w	r2, r3, #12
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	7812      	ldrb	r2, [r2, #0]
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800588c:	e011      	b.n	80058b2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800588e:	f7fc f9f3 	bl	8001c78 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d803      	bhi.n	80058a6 <HAL_SPI_Receive+0x166>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d102      	bne.n	80058ac <HAL_SPI_Receive+0x16c>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058b0:	e04a      	b.n	8005948 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1cb      	bne.n	8005854 <HAL_SPI_Receive+0x114>
 80058bc:	e031      	b.n	8005922 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d113      	bne.n	80058f4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	b292      	uxth	r2, r2
 80058d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	1c9a      	adds	r2, r3, #2
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058f2:	e011      	b.n	8005918 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f4:	f7fc f9c0 	bl	8001c78 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d803      	bhi.n	800590c <HAL_SPI_Receive+0x1cc>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d102      	bne.n	8005912 <HAL_SPI_Receive+0x1d2>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005916:	e017      	b.n	8005948 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1cd      	bne.n	80058be <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fb4a 	bl	8005fc0 <SPI_EndRxTransaction>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	75fb      	strb	r3, [r7, #23]
 8005944:	e000      	b.n	8005948 <HAL_SPI_Receive+0x208>
  }

error :
 8005946:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b08c      	sub	sp, #48	; 0x30
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	607a      	str	r2, [r7, #4]
 800596e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005970:	2301      	movs	r3, #1
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005980:	2b01      	cmp	r3, #1
 8005982:	d101      	bne.n	8005988 <HAL_SPI_TransmitReceive+0x26>
 8005984:	2302      	movs	r3, #2
 8005986:	e18a      	b.n	8005c9e <HAL_SPI_TransmitReceive+0x33c>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005990:	f7fc f972 	bl	8001c78 <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800599c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059a6:	887b      	ldrh	r3, [r7, #2]
 80059a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d00f      	beq.n	80059d2 <HAL_SPI_TransmitReceive+0x70>
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b8:	d107      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x68>
 80059c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d003      	beq.n	80059d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
 80059cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059d0:	e15b      	b.n	8005c8a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x82>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x82>
 80059de:	887b      	ldrh	r3, [r7, #2]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059ea:	e14e      	b.n	8005c8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d003      	beq.n	8005a00 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2205      	movs	r2, #5
 80059fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	887a      	ldrh	r2, [r7, #2]
 8005a10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	887a      	ldrh	r2, [r7, #2]
 8005a16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	887a      	ldrh	r2, [r7, #2]
 8005a22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	887a      	ldrh	r2, [r7, #2]
 8005a28:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b40      	cmp	r3, #64	; 0x40
 8005a42:	d007      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5c:	d178      	bne.n	8005b50 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_SPI_TransmitReceive+0x10a>
 8005a66:	8b7b      	ldrh	r3, [r7, #26]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d166      	bne.n	8005b3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	881a      	ldrh	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	1c9a      	adds	r2, r3, #2
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a90:	e053      	b.n	8005b3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d11b      	bne.n	8005ad8 <HAL_SPI_TransmitReceive+0x176>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x176>
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d113      	bne.n	8005ad8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	881a      	ldrh	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	1c9a      	adds	r2, r3, #2
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d119      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x1b8>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d014      	beq.n	8005b1a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	b292      	uxth	r2, r2
 8005afc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	1c9a      	adds	r2, r3, #2
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b16:	2301      	movs	r3, #1
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b1a:	f7fc f8ad 	bl	8001c78 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d807      	bhi.n	8005b3a <HAL_SPI_TransmitReceive+0x1d8>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d003      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b38:	e0a7      	b.n	8005c8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1a6      	bne.n	8005a92 <HAL_SPI_TransmitReceive+0x130>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1a1      	bne.n	8005a92 <HAL_SPI_TransmitReceive+0x130>
 8005b4e:	e07c      	b.n	8005c4a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_SPI_TransmitReceive+0x1fc>
 8005b58:	8b7b      	ldrh	r3, [r7, #26]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d16b      	bne.n	8005c36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	330c      	adds	r3, #12
 8005b68:	7812      	ldrb	r2, [r2, #0]
 8005b6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b84:	e057      	b.n	8005c36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d11c      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x26c>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d017      	beq.n	8005bce <HAL_SPI_TransmitReceive+0x26c>
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d114      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d119      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x2ae>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d014      	beq.n	8005c10 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c10:	f7fc f832 	bl	8001c78 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d803      	bhi.n	8005c28 <HAL_SPI_TransmitReceive+0x2c6>
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d102      	bne.n	8005c2e <HAL_SPI_TransmitReceive+0x2cc>
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d103      	bne.n	8005c36 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c34:	e029      	b.n	8005c8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1a2      	bne.n	8005b86 <HAL_SPI_TransmitReceive+0x224>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d19d      	bne.n	8005b86 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fa08 	bl	8006064 <SPI_EndRxTxTransaction>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d006      	beq.n	8005c68 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c66:	e010      	b.n	8005c8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10b      	bne.n	8005c88 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	e000      	b.n	8005c8a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3730      	adds	r7, #48	; 0x30
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	099b      	lsrs	r3, r3, #6
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10f      	bne.n	8005cec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	099b      	lsrs	r3, r3, #6
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d004      	beq.n	8005cec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
    return;
 8005cea:	e0be      	b.n	8005e6a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <HAL_SPI_IRQHandler+0x66>
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	09db      	lsrs	r3, r3, #7
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	4798      	blx	r3
    return;
 8005d0c:	e0ad      	b.n	8005e6a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_SPI_IRQHandler+0x80>
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	099b      	lsrs	r3, r3, #6
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80a1 	beq.w	8005e6a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 809a 	beq.w	8005e6a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	099b      	lsrs	r3, r3, #6
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d023      	beq.n	8005d8a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d011      	beq.n	8005d72 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f043 0204 	orr.w	r2, r3, #4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	e00b      	b.n	8005d8a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	693b      	ldr	r3, [r7, #16]
        return;
 8005d88:	e06f      	b.n	8005e6a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d014      	beq.n	8005dc0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9a:	f043 0201 	orr.w	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d04f      	beq.n	8005e68 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dd6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <HAL_SPI_IRQHandler+0x14c>
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d034      	beq.n	8005e5e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0203 	bic.w	r2, r2, #3
 8005e02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d011      	beq.n	8005e30 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e10:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <HAL_SPI_IRQHandler+0x1c8>)
 8005e12:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fc fcef 	bl	80027fc <HAL_DMA_Abort_IT>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d016      	beq.n	8005e66 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3c:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <HAL_SPI_IRQHandler+0x1c8>)
 8005e3e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fc fcd9 	bl	80027fc <HAL_DMA_Abort_IT>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005e5c:	e003      	b.n	8005e66 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f808 	bl	8005e74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e64:	e000      	b.n	8005e68 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005e66:	bf00      	nop
    return;
 8005e68:	bf00      	nop
  }
}
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	08005e87 	.word	0x08005e87

08005e74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr

08005e86 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ffe7 	bl	8005e74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ec0:	f7fb feda 	bl	8001c78 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	4413      	add	r3, r2
 8005ece:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ed0:	f7fb fed2 	bl	8001c78 <HAL_GetTick>
 8005ed4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ed6:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	015b      	lsls	r3, r3, #5
 8005edc:	0d1b      	lsrs	r3, r3, #20
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	fb02 f303 	mul.w	r3, r2, r3
 8005ee4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ee6:	e054      	b.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d050      	beq.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ef0:	f7fb fec2 	bl	8001c78 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d902      	bls.n	8005f06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d13d      	bne.n	8005f82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1e:	d111      	bne.n	8005f44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f28:	d004      	beq.n	8005f34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f32:	d107      	bne.n	8005f44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4c:	d10f      	bne.n	8005f6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e017      	b.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d19b      	bne.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3720      	adds	r7, #32
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	2000000c 	.word	0x2000000c

08005fc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd4:	d111      	bne.n	8005ffa <SPI_EndRxTransaction+0x3a>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fde:	d004      	beq.n	8005fea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe8:	d107      	bne.n	8005ffa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006002:	d117      	bne.n	8006034 <SPI_EndRxTransaction+0x74>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600c:	d112      	bne.n	8006034 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	2101      	movs	r1, #1
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff ff49 	bl	8005eb0 <SPI_WaitFlagStateUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01a      	beq.n	800605a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e013      	b.n	800605c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	2180      	movs	r1, #128	; 0x80
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff ff36 	bl	8005eb0 <SPI_WaitFlagStateUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d007      	beq.n	800605a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	f043 0220 	orr.w	r2, r3, #32
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e000      	b.n	800605c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2200      	movs	r2, #0
 8006078:	2180      	movs	r1, #128	; 0x80
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f7ff ff18 	bl	8005eb0 <SPI_WaitFlagStateUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608a:	f043 0220 	orr.w	r2, r3, #32
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e000      	b.n	8006098 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e03f      	b.n	8006132 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fb fc00 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2224      	movs	r2, #36	; 0x24
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f905 	bl	80062f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695a      	ldr	r2, [r3, #20]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b08a      	sub	sp, #40	; 0x28
 800613e:	af02      	add	r7, sp, #8
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	603b      	str	r3, [r7, #0]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b20      	cmp	r3, #32
 8006158:	d17c      	bne.n	8006254 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <HAL_UART_Transmit+0x2c>
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e075      	b.n	8006256 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_UART_Transmit+0x3e>
 8006174:	2302      	movs	r3, #2
 8006176:	e06e      	b.n	8006256 <HAL_UART_Transmit+0x11c>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2221      	movs	r2, #33	; 0x21
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800618e:	f7fb fd73 	bl	8001c78 <HAL_GetTick>
 8006192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	88fa      	ldrh	r2, [r7, #6]
 8006198:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	88fa      	ldrh	r2, [r7, #6]
 800619e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a8:	d108      	bne.n	80061bc <HAL_UART_Transmit+0x82>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	e003      	b.n	80061c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061cc:	e02a      	b.n	8006224 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2200      	movs	r2, #0
 80061d6:	2180      	movs	r1, #128	; 0x80
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f840 	bl	800625e <UART_WaitOnFlagUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e036      	b.n	8006256 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	3302      	adds	r3, #2
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e007      	b.n	8006216 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	781a      	ldrb	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	3301      	adds	r3, #1
 8006214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1cf      	bne.n	80061ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2200      	movs	r2, #0
 8006236:	2140      	movs	r1, #64	; 0x40
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f810 	bl	800625e <UART_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e006      	b.n	8006256 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	4613      	mov	r3, r2
 800626c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626e:	e02c      	b.n	80062ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d028      	beq.n	80062ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <UART_WaitOnFlagUntilTimeout+0x30>
 800627e:	f7fb fcfb 	bl	8001c78 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	429a      	cmp	r2, r3
 800628c:	d21d      	bcs.n	80062ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800629c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695a      	ldr	r2, [r3, #20]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e00f      	b.n	80062ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4013      	ands	r3, r2
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	bf0c      	ite	eq
 80062da:	2301      	moveq	r3, #1
 80062dc:	2300      	movne	r3, #0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d0c3      	beq.n	8006270 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800632e:	f023 030c 	bic.w	r3, r3, #12
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	430b      	orrs	r3, r1
 800633a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a2c      	ldr	r2, [pc, #176]	; (8006408 <UART_SetConfig+0x114>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d103      	bne.n	8006364 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800635c:	f7ff f884 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	e002      	b.n	800636a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7ff f86c 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8006368:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	009a      	lsls	r2, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006380:	4a22      	ldr	r2, [pc, #136]	; (800640c <UART_SetConfig+0x118>)
 8006382:	fba2 2303 	umull	r2, r3, r2, r3
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	0119      	lsls	r1, r3, #4
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	009a      	lsls	r2, r3, #2
 8006394:	441a      	add	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	fbb2 f2f3 	udiv	r2, r2, r3
 80063a0:	4b1a      	ldr	r3, [pc, #104]	; (800640c <UART_SetConfig+0x118>)
 80063a2:	fba3 0302 	umull	r0, r3, r3, r2
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	2064      	movs	r0, #100	; 0x64
 80063aa:	fb00 f303 	mul.w	r3, r0, r3
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	3332      	adds	r3, #50	; 0x32
 80063b4:	4a15      	ldr	r2, [pc, #84]	; (800640c <UART_SetConfig+0x118>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c0:	4419      	add	r1, r3
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	009a      	lsls	r2, r3, #2
 80063cc:	441a      	add	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063d8:	4b0c      	ldr	r3, [pc, #48]	; (800640c <UART_SetConfig+0x118>)
 80063da:	fba3 0302 	umull	r0, r3, r3, r2
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	2064      	movs	r0, #100	; 0x64
 80063e2:	fb00 f303 	mul.w	r3, r0, r3
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	3332      	adds	r3, #50	; 0x32
 80063ec:	4a07      	ldr	r2, [pc, #28]	; (800640c <UART_SetConfig+0x118>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	f003 020f 	and.w	r2, r3, #15
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	440a      	add	r2, r1
 80063fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40013800 	.word	0x40013800
 800640c:	51eb851f 	.word	0x51eb851f

08006410 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006410:	b084      	sub	sp, #16
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	f107 0014 	add.w	r0, r7, #20
 800641e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	b004      	add	sp, #16
 800642e:	4770      	bx	lr

08006430 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006440:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006444:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	b29a      	uxth	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006464:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006468:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	b29b      	uxth	r3, r3
 8006476:	43db      	mvns	r3, r3
 8006478:	b29b      	uxth	r3, r3
 800647a:	4013      	ands	r3, r2
 800647c:	b29a      	uxth	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr

080064a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064a8:	b084      	sub	sp, #16
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	f107 0014 	add.w	r0, r7, #20
 80064b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	b004      	add	sp, #16
 80064e6:	4770      	bx	lr

080064e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b09b      	sub	sp, #108	; 0x6c
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800650a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	78db      	ldrb	r3, [r3, #3]
 8006516:	2b03      	cmp	r3, #3
 8006518:	d81f      	bhi.n	800655a <USB_ActivateEndpoint+0x72>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <USB_ActivateEndpoint+0x38>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006531 	.word	0x08006531
 8006524:	0800654d 	.word	0x0800654d
 8006528:	08006563 	.word	0x08006563
 800652c:	0800653f 	.word	0x0800653f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006530:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006538:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800653c:	e012      	b.n	8006564 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800653e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006542:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006546:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800654a:	e00b      	b.n	8006564 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800654c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006550:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006554:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006558:	e004      	b.n	8006564 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006560:	e000      	b.n	8006564 <USB_ActivateEndpoint+0x7c>
      break;
 8006562:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	441a      	add	r2, r3
 800656e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006582:	b29b      	uxth	r3, r3
 8006584:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659c:	b29a      	uxth	r2, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	441a      	add	r2, r3
 80065b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80065b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	7b1b      	ldrb	r3, [r3, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 8149 	bne.w	8006868 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8084 	beq.w	80066e8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	4413      	add	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	011a      	lsls	r2, r3, #4
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	88db      	ldrh	r3, [r3, #6]
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	b29b      	uxth	r3, r3
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	81fb      	strh	r3, [r7, #14]
 8006622:	89fb      	ldrh	r3, [r7, #14]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01b      	beq.n	8006664 <USB_ActivateEndpoint+0x17c>
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	81bb      	strh	r3, [r7, #12]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	89bb      	ldrh	r3, [r7, #12]
 8006650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006660:	b29b      	uxth	r3, r3
 8006662:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	78db      	ldrb	r3, [r3, #3]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d020      	beq.n	80066ae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006682:	813b      	strh	r3, [r7, #8]
 8006684:	893b      	ldrh	r3, [r7, #8]
 8006686:	f083 0320 	eor.w	r3, r3, #32
 800668a:	813b      	strh	r3, [r7, #8]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	441a      	add	r2, r3
 8006696:	893b      	ldrh	r3, [r7, #8]
 8006698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	8013      	strh	r3, [r2, #0]
 80066ac:	e27f      	b.n	8006bae <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c4:	817b      	strh	r3, [r7, #10]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	897b      	ldrh	r3, [r7, #10]
 80066d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	8013      	strh	r3, [r2, #0]
 80066e6:	e262      	b.n	8006bae <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	4413      	add	r3, r2
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	011a      	lsls	r2, r3, #4
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	4413      	add	r3, r2
 8006706:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	88db      	ldrh	r3, [r3, #6]
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	b29b      	uxth	r3, r3
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	4413      	add	r3, r2
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	011a      	lsls	r2, r3, #4
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	4413      	add	r3, r2
 800673a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800673e:	623b      	str	r3, [r7, #32]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d112      	bne.n	800676e <USB_ActivateEndpoint+0x286>
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006752:	b29a      	uxth	r2, r3
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006766:	b29a      	uxth	r2, r3
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e02f      	b.n	80067ce <USB_ActivateEndpoint+0x2e6>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b3e      	cmp	r3, #62	; 0x3e
 8006774:	d813      	bhi.n	800679e <USB_ActivateEndpoint+0x2b6>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	663b      	str	r3, [r7, #96]	; 0x60
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <USB_ActivateEndpoint+0x2a8>
 800678a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800678c:	3301      	adds	r3, #1
 800678e:	663b      	str	r3, [r7, #96]	; 0x60
 8006790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006792:	b29b      	uxth	r3, r3
 8006794:	029b      	lsls	r3, r3, #10
 8006796:	b29a      	uxth	r2, r3
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	e017      	b.n	80067ce <USB_ActivateEndpoint+0x2e6>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	663b      	str	r3, [r7, #96]	; 0x60
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d102      	bne.n	80067b8 <USB_ActivateEndpoint+0x2d0>
 80067b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b4:	3b01      	subs	r3, #1
 80067b6:	663b      	str	r3, [r7, #96]	; 0x60
 80067b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	029b      	lsls	r3, r3, #10
 80067be:	b29b      	uxth	r3, r3
 80067c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	83fb      	strh	r3, [r7, #30]
 80067dc:	8bfb      	ldrh	r3, [r7, #30]
 80067de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d01b      	beq.n	800681e <USB_ActivateEndpoint+0x336>
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fc:	83bb      	strh	r3, [r7, #28]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	441a      	add	r2, r3
 8006808:	8bbb      	ldrh	r3, [r7, #28]
 800680a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681a:	b29b      	uxth	r3, r3
 800681c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006834:	837b      	strh	r3, [r7, #26]
 8006836:	8b7b      	ldrh	r3, [r7, #26]
 8006838:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800683c:	837b      	strh	r3, [r7, #26]
 800683e:	8b7b      	ldrh	r3, [r7, #26]
 8006840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006844:	837b      	strh	r3, [r7, #26]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	441a      	add	r2, r3
 8006850:	8b7b      	ldrh	r3, [r7, #26]
 8006852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006862:	b29b      	uxth	r3, r3
 8006864:	8013      	strh	r3, [r2, #0]
 8006866:	e1a2      	b.n	8006bae <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006898:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800689c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068b4:	4413      	add	r3, r2
 80068b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	011a      	lsls	r2, r3, #4
 80068be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068c6:	657b      	str	r3, [r7, #84]	; 0x54
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	891b      	ldrh	r3, [r3, #8]
 80068cc:	085b      	lsrs	r3, r3, #1
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	653b      	str	r3, [r7, #80]	; 0x50
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e8:	4413      	add	r3, r2
 80068ea:	653b      	str	r3, [r7, #80]	; 0x50
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	011a      	lsls	r2, r3, #4
 80068f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80068fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	895b      	ldrh	r3, [r3, #10]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	b29b      	uxth	r3, r3
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f040 8091 	bne.w	8006a38 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006924:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01b      	beq.n	8006966 <USB_ActivateEndpoint+0x47e>
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006944:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	441a      	add	r2, r3
 8006950:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800695e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006962:	b29b      	uxth	r3, r3
 8006964:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	873b      	strh	r3, [r7, #56]	; 0x38
 8006974:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01b      	beq.n	80069b6 <USB_ActivateEndpoint+0x4ce>
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006994:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a14:	867b      	strh	r3, [r7, #50]	; 0x32
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	441a      	add	r2, r3
 8006a20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	8013      	strh	r3, [r2, #0]
 8006a36:	e0ba      	b.n	8006bae <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01d      	beq.n	8006a90 <USB_ActivateEndpoint+0x5a8>
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006aa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01d      	beq.n	8006ae8 <USB_ActivateEndpoint+0x600>
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	78db      	ldrb	r3, [r3, #3]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d024      	beq.n	8006b3a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b0e:	f083 0320 	eor.w	r3, r3, #32
 8006b12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	8013      	strh	r3, [r2, #0]
 8006b38:	e01d      	b.n	8006b76 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	441a      	add	r2, r3
 8006b5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006bae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	376c      	adds	r7, #108	; 0x6c
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr

08006bbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b08d      	sub	sp, #52	; 0x34
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	7b1b      	ldrb	r3, [r3, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 808e 	bne.w	8006cec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d044      	beq.n	8006c62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	81bb      	strh	r3, [r7, #12]
 8006be6:	89bb      	ldrh	r3, [r7, #12]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01b      	beq.n	8006c28 <USB_DeactivateEndpoint+0x6c>
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	817b      	strh	r3, [r7, #10]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	441a      	add	r2, r3
 8006c12:	897b      	ldrh	r3, [r7, #10]
 8006c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3e:	813b      	strh	r3, [r7, #8]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	893b      	ldrh	r3, [r7, #8]
 8006c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	8013      	strh	r3, [r2, #0]
 8006c60:	e192      	b.n	8006f88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	827b      	strh	r3, [r7, #18]
 8006c70:	8a7b      	ldrh	r3, [r7, #18]
 8006c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01b      	beq.n	8006cb2 <USB_DeactivateEndpoint+0xf6>
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	823b      	strh	r3, [r7, #16]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	441a      	add	r2, r3
 8006c9c:	8a3b      	ldrh	r3, [r7, #16]
 8006c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc8:	81fb      	strh	r3, [r7, #14]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	441a      	add	r2, r3
 8006cd4:	89fb      	ldrh	r3, [r7, #14]
 8006cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	8013      	strh	r3, [r2, #0]
 8006cea:	e14d      	b.n	8006f88 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 80a5 	bne.w	8006e40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	843b      	strh	r3, [r7, #32]
 8006d04:	8c3b      	ldrh	r3, [r7, #32]
 8006d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01b      	beq.n	8006d46 <USB_DeactivateEndpoint+0x18a>
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	83fb      	strh	r3, [r7, #30]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	8bfb      	ldrh	r3, [r7, #30]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	83bb      	strh	r3, [r7, #28]
 8006d54:	8bbb      	ldrh	r3, [r7, #28]
 8006d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01b      	beq.n	8006d96 <USB_DeactivateEndpoint+0x1da>
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d74:	837b      	strh	r3, [r7, #26]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	8b7b      	ldrh	r3, [r7, #26]
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dac:	833b      	strh	r3, [r7, #24]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	8b3b      	ldrh	r3, [r7, #24]
 8006dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	82fb      	strh	r3, [r7, #22]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	441a      	add	r2, r3
 8006df0:	8afb      	ldrh	r3, [r7, #22]
 8006df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1c:	82bb      	strh	r3, [r7, #20]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	441a      	add	r2, r3
 8006e28:	8abb      	ldrh	r3, [r7, #20]
 8006e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
 8006e3e:	e0a3      	b.n	8006f88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01b      	beq.n	8006e90 <USB_DeactivateEndpoint+0x2d4>
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	441a      	add	r2, r3
 8006e7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01b      	beq.n	8006ee0 <USB_DeactivateEndpoint+0x324>
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	441a      	add	r2, r3
 8006eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	441a      	add	r2, r3
 8006f02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	441a      	add	r2, r3
 8006f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3734      	adds	r7, #52	; 0x34
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b0cc      	sub	sp, #304	; 0x130
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa2:	6018      	str	r0, [r3, #0]
 8006fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	f041 817d 	bne.w	80082ba <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d908      	bls.n	8006fee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006fec:	e007      	b.n	8006ffe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	7b1b      	ldrb	r3, [r3, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d152      	bne.n	80070b4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800700e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6959      	ldr	r1, [r3, #20]
 800701a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	88da      	ldrh	r2, [r3, #6]
 8007026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702a:	b29b      	uxth	r3, r3
 800702c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007030:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007034:	6800      	ldr	r0, [r0, #0]
 8007036:	f001 ff23 	bl	8008e80 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007042:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007046:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705c:	b29b      	uxth	r3, r3
 800705e:	4619      	mov	r1, r3
 8007060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007064:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007068:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800706c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	440a      	add	r2, r1
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	011a      	lsls	r2, r3, #4
 8007084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007088:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4413      	add	r3, r2
 8007090:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007098:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	f001 b8b5 	b.w	800821e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80070b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	78db      	ldrb	r3, [r3, #3]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	f040 84c6 	bne.w	8007a52 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80070c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	429a      	cmp	r2, r3
 80070e0:	f240 8443 	bls.w	800796a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80070e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	441a      	add	r2, r3
 8007128:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800712c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007134:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713c:	b29b      	uxth	r3, r3
 800713e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6a1a      	ldr	r2, [r3, #32]
 800714c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007150:	1ad2      	subs	r2, r2, r3
 8007152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800715e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 823e 	beq.w	8007602 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800718e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007192:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	785b      	ldrb	r3, [r3, #1]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 809a 	bne.w	80072e0 <USB_EPStartXfer+0x34c>
 80071ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	4619      	mov	r1, r3
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071de:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	440a      	add	r2, r1
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	011a      	lsls	r2, r3, #4
 80071f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4413      	add	r3, r2
 8007202:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d122      	bne.n	800725e <USB_EPStartXfer+0x2ca>
 8007218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800722a:	b29a      	uxth	r2, r3
 800722c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007230:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724e:	b29a      	uxth	r2, r3
 8007250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007254:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	e079      	b.n	8007352 <USB_EPStartXfer+0x3be>
 800725e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007262:	2b3e      	cmp	r3, #62	; 0x3e
 8007264:	d81b      	bhi.n	800729e <USB_EPStartXfer+0x30a>
 8007266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <USB_EPStartXfer+0x2f2>
 800727c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007280:	3301      	adds	r3, #1
 8007282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007286:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800728a:	b29b      	uxth	r3, r3
 800728c:	029b      	lsls	r3, r3, #10
 800728e:	b29a      	uxth	r2, r3
 8007290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007294:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	e059      	b.n	8007352 <USB_EPStartXfer+0x3be>
 800729e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d104      	bne.n	80072be <USB_EPStartXfer+0x32a>
 80072b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072b8:	3b01      	subs	r3, #1
 80072ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	029b      	lsls	r3, r3, #10
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	e038      	b.n	8007352 <USB_EPStartXfer+0x3be>
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d130      	bne.n	8007352 <USB_EPStartXfer+0x3be>
 80072f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fe:	b29b      	uxth	r3, r3
 8007300:	4619      	mov	r1, r3
 8007302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007306:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800730a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800730e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	440a      	add	r2, r1
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	011a      	lsls	r2, r3, #4
 8007326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4413      	add	r3, r2
 8007332:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007344:	b29a      	uxth	r2, r3
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	895b      	ldrh	r3, [r3, #10]
 800735e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6959      	ldr	r1, [r3, #20]
 800736e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007372:	b29b      	uxth	r3, r3
 8007374:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007378:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800737c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007380:	6800      	ldr	r0, [r0, #0]
 8007382:	f001 fd7d 	bl	8008e80 <USB_WritePMA>
            ep->xfer_buff += len;
 8007386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695a      	ldr	r2, [r3, #20]
 8007392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007396:	441a      	add	r2, r3
 8007398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6a1a      	ldr	r2, [r3, #32]
 80073b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d90f      	bls.n	80073e0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80073c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6a1a      	ldr	r2, [r3, #32]
 80073cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d0:	1ad2      	subs	r2, r2, r3
 80073d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	621a      	str	r2, [r3, #32]
 80073de:	e00e      	b.n	80073fe <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80073f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2200      	movs	r2, #0
 80073fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b00      	cmp	r3, #0
 800740c:	f040 809a 	bne.w	8007544 <USB_EPStartXfer+0x5b0>
 8007410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007414:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007418:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800741c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007432:	b29b      	uxth	r3, r3
 8007434:	4619      	mov	r1, r3
 8007436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800743e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007442:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	440a      	add	r2, r1
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	011a      	lsls	r2, r3, #4
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4413      	add	r3, r2
 8007466:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800746a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d122      	bne.n	80074c2 <USB_EPStartXfer+0x52e>
 800747c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007480:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b29b      	uxth	r3, r3
 800748a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800748e:	b29a      	uxth	r2, r3
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	801a      	strh	r2, [r3, #0]
 80074c0:	e083      	b.n	80075ca <USB_EPStartXfer+0x636>
 80074c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c6:	2b3e      	cmp	r3, #62	; 0x3e
 80074c8:	d81b      	bhi.n	8007502 <USB_EPStartXfer+0x56e>
 80074ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ce:	085b      	lsrs	r3, r3, #1
 80074d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <USB_EPStartXfer+0x556>
 80074e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074e4:	3301      	adds	r3, #1
 80074e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	029b      	lsls	r3, r3, #10
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	801a      	strh	r2, [r3, #0]
 8007500:	e063      	b.n	80075ca <USB_EPStartXfer+0x636>
 8007502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800750c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	2b00      	cmp	r3, #0
 8007516:	d104      	bne.n	8007522 <USB_EPStartXfer+0x58e>
 8007518:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800751c:	3b01      	subs	r3, #1
 800751e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007522:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007526:	b29b      	uxth	r3, r3
 8007528:	029b      	lsls	r3, r3, #10
 800752a:	b29b      	uxth	r3, r3
 800752c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007534:	b29a      	uxth	r2, r3
 8007536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	e042      	b.n	80075ca <USB_EPStartXfer+0x636>
 8007544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d13a      	bne.n	80075ca <USB_EPStartXfer+0x636>
 8007554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007558:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800755c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007560:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007576:	b29b      	uxth	r3, r3
 8007578:	4619      	mov	r1, r3
 800757a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007582:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007586:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	440a      	add	r2, r1
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	011a      	lsls	r2, r3, #4
 800759e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4413      	add	r3, r2
 80075aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075bc:	b29a      	uxth	r2, r3
 80075be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	891b      	ldrh	r3, [r3, #8]
 80075d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6959      	ldr	r1, [r3, #20]
 80075e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075f8:	6800      	ldr	r0, [r0, #0]
 80075fa:	f001 fc41 	bl	8008e80 <USB_WritePMA>
 80075fe:	f000 be0e 	b.w	800821e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d16d      	bne.n	80076ee <USB_EPStartXfer+0x75a>
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	64bb      	str	r3, [r7, #72]	; 0x48
 800761e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762c:	b29b      	uxth	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007632:	4413      	add	r3, r2
 8007634:	64bb      	str	r3, [r7, #72]	; 0x48
 8007636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	011a      	lsls	r2, r3, #4
 8007644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007646:	4413      	add	r3, r2
 8007648:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800764c:	647b      	str	r3, [r7, #68]	; 0x44
 800764e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d112      	bne.n	800767c <USB_EPStartXfer+0x6e8>
 8007656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007660:	b29a      	uxth	r2, r3
 8007662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007674:	b29a      	uxth	r2, r3
 8007676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	e063      	b.n	8007744 <USB_EPStartXfer+0x7b0>
 800767c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007680:	2b3e      	cmp	r3, #62	; 0x3e
 8007682:	d817      	bhi.n	80076b4 <USB_EPStartXfer+0x720>
 8007684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800768e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <USB_EPStartXfer+0x710>
 800769a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800769e:	3301      	adds	r3, #1
 80076a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	029b      	lsls	r3, r3, #10
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	e047      	b.n	8007744 <USB_EPStartXfer+0x7b0>
 80076b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <USB_EPStartXfer+0x740>
 80076ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076ce:	3b01      	subs	r3, #1
 80076d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076d8:	b29b      	uxth	r3, r3
 80076da:	029b      	lsls	r3, r3, #10
 80076dc:	b29b      	uxth	r3, r3
 80076de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	e02a      	b.n	8007744 <USB_EPStartXfer+0x7b0>
 80076ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d122      	bne.n	8007744 <USB_EPStartXfer+0x7b0>
 80076fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	653b      	str	r3, [r7, #80]	; 0x50
 800770a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007718:	b29b      	uxth	r3, r3
 800771a:	461a      	mov	r2, r3
 800771c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771e:	4413      	add	r3, r2
 8007720:	653b      	str	r3, [r7, #80]	; 0x50
 8007722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	011a      	lsls	r2, r3, #4
 8007730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007732:	4413      	add	r3, r2
 8007734:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800773a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773e:	b29a      	uxth	r2, r3
 8007740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007742:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	891b      	ldrh	r3, [r3, #8]
 8007750:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6959      	ldr	r1, [r3, #20]
 8007760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007764:	b29b      	uxth	r3, r3
 8007766:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800776a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800776e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007772:	6800      	ldr	r0, [r0, #0]
 8007774:	f001 fb84 	bl	8008e80 <USB_WritePMA>
            ep->xfer_buff += len;
 8007778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695a      	ldr	r2, [r3, #20]
 8007784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007788:	441a      	add	r2, r3
 800778a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6a1a      	ldr	r2, [r3, #32]
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d90f      	bls.n	80077d2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80077b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6a1a      	ldr	r2, [r3, #32]
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	1ad2      	subs	r2, r2, r3
 80077c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	621a      	str	r2, [r3, #32]
 80077d0:	e00e      	b.n	80077f0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80077d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80077e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2200      	movs	r2, #0
 80077ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	643b      	str	r3, [r7, #64]	; 0x40
 80077fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d16d      	bne.n	80078e8 <USB_EPStartXfer+0x954>
 800780c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	63bb      	str	r3, [r7, #56]	; 0x38
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007826:	b29b      	uxth	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	4413      	add	r3, r2
 800782e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	011a      	lsls	r2, r3, #4
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	4413      	add	r3, r2
 8007842:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
 8007848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d112      	bne.n	8007876 <USB_EPStartXfer+0x8e2>
 8007850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800785a:	b29a      	uxth	r2, r3
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	801a      	strh	r2, [r3, #0]
 8007860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800786a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786e:	b29a      	uxth	r2, r3
 8007870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007872:	801a      	strh	r2, [r3, #0]
 8007874:	e05d      	b.n	8007932 <USB_EPStartXfer+0x99e>
 8007876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787a:	2b3e      	cmp	r3, #62	; 0x3e
 800787c:	d817      	bhi.n	80078ae <USB_EPStartXfer+0x91a>
 800787e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <USB_EPStartXfer+0x90a>
 8007894:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007898:	3301      	adds	r3, #1
 800789a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800789e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	029b      	lsls	r3, r3, #10
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	e041      	b.n	8007932 <USB_EPStartXfer+0x99e>
 80078ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <USB_EPStartXfer+0x93a>
 80078c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078c8:	3b01      	subs	r3, #1
 80078ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	029b      	lsls	r3, r3, #10
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e4:	801a      	strh	r2, [r3, #0]
 80078e6:	e024      	b.n	8007932 <USB_EPStartXfer+0x99e>
 80078e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d11c      	bne.n	8007932 <USB_EPStartXfer+0x99e>
 80078f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007906:	b29b      	uxth	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790c:	4413      	add	r3, r2
 800790e:	643b      	str	r3, [r7, #64]	; 0x40
 8007910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	011a      	lsls	r2, r3, #4
 800791e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007920:	4413      	add	r3, r2
 8007922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800792c:	b29a      	uxth	r2, r3
 800792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007930:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	895b      	ldrh	r3, [r3, #10]
 800793e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6959      	ldr	r1, [r3, #20]
 800794e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007952:	b29b      	uxth	r3, r3
 8007954:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007958:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800795c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007960:	6800      	ldr	r0, [r0, #0]
 8007962:	f001 fa8d 	bl	8008e80 <USB_WritePMA>
 8007966:	f000 bc5a 	b.w	800821e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800796a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800797a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800799c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80079a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	441a      	add	r2, r3
 80079be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80079c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80079d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079f6:	4413      	add	r3, r2
 80079f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	011a      	lsls	r2, r3, #4
 8007a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a10:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	891b      	ldrh	r3, [r3, #8]
 8007a28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6959      	ldr	r1, [r3, #20]
 8007a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a42:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a46:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	f001 fa18 	bl	8008e80 <USB_WritePMA>
 8007a50:	e3e5      	b.n	800821e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a78:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	441a      	add	r2, r3
 8007a96:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abe:	1ad2      	subs	r2, r2, r3
 8007ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 81bc 	beq.w	8007e6c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d16d      	bne.n	8007bee <USB_EPStartXfer+0xc5a>
 8007b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b32:	4413      	add	r3, r2
 8007b34:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	011a      	lsls	r2, r3, #4
 8007b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b46:	4413      	add	r3, r2
 8007b48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b4c:	677b      	str	r3, [r7, #116]	; 0x74
 8007b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d112      	bne.n	8007b7c <USB_EPStartXfer+0xbe8>
 8007b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	e060      	b.n	8007c3e <USB_EPStartXfer+0xcaa>
 8007b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b80:	2b3e      	cmp	r3, #62	; 0x3e
 8007b82:	d817      	bhi.n	8007bb4 <USB_EPStartXfer+0xc20>
 8007b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b88:	085b      	lsrs	r3, r3, #1
 8007b8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d004      	beq.n	8007ba4 <USB_EPStartXfer+0xc10>
 8007b9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ba4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	029b      	lsls	r3, r3, #10
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	e044      	b.n	8007c3e <USB_EPStartXfer+0xcaa>
 8007bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb8:	095b      	lsrs	r3, r3, #5
 8007bba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d104      	bne.n	8007bd4 <USB_EPStartXfer+0xc40>
 8007bca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	029b      	lsls	r3, r3, #10
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bea:	801a      	strh	r2, [r3, #0]
 8007bec:	e027      	b.n	8007c3e <USB_EPStartXfer+0xcaa>
 8007bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	785b      	ldrb	r3, [r3, #1]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d11f      	bne.n	8007c3e <USB_EPStartXfer+0xcaa>
 8007bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c14:	4413      	add	r3, r2
 8007c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	011a      	lsls	r2, r3, #4
 8007c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	895b      	ldrh	r3, [r3, #10]
 8007c4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6959      	ldr	r1, [r3, #20]
 8007c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c6c:	6800      	ldr	r0, [r0, #0]
 8007c6e:	f001 f907 	bl	8008e80 <USB_WritePMA>
          ep->xfer_buff += len;
 8007c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695a      	ldr	r2, [r3, #20]
 8007c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c82:	441a      	add	r2, r3
 8007c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6a1a      	ldr	r2, [r3, #32]
 8007c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d90f      	bls.n	8007ccc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a1a      	ldr	r2, [r3, #32]
 8007cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cbc:	1ad2      	subs	r2, r2, r3
 8007cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	621a      	str	r2, [r3, #32]
 8007cca:	e00e      	b.n	8007cea <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 8295 	beq.w	800821e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	785b      	ldrb	r3, [r3, #1]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d16d      	bne.n	8007de0 <USB_EPStartXfer+0xe4c>
 8007d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d24:	4413      	add	r3, r2
 8007d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	011a      	lsls	r2, r3, #4
 8007d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d38:	4413      	add	r3, r2
 8007d3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d3e:	667b      	str	r3, [r7, #100]	; 0x64
 8007d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d112      	bne.n	8007d6e <USB_EPStartXfer+0xdda>
 8007d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6a:	801a      	strh	r2, [r3, #0]
 8007d6c:	e063      	b.n	8007e36 <USB_EPStartXfer+0xea2>
 8007d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d72:	2b3e      	cmp	r3, #62	; 0x3e
 8007d74:	d817      	bhi.n	8007da6 <USB_EPStartXfer+0xe12>
 8007d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d7a:	085b      	lsrs	r3, r3, #1
 8007d7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d004      	beq.n	8007d96 <USB_EPStartXfer+0xe02>
 8007d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d90:	3301      	adds	r3, #1
 8007d92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	029b      	lsls	r3, r3, #10
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007da2:	801a      	strh	r2, [r3, #0]
 8007da4:	e047      	b.n	8007e36 <USB_EPStartXfer+0xea2>
 8007da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007daa:	095b      	lsrs	r3, r3, #5
 8007dac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <USB_EPStartXfer+0xe32>
 8007dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	029b      	lsls	r3, r3, #10
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	e02a      	b.n	8007e36 <USB_EPStartXfer+0xea2>
 8007de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d122      	bne.n	8007e36 <USB_EPStartXfer+0xea2>
 8007df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e10:	4413      	add	r3, r2
 8007e12:	673b      	str	r3, [r7, #112]	; 0x70
 8007e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	011a      	lsls	r2, r3, #4
 8007e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e24:	4413      	add	r3, r2
 8007e26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	891b      	ldrh	r3, [r3, #8]
 8007e42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6959      	ldr	r1, [r3, #20]
 8007e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e64:	6800      	ldr	r0, [r0, #0]
 8007e66:	f001 f80b 	bl	8008e80 <USB_WritePMA>
 8007e6a:	e1d8      	b.n	800821e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d178      	bne.n	8007f6e <USB_EPStartXfer+0xfda>
 8007e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	011a      	lsls	r2, r3, #4
 8007eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eb8:	4413      	add	r3, r2
 8007eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ebe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d116      	bne.n	8007ef8 <USB_EPStartXfer+0xf64>
 8007eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007edc:	801a      	strh	r2, [r3, #0]
 8007ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ef4:	801a      	strh	r2, [r3, #0]
 8007ef6:	e06b      	b.n	8007fd0 <USB_EPStartXfer+0x103c>
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efc:	2b3e      	cmp	r3, #62	; 0x3e
 8007efe:	d818      	bhi.n	8007f32 <USB_EPStartXfer+0xf9e>
 8007f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d004      	beq.n	8007f20 <USB_EPStartXfer+0xf8c>
 8007f16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	029b      	lsls	r3, r3, #10
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f2e:	801a      	strh	r2, [r3, #0]
 8007f30:	e04e      	b.n	8007fd0 <USB_EPStartXfer+0x103c>
 8007f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <USB_EPStartXfer+0xfbe>
 8007f48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	029b      	lsls	r3, r3, #10
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f6a:	801a      	strh	r2, [r3, #0]
 8007f6c:	e030      	b.n	8007fd0 <USB_EPStartXfer+0x103c>
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	785b      	ldrb	r3, [r3, #1]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d128      	bne.n	8007fd0 <USB_EPStartXfer+0x103c>
 8007f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	011a      	lsls	r2, r3, #4
 8007fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fba:	4413      	add	r3, r2
 8007fbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	891b      	ldrh	r3, [r3, #8]
 8007fdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6959      	ldr	r1, [r3, #20]
 8007fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ff6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007ffa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ffe:	6800      	ldr	r0, [r0, #0]
 8008000:	f000 ff3e 	bl	8008e80 <USB_WritePMA>
          ep->xfer_buff += len;
 8008004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695a      	ldr	r2, [r3, #20]
 8008010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008014:	441a      	add	r2, r3
 8008016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6a1a      	ldr	r2, [r3, #32]
 800802e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	429a      	cmp	r2, r3
 800803c:	d90f      	bls.n	800805e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800803e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6a1a      	ldr	r2, [r3, #32]
 800804a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	621a      	str	r2, [r3, #32]
 800805c:	e00e      	b.n	800807c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800805e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800806e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2200      	movs	r2, #0
 800807a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800807c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80cc 	beq.w	800821e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d178      	bne.n	8008196 <USB_EPStartXfer+0x1202>
 80080a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	461a      	mov	r2, r3
 80080c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080c8:	4413      	add	r3, r2
 80080ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	011a      	lsls	r2, r3, #4
 80080dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080e0:	4413      	add	r3, r2
 80080e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d116      	bne.n	8008120 <USB_EPStartXfer+0x118c>
 80080f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080fe:	b29a      	uxth	r2, r3
 8008100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008104:	801a      	strh	r2, [r3, #0]
 8008106:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008116:	b29a      	uxth	r2, r3
 8008118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800811c:	801a      	strh	r2, [r3, #0]
 800811e:	e064      	b.n	80081ea <USB_EPStartXfer+0x1256>
 8008120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008124:	2b3e      	cmp	r3, #62	; 0x3e
 8008126:	d818      	bhi.n	800815a <USB_EPStartXfer+0x11c6>
 8008128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812c:	085b      	lsrs	r3, r3, #1
 800812e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <USB_EPStartXfer+0x11b4>
 800813e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008142:	3301      	adds	r3, #1
 8008144:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800814c:	b29b      	uxth	r3, r3
 800814e:	029b      	lsls	r3, r3, #10
 8008150:	b29a      	uxth	r2, r3
 8008152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008156:	801a      	strh	r2, [r3, #0]
 8008158:	e047      	b.n	80081ea <USB_EPStartXfer+0x1256>
 800815a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008168:	f003 031f 	and.w	r3, r3, #31
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <USB_EPStartXfer+0x11e6>
 8008170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008174:	3b01      	subs	r3, #1
 8008176:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800817a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800817e:	b29b      	uxth	r3, r3
 8008180:	029b      	lsls	r3, r3, #10
 8008182:	b29b      	uxth	r3, r3
 8008184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818c:	b29a      	uxth	r2, r3
 800818e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	e029      	b.n	80081ea <USB_EPStartXfer+0x1256>
 8008196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	785b      	ldrb	r3, [r3, #1]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d121      	bne.n	80081ea <USB_EPStartXfer+0x1256>
 80081a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	461a      	mov	r2, r3
 80081b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081bc:	4413      	add	r3, r2
 80081be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	011a      	lsls	r2, r3, #4
 80081d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081d4:	4413      	add	r3, r2
 80081d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80081ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	895b      	ldrh	r3, [r3, #10]
 80081f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6959      	ldr	r1, [r3, #20]
 8008206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800820a:	b29b      	uxth	r3, r3
 800820c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008210:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008214:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008218:	6800      	ldr	r0, [r0, #0]
 800821a:	f000 fe31 	bl	8008e80 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800821e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008240:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800824c:	8013      	strh	r3, [r2, #0]
 800824e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008252:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008256:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800825a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800825e:	8812      	ldrh	r2, [r2, #0]
 8008260:	f082 0210 	eor.w	r2, r2, #16
 8008264:	801a      	strh	r2, [r3, #0]
 8008266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800826a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800826e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008272:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008276:	8812      	ldrh	r2, [r2, #0]
 8008278:	f082 0220 	eor.w	r2, r2, #32
 800827c:	801a      	strh	r2, [r3, #0]
 800827e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	441a      	add	r2, r3
 8008298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	8013      	strh	r3, [r2, #0]
 80082b6:	f000 bc9f 	b.w	8008bf8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	7b1b      	ldrb	r3, [r3, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f040 80ae 	bne.w	8008428 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80082cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699a      	ldr	r2, [r3, #24]
 80082d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d917      	bls.n	8008318 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80082e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80082f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008308:	1ad2      	subs	r2, r2, r3
 800830a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	619a      	str	r2, [r3, #24]
 8008316:	e00e      	b.n	8008336 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2200      	movs	r2, #0
 8008334:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008348:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008352:	b29b      	uxth	r3, r3
 8008354:	461a      	mov	r2, r3
 8008356:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800835a:	4413      	add	r3, r2
 800835c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	011a      	lsls	r2, r3, #4
 800836e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008372:	4413      	add	r3, r2
 8008374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800837c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d116      	bne.n	80083b2 <USB_EPStartXfer+0x141e>
 8008384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008390:	b29a      	uxth	r2, r3
 8008392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008396:	801a      	strh	r2, [r3, #0]
 8008398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	e3e8      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
 80083b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b6:	2b3e      	cmp	r3, #62	; 0x3e
 80083b8:	d818      	bhi.n	80083ec <USB_EPStartXfer+0x1458>
 80083ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083be:	085b      	lsrs	r3, r3, #1
 80083c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <USB_EPStartXfer+0x1446>
 80083d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083d4:	3301      	adds	r3, #1
 80083d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083de:	b29b      	uxth	r3, r3
 80083e0:	029b      	lsls	r3, r3, #10
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083e8:	801a      	strh	r2, [r3, #0]
 80083ea:	e3cb      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
 80083ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <USB_EPStartXfer+0x1478>
 8008402:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008406:	3b01      	subs	r3, #1
 8008408:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800840c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008410:	b29b      	uxth	r3, r3
 8008412:	029b      	lsls	r3, r3, #10
 8008414:	b29b      	uxth	r3, r3
 8008416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800841a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841e:	b29a      	uxth	r2, r3
 8008420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008424:	801a      	strh	r2, [r3, #0]
 8008426:	e3ad      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	78db      	ldrb	r3, [r3, #3]
 8008434:	2b02      	cmp	r3, #2
 8008436:	f040 8200 	bne.w	800883a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800843a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f040 8091 	bne.w	800856e <USB_EPStartXfer+0x15da>
 800844c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800845a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008468:	b29b      	uxth	r3, r3
 800846a:	461a      	mov	r2, r3
 800846c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008470:	4413      	add	r3, r2
 8008472:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	011a      	lsls	r2, r3, #4
 8008484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008488:	4413      	add	r3, r2
 800848a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800848e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d116      	bne.n	80084d0 <USB_EPStartXfer+0x153c>
 80084a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	e083      	b.n	80085d8 <USB_EPStartXfer+0x1644>
 80084d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	2b3e      	cmp	r3, #62	; 0x3e
 80084de:	d820      	bhi.n	8008522 <USB_EPStartXfer+0x158e>
 80084e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80084f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <USB_EPStartXfer+0x157c>
 8008506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800850a:	3301      	adds	r3, #1
 800850c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008514:	b29b      	uxth	r3, r3
 8008516:	029b      	lsls	r3, r3, #10
 8008518:	b29a      	uxth	r2, r3
 800851a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	e05a      	b.n	80085d8 <USB_EPStartXfer+0x1644>
 8008522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	095b      	lsrs	r3, r3, #5
 8008530:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f003 031f 	and.w	r3, r3, #31
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <USB_EPStartXfer+0x15be>
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854c:	3b01      	subs	r3, #1
 800854e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008556:	b29b      	uxth	r3, r3
 8008558:	029b      	lsls	r3, r3, #10
 800855a:	b29b      	uxth	r3, r3
 800855c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008564:	b29a      	uxth	r2, r3
 8008566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800856a:	801a      	strh	r2, [r3, #0]
 800856c:	e034      	b.n	80085d8 <USB_EPStartXfer+0x1644>
 800856e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	785b      	ldrb	r3, [r3, #1]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d12c      	bne.n	80085d8 <USB_EPStartXfer+0x1644>
 800857e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800858c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800859a:	b29b      	uxth	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085a2:	4413      	add	r3, r2
 80085a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	011a      	lsls	r2, r3, #4
 80085b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ba:	4413      	add	r3, r2
 80085bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f040 8091 	bne.w	800871a <USB_EPStartXfer+0x1786>
 80085f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008614:	b29b      	uxth	r3, r3
 8008616:	461a      	mov	r2, r3
 8008618:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800861c:	4413      	add	r3, r2
 800861e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	011a      	lsls	r2, r3, #4
 8008630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008634:	4413      	add	r3, r2
 8008636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800863a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800863e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d116      	bne.n	800867c <USB_EPStartXfer+0x16e8>
 800864e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800865a:	b29a      	uxth	r2, r3
 800865c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008660:	801a      	strh	r2, [r3, #0]
 8008662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	b29b      	uxth	r3, r3
 800866a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800866e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008672:	b29a      	uxth	r2, r3
 8008674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008678:	801a      	strh	r2, [r3, #0]
 800867a:	e07c      	b.n	8008776 <USB_EPStartXfer+0x17e2>
 800867c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b3e      	cmp	r3, #62	; 0x3e
 800868a:	d820      	bhi.n	80086ce <USB_EPStartXfer+0x173a>
 800868c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	085b      	lsrs	r3, r3, #1
 800869a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800869e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d004      	beq.n	80086bc <USB_EPStartXfer+0x1728>
 80086b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086b6:	3301      	adds	r3, #1
 80086b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	029b      	lsls	r3, r3, #10
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	e053      	b.n	8008776 <USB_EPStartXfer+0x17e2>
 80086ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	f003 031f 	and.w	r3, r3, #31
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <USB_EPStartXfer+0x176a>
 80086f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086f8:	3b01      	subs	r3, #1
 80086fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008702:	b29b      	uxth	r3, r3
 8008704:	029b      	lsls	r3, r3, #10
 8008706:	b29b      	uxth	r3, r3
 8008708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800870c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008710:	b29a      	uxth	r2, r3
 8008712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008716:	801a      	strh	r2, [r3, #0]
 8008718:	e02d      	b.n	8008776 <USB_EPStartXfer+0x17e2>
 800871a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	785b      	ldrb	r3, [r3, #1]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d125      	bne.n	8008776 <USB_EPStartXfer+0x17e2>
 800872a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008738:	b29b      	uxth	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008740:	4413      	add	r3, r2
 8008742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	011a      	lsls	r2, r3, #4
 8008754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008758:	4413      	add	r3, r2
 800875a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800875e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	b29a      	uxth	r2, r3
 8008770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008774:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 81fe 	beq.w	8008b84 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <USB_EPStartXfer+0x182c>
 80087b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10d      	bne.n	80087dc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f040 81db 	bne.w	8008b84 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087ce:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f040 81d4 	bne.w	8008b84 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80087dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008802:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	441a      	add	r2, r3
 8008820:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008834:	b29b      	uxth	r3, r3
 8008836:	8013      	strh	r3, [r2, #0]
 8008838:	e1a4      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800883a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800883e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	78db      	ldrb	r3, [r3, #3]
 8008846:	2b01      	cmp	r3, #1
 8008848:	f040 819a 	bne.w	8008b80 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800884c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	699a      	ldr	r2, [r3, #24]
 8008858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	429a      	cmp	r2, r3
 8008866:	d917      	bls.n	8008898 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	699a      	ldr	r2, [r3, #24]
 8008884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008888:	1ad2      	subs	r2, r2, r3
 800888a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	619a      	str	r2, [r3, #24]
 8008896:	e00e      	b.n	80088b6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80088a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80088b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d178      	bne.n	80089b8 <USB_EPStartXfer+0x1a24>
 80088c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088ea:	4413      	add	r3, r2
 80088ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	011a      	lsls	r2, r3, #4
 80088fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008902:	4413      	add	r3, r2
 8008904:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008908:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800890c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d116      	bne.n	8008942 <USB_EPStartXfer+0x19ae>
 8008914:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008920:	b29a      	uxth	r2, r3
 8008922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008926:	801a      	strh	r2, [r3, #0]
 8008928:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b29b      	uxth	r3, r3
 8008930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008938:	b29a      	uxth	r2, r3
 800893a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800893e:	801a      	strh	r2, [r3, #0]
 8008940:	e06b      	b.n	8008a1a <USB_EPStartXfer+0x1a86>
 8008942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008946:	2b3e      	cmp	r3, #62	; 0x3e
 8008948:	d818      	bhi.n	800897c <USB_EPStartXfer+0x19e8>
 800894a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894e:	085b      	lsrs	r3, r3, #1
 8008950:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d004      	beq.n	800896a <USB_EPStartXfer+0x19d6>
 8008960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008964:	3301      	adds	r3, #1
 8008966:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800896a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800896e:	b29b      	uxth	r3, r3
 8008970:	029b      	lsls	r3, r3, #10
 8008972:	b29a      	uxth	r2, r3
 8008974:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008978:	801a      	strh	r2, [r3, #0]
 800897a:	e04e      	b.n	8008a1a <USB_EPStartXfer+0x1a86>
 800897c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800898a:	f003 031f 	and.w	r3, r3, #31
 800898e:	2b00      	cmp	r3, #0
 8008990:	d104      	bne.n	800899c <USB_EPStartXfer+0x1a08>
 8008992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008996:	3b01      	subs	r3, #1
 8008998:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800899c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	029b      	lsls	r3, r3, #10
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089b4:	801a      	strh	r2, [r3, #0]
 80089b6:	e030      	b.n	8008a1a <USB_EPStartXfer+0x1a86>
 80089b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d128      	bne.n	8008a1a <USB_EPStartXfer+0x1a86>
 80089c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	461a      	mov	r2, r3
 80089e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ec:	4413      	add	r3, r2
 80089ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	011a      	lsls	r2, r3, #4
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	4413      	add	r3, r2
 8008a06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a18:	801a      	strh	r2, [r3, #0]
 8008a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d178      	bne.n	8008b2a <USB_EPStartXfer+0x1b96>
 8008a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	461a      	mov	r2, r3
 8008a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	011a      	lsls	r2, r3, #4
 8008a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a74:	4413      	add	r3, r2
 8008a76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d116      	bne.n	8008ab4 <USB_EPStartXfer+0x1b20>
 8008a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a98:	801a      	strh	r2, [r3, #0]
 8008a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ab0:	801a      	strh	r2, [r3, #0]
 8008ab2:	e067      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
 8008ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8008aba:	d818      	bhi.n	8008aee <USB_EPStartXfer+0x1b5a>
 8008abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac0:	085b      	lsrs	r3, r3, #1
 8008ac2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d004      	beq.n	8008adc <USB_EPStartXfer+0x1b48>
 8008ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008adc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	029b      	lsls	r3, r3, #10
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aea:	801a      	strh	r2, [r3, #0]
 8008aec:	e04a      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
 8008aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af2:	095b      	lsrs	r3, r3, #5
 8008af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afc:	f003 031f 	and.w	r3, r3, #31
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d104      	bne.n	8008b0e <USB_EPStartXfer+0x1b7a>
 8008b04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	029b      	lsls	r3, r3, #10
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e02c      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
 8008b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	785b      	ldrb	r3, [r3, #1]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d124      	bne.n	8008b84 <USB_EPStartXfer+0x1bf0>
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b50:	4413      	add	r3, r2
 8008b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	011a      	lsls	r2, r3, #4
 8008b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b68:	4413      	add	r3, r2
 8008b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	e001      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e03a      	b.n	8008bfa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008baa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008bb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bb6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008bbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bc2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	441a      	add	r2, r3
 8008be0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d020      	beq.n	8008c58 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2c:	81bb      	strh	r3, [r7, #12]
 8008c2e:	89bb      	ldrh	r3, [r7, #12]
 8008c30:	f083 0310 	eor.w	r3, r3, #16
 8008c34:	81bb      	strh	r3, [r7, #12]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	441a      	add	r2, r3
 8008c40:	89bb      	ldrh	r3, [r7, #12]
 8008c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8013      	strh	r3, [r2, #0]
 8008c56:	e01f      	b.n	8008c98 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6e:	81fb      	strh	r3, [r7, #14]
 8008c70:	89fb      	ldrh	r3, [r7, #14]
 8008c72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c76:	81fb      	strh	r3, [r7, #14]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	441a      	add	r2, r3
 8008c82:	89fb      	ldrh	r3, [r7, #14]
 8008c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bc80      	pop	{r7}
 8008ca2:	4770      	bx	lr

08008ca4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	7b1b      	ldrb	r3, [r3, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f040 809d 	bne.w	8008df2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d04c      	beq.n	8008d5a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	823b      	strh	r3, [r7, #16]
 8008cce:	8a3b      	ldrh	r3, [r7, #16]
 8008cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01b      	beq.n	8008d10 <USB_EPClearStall+0x6c>
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cee:	81fb      	strh	r3, [r7, #14]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	441a      	add	r2, r3
 8008cfa:	89fb      	ldrh	r3, [r7, #14]
 8008cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	78db      	ldrb	r3, [r3, #3]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d06c      	beq.n	8008df2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d2e:	81bb      	strh	r3, [r7, #12]
 8008d30:	89bb      	ldrh	r3, [r7, #12]
 8008d32:	f083 0320 	eor.w	r3, r3, #32
 8008d36:	81bb      	strh	r3, [r7, #12]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	441a      	add	r2, r3
 8008d42:	89bb      	ldrh	r3, [r7, #12]
 8008d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	8013      	strh	r3, [r2, #0]
 8008d58:	e04b      	b.n	8008df2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	82fb      	strh	r3, [r7, #22]
 8008d68:	8afb      	ldrh	r3, [r7, #22]
 8008d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d01b      	beq.n	8008daa <USB_EPClearStall+0x106>
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d88:	82bb      	strh	r3, [r7, #20]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	441a      	add	r2, r3
 8008d94:	8abb      	ldrh	r3, [r7, #20]
 8008d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc0:	827b      	strh	r3, [r7, #18]
 8008dc2:	8a7b      	ldrh	r3, [r7, #18]
 8008dc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008dc8:	827b      	strh	r3, [r7, #18]
 8008dca:	8a7b      	ldrh	r3, [r7, #18]
 8008dcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008dd0:	827b      	strh	r3, [r7, #18]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	441a      	add	r2, r3
 8008ddc:	8a7b      	ldrh	r3, [r7, #18]
 8008dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	371c      	adds	r7, #28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr

08008dfe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d103      	bne.n	8008e18 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2280      	movs	r2, #128	; 0x80
 8008e14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bc80      	pop	{r7}
 8008e22:	4770      	bx	lr

08008e24 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bc80      	pop	{r7}
 8008e36:	4770      	bx	lr

08008e38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc80      	pop	{r7}
 8008e4a:	4770      	bx	lr

08008e4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc80      	pop	{r7}
 8008e68:	4770      	bx	lr

08008e6a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bc80      	pop	{r7}
 8008e7e:	4770      	bx	lr

08008e80 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b08d      	sub	sp, #52	; 0x34
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	460b      	mov	r3, r1
 8008e90:	80fb      	strh	r3, [r7, #6]
 8008e92:	4613      	mov	r3, r2
 8008e94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e96:	88bb      	ldrh	r3, [r7, #4]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	085b      	lsrs	r3, r3, #1
 8008e9c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	005a      	lsls	r2, r3, #1
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eb8:	e01e      	b.n	8008ef8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	021b      	lsls	r3, r3, #8
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee8:	3302      	adds	r3, #2
 8008eea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	3301      	adds	r3, #1
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1dd      	bne.n	8008eba <USB_WritePMA+0x3a>
  }
}
 8008efe:	bf00      	nop
 8008f00:	bf00      	nop
 8008f02:	3734      	adds	r7, #52	; 0x34
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr

08008f0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b08b      	sub	sp, #44	; 0x2c
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	4611      	mov	r1, r2
 8008f16:	461a      	mov	r2, r3
 8008f18:	460b      	mov	r3, r1
 8008f1a:	80fb      	strh	r3, [r7, #6]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f20:	88bb      	ldrh	r3, [r7, #4]
 8008f22:	085b      	lsrs	r3, r3, #1
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f30:	88fb      	ldrh	r3, [r7, #6]
 8008f32:	005a      	lsls	r2, r3, #1
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f3c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
 8008f42:	e01b      	b.n	8008f7c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	3302      	adds	r3, #2
 8008f50:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	0a1b      	lsrs	r3, r3, #8
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	3302      	adds	r3, #2
 8008f74:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1e0      	bne.n	8008f44 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008f82:	88bb      	ldrh	r3, [r7, #4]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d007      	beq.n	8008f9e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	701a      	strb	r2, [r3, #0]
  }
}
 8008f9e:	bf00      	nop
 8008fa0:	372c      	adds	r7, #44	; 0x2c
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr

08008fa8 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008fb8:	2340      	movs	r3, #64	; 0x40
 8008fba:	2203      	movs	r2, #3
 8008fbc:	2181      	movs	r1, #129	; 0x81
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 fd47 	bl	800aa52 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008fca:	2340      	movs	r3, #64	; 0x40
 8008fcc:	2203      	movs	r2, #3
 8008fce:	2101      	movs	r1, #1
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 fd3e 	bl	800aa52 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008fde:	2054      	movs	r0, #84	; 0x54
 8008fe0:	f001 fe4c 	bl	800ac7c <USBD_static_malloc>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d102      	bne.n	8008ffc <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	73fb      	strb	r3, [r7, #15]
 8008ffa:	e012      	b.n	8009022 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009002:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	2340      	movs	r3, #64	; 0x40
 800901a:	2101      	movs	r1, #1
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 fe09 	bl	800ac34 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8009038:	2181      	movs	r1, #129	; 0x81
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 fd2f 	bl	800aa9e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8009046:	2101      	movs	r1, #1
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 fd28 	bl	800aa9e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00e      	beq.n	800907e <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009070:	4618      	mov	r0, r3
 8009072:	f001 fe0f 	bl	800ac94 <USBD_static_free>
    pdev->pClassData = NULL;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009098:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d051      	beq.n	800915a <USBD_CUSTOM_HID_Setup+0xd2>
 80090b6:	2b20      	cmp	r3, #32
 80090b8:	f040 80d8 	bne.w	800926c <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	785b      	ldrb	r3, [r3, #1]
 80090c0:	3b02      	subs	r3, #2
 80090c2:	2b09      	cmp	r3, #9
 80090c4:	d841      	bhi.n	800914a <USBD_CUSTOM_HID_Setup+0xc2>
 80090c6:	a201      	add	r2, pc, #4	; (adr r2, 80090cc <USBD_CUSTOM_HID_Setup+0x44>)
 80090c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090cc:	08009125 	.word	0x08009125
 80090d0:	08009103 	.word	0x08009103
 80090d4:	0800914b 	.word	0x0800914b
 80090d8:	0800914b 	.word	0x0800914b
 80090dc:	0800914b 	.word	0x0800914b
 80090e0:	0800914b 	.word	0x0800914b
 80090e4:	0800914b 	.word	0x0800914b
 80090e8:	08009135 	.word	0x08009135
 80090ec:	08009113 	.word	0x08009113
 80090f0:	080090f5 	.word	0x080090f5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	885b      	ldrh	r3, [r3, #2]
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	461a      	mov	r2, r3
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8009100:	e02a      	b.n	8009158 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	3340      	adds	r3, #64	; 0x40
 8009106:	2201      	movs	r2, #1
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f999 	bl	800a442 <USBD_CtlSendData>
          break;
 8009110:	e022      	b.n	8009158 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	885b      	ldrh	r3, [r3, #2]
 8009116:	0a1b      	lsrs	r3, r3, #8
 8009118:	b29b      	uxth	r3, r3
 800911a:	b2db      	uxtb	r3, r3
 800911c:	461a      	mov	r2, r3
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8009122:	e019      	b.n	8009158 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	3344      	adds	r3, #68	; 0x44
 8009128:	2201      	movs	r2, #1
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 f988 	bl	800a442 <USBD_CtlSendData>
          break;
 8009132:	e011      	b.n	8009158 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	2201      	movs	r2, #1
 8009138:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800913a:	6939      	ldr	r1, [r7, #16]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	88db      	ldrh	r3, [r3, #6]
 8009140:	461a      	mov	r2, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 f9ab 	bl	800a49e <USBD_CtlPrepareRx>
          break;
 8009148:	e006      	b.n	8009158 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f90e 	bl	800a36e <USBD_CtlError>
          ret = USBD_FAIL;
 8009152:	2302      	movs	r3, #2
 8009154:	75fb      	strb	r3, [r7, #23]
          break;
 8009156:	bf00      	nop
      }
      break;
 8009158:	e08f      	b.n	800927a <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	785b      	ldrb	r3, [r3, #1]
 800915e:	2b0b      	cmp	r3, #11
 8009160:	d87c      	bhi.n	800925c <USBD_CUSTOM_HID_Setup+0x1d4>
 8009162:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <USBD_CUSTOM_HID_Setup+0xe0>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	08009199 	.word	0x08009199
 800916c:	0800925d 	.word	0x0800925d
 8009170:	0800925d 	.word	0x0800925d
 8009174:	0800925d 	.word	0x0800925d
 8009178:	0800925d 	.word	0x0800925d
 800917c:	0800925d 	.word	0x0800925d
 8009180:	080091c1 	.word	0x080091c1
 8009184:	0800925d 	.word	0x0800925d
 8009188:	0800925d 	.word	0x0800925d
 800918c:	0800925d 	.word	0x0800925d
 8009190:	0800920f 	.word	0x0800920f
 8009194:	08009237 	.word	0x08009237
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d107      	bne.n	80091b2 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80091a2:	f107 030e 	add.w	r3, r7, #14
 80091a6:	2202      	movs	r2, #2
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f001 f949 	bl	800a442 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091b0:	e05b      	b.n	800926a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 f8da 	bl	800a36e <USBD_CtlError>
            ret = USBD_FAIL;
 80091ba:	2302      	movs	r3, #2
 80091bc:	75fb      	strb	r3, [r7, #23]
          break;
 80091be:	e054      	b.n	800926a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	885b      	ldrh	r3, [r3, #2]
 80091c4:	0a1b      	lsrs	r3, r3, #8
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b22      	cmp	r3, #34	; 0x22
 80091ca:	d10b      	bne.n	80091e4 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	88db      	ldrh	r3, [r3, #6]
 80091d0:	2b1d      	cmp	r3, #29
 80091d2:	bf28      	it	cs
 80091d4:	231d      	movcs	r3, #29
 80091d6:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	61bb      	str	r3, [r7, #24]
 80091e2:	e00d      	b.n	8009200 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	885b      	ldrh	r3, [r3, #2]
 80091e8:	0a1b      	lsrs	r3, r3, #8
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	2b21      	cmp	r3, #33	; 0x21
 80091ee:	d107      	bne.n	8009200 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80091f0:	4b24      	ldr	r3, [pc, #144]	; (8009284 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80091f2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	88db      	ldrh	r3, [r3, #6]
 80091f8:	2b09      	cmp	r3, #9
 80091fa:	bf28      	it	cs
 80091fc:	2309      	movcs	r3, #9
 80091fe:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8009200:	8bfb      	ldrh	r3, [r7, #30]
 8009202:	461a      	mov	r2, r3
 8009204:	69b9      	ldr	r1, [r7, #24]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 f91b 	bl	800a442 <USBD_CtlSendData>
          break;
 800920c:	e02d      	b.n	800926a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009214:	2b03      	cmp	r3, #3
 8009216:	d107      	bne.n	8009228 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3348      	adds	r3, #72	; 0x48
 800921c:	2201      	movs	r2, #1
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f001 f90e 	bl	800a442 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009226:	e020      	b.n	800926a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f001 f89f 	bl	800a36e <USBD_CtlError>
            ret = USBD_FAIL;
 8009230:	2302      	movs	r3, #2
 8009232:	75fb      	strb	r3, [r7, #23]
          break;
 8009234:	e019      	b.n	800926a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923c:	2b03      	cmp	r3, #3
 800923e:	d106      	bne.n	800924e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	885b      	ldrh	r3, [r3, #2]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	461a      	mov	r2, r3
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800924c:	e00d      	b.n	800926a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f001 f88c 	bl	800a36e <USBD_CtlError>
            ret = USBD_FAIL;
 8009256:	2302      	movs	r3, #2
 8009258:	75fb      	strb	r3, [r7, #23]
          break;
 800925a:	e006      	b.n	800926a <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f001 f885 	bl	800a36e <USBD_CtlError>
          ret = USBD_FAIL;
 8009264:	2302      	movs	r3, #2
 8009266:	75fb      	strb	r3, [r7, #23]
          break;
 8009268:	bf00      	nop
      }
      break;
 800926a:	e006      	b.n	800927a <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 f87d 	bl	800a36e <USBD_CtlError>
      ret = USBD_FAIL;
 8009274:	2302      	movs	r3, #2
 8009276:	75fb      	strb	r3, [r7, #23]
      break;
 8009278:	bf00      	nop
  }
  return ret;
 800927a:	7dfb      	ldrb	r3, [r7, #23]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3720      	adds	r7, #32
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	200000d4 	.word	0x200000d4

08009288 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d111      	bne.n	80092cc <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	2181      	movs	r1, #129	; 0x81
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f001 fc94 	bl	800abee <USBD_LL_Transmit>
 80092c6:	e001      	b.n	80092cc <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e000      	b.n	80092ce <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2229      	movs	r2, #41	; 0x29
 80092e4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80092e6:	4b03      	ldr	r3, [pc, #12]	; (80092f4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bc80      	pop	{r7}
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20000050 	.word	0x20000050

080092f8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2229      	movs	r2, #41	; 0x29
 8009304:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8009306:	4b03      	ldr	r3, [pc, #12]	; (8009314 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	2000007c 	.word	0x2000007c

08009318 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2229      	movs	r2, #41	; 0x29
 8009324:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8009326:	4b03      	ldr	r3, [pc, #12]	; (8009334 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	200000a8 	.word	0x200000a8

08009338 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936e:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4610      	mov	r0, r2
 800937c:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	2340      	movs	r3, #64	; 0x40
 8009382:	2101      	movs	r1, #1
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 fc55 	bl	800ac34 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a2:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d109      	bne.n	80093c0 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	4610      	mov	r0, r2
 80093b8:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	220a      	movs	r2, #10
 80093d8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80093da:	4b03      	ldr	r3, [pc, #12]	; (80093e8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bc80      	pop	{r7}
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	200000e0 	.word	0x200000e0

080093ec <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80093f6:	2302      	movs	r3, #2
 80093f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d005      	beq.n	800940c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr

08009418 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	4613      	mov	r3, r2
 8009424:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800942c:	2302      	movs	r3, #2
 800942e:	e01a      	b.n	8009466 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d003      	beq.n	8009450 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	79fa      	ldrb	r2, [r7, #7]
 800945c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f001 fa8c 	bl	800a97c <USBD_LL_Init>

  return USBD_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d006      	beq.n	8009490 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]
 800948e:	e001      	b.n	8009494 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009490:	2302      	movs	r3, #2
 8009492:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	bc80      	pop	{r7}
 800949e:	4770      	bx	lr

080094a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 fab7 	bl	800aa1c <USBD_LL_Start>

  return USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bc80      	pop	{r7}
 80094ca:	4770      	bx	lr

080094cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80094d8:	2302      	movs	r3, #2
 80094da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00c      	beq.n	8009500 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	4611      	mov	r1, r2
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	78fa      	ldrb	r2, [r7, #3]
 8009520:	4611      	mov	r1, r2
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	4798      	blx	r3

  return USBD_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fed7 	bl	800a2f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009556:	461a      	mov	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009564:	f003 031f 	and.w	r3, r3, #31
 8009568:	2b02      	cmp	r3, #2
 800956a:	d016      	beq.n	800959a <USBD_LL_SetupStage+0x6a>
 800956c:	2b02      	cmp	r3, #2
 800956e:	d81c      	bhi.n	80095aa <USBD_LL_SetupStage+0x7a>
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <USBD_LL_SetupStage+0x4a>
 8009574:	2b01      	cmp	r3, #1
 8009576:	d008      	beq.n	800958a <USBD_LL_SetupStage+0x5a>
 8009578:	e017      	b.n	80095aa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f9ca 	bl	800991c <USBD_StdDevReq>
      break;
 8009588:	e01a      	b.n	80095c0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fa2c 	bl	80099f0 <USBD_StdItfReq>
      break;
 8009598:	e012      	b.n	80095c0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fa6c 	bl	8009a80 <USBD_StdEPReq>
      break;
 80095a8:	e00a      	b.n	80095c0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 fa8f 	bl	800aadc <USBD_LL_StallEP>
      break;
 80095be:	bf00      	nop
  }

  return USBD_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b086      	sub	sp, #24
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	460b      	mov	r3, r1
 80095d4:	607a      	str	r2, [r7, #4]
 80095d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d14b      	bne.n	8009676 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d134      	bne.n	800965a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	68da      	ldr	r2, [r3, #12]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d919      	bls.n	8009630 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	1ad2      	subs	r2, r2, r3
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	68da      	ldr	r2, [r3, #12]
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009612:	429a      	cmp	r2, r3
 8009614:	d203      	bcs.n	800961e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800961a:	b29b      	uxth	r3, r3
 800961c:	e002      	b.n	8009624 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009622:	b29b      	uxth	r3, r3
 8009624:	461a      	mov	r2, r3
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 ff56 	bl	800a4da <USBD_CtlContinueRx>
 800962e:	e038      	b.n	80096a2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009642:	2b03      	cmp	r3, #3
 8009644:	d105      	bne.n	8009652 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f000 ff53 	bl	800a4fe <USBD_CtlSendStatus>
 8009658:	e023      	b.n	80096a2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009660:	2b05      	cmp	r3, #5
 8009662:	d11e      	bne.n	80096a2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800966c:	2100      	movs	r1, #0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f001 fa34 	bl	800aadc <USBD_LL_StallEP>
 8009674:	e015      	b.n	80096a2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00d      	beq.n	800969e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009688:	2b03      	cmp	r3, #3
 800968a:	d108      	bne.n	800969e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	7afa      	ldrb	r2, [r7, #11]
 8009696:	4611      	mov	r1, r2
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	4798      	blx	r3
 800969c:	e001      	b.n	80096a2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800969e:	2302      	movs	r3, #2
 80096a0:	e000      	b.n	80096a4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	460b      	mov	r3, r1
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096ba:	7afb      	ldrb	r3, [r7, #11]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d17f      	bne.n	80097c0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	3314      	adds	r3, #20
 80096c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d15c      	bne.n	800978a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	68da      	ldr	r2, [r3, #12]
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d915      	bls.n	8009708 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	68da      	ldr	r2, [r3, #12]
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	1ad2      	subs	r2, r2, r3
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	461a      	mov	r2, r3
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 fec0 	bl	800a47a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096fa:	2300      	movs	r3, #0
 80096fc:	2200      	movs	r2, #0
 80096fe:	2100      	movs	r1, #0
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f001 fa97 	bl	800ac34 <USBD_LL_PrepareReceive>
 8009706:	e04e      	b.n	80097a6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	6912      	ldr	r2, [r2, #16]
 8009710:	fbb3 f1f2 	udiv	r1, r3, r2
 8009714:	fb01 f202 	mul.w	r2, r1, r2
 8009718:	1a9b      	subs	r3, r3, r2
 800971a:	2b00      	cmp	r3, #0
 800971c:	d11c      	bne.n	8009758 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	689a      	ldr	r2, [r3, #8]
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009726:	429a      	cmp	r2, r3
 8009728:	d316      	bcc.n	8009758 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	689a      	ldr	r2, [r3, #8]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009734:	429a      	cmp	r2, r3
 8009736:	d20f      	bcs.n	8009758 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009738:	2200      	movs	r2, #0
 800973a:	2100      	movs	r1, #0
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 fe9c 	bl	800a47a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800974a:	2300      	movs	r3, #0
 800974c:	2200      	movs	r2, #0
 800974e:	2100      	movs	r1, #0
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f001 fa6f 	bl	800ac34 <USBD_LL_PrepareReceive>
 8009756:	e026      	b.n	80097a6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00a      	beq.n	800977a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800976a:	2b03      	cmp	r3, #3
 800976c:	d105      	bne.n	800977a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800977a:	2180      	movs	r1, #128	; 0x80
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f001 f9ad 	bl	800aadc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 fece 	bl	800a524 <USBD_CtlReceiveStatus>
 8009788:	e00d      	b.n	80097a6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009790:	2b04      	cmp	r3, #4
 8009792:	d004      	beq.n	800979e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800979a:	2b00      	cmp	r3, #0
 800979c:	d103      	bne.n	80097a6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800979e:	2180      	movs	r1, #128	; 0x80
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f001 f99b 	bl	800aadc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d11d      	bne.n	80097ec <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f7ff fe81 	bl	80094b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80097be:	e015      	b.n	80097ec <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00d      	beq.n	80097e8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d108      	bne.n	80097e8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	7afa      	ldrb	r2, [r7, #11]
 80097e0:	4611      	mov	r1, r2
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	4798      	blx	r3
 80097e6:	e001      	b.n	80097ec <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80097e8:	2302      	movs	r3, #2
 80097ea:	e000      	b.n	80097ee <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3718      	adds	r7, #24
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097fe:	2340      	movs	r3, #64	; 0x40
 8009800:	2200      	movs	r2, #0
 8009802:	2100      	movs	r1, #0
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 f924 	bl	800aa52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2240      	movs	r2, #64	; 0x40
 8009816:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800981a:	2340      	movs	r3, #64	; 0x40
 800981c:	2200      	movs	r2, #0
 800981e:	2180      	movs	r1, #128	; 0x80
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f001 f916 	bl	800aa52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2240      	movs	r2, #64	; 0x40
 8009830:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	6852      	ldr	r2, [r2, #4]
 8009866:	b2d2      	uxtb	r2, r2
 8009868:	4611      	mov	r1, r2
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	4798      	blx	r3
  }

  return USBD_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	bc80      	pop	{r7}
 8009894:	4770      	bx	lr

08009896 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2204      	movs	r2, #4
 80098ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bc80      	pop	{r7}
 80098bc:	4770      	bx	lr

080098be <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	d105      	bne.n	80098dc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bc80      	pop	{r7}
 80098e6:	4770      	bx	lr

080098e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d10b      	bne.n	8009912 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009932:	2b40      	cmp	r3, #64	; 0x40
 8009934:	d005      	beq.n	8009942 <USBD_StdDevReq+0x26>
 8009936:	2b40      	cmp	r3, #64	; 0x40
 8009938:	d84f      	bhi.n	80099da <USBD_StdDevReq+0xbe>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d009      	beq.n	8009952 <USBD_StdDevReq+0x36>
 800993e:	2b20      	cmp	r3, #32
 8009940:	d14b      	bne.n	80099da <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	4798      	blx	r3
      break;
 8009950:	e048      	b.n	80099e4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	785b      	ldrb	r3, [r3, #1]
 8009956:	2b09      	cmp	r3, #9
 8009958:	d839      	bhi.n	80099ce <USBD_StdDevReq+0xb2>
 800995a:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <USBD_StdDevReq+0x44>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	080099b1 	.word	0x080099b1
 8009964:	080099c5 	.word	0x080099c5
 8009968:	080099cf 	.word	0x080099cf
 800996c:	080099bb 	.word	0x080099bb
 8009970:	080099cf 	.word	0x080099cf
 8009974:	08009993 	.word	0x08009993
 8009978:	08009989 	.word	0x08009989
 800997c:	080099cf 	.word	0x080099cf
 8009980:	080099a7 	.word	0x080099a7
 8009984:	0800999d 	.word	0x0800999d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f9dc 	bl	8009d48 <USBD_GetDescriptor>
          break;
 8009990:	e022      	b.n	80099d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fb3f 	bl	800a018 <USBD_SetAddress>
          break;
 800999a:	e01d      	b.n	80099d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fb7e 	bl	800a0a0 <USBD_SetConfig>
          break;
 80099a4:	e018      	b.n	80099d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fc07 	bl	800a1bc <USBD_GetConfig>
          break;
 80099ae:	e013      	b.n	80099d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fc37 	bl	800a226 <USBD_GetStatus>
          break;
 80099b8:	e00e      	b.n	80099d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fc65 	bl	800a28c <USBD_SetFeature>
          break;
 80099c2:	e009      	b.n	80099d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fc74 	bl	800a2b4 <USBD_ClrFeature>
          break;
 80099cc:	e004      	b.n	80099d8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fccc 	bl	800a36e <USBD_CtlError>
          break;
 80099d6:	bf00      	nop
      }
      break;
 80099d8:	e004      	b.n	80099e4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fcc6 	bl	800a36e <USBD_CtlError>
      break;
 80099e2:	bf00      	nop
  }

  return ret;
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop

080099f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a06:	2b40      	cmp	r3, #64	; 0x40
 8009a08:	d005      	beq.n	8009a16 <USBD_StdItfReq+0x26>
 8009a0a:	2b40      	cmp	r3, #64	; 0x40
 8009a0c:	d82e      	bhi.n	8009a6c <USBD_StdItfReq+0x7c>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <USBD_StdItfReq+0x26>
 8009a12:	2b20      	cmp	r3, #32
 8009a14:	d12a      	bne.n	8009a6c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d81d      	bhi.n	8009a5e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	889b      	ldrh	r3, [r3, #4]
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d813      	bhi.n	8009a54 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	4798      	blx	r3
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	88db      	ldrh	r3, [r3, #6]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d110      	bne.n	8009a68 <USBD_StdItfReq+0x78>
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10d      	bne.n	8009a68 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fd56 	bl	800a4fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a52:	e009      	b.n	8009a68 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fc89 	bl	800a36e <USBD_CtlError>
          break;
 8009a5c:	e004      	b.n	8009a68 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fc84 	bl	800a36e <USBD_CtlError>
          break;
 8009a66:	e000      	b.n	8009a6a <USBD_StdItfReq+0x7a>
          break;
 8009a68:	bf00      	nop
      }
      break;
 8009a6a:	e004      	b.n	8009a76 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fc7d 	bl	800a36e <USBD_CtlError>
      break;
 8009a74:	bf00      	nop
  }

  return USBD_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	889b      	ldrh	r3, [r3, #4]
 8009a92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a9c:	2b40      	cmp	r3, #64	; 0x40
 8009a9e:	d007      	beq.n	8009ab0 <USBD_StdEPReq+0x30>
 8009aa0:	2b40      	cmp	r3, #64	; 0x40
 8009aa2:	f200 8146 	bhi.w	8009d32 <USBD_StdEPReq+0x2b2>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00a      	beq.n	8009ac0 <USBD_StdEPReq+0x40>
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	f040 8141 	bne.w	8009d32 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	4798      	blx	r3
      break;
 8009abe:	e13d      	b.n	8009d3c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ac8:	2b20      	cmp	r3, #32
 8009aca:	d10a      	bne.n	8009ae2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	4798      	blx	r3
 8009ada:	4603      	mov	r3, r0
 8009adc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
 8009ae0:	e12d      	b.n	8009d3e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	785b      	ldrb	r3, [r3, #1]
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d007      	beq.n	8009afa <USBD_StdEPReq+0x7a>
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	f300 811b 	bgt.w	8009d26 <USBD_StdEPReq+0x2a6>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d072      	beq.n	8009bda <USBD_StdEPReq+0x15a>
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d03a      	beq.n	8009b6e <USBD_StdEPReq+0xee>
 8009af8:	e115      	b.n	8009d26 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d002      	beq.n	8009b0a <USBD_StdEPReq+0x8a>
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d015      	beq.n	8009b34 <USBD_StdEPReq+0xb4>
 8009b08:	e02b      	b.n	8009b62 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00c      	beq.n	8009b2a <USBD_StdEPReq+0xaa>
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	2b80      	cmp	r3, #128	; 0x80
 8009b14:	d009      	beq.n	8009b2a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 ffde 	bl	800aadc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b20:	2180      	movs	r1, #128	; 0x80
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 ffda 	bl	800aadc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b28:	e020      	b.n	8009b6c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fc1e 	bl	800a36e <USBD_CtlError>
              break;
 8009b32:	e01b      	b.n	8009b6c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	885b      	ldrh	r3, [r3, #2]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10e      	bne.n	8009b5a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <USBD_StdEPReq+0xda>
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	2b80      	cmp	r3, #128	; 0x80
 8009b46:	d008      	beq.n	8009b5a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	88db      	ldrh	r3, [r3, #6]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d104      	bne.n	8009b5a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 ffc1 	bl	800aadc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fccf 	bl	800a4fe <USBD_CtlSendStatus>

              break;
 8009b60:	e004      	b.n	8009b6c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fc02 	bl	800a36e <USBD_CtlError>
              break;
 8009b6a:	bf00      	nop
          }
          break;
 8009b6c:	e0e0      	b.n	8009d30 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d002      	beq.n	8009b7e <USBD_StdEPReq+0xfe>
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d015      	beq.n	8009ba8 <USBD_StdEPReq+0x128>
 8009b7c:	e026      	b.n	8009bcc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00c      	beq.n	8009b9e <USBD_StdEPReq+0x11e>
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	2b80      	cmp	r3, #128	; 0x80
 8009b88:	d009      	beq.n	8009b9e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 ffa4 	bl	800aadc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b94:	2180      	movs	r1, #128	; 0x80
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 ffa0 	bl	800aadc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b9c:	e01c      	b.n	8009bd8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fbe4 	bl	800a36e <USBD_CtlError>
              break;
 8009ba6:	e017      	b.n	8009bd8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	885b      	ldrh	r3, [r3, #2]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d112      	bne.n	8009bd6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009bb0:	7bbb      	ldrb	r3, [r7, #14]
 8009bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d004      	beq.n	8009bc4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 ffab 	bl	800ab1a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fc9a 	bl	800a4fe <USBD_CtlSendStatus>
              }
              break;
 8009bca:	e004      	b.n	8009bd6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fbcd 	bl	800a36e <USBD_CtlError>
              break;
 8009bd4:	e000      	b.n	8009bd8 <USBD_StdEPReq+0x158>
              break;
 8009bd6:	bf00      	nop
          }
          break;
 8009bd8:	e0aa      	b.n	8009d30 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d002      	beq.n	8009bea <USBD_StdEPReq+0x16a>
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d032      	beq.n	8009c4e <USBD_StdEPReq+0x1ce>
 8009be8:	e097      	b.n	8009d1a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d007      	beq.n	8009c00 <USBD_StdEPReq+0x180>
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b80      	cmp	r3, #128	; 0x80
 8009bf4:	d004      	beq.n	8009c00 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fbb8 	bl	800a36e <USBD_CtlError>
                break;
 8009bfe:	e091      	b.n	8009d24 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	da0b      	bge.n	8009c20 <USBD_StdEPReq+0x1a0>
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c0e:	4613      	mov	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	3310      	adds	r3, #16
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	e00b      	b.n	8009c38 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	4413      	add	r3, r2
 8009c36:	3304      	adds	r3, #4
 8009c38:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2202      	movs	r2, #2
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fbfb 	bl	800a442 <USBD_CtlSendData>
              break;
 8009c4c:	e06a      	b.n	8009d24 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	da11      	bge.n	8009c7a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c56:	7bbb      	ldrb	r3, [r7, #14]
 8009c58:	f003 020f 	and.w	r2, r3, #15
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	440b      	add	r3, r1
 8009c68:	3318      	adds	r3, #24
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d117      	bne.n	8009ca0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fb7b 	bl	800a36e <USBD_CtlError>
                  break;
 8009c78:	e054      	b.n	8009d24 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	f003 020f 	and.w	r2, r3, #15
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d104      	bne.n	8009ca0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fb68 	bl	800a36e <USBD_CtlError>
                  break;
 8009c9e:	e041      	b.n	8009d24 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	da0b      	bge.n	8009cc0 <USBD_StdEPReq+0x240>
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
 8009caa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	3310      	adds	r3, #16
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	4413      	add	r3, r2
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	e00b      	b.n	8009cd8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <USBD_StdEPReq+0x266>
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	2b80      	cmp	r3, #128	; 0x80
 8009ce4:	d103      	bne.n	8009cee <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	e00e      	b.n	8009d0c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 ff30 	bl	800ab58 <USBD_LL_IsStallEP>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2201      	movs	r2, #1
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	e002      	b.n	8009d0c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fb95 	bl	800a442 <USBD_CtlSendData>
              break;
 8009d18:	e004      	b.n	8009d24 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fb26 	bl	800a36e <USBD_CtlError>
              break;
 8009d22:	bf00      	nop
          }
          break;
 8009d24:	e004      	b.n	8009d30 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fb20 	bl	800a36e <USBD_CtlError>
          break;
 8009d2e:	bf00      	nop
      }
      break;
 8009d30:	e004      	b.n	8009d3c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fb1a 	bl	800a36e <USBD_CtlError>
      break;
 8009d3a:	bf00      	nop
  }

  return ret;
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
	...

08009d48 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	885b      	ldrh	r3, [r3, #2]
 8009d62:	0a1b      	lsrs	r3, r3, #8
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	3b01      	subs	r3, #1
 8009d68:	2b06      	cmp	r3, #6
 8009d6a:	f200 8128 	bhi.w	8009fbe <USBD_GetDescriptor+0x276>
 8009d6e:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <USBD_GetDescriptor+0x2c>)
 8009d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d74:	08009d91 	.word	0x08009d91
 8009d78:	08009da9 	.word	0x08009da9
 8009d7c:	08009de9 	.word	0x08009de9
 8009d80:	08009fbf 	.word	0x08009fbf
 8009d84:	08009fbf 	.word	0x08009fbf
 8009d88:	08009f5f 	.word	0x08009f5f
 8009d8c:	08009f8b 	.word	0x08009f8b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	7c12      	ldrb	r2, [r2, #16]
 8009d9c:	f107 0108 	add.w	r1, r7, #8
 8009da0:	4610      	mov	r0, r2
 8009da2:	4798      	blx	r3
 8009da4:	60f8      	str	r0, [r7, #12]
      break;
 8009da6:	e112      	b.n	8009fce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	7c1b      	ldrb	r3, [r3, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10d      	bne.n	8009dcc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db8:	f107 0208 	add.w	r2, r7, #8
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4798      	blx	r3
 8009dc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dca:	e100      	b.n	8009fce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	f107 0208 	add.w	r2, r7, #8
 8009dd8:	4610      	mov	r0, r2
 8009dda:	4798      	blx	r3
 8009ddc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3301      	adds	r3, #1
 8009de2:	2202      	movs	r2, #2
 8009de4:	701a      	strb	r2, [r3, #0]
      break;
 8009de6:	e0f2      	b.n	8009fce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	885b      	ldrh	r3, [r3, #2]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b05      	cmp	r3, #5
 8009df0:	f200 80ac 	bhi.w	8009f4c <USBD_GetDescriptor+0x204>
 8009df4:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <USBD_GetDescriptor+0xb4>)
 8009df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfa:	bf00      	nop
 8009dfc:	08009e15 	.word	0x08009e15
 8009e00:	08009e49 	.word	0x08009e49
 8009e04:	08009e7d 	.word	0x08009e7d
 8009e08:	08009eb1 	.word	0x08009eb1
 8009e0c:	08009ee5 	.word	0x08009ee5
 8009e10:	08009f19 	.word	0x08009f19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00b      	beq.n	8009e38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	7c12      	ldrb	r2, [r2, #16]
 8009e2c:	f107 0108 	add.w	r1, r7, #8
 8009e30:	4610      	mov	r0, r2
 8009e32:	4798      	blx	r3
 8009e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e36:	e091      	b.n	8009f5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fa97 	bl	800a36e <USBD_CtlError>
            err++;
 8009e40:	7afb      	ldrb	r3, [r7, #11]
 8009e42:	3301      	adds	r3, #1
 8009e44:	72fb      	strb	r3, [r7, #11]
          break;
 8009e46:	e089      	b.n	8009f5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	7c12      	ldrb	r2, [r2, #16]
 8009e60:	f107 0108 	add.w	r1, r7, #8
 8009e64:	4610      	mov	r0, r2
 8009e66:	4798      	blx	r3
 8009e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e6a:	e077      	b.n	8009f5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fa7d 	bl	800a36e <USBD_CtlError>
            err++;
 8009e74:	7afb      	ldrb	r3, [r7, #11]
 8009e76:	3301      	adds	r3, #1
 8009e78:	72fb      	strb	r3, [r7, #11]
          break;
 8009e7a:	e06f      	b.n	8009f5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00b      	beq.n	8009ea0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	7c12      	ldrb	r2, [r2, #16]
 8009e94:	f107 0108 	add.w	r1, r7, #8
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4798      	blx	r3
 8009e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e9e:	e05d      	b.n	8009f5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fa63 	bl	800a36e <USBD_CtlError>
            err++;
 8009ea8:	7afb      	ldrb	r3, [r7, #11]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	72fb      	strb	r3, [r7, #11]
          break;
 8009eae:	e055      	b.n	8009f5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	7c12      	ldrb	r2, [r2, #16]
 8009ec8:	f107 0108 	add.w	r1, r7, #8
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4798      	blx	r3
 8009ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ed2:	e043      	b.n	8009f5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fa49 	bl	800a36e <USBD_CtlError>
            err++;
 8009edc:	7afb      	ldrb	r3, [r7, #11]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ee2:	e03b      	b.n	8009f5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00b      	beq.n	8009f08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	7c12      	ldrb	r2, [r2, #16]
 8009efc:	f107 0108 	add.w	r1, r7, #8
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
 8009f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f06:	e029      	b.n	8009f5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fa2f 	bl	800a36e <USBD_CtlError>
            err++;
 8009f10:	7afb      	ldrb	r3, [r7, #11]
 8009f12:	3301      	adds	r3, #1
 8009f14:	72fb      	strb	r3, [r7, #11]
          break;
 8009f16:	e021      	b.n	8009f5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00b      	beq.n	8009f3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	7c12      	ldrb	r2, [r2, #16]
 8009f30:	f107 0108 	add.w	r1, r7, #8
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
 8009f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f3a:	e00f      	b.n	8009f5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa15 	bl	800a36e <USBD_CtlError>
            err++;
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	3301      	adds	r3, #1
 8009f48:	72fb      	strb	r3, [r7, #11]
          break;
 8009f4a:	e007      	b.n	8009f5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa0d 	bl	800a36e <USBD_CtlError>
          err++;
 8009f54:	7afb      	ldrb	r3, [r7, #11]
 8009f56:	3301      	adds	r3, #1
 8009f58:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f5a:	e038      	b.n	8009fce <USBD_GetDescriptor+0x286>
 8009f5c:	e037      	b.n	8009fce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	7c1b      	ldrb	r3, [r3, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d109      	bne.n	8009f7a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6e:	f107 0208 	add.w	r2, r7, #8
 8009f72:	4610      	mov	r0, r2
 8009f74:	4798      	blx	r3
 8009f76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f78:	e029      	b.n	8009fce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f9f6 	bl	800a36e <USBD_CtlError>
        err++;
 8009f82:	7afb      	ldrb	r3, [r7, #11]
 8009f84:	3301      	adds	r3, #1
 8009f86:	72fb      	strb	r3, [r7, #11]
      break;
 8009f88:	e021      	b.n	8009fce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	7c1b      	ldrb	r3, [r3, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10d      	bne.n	8009fae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9a:	f107 0208 	add.w	r2, r7, #8
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	4798      	blx	r3
 8009fa2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	2207      	movs	r2, #7
 8009faa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fac:	e00f      	b.n	8009fce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f9dc 	bl	800a36e <USBD_CtlError>
        err++;
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	72fb      	strb	r3, [r7, #11]
      break;
 8009fbc:	e007      	b.n	8009fce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f9d4 	bl	800a36e <USBD_CtlError>
      err++;
 8009fc6:	7afb      	ldrb	r3, [r7, #11]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	72fb      	strb	r3, [r7, #11]
      break;
 8009fcc:	bf00      	nop
  }

  if (err != 0U)
 8009fce:	7afb      	ldrb	r3, [r7, #11]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d11c      	bne.n	800a00e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009fd4:	893b      	ldrh	r3, [r7, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d011      	beq.n	8009ffe <USBD_GetDescriptor+0x2b6>
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	88db      	ldrh	r3, [r3, #6]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00d      	beq.n	8009ffe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	88da      	ldrh	r2, [r3, #6]
 8009fe6:	893b      	ldrh	r3, [r7, #8]
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	bf28      	it	cs
 8009fec:	4613      	movcs	r3, r2
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ff2:	893b      	ldrh	r3, [r7, #8]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	68f9      	ldr	r1, [r7, #12]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fa22 	bl	800a442 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	88db      	ldrh	r3, [r3, #6]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d104      	bne.n	800a010 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fa79 	bl	800a4fe <USBD_CtlSendStatus>
 800a00c:	e000      	b.n	800a010 <USBD_GetDescriptor+0x2c8>
    return;
 800a00e:	bf00      	nop
    }
  }
}
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop

0800a018 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	889b      	ldrh	r3, [r3, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d130      	bne.n	800a08c <USBD_SetAddress+0x74>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	88db      	ldrh	r3, [r3, #6]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d12c      	bne.n	800a08c <USBD_SetAddress+0x74>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	885b      	ldrh	r3, [r3, #2]
 800a036:	2b7f      	cmp	r3, #127	; 0x7f
 800a038:	d828      	bhi.n	800a08c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	885b      	ldrh	r3, [r3, #2]
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a044:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d104      	bne.n	800a05a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f98b 	bl	800a36e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a058:	e01d      	b.n	800a096 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	7bfa      	ldrb	r2, [r7, #15]
 800a05e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	4619      	mov	r1, r3
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fda2 	bl	800abb0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fa46 	bl	800a4fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a072:	7bfb      	ldrb	r3, [r7, #15]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a080:	e009      	b.n	800a096 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a08a:	e004      	b.n	800a096 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f96d 	bl	800a36e <USBD_CtlError>
  }
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	885b      	ldrh	r3, [r3, #2]
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	4b41      	ldr	r3, [pc, #260]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a0b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0b4:	4b40      	ldr	r3, [pc, #256]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d904      	bls.n	800a0c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f955 	bl	800a36e <USBD_CtlError>
 800a0c4:	e075      	b.n	800a1b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d002      	beq.n	800a0d6 <USBD_SetConfig+0x36>
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d023      	beq.n	800a11c <USBD_SetConfig+0x7c>
 800a0d4:	e062      	b.n	800a19c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a0d6:	4b38      	ldr	r3, [pc, #224]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d01a      	beq.n	800a114 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a0de:	4b36      	ldr	r3, [pc, #216]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0f0:	4b31      	ldr	r3, [pc, #196]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff f9e8 	bl	80094cc <USBD_SetClassConfig>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d104      	bne.n	800a10c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f932 	bl	800a36e <USBD_CtlError>
            return;
 800a10a:	e052      	b.n	800a1b2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f9f6 	bl	800a4fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a112:	e04e      	b.n	800a1b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f9f2 	bl	800a4fe <USBD_CtlSendStatus>
        break;
 800a11a:	e04a      	b.n	800a1b2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a11c:	4b26      	ldr	r3, [pc, #152]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d112      	bne.n	800a14a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a12c:	4b22      	ldr	r3, [pc, #136]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	461a      	mov	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a136:	4b20      	ldr	r3, [pc, #128]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7ff f9e4 	bl	800950a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f9db 	bl	800a4fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a148:	e033      	b.n	800a1b2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a14a:	4b1b      	ldr	r3, [pc, #108]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	429a      	cmp	r2, r3
 800a156:	d01d      	beq.n	800a194 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff f9d2 	bl	800950a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a166:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a170:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff f9a8 	bl	80094cc <USBD_SetClassConfig>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d104      	bne.n	800a18c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f8f2 	bl	800a36e <USBD_CtlError>
            return;
 800a18a:	e012      	b.n	800a1b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f9b6 	bl	800a4fe <USBD_CtlSendStatus>
        break;
 800a192:	e00e      	b.n	800a1b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f9b2 	bl	800a4fe <USBD_CtlSendStatus>
        break;
 800a19a:	e00a      	b.n	800a1b2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f8e5 	bl	800a36e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a1a4:	4b04      	ldr	r3, [pc, #16]	; (800a1b8 <USBD_SetConfig+0x118>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7ff f9ad 	bl	800950a <USBD_ClrClassConfig>
        break;
 800a1b0:	bf00      	nop
    }
  }
}
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	200003a0 	.word	0x200003a0

0800a1bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	88db      	ldrh	r3, [r3, #6]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d004      	beq.n	800a1d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f8cc 	bl	800a36e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1d6:	e022      	b.n	800a21e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	dc02      	bgt.n	800a1e8 <USBD_GetConfig+0x2c>
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	dc03      	bgt.n	800a1ee <USBD_GetConfig+0x32>
 800a1e6:	e015      	b.n	800a214 <USBD_GetConfig+0x58>
 800a1e8:	2b03      	cmp	r3, #3
 800a1ea:	d00b      	beq.n	800a204 <USBD_GetConfig+0x48>
 800a1ec:	e012      	b.n	800a214 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f920 	bl	800a442 <USBD_CtlSendData>
        break;
 800a202:	e00c      	b.n	800a21e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	3304      	adds	r3, #4
 800a208:	2201      	movs	r2, #1
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f918 	bl	800a442 <USBD_CtlSendData>
        break;
 800a212:	e004      	b.n	800a21e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f8a9 	bl	800a36e <USBD_CtlError>
        break;
 800a21c:	bf00      	nop
}
 800a21e:	bf00      	nop
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a236:	3b01      	subs	r3, #1
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d81e      	bhi.n	800a27a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	88db      	ldrh	r3, [r3, #6]
 800a240:	2b02      	cmp	r3, #2
 800a242:	d004      	beq.n	800a24e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f891 	bl	800a36e <USBD_CtlError>
        break;
 800a24c:	e01a      	b.n	800a284 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d005      	beq.n	800a26a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f043 0202 	orr.w	r2, r3, #2
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	330c      	adds	r3, #12
 800a26e:	2202      	movs	r2, #2
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f8e5 	bl	800a442 <USBD_CtlSendData>
      break;
 800a278:	e004      	b.n	800a284 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f876 	bl	800a36e <USBD_CtlError>
      break;
 800a282:	bf00      	nop
  }
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	885b      	ldrh	r3, [r3, #2]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d106      	bne.n	800a2ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f929 	bl	800a4fe <USBD_CtlSendStatus>
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d80b      	bhi.n	800a2e2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	885b      	ldrh	r3, [r3, #2]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d10c      	bne.n	800a2ec <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f90f 	bl	800a4fe <USBD_CtlSendStatus>
      }
      break;
 800a2e0:	e004      	b.n	800a2ec <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f842 	bl	800a36e <USBD_CtlError>
      break;
 800a2ea:	e000      	b.n	800a2ee <USBD_ClrFeature+0x3a>
      break;
 800a2ec:	bf00      	nop
  }
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781a      	ldrb	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	785a      	ldrb	r2, [r3, #1]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	3302      	adds	r3, #2
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	b29a      	uxth	r2, r3
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	3303      	adds	r3, #3
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	021b      	lsls	r3, r3, #8
 800a322:	b29b      	uxth	r3, r3
 800a324:	4413      	add	r3, r2
 800a326:	b29a      	uxth	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	3304      	adds	r3, #4
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	b29a      	uxth	r2, r3
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	3305      	adds	r3, #5
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	b29b      	uxth	r3, r3
 800a340:	4413      	add	r3, r2
 800a342:	b29a      	uxth	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	3306      	adds	r3, #6
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	b29a      	uxth	r2, r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	3307      	adds	r3, #7
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	b29b      	uxth	r3, r3
 800a358:	021b      	lsls	r3, r3, #8
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	4413      	add	r3, r2
 800a35e:	b29a      	uxth	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	80da      	strh	r2, [r3, #6]

}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	bc80      	pop	{r7}
 800a36c:	4770      	bx	lr

0800a36e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b082      	sub	sp, #8
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a378:	2180      	movs	r1, #128	; 0x80
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fbae 	bl	800aadc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a380:	2100      	movs	r1, #0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fbaa 	bl	800aadc <USBD_LL_StallEP>
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d032      	beq.n	800a40c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f000 f834 	bl	800a414 <USBD_GetLen>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	1c5a      	adds	r2, r3, #1
 800a3be:	75fa      	strb	r2, [r7, #23]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	7812      	ldrb	r2, [r2, #0]
 800a3ca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a3cc:	7dfb      	ldrb	r3, [r7, #23]
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	75fa      	strb	r2, [r7, #23]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	2203      	movs	r2, #3
 800a3da:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a3dc:	e012      	b.n	800a404 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	60fa      	str	r2, [r7, #12]
 800a3e4:	7dfa      	ldrb	r2, [r7, #23]
 800a3e6:	1c51      	adds	r1, r2, #1
 800a3e8:	75f9      	strb	r1, [r7, #23]
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	440a      	add	r2, r1
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	75fa      	strb	r2, [r7, #23]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	4413      	add	r3, r2
 800a400:	2200      	movs	r2, #0
 800a402:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e8      	bne.n	800a3de <USBD_GetString+0x4e>
    }
  }
}
 800a40c:	bf00      	nop
 800a40e:	3718      	adds	r7, #24
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a420:	e005      	b.n	800a42e <USBD_GetLen+0x1a>
  {
    len++;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	3301      	adds	r3, #1
 800a426:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3301      	adds	r3, #1
 800a42c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1f5      	bne.n	800a422 <USBD_GetLen+0xe>
  }

  return len;
 800a436:	7bfb      	ldrb	r3, [r7, #15]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr

0800a442 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b084      	sub	sp, #16
 800a446:	af00      	add	r7, sp, #0
 800a448:	60f8      	str	r0, [r7, #12]
 800a44a:	60b9      	str	r1, [r7, #8]
 800a44c:	4613      	mov	r3, r2
 800a44e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2202      	movs	r2, #2
 800a454:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a458:	88fa      	ldrh	r2, [r7, #6]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a45e:	88fa      	ldrh	r2, [r7, #6]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a464:	88fb      	ldrh	r3, [r7, #6]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	2100      	movs	r1, #0
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f000 fbbf 	bl	800abee <USBD_LL_Transmit>

  return USBD_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	60f8      	str	r0, [r7, #12]
 800a482:	60b9      	str	r1, [r7, #8]
 800a484:	4613      	mov	r3, r2
 800a486:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a488:	88fb      	ldrh	r3, [r7, #6]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	2100      	movs	r1, #0
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fbad 	bl	800abee <USBD_LL_Transmit>

  return USBD_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2203      	movs	r2, #3
 800a4b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4b4:	88fa      	ldrh	r2, [r7, #6]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a4bc:	88fa      	ldrh	r2, [r7, #6]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4c4:	88fb      	ldrh	r3, [r7, #6]
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 fbb2 	bl	800ac34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4e8:	88fb      	ldrh	r3, [r7, #6]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 fba0 	bl	800ac34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2204      	movs	r2, #4
 800a50a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a50e:	2300      	movs	r3, #0
 800a510:	2200      	movs	r2, #0
 800a512:	2100      	movs	r1, #0
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fb6a 	bl	800abee <USBD_LL_Transmit>

  return USBD_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2205      	movs	r2, #5
 800a530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a534:	2300      	movs	r3, #0
 800a536:	2200      	movs	r2, #0
 800a538:	2100      	movs	r1, #0
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fb7a 	bl	800ac34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a550:	2200      	movs	r2, #0
 800a552:	4912      	ldr	r1, [pc, #72]	; (800a59c <MX_USB_DEVICE_Init+0x50>)
 800a554:	4812      	ldr	r0, [pc, #72]	; (800a5a0 <MX_USB_DEVICE_Init+0x54>)
 800a556:	f7fe ff5f 	bl	8009418 <USBD_Init>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a560:	f7f7 f896 	bl	8001690 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a564:	490f      	ldr	r1, [pc, #60]	; (800a5a4 <MX_USB_DEVICE_Init+0x58>)
 800a566:	480e      	ldr	r0, [pc, #56]	; (800a5a0 <MX_USB_DEVICE_Init+0x54>)
 800a568:	f7fe ff81 	bl	800946e <USBD_RegisterClass>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a572:	f7f7 f88d 	bl	8001690 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a576:	490c      	ldr	r1, [pc, #48]	; (800a5a8 <MX_USB_DEVICE_Init+0x5c>)
 800a578:	4809      	ldr	r0, [pc, #36]	; (800a5a0 <MX_USB_DEVICE_Init+0x54>)
 800a57a:	f7fe ff37 	bl	80093ec <USBD_CUSTOM_HID_RegisterInterface>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a584:	f7f7 f884 	bl	8001690 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a588:	4805      	ldr	r0, [pc, #20]	; (800a5a0 <MX_USB_DEVICE_Init+0x54>)
 800a58a:	f7fe ff89 	bl	80094a0 <USBD_Start>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a594:	f7f7 f87c 	bl	8001690 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a598:	bf00      	nop
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	2000011c 	.word	0x2000011c
 800a5a0:	200003a4 	.word	0x200003a4
 800a5a4:	20000018 	.word	0x20000018
 800a5a8:	2000010c 	.word	0x2000010c

0800a5ac <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bc80      	pop	{r7}
 800a5b8:	4770      	bx	lr

0800a5ba <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a5be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bc80      	pop	{r7}
 800a5c6:	4770      	bx	lr

0800a5c8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800a5d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bc80      	pop	{r7}
 800a5da:	4770      	bx	lr

0800a5dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2212      	movs	r2, #18
 800a5ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a5ee:	4b03      	ldr	r3, [pc, #12]	; (800a5fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bc80      	pop	{r7}
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	20000138 	.word	0x20000138

0800a600 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	6039      	str	r1, [r7, #0]
 800a60a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2204      	movs	r2, #4
 800a610:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a612:	4b03      	ldr	r3, [pc, #12]	; (800a620 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a614:	4618      	mov	r0, r3
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	bc80      	pop	{r7}
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	2000014c 	.word	0x2000014c

0800a624 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d105      	bne.n	800a642 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	4907      	ldr	r1, [pc, #28]	; (800a658 <USBD_FS_ProductStrDescriptor+0x34>)
 800a63a:	4808      	ldr	r0, [pc, #32]	; (800a65c <USBD_FS_ProductStrDescriptor+0x38>)
 800a63c:	f7ff fea8 	bl	800a390 <USBD_GetString>
 800a640:	e004      	b.n	800a64c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	4904      	ldr	r1, [pc, #16]	; (800a658 <USBD_FS_ProductStrDescriptor+0x34>)
 800a646:	4805      	ldr	r0, [pc, #20]	; (800a65c <USBD_FS_ProductStrDescriptor+0x38>)
 800a648:	f7ff fea2 	bl	800a390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a64c:	4b02      	ldr	r3, [pc, #8]	; (800a658 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20000668 	.word	0x20000668
 800a65c:	0800c370 	.word	0x0800c370

0800a660 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	6039      	str	r1, [r7, #0]
 800a66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	4904      	ldr	r1, [pc, #16]	; (800a680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a670:	4804      	ldr	r0, [pc, #16]	; (800a684 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a672:	f7ff fe8d 	bl	800a390 <USBD_GetString>
  return USBD_StrDesc;
 800a676:	4b02      	ldr	r3, [pc, #8]	; (800a680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	20000668 	.word	0x20000668
 800a684:	0800c380 	.word	0x0800c380

0800a688 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	6039      	str	r1, [r7, #0]
 800a692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	221a      	movs	r2, #26
 800a698:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a69a:	f000 f843 	bl	800a724 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a69e:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20000150 	.word	0x20000150

0800a6ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	6039      	str	r1, [r7, #0]
 800a6b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d105      	bne.n	800a6ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	4907      	ldr	r1, [pc, #28]	; (800a6e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6c2:	4808      	ldr	r0, [pc, #32]	; (800a6e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6c4:	f7ff fe64 	bl	800a390 <USBD_GetString>
 800a6c8:	e004      	b.n	800a6d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	4904      	ldr	r1, [pc, #16]	; (800a6e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6ce:	4805      	ldr	r0, [pc, #20]	; (800a6e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6d0:	f7ff fe5e 	bl	800a390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6d4:	4b02      	ldr	r3, [pc, #8]	; (800a6e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20000668 	.word	0x20000668
 800a6e4:	0800c38c 	.word	0x0800c38c

0800a6e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	6039      	str	r1, [r7, #0]
 800a6f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6f4:	79fb      	ldrb	r3, [r7, #7]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d105      	bne.n	800a706 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	4907      	ldr	r1, [pc, #28]	; (800a71c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6fe:	4808      	ldr	r0, [pc, #32]	; (800a720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a700:	f7ff fe46 	bl	800a390 <USBD_GetString>
 800a704:	e004      	b.n	800a710 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	4904      	ldr	r1, [pc, #16]	; (800a71c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a70a:	4805      	ldr	r0, [pc, #20]	; (800a720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a70c:	f7ff fe40 	bl	800a390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a710:	4b02      	ldr	r3, [pc, #8]	; (800a71c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20000668 	.word	0x20000668
 800a720:	0800c3a0 	.word	0x0800c3a0

0800a724 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a72a:	4b0f      	ldr	r3, [pc, #60]	; (800a768 <Get_SerialNum+0x44>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a730:	4b0e      	ldr	r3, [pc, #56]	; (800a76c <Get_SerialNum+0x48>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a736:	4b0e      	ldr	r3, [pc, #56]	; (800a770 <Get_SerialNum+0x4c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4413      	add	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d009      	beq.n	800a75e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a74a:	2208      	movs	r2, #8
 800a74c:	4909      	ldr	r1, [pc, #36]	; (800a774 <Get_SerialNum+0x50>)
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f000 f814 	bl	800a77c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a754:	2204      	movs	r2, #4
 800a756:	4908      	ldr	r1, [pc, #32]	; (800a778 <Get_SerialNum+0x54>)
 800a758:	68b8      	ldr	r0, [r7, #8]
 800a75a:	f000 f80f 	bl	800a77c <IntToUnicode>
  }
}
 800a75e:	bf00      	nop
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	1ffff7e8 	.word	0x1ffff7e8
 800a76c:	1ffff7ec 	.word	0x1ffff7ec
 800a770:	1ffff7f0 	.word	0x1ffff7f0
 800a774:	20000152 	.word	0x20000152
 800a778:	20000162 	.word	0x20000162

0800a77c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b087      	sub	sp, #28
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	4613      	mov	r3, r2
 800a788:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a78e:	2300      	movs	r3, #0
 800a790:	75fb      	strb	r3, [r7, #23]
 800a792:	e027      	b.n	800a7e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	0f1b      	lsrs	r3, r3, #28
 800a798:	2b09      	cmp	r3, #9
 800a79a:	d80b      	bhi.n	800a7b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	0f1b      	lsrs	r3, r3, #28
 800a7a0:	b2da      	uxtb	r2, r3
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	440b      	add	r3, r1
 800a7ac:	3230      	adds	r2, #48	; 0x30
 800a7ae:	b2d2      	uxtb	r2, r2
 800a7b0:	701a      	strb	r2, [r3, #0]
 800a7b2:	e00a      	b.n	800a7ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	0f1b      	lsrs	r3, r3, #28
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	4619      	mov	r1, r3
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	440b      	add	r3, r1
 800a7c4:	3237      	adds	r2, #55	; 0x37
 800a7c6:	b2d2      	uxtb	r2, r2
 800a7c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	011b      	lsls	r3, r3, #4
 800a7ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	4413      	add	r3, r2
 800a7da:	2200      	movs	r2, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	75fb      	strb	r3, [r7, #23]
 800a7e4:	7dfa      	ldrb	r2, [r7, #23]
 800a7e6:	79fb      	ldrb	r3, [r7, #7]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d3d3      	bcc.n	800a794 <IntToUnicode+0x18>
  }
}
 800a7ec:	bf00      	nop
 800a7ee:	bf00      	nop
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bc80      	pop	{r7}
 800a7f6:	4770      	bx	lr

0800a7f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a0d      	ldr	r2, [pc, #52]	; (800a83c <HAL_PCD_MspInit+0x44>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d113      	bne.n	800a832 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a80a:	4b0d      	ldr	r3, [pc, #52]	; (800a840 <HAL_PCD_MspInit+0x48>)
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	4a0c      	ldr	r2, [pc, #48]	; (800a840 <HAL_PCD_MspInit+0x48>)
 800a810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a814:	61d3      	str	r3, [r2, #28]
 800a816:	4b0a      	ldr	r3, [pc, #40]	; (800a840 <HAL_PCD_MspInit+0x48>)
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a81e:	60fb      	str	r3, [r7, #12]
 800a820:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a822:	2200      	movs	r2, #0
 800a824:	2100      	movs	r1, #0
 800a826:	2014      	movs	r0, #20
 800a828:	f7f7 fef7 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a82c:	2014      	movs	r0, #20
 800a82e:	f7f7 ff10 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a832:	bf00      	nop
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	40005c00 	.word	0x40005c00
 800a840:	40021000 	.word	0x40021000

0800a844 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a858:	4619      	mov	r1, r3
 800a85a:	4610      	mov	r0, r2
 800a85c:	f7fe fe68 	bl	8009530 <USBD_LL_SetupStage>
}
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	460b      	mov	r3, r1
 800a872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a87a:	78fa      	ldrb	r2, [r7, #3]
 800a87c:	6879      	ldr	r1, [r7, #4]
 800a87e:	4613      	mov	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	440b      	add	r3, r1
 800a888:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	78fb      	ldrb	r3, [r7, #3]
 800a890:	4619      	mov	r1, r3
 800a892:	f7fe fe9a 	bl	80095ca <USBD_LL_DataOutStage>
}
 800a896:	bf00      	nop
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b082      	sub	sp, #8
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a8b0:	78fa      	ldrb	r2, [r7, #3]
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	440b      	add	r3, r1
 800a8be:	333c      	adds	r3, #60	; 0x3c
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	78fb      	ldrb	r3, [r7, #3]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f7fe fef1 	bl	80096ac <USBD_LL_DataInStage>
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b082      	sub	sp, #8
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff f801 	bl	80098e8 <USBD_LL_SOF>
}
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d001      	beq.n	800a906 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a902:	f7f6 fec5 	bl	8001690 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a90c:	7bfa      	ldrb	r2, [r7, #15]
 800a90e:	4611      	mov	r1, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f7fe ffb1 	bl	8009878 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fe ff6a 	bl	80097f6 <USBD_LL_Reset>
}
 800a922:	bf00      	nop
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fe ffab 	bl	8009896 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d005      	beq.n	800a954 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a948:	4b04      	ldr	r3, [pc, #16]	; (800a95c <HAL_PCD_SuspendCallback+0x30>)
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	4a03      	ldr	r2, [pc, #12]	; (800a95c <HAL_PCD_SuspendCallback+0x30>)
 800a94e:	f043 0306 	orr.w	r3, r3, #6
 800a952:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a954:	bf00      	nop
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	e000ed00 	.word	0xe000ed00

0800a960 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe ffa5 	bl	80098be <USBD_LL_Resume>
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a984:	4a23      	ldr	r2, [pc, #140]	; (800aa14 <USBD_LL_Init+0x98>)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a21      	ldr	r2, [pc, #132]	; (800aa14 <USBD_LL_Init+0x98>)
 800a990:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a994:	4b1f      	ldr	r3, [pc, #124]	; (800aa14 <USBD_LL_Init+0x98>)
 800a996:	4a20      	ldr	r2, [pc, #128]	; (800aa18 <USBD_LL_Init+0x9c>)
 800a998:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a99a:	4b1e      	ldr	r3, [pc, #120]	; (800aa14 <USBD_LL_Init+0x98>)
 800a99c:	2208      	movs	r2, #8
 800a99e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a9a0:	4b1c      	ldr	r3, [pc, #112]	; (800aa14 <USBD_LL_Init+0x98>)
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a9a6:	4b1b      	ldr	r3, [pc, #108]	; (800aa14 <USBD_LL_Init+0x98>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a9ac:	4b19      	ldr	r3, [pc, #100]	; (800aa14 <USBD_LL_Init+0x98>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a9b2:	4b18      	ldr	r3, [pc, #96]	; (800aa14 <USBD_LL_Init+0x98>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a9b8:	4816      	ldr	r0, [pc, #88]	; (800aa14 <USBD_LL_Init+0x98>)
 800a9ba:	f7f8 fcc1 	bl	8003340 <HAL_PCD_Init>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a9c4:	f7f6 fe64 	bl	8001690 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9ce:	2318      	movs	r3, #24
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	f7fa f91e 	bl	8004c14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9de:	2358      	movs	r3, #88	; 0x58
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2180      	movs	r1, #128	; 0x80
 800a9e4:	f7fa f916 	bl	8004c14 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9ee:	2398      	movs	r3, #152	; 0x98
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2181      	movs	r1, #129	; 0x81
 800a9f4:	f7fa f90e 	bl	8004c14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9fe:	23d8      	movs	r3, #216	; 0xd8
 800aa00:	2200      	movs	r2, #0
 800aa02:	2101      	movs	r1, #1
 800aa04:	f7fa f906 	bl	8004c14 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	20000868 	.word	0x20000868
 800aa18:	40005c00 	.word	0x40005c00

0800aa1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7f8 fd8f 	bl	8003556 <HAL_PCD_Start>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 f93c 	bl	800acbc <USBD_Get_USB_Status>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	4608      	mov	r0, r1
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	461a      	mov	r2, r3
 800aa60:	4603      	mov	r3, r0
 800aa62:	70fb      	strb	r3, [r7, #3]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70bb      	strb	r3, [r7, #2]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa7a:	78bb      	ldrb	r3, [r7, #2]
 800aa7c:	883a      	ldrh	r2, [r7, #0]
 800aa7e:	78f9      	ldrb	r1, [r7, #3]
 800aa80:	f7f8 ff07 	bl	8003892 <HAL_PCD_EP_Open>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa88:	7bfb      	ldrb	r3, [r7, #15]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 f916 	bl	800acbc <USBD_Get_USB_Status>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aab8:	78fa      	ldrb	r2, [r7, #3]
 800aaba:	4611      	mov	r1, r2
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7f8 ff4e 	bl	800395e <HAL_PCD_EP_Close>
 800aac2:	4603      	mov	r3, r0
 800aac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 f8f7 	bl	800acbc <USBD_Get_USB_Status>
 800aace:	4603      	mov	r3, r0
 800aad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aad2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	460b      	mov	r3, r1
 800aae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaf6:	78fa      	ldrb	r2, [r7, #3]
 800aaf8:	4611      	mov	r1, r2
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7f8 fff7 	bl	8003aee <HAL_PCD_EP_SetStall>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 f8d8 	bl	800acbc <USBD_Get_USB_Status>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	460b      	mov	r3, r1
 800ab24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab34:	78fa      	ldrb	r2, [r7, #3]
 800ab36:	4611      	mov	r1, r2
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7f9 f838 	bl	8003bae <HAL_PCD_EP_ClrStall>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f000 f8b9 	bl	800acbc <USBD_Get_USB_Status>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	da0c      	bge.n	800ab8e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab74:	78fb      	ldrb	r3, [r7, #3]
 800ab76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7a:	68f9      	ldr	r1, [r7, #12]
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	440b      	add	r3, r1
 800ab88:	3302      	adds	r3, #2
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	e00b      	b.n	800aba6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab94:	68f9      	ldr	r1, [r7, #12]
 800ab96:	4613      	mov	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	440b      	add	r3, r1
 800aba0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aba4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	bc80      	pop	{r7}
 800abae:	4770      	bx	lr

0800abb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	460b      	mov	r3, r1
 800abba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abca:	78fa      	ldrb	r2, [r7, #3]
 800abcc:	4611      	mov	r1, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7f8 fe3a 	bl	8003848 <HAL_PCD_SetAddress>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 f86e 	bl	800acbc <USBD_Get_USB_Status>
 800abe0:	4603      	mov	r3, r0
 800abe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b086      	sub	sp, #24
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	60f8      	str	r0, [r7, #12]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	461a      	mov	r2, r3
 800abfa:	460b      	mov	r3, r1
 800abfc:	72fb      	strb	r3, [r7, #11]
 800abfe:	4613      	mov	r3, r2
 800ac00:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac10:	893b      	ldrh	r3, [r7, #8]
 800ac12:	7af9      	ldrb	r1, [r7, #11]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	f7f8 ff27 	bl	8003a68 <HAL_PCD_EP_Transmit>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac1e:	7dfb      	ldrb	r3, [r7, #23]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f000 f84b 	bl	800acbc <USBD_Get_USB_Status>
 800ac26:	4603      	mov	r3, r0
 800ac28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac2a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3718      	adds	r7, #24
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	607a      	str	r2, [r7, #4]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	460b      	mov	r3, r1
 800ac42:	72fb      	strb	r3, [r7, #11]
 800ac44:	4613      	mov	r3, r2
 800ac46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac56:	893b      	ldrh	r3, [r7, #8]
 800ac58:	7af9      	ldrb	r1, [r7, #11]
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	f7f8 fec7 	bl	80039ee <HAL_PCD_EP_Receive>
 800ac60:	4603      	mov	r3, r0
 800ac62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 f828 	bl	800acbc <USBD_Get_USB_Status>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac70:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3718      	adds	r7, #24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800ac84:	4b02      	ldr	r3, [pc, #8]	; (800ac90 <USBD_static_malloc+0x14>)
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bc80      	pop	{r7}
 800ac8e:	4770      	bx	lr
 800ac90:	20000b54 	.word	0x20000b54

0800ac94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]

}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bc80      	pop	{r7}
 800aca4:	4770      	bx	lr

0800aca6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca6:	b480      	push	{r7}
 800aca8:	b083      	sub	sp, #12
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	460b      	mov	r3, r1
 800acb0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800acb2:	bf00      	nop
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bc80      	pop	{r7}
 800acba:	4770      	bx	lr

0800acbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	2b03      	cmp	r3, #3
 800acce:	d817      	bhi.n	800ad00 <USBD_Get_USB_Status+0x44>
 800acd0:	a201      	add	r2, pc, #4	; (adr r2, 800acd8 <USBD_Get_USB_Status+0x1c>)
 800acd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd6:	bf00      	nop
 800acd8:	0800ace9 	.word	0x0800ace9
 800acdc:	0800acef 	.word	0x0800acef
 800ace0:	0800acf5 	.word	0x0800acf5
 800ace4:	0800acfb 	.word	0x0800acfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	73fb      	strb	r3, [r7, #15]
    break;
 800acec:	e00b      	b.n	800ad06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800acee:	2302      	movs	r3, #2
 800acf0:	73fb      	strb	r3, [r7, #15]
    break;
 800acf2:	e008      	b.n	800ad06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800acf4:	2301      	movs	r3, #1
 800acf6:	73fb      	strb	r3, [r7, #15]
    break;
 800acf8:	e005      	b.n	800ad06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acfa:	2302      	movs	r3, #2
 800acfc:	73fb      	strb	r3, [r7, #15]
    break;
 800acfe:	e002      	b.n	800ad06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad00:	2302      	movs	r3, #2
 800ad02:	73fb      	strb	r3, [r7, #15]
    break;
 800ad04:	bf00      	nop
  }
  return usb_status;
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bc80      	pop	{r7}
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop

0800ad14 <atoi>:
 800ad14:	220a      	movs	r2, #10
 800ad16:	2100      	movs	r1, #0
 800ad18:	f000 b932 	b.w	800af80 <strtol>

0800ad1c <__errno>:
 800ad1c:	4b01      	ldr	r3, [pc, #4]	; (800ad24 <__errno+0x8>)
 800ad1e:	6818      	ldr	r0, [r3, #0]
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	2000016c 	.word	0x2000016c

0800ad28 <__libc_init_array>:
 800ad28:	b570      	push	{r4, r5, r6, lr}
 800ad2a:	2600      	movs	r6, #0
 800ad2c:	4d0c      	ldr	r5, [pc, #48]	; (800ad60 <__libc_init_array+0x38>)
 800ad2e:	4c0d      	ldr	r4, [pc, #52]	; (800ad64 <__libc_init_array+0x3c>)
 800ad30:	1b64      	subs	r4, r4, r5
 800ad32:	10a4      	asrs	r4, r4, #2
 800ad34:	42a6      	cmp	r6, r4
 800ad36:	d109      	bne.n	800ad4c <__libc_init_array+0x24>
 800ad38:	f001 fae8 	bl	800c30c <_init>
 800ad3c:	2600      	movs	r6, #0
 800ad3e:	4d0a      	ldr	r5, [pc, #40]	; (800ad68 <__libc_init_array+0x40>)
 800ad40:	4c0a      	ldr	r4, [pc, #40]	; (800ad6c <__libc_init_array+0x44>)
 800ad42:	1b64      	subs	r4, r4, r5
 800ad44:	10a4      	asrs	r4, r4, #2
 800ad46:	42a6      	cmp	r6, r4
 800ad48:	d105      	bne.n	800ad56 <__libc_init_array+0x2e>
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}
 800ad4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad50:	4798      	blx	r3
 800ad52:	3601      	adds	r6, #1
 800ad54:	e7ee      	b.n	800ad34 <__libc_init_array+0xc>
 800ad56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad5a:	4798      	blx	r3
 800ad5c:	3601      	adds	r6, #1
 800ad5e:	e7f2      	b.n	800ad46 <__libc_init_array+0x1e>
 800ad60:	0800c618 	.word	0x0800c618
 800ad64:	0800c618 	.word	0x0800c618
 800ad68:	0800c618 	.word	0x0800c618
 800ad6c:	0800c61c 	.word	0x0800c61c

0800ad70 <memset>:
 800ad70:	4603      	mov	r3, r0
 800ad72:	4402      	add	r2, r0
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d100      	bne.n	800ad7a <memset+0xa>
 800ad78:	4770      	bx	lr
 800ad7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad7e:	e7f9      	b.n	800ad74 <memset+0x4>

0800ad80 <siprintf>:
 800ad80:	b40e      	push	{r1, r2, r3}
 800ad82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad86:	b500      	push	{lr}
 800ad88:	b09c      	sub	sp, #112	; 0x70
 800ad8a:	ab1d      	add	r3, sp, #116	; 0x74
 800ad8c:	9002      	str	r0, [sp, #8]
 800ad8e:	9006      	str	r0, [sp, #24]
 800ad90:	9107      	str	r1, [sp, #28]
 800ad92:	9104      	str	r1, [sp, #16]
 800ad94:	4808      	ldr	r0, [pc, #32]	; (800adb8 <siprintf+0x38>)
 800ad96:	4909      	ldr	r1, [pc, #36]	; (800adbc <siprintf+0x3c>)
 800ad98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad9c:	9105      	str	r1, [sp, #20]
 800ad9e:	6800      	ldr	r0, [r0, #0]
 800ada0:	a902      	add	r1, sp, #8
 800ada2:	9301      	str	r3, [sp, #4]
 800ada4:	f000 fa66 	bl	800b274 <_svfiprintf_r>
 800ada8:	2200      	movs	r2, #0
 800adaa:	9b02      	ldr	r3, [sp, #8]
 800adac:	701a      	strb	r2, [r3, #0]
 800adae:	b01c      	add	sp, #112	; 0x70
 800adb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adb4:	b003      	add	sp, #12
 800adb6:	4770      	bx	lr
 800adb8:	2000016c 	.word	0x2000016c
 800adbc:	ffff0208 	.word	0xffff0208

0800adc0 <strcpy>:
 800adc0:	4603      	mov	r3, r0
 800adc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adc6:	f803 2b01 	strb.w	r2, [r3], #1
 800adca:	2a00      	cmp	r2, #0
 800adcc:	d1f9      	bne.n	800adc2 <strcpy+0x2>
 800adce:	4770      	bx	lr

0800add0 <strtok>:
 800add0:	4b16      	ldr	r3, [pc, #88]	; (800ae2c <strtok+0x5c>)
 800add2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add6:	681f      	ldr	r7, [r3, #0]
 800add8:	4605      	mov	r5, r0
 800adda:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800addc:	460e      	mov	r6, r1
 800adde:	b9ec      	cbnz	r4, 800ae1c <strtok+0x4c>
 800ade0:	2050      	movs	r0, #80	; 0x50
 800ade2:	f000 f907 	bl	800aff4 <malloc>
 800ade6:	4602      	mov	r2, r0
 800ade8:	65b8      	str	r0, [r7, #88]	; 0x58
 800adea:	b920      	cbnz	r0, 800adf6 <strtok+0x26>
 800adec:	2157      	movs	r1, #87	; 0x57
 800adee:	4b10      	ldr	r3, [pc, #64]	; (800ae30 <strtok+0x60>)
 800adf0:	4810      	ldr	r0, [pc, #64]	; (800ae34 <strtok+0x64>)
 800adf2:	f000 f8cf 	bl	800af94 <__assert_func>
 800adf6:	e9c0 4400 	strd	r4, r4, [r0]
 800adfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800adfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ae02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ae06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ae0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ae0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ae12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ae16:	6184      	str	r4, [r0, #24]
 800ae18:	7704      	strb	r4, [r0, #28]
 800ae1a:	6244      	str	r4, [r0, #36]	; 0x24
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	4628      	mov	r0, r5
 800ae20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae22:	2301      	movs	r3, #1
 800ae24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	f000 b806 	b.w	800ae38 <__strtok_r>
 800ae2c:	2000016c 	.word	0x2000016c
 800ae30:	0800c3d4 	.word	0x0800c3d4
 800ae34:	0800c3eb 	.word	0x0800c3eb

0800ae38 <__strtok_r>:
 800ae38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae3a:	b908      	cbnz	r0, 800ae40 <__strtok_r+0x8>
 800ae3c:	6810      	ldr	r0, [r2, #0]
 800ae3e:	b188      	cbz	r0, 800ae64 <__strtok_r+0x2c>
 800ae40:	4604      	mov	r4, r0
 800ae42:	460f      	mov	r7, r1
 800ae44:	4620      	mov	r0, r4
 800ae46:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ae4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ae4e:	b91e      	cbnz	r6, 800ae58 <__strtok_r+0x20>
 800ae50:	b965      	cbnz	r5, 800ae6c <__strtok_r+0x34>
 800ae52:	4628      	mov	r0, r5
 800ae54:	6015      	str	r5, [r2, #0]
 800ae56:	e005      	b.n	800ae64 <__strtok_r+0x2c>
 800ae58:	42b5      	cmp	r5, r6
 800ae5a:	d1f6      	bne.n	800ae4a <__strtok_r+0x12>
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1f0      	bne.n	800ae42 <__strtok_r+0xa>
 800ae60:	6014      	str	r4, [r2, #0]
 800ae62:	7003      	strb	r3, [r0, #0]
 800ae64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae66:	461c      	mov	r4, r3
 800ae68:	e00c      	b.n	800ae84 <__strtok_r+0x4c>
 800ae6a:	b915      	cbnz	r5, 800ae72 <__strtok_r+0x3a>
 800ae6c:	460e      	mov	r6, r1
 800ae6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae72:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ae76:	42ab      	cmp	r3, r5
 800ae78:	d1f7      	bne.n	800ae6a <__strtok_r+0x32>
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0f3      	beq.n	800ae66 <__strtok_r+0x2e>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ae84:	6014      	str	r4, [r2, #0]
 800ae86:	e7ed      	b.n	800ae64 <__strtok_r+0x2c>

0800ae88 <_strtol_l.constprop.0>:
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8e:	4680      	mov	r8, r0
 800ae90:	d001      	beq.n	800ae96 <_strtol_l.constprop.0+0xe>
 800ae92:	2b24      	cmp	r3, #36	; 0x24
 800ae94:	d906      	bls.n	800aea4 <_strtol_l.constprop.0+0x1c>
 800ae96:	f7ff ff41 	bl	800ad1c <__errno>
 800ae9a:	2316      	movs	r3, #22
 800ae9c:	6003      	str	r3, [r0, #0]
 800ae9e:	2000      	movs	r0, #0
 800aea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea4:	460d      	mov	r5, r1
 800aea6:	4f35      	ldr	r7, [pc, #212]	; (800af7c <_strtol_l.constprop.0+0xf4>)
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aeae:	5de6      	ldrb	r6, [r4, r7]
 800aeb0:	f016 0608 	ands.w	r6, r6, #8
 800aeb4:	d1f8      	bne.n	800aea8 <_strtol_l.constprop.0+0x20>
 800aeb6:	2c2d      	cmp	r4, #45	; 0x2d
 800aeb8:	d12f      	bne.n	800af1a <_strtol_l.constprop.0+0x92>
 800aeba:	2601      	movs	r6, #1
 800aebc:	782c      	ldrb	r4, [r5, #0]
 800aebe:	1c85      	adds	r5, r0, #2
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d057      	beq.n	800af74 <_strtol_l.constprop.0+0xec>
 800aec4:	2b10      	cmp	r3, #16
 800aec6:	d109      	bne.n	800aedc <_strtol_l.constprop.0+0x54>
 800aec8:	2c30      	cmp	r4, #48	; 0x30
 800aeca:	d107      	bne.n	800aedc <_strtol_l.constprop.0+0x54>
 800aecc:	7828      	ldrb	r0, [r5, #0]
 800aece:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aed2:	2858      	cmp	r0, #88	; 0x58
 800aed4:	d149      	bne.n	800af6a <_strtol_l.constprop.0+0xe2>
 800aed6:	2310      	movs	r3, #16
 800aed8:	786c      	ldrb	r4, [r5, #1]
 800aeda:	3502      	adds	r5, #2
 800aedc:	2700      	movs	r7, #0
 800aede:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800aee2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800aee6:	fbbe f9f3 	udiv	r9, lr, r3
 800aeea:	4638      	mov	r0, r7
 800aeec:	fb03 ea19 	mls	sl, r3, r9, lr
 800aef0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aef4:	f1bc 0f09 	cmp.w	ip, #9
 800aef8:	d814      	bhi.n	800af24 <_strtol_l.constprop.0+0x9c>
 800aefa:	4664      	mov	r4, ip
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	dd22      	ble.n	800af46 <_strtol_l.constprop.0+0xbe>
 800af00:	2f00      	cmp	r7, #0
 800af02:	db1d      	blt.n	800af40 <_strtol_l.constprop.0+0xb8>
 800af04:	4581      	cmp	r9, r0
 800af06:	d31b      	bcc.n	800af40 <_strtol_l.constprop.0+0xb8>
 800af08:	d101      	bne.n	800af0e <_strtol_l.constprop.0+0x86>
 800af0a:	45a2      	cmp	sl, r4
 800af0c:	db18      	blt.n	800af40 <_strtol_l.constprop.0+0xb8>
 800af0e:	2701      	movs	r7, #1
 800af10:	fb00 4003 	mla	r0, r0, r3, r4
 800af14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af18:	e7ea      	b.n	800aef0 <_strtol_l.constprop.0+0x68>
 800af1a:	2c2b      	cmp	r4, #43	; 0x2b
 800af1c:	bf04      	itt	eq
 800af1e:	782c      	ldrbeq	r4, [r5, #0]
 800af20:	1c85      	addeq	r5, r0, #2
 800af22:	e7cd      	b.n	800aec0 <_strtol_l.constprop.0+0x38>
 800af24:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800af28:	f1bc 0f19 	cmp.w	ip, #25
 800af2c:	d801      	bhi.n	800af32 <_strtol_l.constprop.0+0xaa>
 800af2e:	3c37      	subs	r4, #55	; 0x37
 800af30:	e7e4      	b.n	800aefc <_strtol_l.constprop.0+0x74>
 800af32:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800af36:	f1bc 0f19 	cmp.w	ip, #25
 800af3a:	d804      	bhi.n	800af46 <_strtol_l.constprop.0+0xbe>
 800af3c:	3c57      	subs	r4, #87	; 0x57
 800af3e:	e7dd      	b.n	800aefc <_strtol_l.constprop.0+0x74>
 800af40:	f04f 37ff 	mov.w	r7, #4294967295
 800af44:	e7e6      	b.n	800af14 <_strtol_l.constprop.0+0x8c>
 800af46:	2f00      	cmp	r7, #0
 800af48:	da07      	bge.n	800af5a <_strtol_l.constprop.0+0xd2>
 800af4a:	2322      	movs	r3, #34	; 0x22
 800af4c:	4670      	mov	r0, lr
 800af4e:	f8c8 3000 	str.w	r3, [r8]
 800af52:	2a00      	cmp	r2, #0
 800af54:	d0a4      	beq.n	800aea0 <_strtol_l.constprop.0+0x18>
 800af56:	1e69      	subs	r1, r5, #1
 800af58:	e005      	b.n	800af66 <_strtol_l.constprop.0+0xde>
 800af5a:	b106      	cbz	r6, 800af5e <_strtol_l.constprop.0+0xd6>
 800af5c:	4240      	negs	r0, r0
 800af5e:	2a00      	cmp	r2, #0
 800af60:	d09e      	beq.n	800aea0 <_strtol_l.constprop.0+0x18>
 800af62:	2f00      	cmp	r7, #0
 800af64:	d1f7      	bne.n	800af56 <_strtol_l.constprop.0+0xce>
 800af66:	6011      	str	r1, [r2, #0]
 800af68:	e79a      	b.n	800aea0 <_strtol_l.constprop.0+0x18>
 800af6a:	2430      	movs	r4, #48	; 0x30
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1b5      	bne.n	800aedc <_strtol_l.constprop.0+0x54>
 800af70:	2308      	movs	r3, #8
 800af72:	e7b3      	b.n	800aedc <_strtol_l.constprop.0+0x54>
 800af74:	2c30      	cmp	r4, #48	; 0x30
 800af76:	d0a9      	beq.n	800aecc <_strtol_l.constprop.0+0x44>
 800af78:	230a      	movs	r3, #10
 800af7a:	e7af      	b.n	800aedc <_strtol_l.constprop.0+0x54>
 800af7c:	0800c485 	.word	0x0800c485

0800af80 <strtol>:
 800af80:	4613      	mov	r3, r2
 800af82:	460a      	mov	r2, r1
 800af84:	4601      	mov	r1, r0
 800af86:	4802      	ldr	r0, [pc, #8]	; (800af90 <strtol+0x10>)
 800af88:	6800      	ldr	r0, [r0, #0]
 800af8a:	f7ff bf7d 	b.w	800ae88 <_strtol_l.constprop.0>
 800af8e:	bf00      	nop
 800af90:	2000016c 	.word	0x2000016c

0800af94 <__assert_func>:
 800af94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af96:	4614      	mov	r4, r2
 800af98:	461a      	mov	r2, r3
 800af9a:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <__assert_func+0x2c>)
 800af9c:	4605      	mov	r5, r0
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68d8      	ldr	r0, [r3, #12]
 800afa2:	b14c      	cbz	r4, 800afb8 <__assert_func+0x24>
 800afa4:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <__assert_func+0x30>)
 800afa6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afaa:	9100      	str	r1, [sp, #0]
 800afac:	462b      	mov	r3, r5
 800afae:	4906      	ldr	r1, [pc, #24]	; (800afc8 <__assert_func+0x34>)
 800afb0:	f000 f80e 	bl	800afd0 <fiprintf>
 800afb4:	f000 fe1c 	bl	800bbf0 <abort>
 800afb8:	4b04      	ldr	r3, [pc, #16]	; (800afcc <__assert_func+0x38>)
 800afba:	461c      	mov	r4, r3
 800afbc:	e7f3      	b.n	800afa6 <__assert_func+0x12>
 800afbe:	bf00      	nop
 800afc0:	2000016c 	.word	0x2000016c
 800afc4:	0800c448 	.word	0x0800c448
 800afc8:	0800c455 	.word	0x0800c455
 800afcc:	0800c483 	.word	0x0800c483

0800afd0 <fiprintf>:
 800afd0:	b40e      	push	{r1, r2, r3}
 800afd2:	b503      	push	{r0, r1, lr}
 800afd4:	4601      	mov	r1, r0
 800afd6:	ab03      	add	r3, sp, #12
 800afd8:	4805      	ldr	r0, [pc, #20]	; (800aff0 <fiprintf+0x20>)
 800afda:	f853 2b04 	ldr.w	r2, [r3], #4
 800afde:	6800      	ldr	r0, [r0, #0]
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	f000 fa6f 	bl	800b4c4 <_vfiprintf_r>
 800afe6:	b002      	add	sp, #8
 800afe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afec:	b003      	add	sp, #12
 800afee:	4770      	bx	lr
 800aff0:	2000016c 	.word	0x2000016c

0800aff4 <malloc>:
 800aff4:	4b02      	ldr	r3, [pc, #8]	; (800b000 <malloc+0xc>)
 800aff6:	4601      	mov	r1, r0
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	f000 b86b 	b.w	800b0d4 <_malloc_r>
 800affe:	bf00      	nop
 800b000:	2000016c 	.word	0x2000016c

0800b004 <_free_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4605      	mov	r5, r0
 800b008:	2900      	cmp	r1, #0
 800b00a:	d040      	beq.n	800b08e <_free_r+0x8a>
 800b00c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b010:	1f0c      	subs	r4, r1, #4
 800b012:	2b00      	cmp	r3, #0
 800b014:	bfb8      	it	lt
 800b016:	18e4      	addlt	r4, r4, r3
 800b018:	f001 f844 	bl	800c0a4 <__malloc_lock>
 800b01c:	4a1c      	ldr	r2, [pc, #112]	; (800b090 <_free_r+0x8c>)
 800b01e:	6813      	ldr	r3, [r2, #0]
 800b020:	b933      	cbnz	r3, 800b030 <_free_r+0x2c>
 800b022:	6063      	str	r3, [r4, #4]
 800b024:	6014      	str	r4, [r2, #0]
 800b026:	4628      	mov	r0, r5
 800b028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b02c:	f001 b840 	b.w	800c0b0 <__malloc_unlock>
 800b030:	42a3      	cmp	r3, r4
 800b032:	d908      	bls.n	800b046 <_free_r+0x42>
 800b034:	6820      	ldr	r0, [r4, #0]
 800b036:	1821      	adds	r1, r4, r0
 800b038:	428b      	cmp	r3, r1
 800b03a:	bf01      	itttt	eq
 800b03c:	6819      	ldreq	r1, [r3, #0]
 800b03e:	685b      	ldreq	r3, [r3, #4]
 800b040:	1809      	addeq	r1, r1, r0
 800b042:	6021      	streq	r1, [r4, #0]
 800b044:	e7ed      	b.n	800b022 <_free_r+0x1e>
 800b046:	461a      	mov	r2, r3
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	b10b      	cbz	r3, 800b050 <_free_r+0x4c>
 800b04c:	42a3      	cmp	r3, r4
 800b04e:	d9fa      	bls.n	800b046 <_free_r+0x42>
 800b050:	6811      	ldr	r1, [r2, #0]
 800b052:	1850      	adds	r0, r2, r1
 800b054:	42a0      	cmp	r0, r4
 800b056:	d10b      	bne.n	800b070 <_free_r+0x6c>
 800b058:	6820      	ldr	r0, [r4, #0]
 800b05a:	4401      	add	r1, r0
 800b05c:	1850      	adds	r0, r2, r1
 800b05e:	4283      	cmp	r3, r0
 800b060:	6011      	str	r1, [r2, #0]
 800b062:	d1e0      	bne.n	800b026 <_free_r+0x22>
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	4401      	add	r1, r0
 800b06a:	6011      	str	r1, [r2, #0]
 800b06c:	6053      	str	r3, [r2, #4]
 800b06e:	e7da      	b.n	800b026 <_free_r+0x22>
 800b070:	d902      	bls.n	800b078 <_free_r+0x74>
 800b072:	230c      	movs	r3, #12
 800b074:	602b      	str	r3, [r5, #0]
 800b076:	e7d6      	b.n	800b026 <_free_r+0x22>
 800b078:	6820      	ldr	r0, [r4, #0]
 800b07a:	1821      	adds	r1, r4, r0
 800b07c:	428b      	cmp	r3, r1
 800b07e:	bf01      	itttt	eq
 800b080:	6819      	ldreq	r1, [r3, #0]
 800b082:	685b      	ldreq	r3, [r3, #4]
 800b084:	1809      	addeq	r1, r1, r0
 800b086:	6021      	streq	r1, [r4, #0]
 800b088:	6063      	str	r3, [r4, #4]
 800b08a:	6054      	str	r4, [r2, #4]
 800b08c:	e7cb      	b.n	800b026 <_free_r+0x22>
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	20000bac 	.word	0x20000bac

0800b094 <sbrk_aligned>:
 800b094:	b570      	push	{r4, r5, r6, lr}
 800b096:	4e0e      	ldr	r6, [pc, #56]	; (800b0d0 <sbrk_aligned+0x3c>)
 800b098:	460c      	mov	r4, r1
 800b09a:	6831      	ldr	r1, [r6, #0]
 800b09c:	4605      	mov	r5, r0
 800b09e:	b911      	cbnz	r1, 800b0a6 <sbrk_aligned+0x12>
 800b0a0:	f000 fcd6 	bl	800ba50 <_sbrk_r>
 800b0a4:	6030      	str	r0, [r6, #0]
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	f000 fcd1 	bl	800ba50 <_sbrk_r>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	d00a      	beq.n	800b0c8 <sbrk_aligned+0x34>
 800b0b2:	1cc4      	adds	r4, r0, #3
 800b0b4:	f024 0403 	bic.w	r4, r4, #3
 800b0b8:	42a0      	cmp	r0, r4
 800b0ba:	d007      	beq.n	800b0cc <sbrk_aligned+0x38>
 800b0bc:	1a21      	subs	r1, r4, r0
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f000 fcc6 	bl	800ba50 <_sbrk_r>
 800b0c4:	3001      	adds	r0, #1
 800b0c6:	d101      	bne.n	800b0cc <sbrk_aligned+0x38>
 800b0c8:	f04f 34ff 	mov.w	r4, #4294967295
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
 800b0d0:	20000bb0 	.word	0x20000bb0

0800b0d4 <_malloc_r>:
 800b0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d8:	1ccd      	adds	r5, r1, #3
 800b0da:	f025 0503 	bic.w	r5, r5, #3
 800b0de:	3508      	adds	r5, #8
 800b0e0:	2d0c      	cmp	r5, #12
 800b0e2:	bf38      	it	cc
 800b0e4:	250c      	movcc	r5, #12
 800b0e6:	2d00      	cmp	r5, #0
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	db01      	blt.n	800b0f0 <_malloc_r+0x1c>
 800b0ec:	42a9      	cmp	r1, r5
 800b0ee:	d905      	bls.n	800b0fc <_malloc_r+0x28>
 800b0f0:	230c      	movs	r3, #12
 800b0f2:	2600      	movs	r6, #0
 800b0f4:	603b      	str	r3, [r7, #0]
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0fc:	4e2e      	ldr	r6, [pc, #184]	; (800b1b8 <_malloc_r+0xe4>)
 800b0fe:	f000 ffd1 	bl	800c0a4 <__malloc_lock>
 800b102:	6833      	ldr	r3, [r6, #0]
 800b104:	461c      	mov	r4, r3
 800b106:	bb34      	cbnz	r4, 800b156 <_malloc_r+0x82>
 800b108:	4629      	mov	r1, r5
 800b10a:	4638      	mov	r0, r7
 800b10c:	f7ff ffc2 	bl	800b094 <sbrk_aligned>
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	4604      	mov	r4, r0
 800b114:	d14d      	bne.n	800b1b2 <_malloc_r+0xde>
 800b116:	6834      	ldr	r4, [r6, #0]
 800b118:	4626      	mov	r6, r4
 800b11a:	2e00      	cmp	r6, #0
 800b11c:	d140      	bne.n	800b1a0 <_malloc_r+0xcc>
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	4631      	mov	r1, r6
 800b122:	4638      	mov	r0, r7
 800b124:	eb04 0803 	add.w	r8, r4, r3
 800b128:	f000 fc92 	bl	800ba50 <_sbrk_r>
 800b12c:	4580      	cmp	r8, r0
 800b12e:	d13a      	bne.n	800b1a6 <_malloc_r+0xd2>
 800b130:	6821      	ldr	r1, [r4, #0]
 800b132:	3503      	adds	r5, #3
 800b134:	1a6d      	subs	r5, r5, r1
 800b136:	f025 0503 	bic.w	r5, r5, #3
 800b13a:	3508      	adds	r5, #8
 800b13c:	2d0c      	cmp	r5, #12
 800b13e:	bf38      	it	cc
 800b140:	250c      	movcc	r5, #12
 800b142:	4638      	mov	r0, r7
 800b144:	4629      	mov	r1, r5
 800b146:	f7ff ffa5 	bl	800b094 <sbrk_aligned>
 800b14a:	3001      	adds	r0, #1
 800b14c:	d02b      	beq.n	800b1a6 <_malloc_r+0xd2>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	442b      	add	r3, r5
 800b152:	6023      	str	r3, [r4, #0]
 800b154:	e00e      	b.n	800b174 <_malloc_r+0xa0>
 800b156:	6822      	ldr	r2, [r4, #0]
 800b158:	1b52      	subs	r2, r2, r5
 800b15a:	d41e      	bmi.n	800b19a <_malloc_r+0xc6>
 800b15c:	2a0b      	cmp	r2, #11
 800b15e:	d916      	bls.n	800b18e <_malloc_r+0xba>
 800b160:	1961      	adds	r1, r4, r5
 800b162:	42a3      	cmp	r3, r4
 800b164:	6025      	str	r5, [r4, #0]
 800b166:	bf18      	it	ne
 800b168:	6059      	strne	r1, [r3, #4]
 800b16a:	6863      	ldr	r3, [r4, #4]
 800b16c:	bf08      	it	eq
 800b16e:	6031      	streq	r1, [r6, #0]
 800b170:	5162      	str	r2, [r4, r5]
 800b172:	604b      	str	r3, [r1, #4]
 800b174:	4638      	mov	r0, r7
 800b176:	f104 060b 	add.w	r6, r4, #11
 800b17a:	f000 ff99 	bl	800c0b0 <__malloc_unlock>
 800b17e:	f026 0607 	bic.w	r6, r6, #7
 800b182:	1d23      	adds	r3, r4, #4
 800b184:	1af2      	subs	r2, r6, r3
 800b186:	d0b6      	beq.n	800b0f6 <_malloc_r+0x22>
 800b188:	1b9b      	subs	r3, r3, r6
 800b18a:	50a3      	str	r3, [r4, r2]
 800b18c:	e7b3      	b.n	800b0f6 <_malloc_r+0x22>
 800b18e:	6862      	ldr	r2, [r4, #4]
 800b190:	42a3      	cmp	r3, r4
 800b192:	bf0c      	ite	eq
 800b194:	6032      	streq	r2, [r6, #0]
 800b196:	605a      	strne	r2, [r3, #4]
 800b198:	e7ec      	b.n	800b174 <_malloc_r+0xa0>
 800b19a:	4623      	mov	r3, r4
 800b19c:	6864      	ldr	r4, [r4, #4]
 800b19e:	e7b2      	b.n	800b106 <_malloc_r+0x32>
 800b1a0:	4634      	mov	r4, r6
 800b1a2:	6876      	ldr	r6, [r6, #4]
 800b1a4:	e7b9      	b.n	800b11a <_malloc_r+0x46>
 800b1a6:	230c      	movs	r3, #12
 800b1a8:	4638      	mov	r0, r7
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	f000 ff80 	bl	800c0b0 <__malloc_unlock>
 800b1b0:	e7a1      	b.n	800b0f6 <_malloc_r+0x22>
 800b1b2:	6025      	str	r5, [r4, #0]
 800b1b4:	e7de      	b.n	800b174 <_malloc_r+0xa0>
 800b1b6:	bf00      	nop
 800b1b8:	20000bac 	.word	0x20000bac

0800b1bc <__ssputs_r>:
 800b1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c0:	688e      	ldr	r6, [r1, #8]
 800b1c2:	4682      	mov	sl, r0
 800b1c4:	429e      	cmp	r6, r3
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	4690      	mov	r8, r2
 800b1ca:	461f      	mov	r7, r3
 800b1cc:	d838      	bhi.n	800b240 <__ssputs_r+0x84>
 800b1ce:	898a      	ldrh	r2, [r1, #12]
 800b1d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1d4:	d032      	beq.n	800b23c <__ssputs_r+0x80>
 800b1d6:	6825      	ldr	r5, [r4, #0]
 800b1d8:	6909      	ldr	r1, [r1, #16]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	eba5 0901 	sub.w	r9, r5, r1
 800b1e0:	6965      	ldr	r5, [r4, #20]
 800b1e2:	444b      	add	r3, r9
 800b1e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1ec:	106d      	asrs	r5, r5, #1
 800b1ee:	429d      	cmp	r5, r3
 800b1f0:	bf38      	it	cc
 800b1f2:	461d      	movcc	r5, r3
 800b1f4:	0553      	lsls	r3, r2, #21
 800b1f6:	d531      	bpl.n	800b25c <__ssputs_r+0xa0>
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	f7ff ff6b 	bl	800b0d4 <_malloc_r>
 800b1fe:	4606      	mov	r6, r0
 800b200:	b950      	cbnz	r0, 800b218 <__ssputs_r+0x5c>
 800b202:	230c      	movs	r3, #12
 800b204:	f04f 30ff 	mov.w	r0, #4294967295
 800b208:	f8ca 3000 	str.w	r3, [sl]
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b212:	81a3      	strh	r3, [r4, #12]
 800b214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b218:	464a      	mov	r2, r9
 800b21a:	6921      	ldr	r1, [r4, #16]
 800b21c:	f000 ff1a 	bl	800c054 <memcpy>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22a:	81a3      	strh	r3, [r4, #12]
 800b22c:	6126      	str	r6, [r4, #16]
 800b22e:	444e      	add	r6, r9
 800b230:	6026      	str	r6, [r4, #0]
 800b232:	463e      	mov	r6, r7
 800b234:	6165      	str	r5, [r4, #20]
 800b236:	eba5 0509 	sub.w	r5, r5, r9
 800b23a:	60a5      	str	r5, [r4, #8]
 800b23c:	42be      	cmp	r6, r7
 800b23e:	d900      	bls.n	800b242 <__ssputs_r+0x86>
 800b240:	463e      	mov	r6, r7
 800b242:	4632      	mov	r2, r6
 800b244:	4641      	mov	r1, r8
 800b246:	6820      	ldr	r0, [r4, #0]
 800b248:	f000 ff12 	bl	800c070 <memmove>
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	2000      	movs	r0, #0
 800b250:	1b9b      	subs	r3, r3, r6
 800b252:	60a3      	str	r3, [r4, #8]
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	4433      	add	r3, r6
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	e7db      	b.n	800b214 <__ssputs_r+0x58>
 800b25c:	462a      	mov	r2, r5
 800b25e:	f000 ff2d 	bl	800c0bc <_realloc_r>
 800b262:	4606      	mov	r6, r0
 800b264:	2800      	cmp	r0, #0
 800b266:	d1e1      	bne.n	800b22c <__ssputs_r+0x70>
 800b268:	4650      	mov	r0, sl
 800b26a:	6921      	ldr	r1, [r4, #16]
 800b26c:	f7ff feca 	bl	800b004 <_free_r>
 800b270:	e7c7      	b.n	800b202 <__ssputs_r+0x46>
	...

0800b274 <_svfiprintf_r>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	4698      	mov	r8, r3
 800b27a:	898b      	ldrh	r3, [r1, #12]
 800b27c:	4607      	mov	r7, r0
 800b27e:	061b      	lsls	r3, r3, #24
 800b280:	460d      	mov	r5, r1
 800b282:	4614      	mov	r4, r2
 800b284:	b09d      	sub	sp, #116	; 0x74
 800b286:	d50e      	bpl.n	800b2a6 <_svfiprintf_r+0x32>
 800b288:	690b      	ldr	r3, [r1, #16]
 800b28a:	b963      	cbnz	r3, 800b2a6 <_svfiprintf_r+0x32>
 800b28c:	2140      	movs	r1, #64	; 0x40
 800b28e:	f7ff ff21 	bl	800b0d4 <_malloc_r>
 800b292:	6028      	str	r0, [r5, #0]
 800b294:	6128      	str	r0, [r5, #16]
 800b296:	b920      	cbnz	r0, 800b2a2 <_svfiprintf_r+0x2e>
 800b298:	230c      	movs	r3, #12
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a0:	e0d1      	b.n	800b446 <_svfiprintf_r+0x1d2>
 800b2a2:	2340      	movs	r3, #64	; 0x40
 800b2a4:	616b      	str	r3, [r5, #20]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2aa:	2320      	movs	r3, #32
 800b2ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2b0:	2330      	movs	r3, #48	; 0x30
 800b2b2:	f04f 0901 	mov.w	r9, #1
 800b2b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b460 <_svfiprintf_r+0x1ec>
 800b2be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	469a      	mov	sl, r3
 800b2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ca:	b10a      	cbz	r2, 800b2d0 <_svfiprintf_r+0x5c>
 800b2cc:	2a25      	cmp	r2, #37	; 0x25
 800b2ce:	d1f9      	bne.n	800b2c4 <_svfiprintf_r+0x50>
 800b2d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b2d4:	d00b      	beq.n	800b2ee <_svfiprintf_r+0x7a>
 800b2d6:	465b      	mov	r3, fp
 800b2d8:	4622      	mov	r2, r4
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f7ff ff6d 	bl	800b1bc <__ssputs_r>
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	f000 80aa 	beq.w	800b43c <_svfiprintf_r+0x1c8>
 800b2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ea:	445a      	add	r2, fp
 800b2ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 80a2 	beq.w	800b43c <_svfiprintf_r+0x1c8>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b302:	f10a 0a01 	add.w	sl, sl, #1
 800b306:	9304      	str	r3, [sp, #16]
 800b308:	9307      	str	r3, [sp, #28]
 800b30a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b30e:	931a      	str	r3, [sp, #104]	; 0x68
 800b310:	4654      	mov	r4, sl
 800b312:	2205      	movs	r2, #5
 800b314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b318:	4851      	ldr	r0, [pc, #324]	; (800b460 <_svfiprintf_r+0x1ec>)
 800b31a:	f000 fe8d 	bl	800c038 <memchr>
 800b31e:	9a04      	ldr	r2, [sp, #16]
 800b320:	b9d8      	cbnz	r0, 800b35a <_svfiprintf_r+0xe6>
 800b322:	06d0      	lsls	r0, r2, #27
 800b324:	bf44      	itt	mi
 800b326:	2320      	movmi	r3, #32
 800b328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b32c:	0711      	lsls	r1, r2, #28
 800b32e:	bf44      	itt	mi
 800b330:	232b      	movmi	r3, #43	; 0x2b
 800b332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b336:	f89a 3000 	ldrb.w	r3, [sl]
 800b33a:	2b2a      	cmp	r3, #42	; 0x2a
 800b33c:	d015      	beq.n	800b36a <_svfiprintf_r+0xf6>
 800b33e:	4654      	mov	r4, sl
 800b340:	2000      	movs	r0, #0
 800b342:	f04f 0c0a 	mov.w	ip, #10
 800b346:	9a07      	ldr	r2, [sp, #28]
 800b348:	4621      	mov	r1, r4
 800b34a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b34e:	3b30      	subs	r3, #48	; 0x30
 800b350:	2b09      	cmp	r3, #9
 800b352:	d94e      	bls.n	800b3f2 <_svfiprintf_r+0x17e>
 800b354:	b1b0      	cbz	r0, 800b384 <_svfiprintf_r+0x110>
 800b356:	9207      	str	r2, [sp, #28]
 800b358:	e014      	b.n	800b384 <_svfiprintf_r+0x110>
 800b35a:	eba0 0308 	sub.w	r3, r0, r8
 800b35e:	fa09 f303 	lsl.w	r3, r9, r3
 800b362:	4313      	orrs	r3, r2
 800b364:	46a2      	mov	sl, r4
 800b366:	9304      	str	r3, [sp, #16]
 800b368:	e7d2      	b.n	800b310 <_svfiprintf_r+0x9c>
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	1d19      	adds	r1, r3, #4
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	9103      	str	r1, [sp, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	bfbb      	ittet	lt
 800b376:	425b      	neglt	r3, r3
 800b378:	f042 0202 	orrlt.w	r2, r2, #2
 800b37c:	9307      	strge	r3, [sp, #28]
 800b37e:	9307      	strlt	r3, [sp, #28]
 800b380:	bfb8      	it	lt
 800b382:	9204      	strlt	r2, [sp, #16]
 800b384:	7823      	ldrb	r3, [r4, #0]
 800b386:	2b2e      	cmp	r3, #46	; 0x2e
 800b388:	d10c      	bne.n	800b3a4 <_svfiprintf_r+0x130>
 800b38a:	7863      	ldrb	r3, [r4, #1]
 800b38c:	2b2a      	cmp	r3, #42	; 0x2a
 800b38e:	d135      	bne.n	800b3fc <_svfiprintf_r+0x188>
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	3402      	adds	r4, #2
 800b394:	1d1a      	adds	r2, r3, #4
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	9203      	str	r2, [sp, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	bfb8      	it	lt
 800b39e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3a2:	9305      	str	r3, [sp, #20]
 800b3a4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b464 <_svfiprintf_r+0x1f0>
 800b3a8:	2203      	movs	r2, #3
 800b3aa:	4650      	mov	r0, sl
 800b3ac:	7821      	ldrb	r1, [r4, #0]
 800b3ae:	f000 fe43 	bl	800c038 <memchr>
 800b3b2:	b140      	cbz	r0, 800b3c6 <_svfiprintf_r+0x152>
 800b3b4:	2340      	movs	r3, #64	; 0x40
 800b3b6:	eba0 000a 	sub.w	r0, r0, sl
 800b3ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b3be:	9b04      	ldr	r3, [sp, #16]
 800b3c0:	3401      	adds	r4, #1
 800b3c2:	4303      	orrs	r3, r0
 800b3c4:	9304      	str	r3, [sp, #16]
 800b3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ca:	2206      	movs	r2, #6
 800b3cc:	4826      	ldr	r0, [pc, #152]	; (800b468 <_svfiprintf_r+0x1f4>)
 800b3ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3d2:	f000 fe31 	bl	800c038 <memchr>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d038      	beq.n	800b44c <_svfiprintf_r+0x1d8>
 800b3da:	4b24      	ldr	r3, [pc, #144]	; (800b46c <_svfiprintf_r+0x1f8>)
 800b3dc:	bb1b      	cbnz	r3, 800b426 <_svfiprintf_r+0x1b2>
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	3307      	adds	r3, #7
 800b3e2:	f023 0307 	bic.w	r3, r3, #7
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	9303      	str	r3, [sp, #12]
 800b3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ec:	4433      	add	r3, r6
 800b3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f0:	e767      	b.n	800b2c2 <_svfiprintf_r+0x4e>
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	2001      	movs	r0, #1
 800b3f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3fa:	e7a5      	b.n	800b348 <_svfiprintf_r+0xd4>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f04f 0c0a 	mov.w	ip, #10
 800b402:	4619      	mov	r1, r3
 800b404:	3401      	adds	r4, #1
 800b406:	9305      	str	r3, [sp, #20]
 800b408:	4620      	mov	r0, r4
 800b40a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b40e:	3a30      	subs	r2, #48	; 0x30
 800b410:	2a09      	cmp	r2, #9
 800b412:	d903      	bls.n	800b41c <_svfiprintf_r+0x1a8>
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0c5      	beq.n	800b3a4 <_svfiprintf_r+0x130>
 800b418:	9105      	str	r1, [sp, #20]
 800b41a:	e7c3      	b.n	800b3a4 <_svfiprintf_r+0x130>
 800b41c:	4604      	mov	r4, r0
 800b41e:	2301      	movs	r3, #1
 800b420:	fb0c 2101 	mla	r1, ip, r1, r2
 800b424:	e7f0      	b.n	800b408 <_svfiprintf_r+0x194>
 800b426:	ab03      	add	r3, sp, #12
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	462a      	mov	r2, r5
 800b42c:	4638      	mov	r0, r7
 800b42e:	4b10      	ldr	r3, [pc, #64]	; (800b470 <_svfiprintf_r+0x1fc>)
 800b430:	a904      	add	r1, sp, #16
 800b432:	f3af 8000 	nop.w
 800b436:	1c42      	adds	r2, r0, #1
 800b438:	4606      	mov	r6, r0
 800b43a:	d1d6      	bne.n	800b3ea <_svfiprintf_r+0x176>
 800b43c:	89ab      	ldrh	r3, [r5, #12]
 800b43e:	065b      	lsls	r3, r3, #25
 800b440:	f53f af2c 	bmi.w	800b29c <_svfiprintf_r+0x28>
 800b444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b446:	b01d      	add	sp, #116	; 0x74
 800b448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44c:	ab03      	add	r3, sp, #12
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	462a      	mov	r2, r5
 800b452:	4638      	mov	r0, r7
 800b454:	4b06      	ldr	r3, [pc, #24]	; (800b470 <_svfiprintf_r+0x1fc>)
 800b456:	a904      	add	r1, sp, #16
 800b458:	f000 f9d4 	bl	800b804 <_printf_i>
 800b45c:	e7eb      	b.n	800b436 <_svfiprintf_r+0x1c2>
 800b45e:	bf00      	nop
 800b460:	0800c585 	.word	0x0800c585
 800b464:	0800c58b 	.word	0x0800c58b
 800b468:	0800c58f 	.word	0x0800c58f
 800b46c:	00000000 	.word	0x00000000
 800b470:	0800b1bd 	.word	0x0800b1bd

0800b474 <__sfputc_r>:
 800b474:	6893      	ldr	r3, [r2, #8]
 800b476:	b410      	push	{r4}
 800b478:	3b01      	subs	r3, #1
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	6093      	str	r3, [r2, #8]
 800b47e:	da07      	bge.n	800b490 <__sfputc_r+0x1c>
 800b480:	6994      	ldr	r4, [r2, #24]
 800b482:	42a3      	cmp	r3, r4
 800b484:	db01      	blt.n	800b48a <__sfputc_r+0x16>
 800b486:	290a      	cmp	r1, #10
 800b488:	d102      	bne.n	800b490 <__sfputc_r+0x1c>
 800b48a:	bc10      	pop	{r4}
 800b48c:	f000 baf0 	b.w	800ba70 <__swbuf_r>
 800b490:	6813      	ldr	r3, [r2, #0]
 800b492:	1c58      	adds	r0, r3, #1
 800b494:	6010      	str	r0, [r2, #0]
 800b496:	7019      	strb	r1, [r3, #0]
 800b498:	4608      	mov	r0, r1
 800b49a:	bc10      	pop	{r4}
 800b49c:	4770      	bx	lr

0800b49e <__sfputs_r>:
 800b49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	460f      	mov	r7, r1
 800b4a4:	4614      	mov	r4, r2
 800b4a6:	18d5      	adds	r5, r2, r3
 800b4a8:	42ac      	cmp	r4, r5
 800b4aa:	d101      	bne.n	800b4b0 <__sfputs_r+0x12>
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	e007      	b.n	800b4c0 <__sfputs_r+0x22>
 800b4b0:	463a      	mov	r2, r7
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b8:	f7ff ffdc 	bl	800b474 <__sfputc_r>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d1f3      	bne.n	800b4a8 <__sfputs_r+0xa>
 800b4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4c4 <_vfiprintf_r>:
 800b4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c8:	460d      	mov	r5, r1
 800b4ca:	4614      	mov	r4, r2
 800b4cc:	4698      	mov	r8, r3
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	b09d      	sub	sp, #116	; 0x74
 800b4d2:	b118      	cbz	r0, 800b4dc <_vfiprintf_r+0x18>
 800b4d4:	6983      	ldr	r3, [r0, #24]
 800b4d6:	b90b      	cbnz	r3, 800b4dc <_vfiprintf_r+0x18>
 800b4d8:	f000 fca8 	bl	800be2c <__sinit>
 800b4dc:	4b89      	ldr	r3, [pc, #548]	; (800b704 <_vfiprintf_r+0x240>)
 800b4de:	429d      	cmp	r5, r3
 800b4e0:	d11b      	bne.n	800b51a <_vfiprintf_r+0x56>
 800b4e2:	6875      	ldr	r5, [r6, #4]
 800b4e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4e6:	07d9      	lsls	r1, r3, #31
 800b4e8:	d405      	bmi.n	800b4f6 <_vfiprintf_r+0x32>
 800b4ea:	89ab      	ldrh	r3, [r5, #12]
 800b4ec:	059a      	lsls	r2, r3, #22
 800b4ee:	d402      	bmi.n	800b4f6 <_vfiprintf_r+0x32>
 800b4f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4f2:	f000 fd39 	bl	800bf68 <__retarget_lock_acquire_recursive>
 800b4f6:	89ab      	ldrh	r3, [r5, #12]
 800b4f8:	071b      	lsls	r3, r3, #28
 800b4fa:	d501      	bpl.n	800b500 <_vfiprintf_r+0x3c>
 800b4fc:	692b      	ldr	r3, [r5, #16]
 800b4fe:	b9eb      	cbnz	r3, 800b53c <_vfiprintf_r+0x78>
 800b500:	4629      	mov	r1, r5
 800b502:	4630      	mov	r0, r6
 800b504:	f000 fb06 	bl	800bb14 <__swsetup_r>
 800b508:	b1c0      	cbz	r0, 800b53c <_vfiprintf_r+0x78>
 800b50a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b50c:	07dc      	lsls	r4, r3, #31
 800b50e:	d50e      	bpl.n	800b52e <_vfiprintf_r+0x6a>
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	b01d      	add	sp, #116	; 0x74
 800b516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51a:	4b7b      	ldr	r3, [pc, #492]	; (800b708 <_vfiprintf_r+0x244>)
 800b51c:	429d      	cmp	r5, r3
 800b51e:	d101      	bne.n	800b524 <_vfiprintf_r+0x60>
 800b520:	68b5      	ldr	r5, [r6, #8]
 800b522:	e7df      	b.n	800b4e4 <_vfiprintf_r+0x20>
 800b524:	4b79      	ldr	r3, [pc, #484]	; (800b70c <_vfiprintf_r+0x248>)
 800b526:	429d      	cmp	r5, r3
 800b528:	bf08      	it	eq
 800b52a:	68f5      	ldreq	r5, [r6, #12]
 800b52c:	e7da      	b.n	800b4e4 <_vfiprintf_r+0x20>
 800b52e:	89ab      	ldrh	r3, [r5, #12]
 800b530:	0598      	lsls	r0, r3, #22
 800b532:	d4ed      	bmi.n	800b510 <_vfiprintf_r+0x4c>
 800b534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b536:	f000 fd18 	bl	800bf6a <__retarget_lock_release_recursive>
 800b53a:	e7e9      	b.n	800b510 <_vfiprintf_r+0x4c>
 800b53c:	2300      	movs	r3, #0
 800b53e:	9309      	str	r3, [sp, #36]	; 0x24
 800b540:	2320      	movs	r3, #32
 800b542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b546:	2330      	movs	r3, #48	; 0x30
 800b548:	f04f 0901 	mov.w	r9, #1
 800b54c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b550:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b710 <_vfiprintf_r+0x24c>
 800b554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b558:	4623      	mov	r3, r4
 800b55a:	469a      	mov	sl, r3
 800b55c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b560:	b10a      	cbz	r2, 800b566 <_vfiprintf_r+0xa2>
 800b562:	2a25      	cmp	r2, #37	; 0x25
 800b564:	d1f9      	bne.n	800b55a <_vfiprintf_r+0x96>
 800b566:	ebba 0b04 	subs.w	fp, sl, r4
 800b56a:	d00b      	beq.n	800b584 <_vfiprintf_r+0xc0>
 800b56c:	465b      	mov	r3, fp
 800b56e:	4622      	mov	r2, r4
 800b570:	4629      	mov	r1, r5
 800b572:	4630      	mov	r0, r6
 800b574:	f7ff ff93 	bl	800b49e <__sfputs_r>
 800b578:	3001      	adds	r0, #1
 800b57a:	f000 80aa 	beq.w	800b6d2 <_vfiprintf_r+0x20e>
 800b57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b580:	445a      	add	r2, fp
 800b582:	9209      	str	r2, [sp, #36]	; 0x24
 800b584:	f89a 3000 	ldrb.w	r3, [sl]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 80a2 	beq.w	800b6d2 <_vfiprintf_r+0x20e>
 800b58e:	2300      	movs	r3, #0
 800b590:	f04f 32ff 	mov.w	r2, #4294967295
 800b594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b598:	f10a 0a01 	add.w	sl, sl, #1
 800b59c:	9304      	str	r3, [sp, #16]
 800b59e:	9307      	str	r3, [sp, #28]
 800b5a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5a4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5a6:	4654      	mov	r4, sl
 800b5a8:	2205      	movs	r2, #5
 800b5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ae:	4858      	ldr	r0, [pc, #352]	; (800b710 <_vfiprintf_r+0x24c>)
 800b5b0:	f000 fd42 	bl	800c038 <memchr>
 800b5b4:	9a04      	ldr	r2, [sp, #16]
 800b5b6:	b9d8      	cbnz	r0, 800b5f0 <_vfiprintf_r+0x12c>
 800b5b8:	06d1      	lsls	r1, r2, #27
 800b5ba:	bf44      	itt	mi
 800b5bc:	2320      	movmi	r3, #32
 800b5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5c2:	0713      	lsls	r3, r2, #28
 800b5c4:	bf44      	itt	mi
 800b5c6:	232b      	movmi	r3, #43	; 0x2b
 800b5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d2:	d015      	beq.n	800b600 <_vfiprintf_r+0x13c>
 800b5d4:	4654      	mov	r4, sl
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	f04f 0c0a 	mov.w	ip, #10
 800b5dc:	9a07      	ldr	r2, [sp, #28]
 800b5de:	4621      	mov	r1, r4
 800b5e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5e4:	3b30      	subs	r3, #48	; 0x30
 800b5e6:	2b09      	cmp	r3, #9
 800b5e8:	d94e      	bls.n	800b688 <_vfiprintf_r+0x1c4>
 800b5ea:	b1b0      	cbz	r0, 800b61a <_vfiprintf_r+0x156>
 800b5ec:	9207      	str	r2, [sp, #28]
 800b5ee:	e014      	b.n	800b61a <_vfiprintf_r+0x156>
 800b5f0:	eba0 0308 	sub.w	r3, r0, r8
 800b5f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	46a2      	mov	sl, r4
 800b5fc:	9304      	str	r3, [sp, #16]
 800b5fe:	e7d2      	b.n	800b5a6 <_vfiprintf_r+0xe2>
 800b600:	9b03      	ldr	r3, [sp, #12]
 800b602:	1d19      	adds	r1, r3, #4
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	9103      	str	r1, [sp, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	bfbb      	ittet	lt
 800b60c:	425b      	neglt	r3, r3
 800b60e:	f042 0202 	orrlt.w	r2, r2, #2
 800b612:	9307      	strge	r3, [sp, #28]
 800b614:	9307      	strlt	r3, [sp, #28]
 800b616:	bfb8      	it	lt
 800b618:	9204      	strlt	r2, [sp, #16]
 800b61a:	7823      	ldrb	r3, [r4, #0]
 800b61c:	2b2e      	cmp	r3, #46	; 0x2e
 800b61e:	d10c      	bne.n	800b63a <_vfiprintf_r+0x176>
 800b620:	7863      	ldrb	r3, [r4, #1]
 800b622:	2b2a      	cmp	r3, #42	; 0x2a
 800b624:	d135      	bne.n	800b692 <_vfiprintf_r+0x1ce>
 800b626:	9b03      	ldr	r3, [sp, #12]
 800b628:	3402      	adds	r4, #2
 800b62a:	1d1a      	adds	r2, r3, #4
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	9203      	str	r2, [sp, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	bfb8      	it	lt
 800b634:	f04f 33ff 	movlt.w	r3, #4294967295
 800b638:	9305      	str	r3, [sp, #20]
 800b63a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b714 <_vfiprintf_r+0x250>
 800b63e:	2203      	movs	r2, #3
 800b640:	4650      	mov	r0, sl
 800b642:	7821      	ldrb	r1, [r4, #0]
 800b644:	f000 fcf8 	bl	800c038 <memchr>
 800b648:	b140      	cbz	r0, 800b65c <_vfiprintf_r+0x198>
 800b64a:	2340      	movs	r3, #64	; 0x40
 800b64c:	eba0 000a 	sub.w	r0, r0, sl
 800b650:	fa03 f000 	lsl.w	r0, r3, r0
 800b654:	9b04      	ldr	r3, [sp, #16]
 800b656:	3401      	adds	r4, #1
 800b658:	4303      	orrs	r3, r0
 800b65a:	9304      	str	r3, [sp, #16]
 800b65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b660:	2206      	movs	r2, #6
 800b662:	482d      	ldr	r0, [pc, #180]	; (800b718 <_vfiprintf_r+0x254>)
 800b664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b668:	f000 fce6 	bl	800c038 <memchr>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d03f      	beq.n	800b6f0 <_vfiprintf_r+0x22c>
 800b670:	4b2a      	ldr	r3, [pc, #168]	; (800b71c <_vfiprintf_r+0x258>)
 800b672:	bb1b      	cbnz	r3, 800b6bc <_vfiprintf_r+0x1f8>
 800b674:	9b03      	ldr	r3, [sp, #12]
 800b676:	3307      	adds	r3, #7
 800b678:	f023 0307 	bic.w	r3, r3, #7
 800b67c:	3308      	adds	r3, #8
 800b67e:	9303      	str	r3, [sp, #12]
 800b680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b682:	443b      	add	r3, r7
 800b684:	9309      	str	r3, [sp, #36]	; 0x24
 800b686:	e767      	b.n	800b558 <_vfiprintf_r+0x94>
 800b688:	460c      	mov	r4, r1
 800b68a:	2001      	movs	r0, #1
 800b68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b690:	e7a5      	b.n	800b5de <_vfiprintf_r+0x11a>
 800b692:	2300      	movs	r3, #0
 800b694:	f04f 0c0a 	mov.w	ip, #10
 800b698:	4619      	mov	r1, r3
 800b69a:	3401      	adds	r4, #1
 800b69c:	9305      	str	r3, [sp, #20]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6a4:	3a30      	subs	r2, #48	; 0x30
 800b6a6:	2a09      	cmp	r2, #9
 800b6a8:	d903      	bls.n	800b6b2 <_vfiprintf_r+0x1ee>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d0c5      	beq.n	800b63a <_vfiprintf_r+0x176>
 800b6ae:	9105      	str	r1, [sp, #20]
 800b6b0:	e7c3      	b.n	800b63a <_vfiprintf_r+0x176>
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ba:	e7f0      	b.n	800b69e <_vfiprintf_r+0x1da>
 800b6bc:	ab03      	add	r3, sp, #12
 800b6be:	9300      	str	r3, [sp, #0]
 800b6c0:	462a      	mov	r2, r5
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	4b16      	ldr	r3, [pc, #88]	; (800b720 <_vfiprintf_r+0x25c>)
 800b6c6:	a904      	add	r1, sp, #16
 800b6c8:	f3af 8000 	nop.w
 800b6cc:	4607      	mov	r7, r0
 800b6ce:	1c78      	adds	r0, r7, #1
 800b6d0:	d1d6      	bne.n	800b680 <_vfiprintf_r+0x1bc>
 800b6d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6d4:	07d9      	lsls	r1, r3, #31
 800b6d6:	d405      	bmi.n	800b6e4 <_vfiprintf_r+0x220>
 800b6d8:	89ab      	ldrh	r3, [r5, #12]
 800b6da:	059a      	lsls	r2, r3, #22
 800b6dc:	d402      	bmi.n	800b6e4 <_vfiprintf_r+0x220>
 800b6de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e0:	f000 fc43 	bl	800bf6a <__retarget_lock_release_recursive>
 800b6e4:	89ab      	ldrh	r3, [r5, #12]
 800b6e6:	065b      	lsls	r3, r3, #25
 800b6e8:	f53f af12 	bmi.w	800b510 <_vfiprintf_r+0x4c>
 800b6ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ee:	e711      	b.n	800b514 <_vfiprintf_r+0x50>
 800b6f0:	ab03      	add	r3, sp, #12
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	462a      	mov	r2, r5
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	4b09      	ldr	r3, [pc, #36]	; (800b720 <_vfiprintf_r+0x25c>)
 800b6fa:	a904      	add	r1, sp, #16
 800b6fc:	f000 f882 	bl	800b804 <_printf_i>
 800b700:	e7e4      	b.n	800b6cc <_vfiprintf_r+0x208>
 800b702:	bf00      	nop
 800b704:	0800c5d8 	.word	0x0800c5d8
 800b708:	0800c5f8 	.word	0x0800c5f8
 800b70c:	0800c5b8 	.word	0x0800c5b8
 800b710:	0800c585 	.word	0x0800c585
 800b714:	0800c58b 	.word	0x0800c58b
 800b718:	0800c58f 	.word	0x0800c58f
 800b71c:	00000000 	.word	0x00000000
 800b720:	0800b49f 	.word	0x0800b49f

0800b724 <_printf_common>:
 800b724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b728:	4616      	mov	r6, r2
 800b72a:	4699      	mov	r9, r3
 800b72c:	688a      	ldr	r2, [r1, #8]
 800b72e:	690b      	ldr	r3, [r1, #16]
 800b730:	4607      	mov	r7, r0
 800b732:	4293      	cmp	r3, r2
 800b734:	bfb8      	it	lt
 800b736:	4613      	movlt	r3, r2
 800b738:	6033      	str	r3, [r6, #0]
 800b73a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b73e:	460c      	mov	r4, r1
 800b740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b744:	b10a      	cbz	r2, 800b74a <_printf_common+0x26>
 800b746:	3301      	adds	r3, #1
 800b748:	6033      	str	r3, [r6, #0]
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	0699      	lsls	r1, r3, #26
 800b74e:	bf42      	ittt	mi
 800b750:	6833      	ldrmi	r3, [r6, #0]
 800b752:	3302      	addmi	r3, #2
 800b754:	6033      	strmi	r3, [r6, #0]
 800b756:	6825      	ldr	r5, [r4, #0]
 800b758:	f015 0506 	ands.w	r5, r5, #6
 800b75c:	d106      	bne.n	800b76c <_printf_common+0x48>
 800b75e:	f104 0a19 	add.w	sl, r4, #25
 800b762:	68e3      	ldr	r3, [r4, #12]
 800b764:	6832      	ldr	r2, [r6, #0]
 800b766:	1a9b      	subs	r3, r3, r2
 800b768:	42ab      	cmp	r3, r5
 800b76a:	dc28      	bgt.n	800b7be <_printf_common+0x9a>
 800b76c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b770:	1e13      	subs	r3, r2, #0
 800b772:	6822      	ldr	r2, [r4, #0]
 800b774:	bf18      	it	ne
 800b776:	2301      	movne	r3, #1
 800b778:	0692      	lsls	r2, r2, #26
 800b77a:	d42d      	bmi.n	800b7d8 <_printf_common+0xb4>
 800b77c:	4649      	mov	r1, r9
 800b77e:	4638      	mov	r0, r7
 800b780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b784:	47c0      	blx	r8
 800b786:	3001      	adds	r0, #1
 800b788:	d020      	beq.n	800b7cc <_printf_common+0xa8>
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	68e5      	ldr	r5, [r4, #12]
 800b78e:	f003 0306 	and.w	r3, r3, #6
 800b792:	2b04      	cmp	r3, #4
 800b794:	bf18      	it	ne
 800b796:	2500      	movne	r5, #0
 800b798:	6832      	ldr	r2, [r6, #0]
 800b79a:	f04f 0600 	mov.w	r6, #0
 800b79e:	68a3      	ldr	r3, [r4, #8]
 800b7a0:	bf08      	it	eq
 800b7a2:	1aad      	subeq	r5, r5, r2
 800b7a4:	6922      	ldr	r2, [r4, #16]
 800b7a6:	bf08      	it	eq
 800b7a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	bfc4      	itt	gt
 800b7b0:	1a9b      	subgt	r3, r3, r2
 800b7b2:	18ed      	addgt	r5, r5, r3
 800b7b4:	341a      	adds	r4, #26
 800b7b6:	42b5      	cmp	r5, r6
 800b7b8:	d11a      	bne.n	800b7f0 <_printf_common+0xcc>
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	e008      	b.n	800b7d0 <_printf_common+0xac>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	4652      	mov	r2, sl
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	47c0      	blx	r8
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	d103      	bne.n	800b7d4 <_printf_common+0xb0>
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d4:	3501      	adds	r5, #1
 800b7d6:	e7c4      	b.n	800b762 <_printf_common+0x3e>
 800b7d8:	2030      	movs	r0, #48	; 0x30
 800b7da:	18e1      	adds	r1, r4, r3
 800b7dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7e0:	1c5a      	adds	r2, r3, #1
 800b7e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7e6:	4422      	add	r2, r4
 800b7e8:	3302      	adds	r3, #2
 800b7ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7ee:	e7c5      	b.n	800b77c <_printf_common+0x58>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	4622      	mov	r2, r4
 800b7f4:	4649      	mov	r1, r9
 800b7f6:	4638      	mov	r0, r7
 800b7f8:	47c0      	blx	r8
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	d0e6      	beq.n	800b7cc <_printf_common+0xa8>
 800b7fe:	3601      	adds	r6, #1
 800b800:	e7d9      	b.n	800b7b6 <_printf_common+0x92>
	...

0800b804 <_printf_i>:
 800b804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b808:	7e0f      	ldrb	r7, [r1, #24]
 800b80a:	4691      	mov	r9, r2
 800b80c:	2f78      	cmp	r7, #120	; 0x78
 800b80e:	4680      	mov	r8, r0
 800b810:	460c      	mov	r4, r1
 800b812:	469a      	mov	sl, r3
 800b814:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b81a:	d807      	bhi.n	800b82c <_printf_i+0x28>
 800b81c:	2f62      	cmp	r7, #98	; 0x62
 800b81e:	d80a      	bhi.n	800b836 <_printf_i+0x32>
 800b820:	2f00      	cmp	r7, #0
 800b822:	f000 80d9 	beq.w	800b9d8 <_printf_i+0x1d4>
 800b826:	2f58      	cmp	r7, #88	; 0x58
 800b828:	f000 80a4 	beq.w	800b974 <_printf_i+0x170>
 800b82c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b834:	e03a      	b.n	800b8ac <_printf_i+0xa8>
 800b836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b83a:	2b15      	cmp	r3, #21
 800b83c:	d8f6      	bhi.n	800b82c <_printf_i+0x28>
 800b83e:	a101      	add	r1, pc, #4	; (adr r1, 800b844 <_printf_i+0x40>)
 800b840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b844:	0800b89d 	.word	0x0800b89d
 800b848:	0800b8b1 	.word	0x0800b8b1
 800b84c:	0800b82d 	.word	0x0800b82d
 800b850:	0800b82d 	.word	0x0800b82d
 800b854:	0800b82d 	.word	0x0800b82d
 800b858:	0800b82d 	.word	0x0800b82d
 800b85c:	0800b8b1 	.word	0x0800b8b1
 800b860:	0800b82d 	.word	0x0800b82d
 800b864:	0800b82d 	.word	0x0800b82d
 800b868:	0800b82d 	.word	0x0800b82d
 800b86c:	0800b82d 	.word	0x0800b82d
 800b870:	0800b9bf 	.word	0x0800b9bf
 800b874:	0800b8e1 	.word	0x0800b8e1
 800b878:	0800b9a1 	.word	0x0800b9a1
 800b87c:	0800b82d 	.word	0x0800b82d
 800b880:	0800b82d 	.word	0x0800b82d
 800b884:	0800b9e1 	.word	0x0800b9e1
 800b888:	0800b82d 	.word	0x0800b82d
 800b88c:	0800b8e1 	.word	0x0800b8e1
 800b890:	0800b82d 	.word	0x0800b82d
 800b894:	0800b82d 	.word	0x0800b82d
 800b898:	0800b9a9 	.word	0x0800b9a9
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	1d1a      	adds	r2, r3, #4
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	602a      	str	r2, [r5, #0]
 800b8a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e0a4      	b.n	800b9fa <_printf_i+0x1f6>
 800b8b0:	6820      	ldr	r0, [r4, #0]
 800b8b2:	6829      	ldr	r1, [r5, #0]
 800b8b4:	0606      	lsls	r6, r0, #24
 800b8b6:	f101 0304 	add.w	r3, r1, #4
 800b8ba:	d50a      	bpl.n	800b8d2 <_printf_i+0xce>
 800b8bc:	680e      	ldr	r6, [r1, #0]
 800b8be:	602b      	str	r3, [r5, #0]
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	da03      	bge.n	800b8cc <_printf_i+0xc8>
 800b8c4:	232d      	movs	r3, #45	; 0x2d
 800b8c6:	4276      	negs	r6, r6
 800b8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8cc:	230a      	movs	r3, #10
 800b8ce:	485e      	ldr	r0, [pc, #376]	; (800ba48 <_printf_i+0x244>)
 800b8d0:	e019      	b.n	800b906 <_printf_i+0x102>
 800b8d2:	680e      	ldr	r6, [r1, #0]
 800b8d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8d8:	602b      	str	r3, [r5, #0]
 800b8da:	bf18      	it	ne
 800b8dc:	b236      	sxthne	r6, r6
 800b8de:	e7ef      	b.n	800b8c0 <_printf_i+0xbc>
 800b8e0:	682b      	ldr	r3, [r5, #0]
 800b8e2:	6820      	ldr	r0, [r4, #0]
 800b8e4:	1d19      	adds	r1, r3, #4
 800b8e6:	6029      	str	r1, [r5, #0]
 800b8e8:	0601      	lsls	r1, r0, #24
 800b8ea:	d501      	bpl.n	800b8f0 <_printf_i+0xec>
 800b8ec:	681e      	ldr	r6, [r3, #0]
 800b8ee:	e002      	b.n	800b8f6 <_printf_i+0xf2>
 800b8f0:	0646      	lsls	r6, r0, #25
 800b8f2:	d5fb      	bpl.n	800b8ec <_printf_i+0xe8>
 800b8f4:	881e      	ldrh	r6, [r3, #0]
 800b8f6:	2f6f      	cmp	r7, #111	; 0x6f
 800b8f8:	bf0c      	ite	eq
 800b8fa:	2308      	moveq	r3, #8
 800b8fc:	230a      	movne	r3, #10
 800b8fe:	4852      	ldr	r0, [pc, #328]	; (800ba48 <_printf_i+0x244>)
 800b900:	2100      	movs	r1, #0
 800b902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b906:	6865      	ldr	r5, [r4, #4]
 800b908:	2d00      	cmp	r5, #0
 800b90a:	bfa8      	it	ge
 800b90c:	6821      	ldrge	r1, [r4, #0]
 800b90e:	60a5      	str	r5, [r4, #8]
 800b910:	bfa4      	itt	ge
 800b912:	f021 0104 	bicge.w	r1, r1, #4
 800b916:	6021      	strge	r1, [r4, #0]
 800b918:	b90e      	cbnz	r6, 800b91e <_printf_i+0x11a>
 800b91a:	2d00      	cmp	r5, #0
 800b91c:	d04d      	beq.n	800b9ba <_printf_i+0x1b6>
 800b91e:	4615      	mov	r5, r2
 800b920:	fbb6 f1f3 	udiv	r1, r6, r3
 800b924:	fb03 6711 	mls	r7, r3, r1, r6
 800b928:	5dc7      	ldrb	r7, [r0, r7]
 800b92a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b92e:	4637      	mov	r7, r6
 800b930:	42bb      	cmp	r3, r7
 800b932:	460e      	mov	r6, r1
 800b934:	d9f4      	bls.n	800b920 <_printf_i+0x11c>
 800b936:	2b08      	cmp	r3, #8
 800b938:	d10b      	bne.n	800b952 <_printf_i+0x14e>
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	07de      	lsls	r6, r3, #31
 800b93e:	d508      	bpl.n	800b952 <_printf_i+0x14e>
 800b940:	6923      	ldr	r3, [r4, #16]
 800b942:	6861      	ldr	r1, [r4, #4]
 800b944:	4299      	cmp	r1, r3
 800b946:	bfde      	ittt	le
 800b948:	2330      	movle	r3, #48	; 0x30
 800b94a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b94e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b952:	1b52      	subs	r2, r2, r5
 800b954:	6122      	str	r2, [r4, #16]
 800b956:	464b      	mov	r3, r9
 800b958:	4621      	mov	r1, r4
 800b95a:	4640      	mov	r0, r8
 800b95c:	f8cd a000 	str.w	sl, [sp]
 800b960:	aa03      	add	r2, sp, #12
 800b962:	f7ff fedf 	bl	800b724 <_printf_common>
 800b966:	3001      	adds	r0, #1
 800b968:	d14c      	bne.n	800ba04 <_printf_i+0x200>
 800b96a:	f04f 30ff 	mov.w	r0, #4294967295
 800b96e:	b004      	add	sp, #16
 800b970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b974:	4834      	ldr	r0, [pc, #208]	; (800ba48 <_printf_i+0x244>)
 800b976:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b97a:	6829      	ldr	r1, [r5, #0]
 800b97c:	6823      	ldr	r3, [r4, #0]
 800b97e:	f851 6b04 	ldr.w	r6, [r1], #4
 800b982:	6029      	str	r1, [r5, #0]
 800b984:	061d      	lsls	r5, r3, #24
 800b986:	d514      	bpl.n	800b9b2 <_printf_i+0x1ae>
 800b988:	07df      	lsls	r7, r3, #31
 800b98a:	bf44      	itt	mi
 800b98c:	f043 0320 	orrmi.w	r3, r3, #32
 800b990:	6023      	strmi	r3, [r4, #0]
 800b992:	b91e      	cbnz	r6, 800b99c <_printf_i+0x198>
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	f023 0320 	bic.w	r3, r3, #32
 800b99a:	6023      	str	r3, [r4, #0]
 800b99c:	2310      	movs	r3, #16
 800b99e:	e7af      	b.n	800b900 <_printf_i+0xfc>
 800b9a0:	6823      	ldr	r3, [r4, #0]
 800b9a2:	f043 0320 	orr.w	r3, r3, #32
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	2378      	movs	r3, #120	; 0x78
 800b9aa:	4828      	ldr	r0, [pc, #160]	; (800ba4c <_printf_i+0x248>)
 800b9ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9b0:	e7e3      	b.n	800b97a <_printf_i+0x176>
 800b9b2:	0659      	lsls	r1, r3, #25
 800b9b4:	bf48      	it	mi
 800b9b6:	b2b6      	uxthmi	r6, r6
 800b9b8:	e7e6      	b.n	800b988 <_printf_i+0x184>
 800b9ba:	4615      	mov	r5, r2
 800b9bc:	e7bb      	b.n	800b936 <_printf_i+0x132>
 800b9be:	682b      	ldr	r3, [r5, #0]
 800b9c0:	6826      	ldr	r6, [r4, #0]
 800b9c2:	1d18      	adds	r0, r3, #4
 800b9c4:	6961      	ldr	r1, [r4, #20]
 800b9c6:	6028      	str	r0, [r5, #0]
 800b9c8:	0635      	lsls	r5, r6, #24
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	d501      	bpl.n	800b9d2 <_printf_i+0x1ce>
 800b9ce:	6019      	str	r1, [r3, #0]
 800b9d0:	e002      	b.n	800b9d8 <_printf_i+0x1d4>
 800b9d2:	0670      	lsls	r0, r6, #25
 800b9d4:	d5fb      	bpl.n	800b9ce <_printf_i+0x1ca>
 800b9d6:	8019      	strh	r1, [r3, #0]
 800b9d8:	2300      	movs	r3, #0
 800b9da:	4615      	mov	r5, r2
 800b9dc:	6123      	str	r3, [r4, #16]
 800b9de:	e7ba      	b.n	800b956 <_printf_i+0x152>
 800b9e0:	682b      	ldr	r3, [r5, #0]
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	1d1a      	adds	r2, r3, #4
 800b9e6:	602a      	str	r2, [r5, #0]
 800b9e8:	681d      	ldr	r5, [r3, #0]
 800b9ea:	6862      	ldr	r2, [r4, #4]
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f000 fb23 	bl	800c038 <memchr>
 800b9f2:	b108      	cbz	r0, 800b9f8 <_printf_i+0x1f4>
 800b9f4:	1b40      	subs	r0, r0, r5
 800b9f6:	6060      	str	r0, [r4, #4]
 800b9f8:	6863      	ldr	r3, [r4, #4]
 800b9fa:	6123      	str	r3, [r4, #16]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba02:	e7a8      	b.n	800b956 <_printf_i+0x152>
 800ba04:	462a      	mov	r2, r5
 800ba06:	4649      	mov	r1, r9
 800ba08:	4640      	mov	r0, r8
 800ba0a:	6923      	ldr	r3, [r4, #16]
 800ba0c:	47d0      	blx	sl
 800ba0e:	3001      	adds	r0, #1
 800ba10:	d0ab      	beq.n	800b96a <_printf_i+0x166>
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	079b      	lsls	r3, r3, #30
 800ba16:	d413      	bmi.n	800ba40 <_printf_i+0x23c>
 800ba18:	68e0      	ldr	r0, [r4, #12]
 800ba1a:	9b03      	ldr	r3, [sp, #12]
 800ba1c:	4298      	cmp	r0, r3
 800ba1e:	bfb8      	it	lt
 800ba20:	4618      	movlt	r0, r3
 800ba22:	e7a4      	b.n	800b96e <_printf_i+0x16a>
 800ba24:	2301      	movs	r3, #1
 800ba26:	4632      	mov	r2, r6
 800ba28:	4649      	mov	r1, r9
 800ba2a:	4640      	mov	r0, r8
 800ba2c:	47d0      	blx	sl
 800ba2e:	3001      	adds	r0, #1
 800ba30:	d09b      	beq.n	800b96a <_printf_i+0x166>
 800ba32:	3501      	adds	r5, #1
 800ba34:	68e3      	ldr	r3, [r4, #12]
 800ba36:	9903      	ldr	r1, [sp, #12]
 800ba38:	1a5b      	subs	r3, r3, r1
 800ba3a:	42ab      	cmp	r3, r5
 800ba3c:	dcf2      	bgt.n	800ba24 <_printf_i+0x220>
 800ba3e:	e7eb      	b.n	800ba18 <_printf_i+0x214>
 800ba40:	2500      	movs	r5, #0
 800ba42:	f104 0619 	add.w	r6, r4, #25
 800ba46:	e7f5      	b.n	800ba34 <_printf_i+0x230>
 800ba48:	0800c596 	.word	0x0800c596
 800ba4c:	0800c5a7 	.word	0x0800c5a7

0800ba50 <_sbrk_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	2300      	movs	r3, #0
 800ba54:	4d05      	ldr	r5, [pc, #20]	; (800ba6c <_sbrk_r+0x1c>)
 800ba56:	4604      	mov	r4, r0
 800ba58:	4608      	mov	r0, r1
 800ba5a:	602b      	str	r3, [r5, #0]
 800ba5c:	f7f6 f852 	bl	8001b04 <_sbrk>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_sbrk_r+0x1a>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_sbrk_r+0x1a>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	20000bb8 	.word	0x20000bb8

0800ba70 <__swbuf_r>:
 800ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba72:	460e      	mov	r6, r1
 800ba74:	4614      	mov	r4, r2
 800ba76:	4605      	mov	r5, r0
 800ba78:	b118      	cbz	r0, 800ba82 <__swbuf_r+0x12>
 800ba7a:	6983      	ldr	r3, [r0, #24]
 800ba7c:	b90b      	cbnz	r3, 800ba82 <__swbuf_r+0x12>
 800ba7e:	f000 f9d5 	bl	800be2c <__sinit>
 800ba82:	4b21      	ldr	r3, [pc, #132]	; (800bb08 <__swbuf_r+0x98>)
 800ba84:	429c      	cmp	r4, r3
 800ba86:	d12b      	bne.n	800bae0 <__swbuf_r+0x70>
 800ba88:	686c      	ldr	r4, [r5, #4]
 800ba8a:	69a3      	ldr	r3, [r4, #24]
 800ba8c:	60a3      	str	r3, [r4, #8]
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	071a      	lsls	r2, r3, #28
 800ba92:	d52f      	bpl.n	800baf4 <__swbuf_r+0x84>
 800ba94:	6923      	ldr	r3, [r4, #16]
 800ba96:	b36b      	cbz	r3, 800baf4 <__swbuf_r+0x84>
 800ba98:	6923      	ldr	r3, [r4, #16]
 800ba9a:	6820      	ldr	r0, [r4, #0]
 800ba9c:	b2f6      	uxtb	r6, r6
 800ba9e:	1ac0      	subs	r0, r0, r3
 800baa0:	6963      	ldr	r3, [r4, #20]
 800baa2:	4637      	mov	r7, r6
 800baa4:	4283      	cmp	r3, r0
 800baa6:	dc04      	bgt.n	800bab2 <__swbuf_r+0x42>
 800baa8:	4621      	mov	r1, r4
 800baaa:	4628      	mov	r0, r5
 800baac:	f000 f92a 	bl	800bd04 <_fflush_r>
 800bab0:	bb30      	cbnz	r0, 800bb00 <__swbuf_r+0x90>
 800bab2:	68a3      	ldr	r3, [r4, #8]
 800bab4:	3001      	adds	r0, #1
 800bab6:	3b01      	subs	r3, #1
 800bab8:	60a3      	str	r3, [r4, #8]
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	1c5a      	adds	r2, r3, #1
 800babe:	6022      	str	r2, [r4, #0]
 800bac0:	701e      	strb	r6, [r3, #0]
 800bac2:	6963      	ldr	r3, [r4, #20]
 800bac4:	4283      	cmp	r3, r0
 800bac6:	d004      	beq.n	800bad2 <__swbuf_r+0x62>
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	07db      	lsls	r3, r3, #31
 800bacc:	d506      	bpl.n	800badc <__swbuf_r+0x6c>
 800bace:	2e0a      	cmp	r6, #10
 800bad0:	d104      	bne.n	800badc <__swbuf_r+0x6c>
 800bad2:	4621      	mov	r1, r4
 800bad4:	4628      	mov	r0, r5
 800bad6:	f000 f915 	bl	800bd04 <_fflush_r>
 800bada:	b988      	cbnz	r0, 800bb00 <__swbuf_r+0x90>
 800badc:	4638      	mov	r0, r7
 800bade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bae0:	4b0a      	ldr	r3, [pc, #40]	; (800bb0c <__swbuf_r+0x9c>)
 800bae2:	429c      	cmp	r4, r3
 800bae4:	d101      	bne.n	800baea <__swbuf_r+0x7a>
 800bae6:	68ac      	ldr	r4, [r5, #8]
 800bae8:	e7cf      	b.n	800ba8a <__swbuf_r+0x1a>
 800baea:	4b09      	ldr	r3, [pc, #36]	; (800bb10 <__swbuf_r+0xa0>)
 800baec:	429c      	cmp	r4, r3
 800baee:	bf08      	it	eq
 800baf0:	68ec      	ldreq	r4, [r5, #12]
 800baf2:	e7ca      	b.n	800ba8a <__swbuf_r+0x1a>
 800baf4:	4621      	mov	r1, r4
 800baf6:	4628      	mov	r0, r5
 800baf8:	f000 f80c 	bl	800bb14 <__swsetup_r>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d0cb      	beq.n	800ba98 <__swbuf_r+0x28>
 800bb00:	f04f 37ff 	mov.w	r7, #4294967295
 800bb04:	e7ea      	b.n	800badc <__swbuf_r+0x6c>
 800bb06:	bf00      	nop
 800bb08:	0800c5d8 	.word	0x0800c5d8
 800bb0c:	0800c5f8 	.word	0x0800c5f8
 800bb10:	0800c5b8 	.word	0x0800c5b8

0800bb14 <__swsetup_r>:
 800bb14:	4b32      	ldr	r3, [pc, #200]	; (800bbe0 <__swsetup_r+0xcc>)
 800bb16:	b570      	push	{r4, r5, r6, lr}
 800bb18:	681d      	ldr	r5, [r3, #0]
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	460c      	mov	r4, r1
 800bb1e:	b125      	cbz	r5, 800bb2a <__swsetup_r+0x16>
 800bb20:	69ab      	ldr	r3, [r5, #24]
 800bb22:	b913      	cbnz	r3, 800bb2a <__swsetup_r+0x16>
 800bb24:	4628      	mov	r0, r5
 800bb26:	f000 f981 	bl	800be2c <__sinit>
 800bb2a:	4b2e      	ldr	r3, [pc, #184]	; (800bbe4 <__swsetup_r+0xd0>)
 800bb2c:	429c      	cmp	r4, r3
 800bb2e:	d10f      	bne.n	800bb50 <__swsetup_r+0x3c>
 800bb30:	686c      	ldr	r4, [r5, #4]
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb38:	0719      	lsls	r1, r3, #28
 800bb3a:	d42c      	bmi.n	800bb96 <__swsetup_r+0x82>
 800bb3c:	06dd      	lsls	r5, r3, #27
 800bb3e:	d411      	bmi.n	800bb64 <__swsetup_r+0x50>
 800bb40:	2309      	movs	r3, #9
 800bb42:	6033      	str	r3, [r6, #0]
 800bb44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb48:	f04f 30ff 	mov.w	r0, #4294967295
 800bb4c:	81a3      	strh	r3, [r4, #12]
 800bb4e:	e03e      	b.n	800bbce <__swsetup_r+0xba>
 800bb50:	4b25      	ldr	r3, [pc, #148]	; (800bbe8 <__swsetup_r+0xd4>)
 800bb52:	429c      	cmp	r4, r3
 800bb54:	d101      	bne.n	800bb5a <__swsetup_r+0x46>
 800bb56:	68ac      	ldr	r4, [r5, #8]
 800bb58:	e7eb      	b.n	800bb32 <__swsetup_r+0x1e>
 800bb5a:	4b24      	ldr	r3, [pc, #144]	; (800bbec <__swsetup_r+0xd8>)
 800bb5c:	429c      	cmp	r4, r3
 800bb5e:	bf08      	it	eq
 800bb60:	68ec      	ldreq	r4, [r5, #12]
 800bb62:	e7e6      	b.n	800bb32 <__swsetup_r+0x1e>
 800bb64:	0758      	lsls	r0, r3, #29
 800bb66:	d512      	bpl.n	800bb8e <__swsetup_r+0x7a>
 800bb68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb6a:	b141      	cbz	r1, 800bb7e <__swsetup_r+0x6a>
 800bb6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb70:	4299      	cmp	r1, r3
 800bb72:	d002      	beq.n	800bb7a <__swsetup_r+0x66>
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff fa45 	bl	800b004 <_free_r>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb84:	81a3      	strh	r3, [r4, #12]
 800bb86:	2300      	movs	r3, #0
 800bb88:	6063      	str	r3, [r4, #4]
 800bb8a:	6923      	ldr	r3, [r4, #16]
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	f043 0308 	orr.w	r3, r3, #8
 800bb94:	81a3      	strh	r3, [r4, #12]
 800bb96:	6923      	ldr	r3, [r4, #16]
 800bb98:	b94b      	cbnz	r3, 800bbae <__swsetup_r+0x9a>
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bba4:	d003      	beq.n	800bbae <__swsetup_r+0x9a>
 800bba6:	4621      	mov	r1, r4
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f000 fa05 	bl	800bfb8 <__smakebuf_r>
 800bbae:	89a0      	ldrh	r0, [r4, #12]
 800bbb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbb4:	f010 0301 	ands.w	r3, r0, #1
 800bbb8:	d00a      	beq.n	800bbd0 <__swsetup_r+0xbc>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	60a3      	str	r3, [r4, #8]
 800bbbe:	6963      	ldr	r3, [r4, #20]
 800bbc0:	425b      	negs	r3, r3
 800bbc2:	61a3      	str	r3, [r4, #24]
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	b943      	cbnz	r3, 800bbda <__swsetup_r+0xc6>
 800bbc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbcc:	d1ba      	bne.n	800bb44 <__swsetup_r+0x30>
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	0781      	lsls	r1, r0, #30
 800bbd2:	bf58      	it	pl
 800bbd4:	6963      	ldrpl	r3, [r4, #20]
 800bbd6:	60a3      	str	r3, [r4, #8]
 800bbd8:	e7f4      	b.n	800bbc4 <__swsetup_r+0xb0>
 800bbda:	2000      	movs	r0, #0
 800bbdc:	e7f7      	b.n	800bbce <__swsetup_r+0xba>
 800bbde:	bf00      	nop
 800bbe0:	2000016c 	.word	0x2000016c
 800bbe4:	0800c5d8 	.word	0x0800c5d8
 800bbe8:	0800c5f8 	.word	0x0800c5f8
 800bbec:	0800c5b8 	.word	0x0800c5b8

0800bbf0 <abort>:
 800bbf0:	2006      	movs	r0, #6
 800bbf2:	b508      	push	{r3, lr}
 800bbf4:	f000 faba 	bl	800c16c <raise>
 800bbf8:	2001      	movs	r0, #1
 800bbfa:	f7f5 ff10 	bl	8001a1e <_exit>
	...

0800bc00 <__sflush_r>:
 800bc00:	898a      	ldrh	r2, [r1, #12]
 800bc02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc04:	4605      	mov	r5, r0
 800bc06:	0710      	lsls	r0, r2, #28
 800bc08:	460c      	mov	r4, r1
 800bc0a:	d457      	bmi.n	800bcbc <__sflush_r+0xbc>
 800bc0c:	684b      	ldr	r3, [r1, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	dc04      	bgt.n	800bc1c <__sflush_r+0x1c>
 800bc12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	dc01      	bgt.n	800bc1c <__sflush_r+0x1c>
 800bc18:	2000      	movs	r0, #0
 800bc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc1e:	2e00      	cmp	r6, #0
 800bc20:	d0fa      	beq.n	800bc18 <__sflush_r+0x18>
 800bc22:	2300      	movs	r3, #0
 800bc24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc28:	682f      	ldr	r7, [r5, #0]
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	d032      	beq.n	800bc94 <__sflush_r+0x94>
 800bc2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	075a      	lsls	r2, r3, #29
 800bc34:	d505      	bpl.n	800bc42 <__sflush_r+0x42>
 800bc36:	6863      	ldr	r3, [r4, #4]
 800bc38:	1ac0      	subs	r0, r0, r3
 800bc3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc3c:	b10b      	cbz	r3, 800bc42 <__sflush_r+0x42>
 800bc3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc40:	1ac0      	subs	r0, r0, r3
 800bc42:	2300      	movs	r3, #0
 800bc44:	4602      	mov	r2, r0
 800bc46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc48:	4628      	mov	r0, r5
 800bc4a:	6a21      	ldr	r1, [r4, #32]
 800bc4c:	47b0      	blx	r6
 800bc4e:	1c43      	adds	r3, r0, #1
 800bc50:	89a3      	ldrh	r3, [r4, #12]
 800bc52:	d106      	bne.n	800bc62 <__sflush_r+0x62>
 800bc54:	6829      	ldr	r1, [r5, #0]
 800bc56:	291d      	cmp	r1, #29
 800bc58:	d82c      	bhi.n	800bcb4 <__sflush_r+0xb4>
 800bc5a:	4a29      	ldr	r2, [pc, #164]	; (800bd00 <__sflush_r+0x100>)
 800bc5c:	40ca      	lsrs	r2, r1
 800bc5e:	07d6      	lsls	r6, r2, #31
 800bc60:	d528      	bpl.n	800bcb4 <__sflush_r+0xb4>
 800bc62:	2200      	movs	r2, #0
 800bc64:	6062      	str	r2, [r4, #4]
 800bc66:	6922      	ldr	r2, [r4, #16]
 800bc68:	04d9      	lsls	r1, r3, #19
 800bc6a:	6022      	str	r2, [r4, #0]
 800bc6c:	d504      	bpl.n	800bc78 <__sflush_r+0x78>
 800bc6e:	1c42      	adds	r2, r0, #1
 800bc70:	d101      	bne.n	800bc76 <__sflush_r+0x76>
 800bc72:	682b      	ldr	r3, [r5, #0]
 800bc74:	b903      	cbnz	r3, 800bc78 <__sflush_r+0x78>
 800bc76:	6560      	str	r0, [r4, #84]	; 0x54
 800bc78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc7a:	602f      	str	r7, [r5, #0]
 800bc7c:	2900      	cmp	r1, #0
 800bc7e:	d0cb      	beq.n	800bc18 <__sflush_r+0x18>
 800bc80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc84:	4299      	cmp	r1, r3
 800bc86:	d002      	beq.n	800bc8e <__sflush_r+0x8e>
 800bc88:	4628      	mov	r0, r5
 800bc8a:	f7ff f9bb 	bl	800b004 <_free_r>
 800bc8e:	2000      	movs	r0, #0
 800bc90:	6360      	str	r0, [r4, #52]	; 0x34
 800bc92:	e7c2      	b.n	800bc1a <__sflush_r+0x1a>
 800bc94:	6a21      	ldr	r1, [r4, #32]
 800bc96:	2301      	movs	r3, #1
 800bc98:	4628      	mov	r0, r5
 800bc9a:	47b0      	blx	r6
 800bc9c:	1c41      	adds	r1, r0, #1
 800bc9e:	d1c7      	bne.n	800bc30 <__sflush_r+0x30>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d0c4      	beq.n	800bc30 <__sflush_r+0x30>
 800bca6:	2b1d      	cmp	r3, #29
 800bca8:	d001      	beq.n	800bcae <__sflush_r+0xae>
 800bcaa:	2b16      	cmp	r3, #22
 800bcac:	d101      	bne.n	800bcb2 <__sflush_r+0xb2>
 800bcae:	602f      	str	r7, [r5, #0]
 800bcb0:	e7b2      	b.n	800bc18 <__sflush_r+0x18>
 800bcb2:	89a3      	ldrh	r3, [r4, #12]
 800bcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcb8:	81a3      	strh	r3, [r4, #12]
 800bcba:	e7ae      	b.n	800bc1a <__sflush_r+0x1a>
 800bcbc:	690f      	ldr	r7, [r1, #16]
 800bcbe:	2f00      	cmp	r7, #0
 800bcc0:	d0aa      	beq.n	800bc18 <__sflush_r+0x18>
 800bcc2:	0793      	lsls	r3, r2, #30
 800bcc4:	bf18      	it	ne
 800bcc6:	2300      	movne	r3, #0
 800bcc8:	680e      	ldr	r6, [r1, #0]
 800bcca:	bf08      	it	eq
 800bccc:	694b      	ldreq	r3, [r1, #20]
 800bcce:	1bf6      	subs	r6, r6, r7
 800bcd0:	600f      	str	r7, [r1, #0]
 800bcd2:	608b      	str	r3, [r1, #8]
 800bcd4:	2e00      	cmp	r6, #0
 800bcd6:	dd9f      	ble.n	800bc18 <__sflush_r+0x18>
 800bcd8:	4633      	mov	r3, r6
 800bcda:	463a      	mov	r2, r7
 800bcdc:	4628      	mov	r0, r5
 800bcde:	6a21      	ldr	r1, [r4, #32]
 800bce0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bce4:	47e0      	blx	ip
 800bce6:	2800      	cmp	r0, #0
 800bce8:	dc06      	bgt.n	800bcf8 <__sflush_r+0xf8>
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf4:	81a3      	strh	r3, [r4, #12]
 800bcf6:	e790      	b.n	800bc1a <__sflush_r+0x1a>
 800bcf8:	4407      	add	r7, r0
 800bcfa:	1a36      	subs	r6, r6, r0
 800bcfc:	e7ea      	b.n	800bcd4 <__sflush_r+0xd4>
 800bcfe:	bf00      	nop
 800bd00:	20400001 	.word	0x20400001

0800bd04 <_fflush_r>:
 800bd04:	b538      	push	{r3, r4, r5, lr}
 800bd06:	690b      	ldr	r3, [r1, #16]
 800bd08:	4605      	mov	r5, r0
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	b913      	cbnz	r3, 800bd14 <_fflush_r+0x10>
 800bd0e:	2500      	movs	r5, #0
 800bd10:	4628      	mov	r0, r5
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	b118      	cbz	r0, 800bd1e <_fflush_r+0x1a>
 800bd16:	6983      	ldr	r3, [r0, #24]
 800bd18:	b90b      	cbnz	r3, 800bd1e <_fflush_r+0x1a>
 800bd1a:	f000 f887 	bl	800be2c <__sinit>
 800bd1e:	4b14      	ldr	r3, [pc, #80]	; (800bd70 <_fflush_r+0x6c>)
 800bd20:	429c      	cmp	r4, r3
 800bd22:	d11b      	bne.n	800bd5c <_fflush_r+0x58>
 800bd24:	686c      	ldr	r4, [r5, #4]
 800bd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d0ef      	beq.n	800bd0e <_fflush_r+0xa>
 800bd2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd30:	07d0      	lsls	r0, r2, #31
 800bd32:	d404      	bmi.n	800bd3e <_fflush_r+0x3a>
 800bd34:	0599      	lsls	r1, r3, #22
 800bd36:	d402      	bmi.n	800bd3e <_fflush_r+0x3a>
 800bd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd3a:	f000 f915 	bl	800bf68 <__retarget_lock_acquire_recursive>
 800bd3e:	4628      	mov	r0, r5
 800bd40:	4621      	mov	r1, r4
 800bd42:	f7ff ff5d 	bl	800bc00 <__sflush_r>
 800bd46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd48:	4605      	mov	r5, r0
 800bd4a:	07da      	lsls	r2, r3, #31
 800bd4c:	d4e0      	bmi.n	800bd10 <_fflush_r+0xc>
 800bd4e:	89a3      	ldrh	r3, [r4, #12]
 800bd50:	059b      	lsls	r3, r3, #22
 800bd52:	d4dd      	bmi.n	800bd10 <_fflush_r+0xc>
 800bd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd56:	f000 f908 	bl	800bf6a <__retarget_lock_release_recursive>
 800bd5a:	e7d9      	b.n	800bd10 <_fflush_r+0xc>
 800bd5c:	4b05      	ldr	r3, [pc, #20]	; (800bd74 <_fflush_r+0x70>)
 800bd5e:	429c      	cmp	r4, r3
 800bd60:	d101      	bne.n	800bd66 <_fflush_r+0x62>
 800bd62:	68ac      	ldr	r4, [r5, #8]
 800bd64:	e7df      	b.n	800bd26 <_fflush_r+0x22>
 800bd66:	4b04      	ldr	r3, [pc, #16]	; (800bd78 <_fflush_r+0x74>)
 800bd68:	429c      	cmp	r4, r3
 800bd6a:	bf08      	it	eq
 800bd6c:	68ec      	ldreq	r4, [r5, #12]
 800bd6e:	e7da      	b.n	800bd26 <_fflush_r+0x22>
 800bd70:	0800c5d8 	.word	0x0800c5d8
 800bd74:	0800c5f8 	.word	0x0800c5f8
 800bd78:	0800c5b8 	.word	0x0800c5b8

0800bd7c <std>:
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	b510      	push	{r4, lr}
 800bd80:	4604      	mov	r4, r0
 800bd82:	e9c0 3300 	strd	r3, r3, [r0]
 800bd86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd8a:	6083      	str	r3, [r0, #8]
 800bd8c:	8181      	strh	r1, [r0, #12]
 800bd8e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd90:	81c2      	strh	r2, [r0, #14]
 800bd92:	6183      	str	r3, [r0, #24]
 800bd94:	4619      	mov	r1, r3
 800bd96:	2208      	movs	r2, #8
 800bd98:	305c      	adds	r0, #92	; 0x5c
 800bd9a:	f7fe ffe9 	bl	800ad70 <memset>
 800bd9e:	4b05      	ldr	r3, [pc, #20]	; (800bdb4 <std+0x38>)
 800bda0:	6224      	str	r4, [r4, #32]
 800bda2:	6263      	str	r3, [r4, #36]	; 0x24
 800bda4:	4b04      	ldr	r3, [pc, #16]	; (800bdb8 <std+0x3c>)
 800bda6:	62a3      	str	r3, [r4, #40]	; 0x28
 800bda8:	4b04      	ldr	r3, [pc, #16]	; (800bdbc <std+0x40>)
 800bdaa:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdac:	4b04      	ldr	r3, [pc, #16]	; (800bdc0 <std+0x44>)
 800bdae:	6323      	str	r3, [r4, #48]	; 0x30
 800bdb0:	bd10      	pop	{r4, pc}
 800bdb2:	bf00      	nop
 800bdb4:	0800c1a5 	.word	0x0800c1a5
 800bdb8:	0800c1c7 	.word	0x0800c1c7
 800bdbc:	0800c1ff 	.word	0x0800c1ff
 800bdc0:	0800c223 	.word	0x0800c223

0800bdc4 <_cleanup_r>:
 800bdc4:	4901      	ldr	r1, [pc, #4]	; (800bdcc <_cleanup_r+0x8>)
 800bdc6:	f000 b8af 	b.w	800bf28 <_fwalk_reent>
 800bdca:	bf00      	nop
 800bdcc:	0800bd05 	.word	0x0800bd05

0800bdd0 <__sfmoreglue>:
 800bdd0:	2268      	movs	r2, #104	; 0x68
 800bdd2:	b570      	push	{r4, r5, r6, lr}
 800bdd4:	1e4d      	subs	r5, r1, #1
 800bdd6:	4355      	muls	r5, r2
 800bdd8:	460e      	mov	r6, r1
 800bdda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdde:	f7ff f979 	bl	800b0d4 <_malloc_r>
 800bde2:	4604      	mov	r4, r0
 800bde4:	b140      	cbz	r0, 800bdf8 <__sfmoreglue+0x28>
 800bde6:	2100      	movs	r1, #0
 800bde8:	e9c0 1600 	strd	r1, r6, [r0]
 800bdec:	300c      	adds	r0, #12
 800bdee:	60a0      	str	r0, [r4, #8]
 800bdf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdf4:	f7fe ffbc 	bl	800ad70 <memset>
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	bd70      	pop	{r4, r5, r6, pc}

0800bdfc <__sfp_lock_acquire>:
 800bdfc:	4801      	ldr	r0, [pc, #4]	; (800be04 <__sfp_lock_acquire+0x8>)
 800bdfe:	f000 b8b3 	b.w	800bf68 <__retarget_lock_acquire_recursive>
 800be02:	bf00      	nop
 800be04:	20000bb5 	.word	0x20000bb5

0800be08 <__sfp_lock_release>:
 800be08:	4801      	ldr	r0, [pc, #4]	; (800be10 <__sfp_lock_release+0x8>)
 800be0a:	f000 b8ae 	b.w	800bf6a <__retarget_lock_release_recursive>
 800be0e:	bf00      	nop
 800be10:	20000bb5 	.word	0x20000bb5

0800be14 <__sinit_lock_acquire>:
 800be14:	4801      	ldr	r0, [pc, #4]	; (800be1c <__sinit_lock_acquire+0x8>)
 800be16:	f000 b8a7 	b.w	800bf68 <__retarget_lock_acquire_recursive>
 800be1a:	bf00      	nop
 800be1c:	20000bb6 	.word	0x20000bb6

0800be20 <__sinit_lock_release>:
 800be20:	4801      	ldr	r0, [pc, #4]	; (800be28 <__sinit_lock_release+0x8>)
 800be22:	f000 b8a2 	b.w	800bf6a <__retarget_lock_release_recursive>
 800be26:	bf00      	nop
 800be28:	20000bb6 	.word	0x20000bb6

0800be2c <__sinit>:
 800be2c:	b510      	push	{r4, lr}
 800be2e:	4604      	mov	r4, r0
 800be30:	f7ff fff0 	bl	800be14 <__sinit_lock_acquire>
 800be34:	69a3      	ldr	r3, [r4, #24]
 800be36:	b11b      	cbz	r3, 800be40 <__sinit+0x14>
 800be38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be3c:	f7ff bff0 	b.w	800be20 <__sinit_lock_release>
 800be40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be44:	6523      	str	r3, [r4, #80]	; 0x50
 800be46:	4b13      	ldr	r3, [pc, #76]	; (800be94 <__sinit+0x68>)
 800be48:	4a13      	ldr	r2, [pc, #76]	; (800be98 <__sinit+0x6c>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800be4e:	42a3      	cmp	r3, r4
 800be50:	bf08      	it	eq
 800be52:	2301      	moveq	r3, #1
 800be54:	4620      	mov	r0, r4
 800be56:	bf08      	it	eq
 800be58:	61a3      	streq	r3, [r4, #24]
 800be5a:	f000 f81f 	bl	800be9c <__sfp>
 800be5e:	6060      	str	r0, [r4, #4]
 800be60:	4620      	mov	r0, r4
 800be62:	f000 f81b 	bl	800be9c <__sfp>
 800be66:	60a0      	str	r0, [r4, #8]
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 f817 	bl	800be9c <__sfp>
 800be6e:	2200      	movs	r2, #0
 800be70:	2104      	movs	r1, #4
 800be72:	60e0      	str	r0, [r4, #12]
 800be74:	6860      	ldr	r0, [r4, #4]
 800be76:	f7ff ff81 	bl	800bd7c <std>
 800be7a:	2201      	movs	r2, #1
 800be7c:	2109      	movs	r1, #9
 800be7e:	68a0      	ldr	r0, [r4, #8]
 800be80:	f7ff ff7c 	bl	800bd7c <std>
 800be84:	2202      	movs	r2, #2
 800be86:	2112      	movs	r1, #18
 800be88:	68e0      	ldr	r0, [r4, #12]
 800be8a:	f7ff ff77 	bl	800bd7c <std>
 800be8e:	2301      	movs	r3, #1
 800be90:	61a3      	str	r3, [r4, #24]
 800be92:	e7d1      	b.n	800be38 <__sinit+0xc>
 800be94:	0800c3d0 	.word	0x0800c3d0
 800be98:	0800bdc5 	.word	0x0800bdc5

0800be9c <__sfp>:
 800be9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9e:	4607      	mov	r7, r0
 800bea0:	f7ff ffac 	bl	800bdfc <__sfp_lock_acquire>
 800bea4:	4b1e      	ldr	r3, [pc, #120]	; (800bf20 <__sfp+0x84>)
 800bea6:	681e      	ldr	r6, [r3, #0]
 800bea8:	69b3      	ldr	r3, [r6, #24]
 800beaa:	b913      	cbnz	r3, 800beb2 <__sfp+0x16>
 800beac:	4630      	mov	r0, r6
 800beae:	f7ff ffbd 	bl	800be2c <__sinit>
 800beb2:	3648      	adds	r6, #72	; 0x48
 800beb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800beb8:	3b01      	subs	r3, #1
 800beba:	d503      	bpl.n	800bec4 <__sfp+0x28>
 800bebc:	6833      	ldr	r3, [r6, #0]
 800bebe:	b30b      	cbz	r3, 800bf04 <__sfp+0x68>
 800bec0:	6836      	ldr	r6, [r6, #0]
 800bec2:	e7f7      	b.n	800beb4 <__sfp+0x18>
 800bec4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bec8:	b9d5      	cbnz	r5, 800bf00 <__sfp+0x64>
 800beca:	4b16      	ldr	r3, [pc, #88]	; (800bf24 <__sfp+0x88>)
 800becc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bed0:	60e3      	str	r3, [r4, #12]
 800bed2:	6665      	str	r5, [r4, #100]	; 0x64
 800bed4:	f000 f847 	bl	800bf66 <__retarget_lock_init_recursive>
 800bed8:	f7ff ff96 	bl	800be08 <__sfp_lock_release>
 800bedc:	2208      	movs	r2, #8
 800bede:	4629      	mov	r1, r5
 800bee0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bee4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bee8:	6025      	str	r5, [r4, #0]
 800beea:	61a5      	str	r5, [r4, #24]
 800beec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bef0:	f7fe ff3e 	bl	800ad70 <memset>
 800bef4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bef8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800befc:	4620      	mov	r0, r4
 800befe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf00:	3468      	adds	r4, #104	; 0x68
 800bf02:	e7d9      	b.n	800beb8 <__sfp+0x1c>
 800bf04:	2104      	movs	r1, #4
 800bf06:	4638      	mov	r0, r7
 800bf08:	f7ff ff62 	bl	800bdd0 <__sfmoreglue>
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	6030      	str	r0, [r6, #0]
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d1d5      	bne.n	800bec0 <__sfp+0x24>
 800bf14:	f7ff ff78 	bl	800be08 <__sfp_lock_release>
 800bf18:	230c      	movs	r3, #12
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	e7ee      	b.n	800befc <__sfp+0x60>
 800bf1e:	bf00      	nop
 800bf20:	0800c3d0 	.word	0x0800c3d0
 800bf24:	ffff0001 	.word	0xffff0001

0800bf28 <_fwalk_reent>:
 800bf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf2c:	4606      	mov	r6, r0
 800bf2e:	4688      	mov	r8, r1
 800bf30:	2700      	movs	r7, #0
 800bf32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf3a:	f1b9 0901 	subs.w	r9, r9, #1
 800bf3e:	d505      	bpl.n	800bf4c <_fwalk_reent+0x24>
 800bf40:	6824      	ldr	r4, [r4, #0]
 800bf42:	2c00      	cmp	r4, #0
 800bf44:	d1f7      	bne.n	800bf36 <_fwalk_reent+0xe>
 800bf46:	4638      	mov	r0, r7
 800bf48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf4c:	89ab      	ldrh	r3, [r5, #12]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d907      	bls.n	800bf62 <_fwalk_reent+0x3a>
 800bf52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf56:	3301      	adds	r3, #1
 800bf58:	d003      	beq.n	800bf62 <_fwalk_reent+0x3a>
 800bf5a:	4629      	mov	r1, r5
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	47c0      	blx	r8
 800bf60:	4307      	orrs	r7, r0
 800bf62:	3568      	adds	r5, #104	; 0x68
 800bf64:	e7e9      	b.n	800bf3a <_fwalk_reent+0x12>

0800bf66 <__retarget_lock_init_recursive>:
 800bf66:	4770      	bx	lr

0800bf68 <__retarget_lock_acquire_recursive>:
 800bf68:	4770      	bx	lr

0800bf6a <__retarget_lock_release_recursive>:
 800bf6a:	4770      	bx	lr

0800bf6c <__swhatbuf_r>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	460e      	mov	r6, r1
 800bf70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf74:	4614      	mov	r4, r2
 800bf76:	2900      	cmp	r1, #0
 800bf78:	461d      	mov	r5, r3
 800bf7a:	b096      	sub	sp, #88	; 0x58
 800bf7c:	da08      	bge.n	800bf90 <__swhatbuf_r+0x24>
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf84:	602a      	str	r2, [r5, #0]
 800bf86:	061a      	lsls	r2, r3, #24
 800bf88:	d410      	bmi.n	800bfac <__swhatbuf_r+0x40>
 800bf8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf8e:	e00e      	b.n	800bfae <__swhatbuf_r+0x42>
 800bf90:	466a      	mov	r2, sp
 800bf92:	f000 f96d 	bl	800c270 <_fstat_r>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	dbf1      	blt.n	800bf7e <__swhatbuf_r+0x12>
 800bf9a:	9a01      	ldr	r2, [sp, #4]
 800bf9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bfa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bfa4:	425a      	negs	r2, r3
 800bfa6:	415a      	adcs	r2, r3
 800bfa8:	602a      	str	r2, [r5, #0]
 800bfaa:	e7ee      	b.n	800bf8a <__swhatbuf_r+0x1e>
 800bfac:	2340      	movs	r3, #64	; 0x40
 800bfae:	2000      	movs	r0, #0
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	b016      	add	sp, #88	; 0x58
 800bfb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bfb8 <__smakebuf_r>:
 800bfb8:	898b      	ldrh	r3, [r1, #12]
 800bfba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfbc:	079d      	lsls	r5, r3, #30
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	d507      	bpl.n	800bfd4 <__smakebuf_r+0x1c>
 800bfc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfc8:	6023      	str	r3, [r4, #0]
 800bfca:	6123      	str	r3, [r4, #16]
 800bfcc:	2301      	movs	r3, #1
 800bfce:	6163      	str	r3, [r4, #20]
 800bfd0:	b002      	add	sp, #8
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	466a      	mov	r2, sp
 800bfd6:	ab01      	add	r3, sp, #4
 800bfd8:	f7ff ffc8 	bl	800bf6c <__swhatbuf_r>
 800bfdc:	9900      	ldr	r1, [sp, #0]
 800bfde:	4605      	mov	r5, r0
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	f7ff f877 	bl	800b0d4 <_malloc_r>
 800bfe6:	b948      	cbnz	r0, 800bffc <__smakebuf_r+0x44>
 800bfe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfec:	059a      	lsls	r2, r3, #22
 800bfee:	d4ef      	bmi.n	800bfd0 <__smakebuf_r+0x18>
 800bff0:	f023 0303 	bic.w	r3, r3, #3
 800bff4:	f043 0302 	orr.w	r3, r3, #2
 800bff8:	81a3      	strh	r3, [r4, #12]
 800bffa:	e7e3      	b.n	800bfc4 <__smakebuf_r+0xc>
 800bffc:	4b0d      	ldr	r3, [pc, #52]	; (800c034 <__smakebuf_r+0x7c>)
 800bffe:	62b3      	str	r3, [r6, #40]	; 0x28
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	6020      	str	r0, [r4, #0]
 800c004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c008:	81a3      	strh	r3, [r4, #12]
 800c00a:	9b00      	ldr	r3, [sp, #0]
 800c00c:	6120      	str	r0, [r4, #16]
 800c00e:	6163      	str	r3, [r4, #20]
 800c010:	9b01      	ldr	r3, [sp, #4]
 800c012:	b15b      	cbz	r3, 800c02c <__smakebuf_r+0x74>
 800c014:	4630      	mov	r0, r6
 800c016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c01a:	f000 f93b 	bl	800c294 <_isatty_r>
 800c01e:	b128      	cbz	r0, 800c02c <__smakebuf_r+0x74>
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	f023 0303 	bic.w	r3, r3, #3
 800c026:	f043 0301 	orr.w	r3, r3, #1
 800c02a:	81a3      	strh	r3, [r4, #12]
 800c02c:	89a0      	ldrh	r0, [r4, #12]
 800c02e:	4305      	orrs	r5, r0
 800c030:	81a5      	strh	r5, [r4, #12]
 800c032:	e7cd      	b.n	800bfd0 <__smakebuf_r+0x18>
 800c034:	0800bdc5 	.word	0x0800bdc5

0800c038 <memchr>:
 800c038:	4603      	mov	r3, r0
 800c03a:	b510      	push	{r4, lr}
 800c03c:	b2c9      	uxtb	r1, r1
 800c03e:	4402      	add	r2, r0
 800c040:	4293      	cmp	r3, r2
 800c042:	4618      	mov	r0, r3
 800c044:	d101      	bne.n	800c04a <memchr+0x12>
 800c046:	2000      	movs	r0, #0
 800c048:	e003      	b.n	800c052 <memchr+0x1a>
 800c04a:	7804      	ldrb	r4, [r0, #0]
 800c04c:	3301      	adds	r3, #1
 800c04e:	428c      	cmp	r4, r1
 800c050:	d1f6      	bne.n	800c040 <memchr+0x8>
 800c052:	bd10      	pop	{r4, pc}

0800c054 <memcpy>:
 800c054:	440a      	add	r2, r1
 800c056:	4291      	cmp	r1, r2
 800c058:	f100 33ff 	add.w	r3, r0, #4294967295
 800c05c:	d100      	bne.n	800c060 <memcpy+0xc>
 800c05e:	4770      	bx	lr
 800c060:	b510      	push	{r4, lr}
 800c062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c066:	4291      	cmp	r1, r2
 800c068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c06c:	d1f9      	bne.n	800c062 <memcpy+0xe>
 800c06e:	bd10      	pop	{r4, pc}

0800c070 <memmove>:
 800c070:	4288      	cmp	r0, r1
 800c072:	b510      	push	{r4, lr}
 800c074:	eb01 0402 	add.w	r4, r1, r2
 800c078:	d902      	bls.n	800c080 <memmove+0x10>
 800c07a:	4284      	cmp	r4, r0
 800c07c:	4623      	mov	r3, r4
 800c07e:	d807      	bhi.n	800c090 <memmove+0x20>
 800c080:	1e43      	subs	r3, r0, #1
 800c082:	42a1      	cmp	r1, r4
 800c084:	d008      	beq.n	800c098 <memmove+0x28>
 800c086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c08a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c08e:	e7f8      	b.n	800c082 <memmove+0x12>
 800c090:	4601      	mov	r1, r0
 800c092:	4402      	add	r2, r0
 800c094:	428a      	cmp	r2, r1
 800c096:	d100      	bne.n	800c09a <memmove+0x2a>
 800c098:	bd10      	pop	{r4, pc}
 800c09a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c09e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0a2:	e7f7      	b.n	800c094 <memmove+0x24>

0800c0a4 <__malloc_lock>:
 800c0a4:	4801      	ldr	r0, [pc, #4]	; (800c0ac <__malloc_lock+0x8>)
 800c0a6:	f7ff bf5f 	b.w	800bf68 <__retarget_lock_acquire_recursive>
 800c0aa:	bf00      	nop
 800c0ac:	20000bb4 	.word	0x20000bb4

0800c0b0 <__malloc_unlock>:
 800c0b0:	4801      	ldr	r0, [pc, #4]	; (800c0b8 <__malloc_unlock+0x8>)
 800c0b2:	f7ff bf5a 	b.w	800bf6a <__retarget_lock_release_recursive>
 800c0b6:	bf00      	nop
 800c0b8:	20000bb4 	.word	0x20000bb4

0800c0bc <_realloc_r>:
 800c0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c0:	4680      	mov	r8, r0
 800c0c2:	4614      	mov	r4, r2
 800c0c4:	460e      	mov	r6, r1
 800c0c6:	b921      	cbnz	r1, 800c0d2 <_realloc_r+0x16>
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ce:	f7ff b801 	b.w	800b0d4 <_malloc_r>
 800c0d2:	b92a      	cbnz	r2, 800c0e0 <_realloc_r+0x24>
 800c0d4:	f7fe ff96 	bl	800b004 <_free_r>
 800c0d8:	4625      	mov	r5, r4
 800c0da:	4628      	mov	r0, r5
 800c0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e0:	f000 f8fa 	bl	800c2d8 <_malloc_usable_size_r>
 800c0e4:	4284      	cmp	r4, r0
 800c0e6:	4607      	mov	r7, r0
 800c0e8:	d802      	bhi.n	800c0f0 <_realloc_r+0x34>
 800c0ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0ee:	d812      	bhi.n	800c116 <_realloc_r+0x5a>
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	4640      	mov	r0, r8
 800c0f4:	f7fe ffee 	bl	800b0d4 <_malloc_r>
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d0ed      	beq.n	800c0da <_realloc_r+0x1e>
 800c0fe:	42bc      	cmp	r4, r7
 800c100:	4622      	mov	r2, r4
 800c102:	4631      	mov	r1, r6
 800c104:	bf28      	it	cs
 800c106:	463a      	movcs	r2, r7
 800c108:	f7ff ffa4 	bl	800c054 <memcpy>
 800c10c:	4631      	mov	r1, r6
 800c10e:	4640      	mov	r0, r8
 800c110:	f7fe ff78 	bl	800b004 <_free_r>
 800c114:	e7e1      	b.n	800c0da <_realloc_r+0x1e>
 800c116:	4635      	mov	r5, r6
 800c118:	e7df      	b.n	800c0da <_realloc_r+0x1e>

0800c11a <_raise_r>:
 800c11a:	291f      	cmp	r1, #31
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4604      	mov	r4, r0
 800c120:	460d      	mov	r5, r1
 800c122:	d904      	bls.n	800c12e <_raise_r+0x14>
 800c124:	2316      	movs	r3, #22
 800c126:	6003      	str	r3, [r0, #0]
 800c128:	f04f 30ff 	mov.w	r0, #4294967295
 800c12c:	bd38      	pop	{r3, r4, r5, pc}
 800c12e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c130:	b112      	cbz	r2, 800c138 <_raise_r+0x1e>
 800c132:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c136:	b94b      	cbnz	r3, 800c14c <_raise_r+0x32>
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 f831 	bl	800c1a0 <_getpid_r>
 800c13e:	462a      	mov	r2, r5
 800c140:	4601      	mov	r1, r0
 800c142:	4620      	mov	r0, r4
 800c144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c148:	f000 b818 	b.w	800c17c <_kill_r>
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d00a      	beq.n	800c166 <_raise_r+0x4c>
 800c150:	1c59      	adds	r1, r3, #1
 800c152:	d103      	bne.n	800c15c <_raise_r+0x42>
 800c154:	2316      	movs	r3, #22
 800c156:	6003      	str	r3, [r0, #0]
 800c158:	2001      	movs	r0, #1
 800c15a:	e7e7      	b.n	800c12c <_raise_r+0x12>
 800c15c:	2400      	movs	r4, #0
 800c15e:	4628      	mov	r0, r5
 800c160:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c164:	4798      	blx	r3
 800c166:	2000      	movs	r0, #0
 800c168:	e7e0      	b.n	800c12c <_raise_r+0x12>
	...

0800c16c <raise>:
 800c16c:	4b02      	ldr	r3, [pc, #8]	; (800c178 <raise+0xc>)
 800c16e:	4601      	mov	r1, r0
 800c170:	6818      	ldr	r0, [r3, #0]
 800c172:	f7ff bfd2 	b.w	800c11a <_raise_r>
 800c176:	bf00      	nop
 800c178:	2000016c 	.word	0x2000016c

0800c17c <_kill_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	2300      	movs	r3, #0
 800c180:	4d06      	ldr	r5, [pc, #24]	; (800c19c <_kill_r+0x20>)
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	4611      	mov	r1, r2
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	f7f5 fc38 	bl	80019fe <_kill>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	d102      	bne.n	800c198 <_kill_r+0x1c>
 800c192:	682b      	ldr	r3, [r5, #0]
 800c194:	b103      	cbz	r3, 800c198 <_kill_r+0x1c>
 800c196:	6023      	str	r3, [r4, #0]
 800c198:	bd38      	pop	{r3, r4, r5, pc}
 800c19a:	bf00      	nop
 800c19c:	20000bb8 	.word	0x20000bb8

0800c1a0 <_getpid_r>:
 800c1a0:	f7f5 bc26 	b.w	80019f0 <_getpid>

0800c1a4 <__sread>:
 800c1a4:	b510      	push	{r4, lr}
 800c1a6:	460c      	mov	r4, r1
 800c1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ac:	f000 f89c 	bl	800c2e8 <_read_r>
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	bfab      	itete	ge
 800c1b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1b6:	89a3      	ldrhlt	r3, [r4, #12]
 800c1b8:	181b      	addge	r3, r3, r0
 800c1ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1be:	bfac      	ite	ge
 800c1c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1c2:	81a3      	strhlt	r3, [r4, #12]
 800c1c4:	bd10      	pop	{r4, pc}

0800c1c6 <__swrite>:
 800c1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ca:	461f      	mov	r7, r3
 800c1cc:	898b      	ldrh	r3, [r1, #12]
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	05db      	lsls	r3, r3, #23
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	4616      	mov	r6, r2
 800c1d6:	d505      	bpl.n	800c1e4 <__swrite+0x1e>
 800c1d8:	2302      	movs	r3, #2
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e0:	f000 f868 	bl	800c2b4 <_lseek_r>
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	4632      	mov	r2, r6
 800c1e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1ec:	81a3      	strh	r3, [r4, #12]
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	463b      	mov	r3, r7
 800c1f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fa:	f000 b817 	b.w	800c22c <_write_r>

0800c1fe <__sseek>:
 800c1fe:	b510      	push	{r4, lr}
 800c200:	460c      	mov	r4, r1
 800c202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c206:	f000 f855 	bl	800c2b4 <_lseek_r>
 800c20a:	1c43      	adds	r3, r0, #1
 800c20c:	89a3      	ldrh	r3, [r4, #12]
 800c20e:	bf15      	itete	ne
 800c210:	6560      	strne	r0, [r4, #84]	; 0x54
 800c212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c21a:	81a3      	strheq	r3, [r4, #12]
 800c21c:	bf18      	it	ne
 800c21e:	81a3      	strhne	r3, [r4, #12]
 800c220:	bd10      	pop	{r4, pc}

0800c222 <__sclose>:
 800c222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c226:	f000 b813 	b.w	800c250 <_close_r>
	...

0800c22c <_write_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4604      	mov	r4, r0
 800c230:	4608      	mov	r0, r1
 800c232:	4611      	mov	r1, r2
 800c234:	2200      	movs	r2, #0
 800c236:	4d05      	ldr	r5, [pc, #20]	; (800c24c <_write_r+0x20>)
 800c238:	602a      	str	r2, [r5, #0]
 800c23a:	461a      	mov	r2, r3
 800c23c:	f7f5 fc16 	bl	8001a6c <_write>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_write_r+0x1e>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_write_r+0x1e>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	20000bb8 	.word	0x20000bb8

0800c250 <_close_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	2300      	movs	r3, #0
 800c254:	4d05      	ldr	r5, [pc, #20]	; (800c26c <_close_r+0x1c>)
 800c256:	4604      	mov	r4, r0
 800c258:	4608      	mov	r0, r1
 800c25a:	602b      	str	r3, [r5, #0]
 800c25c:	f7f5 fc22 	bl	8001aa4 <_close>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d102      	bne.n	800c26a <_close_r+0x1a>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	b103      	cbz	r3, 800c26a <_close_r+0x1a>
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	20000bb8 	.word	0x20000bb8

0800c270 <_fstat_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	2300      	movs	r3, #0
 800c274:	4d06      	ldr	r5, [pc, #24]	; (800c290 <_fstat_r+0x20>)
 800c276:	4604      	mov	r4, r0
 800c278:	4608      	mov	r0, r1
 800c27a:	4611      	mov	r1, r2
 800c27c:	602b      	str	r3, [r5, #0]
 800c27e:	f7f5 fc1c 	bl	8001aba <_fstat>
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	d102      	bne.n	800c28c <_fstat_r+0x1c>
 800c286:	682b      	ldr	r3, [r5, #0]
 800c288:	b103      	cbz	r3, 800c28c <_fstat_r+0x1c>
 800c28a:	6023      	str	r3, [r4, #0]
 800c28c:	bd38      	pop	{r3, r4, r5, pc}
 800c28e:	bf00      	nop
 800c290:	20000bb8 	.word	0x20000bb8

0800c294 <_isatty_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	2300      	movs	r3, #0
 800c298:	4d05      	ldr	r5, [pc, #20]	; (800c2b0 <_isatty_r+0x1c>)
 800c29a:	4604      	mov	r4, r0
 800c29c:	4608      	mov	r0, r1
 800c29e:	602b      	str	r3, [r5, #0]
 800c2a0:	f7f5 fc1a 	bl	8001ad8 <_isatty>
 800c2a4:	1c43      	adds	r3, r0, #1
 800c2a6:	d102      	bne.n	800c2ae <_isatty_r+0x1a>
 800c2a8:	682b      	ldr	r3, [r5, #0]
 800c2aa:	b103      	cbz	r3, 800c2ae <_isatty_r+0x1a>
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	bd38      	pop	{r3, r4, r5, pc}
 800c2b0:	20000bb8 	.word	0x20000bb8

0800c2b4 <_lseek_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	4608      	mov	r0, r1
 800c2ba:	4611      	mov	r1, r2
 800c2bc:	2200      	movs	r2, #0
 800c2be:	4d05      	ldr	r5, [pc, #20]	; (800c2d4 <_lseek_r+0x20>)
 800c2c0:	602a      	str	r2, [r5, #0]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	f7f5 fc12 	bl	8001aec <_lseek>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	d102      	bne.n	800c2d2 <_lseek_r+0x1e>
 800c2cc:	682b      	ldr	r3, [r5, #0]
 800c2ce:	b103      	cbz	r3, 800c2d2 <_lseek_r+0x1e>
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	20000bb8 	.word	0x20000bb8

0800c2d8 <_malloc_usable_size_r>:
 800c2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2dc:	1f18      	subs	r0, r3, #4
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	bfbc      	itt	lt
 800c2e2:	580b      	ldrlt	r3, [r1, r0]
 800c2e4:	18c0      	addlt	r0, r0, r3
 800c2e6:	4770      	bx	lr

0800c2e8 <_read_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	4608      	mov	r0, r1
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	4d05      	ldr	r5, [pc, #20]	; (800c308 <_read_r+0x20>)
 800c2f4:	602a      	str	r2, [r5, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f7f5 fb9b 	bl	8001a32 <_read>
 800c2fc:	1c43      	adds	r3, r0, #1
 800c2fe:	d102      	bne.n	800c306 <_read_r+0x1e>
 800c300:	682b      	ldr	r3, [r5, #0]
 800c302:	b103      	cbz	r3, 800c306 <_read_r+0x1e>
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	20000bb8 	.word	0x20000bb8

0800c30c <_init>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr

0800c318 <_fini>:
 800c318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31a:	bf00      	nop
 800c31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c31e:	bc08      	pop	{r3}
 800c320:	469e      	mov	lr, r3
 800c322:	4770      	bx	lr
